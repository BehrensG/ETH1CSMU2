
ETH1CSMU2_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028c74  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e50  08028e48  08028e48  00038e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802dc98  0802dc98  00040410  2**0
                  CONTENTS
  4 .ARM          00000008  0802dc98  0802dc98  0003dc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802dca0  0802dca0  00040410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802dca0  0802dca0  0003dca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802dca4  0802dca4  0003dca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0802dca8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200002d0  0802df78  000402d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000370  0802e018  00040370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001aa38  20000410  0802e0b8  00040410  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2001ae48  0802e0b8  0004ae48  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00040410  2**0
                  CONTENTS, READONLY
 14 .debug_info   0005587b  00000000  00000000  00040440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000cbda  00000000  00000000  00095cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003968  00000000  00000000  000a2898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003590  00000000  00000000  000a6200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00041f21  00000000  00000000  000a9790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00056b5e  00000000  00000000  000eb6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012b957  00000000  00000000  0014220f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0026db66  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00010320  00000000  00000000  0026dbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000410 	.word	0x20000410
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08028e2c 	.word	0x08028e2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000414 	.word	0x20000414
 800020c:	08028e2c 	.word	0x08028e2c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
return 0;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <LL_SYSCFG_SetEXTISource+0x58>)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	3302      	adds	r3, #2
 800108a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	43db      	mvns	r3, r3
 8001094:	ea02 0103 	and.w	r1, r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	0c1b      	lsrs	r3, r3, #16
 800109c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	fab3 f383 	clz	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	fa03 f202 	lsl.w	r2, r3, r2
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <LL_SYSCFG_SetEXTISource+0x58>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	430a      	orrs	r2, r1
 80010be:	3302      	adds	r3, #2
 80010c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40013800 	.word	0x40013800

080010d4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	613b      	str	r3, [r7, #16]
  return result;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	fab3 f383 	clz	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2103      	movs	r1, #3
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	401a      	ands	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	61bb      	str	r3, [r7, #24]
  return result;
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fab3 f383 	clz	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	431a      	orrs	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	601a      	str	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001132:	b480      	push	{r7}
 8001134:	b089      	sub	sp, #36	; 0x24
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	613b      	str	r3, [r7, #16]
  return result;
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2103      	movs	r1, #3
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	401a      	ands	r2, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	61bb      	str	r3, [r7, #24]
  return result;
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	fab3 f383 	clz	r3, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	431a      	orrs	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	60da      	str	r2, [r3, #12]
}
 8001184:	bf00      	nop
 8001186:	3724      	adds	r7, #36	; 0x24
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	619a      	str	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	4013      	ands	r3, r2
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43d9      	mvns	r1, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	400b      	ands	r3, r1
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4313      	orrs	r3, r2
 800120e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4013      	ands	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40023800 	.word	0x40023800

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001230:	f001 fbe0 	bl	80029f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001234:	f000 f85e 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001238:	f000 fa9c 	bl	8001774 <MX_GPIO_Init>
  MX_DMA_Init();
 800123c:	f000 fa7c 	bl	8001738 <MX_DMA_Init>
  MX_SPI3_Init();
 8001240:	f000 f9c0 	bl	80015c4 <MX_SPI3_Init>
  MX_SPI4_Init();
 8001244:	f000 f9fc 	bl	8001640 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001248:	f000 fa38 	bl	80016bc <MX_SPI5_Init>
  MX_I2C3_Init();
 800124c:	f000 f8be 	bl	80013cc <MX_I2C3_Init>
  MX_I2C4_Init();
 8001250:	f000 f8fc 	bl	800144c <MX_I2C4_Init>
  MX_SPI1_Init();
 8001254:	f000 f93a 	bl	80014cc <MX_SPI1_Init>
  MX_SPI2_Init();
 8001258:	f000 f976 	bl	8001548 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  DAC8565_Init();
 800125c:	f009 fa5a 	bl	800a714 <DAC8565_Init>
  DWT_Init();
 8001260:	f009 fb7c 	bl	800a95c <DWT_Init>
  BSP_Init();
 8001264:	f00a f992 	bl	800b58c <BSP_Init>
  SN74HC595_Init();
 8001268:	f008 fdbe 	bl	8009de8 <SN74HC595_Init>
  MAX5217_Init();
 800126c:	f00a f828 	bl	800b2c0 <MAX5217_Init>
  ADS8681_Init();
 8001270:	f009 f88e 	bl	800a390 <ADS8681_Init>
  FGEN_Init();
 8001274:	f009 fdc6 	bl	800ae04 <FGEN_Init>
//  AD9834_Init();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001278:	f00c f92e 	bl	800d4d8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueLED */
  QueueLEDHandle = osMessageQueueNew (1, sizeof(uint8_t), &QueueLED_attributes);
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <main+0xa0>)
 800127e:	2101      	movs	r1, #1
 8001280:	2001      	movs	r0, #1
 8001282:	f00c fdcf 	bl	800de24 <osMessageQueueNew>
 8001286:	4603      	mov	r3, r0
 8001288:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <main+0xa4>)
 800128a:	6013      	str	r3, [r2, #0]

  /* creation of QueueTrigger */
  QueueTriggerHandle = osMessageQueueNew (1, sizeof(uint8_t), &QueueTrigger_attributes);
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <main+0xa8>)
 800128e:	2101      	movs	r1, #1
 8001290:	2001      	movs	r0, #1
 8001292:	f00c fdc7 	bl	800de24 <osMessageQueueNew>
 8001296:	4603      	mov	r3, r0
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <main+0xac>)
 800129a:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of defaultTask */
 // defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 800129c:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <main+0xb0>)
 800129e:	2100      	movs	r1, #0
 80012a0:	480f      	ldr	r0, [pc, #60]	; (80012e0 <main+0xb4>)
 80012a2:	f00c f9ab 	bl	800d5fc <osThreadNew>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <main+0xb8>)
 80012aa:	6013      	str	r3, [r2, #0]

  /* creation of TriggerTask */
  TriggerTaskHandle = osThreadNew(StartTriggerTask, NULL, &TriggerTask_attributes);
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <main+0xbc>)
 80012ae:	2100      	movs	r1, #0
 80012b0:	480e      	ldr	r0, [pc, #56]	; (80012ec <main+0xc0>)
 80012b2:	f00c f9a3 	bl	800d5fc <osThreadNew>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <main+0xc4>)
 80012ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  MX_LWIP_Init();
 80012bc:	f007 ff52 	bl	8009164 <MX_LWIP_Init>
  scpi_server_init();
 80012c0:	f00a fe9c 	bl	800bffc <scpi_server_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012c4:	f00c f93c 	bl	800d540 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <main+0x9c>
 80012ca:	bf00      	nop
 80012cc:	0802d05c 	.word	0x0802d05c
 80012d0:	20000730 	.word	0x20000730
 80012d4:	0802d074 	.word	0x0802d074
 80012d8:	20000788 	.word	0x20000788
 80012dc:	0802d014 	.word	0x0802d014
 80012e0:	08001e41 	.word	0x08001e41
 80012e4:	20000728 	.word	0x20000728
 80012e8:	0802d038 	.word	0x0802d038
 80012ec:	08001ec9 	.word	0x08001ec9
 80012f0:	2000072c 	.word	0x2000072c

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	; 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f022 fb6d 	bl	80239e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <SystemClock_Config+0xd0>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a29      	ldr	r2, [pc, #164]	; (80013c4 <SystemClock_Config+0xd0>)
 800131e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <SystemClock_Config+0xd0>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <SystemClock_Config+0xd4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <SystemClock_Config+0xd4>)
 8001336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <SystemClock_Config+0xd4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001350:	2310      	movs	r3, #16
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001354:	2302      	movs	r3, #2
 8001356:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001358:	2300      	movs	r3, #0
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800135c:	2308      	movs	r3, #8
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001360:	23d8      	movs	r3, #216	; 0xd8
 8001362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001364:	2302      	movs	r3, #2
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001368:	2302      	movs	r3, #2
 800136a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4618      	mov	r0, r3
 8001372:	f004 fd91 	bl	8005e98 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800137c:	f000 fdbb 	bl	8001ef6 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001380:	f004 fd3a 	bl	8005df8 <HAL_PWREx_EnableOverDrive>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800138a:	f000 fdb4 	bl	8001ef6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	2302      	movs	r3, #2
 8001394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800139a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800139e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2107      	movs	r1, #7
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 f817 	bl	80063e0 <HAL_RCC_ClockConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80013b8:	f000 fd9d 	bl	8001ef6 <Error_Handler>
  }
}
 80013bc:	bf00      	nop
 80013be:	3750      	adds	r7, #80	; 0x50
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_I2C3_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <MX_I2C3_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_I2C3_Init+0x74>)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <MX_I2C3_Init+0x7c>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_I2C3_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_I2C3_Init+0x74>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_I2C3_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_I2C3_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_I2C3_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_I2C3_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_I2C3_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001406:	480e      	ldr	r0, [pc, #56]	; (8001440 <MX_I2C3_Init+0x74>)
 8001408:	f003 fb9a 	bl	8004b40 <HAL_I2C_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001412:	f000 fd70 	bl	8001ef6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <MX_I2C3_Init+0x74>)
 800141a:	f004 fc55 	bl	8005cc8 <HAL_I2CEx_ConfigAnalogFilter>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001424:	f000 fd67 	bl	8001ef6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001428:	2100      	movs	r1, #0
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_I2C3_Init+0x74>)
 800142c:	f004 fc97 	bl	8005d5e <HAL_I2CEx_ConfigDigitalFilter>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 fd5e 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000042c 	.word	0x2000042c
 8001444:	40005c00 	.word	0x40005c00
 8001448:	20404768 	.word	0x20404768

0800144c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_I2C4_Init+0x74>)
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <MX_I2C4_Init+0x78>)
 8001454:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_I2C4_Init+0x74>)
 8001458:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <MX_I2C4_Init+0x7c>)
 800145a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_I2C4_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_I2C4_Init+0x74>)
 8001464:	2201      	movs	r2, #1
 8001466:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_I2C4_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_I2C4_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_I2C4_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_I2C4_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_I2C4_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001486:	480e      	ldr	r0, [pc, #56]	; (80014c0 <MX_I2C4_Init+0x74>)
 8001488:	f003 fb5a 	bl	8004b40 <HAL_I2C_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001492:	f000 fd30 	bl	8001ef6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001496:	2100      	movs	r1, #0
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <MX_I2C4_Init+0x74>)
 800149a:	f004 fc15 	bl	8005cc8 <HAL_I2CEx_ConfigAnalogFilter>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80014a4:	f000 fd27 	bl	8001ef6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80014a8:	2100      	movs	r1, #0
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_I2C4_Init+0x74>)
 80014ac:	f004 fc57 	bl	8005d5e <HAL_I2CEx_ConfigDigitalFilter>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f000 fd1e 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000480 	.word	0x20000480
 80014c4:	40006000 	.word	0x40006000
 80014c8:	20404768 	.word	0x20404768

080014cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_SPI1_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <MX_SPI1_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_SPI1_Init+0x74>)
 80014d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_SPI1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_SPI1_Init+0x74>)
 80014e6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80014ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_SPI1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_SPI1_Init+0x74>)
 80014fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_SPI1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_SPI1_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_SPI1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_SPI1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_SPI1_Init+0x74>)
 800151a:	2207      	movs	r2, #7
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_SPI1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_SPI1_Init+0x74>)
 8001526:	2208      	movs	r2, #8
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_SPI1_Init+0x74>)
 800152c:	f005 fd8c 	bl	8007048 <HAL_SPI_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001536:	f000 fcde 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200004d4 	.word	0x200004d4
 8001544:	40013000 	.word	0x40013000

08001548 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_SPI2_Init+0x74>)
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <MX_SPI2_Init+0x78>)
 8001550:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_SPI2_Init+0x74>)
 8001554:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001558:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_SPI2_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_SPI2_Init+0x74>)
 8001562:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001566:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_SPI2_Init+0x74>)
 800156a:	2202      	movs	r2, #2
 800156c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <MX_SPI2_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_SPI2_Init+0x74>)
 8001576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_SPI2_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_SPI2_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_SPI2_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_SPI2_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_SPI2_Init+0x74>)
 8001596:	2207      	movs	r2, #7
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_SPI2_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_SPI2_Init+0x74>)
 80015a2:	2208      	movs	r2, #8
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_SPI2_Init+0x74>)
 80015a8:	f005 fd4e 	bl	8007048 <HAL_SPI_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f000 fca0 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000538 	.word	0x20000538
 80015c0:	40003800 	.word	0x40003800

080015c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MX_SPI3_Init+0x74>)
 80015ca:	4a1c      	ldr	r2, [pc, #112]	; (800163c <MX_SPI3_Init+0x78>)
 80015cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_SPI3_Init+0x74>)
 80015d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <MX_SPI3_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_SPI3_Init+0x74>)
 80015de:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80015e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_SPI3_Init+0x74>)
 80015e6:	2202      	movs	r2, #2
 80015e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <MX_SPI3_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_SPI3_Init+0x74>)
 80015f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_SPI3_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_SPI3_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_SPI3_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_SPI3_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_SPI3_Init+0x74>)
 8001612:	2207      	movs	r2, #7
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_SPI3_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_SPI3_Init+0x74>)
 800161e:	2208      	movs	r2, #8
 8001620:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_SPI3_Init+0x74>)
 8001624:	f005 fd10 	bl	8007048 <HAL_SPI_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800162e:	f000 fc62 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000059c 	.word	0x2000059c
 800163c:	40003c00 	.word	0x40003c00

08001640 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <MX_SPI4_Init+0x78>)
 8001648:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_SPI4_Init+0x74>)
 800164c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001650:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <MX_SPI4_Init+0x74>)
 800165c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001660:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_SPI4_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001674:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <MX_SPI4_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_SPI4_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001690:	2207      	movs	r2, #7
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_SPI4_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_SPI4_Init+0x74>)
 800169c:	2208      	movs	r2, #8
 800169e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_SPI4_Init+0x74>)
 80016a2:	f005 fcd1 	bl	8007048 <HAL_SPI_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_SPI4_Init+0x70>
  {
    Error_Handler();
 80016ac:	f000 fc23 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000600 	.word	0x20000600
 80016b8:	40013400 	.word	0x40013400

080016bc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_SPI5_Init+0x74>)
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <MX_SPI5_Init+0x78>)
 80016c4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_SPI5_Init+0x74>)
 80016c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016cc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_SPI5_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_SPI5_Init+0x74>)
 80016d6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80016da:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_SPI5_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_SPI5_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_SPI5_Init+0x74>)
 80016ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ee:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_SPI5_Init+0x74>)
 80016f2:	2208      	movs	r2, #8
 80016f4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_SPI5_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_SPI5_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_SPI5_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_SPI5_Init+0x74>)
 800170a:	2207      	movs	r2, #7
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_SPI5_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_SPI5_Init+0x74>)
 8001716:	2208      	movs	r2, #8
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_SPI5_Init+0x74>)
 800171c:	f005 fc94 	bl	8007048 <HAL_SPI_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001726:	f000 fbe6 	bl	8001ef6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000664 	.word	0x20000664
 8001734:	40015000 	.word	0x40015000

08001738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_DMA_Init+0x38>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <MX_DMA_Init+0x38>)
 8001744:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_DMA_Init+0x38>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2105      	movs	r1, #5
 800175a:	2038      	movs	r0, #56	; 0x38
 800175c:	f001 fa54 	bl	8002c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001760:	2038      	movs	r0, #56	; 0x38
 8001762:	f001 fa6d 	bl	8002c40 <HAL_NVIC_EnableIRQ>

}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001794:	2010      	movs	r0, #16
 8001796:	f7ff fd31 	bl	80011fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800179a:	2004      	movs	r0, #4
 800179c:	f7ff fd2e 	bl	80011fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80017a0:	2020      	movs	r0, #32
 80017a2:	f7ff fd2b 	bl	80011fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff fd28 	bl	80011fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80017ac:	2002      	movs	r0, #2
 80017ae:	f7ff fd25 	bl	80011fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80017b2:	2008      	movs	r0, #8
 80017b4:	f7ff fd22 	bl	80011fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 80017b8:	2040      	movs	r0, #64	; 0x40
 80017ba:	f7ff fd1f 	bl	80011fc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SPI4_NSS_GPIO_Port, SPI4_NSS_Pin);
 80017be:	2110      	movs	r1, #16
 80017c0:	48c0      	ldr	r0, [pc, #768]	; (8001ac4 <MX_GPIO_Init+0x350>)
 80017c2:	f7ff fcf3 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIG_OUT_GPIO_Port, TRIG_OUT_Pin);
 80017c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ca:	48be      	ldr	r0, [pc, #760]	; (8001ac4 <MX_GPIO_Init+0x350>)
 80017cc:	f7ff fcee 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIG_EN_GPIO_Port, TRIG_EN_Pin);
 80017d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d4:	48bb      	ldr	r0, [pc, #748]	; (8001ac4 <MX_GPIO_Init+0x350>)
 80017d6:	f7ff fce9 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CXN_REL6_GPIO_Port, CXN_REL6_Pin);
 80017da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017de:	48b9      	ldr	r0, [pc, #740]	; (8001ac4 <MX_GPIO_Init+0x350>)
 80017e0:	f7ff fce4 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CXN_REL5_GPIO_Port, CXN_REL5_Pin);
 80017e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e8:	48b6      	ldr	r0, [pc, #728]	; (8001ac4 <MX_GPIO_Init+0x350>)
 80017ea:	f7ff fcdf 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CXN_REL4_GPIO_Port, CXN_REL4_Pin);
 80017ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f2:	48b4      	ldr	r0, [pc, #720]	; (8001ac4 <MX_GPIO_Init+0x350>)
 80017f4:	f7ff fcda 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CXN_REL3_GPIO_Port, CXN_REL3_Pin);
 80017f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017fc:	48b1      	ldr	r0, [pc, #708]	; (8001ac4 <MX_GPIO_Init+0x350>)
 80017fe:	f7ff fcd5 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CXN_REL2_GPIO_Port, CXN_REL2_Pin);
 8001802:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001806:	48b0      	ldr	r0, [pc, #704]	; (8001ac8 <MX_GPIO_Init+0x354>)
 8001808:	f7ff fcd0 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CXN_REL1_GPIO_Port, CXN_REL1_Pin);
 800180c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001810:	48ad      	ldr	r0, [pc, #692]	; (8001ac8 <MX_GPIO_Init+0x354>)
 8001812:	f7ff fccb 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SR_LAT_GPIO_Port, SR_LAT_Pin);
 8001816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181a:	48ac      	ldr	r0, [pc, #688]	; (8001acc <MX_GPIO_Init+0x358>)
 800181c:	f7ff fcc6 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SR_CLK_GPIO_Port, SR_CLK_Pin);
 8001820:	2104      	movs	r1, #4
 8001822:	48ab      	ldr	r0, [pc, #684]	; (8001ad0 <MX_GPIO_Init+0x35c>)
 8001824:	f7ff fcc2 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SR_DAT_GPIO_Port, SR_DAT_Pin);
 8001828:	2108      	movs	r1, #8
 800182a:	48a9      	ldr	r0, [pc, #676]	; (8001ad0 <MX_GPIO_Init+0x35c>)
 800182c:	f7ff fcbe 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MCU_CURR_SENS_1kR_GPIO_Port, MCU_CURR_SENS_1kR_Pin);
 8001830:	2120      	movs	r1, #32
 8001832:	48a7      	ldr	r0, [pc, #668]	; (8001ad0 <MX_GPIO_Init+0x35c>)
 8001834:	f7ff fcba 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MCU_CURR_SENS_100R_GPIO_Port, MCU_CURR_SENS_100R_Pin);
 8001838:	2140      	movs	r1, #64	; 0x40
 800183a:	48a5      	ldr	r0, [pc, #660]	; (8001ad0 <MX_GPIO_Init+0x35c>)
 800183c:	f7ff fcb6 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MCU_CURR_SENS_10R_GPIO_Port, MCU_CURR_SENS_10R_Pin);
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	48a3      	ldr	r0, [pc, #652]	; (8001ad0 <MX_GPIO_Init+0x35c>)
 8001844:	f7ff fcb2 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DAC1_LDAC_GPIO_Port, DAC1_LDAC_Pin);
 8001848:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184c:	48a1      	ldr	r0, [pc, #644]	; (8001ad4 <MX_GPIO_Init+0x360>)
 800184e:	f7ff fcad 	bl	80011ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(FGEN_nDIV10_GPIO_Port, FGEN_nDIV10_Pin);
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	48a0      	ldr	r0, [pc, #640]	; (8001ad8 <MX_GPIO_Init+0x364>)
 8001858:	f7ff fc9a 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(FGEN_DIV8_GPIO_Port, FGEN_DIV8_Pin);
 800185c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001860:	489d      	ldr	r0, [pc, #628]	; (8001ad8 <MX_GPIO_Init+0x364>)
 8001862:	f7ff fc95 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(FGEN_DIV4_GPIO_Port, FGEN_DIV4_Pin);
 8001866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186a:	489b      	ldr	r0, [pc, #620]	; (8001ad8 <MX_GPIO_Init+0x364>)
 800186c:	f7ff fc90 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(FGEN_DIV2_GPIO_Port, FGEN_DIV2_Pin);
 8001870:	2101      	movs	r1, #1
 8001872:	489a      	ldr	r0, [pc, #616]	; (8001adc <MX_GPIO_Init+0x368>)
 8001874:	f7ff fc8c 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI5_NSS_GPIO_Port, SPI5_NSS_Pin);
 8001878:	2140      	movs	r1, #64	; 0x40
 800187a:	4898      	ldr	r0, [pc, #608]	; (8001adc <MX_GPIO_Init+0x368>)
 800187c:	f7ff fc88 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
 8001880:	2110      	movs	r1, #16
 8001882:	4894      	ldr	r0, [pc, #592]	; (8001ad4 <MX_GPIO_Init+0x360>)
 8001884:	f7ff fc84 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001888:	2104      	movs	r1, #4
 800188a:	488f      	ldr	r0, [pc, #572]	; (8001ac8 <MX_GPIO_Init+0x354>)
 800188c:	f7ff fc80 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001890:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001894:	4891      	ldr	r0, [pc, #580]	; (8001adc <MX_GPIO_Init+0x368>)
 8001896:	f7ff fc7b 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800189a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189e:	488f      	ldr	r0, [pc, #572]	; (8001adc <MX_GPIO_Init+0x368>)
 80018a0:	f7ff fc76 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 80018a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a8:	4887      	ldr	r0, [pc, #540]	; (8001ac8 <MX_GPIO_Init+0x354>)
 80018aa:	f7ff fc71 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin);
 80018ae:	2110      	movs	r1, #16
 80018b0:	4887      	ldr	r0, [pc, #540]	; (8001ad0 <MX_GPIO_Init+0x35c>)
 80018b2:	f7ff fc6d 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MCU_CURR_SENS_1R_GPIO_Port, MCU_CURR_SENS_1R_Pin);
 80018b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ba:	4885      	ldr	r0, [pc, #532]	; (8001ad0 <MX_GPIO_Init+0x35c>)
 80018bc:	f7ff fc68 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DAC1_nRST_GPIO_Port, DAC1_nRST_Pin);
 80018c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c4:	4883      	ldr	r0, [pc, #524]	; (8001ad4 <MX_GPIO_Init+0x360>)
 80018c6:	f7ff fc63 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin);
 80018ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ce:	4881      	ldr	r0, [pc, #516]	; (8001ad4 <MX_GPIO_Init+0x360>)
 80018d0:	f7ff fc5e 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DAC2_nLDAC_GPIO_Port, DAC2_nLDAC_Pin);
 80018d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d8:	487d      	ldr	r0, [pc, #500]	; (8001ad0 <MX_GPIO_Init+0x35c>)
 80018da:	f7ff fc59 	bl	8001190 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI4_NSS_Pin;
 80018de:	2310      	movs	r3, #16
 80018e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018e2:	2301      	movs	r3, #1
 80018e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI4_NSS_GPIO_Port, &GPIO_InitStruct);
 80018f2:	463b      	mov	r3, r7
 80018f4:	4619      	mov	r1, r3
 80018f6:	4873      	ldr	r0, [pc, #460]	; (8001ac4 <MX_GPIO_Init+0x350>)
 80018f8:	f007 fbc0 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FGEN_nDIV10_Pin;
 80018fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001900:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001902:	2301      	movs	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FGEN_nDIV10_GPIO_Port, &GPIO_InitStruct);
 8001912:	463b      	mov	r3, r7
 8001914:	4619      	mov	r1, r3
 8001916:	4870      	ldr	r0, [pc, #448]	; (8001ad8 <MX_GPIO_Init+0x364>)
 8001918:	f007 fbb0 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FGEN_DIV8_Pin;
 800191c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001920:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001922:	2301      	movs	r3, #1
 8001924:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FGEN_DIV8_GPIO_Port, &GPIO_InitStruct);
 8001932:	463b      	mov	r3, r7
 8001934:	4619      	mov	r1, r3
 8001936:	4868      	ldr	r0, [pc, #416]	; (8001ad8 <MX_GPIO_Init+0x364>)
 8001938:	f007 fba0 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FGEN_DIV4_Pin;
 800193c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001940:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001942:	2301      	movs	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FGEN_DIV4_GPIO_Port, &GPIO_InitStruct);
 8001952:	463b      	mov	r3, r7
 8001954:	4619      	mov	r1, r3
 8001956:	4860      	ldr	r0, [pc, #384]	; (8001ad8 <MX_GPIO_Init+0x364>)
 8001958:	f007 fb90 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FGEN_DIV2_Pin;
 800195c:	2301      	movs	r3, #1
 800195e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001960:	2301      	movs	r3, #1
 8001962:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FGEN_DIV2_GPIO_Port, &GPIO_InitStruct);
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4859      	ldr	r0, [pc, #356]	; (8001adc <MX_GPIO_Init+0x368>)
 8001976:	f007 fb81 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI5_NSS_Pin;
 800197a:	2340      	movs	r3, #64	; 0x40
 800197c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800197e:	2301      	movs	r3, #1
 8001980:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001982:	2302      	movs	r3, #2
 8001984:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI5_NSS_GPIO_Port, &GPIO_InitStruct);
 800198e:	463b      	mov	r3, r7
 8001990:	4619      	mov	r1, r3
 8001992:	4852      	ldr	r0, [pc, #328]	; (8001adc <MX_GPIO_Init+0x368>)
 8001994:	f007 fb72 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001998:	2310      	movs	r3, #16
 800199a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800199c:	2301      	movs	r3, #1
 800199e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80019ac:	463b      	mov	r3, r7
 80019ae:	4619      	mov	r1, r3
 80019b0:	4848      	ldr	r0, [pc, #288]	; (8001ad4 <MX_GPIO_Init+0x360>)
 80019b2:	f007 fb63 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80019b6:	2304      	movs	r3, #4
 80019b8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019ba:	2301      	movs	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80019ca:	463b      	mov	r3, r7
 80019cc:	4619      	mov	r1, r3
 80019ce:	483e      	ldr	r0, [pc, #248]	; (8001ac8 <MX_GPIO_Init+0x354>)
 80019d0:	f007 fb54 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80019d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019da:	2301      	movs	r3, #1
 80019dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80019ea:	463b      	mov	r3, r7
 80019ec:	4619      	mov	r1, r3
 80019ee:	483b      	ldr	r0, [pc, #236]	; (8001adc <MX_GPIO_Init+0x368>)
 80019f0:	f007 fb44 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019fa:	2301      	movs	r3, #1
 80019fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4833      	ldr	r0, [pc, #204]	; (8001adc <MX_GPIO_Init+0x368>)
 8001a10:	f007 fb34 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIG_OUT_Pin;
 8001a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a18:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4825      	ldr	r0, [pc, #148]	; (8001ac4 <MX_GPIO_Init+0x350>)
 8001a30:	f007 fb24 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIG_EN_Pin;
 8001a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a38:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TRIG_EN_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481d      	ldr	r0, [pc, #116]	; (8001ac4 <MX_GPIO_Init+0x350>)
 8001a50:	f007 fb14 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_DEFAULT_Pin;
 8001a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MCU_DEFAULT_GPIO_Port, &GPIO_InitStruct);
 8001a62:	463b      	mov	r3, r7
 8001a64:	4619      	mov	r1, r3
 8001a66:	4817      	ldr	r0, [pc, #92]	; (8001ac4 <MX_GPIO_Init+0x350>)
 8001a68:	f007 fb08 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CXN_REL6_Pin;
 8001a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a72:	2301      	movs	r3, #1
 8001a74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CXN_REL6_GPIO_Port, &GPIO_InitStruct);
 8001a82:	463b      	mov	r3, r7
 8001a84:	4619      	mov	r1, r3
 8001a86:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <MX_GPIO_Init+0x350>)
 8001a88:	f007 faf8 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CXN_REL5_Pin;
 8001a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a90:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a92:	2301      	movs	r3, #1
 8001a94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CXN_REL5_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <MX_GPIO_Init+0x350>)
 8001aa8:	f007 fae8 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CXN_REL4_Pin;
 8001aac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ab0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e00e      	b.n	8001ae0 <MX_GPIO_Init+0x36c>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020c00 	.word	0x40020c00
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40021400 	.word	0x40021400
 8001ae0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CXN_REL4_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	48c1      	ldr	r0, [pc, #772]	; (8001dec <MX_GPIO_Init+0x678>)
 8001ae8:	f007 fac8 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CXN_REL3_Pin;
 8001aec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001af0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001af2:	2301      	movs	r3, #1
 8001af4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CXN_REL3_GPIO_Port, &GPIO_InitStruct);
 8001b02:	463b      	mov	r3, r7
 8001b04:	4619      	mov	r1, r3
 8001b06:	48b9      	ldr	r0, [pc, #740]	; (8001dec <MX_GPIO_Init+0x678>)
 8001b08:	f007 fab8 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CXN_REL2_Pin;
 8001b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b10:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b12:	2301      	movs	r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CXN_REL2_GPIO_Port, &GPIO_InitStruct);
 8001b22:	463b      	mov	r3, r7
 8001b24:	4619      	mov	r1, r3
 8001b26:	48b2      	ldr	r0, [pc, #712]	; (8001df0 <MX_GPIO_Init+0x67c>)
 8001b28:	f007 faa8 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CXN_REL1_Pin;
 8001b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b30:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b32:	2301      	movs	r3, #1
 8001b34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CXN_REL1_GPIO_Port, &GPIO_InitStruct);
 8001b42:	463b      	mov	r3, r7
 8001b44:	4619      	mov	r1, r3
 8001b46:	48aa      	ldr	r0, [pc, #680]	; (8001df0 <MX_GPIO_Init+0x67c>)
 8001b48:	f007 fa98 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b50:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b52:	2301      	movs	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001b62:	463b      	mov	r3, r7
 8001b64:	4619      	mov	r1, r3
 8001b66:	48a2      	ldr	r0, [pc, #648]	; (8001df0 <MX_GPIO_Init+0x67c>)
 8001b68:	f007 fa88 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SR_OUT_Pin;
 8001b6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SR_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	489d      	ldr	r0, [pc, #628]	; (8001df4 <MX_GPIO_Init+0x680>)
 8001b80:	f007 fa7c 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SR_LAT_Pin;
 8001b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b88:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SR_LAT_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4895      	ldr	r0, [pc, #596]	; (8001df4 <MX_GPIO_Init+0x680>)
 8001ba0:	f007 fa6c 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SR_CLK_Pin;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SR_CLK_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	463b      	mov	r3, r7
 8001bba:	4619      	mov	r1, r3
 8001bbc:	488e      	ldr	r0, [pc, #568]	; (8001df8 <MX_GPIO_Init+0x684>)
 8001bbe:	f007 fa5d 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SR_DAT_Pin;
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SR_DAT_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4887      	ldr	r0, [pc, #540]	; (8001df8 <MX_GPIO_Init+0x684>)
 8001bdc:	f007 fa4e 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EEPROM_WP_Pin;
 8001be0:	2310      	movs	r3, #16
 8001be2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001be4:	2301      	movs	r3, #1
 8001be6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EEPROM_WP_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	487f      	ldr	r0, [pc, #508]	; (8001df8 <MX_GPIO_Init+0x684>)
 8001bfa:	f007 fa3f 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_CURR_SENS_1kR_Pin;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c02:	2301      	movs	r3, #1
 8001c04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MCU_CURR_SENS_1kR_GPIO_Port, &GPIO_InitStruct);
 8001c12:	463b      	mov	r3, r7
 8001c14:	4619      	mov	r1, r3
 8001c16:	4878      	ldr	r0, [pc, #480]	; (8001df8 <MX_GPIO_Init+0x684>)
 8001c18:	f007 fa30 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_CURR_SENS_100R_Pin;
 8001c1c:	2340      	movs	r3, #64	; 0x40
 8001c1e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c20:	2301      	movs	r3, #1
 8001c22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MCU_CURR_SENS_100R_GPIO_Port, &GPIO_InitStruct);
 8001c30:	463b      	mov	r3, r7
 8001c32:	4619      	mov	r1, r3
 8001c34:	4870      	ldr	r0, [pc, #448]	; (8001df8 <MX_GPIO_Init+0x684>)
 8001c36:	f007 fa21 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_CURR_SENS_10R_Pin;
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MCU_CURR_SENS_10R_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	463b      	mov	r3, r7
 8001c50:	4619      	mov	r1, r3
 8001c52:	4869      	ldr	r0, [pc, #420]	; (8001df8 <MX_GPIO_Init+0x684>)
 8001c54:	f007 fa12 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_CURR_SENS_1R_Pin;
 8001c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(MCU_CURR_SENS_1R_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	463b      	mov	r3, r7
 8001c70:	4619      	mov	r1, r3
 8001c72:	4861      	ldr	r0, [pc, #388]	; (8001df8 <MX_GPIO_Init+0x684>)
 8001c74:	f007 fa02 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DAC1_nRST_Pin;
 8001c78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c7c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(DAC1_nRST_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4619      	mov	r1, r3
 8001c92:	485a      	ldr	r0, [pc, #360]	; (8001dfc <MX_GPIO_Init+0x688>)
 8001c94:	f007 f9f2 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DAC1_LDAC_Pin;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(DAC1_LDAC_GPIO_Port, &GPIO_InitStruct);
 8001cae:	463b      	mov	r3, r7
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4852      	ldr	r0, [pc, #328]	; (8001dfc <MX_GPIO_Init+0x688>)
 8001cb4:	f007 f9e2 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI3_NSS_Pin;
 8001cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cbc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI3_NSS_GPIO_Port, &GPIO_InitStruct);
 8001cce:	463b      	mov	r3, r7
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	484a      	ldr	r0, [pc, #296]	; (8001dfc <MX_GPIO_Init+0x688>)
 8001cd4:	f007 f9d2 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADC1_RVS1_Pin;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADC1_RVS1_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4842      	ldr	r0, [pc, #264]	; (8001df4 <MX_GPIO_Init+0x680>)
 8001cea:	f007 f9c7 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADC1_RVS2_Pin;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ADC1_RVS2_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	483d      	ldr	r0, [pc, #244]	; (8001df4 <MX_GPIO_Init+0x680>)
 8001d00:	f007 f9bc 	bl	800907c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DAC2_nLDAC_Pin;
 8001d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(DAC2_nLDAC_GPIO_Port, &GPIO_InitStruct);
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4836      	ldr	r0, [pc, #216]	; (8001df8 <MX_GPIO_Init+0x684>)
 8001d20:	f007 f9ac 	bl	800907c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE7);
 8001d24:	4936      	ldr	r1, [pc, #216]	; (8001e00 <MX_GPIO_Init+0x68c>)
 8001d26:	2004      	movs	r0, #4
 8001d28:	f7ff f9a6 	bl	8001078 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE9);
 8001d2c:	4935      	ldr	r1, [pc, #212]	; (8001e04 <MX_GPIO_Init+0x690>)
 8001d2e:	2003      	movs	r0, #3
 8001d30:	f7ff f9a2 	bl	8001078 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 8001d34:	4934      	ldr	r1, [pc, #208]	; (8001e08 <MX_GPIO_Init+0x694>)
 8001d36:	2003      	movs	r0, #3
 8001d38:	f7ff f99e 	bl	8001078 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 8001d3c:	4933      	ldr	r1, [pc, #204]	; (8001e0c <MX_GPIO_Init+0x698>)
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f7ff f99a 	bl	8001078 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001d50:	2301      	movs	r3, #1
 8001d52:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001d54:	f107 0318 	add.w	r3, r7, #24
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f007 f809 	bl	8008d70 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 8001d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d62:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	4618      	mov	r0, r3
 8001d76:	f006 fffb 	bl	8008d70 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8001d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d7e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001d8c:	f107 0318 	add.w	r3, r7, #24
 8001d90:	4618      	mov	r0, r3
 8001d92:	f006 ffed 	bl	8008d70 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8001d96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d9a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001da4:	2301      	movs	r3, #1
 8001da6:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001da8:	f107 0318 	add.w	r3, r7, #24
 8001dac:	4618      	mov	r0, r3
 8001dae:	f006 ffdf 	bl	8008d70 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(TRIG_IN_GPIO_Port, TRIG_IN_Pin, LL_GPIO_PULL_NO);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2180      	movs	r1, #128	; 0x80
 8001db6:	480d      	ldr	r0, [pc, #52]	; (8001dec <MX_GPIO_Init+0x678>)
 8001db8:	f7ff f9bb 	bl	8001132 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MCU_nTDS_GPIO_Port, MCU_nTDS_Pin, LL_GPIO_PULL_NO);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc2:	480c      	ldr	r0, [pc, #48]	; (8001df4 <MX_GPIO_Init+0x680>)
 8001dc4:	f7ff f9b5 	bl	8001132 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MCU_nISNK_GPIO_Port, MCU_nISNK_Pin, LL_GPIO_PULL_NO);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dce:	4809      	ldr	r0, [pc, #36]	; (8001df4 <MX_GPIO_Init+0x680>)
 8001dd0:	f7ff f9af 	bl	8001132 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MCU_nISRC_GPIO_Port, MCU_nISRC_Pin, LL_GPIO_PULL_NO);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <MX_GPIO_Init+0x680>)
 8001ddc:	f7ff f9a9 	bl	8001132 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(TRIG_IN_GPIO_Port, TRIG_IN_Pin, LL_GPIO_MODE_INPUT);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	4801      	ldr	r0, [pc, #4]	; (8001dec <MX_GPIO_Init+0x678>)
 8001de6:	f7ff f975 	bl	80010d4 <LL_GPIO_SetPinMode>
 8001dea:	e011      	b.n	8001e10 <MX_GPIO_Init+0x69c>
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020c00 	.word	0x40020c00
 8001df8:	40021800 	.word	0x40021800
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	f0000001 	.word	0xf0000001
 8001e04:	00f00002 	.word	0x00f00002
 8001e08:	0f000002 	.word	0x0f000002
 8001e0c:	f0000002 	.word	0xf0000002

  /**/
  LL_GPIO_SetPinMode(MCU_nTDS_GPIO_Port, MCU_nTDS_Pin, LL_GPIO_MODE_INPUT);
 8001e10:	2200      	movs	r2, #0
 8001e12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e16:	4809      	ldr	r0, [pc, #36]	; (8001e3c <MX_GPIO_Init+0x6c8>)
 8001e18:	f7ff f95c 	bl	80010d4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MCU_nISNK_GPIO_Port, MCU_nISNK_Pin, LL_GPIO_MODE_INPUT);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e22:	4806      	ldr	r0, [pc, #24]	; (8001e3c <MX_GPIO_Init+0x6c8>)
 8001e24:	f7ff f956 	bl	80010d4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MCU_nISRC_GPIO_Port, MCU_nISRC_Pin, LL_GPIO_MODE_INPUT);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <MX_GPIO_Init+0x6c8>)
 8001e30:	f7ff f950 	bl	80010d4 <LL_GPIO_SetPinMode>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40020c00 	.word	0x40020c00

08001e40 <StartLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void *argument)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDTask */
  /* Infinite loop */

	uint8_t  led_color = GREEN, tmp = GREEN;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	75fb      	strb	r3, [r7, #23]
	osStatus_t status;

  for(;;)
  {
	  status = osMessageQueueGet(QueueLEDHandle, &led_color, NULL, 0U);
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <StartLEDTask+0x7c>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	f107 010f 	add.w	r1, r7, #15
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f00c f8dc 	bl	800e018 <osMessageQueueGet>
 8001e60:	6138      	str	r0, [r7, #16]

	  if(osOK == status)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <StartLEDTask+0x2e>
	  {
		  tmp = led_color;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	75fb      	strb	r3, [r7, #23]
 8001e6c:	e001      	b.n	8001e72 <StartLEDTask+0x32>
	  }
	  else
	  {
		  led_color = tmp;
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	73fb      	strb	r3, [r7, #15]
	  }

	  switch(led_color)
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d011      	beq.n	8001e9c <StartLEDTask+0x5c>
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	dc14      	bgt.n	8001ea6 <StartLEDTask+0x66>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <StartLEDTask+0x50>
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d110      	bne.n	8001ea6 <StartLEDTask+0x66>
	  {
	  	  case RED: LL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin); break;
 8001e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e88:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <StartLEDTask+0x80>)
 8001e8a:	f7ff f99e 	bl	80011ca <LL_GPIO_TogglePin>
 8001e8e:	e010      	b.n	8001eb2 <StartLEDTask+0x72>
	  	  case GREEN: LL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); break;
 8001e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e94:	480a      	ldr	r0, [pc, #40]	; (8001ec0 <StartLEDTask+0x80>)
 8001e96:	f7ff f998 	bl	80011ca <LL_GPIO_TogglePin>
 8001e9a:	e00a      	b.n	8001eb2 <StartLEDTask+0x72>
	  	  case BLUE: LL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); break;
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	4809      	ldr	r0, [pc, #36]	; (8001ec4 <StartLEDTask+0x84>)
 8001ea0:	f7ff f993 	bl	80011ca <LL_GPIO_TogglePin>
 8001ea4:	e005      	b.n	8001eb2 <StartLEDTask+0x72>
	  	  default: LL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin); break;
 8001ea6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <StartLEDTask+0x80>)
 8001eac:	f7ff f98d 	bl	80011ca <LL_GPIO_TogglePin>
 8001eb0:	bf00      	nop
	  }

	  osDelay(pdMS_TO_TICKS(500));
 8001eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eb6:	f00b fcaf 	bl	800d818 <osDelay>
	  status = osMessageQueueGet(QueueLEDHandle, &led_color, NULL, 0U);
 8001eba:	e7c9      	b.n	8001e50 <StartLEDTask+0x10>
 8001ebc:	20000730 	.word	0x20000730
 8001ec0:	40021400 	.word	0x40021400
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <StartTriggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTriggerTask */
void StartTriggerTask(void *argument)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTriggerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f00b fca1 	bl	800d818 <osDelay>
 8001ed6:	e7fb      	b.n	8001ed0 <StartTriggerTask+0x8>

08001ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eea:	f000 fd91 	bl	8002a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001efa:	b672      	cpsid	i
}
 8001efc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001efe:	e7fe      	b.n	8001efe <Error_Handler+0x8>

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f000 fe63 	bl	8002c08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0ae      	sub	sp, #184	; 0xb8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 0320 	add.w	r3, r7, #32
 8001f6c:	2284      	movs	r2, #132	; 0x84
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f021 fd36 	bl	80239e2 <memset>
  if(hi2c->Instance==I2C3)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a55      	ldr	r2, [pc, #340]	; (80020d0 <HAL_I2C_MspInit+0x180>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d160      	bne.n	8002042 <HAL_I2C_MspInit+0xf2>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f84:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8c:	f107 0320 	add.w	r3, r7, #32
 8001f90:	4618      	mov	r0, r3
 8001f92:	f004 fc69 	bl	8006868 <HAL_RCCEx_PeriphCLKConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001f9c:	f7ff ffab 	bl	8001ef6 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4a4b      	ldr	r2, [pc, #300]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	6313      	str	r3, [r2, #48]	; 0x30
 8001fac:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	4a45      	ldr	r2, [pc, #276]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc4:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	69bb      	ldr	r3, [r7, #24]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd8:	2312      	movs	r3, #18
 8001fda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fea:	2304      	movs	r3, #4
 8001fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4838      	ldr	r0, [pc, #224]	; (80020d8 <HAL_I2C_MspInit+0x188>)
 8001ff8:	f002 fbf6 	bl	80047e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002000:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002004:	2312      	movs	r3, #18
 8002006:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002016:	2304      	movs	r3, #4
 8002018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002020:	4619      	mov	r1, r3
 8002022:	482e      	ldr	r0, [pc, #184]	; (80020dc <HAL_I2C_MspInit+0x18c>)
 8002024:	f002 fbe0 	bl	80047e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 800202e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002032:	6413      	str	r3, [r2, #64]	; 0x40
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002040:	e042      	b.n	80020c8 <HAL_I2C_MspInit+0x178>
  else if(hi2c->Instance==I2C4)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a26      	ldr	r2, [pc, #152]	; (80020e0 <HAL_I2C_MspInit+0x190>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d13d      	bne.n	80020c8 <HAL_I2C_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800204c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002050:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	4618      	mov	r0, r3
 800205e:	f004 fc03 	bl	8006868 <HAL_RCCEx_PeriphCLKConfig>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_I2C_MspInit+0x11c>
      Error_Handler();
 8002068:	f7ff ff45 	bl	8001ef6 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 8002072:	f043 0308 	orr.w	r3, r3, #8
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002084:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208c:	2312      	movs	r3, #18
 800208e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800209e:	2304      	movs	r3, #4
 80020a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020a8:	4619      	mov	r1, r3
 80020aa:	480e      	ldr	r0, [pc, #56]	; (80020e4 <HAL_I2C_MspInit+0x194>)
 80020ac:	f002 fb9c 	bl	80047e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ba:	6413      	str	r3, [r2, #64]	; 0x40
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_I2C_MspInit+0x184>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	bf00      	nop
 80020ca:	37b8      	adds	r7, #184	; 0xb8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40005c00 	.word	0x40005c00
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40006000 	.word	0x40006000
 80020e4:	40020c00 	.word	0x40020c00

080020e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b092      	sub	sp, #72	; 0x48
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a8a      	ldr	r2, [pc, #552]	; (8002330 <HAL_SPI_MspInit+0x248>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d144      	bne.n	8002194 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800210a:	4b8a      	ldr	r3, [pc, #552]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	4a89      	ldr	r2, [pc, #548]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002110:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002114:	6453      	str	r3, [r2, #68]	; 0x44
 8002116:	4b87      	ldr	r3, [pc, #540]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
 8002120:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b84      	ldr	r3, [pc, #528]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a83      	ldr	r2, [pc, #524]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b81      	ldr	r3, [pc, #516]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	4b7e      	ldr	r3, [pc, #504]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a7d      	ldr	r2, [pc, #500]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b7b      	ldr	r3, [pc, #492]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002152:	2360      	movs	r3, #96	; 0x60
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800215e:	2302      	movs	r3, #2
 8002160:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002162:	2305      	movs	r3, #5
 8002164:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800216a:	4619      	mov	r1, r3
 800216c:	4872      	ldr	r0, [pc, #456]	; (8002338 <HAL_SPI_MspInit+0x250>)
 800216e:	f002 fb3b 	bl	80047e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002172:	2320      	movs	r3, #32
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800217e:	2302      	movs	r3, #2
 8002180:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002182:	2305      	movs	r3, #5
 8002184:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800218a:	4619      	mov	r1, r3
 800218c:	486b      	ldr	r0, [pc, #428]	; (800233c <HAL_SPI_MspInit+0x254>)
 800218e:	f002 fb2b 	bl	80047e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002192:	e111      	b.n	80023b8 <HAL_SPI_MspInit+0x2d0>
  else if(hspi->Instance==SPI2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a69      	ldr	r2, [pc, #420]	; (8002340 <HAL_SPI_MspInit+0x258>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d129      	bne.n	80021f2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800219e:	4b65      	ldr	r3, [pc, #404]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a64      	ldr	r2, [pc, #400]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b62      	ldr	r3, [pc, #392]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	4b5f      	ldr	r3, [pc, #380]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a5e      	ldr	r2, [pc, #376]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b5c      	ldr	r3, [pc, #368]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021e0:	2305      	movs	r3, #5
 80021e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021e8:	4619      	mov	r1, r3
 80021ea:	4854      	ldr	r0, [pc, #336]	; (800233c <HAL_SPI_MspInit+0x254>)
 80021ec:	f002 fafc 	bl	80047e8 <HAL_GPIO_Init>
}
 80021f0:	e0e2      	b.n	80023b8 <HAL_SPI_MspInit+0x2d0>
  else if(hspi->Instance==SPI3)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a53      	ldr	r2, [pc, #332]	; (8002344 <HAL_SPI_MspInit+0x25c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d13a      	bne.n	8002272 <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021fc:	4b4d      	ldr	r3, [pc, #308]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	4a4c      	ldr	r2, [pc, #304]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002206:	6413      	str	r3, [r2, #64]	; 0x40
 8002208:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002214:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	4a46      	ldr	r2, [pc, #280]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6313      	str	r3, [r2, #48]	; 0x30
 8002220:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800222c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002236:	2301      	movs	r3, #1
 8002238:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223a:	2302      	movs	r3, #2
 800223c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800223e:	2306      	movs	r3, #6
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002242:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002246:	4619      	mov	r1, r3
 8002248:	483f      	ldr	r0, [pc, #252]	; (8002348 <HAL_SPI_MspInit+0x260>)
 800224a:	f002 facd 	bl	80047e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800224e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225c:	2302      	movs	r3, #2
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002260:	2306      	movs	r3, #6
 8002262:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002268:	4619      	mov	r1, r3
 800226a:	4837      	ldr	r0, [pc, #220]	; (8002348 <HAL_SPI_MspInit+0x260>)
 800226c:	f002 fabc 	bl	80047e8 <HAL_GPIO_Init>
}
 8002270:	e0a2      	b.n	80023b8 <HAL_SPI_MspInit+0x2d0>
  else if(hspi->Instance==SPI4)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a35      	ldr	r2, [pc, #212]	; (800234c <HAL_SPI_MspInit+0x264>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d16f      	bne.n	800235c <HAL_SPI_MspInit+0x274>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	4a2c      	ldr	r2, [pc, #176]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002286:	6453      	str	r3, [r2, #68]	; 0x44
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	4a26      	ldr	r2, [pc, #152]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 800229a:	f043 0310 	orr.w	r3, r3, #16
 800229e:	6313      	str	r3, [r2, #48]	; 0x30
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_SPI_MspInit+0x24c>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80022ac:	2324      	movs	r3, #36	; 0x24
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80022bc:	2305      	movs	r3, #5
 80022be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022c4:	4619      	mov	r1, r3
 80022c6:	4822      	ldr	r0, [pc, #136]	; (8002350 <HAL_SPI_MspInit+0x268>)
 80022c8:	f002 fa8e 	bl	80047e8 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 80022ce:	4a22      	ldr	r2, [pc, #136]	; (8002358 <HAL_SPI_MspInit+0x270>)
 80022d0:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 80022d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022d8:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 80022e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ec:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 80022f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f4:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 80022f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fc:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 8002300:	2200      	movs	r2, #0
 8002302:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 8002306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800230a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002312:	4810      	ldr	r0, [pc, #64]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 8002314:	f000 fca2 	bl	8002c5c <HAL_DMA_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_SPI_MspInit+0x23a>
      Error_Handler();
 800231e:	f7ff fdea 	bl	8001ef6 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 8002326:	659a      	str	r2, [r3, #88]	; 0x58
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <HAL_SPI_MspInit+0x26c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800232e:	e043      	b.n	80023b8 <HAL_SPI_MspInit+0x2d0>
 8002330:	40013000 	.word	0x40013000
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000
 800233c:	40020400 	.word	0x40020400
 8002340:	40003800 	.word	0x40003800
 8002344:	40003c00 	.word	0x40003c00
 8002348:	40020800 	.word	0x40020800
 800234c:	40013400 	.word	0x40013400
 8002350:	40021000 	.word	0x40021000
 8002354:	200006c8 	.word	0x200006c8
 8002358:	40026410 	.word	0x40026410
  else if(hspi->Instance==SPI5)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_SPI_MspInit+0x2d8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d128      	bne.n	80023b8 <HAL_SPI_MspInit+0x2d0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_SPI_MspInit+0x2dc>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_SPI_MspInit+0x2dc>)
 800236c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_SPI_MspInit+0x2dc>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_SPI_MspInit+0x2dc>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <HAL_SPI_MspInit+0x2dc>)
 8002384:	f043 0320 	orr.w	r3, r3, #32
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_SPI_MspInit+0x2dc>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002396:	f44f 7360 	mov.w	r3, #896	; 0x380
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80023a8:	2305      	movs	r3, #5
 80023aa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023b0:	4619      	mov	r1, r3
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_SPI_MspInit+0x2e0>)
 80023b4:	f002 fa18 	bl	80047e8 <HAL_GPIO_Init>
}
 80023b8:	bf00      	nop
 80023ba:	3748      	adds	r7, #72	; 0x48
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40015000 	.word	0x40015000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40021400 	.word	0x40021400

080023cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08e      	sub	sp, #56	; 0x38
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80023dc:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <HAL_InitTick+0xe4>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	4a33      	ldr	r2, [pc, #204]	; (80024b0 <HAL_InitTick+0xe4>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6413      	str	r3, [r2, #64]	; 0x40
 80023e8:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_InitTick+0xe4>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023f4:	f107 0210 	add.w	r2, r7, #16
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f004 fa00 	bl	8006804 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800240e:	f004 f9e5 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8002412:	6378      	str	r0, [r7, #52]	; 0x34
 8002414:	e004      	b.n	8002420 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002416:	f004 f9e1 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 800241a:	4603      	mov	r3, r0
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002422:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <HAL_InitTick+0xe8>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	0c9b      	lsrs	r3, r3, #18
 800242a:	3b01      	subs	r3, #1
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_InitTick+0xec>)
 8002430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002434:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_InitTick+0xec>)
 8002438:	f240 32e7 	movw	r2, #999	; 0x3e7
 800243c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800243e:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <HAL_InitTick+0xec>)
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002444:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <HAL_InitTick+0xec>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_InitTick+0xec>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_InitTick+0xec>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002456:	4818      	ldr	r0, [pc, #96]	; (80024b8 <HAL_InitTick+0xec>)
 8002458:	f006 f912 	bl	8008680 <HAL_TIM_Base_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002466:	2b00      	cmp	r3, #0
 8002468:	d11b      	bne.n	80024a2 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800246a:	4813      	ldr	r0, [pc, #76]	; (80024b8 <HAL_InitTick+0xec>)
 800246c:	f006 f96a 	bl	8008744 <HAL_TIM_Base_Start_IT>
 8002470:	4603      	mov	r3, r0
 8002472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002476:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800247a:	2b00      	cmp	r3, #0
 800247c:	d111      	bne.n	80024a2 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800247e:	201c      	movs	r0, #28
 8002480:	f000 fbde 	bl	8002c40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	d808      	bhi.n	800249c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800248a:	2200      	movs	r2, #0
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	201c      	movs	r0, #28
 8002490:	f000 fbba 	bl	8002c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002494:	4a09      	ldr	r2, [pc, #36]	; (80024bc <HAL_InitTick+0xf0>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e002      	b.n	80024a2 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3738      	adds	r7, #56	; 0x38
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	2000078c 	.word	0x2000078c
 80024bc:	20000004 	.word	0x20000004

080024c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <NMI_Handler+0x4>

080024c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <HardFault_Handler+0x4>

080024cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <MemManage_Handler+0x4>

080024d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <BusFault_Handler+0x4>

080024d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <UsageFault_Handler+0x4>

080024de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <TIM2_IRQHandler+0x10>)
 80024f2:	f006 f99f 	bl	8008834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000078c 	.word	0x2000078c

08002500 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <DMA2_Stream0_IRQHandler+0x10>)
 8002506:	f000 fcb7 	bl	8002e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200006c8 	.word	0x200006c8

08002514 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <ETH_IRQHandler+0x10>)
 800251a:	f001 fa91 	bl	8003a40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200051e4 	.word	0x200051e4

08002528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
	return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_kill>:

int _kill(int pid, int sig)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <_kill+0x20>)
 8002544:	2216      	movs	r2, #22
 8002546:	601a      	str	r2, [r3, #0]
	return -1;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	2001ae44 	.word	0x2001ae44

0800255c <_exit>:

void _exit (int status)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ffe5 	bl	8002538 <_kill>
	while (1) {}		/* Make sure we hang here */
 800256e:	e7fe      	b.n	800256e <_exit+0x12>

08002570 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e00a      	b.n	8002598 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002582:	f3af 8000 	nop.w
 8002586:	4601      	mov	r1, r0
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	60ba      	str	r2, [r7, #8]
 800258e:	b2ca      	uxtb	r2, r1
 8002590:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	429a      	cmp	r2, r3
 800259e:	dbf0      	blt.n	8002582 <_read+0x12>
	}

return len;
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e009      	b.n	80025d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	60ba      	str	r2, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3301      	adds	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	dbf1      	blt.n	80025bc <_write+0x12>
	}
	return len;
 80025d8:	687b      	ldr	r3, [r7, #4]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_close>:

int _close(int file)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
	return -1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800260a:	605a      	str	r2, [r3, #4]
	return 0;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <_isatty>:

int _isatty(int file)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
	return 1;
 8002622:	2301      	movs	r3, #1
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
	return 0;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <_sbrk+0x5c>)
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <_sbrk+0x60>)
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <_sbrk+0x64>)
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <_sbrk+0x68>)
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	429a      	cmp	r2, r3
 800267a:	d205      	bcs.n	8002688 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <_sbrk+0x6c>)
 800267e:	220c      	movs	r2, #12
 8002680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002686:	e009      	b.n	800269c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <_sbrk+0x64>)
 8002698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	20050000 	.word	0x20050000
 80026ac:	00000400 	.word	0x00000400
 80026b0:	200007d8 	.word	0x200007d8
 80026b4:	2001ae48 	.word	0x2001ae48
 80026b8:	2001ae44 	.word	0x2001ae44

080026bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <SystemInit+0x20>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <SystemInit+0x20>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002718 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026fc:	4c0b      	ldr	r4, [pc, #44]	; (800272c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800270a:	f7ff ffd7 	bl	80026bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270e:	f021 f909 	bl	8023924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002712:	f7fe fd8b 	bl	800122c <main>
  bx  lr    
 8002716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002718:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8002724:	0802dca8 	.word	0x0802dca8
  ldr r2, =_sbss
 8002728:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 800272c:	2001ae48 	.word	0x2001ae48

08002730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC_IRQHandler>

08002732 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <LAN8742_RegisterBusIO+0x28>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <LAN8742_RegisterBusIO+0x28>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <LAN8742_RegisterBusIO+0x28>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800275e:	e014      	b.n	800278a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d17c      	bne.n	80028b0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e01c      	b.n	800280a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f107 0208 	add.w	r2, r7, #8
 80027d8:	2112      	movs	r1, #18
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	4798      	blx	r3
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	da03      	bge.n	80027ec <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80027e4:	f06f 0304 	mvn.w	r3, #4
 80027e8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80027ea:	e00b      	b.n	8002804 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d105      	bne.n	8002804 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
         break;
 8002802:	e005      	b.n	8002810 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3301      	adds	r3, #1
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b1f      	cmp	r3, #31
 800280e:	d9df      	bls.n	80027d0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b1f      	cmp	r3, #31
 8002816:	d902      	bls.n	800281e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002818:	f06f 0302 	mvn.w	r3, #2
 800281c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d145      	bne.n	80028b0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6810      	ldr	r0, [r2, #0]
 800282c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002830:	2100      	movs	r1, #0
 8002832:	4798      	blx	r3
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	db37      	blt.n	80028aa <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6810      	ldr	r0, [r2, #0]
 8002842:	f107 0208 	add.w	r2, r7, #8
 8002846:	2100      	movs	r1, #0
 8002848:	4798      	blx	r3
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	db28      	blt.n	80028a2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4798      	blx	r3
 8002856:	4603      	mov	r3, r0
 8002858:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800285a:	e01c      	b.n	8002896 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	4798      	blx	r3
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800286e:	d80e      	bhi.n	800288e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6810      	ldr	r0, [r2, #0]
 8002878:	f107 0208 	add.w	r2, r7, #8
 800287c:	2100      	movs	r1, #0
 800287e:	4798      	blx	r3
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	da07      	bge.n	8002896 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002886:	f06f 0304 	mvn.w	r3, #4
 800288a:	613b      	str	r3, [r7, #16]
                 break;
 800288c:	e010      	b.n	80028b0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800288e:	f06f 0301 	mvn.w	r3, #1
 8002892:	613b      	str	r3, [r7, #16]
               break;
 8002894:	e00c      	b.n	80028b0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1dd      	bne.n	800285c <LAN8742_Init+0xc6>
 80028a0:	e006      	b.n	80028b0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80028a2:	f06f 0304 	mvn.w	r3, #4
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	e002      	b.n	80028b0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80028aa:	f06f 0303 	mvn.w	r3, #3
 80028ae:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d112      	bne.n	80028dc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	4798      	blx	r3
 80028bc:	4603      	mov	r3, r0
 80028be:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80028c0:	bf00      	nop
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	4798      	blx	r3
 80028c8:	4603      	mov	r3, r0
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028d4:	d9f5      	bls.n	80028c2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80028dc:	693b      	ldr	r3, [r7, #16]
 }
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6810      	ldr	r0, [r2, #0]
 80028fa:	f107 020c 	add.w	r2, r7, #12
 80028fe:	2101      	movs	r1, #1
 8002900:	4798      	blx	r3
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	da02      	bge.n	800290e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002908:	f06f 0304 	mvn.w	r3, #4
 800290c:	e06e      	b.n	80029ec <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6810      	ldr	r0, [r2, #0]
 8002916:	f107 020c 	add.w	r2, r7, #12
 800291a:	2101      	movs	r1, #1
 800291c:	4798      	blx	r3
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	da02      	bge.n	800292a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002924:	f06f 0304 	mvn.w	r3, #4
 8002928:	e060      	b.n	80029ec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002934:	2301      	movs	r3, #1
 8002936:	e059      	b.n	80029ec <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6810      	ldr	r0, [r2, #0]
 8002940:	f107 020c 	add.w	r2, r7, #12
 8002944:	2100      	movs	r1, #0
 8002946:	4798      	blx	r3
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	da02      	bge.n	8002954 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800294e:	f06f 0304 	mvn.w	r3, #4
 8002952:	e04b      	b.n	80029ec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11b      	bne.n	8002996 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d006      	beq.n	8002976 <LAN8742_GetLinkState+0x90>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002972:	2302      	movs	r3, #2
 8002974:	e03a      	b.n	80029ec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002980:	2303      	movs	r3, #3
 8002982:	e033      	b.n	80029ec <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800298e:	2304      	movs	r3, #4
 8002990:	e02c      	b.n	80029ec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002992:	2305      	movs	r3, #5
 8002994:	e02a      	b.n	80029ec <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6810      	ldr	r0, [r2, #0]
 800299e:	f107 020c 	add.w	r2, r7, #12
 80029a2:	211f      	movs	r1, #31
 80029a4:	4798      	blx	r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da02      	bge.n	80029b2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80029ac:	f06f 0304 	mvn.w	r3, #4
 80029b0:	e01c      	b.n	80029ec <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80029bc:	2306      	movs	r3, #6
 80029be:	e015      	b.n	80029ec <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 031c 	and.w	r3, r3, #28
 80029c6:	2b18      	cmp	r3, #24
 80029c8:	d101      	bne.n	80029ce <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80029ca:	2302      	movs	r3, #2
 80029cc:	e00e      	b.n	80029ec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 031c 	and.w	r3, r3, #28
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d101      	bne.n	80029dc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80029d8:	2303      	movs	r3, #3
 80029da:	e007      	b.n	80029ec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 031c 	and.w	r3, r3, #28
 80029e2:	2b14      	cmp	r3, #20
 80029e4:	d101      	bne.n	80029ea <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80029e6:	2304      	movs	r3, #4
 80029e8:	e000      	b.n	80029ec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80029ea:	2305      	movs	r3, #5
    }				
  }
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 f8fa 	bl	8002bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7ff fce4 	bl	80023cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a04:	f7ff fa7c 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_IncTick+0x20>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_IncTick+0x24>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_IncTick+0x24>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000008 	.word	0x20000008
 8002a34:	200007dc 	.word	0x200007dc

08002a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <HAL_GetTick+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	200007dc 	.word	0x200007dc

08002a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff ffee 	bl	8002a38 <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a68:	d005      	beq.n	8002a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_Delay+0x44>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a76:	bf00      	nop
 8002a78:	f7ff ffde 	bl	8002a38 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8f7      	bhi.n	8002a78 <HAL_Delay+0x28>
  {
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000008 	.word	0x20000008

08002a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac6:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	60d3      	str	r3, [r2, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00
 8002adc:	05fa0000 	.word	0x05fa0000

08002ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0307 	and.w	r3, r3, #7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	db0b      	blt.n	8002b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4907      	ldr	r1, [pc, #28]	; (8002b34 <__NVIC_EnableIRQ+0x38>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e100 	.word	0xe000e100

08002b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0a      	blt.n	8002b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	490c      	ldr	r1, [pc, #48]	; (8002b84 <__NVIC_SetPriority+0x4c>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b60:	e00a      	b.n	8002b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4908      	ldr	r1, [pc, #32]	; (8002b88 <__NVIC_SetPriority+0x50>)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	761a      	strb	r2, [r3, #24]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	; 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf28      	it	cs
 8002baa:	2304      	movcs	r3, #4
 8002bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <NVIC_EncodePriority+0x30>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b03      	subs	r3, #3
 8002bba:	e000      	b.n	8002bbe <NVIC_EncodePriority+0x32>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	4313      	orrs	r3, r2
         );
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	; 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ff4c 	bl	8002a98 <__NVIC_SetPriorityGrouping>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c1a:	f7ff ff61 	bl	8002ae0 <__NVIC_GetPriorityGrouping>
 8002c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	6978      	ldr	r0, [r7, #20]
 8002c26:	f7ff ffb1 	bl	8002b8c <NVIC_EncodePriority>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff80 	bl	8002b38 <__NVIC_SetPriority>
}
 8002c38:	bf00      	nop
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ff54 	bl	8002afc <__NVIC_EnableIRQ>
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff fee6 	bl	8002a38 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e099      	b.n	8002dac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c98:	e00f      	b.n	8002cba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c9a:	f7ff fecd 	bl	8002a38 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d908      	bls.n	8002cba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e078      	b.n	8002dac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e8      	bne.n	8002c9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <HAL_DMA_Init+0x158>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d107      	bne.n	8002d24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0307 	bic.w	r3, r3, #7
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d117      	bne.n	8002d7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00e      	beq.n	8002d7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fa77 	bl	8003254 <DMA_CheckFifoParam>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2240      	movs	r2, #64	; 0x40
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e016      	b.n	8002dac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa2e 	bl	80031e8 <DMA_CalcBaseAndBitshift>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	223f      	movs	r2, #63	; 0x3f
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	f010803f 	.word	0xf010803f

08002db8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_DMA_Start_IT+0x26>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e048      	b.n	8002e70 <HAL_DMA_Start_IT+0xb8>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d137      	bne.n	8002e62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2202      	movs	r2, #2
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f9c0 	bl	800318c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	223f      	movs	r2, #63	; 0x3f
 8002e12:	409a      	lsls	r2, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0216 	orr.w	r2, r2, #22
 8002e26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e36:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0208 	orr.w	r2, r2, #8
 8002e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e005      	b.n	8002e6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002e84:	4b8e      	ldr	r3, [pc, #568]	; (80030c0 <HAL_DMA_IRQHandler+0x248>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a8e      	ldr	r2, [pc, #568]	; (80030c4 <HAL_DMA_IRQHandler+0x24c>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0a9b      	lsrs	r3, r3, #10
 8002e90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01a      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	2201      	movs	r2, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d012      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f06:	2201      	movs	r2, #1
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	2204      	movs	r2, #4
 8002f20:	409a      	lsls	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d012      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f043 0204 	orr.w	r2, r3, #4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	2210      	movs	r2, #16
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d043      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03c      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	2210      	movs	r2, #16
 8002f74:	409a      	lsls	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d018      	beq.n	8002fba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d024      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
 8002fa6:	e01f      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
 8002fb8:	e016      	b.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d107      	bne.n	8002fd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0208 	bic.w	r2, r2, #8
 8002fd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	2220      	movs	r2, #32
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 808f 	beq.w	8003118 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8087 	beq.w	8003118 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	2220      	movs	r2, #32
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b05      	cmp	r3, #5
 8003020:	d136      	bne.n	8003090 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0216 	bic.w	r2, r2, #22
 8003030:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003040:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_DMA_IRQHandler+0x1da>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0208 	bic.w	r2, r2, #8
 8003060:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	223f      	movs	r2, #63	; 0x3f
 8003068:	409a      	lsls	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003082:	2b00      	cmp	r3, #0
 8003084:	d07e      	beq.n	8003184 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
        }
        return;
 800308e:	e079      	b.n	8003184 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01d      	beq.n	80030da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10d      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d031      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	e02c      	b.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
 80030be:	bf00      	nop
 80030c0:	20000000 	.word	0x20000000
 80030c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e01e      	b.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10f      	bne.n	8003108 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	2b00      	cmp	r3, #0
 800311e:	d032      	beq.n	8003186 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d022      	beq.n	8003172 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2205      	movs	r2, #5
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3301      	adds	r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	d307      	bcc.n	8003160 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f2      	bne.n	8003144 <HAL_DMA_IRQHandler+0x2cc>
 800315e:	e000      	b.n	8003162 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003160:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
 8003182:	e000      	b.n	8003186 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003184:	bf00      	nop
    }
  }
}
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d108      	bne.n	80031cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ca:	e007      	b.n	80031dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	3b10      	subs	r3, #16
 80031f8:	4a13      	ldr	r2, [pc, #76]	; (8003248 <DMA_CalcBaseAndBitshift+0x60>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <DMA_CalcBaseAndBitshift+0x64>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d908      	bls.n	8003228 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <DMA_CalcBaseAndBitshift+0x68>)
 800321e:	4013      	ands	r3, r2
 8003220:	1d1a      	adds	r2, r3, #4
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	659a      	str	r2, [r3, #88]	; 0x58
 8003226:	e006      	b.n	8003236 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <DMA_CalcBaseAndBitshift+0x68>)
 8003230:	4013      	ands	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	aaaaaaab 	.word	0xaaaaaaab
 800324c:	0802d0a4 	.word	0x0802d0a4
 8003250:	fffffc00 	.word	0xfffffc00

08003254 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11f      	bne.n	80032ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d856      	bhi.n	8003322 <DMA_CheckFifoParam+0xce>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <DMA_CheckFifoParam+0x28>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	0800328d 	.word	0x0800328d
 8003280:	0800329f 	.word	0x0800329f
 8003284:	0800328d 	.word	0x0800328d
 8003288:	08003323 	.word	0x08003323
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d046      	beq.n	8003326 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329c:	e043      	b.n	8003326 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032a6:	d140      	bne.n	800332a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ac:	e03d      	b.n	800332a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b6:	d121      	bne.n	80032fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d837      	bhi.n	800332e <DMA_CheckFifoParam+0xda>
 80032be:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <DMA_CheckFifoParam+0x70>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032db 	.word	0x080032db
 80032cc:	080032d5 	.word	0x080032d5
 80032d0:	080032ed 	.word	0x080032ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e030      	b.n	800333c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d025      	beq.n	8003332 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ea:	e022      	b.n	8003332 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032f4:	d11f      	bne.n	8003336 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032fa:	e01c      	b.n	8003336 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d903      	bls.n	800330a <DMA_CheckFifoParam+0xb6>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d003      	beq.n	8003310 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003308:	e018      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
      break;
 800330e:	e015      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	e00b      	b.n	800333a <DMA_CheckFifoParam+0xe6>
      break;
 8003322:	bf00      	nop
 8003324:	e00a      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 8003326:	bf00      	nop
 8003328:	e008      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800332a:	bf00      	nop
 800332c:	e006      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800332e:	bf00      	nop
 8003330:	e004      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 8003332:	bf00      	nop
 8003334:	e002      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;   
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <DMA_CheckFifoParam+0xe8>
      break;
 800333a:	bf00      	nop
    }
  } 
  
  return status; 
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop

0800334c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06a      	b.n	8003434 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003364:	2b00      	cmp	r3, #0
 8003366:	d106      	bne.n	8003376 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2223      	movs	r2, #35	; 0x23
 800336c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f006 fb19 	bl	80099a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003376:	4b31      	ldr	r3, [pc, #196]	; (800343c <HAL_ETH_Init+0xf0>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	4a30      	ldr	r2, [pc, #192]	; (800343c <HAL_ETH_Init+0xf0>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003380:	6453      	str	r3, [r2, #68]	; 0x44
 8003382:	4b2e      	ldr	r3, [pc, #184]	; (800343c <HAL_ETH_Init+0xf0>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_ETH_Init+0xf4>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <HAL_ETH_Init+0xf4>)
 8003394:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003398:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <HAL_ETH_Init+0xf4>)
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	4927      	ldr	r1, [pc, #156]	; (8003440 <HAL_ETH_Init+0xf4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80033a8:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_ETH_Init+0xf4>)
 80033aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c4:	f7ff fb38 	bl	8002a38 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80033ca:	e011      	b.n	80033f0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80033cc:	f7ff fb34 	bl	8002a38 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033da:	d909      	bls.n	80033f0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2204      	movs	r2, #4
 80033e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	22e0      	movs	r2, #224	; 0xe0
 80033e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e021      	b.n	8003434 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e4      	bne.n	80033cc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 ff4c 	bl	80042a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fff3 	bl	80043f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f001 f849 	bl	80044a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	461a      	mov	r2, r3
 800341a:	2100      	movs	r1, #0
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 ffb1 	bl	8004384 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2210      	movs	r2, #16
 800342e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	40013800 	.word	0x40013800

08003444 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003452:	2b10      	cmp	r3, #16
 8003454:	d17b      	bne.n	800354e <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2223      	movs	r2, #35	; 0x23
 800345a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8003472:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b35      	ldr	r3, [pc, #212]	; (8003558 <HAL_ETH_Start_IT+0x114>)
 8003482:	430b      	orrs	r3, r1
 8003484:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8003498:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2204      	movs	r2, #4
 80034a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f9fc 	bl	80038a0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0208 	orr.w	r2, r2, #8
 80034b6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80034c0:	2001      	movs	r0, #1
 80034c2:	f7ff fac5 	bl	8002a50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0204 	orr.w	r2, r2, #4
 80034dc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80034e6:	2001      	movs	r0, #1
 80034e8:	f7ff fab2 	bl	8002a50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fd74 	bl	8003fe2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800350c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003510:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003528:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003532:	69d9      	ldr	r1, [r3, #28]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_ETH_Start_IT+0x118>)
 800353a:	430b      	orrs	r3, r1
 800353c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003540:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2223      	movs	r2, #35	; 0x23
 8003546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
  }
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	00020060 	.word	0x00020060
 800355c:	0001a0c1 	.word	0x0001a0c1

08003560 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356e:	2b23      	cmp	r3, #35	; 0x23
 8003570:	d16e      	bne.n	8003650 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2223      	movs	r2, #35	; 0x23
 8003576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003582:	69d9      	ldr	r1, [r3, #28]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b34      	ldr	r3, [pc, #208]	; (800365c <HAL_ETH_Stop_IT+0xfc>)
 800358a:	400b      	ands	r3, r1
 800358c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003590:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035a8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	f023 0302 	bic.w	r3, r3, #2
 80035bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035c0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0204 	bic.w	r2, r2, #4
 80035d0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035da:	2001      	movs	r0, #1
 80035dc:	f7ff fa38 	bl	8002a50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fcfa 	bl	8003fe2 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0208 	bic.w	r2, r2, #8
 80035fc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003606:	2001      	movs	r0, #1
 8003608:	f7ff fa22 	bl	8002a50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e00e      	b.n	8003638 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	3212      	adds	r2, #18
 8003620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003624:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d9ed      	bls.n	800361a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2210      	movs	r2, #16
 8003648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	fffe5f3e 	.word	0xfffe5f3e

08003660 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f043 0201 	orr.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e045      	b.n	8003710 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368a:	2b23      	cmp	r3, #35	; 0x23
 800368c:	d13f      	bne.n	800370e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003696:	2201      	movs	r2, #1
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 ff70 	bl	8004580 <ETH_Prepare_Tx_Descriptors>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f043 0202 	orr.w	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e02a      	b.n	8003710 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80036ba:	f3bf 8f4f 	dsb	sy
}
 80036be:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	629a      	str	r2, [r3, #40]	; 0x28
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d904      	bls.n	80036dc <HAL_ETH_Transmit_IT+0x7c>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	1f1a      	subs	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f6:	461a      	mov	r2, r3
 80036f8:	2304      	movs	r3, #4
 80036fa:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003704:	461a      	mov	r2, r3
 8003706:	2300      	movs	r3, #0
 8003708:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e000      	b.n	8003710 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
  }
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d109      	bne.n	8003744 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0a8      	b.n	8003896 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374a:	2b23      	cmp	r3, #35	; 0x23
 800374c:	d001      	beq.n	8003752 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0a1      	b.n	8003896 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	3212      	adds	r2, #18
 800375e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003762:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003768:	f1c3 0304 	rsb	r3, r3, #4
 800376c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800376e:	e06a      	b.n	8003846 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <HAL_ETH_ReadData+0x88>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800379c:	2b00      	cmp	r3, #0
 800379e:	d040      	beq.n	8003822 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00c      	beq.n	80037e4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80037d4:	3b04      	subs	r3, #4
 80037d6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80037fc:	461a      	mov	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f006 fa7f 	bl	8009d04 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	441a      	add	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2200      	movs	r2, #0
 8003820:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3301      	adds	r3, #1
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d902      	bls.n	8003834 <HAL_ETH_ReadData+0x11c>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b04      	subs	r3, #4
 8003832:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	3212      	adds	r2, #18
 800383a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3301      	adds	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db06      	blt.n	800385c <HAL_ETH_ReadData+0x144>
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d202      	bcs.n	800385c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d089      	beq.n	8003770 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	441a      	add	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f815 	bl	80038a0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d108      	bne.n	8003894 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80038ac:	2301      	movs	r3, #1
 80038ae:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	3212      	adds	r2, #18
 80038bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80038c8:	e040      	b.n	800394c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d112      	bne.n	80038f8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80038d2:	f107 030c 	add.w	r3, r7, #12
 80038d6:	4618      	mov	r0, r3
 80038d8:	f006 f9e4 	bl	8009ca4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	74fb      	strb	r3, [r7, #19]
 80038e6:	e007      	b.n	80038f8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	461a      	mov	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	461a      	mov	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d026      	beq.n	800394c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4a1e      	ldr	r2, [pc, #120]	; (8003984 <ETH_UpdateDescriptor+0xe4>)
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	e003      	b.n	8003916 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003914:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8003916:	f3bf 8f5f 	dmb	sy
}
 800391a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	3301      	adds	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d902      	bls.n	800393a <ETH_UpdateDescriptor+0x9a>
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	3b04      	subs	r3, #4
 8003938:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	3212      	adds	r2, #18
 8003940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003944:	617b      	str	r3, [r7, #20]
      desccount--;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	3b01      	subs	r3, #1
 800394a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <ETH_UpdateDescriptor+0xb8>
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1b8      	bne.n	80038ca <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	429a      	cmp	r2, r3
 8003960:	d00c      	beq.n	800397c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800396a:	461a      	mov	r2, r3
 800396c:	2300      	movs	r3, #0
 800396e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800397c:	bf00      	nop
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	80004600 	.word	0x80004600

08003988 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3318      	adds	r3, #24
 8003994:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80039a6:	e03f      	b.n	8003a28 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	3304      	adds	r3, #4
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3301      	adds	r3, #1
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d028      	beq.n	8003a28 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68d9      	ldr	r1, [r3, #12]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db1b      	blt.n	8003a24 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	3304      	adds	r3, #4
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f006 f9c5 	bl	8009d88 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3304      	adds	r3, #4
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	2200      	movs	r2, #0
 8003a0a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a22:	e001      	b.n	8003a28 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_ETH_ReleaseTxPacket+0xac>
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1b9      	bne.n	80039a8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d112      	bne.n	8003a80 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d109      	bne.n	8003a80 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <HAL_ETH_IRQHandler+0x178>)
 8003a78:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f005 fcf6 	bl	800946c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d113      	bne.n	8003aba <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10a      	bne.n	8003aba <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aac:	461a      	mov	r2, r3
 8003aae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003ab2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f005 fce9 	bl	800948c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003acc:	d14c      	bne.n	8003b68 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae0:	d142      	bne.n	8003b68 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f043 0208 	orr.w	r2, r3, #8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b04:	d11a      	bne.n	8003b3c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <HAL_ETH_IRQHandler+0x17c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b30:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	22e0      	movs	r2, #224	; 0xe0
 8003b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003b3a:	e012      	b.n	8003b62 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	f248 6380 	movw	r3, #34432	; 0x8680
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f248 6380 	movw	r3, #34432	; 0x8680
 8003b60:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f005 fca2 	bl	80094ac <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d10e      	bne.n	8003b94 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f81c 	bl	8003bc4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_ETH_IRQHandler+0x180>)
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <HAL_ETH_IRQHandler+0x180>)
 8003ba2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ba6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f815 	bl	8003bd8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	00010040 	.word	0x00010040
 8003bbc:	007e2000 	.word	0x007e2000
 8003bc0:	40013c00 	.word	0x40013c00

08003bc4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 031c 	and.w	r3, r3, #28
 8003c08:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	02db      	lsls	r3, r3, #11
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	019b      	lsls	r3, r3, #6
 8003c1a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 0302 	bic.w	r3, r3, #2
 8003c2a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003c3c:	f7fe fefc 	bl	8002a38 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c42:	e00d      	b.n	8003c60 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003c44:	f7fe fef8 	bl	8002a38 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c52:	d301      	bcc.n	8003c58 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e010      	b.n	8003c7a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1ec      	bne.n	8003c44 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b086      	sub	sp, #24
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 031c 	and.w	r3, r3, #28
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	02db      	lsls	r3, r3, #11
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	019b      	lsls	r3, r3, #6
 8003cb0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cdc:	f7fe feac 	bl	8002a38 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ce2:	e00d      	b.n	8003d00 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003ce4:	f7fe fea8 	bl	8002a38 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf2:	d301      	bcc.n	8003cf8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e009      	b.n	8003d0c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ec      	bne.n	8003ce4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0d9      	b.n	8003edc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf14      	ite	ne
 8003e1a:	2301      	movne	r3, #1
 8003e1c:	2300      	moveq	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf14      	ite	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	2300      	moveq	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf0c      	ite	eq
 8003e78:	2301      	moveq	r3, #1
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e00b      	b.n	8003f14 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d105      	bne.n	8003f12 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f88f 	bl	800402c <ETH_SetMACConfig>

    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 031c 	bic.w	r3, r3, #28
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f34:	f002 fc46 	bl	80067c4 <HAL_RCC_GetHCLKFreq>
 8003f38:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d908      	bls.n	8003f54 <HAL_ETH_SetMDIOClockRange+0x38>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d804      	bhi.n	8003f54 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f043 0308 	orr.w	r3, r3, #8
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e027      	b.n	8003fa4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d908      	bls.n	8003f6e <HAL_ETH_SetMDIOClockRange+0x52>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d204      	bcs.n	8003f6e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f043 030c 	orr.w	r3, r3, #12
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e01a      	b.n	8003fa4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d303      	bcc.n	8003f7e <HAL_ETH_SetMDIOClockRange+0x62>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d911      	bls.n	8003fa2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d908      	bls.n	8003f98 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d804      	bhi.n	8003f98 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e005      	b.n	8003fa4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f043 0310 	orr.w	r3, r3, #16
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e000      	b.n	8003fa4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003fa2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	611a      	str	r2, [r3, #16]
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	01312cff 	.word	0x01312cff
 8003fb8:	02160ebf 	.word	0x02160ebf
 8003fbc:	03938700 	.word	0x03938700
 8003fc0:	05f5e0ff 	.word	0x05f5e0ff
 8003fc4:	08f0d17f 	.word	0x08f0d17f

08003fc8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004000:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004004:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004012:	2001      	movs	r0, #1
 8004014:	f7fe fd1c 	bl	8002a50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004022:	6193      	str	r3, [r2, #24]
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4b51      	ldr	r3, [pc, #324]	; (8004188 <ETH_SetMACConfig+0x15c>)
 8004042:	4013      	ands	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	7c1b      	ldrb	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <ETH_SetMACConfig+0x28>
 800404e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004052:	e000      	b.n	8004056 <ETH_SetMACConfig+0x2a>
 8004054:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	7c5b      	ldrb	r3, [r3, #17]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <ETH_SetMACConfig+0x38>
 800405e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004062:	e000      	b.n	8004066 <ETH_SetMACConfig+0x3a>
 8004064:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004066:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800406c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	7fdb      	ldrb	r3, [r3, #31]
 8004072:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004074:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800407a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	7f92      	ldrb	r2, [r2, #30]
 8004080:	2a00      	cmp	r2, #0
 8004082:	d102      	bne.n	800408a <ETH_SetMACConfig+0x5e>
 8004084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004088:	e000      	b.n	800408c <ETH_SetMACConfig+0x60>
 800408a:	2200      	movs	r2, #0
                        macconf->Speed |
 800408c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	7f1b      	ldrb	r3, [r3, #28]
 8004092:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004094:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800409a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	791b      	ldrb	r3, [r3, #4]
 80040a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80040a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80040aa:	2a00      	cmp	r2, #0
 80040ac:	d102      	bne.n	80040b4 <ETH_SetMACConfig+0x88>
 80040ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b2:	e000      	b.n	80040b6 <ETH_SetMACConfig+0x8a>
 80040b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	7bdb      	ldrb	r3, [r3, #15]
 80040bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80040be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80040c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040ce:	4313      	orrs	r3, r2
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f7fe fcb2 	bl	8002a50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004102:	4013      	ands	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004112:	2a00      	cmp	r2, #0
 8004114:	d101      	bne.n	800411a <ETH_SetMACConfig+0xee>
 8004116:	2280      	movs	r2, #128	; 0x80
 8004118:	e000      	b.n	800411c <ETH_SetMACConfig+0xf0>
 800411a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800411c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004122:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800412a:	2a01      	cmp	r2, #1
 800412c:	d101      	bne.n	8004132 <ETH_SetMACConfig+0x106>
 800412e:	2208      	movs	r2, #8
 8004130:	e000      	b.n	8004134 <ETH_SetMACConfig+0x108>
 8004132:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004134:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800413c:	2a01      	cmp	r2, #1
 800413e:	d101      	bne.n	8004144 <ETH_SetMACConfig+0x118>
 8004140:	2204      	movs	r2, #4
 8004142:	e000      	b.n	8004146 <ETH_SetMACConfig+0x11a>
 8004144:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004146:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800414e:	2a01      	cmp	r2, #1
 8004150:	d101      	bne.n	8004156 <ETH_SetMACConfig+0x12a>
 8004152:	2202      	movs	r2, #2
 8004154:	e000      	b.n	8004158 <ETH_SetMACConfig+0x12c>
 8004156:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004158:	4313      	orrs	r3, r2
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004170:	2001      	movs	r0, #1
 8004172:	f7fe fc6d 	bl	8002a50 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	619a      	str	r2, [r3, #24]
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	ff20810f 	.word	0xff20810f

0800418c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4b3d      	ldr	r3, [pc, #244]	; (800429c <ETH_SetDMAConfig+0x110>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	7b1b      	ldrb	r3, [r3, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <ETH_SetDMAConfig+0x2c>
 80041b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041b6:	e000      	b.n	80041ba <ETH_SetDMAConfig+0x2e>
 80041b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	7b5b      	ldrb	r3, [r3, #13]
 80041be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80041c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	7f52      	ldrb	r2, [r2, #29]
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	d102      	bne.n	80041d0 <ETH_SetDMAConfig+0x44>
 80041ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041ce:	e000      	b.n	80041d2 <ETH_SetDMAConfig+0x46>
 80041d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80041d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	7b9b      	ldrb	r3, [r3, #14]
 80041d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80041da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80041e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	7f1b      	ldrb	r3, [r3, #28]
 80041e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80041e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	7f9b      	ldrb	r3, [r3, #30]
 80041ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80041f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80041f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004200:	4313      	orrs	r3, r2
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004210:	461a      	mov	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004222:	2001      	movs	r0, #1
 8004224:	f7fe fc14 	bl	8002a50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004230:	461a      	mov	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	791b      	ldrb	r3, [r3, #4]
 800423a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004240:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004246:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800424c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004254:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004256:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800425e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004264:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800426e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004272:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004280:	2001      	movs	r0, #1
 8004282:	f7fe fbe5 	bl	8002a50 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428e:	461a      	mov	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6013      	str	r3, [r2, #0]
}
 8004294:	bf00      	nop
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	f8de3f23 	.word	0xf8de3f23

080042a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b0a6      	sub	sp, #152	; 0x98
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80042b4:	2300      	movs	r3, #0
 80042b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80042dc:	2300      	movs	r3, #0
 80042de:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004302:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004306:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800430c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800430e:	2300      	movs	r3, #0
 8004310:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004314:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fe86 	bl	800402c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004320:	2301      	movs	r3, #1
 8004322:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004324:	2301      	movs	r3, #1
 8004326:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800432e:	2301      	movs	r3, #1
 8004330:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800433c:	2300      	movs	r3, #0
 800433e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004342:	2300      	movs	r3, #0
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800434c:	2301      	movs	r3, #1
 800434e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004354:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800435a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800435c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004360:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004362:	2301      	movs	r3, #1
 8004364:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004368:	2300      	movs	r3, #0
 800436a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800436c:	2300      	movs	r3, #0
 800436e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004370:	f107 0308 	add.w	r3, r7, #8
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff ff08 	bl	800418c <ETH_SetDMAConfig>
}
 800437c:	bf00      	nop
 800437e:	3798      	adds	r7, #152	; 0x98
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3305      	adds	r3, #5
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	3204      	adds	r2, #4
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <ETH_MACAddressConfig+0x68>)
 80043a6:	4413      	add	r3, r2
 80043a8:	461a      	mov	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3303      	adds	r3, #3
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	061a      	lsls	r2, r3, #24
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3302      	adds	r3, #2
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3301      	adds	r3, #1
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	4313      	orrs	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <ETH_MACAddressConfig+0x6c>)
 80043d6:	4413      	add	r3, r2
 80043d8:	461a      	mov	r2, r3
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	6013      	str	r3, [r2, #0]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40028040 	.word	0x40028040
 80043f0:	40028044 	.word	0x40028044

080043f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e03e      	b.n	8004480 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68d9      	ldr	r1, [r3, #12]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	440b      	add	r3, r1
 8004412:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2200      	movs	r2, #0
 800441e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2200      	movs	r2, #0
 800442a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	3206      	adds	r2, #6
 8004434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d80c      	bhi.n	8004464 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68d9      	ldr	r1, [r3, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	440b      	add	r3, r1
 800445c:	461a      	mov	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	e004      	b.n	800446e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	461a      	mov	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b03      	cmp	r3, #3
 8004484:	d9bd      	bls.n	8004402 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004498:	611a      	str	r2, [r3, #16]
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	e046      	b.n	8004542 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6919      	ldr	r1, [r3, #16]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	440b      	add	r3, r1
 80044c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2200      	movs	r2, #0
 80044d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2200      	movs	r2, #0
 80044d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2200      	movs	r2, #0
 80044e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2200      	movs	r2, #0
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80044f8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	3212      	adds	r2, #18
 800450e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d80c      	bhi.n	8004532 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6919      	ldr	r1, [r3, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	440b      	add	r3, r1
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	60da      	str	r2, [r3, #12]
 8004530:	e004      	b.n	800453c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	461a      	mov	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3301      	adds	r3, #1
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d9b5      	bls.n	80044b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004572:	60da      	str	r2, [r3, #12]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004580:	b480      	push	{r7}
 8004582:	b08d      	sub	sp, #52	; 0x34
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3318      	adds	r3, #24
 8004590:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045aa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c2:	d007      	beq.n	80045d4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	3304      	adds	r3, #4
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80045d4:	2302      	movs	r3, #2
 80045d6:	e0ff      	b.n	80047d8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	3301      	adds	r3, #1
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4b7d      	ldr	r3, [pc, #500]	; (80047e4 <ETH_Prepare_Tx_Descriptors+0x264>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	6852      	ldr	r2, [r2, #4]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	431a      	orrs	r2, r3
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	431a      	orrs	r2, r3
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800465a:	f3bf 8f5f 	dmb	sy
}
 800465e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800466c:	e082      	b.n	8004774 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d006      	beq.n	800468e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	e005      	b.n	800469a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	3301      	adds	r3, #1
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d902      	bls.n	80046ac <ETH_Prepare_Tx_Descriptors+0x12c>
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	3b04      	subs	r3, #4
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ce:	d007      	beq.n	80046e0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	3304      	adds	r3, #4
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d029      	beq.n	8004734 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ec:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f2:	e019      	b.n	8004728 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80046f4:	f3bf 8f5f 	dmb	sy
}
 80046f8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	3301      	adds	r3, #1
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	2b03      	cmp	r3, #3
 8004710:	d902      	bls.n	8004718 <ETH_Prepare_Tx_Descriptors+0x198>
 8004712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004714:	3b04      	subs	r3, #4
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004720:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	3301      	adds	r3, #1
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
 8004728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	429a      	cmp	r2, r3
 800472e:	d3e1      	bcc.n	80046f4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004730:	2302      	movs	r3, #2
 8004732:	e051      	b.n	80047d8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	3301      	adds	r3, #1
 8004738:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	4b25      	ldr	r3, [pc, #148]	; (80047e4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004750:	4013      	ands	r3, r2
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	6852      	ldr	r2, [r2, #4]
 8004756:	431a      	orrs	r2, r3
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	3301      	adds	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004762:	f3bf 8f5f 	dmb	sy
}
 8004766:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f47f af78 	bne.w	800466e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d006      	beq.n	8004792 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e005      	b.n	800479e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ae:	6979      	ldr	r1, [r7, #20]
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	3304      	adds	r3, #4
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047be:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80047c0:	b672      	cpsid	i
}
 80047c2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80047d2:	b662      	cpsie	i
}
 80047d4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3734      	adds	r7, #52	; 0x34
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	ffffe000 	.word	0xffffe000

080047e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b089      	sub	sp, #36	; 0x24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80047fa:	2300      	movs	r3, #0
 80047fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	e175      	b.n	8004af4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004808:	2201      	movs	r2, #1
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4013      	ands	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	429a      	cmp	r2, r3
 8004822:	f040 8164 	bne.w	8004aee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d005      	beq.n	800483e <HAL_GPIO_Init+0x56>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d130      	bne.n	80048a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	2203      	movs	r2, #3
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004874:	2201      	movs	r2, #1
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	091b      	lsrs	r3, r3, #4
 800488a:	f003 0201 	and.w	r2, r3, #1
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d017      	beq.n	80048dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	2203      	movs	r2, #3
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d123      	bne.n	8004930 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	08da      	lsrs	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3208      	adds	r2, #8
 80048f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	220f      	movs	r2, #15
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	08da      	lsrs	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3208      	adds	r2, #8
 800492a:	69b9      	ldr	r1, [r7, #24]
 800492c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2203      	movs	r2, #3
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 0203 	and.w	r2, r3, #3
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80be 	beq.w	8004aee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004972:	4b66      	ldr	r3, [pc, #408]	; (8004b0c <HAL_GPIO_Init+0x324>)
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	4a65      	ldr	r2, [pc, #404]	; (8004b0c <HAL_GPIO_Init+0x324>)
 8004978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800497c:	6453      	str	r3, [r2, #68]	; 0x44
 800497e:	4b63      	ldr	r3, [pc, #396]	; (8004b0c <HAL_GPIO_Init+0x324>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800498a:	4a61      	ldr	r2, [pc, #388]	; (8004b10 <HAL_GPIO_Init+0x328>)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	089b      	lsrs	r3, r3, #2
 8004990:	3302      	adds	r3, #2
 8004992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	220f      	movs	r2, #15
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4013      	ands	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a58      	ldr	r2, [pc, #352]	; (8004b14 <HAL_GPIO_Init+0x32c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d037      	beq.n	8004a26 <HAL_GPIO_Init+0x23e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a57      	ldr	r2, [pc, #348]	; (8004b18 <HAL_GPIO_Init+0x330>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d031      	beq.n	8004a22 <HAL_GPIO_Init+0x23a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a56      	ldr	r2, [pc, #344]	; (8004b1c <HAL_GPIO_Init+0x334>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d02b      	beq.n	8004a1e <HAL_GPIO_Init+0x236>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a55      	ldr	r2, [pc, #340]	; (8004b20 <HAL_GPIO_Init+0x338>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d025      	beq.n	8004a1a <HAL_GPIO_Init+0x232>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a54      	ldr	r2, [pc, #336]	; (8004b24 <HAL_GPIO_Init+0x33c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01f      	beq.n	8004a16 <HAL_GPIO_Init+0x22e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a53      	ldr	r2, [pc, #332]	; (8004b28 <HAL_GPIO_Init+0x340>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d019      	beq.n	8004a12 <HAL_GPIO_Init+0x22a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a52      	ldr	r2, [pc, #328]	; (8004b2c <HAL_GPIO_Init+0x344>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_GPIO_Init+0x226>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a51      	ldr	r2, [pc, #324]	; (8004b30 <HAL_GPIO_Init+0x348>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00d      	beq.n	8004a0a <HAL_GPIO_Init+0x222>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a50      	ldr	r2, [pc, #320]	; (8004b34 <HAL_GPIO_Init+0x34c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <HAL_GPIO_Init+0x21e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4f      	ldr	r2, [pc, #316]	; (8004b38 <HAL_GPIO_Init+0x350>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <HAL_GPIO_Init+0x21a>
 80049fe:	2309      	movs	r3, #9
 8004a00:	e012      	b.n	8004a28 <HAL_GPIO_Init+0x240>
 8004a02:	230a      	movs	r3, #10
 8004a04:	e010      	b.n	8004a28 <HAL_GPIO_Init+0x240>
 8004a06:	2308      	movs	r3, #8
 8004a08:	e00e      	b.n	8004a28 <HAL_GPIO_Init+0x240>
 8004a0a:	2307      	movs	r3, #7
 8004a0c:	e00c      	b.n	8004a28 <HAL_GPIO_Init+0x240>
 8004a0e:	2306      	movs	r3, #6
 8004a10:	e00a      	b.n	8004a28 <HAL_GPIO_Init+0x240>
 8004a12:	2305      	movs	r3, #5
 8004a14:	e008      	b.n	8004a28 <HAL_GPIO_Init+0x240>
 8004a16:	2304      	movs	r3, #4
 8004a18:	e006      	b.n	8004a28 <HAL_GPIO_Init+0x240>
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e004      	b.n	8004a28 <HAL_GPIO_Init+0x240>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e002      	b.n	8004a28 <HAL_GPIO_Init+0x240>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <HAL_GPIO_Init+0x240>
 8004a26:	2300      	movs	r3, #0
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	f002 0203 	and.w	r2, r2, #3
 8004a2e:	0092      	lsls	r2, r2, #2
 8004a30:	4093      	lsls	r3, r2
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a38:	4935      	ldr	r1, [pc, #212]	; (8004b10 <HAL_GPIO_Init+0x328>)
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	089b      	lsrs	r3, r3, #2
 8004a3e:	3302      	adds	r3, #2
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a46:	4b3d      	ldr	r3, [pc, #244]	; (8004b3c <HAL_GPIO_Init+0x354>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4013      	ands	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a6a:	4a34      	ldr	r2, [pc, #208]	; (8004b3c <HAL_GPIO_Init+0x354>)
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a70:	4b32      	ldr	r3, [pc, #200]	; (8004b3c <HAL_GPIO_Init+0x354>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a94:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <HAL_GPIO_Init+0x354>)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a9a:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <HAL_GPIO_Init+0x354>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004abe:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <HAL_GPIO_Init+0x354>)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <HAL_GPIO_Init+0x354>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <HAL_GPIO_Init+0x354>)
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	3301      	adds	r3, #1
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	2b0f      	cmp	r3, #15
 8004af8:	f67f ae86 	bls.w	8004808 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	3724      	adds	r7, #36	; 0x24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40013800 	.word	0x40013800
 8004b14:	40020000 	.word	0x40020000
 8004b18:	40020400 	.word	0x40020400
 8004b1c:	40020800 	.word	0x40020800
 8004b20:	40020c00 	.word	0x40020c00
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40021400 	.word	0x40021400
 8004b2c:	40021800 	.word	0x40021800
 8004b30:	40021c00 	.word	0x40021c00
 8004b34:	40022000 	.word	0x40022000
 8004b38:	40022400 	.word	0x40022400
 8004b3c:	40013c00 	.word	0x40013c00

08004b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e07f      	b.n	8004c52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fd f9f2 	bl	8001f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2224      	movs	r2, #36	; 0x24
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ba0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	e006      	b.n	8004bc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d104      	bne.n	8004bda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b1d      	ldr	r3, [pc, #116]	; (8004c5c <HAL_I2C_Init+0x11c>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69d9      	ldr	r1, [r3, #28]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	02008000 	.word	0x02008000

08004c60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	817b      	strh	r3, [r7, #10]
 8004c70:	4613      	mov	r3, r2
 8004c72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	f040 80da 	bne.w	8004e36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_I2C_Master_Transmit+0x30>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e0d3      	b.n	8004e38 <HAL_I2C_Master_Transmit+0x1d8>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c98:	f7fd fece 	bl	8002a38 <HAL_GetTick>
 8004c9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	2319      	movs	r3, #25
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fdc4 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e0be      	b.n	8004e38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2221      	movs	r2, #33	; 0x21
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	893a      	ldrh	r2, [r7, #8]
 8004cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2bff      	cmp	r3, #255	; 0xff
 8004cea:	d90e      	bls.n	8004d0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	22ff      	movs	r2, #255	; 0xff
 8004cf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	8979      	ldrh	r1, [r7, #10]
 8004cfa:	4b51      	ldr	r3, [pc, #324]	; (8004e40 <HAL_I2C_Master_Transmit+0x1e0>)
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 ffae 	bl	8005c64 <I2C_TransferConfig>
 8004d08:	e06c      	b.n	8004de4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	8979      	ldrh	r1, [r7, #10]
 8004d1c:	4b48      	ldr	r3, [pc, #288]	; (8004e40 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 ff9d 	bl	8005c64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d2a:	e05b      	b.n	8004de4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	6a39      	ldr	r1, [r7, #32]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fdc1 	bl	80058b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e07b      	b.n	8004e38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	781a      	ldrb	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d034      	beq.n	8004de4 <HAL_I2C_Master_Transmit+0x184>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d130      	bne.n	8004de4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2180      	movs	r1, #128	; 0x80
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fd53 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e04d      	b.n	8004e38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2bff      	cmp	r3, #255	; 0xff
 8004da4:	d90e      	bls.n	8004dc4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	22ff      	movs	r2, #255	; 0xff
 8004daa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	8979      	ldrh	r1, [r7, #10]
 8004db4:	2300      	movs	r3, #0
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 ff51 	bl	8005c64 <I2C_TransferConfig>
 8004dc2:	e00f      	b.n	8004de4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	8979      	ldrh	r1, [r7, #10]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 ff40 	bl	8005c64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d19e      	bne.n	8004d2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	6a39      	ldr	r1, [r7, #32]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fda0 	bl	8005938 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e01a      	b.n	8004e38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2220      	movs	r2, #32
 8004e08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6859      	ldr	r1, [r3, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_I2C_Master_Transmit+0x1e4>)
 8004e16:	400b      	ands	r3, r1
 8004e18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	e000      	b.n	8004e38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
  }
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	80002000 	.word	0x80002000
 8004e44:	fe00e800 	.word	0xfe00e800

08004e48 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	461a      	mov	r2, r3
 8004e54:	460b      	mov	r3, r1
 8004e56:	817b      	strh	r3, [r7, #10]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	f040 80db 	bne.w	8005020 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_I2C_Master_Receive+0x30>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e0d4      	b.n	8005022 <HAL_I2C_Master_Receive+0x1da>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e80:	f7fd fdda 	bl	8002a38 <HAL_GetTick>
 8004e84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	2319      	movs	r3, #25
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fcd0 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0bf      	b.n	8005022 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2222      	movs	r2, #34	; 0x22
 8004ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2210      	movs	r2, #16
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	893a      	ldrh	r2, [r7, #8]
 8004ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2bff      	cmp	r3, #255	; 0xff
 8004ed2:	d90e      	bls.n	8004ef2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	22ff      	movs	r2, #255	; 0xff
 8004ed8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	8979      	ldrh	r1, [r7, #10]
 8004ee2:	4b52      	ldr	r3, [pc, #328]	; (800502c <HAL_I2C_Master_Receive+0x1e4>)
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 feba 	bl	8005c64 <I2C_TransferConfig>
 8004ef0:	e06d      	b.n	8004fce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	8979      	ldrh	r1, [r7, #10]
 8004f04:	4b49      	ldr	r3, [pc, #292]	; (800502c <HAL_I2C_Master_Receive+0x1e4>)
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fea9 	bl	8005c64 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004f12:	e05c      	b.n	8004fce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	6a39      	ldr	r1, [r7, #32]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fd49 	bl	80059b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e07c      	b.n	8005022 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d034      	beq.n	8004fce <HAL_I2C_Master_Receive+0x186>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d130      	bne.n	8004fce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	2200      	movs	r2, #0
 8004f74:	2180      	movs	r1, #128	; 0x80
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fc5e 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e04d      	b.n	8005022 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2bff      	cmp	r3, #255	; 0xff
 8004f8e:	d90e      	bls.n	8004fae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	22ff      	movs	r2, #255	; 0xff
 8004f94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	8979      	ldrh	r1, [r7, #10]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fe5c 	bl	8005c64 <I2C_TransferConfig>
 8004fac:	e00f      	b.n	8004fce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	8979      	ldrh	r1, [r7, #10]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fe4b 	bl	8005c64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d19d      	bne.n	8004f14 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	6a39      	ldr	r1, [r7, #32]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fcab 	bl	8005938 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e01a      	b.n	8005022 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <HAL_I2C_Master_Receive+0x1e8>)
 8005000:	400b      	ands	r3, r1
 8005002:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	80002400 	.word	0x80002400
 8005030:	fe00e800 	.word	0xfe00e800

08005034 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	4608      	mov	r0, r1
 800503e:	4611      	mov	r1, r2
 8005040:	461a      	mov	r2, r3
 8005042:	4603      	mov	r3, r0
 8005044:	817b      	strh	r3, [r7, #10]
 8005046:	460b      	mov	r3, r1
 8005048:	813b      	strh	r3, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b20      	cmp	r3, #32
 8005058:	f040 80f9 	bne.w	800524e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_I2C_Mem_Write+0x34>
 8005062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005064:	2b00      	cmp	r3, #0
 8005066:	d105      	bne.n	8005074 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800506e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0ed      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_I2C_Mem_Write+0x4e>
 800507e:	2302      	movs	r3, #2
 8005080:	e0e6      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800508a:	f7fd fcd5 	bl	8002a38 <HAL_GetTick>
 800508e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2319      	movs	r3, #25
 8005096:	2201      	movs	r2, #1
 8005098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fbcb 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0d1      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2221      	movs	r2, #33	; 0x21
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2240      	movs	r2, #64	; 0x40
 80050b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050d4:	88f8      	ldrh	r0, [r7, #6]
 80050d6:	893a      	ldrh	r2, [r7, #8]
 80050d8:	8979      	ldrh	r1, [r7, #10]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	4603      	mov	r3, r0
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fadb 	bl	80056a0 <I2C_RequestMemoryWrite>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0a9      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	2bff      	cmp	r3, #255	; 0xff
 8005104:	d90e      	bls.n	8005124 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	22ff      	movs	r2, #255	; 0xff
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	b2da      	uxtb	r2, r3
 8005112:	8979      	ldrh	r1, [r7, #10]
 8005114:	2300      	movs	r3, #0
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fda1 	bl	8005c64 <I2C_TransferConfig>
 8005122:	e00f      	b.n	8005144 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005132:	b2da      	uxtb	r2, r3
 8005134:	8979      	ldrh	r1, [r7, #10]
 8005136:	2300      	movs	r3, #0
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fd90 	bl	8005c64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fbb5 	bl	80058b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e07b      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	781a      	ldrb	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d034      	beq.n	80051fc <HAL_I2C_Mem_Write+0x1c8>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005196:	2b00      	cmp	r3, #0
 8005198:	d130      	bne.n	80051fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	2200      	movs	r2, #0
 80051a2:	2180      	movs	r1, #128	; 0x80
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fb47 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e04d      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2bff      	cmp	r3, #255	; 0xff
 80051bc:	d90e      	bls.n	80051dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	22ff      	movs	r2, #255	; 0xff
 80051c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	8979      	ldrh	r1, [r7, #10]
 80051cc:	2300      	movs	r3, #0
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fd45 	bl	8005c64 <I2C_TransferConfig>
 80051da:	e00f      	b.n	80051fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	8979      	ldrh	r1, [r7, #10]
 80051ee:	2300      	movs	r3, #0
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fd34 	bl	8005c64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d19e      	bne.n	8005144 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fb94 	bl	8005938 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e01a      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2220      	movs	r2, #32
 8005220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6859      	ldr	r1, [r3, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <HAL_I2C_Mem_Write+0x224>)
 800522e:	400b      	ands	r3, r1
 8005230:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e000      	b.n	8005250 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	fe00e800 	.word	0xfe00e800

0800525c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	817b      	strh	r3, [r7, #10]
 800526e:	460b      	mov	r3, r1
 8005270:	813b      	strh	r3, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b20      	cmp	r3, #32
 8005280:	f040 80fd 	bne.w	800547e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_I2C_Mem_Read+0x34>
 800528a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800528c:	2b00      	cmp	r3, #0
 800528e:	d105      	bne.n	800529c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005296:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0f1      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_I2C_Mem_Read+0x4e>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e0ea      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052b2:	f7fd fbc1 	bl	8002a38 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	2319      	movs	r3, #25
 80052be:	2201      	movs	r2, #1
 80052c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 fab7 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0d5      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2222      	movs	r2, #34	; 0x22
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2240      	movs	r2, #64	; 0x40
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a3a      	ldr	r2, [r7, #32]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052fc:	88f8      	ldrh	r0, [r7, #6]
 80052fe:	893a      	ldrh	r2, [r7, #8]
 8005300:	8979      	ldrh	r1, [r7, #10]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	4603      	mov	r3, r0
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 fa1b 	bl	8005748 <I2C_RequestMemoryRead>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0ad      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2bff      	cmp	r3, #255	; 0xff
 800532c:	d90e      	bls.n	800534c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	22ff      	movs	r2, #255	; 0xff
 8005332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005338:	b2da      	uxtb	r2, r3
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	4b52      	ldr	r3, [pc, #328]	; (8005488 <HAL_I2C_Mem_Read+0x22c>)
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fc8d 	bl	8005c64 <I2C_TransferConfig>
 800534a:	e00f      	b.n	800536c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535a:	b2da      	uxtb	r2, r3
 800535c:	8979      	ldrh	r1, [r7, #10]
 800535e:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <HAL_I2C_Mem_Read+0x22c>)
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fc7c 	bl	8005c64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	2200      	movs	r2, #0
 8005374:	2104      	movs	r1, #4
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fa5e 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e07c      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d034      	beq.n	800542c <HAL_I2C_Mem_Read+0x1d0>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d130      	bne.n	800542c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2200      	movs	r2, #0
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fa2f 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e04d      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2bff      	cmp	r3, #255	; 0xff
 80053ec:	d90e      	bls.n	800540c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	22ff      	movs	r2, #255	; 0xff
 80053f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	8979      	ldrh	r1, [r7, #10]
 80053fc:	2300      	movs	r3, #0
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fc2d 	bl	8005c64 <I2C_TransferConfig>
 800540a:	e00f      	b.n	800542c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541a:	b2da      	uxtb	r2, r3
 800541c:	8979      	ldrh	r1, [r7, #10]
 800541e:	2300      	movs	r3, #0
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fc1c 	bl	8005c64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d19a      	bne.n	800536c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fa7c 	bl	8005938 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e01a      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2220      	movs	r2, #32
 8005450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6859      	ldr	r1, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_I2C_Mem_Read+0x230>)
 800545e:	400b      	ands	r3, r1
 8005460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	80002400 	.word	0x80002400
 800548c:	fe00e800 	.word	0xfe00e800

08005490 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	460b      	mov	r3, r1
 800549e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	f040 80ef 	bne.w	8005690 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c0:	d101      	bne.n	80054c6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80054c2:	2302      	movs	r3, #2
 80054c4:	e0e5      	b.n	8005692 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_I2C_IsDeviceReady+0x44>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e0de      	b.n	8005692 <HAL_I2C_IsDeviceReady+0x202>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2224      	movs	r2, #36	; 0x24
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d105      	bne.n	80054fe <HAL_I2C_IsDeviceReady+0x6e>
 80054f2:	897b      	ldrh	r3, [r7, #10]
 80054f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054f8:	4b68      	ldr	r3, [pc, #416]	; (800569c <HAL_I2C_IsDeviceReady+0x20c>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	e004      	b.n	8005508 <HAL_I2C_IsDeviceReady+0x78>
 80054fe:	897b      	ldrh	r3, [r7, #10]
 8005500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005504:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800550e:	f7fd fa93 	bl	8002a38 <HAL_GetTick>
 8005512:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b20      	cmp	r3, #32
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b10      	cmp	r3, #16
 8005536:	bf0c      	ite	eq
 8005538:	2301      	moveq	r3, #1
 800553a:	2300      	movne	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005540:	e034      	b.n	80055ac <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005548:	d01a      	beq.n	8005580 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800554a:	f7fd fa75 	bl	8002a38 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d302      	bcc.n	8005560 <HAL_I2C_IsDeviceReady+0xd0>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10f      	bne.n	8005580 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556c:	f043 0220 	orr.w	r2, r3, #32
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e088      	b.n	8005692 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b20      	cmp	r3, #32
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	bf0c      	ite	eq
 80055a4:	2301      	moveq	r3, #1
 80055a6:	2300      	movne	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80055ac:	7ffb      	ldrb	r3, [r7, #31]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d102      	bne.n	80055b8 <HAL_I2C_IsDeviceReady+0x128>
 80055b2:	7fbb      	ldrb	r3, [r7, #30]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0c4      	beq.n	8005542 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d01a      	beq.n	80055fc <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2200      	movs	r2, #0
 80055ce:	2120      	movs	r1, #32
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f931 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e058      	b.n	8005692 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2220      	movs	r2, #32
 80055e6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e04a      	b.n	8005692 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	2120      	movs	r1, #32
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f916 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e03d      	b.n	8005692 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2210      	movs	r2, #16
 800561c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2220      	movs	r2, #32
 8005624:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	429a      	cmp	r2, r3
 800562c:	d118      	bne.n	8005660 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800563c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2200      	movs	r2, #0
 8005646:	2120      	movs	r1, #32
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f8f5 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e01c      	b.n	8005692 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2220      	movs	r2, #32
 800565e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	3301      	adds	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	429a      	cmp	r2, r3
 800566c:	f63f af3d 	bhi.w	80054ea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	02002000 	.word	0x02002000

080056a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	4608      	mov	r0, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	461a      	mov	r2, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	817b      	strh	r3, [r7, #10]
 80056b2:	460b      	mov	r3, r1
 80056b4:	813b      	strh	r3, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	8979      	ldrh	r1, [r7, #10]
 80056c0:	4b20      	ldr	r3, [pc, #128]	; (8005744 <I2C_RequestMemoryWrite+0xa4>)
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 facb 	bl	8005c64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	69b9      	ldr	r1, [r7, #24]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f8f0 	bl	80058b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e02c      	b.n	800573c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056e2:	88fb      	ldrh	r3, [r7, #6]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d105      	bne.n	80056f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056e8:	893b      	ldrh	r3, [r7, #8]
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	629a      	str	r2, [r3, #40]	; 0x28
 80056f2:	e015      	b.n	8005720 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056f4:	893b      	ldrh	r3, [r7, #8]
 80056f6:	0a1b      	lsrs	r3, r3, #8
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	69b9      	ldr	r1, [r7, #24]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 f8d6 	bl	80058b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e012      	b.n	800573c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005716:	893b      	ldrh	r3, [r7, #8]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2200      	movs	r2, #0
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f884 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	80002000 	.word	0x80002000

08005748 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	4608      	mov	r0, r1
 8005752:	4611      	mov	r1, r2
 8005754:	461a      	mov	r2, r3
 8005756:	4603      	mov	r3, r0
 8005758:	817b      	strh	r3, [r7, #10]
 800575a:	460b      	mov	r3, r1
 800575c:	813b      	strh	r3, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	8979      	ldrh	r1, [r7, #10]
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <I2C_RequestMemoryRead+0xa4>)
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	2300      	movs	r3, #0
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 fa78 	bl	8005c64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	69b9      	ldr	r1, [r7, #24]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f89d 	bl	80058b8 <I2C_WaitOnTXISFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e02c      	b.n	80057e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d105      	bne.n	800579a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800578e:	893b      	ldrh	r3, [r7, #8]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28
 8005798:	e015      	b.n	80057c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800579a:	893b      	ldrh	r3, [r7, #8]
 800579c:	0a1b      	lsrs	r3, r3, #8
 800579e:	b29b      	uxth	r3, r3
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	69b9      	ldr	r1, [r7, #24]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f883 	bl	80058b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e012      	b.n	80057e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057bc:	893b      	ldrh	r3, [r7, #8]
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2200      	movs	r2, #0
 80057ce:	2140      	movs	r1, #64	; 0x40
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f831 	bl	8005838 <I2C_WaitOnFlagUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	80002000 	.word	0x80002000

080057f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b02      	cmp	r3, #2
 8005804:	d103      	bne.n	800580e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	d007      	beq.n	800582c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	619a      	str	r2, [r3, #24]
  }
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005848:	e022      	b.n	8005890 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005850:	d01e      	beq.n	8005890 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005852:	f7fd f8f1 	bl	8002a38 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d302      	bcc.n	8005868 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d113      	bne.n	8005890 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586c:	f043 0220 	orr.w	r2, r3, #32
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e00f      	b.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d0cd      	beq.n	800584a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058c4:	e02c      	b.n	8005920 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f8ea 	bl	8005aa4 <I2C_IsErrorOccurred>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e02a      	b.n	8005930 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e0:	d01e      	beq.n	8005920 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e2:	f7fd f8a9 	bl	8002a38 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d113      	bne.n	8005920 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fc:	f043 0220 	orr.w	r2, r3, #32
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e007      	b.n	8005930 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b02      	cmp	r3, #2
 800592c:	d1cb      	bne.n	80058c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005944:	e028      	b.n	8005998 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f8aa 	bl	8005aa4 <I2C_IsErrorOccurred>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e026      	b.n	80059a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595a:	f7fd f86d 	bl	8002a38 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	d302      	bcc.n	8005970 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d113      	bne.n	8005998 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005974:	f043 0220 	orr.w	r2, r3, #32
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e007      	b.n	80059a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d1cf      	bne.n	8005946 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059bc:	e064      	b.n	8005a88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f86e 	bl	8005aa4 <I2C_IsErrorOccurred>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e062      	b.n	8005a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d138      	bne.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d105      	bne.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e04e      	b.n	8005a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d107      	bne.n	8005a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2204      	movs	r2, #4
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
 8005a16:	e002      	b.n	8005a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2220      	movs	r2, #32
 8005a24:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6859      	ldr	r1, [r3, #4]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005a32:	400b      	ands	r3, r1
 8005a34:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e022      	b.n	8005a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a52:	f7fc fff1 	bl	8002a38 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10f      	bne.n	8005a88 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6c:	f043 0220 	orr.w	r2, r3, #32
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e007      	b.n	8005a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d193      	bne.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	fe00e800 	.word	0xfe00e800

08005aa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d068      	beq.n	8005ba2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2210      	movs	r2, #16
 8005ad6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ad8:	e049      	b.n	8005b6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae0:	d045      	beq.n	8005b6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ae2:	f7fc ffa9 	bl	8002a38 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d302      	bcc.n	8005af8 <I2C_IsErrorOccurred+0x54>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d13a      	bne.n	8005b6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1a:	d121      	bne.n	8005b60 <I2C_IsErrorOccurred+0xbc>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b22:	d01d      	beq.n	8005b60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b24:	7cfb      	ldrb	r3, [r7, #19]
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d01a      	beq.n	8005b60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b3a:	f7fc ff7d 	bl	8002a38 <HAL_GetTick>
 8005b3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b40:	e00e      	b.n	8005b60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b42:	f7fc ff79 	bl	8002a38 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b19      	cmp	r3, #25
 8005b4e:	d907      	bls.n	8005b60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f043 0320 	orr.w	r3, r3, #32
 8005b56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005b5e:	e006      	b.n	8005b6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d1e9      	bne.n	8005b42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d003      	beq.n	8005b84 <I2C_IsErrorOccurred+0xe0>
 8005b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0aa      	beq.n	8005ada <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d103      	bne.n	8005b94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2220      	movs	r2, #32
 8005b92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	f043 0304 	orr.w	r3, r3, #4
 8005b9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	f043 0308 	orr.w	r3, r3, #8
 8005bdc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005be6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	f043 0302 	orr.w	r3, r3, #2
 8005bfe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01c      	beq.n	8005c52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7ff fde9 	bl	80057f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6859      	ldr	r1, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <I2C_IsErrorOccurred+0x1bc>)
 8005c2a:	400b      	ands	r3, r1
 8005c2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	431a      	orrs	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3728      	adds	r7, #40	; 0x28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	fe00e800 	.word	0xfe00e800

08005c64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	817b      	strh	r3, [r7, #10]
 8005c72:	4613      	mov	r3, r2
 8005c74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c76:	897b      	ldrh	r3, [r7, #10]
 8005c78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c7c:	7a7b      	ldrb	r3, [r7, #9]
 8005c7e:	041b      	lsls	r3, r3, #16
 8005c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	0d5b      	lsrs	r3, r3, #21
 8005c9e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ca2:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <I2C_TransferConfig+0x60>)
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	ea02 0103 	and.w	r1, r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	03ff63ff 	.word	0x03ff63ff

08005cc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d138      	bne.n	8005d50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e032      	b.n	8005d52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2224      	movs	r2, #36	; 0x24
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0201 	bic.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6819      	ldr	r1, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	e000      	b.n	8005d52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d50:	2302      	movs	r3, #2
  }
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b085      	sub	sp, #20
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d139      	bne.n	8005de8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e033      	b.n	8005dea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2224      	movs	r2, #36	; 0x24
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0201 	bic.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005db0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	e000      	b.n	8005dea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005de8:	2302      	movs	r3, #2
  }
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e02:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	4a22      	ldr	r2, [pc, #136]	; (8005e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e0e:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e26:	f7fc fe07 	bl	8002a38 <HAL_GetTick>
 8005e2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e2c:	e009      	b.n	8005e42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e2e:	f7fc fe03 	bl	8002a38 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e3c:	d901      	bls.n	8005e42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e022      	b.n	8005e88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e42:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4e:	d1ee      	bne.n	8005e2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e50:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a0f      	ldr	r2, [pc, #60]	; (8005e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e5c:	f7fc fdec 	bl	8002a38 <HAL_GetTick>
 8005e60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e62:	e009      	b.n	8005e78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e64:	f7fc fde8 	bl	8002a38 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e72:	d901      	bls.n	8005e78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e007      	b.n	8005e88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e84:	d1ee      	bne.n	8005e64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40007000 	.word	0x40007000

08005e98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e291      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 8087 	beq.w	8005fca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ebc:	4b96      	ldr	r3, [pc, #600]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 030c 	and.w	r3, r3, #12
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d00c      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ec8:	4b93      	ldr	r3, [pc, #588]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 030c 	and.w	r3, r3, #12
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d112      	bne.n	8005efa <HAL_RCC_OscConfig+0x62>
 8005ed4:	4b90      	ldr	r3, [pc, #576]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee0:	d10b      	bne.n	8005efa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee2:	4b8d      	ldr	r3, [pc, #564]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d06c      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x130>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d168      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e26b      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f02:	d106      	bne.n	8005f12 <HAL_RCC_OscConfig+0x7a>
 8005f04:	4b84      	ldr	r3, [pc, #528]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a83      	ldr	r2, [pc, #524]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	e02e      	b.n	8005f70 <HAL_RCC_OscConfig+0xd8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x9c>
 8005f1a:	4b7f      	ldr	r3, [pc, #508]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a7e      	ldr	r2, [pc, #504]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b7c      	ldr	r3, [pc, #496]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a7b      	ldr	r2, [pc, #492]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e01d      	b.n	8005f70 <HAL_RCC_OscConfig+0xd8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f3c:	d10c      	bne.n	8005f58 <HAL_RCC_OscConfig+0xc0>
 8005f3e:	4b76      	ldr	r3, [pc, #472]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a75      	ldr	r2, [pc, #468]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	4b73      	ldr	r3, [pc, #460]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a72      	ldr	r2, [pc, #456]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	e00b      	b.n	8005f70 <HAL_RCC_OscConfig+0xd8>
 8005f58:	4b6f      	ldr	r3, [pc, #444]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a6e      	ldr	r2, [pc, #440]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	4b6c      	ldr	r3, [pc, #432]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a6b      	ldr	r2, [pc, #428]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d013      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f78:	f7fc fd5e 	bl	8002a38 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f80:	f7fc fd5a 	bl	8002a38 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b64      	cmp	r3, #100	; 0x64
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e21f      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f92:	4b61      	ldr	r3, [pc, #388]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0f0      	beq.n	8005f80 <HAL_RCC_OscConfig+0xe8>
 8005f9e:	e014      	b.n	8005fca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fc fd4a 	bl	8002a38 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa8:	f7fc fd46 	bl	8002a38 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b64      	cmp	r3, #100	; 0x64
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e20b      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fba:	4b57      	ldr	r3, [pc, #348]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x110>
 8005fc6:	e000      	b.n	8005fca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d069      	beq.n	80060aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fd6:	4b50      	ldr	r3, [pc, #320]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 030c 	and.w	r3, r3, #12
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00b      	beq.n	8005ffa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fe2:	4b4d      	ldr	r3, [pc, #308]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 030c 	and.w	r3, r3, #12
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d11c      	bne.n	8006028 <HAL_RCC_OscConfig+0x190>
 8005fee:	4b4a      	ldr	r3, [pc, #296]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d116      	bne.n	8006028 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ffa:	4b47      	ldr	r3, [pc, #284]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <HAL_RCC_OscConfig+0x17a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d001      	beq.n	8006012 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e1df      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006012:	4b41      	ldr	r3, [pc, #260]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	493d      	ldr	r1, [pc, #244]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8006022:	4313      	orrs	r3, r2
 8006024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006026:	e040      	b.n	80060aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d023      	beq.n	8006078 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006030:	4b39      	ldr	r3, [pc, #228]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a38      	ldr	r2, [pc, #224]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fc fcfc 	bl	8002a38 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006044:	f7fc fcf8 	bl	8002a38 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e1bd      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006056:	4b30      	ldr	r3, [pc, #192]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f0      	beq.n	8006044 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006062:	4b2d      	ldr	r3, [pc, #180]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	4929      	ldr	r1, [pc, #164]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 8006072:	4313      	orrs	r3, r2
 8006074:	600b      	str	r3, [r1, #0]
 8006076:	e018      	b.n	80060aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006078:	4b27      	ldr	r3, [pc, #156]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a26      	ldr	r2, [pc, #152]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006084:	f7fc fcd8 	bl	8002a38 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800608c:	f7fc fcd4 	bl	8002a38 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e199      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800609e:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1f0      	bne.n	800608c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d038      	beq.n	8006128 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d019      	beq.n	80060f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060be:	4b16      	ldr	r3, [pc, #88]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 80060c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c2:	4a15      	ldr	r2, [pc, #84]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ca:	f7fc fcb5 	bl	8002a38 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060d2:	f7fc fcb1 	bl	8002a38 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e176      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 80060e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0f0      	beq.n	80060d2 <HAL_RCC_OscConfig+0x23a>
 80060f0:	e01a      	b.n	8006128 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060f2:	4b09      	ldr	r3, [pc, #36]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 80060f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f6:	4a08      	ldr	r2, [pc, #32]	; (8006118 <HAL_RCC_OscConfig+0x280>)
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fe:	f7fc fc9b 	bl	8002a38 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006104:	e00a      	b.n	800611c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006106:	f7fc fc97 	bl	8002a38 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d903      	bls.n	800611c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e15c      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
 8006118:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800611c:	4b91      	ldr	r3, [pc, #580]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 800611e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ee      	bne.n	8006106 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80a4 	beq.w	800627e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006136:	4b8b      	ldr	r3, [pc, #556]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10d      	bne.n	800615e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006142:	4b88      	ldr	r3, [pc, #544]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	4a87      	ldr	r2, [pc, #540]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800614c:	6413      	str	r3, [r2, #64]	; 0x40
 800614e:	4b85      	ldr	r3, [pc, #532]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006156:	60bb      	str	r3, [r7, #8]
 8006158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800615e:	4b82      	ldr	r3, [pc, #520]	; (8006368 <HAL_RCC_OscConfig+0x4d0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d118      	bne.n	800619c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800616a:	4b7f      	ldr	r3, [pc, #508]	; (8006368 <HAL_RCC_OscConfig+0x4d0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a7e      	ldr	r2, [pc, #504]	; (8006368 <HAL_RCC_OscConfig+0x4d0>)
 8006170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006176:	f7fc fc5f 	bl	8002a38 <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800617e:	f7fc fc5b 	bl	8002a38 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b64      	cmp	r3, #100	; 0x64
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e120      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006190:	4b75      	ldr	r3, [pc, #468]	; (8006368 <HAL_RCC_OscConfig+0x4d0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d106      	bne.n	80061b2 <HAL_RCC_OscConfig+0x31a>
 80061a4:	4b6f      	ldr	r3, [pc, #444]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a8:	4a6e      	ldr	r2, [pc, #440]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	6713      	str	r3, [r2, #112]	; 0x70
 80061b0:	e02d      	b.n	800620e <HAL_RCC_OscConfig+0x376>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10c      	bne.n	80061d4 <HAL_RCC_OscConfig+0x33c>
 80061ba:	4b6a      	ldr	r3, [pc, #424]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	4a69      	ldr	r2, [pc, #420]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	6713      	str	r3, [r2, #112]	; 0x70
 80061c6:	4b67      	ldr	r3, [pc, #412]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ca:	4a66      	ldr	r2, [pc, #408]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061cc:	f023 0304 	bic.w	r3, r3, #4
 80061d0:	6713      	str	r3, [r2, #112]	; 0x70
 80061d2:	e01c      	b.n	800620e <HAL_RCC_OscConfig+0x376>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b05      	cmp	r3, #5
 80061da:	d10c      	bne.n	80061f6 <HAL_RCC_OscConfig+0x35e>
 80061dc:	4b61      	ldr	r3, [pc, #388]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	4a60      	ldr	r2, [pc, #384]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061e2:	f043 0304 	orr.w	r3, r3, #4
 80061e6:	6713      	str	r3, [r2, #112]	; 0x70
 80061e8:	4b5e      	ldr	r3, [pc, #376]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ec:	4a5d      	ldr	r2, [pc, #372]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	6713      	str	r3, [r2, #112]	; 0x70
 80061f4:	e00b      	b.n	800620e <HAL_RCC_OscConfig+0x376>
 80061f6:	4b5b      	ldr	r3, [pc, #364]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	4a5a      	ldr	r2, [pc, #360]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	6713      	str	r3, [r2, #112]	; 0x70
 8006202:	4b58      	ldr	r3, [pc, #352]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006206:	4a57      	ldr	r2, [pc, #348]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006208:	f023 0304 	bic.w	r3, r3, #4
 800620c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d015      	beq.n	8006242 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006216:	f7fc fc0f 	bl	8002a38 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800621c:	e00a      	b.n	8006234 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621e:	f7fc fc0b 	bl	8002a38 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	f241 3288 	movw	r2, #5000	; 0x1388
 800622c:	4293      	cmp	r3, r2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e0ce      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006234:	4b4b      	ldr	r3, [pc, #300]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0ee      	beq.n	800621e <HAL_RCC_OscConfig+0x386>
 8006240:	e014      	b.n	800626c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006242:	f7fc fbf9 	bl	8002a38 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006248:	e00a      	b.n	8006260 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624a:	f7fc fbf5 	bl	8002a38 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	f241 3288 	movw	r2, #5000	; 0x1388
 8006258:	4293      	cmp	r3, r2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e0b8      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006260:	4b40      	ldr	r3, [pc, #256]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1ee      	bne.n	800624a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d105      	bne.n	800627e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006272:	4b3c      	ldr	r3, [pc, #240]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	4a3b      	ldr	r2, [pc, #236]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800627c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80a4 	beq.w	80063d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006288:	4b36      	ldr	r3, [pc, #216]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 030c 	and.w	r3, r3, #12
 8006290:	2b08      	cmp	r3, #8
 8006292:	d06b      	beq.n	800636c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d149      	bne.n	8006330 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800629c:	4b31      	ldr	r3, [pc, #196]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a30      	ldr	r2, [pc, #192]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80062a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fc fbc6 	bl	8002a38 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b0:	f7fc fbc2 	bl	8002a38 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e087      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c2:	4b28      	ldr	r3, [pc, #160]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	019b      	lsls	r3, r3, #6
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	085b      	lsrs	r3, r3, #1
 80062e6:	3b01      	subs	r3, #1
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	061b      	lsls	r3, r3, #24
 80062f2:	4313      	orrs	r3, r2
 80062f4:	4a1b      	ldr	r2, [pc, #108]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80062f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a18      	ldr	r2, [pc, #96]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006308:	f7fc fb96 	bl	8002a38 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006310:	f7fc fb92 	bl	8002a38 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e057      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006322:	4b10      	ldr	r3, [pc, #64]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0x478>
 800632e:	e04f      	b.n	80063d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006330:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a0b      	ldr	r2, [pc, #44]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800633a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fc fb7c 	bl	8002a38 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006344:	f7fc fb78 	bl	8002a38 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e03d      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006356:	4b03      	ldr	r3, [pc, #12]	; (8006364 <HAL_RCC_OscConfig+0x4cc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_OscConfig+0x4ac>
 8006362:	e035      	b.n	80063d0 <HAL_RCC_OscConfig+0x538>
 8006364:	40023800 	.word	0x40023800
 8006368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800636c:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <HAL_RCC_OscConfig+0x544>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d028      	beq.n	80063cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006384:	429a      	cmp	r2, r3
 8006386:	d121      	bne.n	80063cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006392:	429a      	cmp	r2, r3
 8006394:	d11a      	bne.n	80063cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800639c:	4013      	ands	r3, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d111      	bne.n	80063cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	085b      	lsrs	r3, r3, #1
 80063b4:	3b01      	subs	r3, #1
 80063b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d107      	bne.n	80063cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d001      	beq.n	80063d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40023800 	.word	0x40023800

080063e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0d0      	b.n	800659a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063f8:	4b6a      	ldr	r3, [pc, #424]	; (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d910      	bls.n	8006428 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b67      	ldr	r3, [pc, #412]	; (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f023 020f 	bic.w	r2, r3, #15
 800640e:	4965      	ldr	r1, [pc, #404]	; (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	4313      	orrs	r3, r2
 8006414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006416:	4b63      	ldr	r3, [pc, #396]	; (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d001      	beq.n	8006428 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0b8      	b.n	800659a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d020      	beq.n	8006476 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006440:	4b59      	ldr	r3, [pc, #356]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	4a58      	ldr	r2, [pc, #352]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006446:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800644a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006458:	4b53      	ldr	r3, [pc, #332]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	4a52      	ldr	r2, [pc, #328]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 800645e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006464:	4b50      	ldr	r3, [pc, #320]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	494d      	ldr	r1, [pc, #308]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006472:	4313      	orrs	r3, r2
 8006474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d040      	beq.n	8006504 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d107      	bne.n	800649a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648a:	4b47      	ldr	r3, [pc, #284]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d115      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e07f      	b.n	800659a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d107      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a2:	4b41      	ldr	r3, [pc, #260]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e073      	b.n	800659a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b2:	4b3d      	ldr	r3, [pc, #244]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e06b      	b.n	800659a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064c2:	4b39      	ldr	r3, [pc, #228]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f023 0203 	bic.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4936      	ldr	r1, [pc, #216]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d4:	f7fc fab0 	bl	8002a38 <HAL_GetTick>
 80064d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064da:	e00a      	b.n	80064f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064dc:	f7fc faac 	bl	8002a38 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e053      	b.n	800659a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	4b2d      	ldr	r3, [pc, #180]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 020c 	and.w	r2, r3, #12
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	429a      	cmp	r2, r3
 8006502:	d1eb      	bne.n	80064dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006504:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d210      	bcs.n	8006534 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006512:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f023 020f 	bic.w	r2, r3, #15
 800651a:	4922      	ldr	r1, [pc, #136]	; (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	4313      	orrs	r3, r2
 8006520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006522:	4b20      	ldr	r3, [pc, #128]	; (80065a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d001      	beq.n	8006534 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e032      	b.n	800659a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006540:	4b19      	ldr	r3, [pc, #100]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	4916      	ldr	r1, [pc, #88]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 800654e:	4313      	orrs	r3, r2
 8006550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	490e      	ldr	r1, [pc, #56]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 800656e:	4313      	orrs	r3, r2
 8006570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006572:	f000 f821 	bl	80065b8 <HAL_RCC_GetSysClockFreq>
 8006576:	4602      	mov	r2, r0
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <HAL_RCC_ClockConfig+0x1c8>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	091b      	lsrs	r3, r3, #4
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	490a      	ldr	r1, [pc, #40]	; (80065ac <HAL_RCC_ClockConfig+0x1cc>)
 8006584:	5ccb      	ldrb	r3, [r1, r3]
 8006586:	fa22 f303 	lsr.w	r3, r2, r3
 800658a:	4a09      	ldr	r2, [pc, #36]	; (80065b0 <HAL_RCC_ClockConfig+0x1d0>)
 800658c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <HAL_RCC_ClockConfig+0x1d4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7fb ff1a 	bl	80023cc <HAL_InitTick>

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40023c00 	.word	0x40023c00
 80065a8:	40023800 	.word	0x40023800
 80065ac:	0802d08c 	.word	0x0802d08c
 80065b0:	20000000 	.word	0x20000000
 80065b4:	20000004 	.word	0x20000004

080065b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065bc:	b094      	sub	sp, #80	; 0x50
 80065be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	647b      	str	r3, [r7, #68]	; 0x44
 80065c4:	2300      	movs	r3, #0
 80065c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065c8:	2300      	movs	r3, #0
 80065ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065d0:	4b79      	ldr	r3, [pc, #484]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 030c 	and.w	r3, r3, #12
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d00d      	beq.n	80065f8 <HAL_RCC_GetSysClockFreq+0x40>
 80065dc:	2b08      	cmp	r3, #8
 80065de:	f200 80e1 	bhi.w	80067a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0x34>
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d003      	beq.n	80065f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80065ea:	e0db      	b.n	80067a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065ec:	4b73      	ldr	r3, [pc, #460]	; (80067bc <HAL_RCC_GetSysClockFreq+0x204>)
 80065ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065f0:	e0db      	b.n	80067aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065f2:	4b73      	ldr	r3, [pc, #460]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80065f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065f6:	e0d8      	b.n	80067aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065f8:	4b6f      	ldr	r3, [pc, #444]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006600:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006602:	4b6d      	ldr	r3, [pc, #436]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d063      	beq.n	80066d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800660e:	4b6a      	ldr	r3, [pc, #424]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	099b      	lsrs	r3, r3, #6
 8006614:	2200      	movs	r2, #0
 8006616:	63bb      	str	r3, [r7, #56]	; 0x38
 8006618:	63fa      	str	r2, [r7, #60]	; 0x3c
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006620:	633b      	str	r3, [r7, #48]	; 0x30
 8006622:	2300      	movs	r3, #0
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
 8006626:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800662a:	4622      	mov	r2, r4
 800662c:	462b      	mov	r3, r5
 800662e:	f04f 0000 	mov.w	r0, #0
 8006632:	f04f 0100 	mov.w	r1, #0
 8006636:	0159      	lsls	r1, r3, #5
 8006638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800663c:	0150      	lsls	r0, r2, #5
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4621      	mov	r1, r4
 8006644:	1a51      	subs	r1, r2, r1
 8006646:	6139      	str	r1, [r7, #16]
 8006648:	4629      	mov	r1, r5
 800664a:	eb63 0301 	sbc.w	r3, r3, r1
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800665c:	4659      	mov	r1, fp
 800665e:	018b      	lsls	r3, r1, #6
 8006660:	4651      	mov	r1, sl
 8006662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006666:	4651      	mov	r1, sl
 8006668:	018a      	lsls	r2, r1, #6
 800666a:	4651      	mov	r1, sl
 800666c:	ebb2 0801 	subs.w	r8, r2, r1
 8006670:	4659      	mov	r1, fp
 8006672:	eb63 0901 	sbc.w	r9, r3, r1
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	f04f 0300 	mov.w	r3, #0
 800667e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800668a:	4690      	mov	r8, r2
 800668c:	4699      	mov	r9, r3
 800668e:	4623      	mov	r3, r4
 8006690:	eb18 0303 	adds.w	r3, r8, r3
 8006694:	60bb      	str	r3, [r7, #8]
 8006696:	462b      	mov	r3, r5
 8006698:	eb49 0303 	adc.w	r3, r9, r3
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066aa:	4629      	mov	r1, r5
 80066ac:	024b      	lsls	r3, r1, #9
 80066ae:	4621      	mov	r1, r4
 80066b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066b4:	4621      	mov	r1, r4
 80066b6:	024a      	lsls	r2, r1, #9
 80066b8:	4610      	mov	r0, r2
 80066ba:	4619      	mov	r1, r3
 80066bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066be:	2200      	movs	r2, #0
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066c8:	f7fa fb0e 	bl	8000ce8 <__aeabi_uldivmod>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4613      	mov	r3, r2
 80066d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d4:	e058      	b.n	8006788 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066d6:	4b38      	ldr	r3, [pc, #224]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	099b      	lsrs	r3, r3, #6
 80066dc:	2200      	movs	r2, #0
 80066de:	4618      	mov	r0, r3
 80066e0:	4611      	mov	r1, r2
 80066e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066e6:	623b      	str	r3, [r7, #32]
 80066e8:	2300      	movs	r3, #0
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
 80066ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066f0:	4642      	mov	r2, r8
 80066f2:	464b      	mov	r3, r9
 80066f4:	f04f 0000 	mov.w	r0, #0
 80066f8:	f04f 0100 	mov.w	r1, #0
 80066fc:	0159      	lsls	r1, r3, #5
 80066fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006702:	0150      	lsls	r0, r2, #5
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4641      	mov	r1, r8
 800670a:	ebb2 0a01 	subs.w	sl, r2, r1
 800670e:	4649      	mov	r1, r9
 8006710:	eb63 0b01 	sbc.w	fp, r3, r1
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006720:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006724:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006728:	ebb2 040a 	subs.w	r4, r2, sl
 800672c:	eb63 050b 	sbc.w	r5, r3, fp
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	00eb      	lsls	r3, r5, #3
 800673a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800673e:	00e2      	lsls	r2, r4, #3
 8006740:	4614      	mov	r4, r2
 8006742:	461d      	mov	r5, r3
 8006744:	4643      	mov	r3, r8
 8006746:	18e3      	adds	r3, r4, r3
 8006748:	603b      	str	r3, [r7, #0]
 800674a:	464b      	mov	r3, r9
 800674c:	eb45 0303 	adc.w	r3, r5, r3
 8006750:	607b      	str	r3, [r7, #4]
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800675e:	4629      	mov	r1, r5
 8006760:	028b      	lsls	r3, r1, #10
 8006762:	4621      	mov	r1, r4
 8006764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006768:	4621      	mov	r1, r4
 800676a:	028a      	lsls	r2, r1, #10
 800676c:	4610      	mov	r0, r2
 800676e:	4619      	mov	r1, r3
 8006770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006772:	2200      	movs	r2, #0
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	61fa      	str	r2, [r7, #28]
 8006778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800677c:	f7fa fab4 	bl	8000ce8 <__aeabi_uldivmod>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4613      	mov	r3, r2
 8006786:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	0c1b      	lsrs	r3, r3, #16
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	3301      	adds	r3, #1
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800679a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679c:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067a2:	e002      	b.n	80067aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <HAL_RCC_GetSysClockFreq+0x204>)
 80067a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3750      	adds	r7, #80	; 0x50
 80067b0:	46bd      	mov	sp, r7
 80067b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067b6:	bf00      	nop
 80067b8:	40023800 	.word	0x40023800
 80067bc:	00f42400 	.word	0x00f42400
 80067c0:	007a1200 	.word	0x007a1200

080067c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067c8:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80067ca:	681b      	ldr	r3, [r3, #0]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	20000000 	.word	0x20000000

080067dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067e0:	f7ff fff0 	bl	80067c4 <HAL_RCC_GetHCLKFreq>
 80067e4:	4602      	mov	r2, r0
 80067e6:	4b05      	ldr	r3, [pc, #20]	; (80067fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	0a9b      	lsrs	r3, r3, #10
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	4903      	ldr	r1, [pc, #12]	; (8006800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067f2:	5ccb      	ldrb	r3, [r1, r3]
 80067f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40023800 	.word	0x40023800
 8006800:	0802d09c 	.word	0x0802d09c

08006804 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	220f      	movs	r2, #15
 8006812:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006814:	4b12      	ldr	r3, [pc, #72]	; (8006860 <HAL_RCC_GetClockConfig+0x5c>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 0203 	and.w	r2, r3, #3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006820:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <HAL_RCC_GetClockConfig+0x5c>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800682c:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <HAL_RCC_GetClockConfig+0x5c>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006838:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_RCC_GetClockConfig+0x5c>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	08db      	lsrs	r3, r3, #3
 800683e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006846:	4b07      	ldr	r3, [pc, #28]	; (8006864 <HAL_RCC_GetClockConfig+0x60>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 020f 	and.w	r2, r3, #15
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	601a      	str	r2, [r3, #0]
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40023800 	.word	0x40023800
 8006864:	40023c00 	.word	0x40023c00

08006868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d012      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006890:	4b69      	ldr	r3, [pc, #420]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	4a68      	ldr	r2, [pc, #416]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006896:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800689a:	6093      	str	r3, [r2, #8]
 800689c:	4b66      	ldr	r3, [pc, #408]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a4:	4964      	ldr	r1, [pc, #400]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80068b2:	2301      	movs	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d017      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068c2:	4b5d      	ldr	r3, [pc, #372]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d0:	4959      	ldr	r1, [pc, #356]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e0:	d101      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80068e2:	2301      	movs	r3, #1
 80068e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80068ee:	2301      	movs	r3, #1
 80068f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d017      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068fe:	4b4e      	ldr	r3, [pc, #312]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006904:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	494a      	ldr	r1, [pc, #296]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800691c:	d101      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800691e:	2301      	movs	r3, #1
 8006920:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800692a:	2301      	movs	r3, #1
 800692c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800693a:	2301      	movs	r3, #1
 800693c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 808b 	beq.w	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800694c:	4b3a      	ldr	r3, [pc, #232]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	4a39      	ldr	r2, [pc, #228]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006956:	6413      	str	r3, [r2, #64]	; 0x40
 8006958:	4b37      	ldr	r3, [pc, #220]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800695a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006964:	4b35      	ldr	r3, [pc, #212]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a34      	ldr	r2, [pc, #208]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800696a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800696e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006970:	f7fc f862 	bl	8002a38 <HAL_GetTick>
 8006974:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006976:	e008      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006978:	f7fc f85e 	bl	8002a38 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b64      	cmp	r3, #100	; 0x64
 8006984:	d901      	bls.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e357      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800698a:	4b2c      	ldr	r3, [pc, #176]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0f0      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006996:	4b28      	ldr	r3, [pc, #160]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d035      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d02e      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069b4:	4b20      	ldr	r3, [pc, #128]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069be:	4b1e      	ldr	r3, [pc, #120]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	4a1d      	ldr	r2, [pc, #116]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069ca:	4b1b      	ldr	r3, [pc, #108]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	4a1a      	ldr	r2, [pc, #104]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80069d6:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069dc:	4b16      	ldr	r3, [pc, #88]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d114      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fc f826 	bl	8002a38 <HAL_GetTick>
 80069ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ee:	e00a      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f0:	f7fc f822 	bl	8002a38 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e319      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a06:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0ee      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a1e:	d111      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a2c:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a2e:	400b      	ands	r3, r1
 8006a30:	4901      	ldr	r1, [pc, #4]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	608b      	str	r3, [r1, #8]
 8006a36:	e00b      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	40007000 	.word	0x40007000
 8006a40:	0ffffcff 	.word	0x0ffffcff
 8006a44:	4baa      	ldr	r3, [pc, #680]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	4aa9      	ldr	r2, [pc, #676]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a4e:	6093      	str	r3, [r2, #8]
 8006a50:	4ba7      	ldr	r3, [pc, #668]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a5c:	49a4      	ldr	r1, [pc, #656]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d010      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a6e:	4ba0      	ldr	r3, [pc, #640]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a74:	4a9e      	ldr	r2, [pc, #632]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a7e:	4b9c      	ldr	r3, [pc, #624]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	4999      	ldr	r1, [pc, #612]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a9c:	4b94      	ldr	r3, [pc, #592]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aaa:	4991      	ldr	r1, [pc, #580]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006abe:	4b8c      	ldr	r3, [pc, #560]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006acc:	4988      	ldr	r1, [pc, #544]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ae0:	4b83      	ldr	r3, [pc, #524]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aee:	4980      	ldr	r1, [pc, #512]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b02:	4b7b      	ldr	r3, [pc, #492]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b10:	4977      	ldr	r1, [pc, #476]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b24:	4b72      	ldr	r3, [pc, #456]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2a:	f023 0203 	bic.w	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	496f      	ldr	r1, [pc, #444]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b46:	4b6a      	ldr	r3, [pc, #424]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4c:	f023 020c 	bic.w	r2, r3, #12
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b54:	4966      	ldr	r1, [pc, #408]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b68:	4b61      	ldr	r3, [pc, #388]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b76:	495e      	ldr	r1, [pc, #376]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b8a:	4b59      	ldr	r3, [pc, #356]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b98:	4955      	ldr	r1, [pc, #340]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bac:	4b50      	ldr	r3, [pc, #320]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	494d      	ldr	r1, [pc, #308]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006bce:	4b48      	ldr	r3, [pc, #288]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bdc:	4944      	ldr	r1, [pc, #272]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006bf0:	4b3f      	ldr	r3, [pc, #252]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfe:	493c      	ldr	r1, [pc, #240]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006c12:	4b37      	ldr	r3, [pc, #220]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c20:	4933      	ldr	r1, [pc, #204]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c34:	4b2e      	ldr	r3, [pc, #184]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c42:	492b      	ldr	r1, [pc, #172]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d011      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c56:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c64:	4922      	ldr	r1, [pc, #136]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c74:	d101      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006c76:	2301      	movs	r3, #1
 8006c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006c86:	2301      	movs	r3, #1
 8006c88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c96:	4b16      	ldr	r3, [pc, #88]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca4:	4912      	ldr	r1, [pc, #72]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006cb8:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc8:	4909      	ldr	r1, [pc, #36]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d006      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80d9 	beq.w	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ce4:	4b02      	ldr	r3, [pc, #8]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a01      	ldr	r2, [pc, #4]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cee:	e001      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf6:	f7fb fe9f 	bl	8002a38 <HAL_GetTick>
 8006cfa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006cfe:	f7fb fe9b 	bl	8002a38 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b64      	cmp	r3, #100	; 0x64
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e194      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d10:	4b6c      	ldr	r3, [pc, #432]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f0      	bne.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d021      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d11d      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d30:	4b64      	ldr	r3, [pc, #400]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d36:	0c1b      	lsrs	r3, r3, #16
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d3e:	4b61      	ldr	r3, [pc, #388]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d44:	0e1b      	lsrs	r3, r3, #24
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	019a      	lsls	r2, r3, #6
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	041b      	lsls	r3, r3, #16
 8006d56:	431a      	orrs	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	061b      	lsls	r3, r3, #24
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	071b      	lsls	r3, r3, #28
 8006d64:	4957      	ldr	r1, [pc, #348]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d80:	d00a      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d02e      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d96:	d129      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d98:	4b4a      	ldr	r3, [pc, #296]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d9e:	0c1b      	lsrs	r3, r3, #16
 8006da0:	f003 0303 	and.w	r3, r3, #3
 8006da4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006da6:	4b47      	ldr	r3, [pc, #284]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dac:	0f1b      	lsrs	r3, r3, #28
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	019a      	lsls	r2, r3, #6
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	041b      	lsls	r3, r3, #16
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	061b      	lsls	r3, r3, #24
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	071b      	lsls	r3, r3, #28
 8006dcc:	493d      	ldr	r1, [pc, #244]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006dd4:	4b3b      	ldr	r3, [pc, #236]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dda:	f023 021f 	bic.w	r2, r3, #31
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	3b01      	subs	r3, #1
 8006de4:	4937      	ldr	r1, [pc, #220]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01d      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006df8:	4b32      	ldr	r3, [pc, #200]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfe:	0e1b      	lsrs	r3, r3, #24
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e06:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e0c:	0f1b      	lsrs	r3, r3, #28
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	019a      	lsls	r2, r3, #6
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	041b      	lsls	r3, r3, #16
 8006e20:	431a      	orrs	r2, r3
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	061b      	lsls	r3, r3, #24
 8006e26:	431a      	orrs	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	071b      	lsls	r3, r3, #28
 8006e2c:	4925      	ldr	r1, [pc, #148]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d011      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	019a      	lsls	r2, r3, #6
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	041b      	lsls	r3, r3, #16
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	061b      	lsls	r3, r3, #24
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	071b      	lsls	r3, r3, #28
 8006e5c:	4919      	ldr	r1, [pc, #100]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e64:	4b17      	ldr	r3, [pc, #92]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a16      	ldr	r2, [pc, #88]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e70:	f7fb fde2 	bl	8002a38 <HAL_GetTick>
 8006e74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e78:	f7fb fdde 	bl	8002a38 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b64      	cmp	r3, #100	; 0x64
 8006e84:	d901      	bls.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e0d7      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e8a:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0f0      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	f040 80cd 	bne.w	8007038 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e9e:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a08      	ldr	r2, [pc, #32]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eaa:	f7fb fdc5 	bl	8002a38 <HAL_GetTick>
 8006eae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006eb0:	e00a      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006eb2:	f7fb fdc1 	bl	8002a38 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b64      	cmp	r3, #100	; 0x64
 8006ebe:	d903      	bls.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e0ba      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006ec4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ec8:	4b5e      	ldr	r3, [pc, #376]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed4:	d0ed      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d02e      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d12a      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006efe:	4b51      	ldr	r3, [pc, #324]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f04:	0c1b      	lsrs	r3, r3, #16
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f0c:	4b4d      	ldr	r3, [pc, #308]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f12:	0f1b      	lsrs	r3, r3, #28
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	019a      	lsls	r2, r3, #6
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	431a      	orrs	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	061b      	lsls	r3, r3, #24
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	071b      	lsls	r3, r3, #28
 8006f32:	4944      	ldr	r1, [pc, #272]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f3a:	4b42      	ldr	r3, [pc, #264]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	493d      	ldr	r1, [pc, #244]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d022      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f68:	d11d      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f6a:	4b36      	ldr	r3, [pc, #216]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f70:	0e1b      	lsrs	r3, r3, #24
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f78:	4b32      	ldr	r3, [pc, #200]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7e:	0f1b      	lsrs	r3, r3, #28
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	019a      	lsls	r2, r3, #6
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	041b      	lsls	r3, r3, #16
 8006f92:	431a      	orrs	r2, r3
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	061b      	lsls	r3, r3, #24
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	071b      	lsls	r3, r3, #28
 8006f9e:	4929      	ldr	r1, [pc, #164]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d028      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006fb2:	4b24      	ldr	r3, [pc, #144]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb8:	0e1b      	lsrs	r3, r3, #24
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006fc0:	4b20      	ldr	r3, [pc, #128]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc6:	0c1b      	lsrs	r3, r3, #16
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	019a      	lsls	r2, r3, #6
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	061b      	lsls	r3, r3, #24
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	071b      	lsls	r3, r3, #28
 8006fe6:	4917      	ldr	r1, [pc, #92]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	4911      	ldr	r1, [pc, #68]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007004:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a0e      	ldr	r2, [pc, #56]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800700a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800700e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007010:	f7fb fd12 	bl	8002a38 <HAL_GetTick>
 8007014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007016:	e008      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007018:	f7fb fd0e 	bl	8002a38 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	; 0x64
 8007024:	d901      	bls.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e007      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800702a:	4b06      	ldr	r3, [pc, #24]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007036:	d1ef      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3720      	adds	r7, #32
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	40023800 	.word	0x40023800

08007048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e09d      	b.n	8007196 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	d108      	bne.n	8007074 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800706a:	d009      	beq.n	8007080 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	61da      	str	r2, [r3, #28]
 8007072:	e005      	b.n	8007080 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d106      	bne.n	80070a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7fb f824 	bl	80020e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070c0:	d902      	bls.n	80070c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	e002      	b.n	80070ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80070c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80070d6:	d007      	beq.n	80070e8 <HAL_SPI_Init+0xa0>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070e0:	d002      	beq.n	80070e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007120:	431a      	orrs	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712a:	ea42 0103 	orr.w	r1, r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	0c1b      	lsrs	r3, r3, #16
 8007144:	f003 0204 	and.w	r2, r3, #4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007164:	ea42 0103 	orr.w	r1, r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69da      	ldr	r2, [r3, #28]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007184:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b088      	sub	sp, #32
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	603b      	str	r3, [r7, #0]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_SPI_Transmit+0x22>
 80071bc:	2302      	movs	r3, #2
 80071be:	e158      	b.n	8007472 <HAL_SPI_Transmit+0x2d4>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071c8:	f7fb fc36 	bl	8002a38 <HAL_GetTick>
 80071cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80071ce:	88fb      	ldrh	r3, [r7, #6]
 80071d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d002      	beq.n	80071e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80071de:	2302      	movs	r3, #2
 80071e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071e2:	e13d      	b.n	8007460 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <HAL_SPI_Transmit+0x52>
 80071ea:	88fb      	ldrh	r3, [r7, #6]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071f4:	e134      	b.n	8007460 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2203      	movs	r2, #3
 80071fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	88fa      	ldrh	r2, [r7, #6]
 800720e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	88fa      	ldrh	r2, [r7, #6]
 8007214:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007240:	d10f      	bne.n	8007262 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007250:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007260:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b40      	cmp	r3, #64	; 0x40
 800726e:	d007      	beq.n	8007280 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800727e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007288:	d94b      	bls.n	8007322 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <HAL_SPI_Transmit+0xfa>
 8007292:	8afb      	ldrh	r3, [r7, #22]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d13e      	bne.n	8007316 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	881a      	ldrh	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	1c9a      	adds	r2, r3, #2
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072bc:	e02b      	b.n	8007316 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d112      	bne.n	80072f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	881a      	ldrh	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	1c9a      	adds	r2, r3, #2
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072f0:	e011      	b.n	8007316 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f2:	f7fb fba1 	bl	8002a38 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d803      	bhi.n	800730a <HAL_SPI_Transmit+0x16c>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007308:	d102      	bne.n	8007310 <HAL_SPI_Transmit+0x172>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007314:	e0a4      	b.n	8007460 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1ce      	bne.n	80072be <HAL_SPI_Transmit+0x120>
 8007320:	e07c      	b.n	800741c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <HAL_SPI_Transmit+0x192>
 800732a:	8afb      	ldrh	r3, [r7, #22]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d170      	bne.n	8007412 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b01      	cmp	r3, #1
 8007338:	d912      	bls.n	8007360 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	881a      	ldrh	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	1c9a      	adds	r2, r3, #2
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007354:	b29b      	uxth	r3, r3
 8007356:	3b02      	subs	r3, #2
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800735e:	e058      	b.n	8007412 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	330c      	adds	r3, #12
 800736a:	7812      	ldrb	r2, [r2, #0]
 800736c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007386:	e044      	b.n	8007412 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b02      	cmp	r3, #2
 8007394:	d12b      	bne.n	80073ee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	d912      	bls.n	80073c6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a4:	881a      	ldrh	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	1c9a      	adds	r2, r3, #2
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b02      	subs	r3, #2
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073c4:	e025      	b.n	8007412 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	330c      	adds	r3, #12
 80073d0:	7812      	ldrb	r2, [r2, #0]
 80073d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073ec:	e011      	b.n	8007412 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ee:	f7fb fb23 	bl	8002a38 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d803      	bhi.n	8007406 <HAL_SPI_Transmit+0x268>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007404:	d102      	bne.n	800740c <HAL_SPI_Transmit+0x26e>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007410:	e026      	b.n	8007460 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007416:	b29b      	uxth	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1b5      	bne.n	8007388 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f001 f8c3 	bl	80085ac <SPI_EndRxTxTransaction>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2220      	movs	r2, #32
 8007430:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	613b      	str	r3, [r7, #16]
 800744e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e000      	b.n	8007460 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800745e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007470:	7ffb      	ldrb	r3, [r7, #31]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3720      	adds	r7, #32
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b088      	sub	sp, #32
 800747e:	af02      	add	r7, sp, #8
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	603b      	str	r3, [r7, #0]
 8007486:	4613      	mov	r3, r2
 8007488:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007496:	d112      	bne.n	80074be <HAL_SPI_Receive+0x44>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10e      	bne.n	80074be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2204      	movs	r2, #4
 80074a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074a8:	88fa      	ldrh	r2, [r7, #6]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	4613      	mov	r3, r2
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f910 	bl	80076da <HAL_SPI_TransmitReceive>
 80074ba:	4603      	mov	r3, r0
 80074bc:	e109      	b.n	80076d2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <HAL_SPI_Receive+0x52>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e102      	b.n	80076d2 <HAL_SPI_Receive+0x258>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074d4:	f7fb fab0 	bl	8002a38 <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d002      	beq.n	80074ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074e6:	2302      	movs	r3, #2
 80074e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ea:	e0e9      	b.n	80076c0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_SPI_Receive+0x7e>
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074fc:	e0e0      	b.n	80076c0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2204      	movs	r2, #4
 8007502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	88fa      	ldrh	r2, [r7, #6]
 8007516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	88fa      	ldrh	r2, [r7, #6]
 800751e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007548:	d908      	bls.n	800755c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007558:	605a      	str	r2, [r3, #4]
 800755a:	e007      	b.n	800756c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800756a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007574:	d10f      	bne.n	8007596 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007584:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007594:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b40      	cmp	r3, #64	; 0x40
 80075a2:	d007      	beq.n	80075b4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075bc:	d867      	bhi.n	800768e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075be:	e030      	b.n	8007622 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d117      	bne.n	80075fe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f103 020c 	add.w	r2, r3, #12
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	7812      	ldrb	r2, [r2, #0]
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80075fc:	e011      	b.n	8007622 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075fe:	f7fb fa1b 	bl	8002a38 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d803      	bhi.n	8007616 <HAL_SPI_Receive+0x19c>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007614:	d102      	bne.n	800761c <HAL_SPI_Receive+0x1a2>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d102      	bne.n	8007622 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007620:	e04e      	b.n	80076c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1c8      	bne.n	80075c0 <HAL_SPI_Receive+0x146>
 800762e:	e034      	b.n	800769a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b01      	cmp	r3, #1
 800763c:	d115      	bne.n	800766a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	b292      	uxth	r2, r2
 800764a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	1c9a      	adds	r2, r3, #2
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007668:	e011      	b.n	800768e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800766a:	f7fb f9e5 	bl	8002a38 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d803      	bhi.n	8007682 <HAL_SPI_Receive+0x208>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007680:	d102      	bne.n	8007688 <HAL_SPI_Receive+0x20e>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d102      	bne.n	800768e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800768c:	e018      	b.n	80076c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1ca      	bne.n	8007630 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 ff08 	bl	80084b4 <SPI_EndRxTransaction>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2220      	movs	r2, #32
 80076ae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	75fb      	strb	r3, [r7, #23]
 80076bc:	e000      	b.n	80076c0 <HAL_SPI_Receive+0x246>
  }

error :
 80076be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b08a      	sub	sp, #40	; 0x28
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	607a      	str	r2, [r7, #4]
 80076e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076e8:	2301      	movs	r3, #1
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_SPI_TransmitReceive+0x26>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e1fb      	b.n	8007af8 <HAL_SPI_TransmitReceive+0x41e>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007708:	f7fb f996 	bl	8002a38 <HAL_GetTick>
 800770c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007714:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800771c:	887b      	ldrh	r3, [r7, #2]
 800771e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007720:	887b      	ldrh	r3, [r7, #2]
 8007722:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007724:	7efb      	ldrb	r3, [r7, #27]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d00e      	beq.n	8007748 <HAL_SPI_TransmitReceive+0x6e>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007730:	d106      	bne.n	8007740 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <HAL_SPI_TransmitReceive+0x66>
 800773a:	7efb      	ldrb	r3, [r7, #27]
 800773c:	2b04      	cmp	r3, #4
 800773e:	d003      	beq.n	8007748 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007740:	2302      	movs	r3, #2
 8007742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007746:	e1cd      	b.n	8007ae4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <HAL_SPI_TransmitReceive+0x80>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <HAL_SPI_TransmitReceive+0x80>
 8007754:	887b      	ldrh	r3, [r7, #2]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d103      	bne.n	8007762 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007760:	e1c0      	b.n	8007ae4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b04      	cmp	r3, #4
 800776c:	d003      	beq.n	8007776 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2205      	movs	r2, #5
 8007772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	887a      	ldrh	r2, [r7, #2]
 8007786:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	887a      	ldrh	r2, [r7, #2]
 800778e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	887a      	ldrh	r2, [r7, #2]
 800779c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	887a      	ldrh	r2, [r7, #2]
 80077a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80077b8:	d802      	bhi.n	80077c0 <HAL_SPI_TransmitReceive+0xe6>
 80077ba:	8a3b      	ldrh	r3, [r7, #16]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d908      	bls.n	80077d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077ce:	605a      	str	r2, [r3, #4]
 80077d0:	e007      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d007      	beq.n	8007800 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007808:	d97c      	bls.n	8007904 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x13e>
 8007812:	8a7b      	ldrh	r3, [r7, #18]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d169      	bne.n	80078ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	881a      	ldrh	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	1c9a      	adds	r2, r3, #2
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800783c:	e056      	b.n	80078ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b02      	cmp	r3, #2
 800784a:	d11b      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x1aa>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d016      	beq.n	8007884 <HAL_SPI_TransmitReceive+0x1aa>
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	2b01      	cmp	r3, #1
 800785a:	d113      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	881a      	ldrh	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	1c9a      	adds	r2, r3, #2
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b01      	cmp	r3, #1
 8007890:	d11c      	bne.n	80078cc <HAL_SPI_TransmitReceive+0x1f2>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d016      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	b292      	uxth	r2, r2
 80078aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b0:	1c9a      	adds	r2, r3, #2
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078c8:	2301      	movs	r3, #1
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078cc:	f7fb f8b4 	bl	8002a38 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078d8:	429a      	cmp	r2, r3
 80078da:	d807      	bhi.n	80078ec <HAL_SPI_TransmitReceive+0x212>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078e2:	d003      	beq.n	80078ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80078ea:	e0fb      	b.n	8007ae4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1a3      	bne.n	800783e <HAL_SPI_TransmitReceive+0x164>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d19d      	bne.n	800783e <HAL_SPI_TransmitReceive+0x164>
 8007902:	e0df      	b.n	8007ac4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <HAL_SPI_TransmitReceive+0x23a>
 800790c:	8a7b      	ldrh	r3, [r7, #18]
 800790e:	2b01      	cmp	r3, #1
 8007910:	f040 80cb 	bne.w	8007aaa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b01      	cmp	r3, #1
 800791c:	d912      	bls.n	8007944 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	881a      	ldrh	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	1c9a      	adds	r2, r3, #2
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b02      	subs	r3, #2
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007942:	e0b2      	b.n	8007aaa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330c      	adds	r3, #12
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007960:	b29b      	uxth	r3, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800796a:	e09e      	b.n	8007aaa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b02      	cmp	r3, #2
 8007978:	d134      	bne.n	80079e4 <HAL_SPI_TransmitReceive+0x30a>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d02f      	beq.n	80079e4 <HAL_SPI_TransmitReceive+0x30a>
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	2b01      	cmp	r3, #1
 8007988:	d12c      	bne.n	80079e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800798e:	b29b      	uxth	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d912      	bls.n	80079ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	881a      	ldrh	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	1c9a      	adds	r2, r3, #2
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3b02      	subs	r3, #2
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079b8:	e012      	b.n	80079e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	330c      	adds	r3, #12
 80079c4:	7812      	ldrb	r2, [r2, #0]
 80079c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d148      	bne.n	8007a84 <HAL_SPI_TransmitReceive+0x3aa>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d042      	beq.n	8007a84 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d923      	bls.n	8007a52 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a14:	b292      	uxth	r2, r2
 8007a16:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	1c9a      	adds	r2, r3, #2
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	3b02      	subs	r3, #2
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d81f      	bhi.n	8007a80 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a4e:	605a      	str	r2, [r3, #4]
 8007a50:	e016      	b.n	8007a80 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f103 020c 	add.w	r2, r3, #12
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	7812      	ldrb	r2, [r2, #0]
 8007a60:	b2d2      	uxtb	r2, r2
 8007a62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a80:	2301      	movs	r3, #1
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a84:	f7fa ffd8 	bl	8002a38 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d803      	bhi.n	8007a9c <HAL_SPI_TransmitReceive+0x3c2>
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a9a:	d102      	bne.n	8007aa2 <HAL_SPI_TransmitReceive+0x3c8>
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007aa8:	e01c      	b.n	8007ae4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f47f af5b 	bne.w	800796c <HAL_SPI_TransmitReceive+0x292>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f47f af54 	bne.w	800796c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ac4:	69fa      	ldr	r2, [r7, #28]
 8007ac6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fd6f 	bl	80085ac <SPI_EndRxTxTransaction>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d006      	beq.n	8007ae2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2220      	movs	r2, #32
 8007ade:	661a      	str	r2, [r3, #96]	; 0x60
 8007ae0:	e000      	b.n	8007ae4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007ae2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3728      	adds	r7, #40	; 0x28
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d110      	bne.n	8007b3c <HAL_SPI_Receive_DMA+0x3c>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b22:	d10b      	bne.n	8007b3c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2204      	movs	r2, #4
 8007b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 f908 	bl	8007d48 <HAL_SPI_TransmitReceive_DMA>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	e0fb      	b.n	8007d34 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_SPI_Receive_DMA+0x4a>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e0f4      	b.n	8007d34 <HAL_SPI_Receive_DMA+0x234>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d002      	beq.n	8007b64 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b62:	e0e2      	b.n	8007d2a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_SPI_Receive_DMA+0x70>
 8007b6a:	88fb      	ldrh	r3, [r7, #6]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b74:	e0d9      	b.n	8007d2a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2204      	movs	r2, #4
 8007b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	88fa      	ldrh	r2, [r7, #6]
 8007b8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	88fa      	ldrh	r2, [r7, #6]
 8007b96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bba:	d10f      	bne.n	8007bdc <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bea:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bf4:	d908      	bls.n	8007c08 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c04:	605a      	str	r2, [r3, #4]
 8007c06:	e042      	b.n	8007c8e <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c16:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c22:	d134      	bne.n	8007c8e <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c32:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d111      	bne.n	8007c68 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c52:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	085b      	lsrs	r3, r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007c66:	e012      	b.n	8007c8e <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c76:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	085b      	lsrs	r3, r3, #1
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3301      	adds	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	4a2a      	ldr	r2, [pc, #168]	; (8007d3c <HAL_SPI_Receive_DMA+0x23c>)
 8007c94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9a:	4a29      	ldr	r2, [pc, #164]	; (8007d40 <HAL_SPI_Receive_DMA+0x240>)
 8007c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca2:	4a28      	ldr	r2, [pc, #160]	; (8007d44 <HAL_SPI_Receive_DMA+0x244>)
 8007ca4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007caa:	2200      	movs	r2, #0
 8007cac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	4619      	mov	r1, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cc6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007cc8:	f7fb f876 	bl	8002db8 <HAL_DMA_Start_IT>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00c      	beq.n	8007cec <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd6:	f043 0210 	orr.w	r2, r3, #16
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007cea:	e01e      	b.n	8007d2a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf6:	2b40      	cmp	r3, #64	; 0x40
 8007cf8:	d007      	beq.n	8007d0a <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d08:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0220 	orr.w	r2, r2, #32
 8007d18:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0201 	orr.w	r2, r2, #1
 8007d28:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	08008201 	.word	0x08008201
 8007d40:	080080c5 	.word	0x080080c5
 8007d44:	08008239 	.word	0x08008239

08007d48 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d101      	bne.n	8007d68 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007d64:	2302      	movs	r3, #2
 8007d66:	e16c      	b.n	8008042 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d76:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007d7e:	7dbb      	ldrb	r3, [r7, #22]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d00d      	beq.n	8007da0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d8a:	d106      	bne.n	8007d9a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <HAL_SPI_TransmitReceive_DMA+0x52>
 8007d94:	7dbb      	ldrb	r3, [r7, #22]
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d002      	beq.n	8007da0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d9e:	e14b      	b.n	8008038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007dac:	887b      	ldrh	r3, [r7, #2]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d102      	bne.n	8007db8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007db6:	e13f      	b.n	8008038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d003      	beq.n	8007dcc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2205      	movs	r2, #5
 8007dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	887a      	ldrh	r2, [r7, #2]
 8007ddc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	887a      	ldrh	r2, [r7, #2]
 8007de2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	887a      	ldrh	r2, [r7, #2]
 8007dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	887a      	ldrh	r2, [r7, #2]
 8007df6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007e14:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e1e:	d908      	bls.n	8007e32 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e2e:	605a      	str	r2, [r3, #4]
 8007e30:	e06f      	b.n	8007f12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e40:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e4c:	d126      	bne.n	8007e9c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10f      	bne.n	8007e7a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e68:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	085b      	lsrs	r3, r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e78:	e010      	b.n	8007e9c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e88:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	085b      	lsrs	r3, r3, #1
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	3301      	adds	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea6:	d134      	bne.n	8007f12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007eb6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d111      	bne.n	8007eec <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ed6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	085b      	lsrs	r3, r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007eea:	e012      	b.n	8007f12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007efa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	3301      	adds	r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d108      	bne.n	8007f30 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f22:	4a4a      	ldr	r2, [pc, #296]	; (800804c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007f24:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2a:	4a49      	ldr	r2, [pc, #292]	; (8008050 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8007f2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8007f2e:	e007      	b.n	8007f40 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f34:	4a47      	ldr	r2, [pc, #284]	; (8008054 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007f36:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f3c:	4a46      	ldr	r2, [pc, #280]	; (8008058 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8007f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f44:	4a45      	ldr	r2, [pc, #276]	; (800805c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007f46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f68:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007f6a:	f7fa ff25 	bl	8002db8 <HAL_DMA_Start_IT>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00c      	beq.n	8007f8e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f78:	f043 0210 	orr.w	r2, r3, #16
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007f8c:	e054      	b.n	8008038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f042 0201 	orr.w	r2, r2, #1
 8007f9c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007faa:	2200      	movs	r2, #0
 8007fac:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fba:	2200      	movs	r2, #0
 8007fbc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fd4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007fd6:	f7fa feef 	bl	8002db8 <HAL_DMA_Start_IT>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00c      	beq.n	8007ffa <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe4:	f043 0210 	orr.w	r2, r3, #16
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007ff8:	e01e      	b.n	8008038 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008004:	2b40      	cmp	r3, #64	; 0x40
 8008006:	d007      	beq.n	8008018 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008016:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0220 	orr.w	r2, r2, #32
 8008026:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0202 	orr.w	r2, r2, #2
 8008036:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	08008201 	.word	0x08008201
 8008050:	080080c5 	.word	0x080080c5
 8008054:	0800821d 	.word	0x0800821d
 8008058:	0800816f 	.word	0x0800816f
 800805c:	08008239 	.word	0x08008239

08008060 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080d2:	f7fa fcb1 	bl	8002a38 <HAL_GetTick>
 80080d6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e6:	d03c      	beq.n	8008162 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0220 	bic.w	r2, r2, #32
 80080f6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10d      	bne.n	800811c <SPI_DMAReceiveCplt+0x58>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008108:	d108      	bne.n	800811c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0203 	bic.w	r2, r2, #3
 8008118:	605a      	str	r2, [r3, #4]
 800811a:	e007      	b.n	800812c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0201 	bic.w	r2, r2, #1
 800812a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	2164      	movs	r1, #100	; 0x64
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 f9bf 	bl	80084b4 <SPI_EndRxTransaction>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff ffa8 	bl	80080b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008160:	e002      	b.n	8008168 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff ff7c 	bl	8008060 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800817c:	f7fa fc5c 	bl	8002a38 <HAL_GetTick>
 8008180:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008190:	d030      	beq.n	80081f4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0220 	bic.w	r2, r2, #32
 80081a0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	2164      	movs	r1, #100	; 0x64
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 fa00 	bl	80085ac <SPI_EndRxTxTransaction>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b6:	f043 0220 	orr.w	r2, r3, #32
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0203 	bic.w	r2, r2, #3
 80081cc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff ff5f 	bl	80080b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80081f2:	e002      	b.n	80081fa <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff ff3d 	bl	8008074 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7ff ff3a 	bl	8008088 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008228:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7ff ff36 	bl	800809c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0203 	bic.w	r2, r2, #3
 8008254:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800825a:	f043 0210 	orr.w	r2, r3, #16
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7ff ff20 	bl	80080b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	4613      	mov	r3, r2
 8008286:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008288:	f7fa fbd6 	bl	8002a38 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	4413      	add	r3, r2
 8008296:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008298:	f7fa fbce 	bl	8002a38 <HAL_GetTick>
 800829c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800829e:	4b39      	ldr	r3, [pc, #228]	; (8008384 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	015b      	lsls	r3, r3, #5
 80082a4:	0d1b      	lsrs	r3, r3, #20
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	fb02 f303 	mul.w	r3, r2, r3
 80082ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082ae:	e054      	b.n	800835a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b6:	d050      	beq.n	800835a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082b8:	f7fa fbbe 	bl	8002a38 <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	69fa      	ldr	r2, [r7, #28]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d902      	bls.n	80082ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d13d      	bne.n	800834a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082e6:	d111      	bne.n	800830c <SPI_WaitFlagStateUntilTimeout+0x94>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082f0:	d004      	beq.n	80082fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082fa:	d107      	bne.n	800830c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800830a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008314:	d10f      	bne.n	8008336 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e017      	b.n	800837a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	3b01      	subs	r3, #1
 8008358:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4013      	ands	r3, r2
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	429a      	cmp	r2, r3
 8008368:	bf0c      	ite	eq
 800836a:	2301      	moveq	r3, #1
 800836c:	2300      	movne	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	429a      	cmp	r2, r3
 8008376:	d19b      	bne.n	80082b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000000 	.word	0x20000000

08008388 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800839a:	f7fa fb4d 	bl	8002a38 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	4413      	add	r3, r2
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80083aa:	f7fa fb45 	bl	8002a38 <HAL_GetTick>
 80083ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	330c      	adds	r3, #12
 80083b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083b8:	4b3d      	ldr	r3, [pc, #244]	; (80084b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	00da      	lsls	r2, r3, #3
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	0d1b      	lsrs	r3, r3, #20
 80083c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ca:	fb02 f303 	mul.w	r3, r2, r3
 80083ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80083d0:	e060      	b.n	8008494 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80083d8:	d107      	bne.n	80083ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083f0:	d050      	beq.n	8008494 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083f2:	f7fa fb21 	bl	8002a38 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fe:	429a      	cmp	r2, r3
 8008400:	d902      	bls.n	8008408 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	2b00      	cmp	r3, #0
 8008406:	d13d      	bne.n	8008484 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008416:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008420:	d111      	bne.n	8008446 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800842a:	d004      	beq.n	8008436 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008434:	d107      	bne.n	8008446 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008444:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800844e:	d10f      	bne.n	8008470 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800846e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e010      	b.n	80084a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	3b01      	subs	r3, #1
 8008492:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	4013      	ands	r3, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d196      	bne.n	80083d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3728      	adds	r7, #40	; 0x28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000000 	.word	0x20000000

080084b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084c8:	d111      	bne.n	80084ee <SPI_EndRxTransaction+0x3a>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d2:	d004      	beq.n	80084de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084dc:	d107      	bne.n	80084ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084f6:	d112      	bne.n	800851e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2200      	movs	r2, #0
 8008500:	2180      	movs	r1, #128	; 0x80
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7ff feb8 	bl	8008278 <SPI_WaitFlagStateUntilTimeout>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d021      	beq.n	8008552 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008512:	f043 0220 	orr.w	r2, r3, #32
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e03d      	b.n	800859a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800851e:	4b21      	ldr	r3, [pc, #132]	; (80085a4 <SPI_EndRxTransaction+0xf0>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a21      	ldr	r2, [pc, #132]	; (80085a8 <SPI_EndRxTransaction+0xf4>)
 8008524:	fba2 2303 	umull	r2, r3, r2, r3
 8008528:	0d5b      	lsrs	r3, r3, #21
 800852a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800852e:	fb02 f303 	mul.w	r3, r2, r3
 8008532:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	3b01      	subs	r3, #1
 800853e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854a:	2b80      	cmp	r3, #128	; 0x80
 800854c:	d0f2      	beq.n	8008534 <SPI_EndRxTransaction+0x80>
 800854e:	e000      	b.n	8008552 <SPI_EndRxTransaction+0x9e>
        break;
 8008550:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800855a:	d11d      	bne.n	8008598 <SPI_EndRxTransaction+0xe4>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008564:	d004      	beq.n	8008570 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800856e:	d113      	bne.n	8008598 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2200      	movs	r2, #0
 8008578:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff ff03 	bl	8008388 <SPI_WaitFifoStateUntilTimeout>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800858c:	f043 0220 	orr.w	r2, r3, #32
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e000      	b.n	800859a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000000 	.word	0x20000000
 80085a8:	165e9f81 	.word	0x165e9f81

080085ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2200      	movs	r2, #0
 80085c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f7ff fedf 	bl	8008388 <SPI_WaitFifoStateUntilTimeout>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d4:	f043 0220 	orr.w	r2, r3, #32
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e046      	b.n	800866e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085e0:	4b25      	ldr	r3, [pc, #148]	; (8008678 <SPI_EndRxTxTransaction+0xcc>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a25      	ldr	r2, [pc, #148]	; (800867c <SPI_EndRxTxTransaction+0xd0>)
 80085e6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ea:	0d5b      	lsrs	r3, r3, #21
 80085ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085f0:	fb02 f303 	mul.w	r3, r2, r3
 80085f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085fe:	d112      	bne.n	8008626 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2200      	movs	r2, #0
 8008608:	2180      	movs	r1, #128	; 0x80
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7ff fe34 	bl	8008278 <SPI_WaitFlagStateUntilTimeout>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d016      	beq.n	8008644 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800861a:	f043 0220 	orr.w	r2, r3, #32
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e023      	b.n	800866e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	3b01      	subs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863c:	2b80      	cmp	r3, #128	; 0x80
 800863e:	d0f2      	beq.n	8008626 <SPI_EndRxTxTransaction+0x7a>
 8008640:	e000      	b.n	8008644 <SPI_EndRxTxTransaction+0x98>
        break;
 8008642:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2200      	movs	r2, #0
 800864c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff fe99 	bl	8008388 <SPI_WaitFifoStateUntilTimeout>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008660:	f043 0220 	orr.w	r2, r3, #32
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e000      	b.n	800866e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000000 	.word	0x20000000
 800867c:	165e9f81 	.word	0x165e9f81

08008680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e049      	b.n	8008726 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f841 	bl	800872e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3304      	adds	r3, #4
 80086bc:	4619      	mov	r1, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	f000 fa00 	bl	8008ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b01      	cmp	r3, #1
 8008756:	d001      	beq.n	800875c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e054      	b.n	8008806 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a26      	ldr	r2, [pc, #152]	; (8008814 <HAL_TIM_Base_Start_IT+0xd0>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d022      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008786:	d01d      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a22      	ldr	r2, [pc, #136]	; (8008818 <HAL_TIM_Base_Start_IT+0xd4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d018      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a21      	ldr	r2, [pc, #132]	; (800881c <HAL_TIM_Base_Start_IT+0xd8>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a1f      	ldr	r2, [pc, #124]	; (8008820 <HAL_TIM_Base_Start_IT+0xdc>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00e      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a1e      	ldr	r2, [pc, #120]	; (8008824 <HAL_TIM_Base_Start_IT+0xe0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d009      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a1c      	ldr	r2, [pc, #112]	; (8008828 <HAL_TIM_Base_Start_IT+0xe4>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d004      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x80>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a1b      	ldr	r2, [pc, #108]	; (800882c <HAL_TIM_Base_Start_IT+0xe8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d115      	bne.n	80087f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	4b19      	ldr	r3, [pc, #100]	; (8008830 <HAL_TIM_Base_Start_IT+0xec>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b06      	cmp	r3, #6
 80087d4:	d015      	beq.n	8008802 <HAL_TIM_Base_Start_IT+0xbe>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087dc:	d011      	beq.n	8008802 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f042 0201 	orr.w	r2, r2, #1
 80087ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ee:	e008      	b.n	8008802 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0201 	orr.w	r2, r2, #1
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	e000      	b.n	8008804 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008802:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	40010000 	.word	0x40010000
 8008818:	40000400 	.word	0x40000400
 800881c:	40000800 	.word	0x40000800
 8008820:	40000c00 	.word	0x40000c00
 8008824:	40010400 	.word	0x40010400
 8008828:	40014000 	.word	0x40014000
 800882c:	40001800 	.word	0x40001800
 8008830:	00010007 	.word	0x00010007

08008834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b02      	cmp	r3, #2
 8008848:	d122      	bne.n	8008890 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b02      	cmp	r3, #2
 8008856:	d11b      	bne.n	8008890 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f06f 0202 	mvn.w	r2, #2
 8008860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f905 	bl	8008a86 <HAL_TIM_IC_CaptureCallback>
 800887c:	e005      	b.n	800888a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f8f7 	bl	8008a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f908 	bl	8008a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	f003 0304 	and.w	r3, r3, #4
 800889a:	2b04      	cmp	r3, #4
 800889c:	d122      	bne.n	80088e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	d11b      	bne.n	80088e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f06f 0204 	mvn.w	r2, #4
 80088b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2202      	movs	r2, #2
 80088ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f8db 	bl	8008a86 <HAL_TIM_IC_CaptureCallback>
 80088d0:	e005      	b.n	80088de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f8cd 	bl	8008a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f8de 	bl	8008a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0308 	and.w	r3, r3, #8
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d122      	bne.n	8008938 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f003 0308 	and.w	r3, r3, #8
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d11b      	bne.n	8008938 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f06f 0208 	mvn.w	r2, #8
 8008908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2204      	movs	r2, #4
 800890e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f8b1 	bl	8008a86 <HAL_TIM_IC_CaptureCallback>
 8008924:	e005      	b.n	8008932 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f8a3 	bl	8008a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f8b4 	bl	8008a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	f003 0310 	and.w	r3, r3, #16
 8008942:	2b10      	cmp	r3, #16
 8008944:	d122      	bne.n	800898c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	2b10      	cmp	r3, #16
 8008952:	d11b      	bne.n	800898c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f06f 0210 	mvn.w	r2, #16
 800895c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2208      	movs	r2, #8
 8008962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f887 	bl	8008a86 <HAL_TIM_IC_CaptureCallback>
 8008978:	e005      	b.n	8008986 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f879 	bl	8008a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f88a 	bl	8008a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b01      	cmp	r3, #1
 8008998:	d10e      	bne.n	80089b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d107      	bne.n	80089b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f06f 0201 	mvn.w	r2, #1
 80089b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7f9 fa90 	bl	8001ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c2:	2b80      	cmp	r3, #128	; 0x80
 80089c4:	d10e      	bne.n	80089e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d0:	2b80      	cmp	r3, #128	; 0x80
 80089d2:	d107      	bne.n	80089e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f91a 	bl	8008c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f2:	d10e      	bne.n	8008a12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fe:	2b80      	cmp	r3, #128	; 0x80
 8008a00:	d107      	bne.n	8008a12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f90d 	bl	8008c2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1c:	2b40      	cmp	r3, #64	; 0x40
 8008a1e:	d10e      	bne.n	8008a3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2a:	2b40      	cmp	r3, #64	; 0x40
 8008a2c:	d107      	bne.n	8008a3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f838 	bl	8008aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f003 0320 	and.w	r3, r3, #32
 8008a48:	2b20      	cmp	r3, #32
 8008a4a:	d10e      	bne.n	8008a6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d107      	bne.n	8008a6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f06f 0220 	mvn.w	r2, #32
 8008a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f8cd 	bl	8008c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a7a:	bf00      	nop
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008aa2:	bf00      	nop
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
	...

08008ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a40      	ldr	r2, [pc, #256]	; (8008bd8 <TIM_Base_SetConfig+0x114>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d013      	beq.n	8008b04 <TIM_Base_SetConfig+0x40>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae2:	d00f      	beq.n	8008b04 <TIM_Base_SetConfig+0x40>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a3d      	ldr	r2, [pc, #244]	; (8008bdc <TIM_Base_SetConfig+0x118>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00b      	beq.n	8008b04 <TIM_Base_SetConfig+0x40>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a3c      	ldr	r2, [pc, #240]	; (8008be0 <TIM_Base_SetConfig+0x11c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d007      	beq.n	8008b04 <TIM_Base_SetConfig+0x40>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a3b      	ldr	r2, [pc, #236]	; (8008be4 <TIM_Base_SetConfig+0x120>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d003      	beq.n	8008b04 <TIM_Base_SetConfig+0x40>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a3a      	ldr	r2, [pc, #232]	; (8008be8 <TIM_Base_SetConfig+0x124>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d108      	bne.n	8008b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a2f      	ldr	r2, [pc, #188]	; (8008bd8 <TIM_Base_SetConfig+0x114>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d02b      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b24:	d027      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a2c      	ldr	r2, [pc, #176]	; (8008bdc <TIM_Base_SetConfig+0x118>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d023      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a2b      	ldr	r2, [pc, #172]	; (8008be0 <TIM_Base_SetConfig+0x11c>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d01f      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a2a      	ldr	r2, [pc, #168]	; (8008be4 <TIM_Base_SetConfig+0x120>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d01b      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a29      	ldr	r2, [pc, #164]	; (8008be8 <TIM_Base_SetConfig+0x124>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d017      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a28      	ldr	r2, [pc, #160]	; (8008bec <TIM_Base_SetConfig+0x128>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d013      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a27      	ldr	r2, [pc, #156]	; (8008bf0 <TIM_Base_SetConfig+0x12c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d00f      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a26      	ldr	r2, [pc, #152]	; (8008bf4 <TIM_Base_SetConfig+0x130>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00b      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a25      	ldr	r2, [pc, #148]	; (8008bf8 <TIM_Base_SetConfig+0x134>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d007      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a24      	ldr	r2, [pc, #144]	; (8008bfc <TIM_Base_SetConfig+0x138>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d003      	beq.n	8008b76 <TIM_Base_SetConfig+0xb2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a23      	ldr	r2, [pc, #140]	; (8008c00 <TIM_Base_SetConfig+0x13c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d108      	bne.n	8008b88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a0a      	ldr	r2, [pc, #40]	; (8008bd8 <TIM_Base_SetConfig+0x114>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d003      	beq.n	8008bbc <TIM_Base_SetConfig+0xf8>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a0c      	ldr	r2, [pc, #48]	; (8008be8 <TIM_Base_SetConfig+0x124>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d103      	bne.n	8008bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	691a      	ldr	r2, [r3, #16]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	615a      	str	r2, [r3, #20]
}
 8008bca:	bf00      	nop
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	40010000 	.word	0x40010000
 8008bdc:	40000400 	.word	0x40000400
 8008be0:	40000800 	.word	0x40000800
 8008be4:	40000c00 	.word	0x40000c00
 8008be8:	40010400 	.word	0x40010400
 8008bec:	40014000 	.word	0x40014000
 8008bf0:	40014400 	.word	0x40014400
 8008bf4:	40014800 	.word	0x40014800
 8008bf8:	40001800 	.word	0x40001800
 8008bfc:	40001c00 	.word	0x40001c00
 8008c00:	40002000 	.word	0x40002000

08008c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8008c48:	4b05      	ldr	r3, [pc, #20]	; (8008c60 <LL_EXTI_EnableIT_0_31+0x20>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	4904      	ldr	r1, [pc, #16]	; (8008c60 <LL_EXTI_EnableIT_0_31+0x20>)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	600b      	str	r3, [r1, #0]
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	40013c00 	.word	0x40013c00

08008c64 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <LL_EXTI_DisableIT_0_31+0x24>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	43db      	mvns	r3, r3
 8008c74:	4904      	ldr	r1, [pc, #16]	; (8008c88 <LL_EXTI_DisableIT_0_31+0x24>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	40013c00 	.word	0x40013c00

08008c8c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <LL_EXTI_EnableEvent_0_31+0x20>)
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	4904      	ldr	r1, [pc, #16]	; (8008cac <LL_EXTI_EnableEvent_0_31+0x20>)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	604b      	str	r3, [r1, #4]

}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	40013c00 	.word	0x40013c00

08008cb0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8008cb8:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	4904      	ldr	r1, [pc, #16]	; (8008cd4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	604b      	str	r3, [r1, #4]
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40013c00 	.word	0x40013c00

08008cd8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8008ce0:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	4904      	ldr	r1, [pc, #16]	; (8008cf8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	608b      	str	r3, [r1, #8]

}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	40013c00 	.word	0x40013c00

08008cfc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8008d04:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008d06:	689a      	ldr	r2, [r3, #8]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	43db      	mvns	r3, r3
 8008d0c:	4904      	ldr	r1, [pc, #16]	; (8008d20 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008d0e:	4013      	ands	r3, r2
 8008d10:	608b      	str	r3, [r1, #8]

}
 8008d12:	bf00      	nop
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	40013c00 	.word	0x40013c00

08008d24 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8008d2c:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008d2e:	68da      	ldr	r2, [r3, #12]
 8008d30:	4904      	ldr	r1, [pc, #16]	; (8008d44 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60cb      	str	r3, [r1, #12]
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	40013c00 	.word	0x40013c00

08008d48 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_22
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8008d50:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	43db      	mvns	r3, r3
 8008d58:	4904      	ldr	r1, [pc, #16]	; (8008d6c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	60cb      	str	r3, [r1, #12]
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	40013c00 	.word	0x40013c00

08008d70 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	791b      	ldrb	r3, [r3, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d065      	beq.n	8008e50 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d06c      	beq.n	8008e66 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	795b      	ldrb	r3, [r3, #5]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d01c      	beq.n	8008dce <LL_EXTI_Init+0x5e>
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	dc25      	bgt.n	8008de4 <LL_EXTI_Init+0x74>
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <LL_EXTI_Init+0x32>
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d00b      	beq.n	8008db8 <LL_EXTI_Init+0x48>
 8008da0:	e020      	b.n	8008de4 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff ff82 	bl	8008cb0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff ff45 	bl	8008c40 <LL_EXTI_EnableIT_0_31>
          break;
 8008db6:	e018      	b.n	8008dea <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff ff51 	bl	8008c64 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff ff60 	bl	8008c8c <LL_EXTI_EnableEvent_0_31>
          break;
 8008dcc:	e00d      	b.n	8008dea <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7ff ff34 	bl	8008c40 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7ff ff55 	bl	8008c8c <LL_EXTI_EnableEvent_0_31>
          break;
 8008de2:	e002      	b.n	8008dea <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	73fb      	strb	r3, [r7, #15]
          break;
 8008de8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	799b      	ldrb	r3, [r3, #6]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d039      	beq.n	8008e66 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	799b      	ldrb	r3, [r3, #6]
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d01c      	beq.n	8008e34 <LL_EXTI_Init+0xc4>
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	dc25      	bgt.n	8008e4a <LL_EXTI_Init+0xda>
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d002      	beq.n	8008e08 <LL_EXTI_Init+0x98>
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d00b      	beq.n	8008e1e <LL_EXTI_Init+0xae>
 8008e06:	e020      	b.n	8008e4a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff ff9b 	bl	8008d48 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff ff5e 	bl	8008cd8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8008e1c:	e024      	b.n	8008e68 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff ff6a 	bl	8008cfc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff ff79 	bl	8008d24 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8008e32:	e019      	b.n	8008e68 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff ff4d 	bl	8008cd8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff ff6e 	bl	8008d24 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8008e48:	e00e      	b.n	8008e68 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]
            break;
 8008e4e:	e00b      	b.n	8008e68 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff ff05 	bl	8008c64 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff ff26 	bl	8008cb0 <LL_EXTI_DisableEvent_0_31>
 8008e64:	e000      	b.n	8008e68 <LL_EXTI_Init+0xf8>
      }
 8008e66:	bf00      	nop
  }
  return status;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <LL_GPIO_SetPinMode>:
{
 8008e72:	b480      	push	{r7}
 8008e74:	b089      	sub	sp, #36	; 0x24
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	fa93 f3a3 	rbit	r3, r3
 8008e8c:	613b      	str	r3, [r7, #16]
  return result;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	fab3 f383 	clz	r3, r3
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	2103      	movs	r1, #3
 8008e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e9e:	43db      	mvns	r3, r3
 8008ea0:	401a      	ands	r2, r3
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	fa93 f3a3 	rbit	r3, r3
 8008eac:	61bb      	str	r3, [r7, #24]
  return result;
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	fab3 f383 	clz	r3, r3
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	fa01 f303 	lsl.w	r3, r1, r3
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	601a      	str	r2, [r3, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	3724      	adds	r7, #36	; 0x24
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <LL_GPIO_SetPinOutputType>:
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	43db      	mvns	r3, r3
 8008ee4:	401a      	ands	r2, r3
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	fb01 f303 	mul.w	r3, r1, r3
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	605a      	str	r2, [r3, #4]
}
 8008ef4:	bf00      	nop
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <LL_GPIO_SetPinSpeed>:
{
 8008f00:	b480      	push	{r7}
 8008f02:	b089      	sub	sp, #36	; 0x24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	fa93 f3a3 	rbit	r3, r3
 8008f1a:	613b      	str	r3, [r7, #16]
  return result;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	fab3 f383 	clz	r3, r3
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	2103      	movs	r1, #3
 8008f28:	fa01 f303 	lsl.w	r3, r1, r3
 8008f2c:	43db      	mvns	r3, r3
 8008f2e:	401a      	ands	r2, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	fa93 f3a3 	rbit	r3, r3
 8008f3a:	61bb      	str	r3, [r7, #24]
  return result;
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	fab3 f383 	clz	r3, r3
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	609a      	str	r2, [r3, #8]
}
 8008f52:	bf00      	nop
 8008f54:	3724      	adds	r7, #36	; 0x24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <LL_GPIO_SetPinPull>:
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b089      	sub	sp, #36	; 0x24
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	fa93 f3a3 	rbit	r3, r3
 8008f78:	613b      	str	r3, [r7, #16]
  return result;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	fab3 f383 	clz	r3, r3
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	2103      	movs	r1, #3
 8008f86:	fa01 f303 	lsl.w	r3, r1, r3
 8008f8a:	43db      	mvns	r3, r3
 8008f8c:	401a      	ands	r2, r3
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	fa93 f3a3 	rbit	r3, r3
 8008f98:	61bb      	str	r3, [r7, #24]
  return result;
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	fab3 f383 	clz	r3, r3
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8008faa:	431a      	orrs	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	60da      	str	r2, [r3, #12]
}
 8008fb0:	bf00      	nop
 8008fb2:	3724      	adds	r7, #36	; 0x24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <LL_GPIO_SetAFPin_0_7>:
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b089      	sub	sp, #36	; 0x24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a1a      	ldr	r2, [r3, #32]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	fa93 f3a3 	rbit	r3, r3
 8008fd6:	613b      	str	r3, [r7, #16]
  return result;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	fab3 f383 	clz	r3, r3
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	210f      	movs	r1, #15
 8008fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe8:	43db      	mvns	r3, r3
 8008fea:	401a      	ands	r2, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	fa93 f3a3 	rbit	r3, r3
 8008ff6:	61bb      	str	r3, [r7, #24]
  return result;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	fab3 f383 	clz	r3, r3
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	fa01 f303 	lsl.w	r3, r1, r3
 8009008:	431a      	orrs	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	bf00      	nop
 8009010:	3724      	adds	r7, #36	; 0x24
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <LL_GPIO_SetAFPin_8_15>:
{
 800901a:	b480      	push	{r7}
 800901c:	b089      	sub	sp, #36	; 0x24
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	0a1b      	lsrs	r3, r3, #8
 800902e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	fa93 f3a3 	rbit	r3, r3
 8009036:	613b      	str	r3, [r7, #16]
  return result;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	fab3 f383 	clz	r3, r3
 800903e:	b2db      	uxtb	r3, r3
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	210f      	movs	r1, #15
 8009044:	fa01 f303 	lsl.w	r3, r1, r3
 8009048:	43db      	mvns	r3, r3
 800904a:	401a      	ands	r2, r3
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	0a1b      	lsrs	r3, r3, #8
 8009050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	fa93 f3a3 	rbit	r3, r3
 8009058:	61bb      	str	r3, [r7, #24]
  return result;
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	fab3 f383 	clz	r3, r3
 8009060:	b2db      	uxtb	r3, r3
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	fa01 f303 	lsl.w	r3, r1, r3
 800906a:	431a      	orrs	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009070:	bf00      	nop
 8009072:	3724      	adds	r7, #36	; 0x24
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8009086:	2300      	movs	r3, #0
 8009088:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800908a:	2300      	movs	r3, #0
 800908c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	fa93 f3a3 	rbit	r3, r3
 800909a:	613b      	str	r3, [r7, #16]
  return result;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	fab3 f383 	clz	r3, r3
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80090a6:	e051      	b.n	800914c <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	2101      	movs	r1, #1
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	fa01 f303 	lsl.w	r3, r1, r3
 80090b4:	4013      	ands	r3, r2
 80090b6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d043      	beq.n	8009146 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d003      	beq.n	80090ce <LL_GPIO_Init+0x52>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d10e      	bne.n	80090ec <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	461a      	mov	r2, r3
 80090d4:	69b9      	ldr	r1, [r7, #24]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff ff12 	bl	8008f00 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	6819      	ldr	r1, [r3, #0]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	461a      	mov	r2, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff fef2 	bl	8008ed0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	461a      	mov	r2, r3
 80090f2:	69b9      	ldr	r1, [r7, #24]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff ff32 	bl	8008f5e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d11a      	bne.n	8009138 <LL_GPIO_Init+0xbc>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	fa93 f3a3 	rbit	r3, r3
 800910c:	60bb      	str	r3, [r7, #8]
  return result;
 800910e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8009110:	fab3 f383 	clz	r3, r3
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b07      	cmp	r3, #7
 8009118:	d807      	bhi.n	800912a <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	461a      	mov	r2, r3
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff ff4a 	bl	8008fbc <LL_GPIO_SetAFPin_0_7>
 8009128:	e006      	b.n	8009138 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	461a      	mov	r2, r3
 8009130:	69b9      	ldr	r1, [r7, #24]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7ff ff71 	bl	800901a <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	461a      	mov	r2, r3
 800913e:	69b9      	ldr	r1, [r7, #24]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff fe96 	bl	8008e72 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	3301      	adds	r3, #1
 800914a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	fa22 f303 	lsr.w	r3, r2, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1a6      	bne.n	80090a8 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3720      	adds	r7, #32
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800916a:	4b98      	ldr	r3, [pc, #608]	; (80093cc <MX_LWIP_Init+0x268>)
 800916c:	22c0      	movs	r2, #192	; 0xc0
 800916e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009170:	4b96      	ldr	r3, [pc, #600]	; (80093cc <MX_LWIP_Init+0x268>)
 8009172:	22a8      	movs	r2, #168	; 0xa8
 8009174:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009176:	4b95      	ldr	r3, [pc, #596]	; (80093cc <MX_LWIP_Init+0x268>)
 8009178:	2201      	movs	r2, #1
 800917a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 130;
 800917c:	4b93      	ldr	r3, [pc, #588]	; (80093cc <MX_LWIP_Init+0x268>)
 800917e:	2282      	movs	r2, #130	; 0x82
 8009180:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009182:	4b93      	ldr	r3, [pc, #588]	; (80093d0 <MX_LWIP_Init+0x26c>)
 8009184:	22ff      	movs	r2, #255	; 0xff
 8009186:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009188:	4b91      	ldr	r3, [pc, #580]	; (80093d0 <MX_LWIP_Init+0x26c>)
 800918a:	22ff      	movs	r2, #255	; 0xff
 800918c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800918e:	4b90      	ldr	r3, [pc, #576]	; (80093d0 <MX_LWIP_Init+0x26c>)
 8009190:	22ff      	movs	r2, #255	; 0xff
 8009192:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009194:	4b8e      	ldr	r3, [pc, #568]	; (80093d0 <MX_LWIP_Init+0x26c>)
 8009196:	2200      	movs	r2, #0
 8009198:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800919a:	4b8e      	ldr	r3, [pc, #568]	; (80093d4 <MX_LWIP_Init+0x270>)
 800919c:	22c0      	movs	r2, #192	; 0xc0
 800919e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80091a0:	4b8c      	ldr	r3, [pc, #560]	; (80093d4 <MX_LWIP_Init+0x270>)
 80091a2:	22a8      	movs	r2, #168	; 0xa8
 80091a4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80091a6:	4b8b      	ldr	r3, [pc, #556]	; (80093d4 <MX_LWIP_Init+0x270>)
 80091a8:	2201      	movs	r2, #1
 80091aa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80091ac:	4b89      	ldr	r3, [pc, #548]	; (80093d4 <MX_LWIP_Init+0x270>)
 80091ae:	2201      	movs	r2, #1
 80091b0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80091b2:	2100      	movs	r1, #0
 80091b4:	2000      	movs	r0, #0
 80091b6:	f00a fdef 	bl	8013d98 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80091ba:	4b84      	ldr	r3, [pc, #528]	; (80093cc <MX_LWIP_Init+0x268>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	061a      	lsls	r2, r3, #24
 80091c0:	4b82      	ldr	r3, [pc, #520]	; (80093cc <MX_LWIP_Init+0x268>)
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	041b      	lsls	r3, r3, #16
 80091c6:	431a      	orrs	r2, r3
 80091c8:	4b80      	ldr	r3, [pc, #512]	; (80093cc <MX_LWIP_Init+0x268>)
 80091ca:	789b      	ldrb	r3, [r3, #2]
 80091cc:	021b      	lsls	r3, r3, #8
 80091ce:	4313      	orrs	r3, r2
 80091d0:	4a7e      	ldr	r2, [pc, #504]	; (80093cc <MX_LWIP_Init+0x268>)
 80091d2:	78d2      	ldrb	r2, [r2, #3]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	061a      	lsls	r2, r3, #24
 80091d8:	4b7c      	ldr	r3, [pc, #496]	; (80093cc <MX_LWIP_Init+0x268>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	0619      	lsls	r1, r3, #24
 80091de:	4b7b      	ldr	r3, [pc, #492]	; (80093cc <MX_LWIP_Init+0x268>)
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	041b      	lsls	r3, r3, #16
 80091e4:	4319      	orrs	r1, r3
 80091e6:	4b79      	ldr	r3, [pc, #484]	; (80093cc <MX_LWIP_Init+0x268>)
 80091e8:	789b      	ldrb	r3, [r3, #2]
 80091ea:	021b      	lsls	r3, r3, #8
 80091ec:	430b      	orrs	r3, r1
 80091ee:	4977      	ldr	r1, [pc, #476]	; (80093cc <MX_LWIP_Init+0x268>)
 80091f0:	78c9      	ldrb	r1, [r1, #3]
 80091f2:	430b      	orrs	r3, r1
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091fa:	431a      	orrs	r2, r3
 80091fc:	4b73      	ldr	r3, [pc, #460]	; (80093cc <MX_LWIP_Init+0x268>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	0619      	lsls	r1, r3, #24
 8009202:	4b72      	ldr	r3, [pc, #456]	; (80093cc <MX_LWIP_Init+0x268>)
 8009204:	785b      	ldrb	r3, [r3, #1]
 8009206:	041b      	lsls	r3, r3, #16
 8009208:	4319      	orrs	r1, r3
 800920a:	4b70      	ldr	r3, [pc, #448]	; (80093cc <MX_LWIP_Init+0x268>)
 800920c:	789b      	ldrb	r3, [r3, #2]
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	430b      	orrs	r3, r1
 8009212:	496e      	ldr	r1, [pc, #440]	; (80093cc <MX_LWIP_Init+0x268>)
 8009214:	78c9      	ldrb	r1, [r1, #3]
 8009216:	430b      	orrs	r3, r1
 8009218:	0a1b      	lsrs	r3, r3, #8
 800921a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800921e:	431a      	orrs	r2, r3
 8009220:	4b6a      	ldr	r3, [pc, #424]	; (80093cc <MX_LWIP_Init+0x268>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	0619      	lsls	r1, r3, #24
 8009226:	4b69      	ldr	r3, [pc, #420]	; (80093cc <MX_LWIP_Init+0x268>)
 8009228:	785b      	ldrb	r3, [r3, #1]
 800922a:	041b      	lsls	r3, r3, #16
 800922c:	4319      	orrs	r1, r3
 800922e:	4b67      	ldr	r3, [pc, #412]	; (80093cc <MX_LWIP_Init+0x268>)
 8009230:	789b      	ldrb	r3, [r3, #2]
 8009232:	021b      	lsls	r3, r3, #8
 8009234:	430b      	orrs	r3, r1
 8009236:	4965      	ldr	r1, [pc, #404]	; (80093cc <MX_LWIP_Init+0x268>)
 8009238:	78c9      	ldrb	r1, [r1, #3]
 800923a:	430b      	orrs	r3, r1
 800923c:	0e1b      	lsrs	r3, r3, #24
 800923e:	4313      	orrs	r3, r2
 8009240:	4a65      	ldr	r2, [pc, #404]	; (80093d8 <MX_LWIP_Init+0x274>)
 8009242:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009244:	4b62      	ldr	r3, [pc, #392]	; (80093d0 <MX_LWIP_Init+0x26c>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	061a      	lsls	r2, r3, #24
 800924a:	4b61      	ldr	r3, [pc, #388]	; (80093d0 <MX_LWIP_Init+0x26c>)
 800924c:	785b      	ldrb	r3, [r3, #1]
 800924e:	041b      	lsls	r3, r3, #16
 8009250:	431a      	orrs	r2, r3
 8009252:	4b5f      	ldr	r3, [pc, #380]	; (80093d0 <MX_LWIP_Init+0x26c>)
 8009254:	789b      	ldrb	r3, [r3, #2]
 8009256:	021b      	lsls	r3, r3, #8
 8009258:	4313      	orrs	r3, r2
 800925a:	4a5d      	ldr	r2, [pc, #372]	; (80093d0 <MX_LWIP_Init+0x26c>)
 800925c:	78d2      	ldrb	r2, [r2, #3]
 800925e:	4313      	orrs	r3, r2
 8009260:	061a      	lsls	r2, r3, #24
 8009262:	4b5b      	ldr	r3, [pc, #364]	; (80093d0 <MX_LWIP_Init+0x26c>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	0619      	lsls	r1, r3, #24
 8009268:	4b59      	ldr	r3, [pc, #356]	; (80093d0 <MX_LWIP_Init+0x26c>)
 800926a:	785b      	ldrb	r3, [r3, #1]
 800926c:	041b      	lsls	r3, r3, #16
 800926e:	4319      	orrs	r1, r3
 8009270:	4b57      	ldr	r3, [pc, #348]	; (80093d0 <MX_LWIP_Init+0x26c>)
 8009272:	789b      	ldrb	r3, [r3, #2]
 8009274:	021b      	lsls	r3, r3, #8
 8009276:	430b      	orrs	r3, r1
 8009278:	4955      	ldr	r1, [pc, #340]	; (80093d0 <MX_LWIP_Init+0x26c>)
 800927a:	78c9      	ldrb	r1, [r1, #3]
 800927c:	430b      	orrs	r3, r1
 800927e:	021b      	lsls	r3, r3, #8
 8009280:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009284:	431a      	orrs	r2, r3
 8009286:	4b52      	ldr	r3, [pc, #328]	; (80093d0 <MX_LWIP_Init+0x26c>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	0619      	lsls	r1, r3, #24
 800928c:	4b50      	ldr	r3, [pc, #320]	; (80093d0 <MX_LWIP_Init+0x26c>)
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	041b      	lsls	r3, r3, #16
 8009292:	4319      	orrs	r1, r3
 8009294:	4b4e      	ldr	r3, [pc, #312]	; (80093d0 <MX_LWIP_Init+0x26c>)
 8009296:	789b      	ldrb	r3, [r3, #2]
 8009298:	021b      	lsls	r3, r3, #8
 800929a:	430b      	orrs	r3, r1
 800929c:	494c      	ldr	r1, [pc, #304]	; (80093d0 <MX_LWIP_Init+0x26c>)
 800929e:	78c9      	ldrb	r1, [r1, #3]
 80092a0:	430b      	orrs	r3, r1
 80092a2:	0a1b      	lsrs	r3, r3, #8
 80092a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80092a8:	431a      	orrs	r2, r3
 80092aa:	4b49      	ldr	r3, [pc, #292]	; (80093d0 <MX_LWIP_Init+0x26c>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	0619      	lsls	r1, r3, #24
 80092b0:	4b47      	ldr	r3, [pc, #284]	; (80093d0 <MX_LWIP_Init+0x26c>)
 80092b2:	785b      	ldrb	r3, [r3, #1]
 80092b4:	041b      	lsls	r3, r3, #16
 80092b6:	4319      	orrs	r1, r3
 80092b8:	4b45      	ldr	r3, [pc, #276]	; (80093d0 <MX_LWIP_Init+0x26c>)
 80092ba:	789b      	ldrb	r3, [r3, #2]
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	430b      	orrs	r3, r1
 80092c0:	4943      	ldr	r1, [pc, #268]	; (80093d0 <MX_LWIP_Init+0x26c>)
 80092c2:	78c9      	ldrb	r1, [r1, #3]
 80092c4:	430b      	orrs	r3, r1
 80092c6:	0e1b      	lsrs	r3, r3, #24
 80092c8:	4313      	orrs	r3, r2
 80092ca:	4a44      	ldr	r2, [pc, #272]	; (80093dc <MX_LWIP_Init+0x278>)
 80092cc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80092ce:	4b41      	ldr	r3, [pc, #260]	; (80093d4 <MX_LWIP_Init+0x270>)
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	061a      	lsls	r2, r3, #24
 80092d4:	4b3f      	ldr	r3, [pc, #252]	; (80093d4 <MX_LWIP_Init+0x270>)
 80092d6:	785b      	ldrb	r3, [r3, #1]
 80092d8:	041b      	lsls	r3, r3, #16
 80092da:	431a      	orrs	r2, r3
 80092dc:	4b3d      	ldr	r3, [pc, #244]	; (80093d4 <MX_LWIP_Init+0x270>)
 80092de:	789b      	ldrb	r3, [r3, #2]
 80092e0:	021b      	lsls	r3, r3, #8
 80092e2:	4313      	orrs	r3, r2
 80092e4:	4a3b      	ldr	r2, [pc, #236]	; (80093d4 <MX_LWIP_Init+0x270>)
 80092e6:	78d2      	ldrb	r2, [r2, #3]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	061a      	lsls	r2, r3, #24
 80092ec:	4b39      	ldr	r3, [pc, #228]	; (80093d4 <MX_LWIP_Init+0x270>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	0619      	lsls	r1, r3, #24
 80092f2:	4b38      	ldr	r3, [pc, #224]	; (80093d4 <MX_LWIP_Init+0x270>)
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	041b      	lsls	r3, r3, #16
 80092f8:	4319      	orrs	r1, r3
 80092fa:	4b36      	ldr	r3, [pc, #216]	; (80093d4 <MX_LWIP_Init+0x270>)
 80092fc:	789b      	ldrb	r3, [r3, #2]
 80092fe:	021b      	lsls	r3, r3, #8
 8009300:	430b      	orrs	r3, r1
 8009302:	4934      	ldr	r1, [pc, #208]	; (80093d4 <MX_LWIP_Init+0x270>)
 8009304:	78c9      	ldrb	r1, [r1, #3]
 8009306:	430b      	orrs	r3, r1
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800930e:	431a      	orrs	r2, r3
 8009310:	4b30      	ldr	r3, [pc, #192]	; (80093d4 <MX_LWIP_Init+0x270>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	0619      	lsls	r1, r3, #24
 8009316:	4b2f      	ldr	r3, [pc, #188]	; (80093d4 <MX_LWIP_Init+0x270>)
 8009318:	785b      	ldrb	r3, [r3, #1]
 800931a:	041b      	lsls	r3, r3, #16
 800931c:	4319      	orrs	r1, r3
 800931e:	4b2d      	ldr	r3, [pc, #180]	; (80093d4 <MX_LWIP_Init+0x270>)
 8009320:	789b      	ldrb	r3, [r3, #2]
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	430b      	orrs	r3, r1
 8009326:	492b      	ldr	r1, [pc, #172]	; (80093d4 <MX_LWIP_Init+0x270>)
 8009328:	78c9      	ldrb	r1, [r1, #3]
 800932a:	430b      	orrs	r3, r1
 800932c:	0a1b      	lsrs	r3, r3, #8
 800932e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009332:	431a      	orrs	r2, r3
 8009334:	4b27      	ldr	r3, [pc, #156]	; (80093d4 <MX_LWIP_Init+0x270>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	0619      	lsls	r1, r3, #24
 800933a:	4b26      	ldr	r3, [pc, #152]	; (80093d4 <MX_LWIP_Init+0x270>)
 800933c:	785b      	ldrb	r3, [r3, #1]
 800933e:	041b      	lsls	r3, r3, #16
 8009340:	4319      	orrs	r1, r3
 8009342:	4b24      	ldr	r3, [pc, #144]	; (80093d4 <MX_LWIP_Init+0x270>)
 8009344:	789b      	ldrb	r3, [r3, #2]
 8009346:	021b      	lsls	r3, r3, #8
 8009348:	430b      	orrs	r3, r1
 800934a:	4922      	ldr	r1, [pc, #136]	; (80093d4 <MX_LWIP_Init+0x270>)
 800934c:	78c9      	ldrb	r1, [r1, #3]
 800934e:	430b      	orrs	r3, r1
 8009350:	0e1b      	lsrs	r3, r3, #24
 8009352:	4313      	orrs	r3, r2
 8009354:	4a22      	ldr	r2, [pc, #136]	; (80093e0 <MX_LWIP_Init+0x27c>)
 8009356:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009358:	4b22      	ldr	r3, [pc, #136]	; (80093e4 <MX_LWIP_Init+0x280>)
 800935a:	9302      	str	r3, [sp, #8]
 800935c:	4b22      	ldr	r3, [pc, #136]	; (80093e8 <MX_LWIP_Init+0x284>)
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	2300      	movs	r3, #0
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	4b1e      	ldr	r3, [pc, #120]	; (80093e0 <MX_LWIP_Init+0x27c>)
 8009366:	4a1d      	ldr	r2, [pc, #116]	; (80093dc <MX_LWIP_Init+0x278>)
 8009368:	491b      	ldr	r1, [pc, #108]	; (80093d8 <MX_LWIP_Init+0x274>)
 800936a:	4820      	ldr	r0, [pc, #128]	; (80093ec <MX_LWIP_Init+0x288>)
 800936c:	f00b fade 	bl	801492c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009370:	481e      	ldr	r0, [pc, #120]	; (80093ec <MX_LWIP_Init+0x288>)
 8009372:	f00b fc8d 	bl	8014c90 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009376:	4b1d      	ldr	r3, [pc, #116]	; (80093ec <MX_LWIP_Init+0x288>)
 8009378:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800937c:	089b      	lsrs	r3, r3, #2
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009388:	4818      	ldr	r0, [pc, #96]	; (80093ec <MX_LWIP_Init+0x288>)
 800938a:	f00b fc91 	bl	8014cb0 <netif_set_up>
 800938e:	e002      	b.n	8009396 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009390:	4816      	ldr	r0, [pc, #88]	; (80093ec <MX_LWIP_Init+0x288>)
 8009392:	f00b fcf9 	bl	8014d88 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009396:	4916      	ldr	r1, [pc, #88]	; (80093f0 <MX_LWIP_Init+0x28c>)
 8009398:	4814      	ldr	r0, [pc, #80]	; (80093ec <MX_LWIP_Init+0x288>)
 800939a:	f00b fd8b 	bl	8014eb4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800939e:	2224      	movs	r2, #36	; 0x24
 80093a0:	2100      	movs	r1, #0
 80093a2:	4814      	ldr	r0, [pc, #80]	; (80093f4 <MX_LWIP_Init+0x290>)
 80093a4:	f01a fb1d 	bl	80239e2 <memset>
  attributes.name = "EthLink";
 80093a8:	4b12      	ldr	r3, [pc, #72]	; (80093f4 <MX_LWIP_Init+0x290>)
 80093aa:	4a13      	ldr	r2, [pc, #76]	; (80093f8 <MX_LWIP_Init+0x294>)
 80093ac:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80093ae:	4b11      	ldr	r3, [pc, #68]	; (80093f4 <MX_LWIP_Init+0x290>)
 80093b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093b4:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80093b6:	4b0f      	ldr	r3, [pc, #60]	; (80093f4 <MX_LWIP_Init+0x290>)
 80093b8:	2210      	movs	r2, #16
 80093ba:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80093bc:	4a0d      	ldr	r2, [pc, #52]	; (80093f4 <MX_LWIP_Init+0x290>)
 80093be:	490b      	ldr	r1, [pc, #44]	; (80093ec <MX_LWIP_Init+0x288>)
 80093c0:	480e      	ldr	r0, [pc, #56]	; (80093fc <MX_LWIP_Init+0x298>)
 80093c2:	f004 f91b 	bl	800d5fc <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80093c6:	bf00      	nop
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20000820 	.word	0x20000820
 80093d0:	20000824 	.word	0x20000824
 80093d4:	20000828 	.word	0x20000828
 80093d8:	20000814 	.word	0x20000814
 80093dc:	20000818 	.word	0x20000818
 80093e0:	2000081c 	.word	0x2000081c
 80093e4:	08013ca9 	.word	0x08013ca9
 80093e8:	080098fd 	.word	0x080098fd
 80093ec:	200007e0 	.word	0x200007e0
 80093f0:	08009401 	.word	0x08009401
 80093f4:	2000082c 	.word	0x2000082c
 80093f8:	08028e84 	.word	0x08028e84
 80093fc:	08009b89 	.word	0x08009b89

08009400 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009426:	2320      	movs	r3, #32
 8009428:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800942a:	f3bf 8f4f 	dsb	sy
}
 800942e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8009430:	e00b      	b.n	800944a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8009432:	4a0d      	ldr	r2, [pc, #52]	; (8009468 <SCB_InvalidateDCache_by_Addr+0x54>)
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4413      	add	r3, r2
 8009440:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	dcf0      	bgt.n	8009432 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009450:	f3bf 8f4f 	dsb	sy
}
 8009454:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009456:	f3bf 8f6f 	isb	sy
}
 800945a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800945c:	bf00      	nop
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	e000ed00 	.word	0xe000ed00

0800946c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009474:	4b04      	ldr	r3, [pc, #16]	; (8009488 <HAL_ETH_RxCpltCallback+0x1c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4618      	mov	r0, r3
 800947a:	f004 fc45 	bl	800dd08 <osSemaphoreRelease>
}
 800947e:	bf00      	nop
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	200051dc 	.word	0x200051dc

0800948c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8009494:	4b04      	ldr	r3, [pc, #16]	; (80094a8 <HAL_ETH_TxCpltCallback+0x1c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4618      	mov	r0, r3
 800949a:	f004 fc35 	bl	800dd08 <osSemaphoreRelease>
}
 800949e:	bf00      	nop
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	200051e0 	.word	0x200051e0

080094ac <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7fa fd87 	bl	8003fc8 <HAL_ETH_GetDMAError>
 80094ba:	4603      	mov	r3, r0
 80094bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c0:	2b80      	cmp	r3, #128	; 0x80
 80094c2:	d104      	bne.n	80094ce <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80094c4:	4b04      	ldr	r3, [pc, #16]	; (80094d8 <HAL_ETH_ErrorCallback+0x2c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f004 fc1d 	bl	800dd08 <osSemaphoreRelease>
  }
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200051dc 	.word	0x200051dc

080094dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b0aa      	sub	sp, #168	; 0xa8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80094f6:	f107 0310 	add.w	r3, r7, #16
 80094fa:	2264      	movs	r2, #100	; 0x64
 80094fc:	2100      	movs	r1, #0
 80094fe:	4618      	mov	r0, r3
 8009500:	f01a fa6f 	bl	80239e2 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009504:	4b85      	ldr	r3, [pc, #532]	; (800971c <low_level_init+0x240>)
 8009506:	4a86      	ldr	r2, [pc, #536]	; (8009720 <low_level_init+0x244>)
 8009508:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800950a:	2300      	movs	r3, #0
 800950c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800950e:	2380      	movs	r3, #128	; 0x80
 8009510:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009512:	23e1      	movs	r3, #225	; 0xe1
 8009514:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009516:	2300      	movs	r3, #0
 8009518:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800951a:	2300      	movs	r3, #0
 800951c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800951e:	2300      	movs	r3, #0
 8009520:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009522:	4a7e      	ldr	r2, [pc, #504]	; (800971c <low_level_init+0x240>)
 8009524:	f107 0308 	add.w	r3, r7, #8
 8009528:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800952a:	4b7c      	ldr	r3, [pc, #496]	; (800971c <low_level_init+0x240>)
 800952c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009530:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009532:	4b7a      	ldr	r3, [pc, #488]	; (800971c <low_level_init+0x240>)
 8009534:	4a7b      	ldr	r2, [pc, #492]	; (8009724 <low_level_init+0x248>)
 8009536:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009538:	4b78      	ldr	r3, [pc, #480]	; (800971c <low_level_init+0x240>)
 800953a:	4a7b      	ldr	r2, [pc, #492]	; (8009728 <low_level_init+0x24c>)
 800953c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800953e:	4b77      	ldr	r3, [pc, #476]	; (800971c <low_level_init+0x240>)
 8009540:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009544:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009546:	4875      	ldr	r0, [pc, #468]	; (800971c <low_level_init+0x240>)
 8009548:	f7f9 ff00 	bl	800334c <HAL_ETH_Init>
 800954c:	4603      	mov	r3, r0
 800954e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009552:	2238      	movs	r2, #56	; 0x38
 8009554:	2100      	movs	r1, #0
 8009556:	4875      	ldr	r0, [pc, #468]	; (800972c <low_level_init+0x250>)
 8009558:	f01a fa43 	bl	80239e2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800955c:	4b73      	ldr	r3, [pc, #460]	; (800972c <low_level_init+0x250>)
 800955e:	2221      	movs	r2, #33	; 0x21
 8009560:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009562:	4b72      	ldr	r3, [pc, #456]	; (800972c <low_level_init+0x250>)
 8009564:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8009568:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800956a:	4b70      	ldr	r3, [pc, #448]	; (800972c <low_level_init+0x250>)
 800956c:	2200      	movs	r2, #0
 800956e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009570:	486f      	ldr	r0, [pc, #444]	; (8009730 <low_level_init+0x254>)
 8009572:	f00b f895 	bl	80146a0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2206      	movs	r2, #6
 800957a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800957e:	4b67      	ldr	r3, [pc, #412]	; (800971c <low_level_init+0x240>)
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800958a:	4b64      	ldr	r3, [pc, #400]	; (800971c <low_level_init+0x240>)
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	785a      	ldrb	r2, [r3, #1]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009596:	4b61      	ldr	r3, [pc, #388]	; (800971c <low_level_init+0x240>)
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	789a      	ldrb	r2, [r3, #2]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80095a2:	4b5e      	ldr	r3, [pc, #376]	; (800971c <low_level_init+0x240>)
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	78da      	ldrb	r2, [r3, #3]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80095ae:	4b5b      	ldr	r3, [pc, #364]	; (800971c <low_level_init+0x240>)
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	791a      	ldrb	r2, [r3, #4]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80095ba:	4b58      	ldr	r3, [pc, #352]	; (800971c <low_level_init+0x240>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	795a      	ldrb	r2, [r3, #5]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80095cc:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80095d4:	f043 030a 	orr.w	r3, r3, #10
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80095e0:	2200      	movs	r2, #0
 80095e2:	2101      	movs	r1, #1
 80095e4:	2001      	movs	r0, #1
 80095e6:	f004 fa8d 	bl	800db04 <osSemaphoreNew>
 80095ea:	4603      	mov	r3, r0
 80095ec:	4a51      	ldr	r2, [pc, #324]	; (8009734 <low_level_init+0x258>)
 80095ee:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80095f0:	2200      	movs	r2, #0
 80095f2:	2101      	movs	r1, #1
 80095f4:	2001      	movs	r0, #1
 80095f6:	f004 fa85 	bl	800db04 <osSemaphoreNew>
 80095fa:	4603      	mov	r3, r0
 80095fc:	4a4e      	ldr	r2, [pc, #312]	; (8009738 <low_level_init+0x25c>)
 80095fe:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009600:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009604:	2224      	movs	r2, #36	; 0x24
 8009606:	2100      	movs	r1, #0
 8009608:	4618      	mov	r0, r3
 800960a:	f01a f9ea 	bl	80239e2 <memset>
  attributes.name = "EthIf";
 800960e:	4b4b      	ldr	r3, [pc, #300]	; (800973c <low_level_init+0x260>)
 8009610:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8009612:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8009616:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800961a:	2330      	movs	r3, #48	; 0x30
 800961c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8009620:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009624:	461a      	mov	r2, r3
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	4845      	ldr	r0, [pc, #276]	; (8009740 <low_level_init+0x264>)
 800962a:	f003 ffe7 	bl	800d5fc <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800962e:	4945      	ldr	r1, [pc, #276]	; (8009744 <low_level_init+0x268>)
 8009630:	4845      	ldr	r0, [pc, #276]	; (8009748 <low_level_init+0x26c>)
 8009632:	f7f9 f87e 	bl	8002732 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8009636:	4844      	ldr	r0, [pc, #272]	; (8009748 <low_level_init+0x26c>)
 8009638:	f7f9 f8ad 	bl	8002796 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800963c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8009640:	2b00      	cmp	r3, #0
 8009642:	d164      	bne.n	800970e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009644:	4840      	ldr	r0, [pc, #256]	; (8009748 <low_level_init+0x26c>)
 8009646:	f7f9 f94e 	bl	80028e6 <LAN8742_GetLinkState>
 800964a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800964e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009652:	2b01      	cmp	r3, #1
 8009654:	dc06      	bgt.n	8009664 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f00b fbfc 	bl	8014e54 <netif_set_link_down>
      netif_set_down(netif);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f00b fb93 	bl	8014d88 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009662:	e056      	b.n	8009712 <low_level_init+0x236>
      switch (PHYLinkState)
 8009664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009668:	3b02      	subs	r3, #2
 800966a:	2b03      	cmp	r3, #3
 800966c:	d82a      	bhi.n	80096c4 <low_level_init+0x1e8>
 800966e:	a201      	add	r2, pc, #4	; (adr r2, 8009674 <low_level_init+0x198>)
 8009670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009674:	08009685 	.word	0x08009685
 8009678:	08009697 	.word	0x08009697
 800967c:	080096a7 	.word	0x080096a7
 8009680:	080096b7 	.word	0x080096b7
        duplex = ETH_FULLDUPLEX_MODE;
 8009684:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800968c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8009694:	e01f      	b.n	80096d6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8009696:	2300      	movs	r3, #0
 8009698:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800969c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80096a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80096a4:	e017      	b.n	80096d6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80096a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80096ae:	2300      	movs	r3, #0
 80096b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80096b4:	e00f      	b.n	80096d6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80096bc:	2300      	movs	r3, #0
 80096be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80096c2:	e008      	b.n	80096d6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80096c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80096cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80096d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80096d4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80096d6:	f107 0310 	add.w	r3, r7, #16
 80096da:	4619      	mov	r1, r3
 80096dc:	480f      	ldr	r0, [pc, #60]	; (800971c <low_level_init+0x240>)
 80096de:	f7fa fb19 	bl	8003d14 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80096e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80096e6:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 80096e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80096ee:	f107 0310 	add.w	r3, r7, #16
 80096f2:	4619      	mov	r1, r3
 80096f4:	4809      	ldr	r0, [pc, #36]	; (800971c <low_level_init+0x240>)
 80096f6:	f7fa fbf7 	bl	8003ee8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80096fa:	4808      	ldr	r0, [pc, #32]	; (800971c <low_level_init+0x240>)
 80096fc:	f7f9 fea2 	bl	8003444 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f00b fad5 	bl	8014cb0 <netif_set_up>
    netif_set_link_up(netif);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f00b fb70 	bl	8014dec <netif_set_link_up>
}
 800970c:	e001      	b.n	8009712 <low_level_init+0x236>
    Error_Handler();
 800970e:	f7f8 fbf2 	bl	8001ef6 <Error_Handler>
}
 8009712:	bf00      	nop
 8009714:	37a8      	adds	r7, #168	; 0xa8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	200051e4 	.word	0x200051e4
 8009720:	40028000 	.word	0x40028000
 8009724:	20000370 	.word	0x20000370
 8009728:	200002d0 	.word	0x200002d0
 800972c:	20005294 	.word	0x20005294
 8009730:	0802d0ac 	.word	0x0802d0ac
 8009734:	200051dc 	.word	0x200051dc
 8009738:	200051e0 	.word	0x200051e0
 800973c:	08028e8c 	.word	0x08028e8c
 8009740:	080098a9 	.word	0x080098a9
 8009744:	2000000c 	.word	0x2000000c
 8009748:	200052cc 	.word	0x200052cc

0800974c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b092      	sub	sp, #72	; 0x48
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009764:	f107 030c 	add.w	r3, r7, #12
 8009768:	2230      	movs	r2, #48	; 0x30
 800976a:	2100      	movs	r1, #0
 800976c:	4618      	mov	r0, r3
 800976e:	f01a f938 	bl	80239e2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009772:	f107 030c 	add.w	r3, r7, #12
 8009776:	2230      	movs	r2, #48	; 0x30
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f01a f931 	bl	80239e2 <memset>

  for(q = p; q != NULL; q = q->next)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	643b      	str	r3, [r7, #64]	; 0x40
 8009784:	e045      	b.n	8009812 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009788:	2b03      	cmp	r3, #3
 800978a:	d902      	bls.n	8009792 <low_level_output+0x46>
      return ERR_IF;
 800978c:	f06f 030b 	mvn.w	r3, #11
 8009790:	e065      	b.n	800985e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8009792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009794:	6859      	ldr	r1, [r3, #4]
 8009796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009798:	4613      	mov	r3, r2
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	4413      	add	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	3348      	adds	r3, #72	; 0x48
 80097a2:	443b      	add	r3, r7
 80097a4:	3b3c      	subs	r3, #60	; 0x3c
 80097a6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80097a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097aa:	895b      	ldrh	r3, [r3, #10]
 80097ac:	4619      	mov	r1, r3
 80097ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097b0:	4613      	mov	r3, r2
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	3348      	adds	r3, #72	; 0x48
 80097ba:	443b      	add	r3, r7
 80097bc:	3b38      	subs	r3, #56	; 0x38
 80097be:	6019      	str	r1, [r3, #0]

    if(i>0)
 80097c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d011      	beq.n	80097ea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80097c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c8:	1e5a      	subs	r2, r3, #1
 80097ca:	f107 000c 	add.w	r0, r7, #12
 80097ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097d0:	460b      	mov	r3, r1
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	440b      	add	r3, r1
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	18c1      	adds	r1, r0, r3
 80097da:	4613      	mov	r3, r2
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	3348      	adds	r3, #72	; 0x48
 80097e4:	443b      	add	r3, r7
 80097e6:	3b34      	subs	r3, #52	; 0x34
 80097e8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80097ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d109      	bne.n	8009806 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80097f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097f4:	4613      	mov	r3, r2
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	3348      	adds	r3, #72	; 0x48
 80097fe:	443b      	add	r3, r7
 8009800:	3b34      	subs	r3, #52	; 0x34
 8009802:	2200      	movs	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009808:	3301      	adds	r3, #1
 800980a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800980c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	643b      	str	r3, [r7, #64]	; 0x40
 8009812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1b6      	bne.n	8009786 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	891b      	ldrh	r3, [r3, #8]
 800981c:	461a      	mov	r2, r3
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <low_level_output+0x11c>)
 8009820:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009822:	4a11      	ldr	r2, [pc, #68]	; (8009868 <low_level_output+0x11c>)
 8009824:	f107 030c 	add.w	r3, r7, #12
 8009828:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800982a:	4a0f      	ldr	r2, [pc, #60]	; (8009868 <low_level_output+0x11c>)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8009830:	6838      	ldr	r0, [r7, #0]
 8009832:	f00b ff93 	bl	801575c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8009836:	490c      	ldr	r1, [pc, #48]	; (8009868 <low_level_output+0x11c>)
 8009838:	480c      	ldr	r0, [pc, #48]	; (800986c <low_level_output+0x120>)
 800983a:	f7f9 ff11 	bl	8003660 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800983e:	bf00      	nop
 8009840:	4b0b      	ldr	r3, [pc, #44]	; (8009870 <low_level_output+0x124>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009848:	4618      	mov	r0, r3
 800984a:	f004 f9f7 	bl	800dc3c <osSemaphoreAcquire>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1f5      	bne.n	8009840 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8009854:	4805      	ldr	r0, [pc, #20]	; (800986c <low_level_output+0x120>)
 8009856:	f7fa f897 	bl	8003988 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800985a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800985e:	4618      	mov	r0, r3
 8009860:	3748      	adds	r7, #72	; 0x48
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20005294 	.word	0x20005294
 800986c:	200051e4 	.word	0x200051e4
 8009870:	200051e0 	.word	0x200051e0

08009874 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <low_level_input+0x2c>)
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009888:	f107 030c 	add.w	r3, r7, #12
 800988c:	4619      	mov	r1, r3
 800988e:	4805      	ldr	r0, [pc, #20]	; (80098a4 <low_level_input+0x30>)
 8009890:	f7f9 ff42 	bl	8003718 <HAL_ETH_ReadData>
  }

  return p;
 8009894:	68fb      	ldr	r3, [r7, #12]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	200051d8 	.word	0x200051d8
 80098a4:	200051e4 	.word	0x200051e4

080098a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80098b0:	2300      	movs	r3, #0
 80098b2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80098b8:	4b0f      	ldr	r3, [pc, #60]	; (80098f8 <ethernetif_input+0x50>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80098c0:	4618      	mov	r0, r3
 80098c2:	f004 f9bb 	bl	800dc3c <osSemaphoreAcquire>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1f5      	bne.n	80098b8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80098cc:	68b8      	ldr	r0, [r7, #8]
 80098ce:	f7ff ffd1 	bl	8009874 <low_level_input>
 80098d2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	68b9      	ldr	r1, [r7, #8]
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	4798      	blx	r3
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f00b fe90 	bl	8015610 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1ea      	bne.n	80098cc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80098f6:	e7df      	b.n	80098b8 <ethernetif_input+0x10>
 80098f8:	200051dc 	.word	0x200051dc

080098fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d106      	bne.n	8009918 <ethernetif_init+0x1c>
 800990a:	4b0e      	ldr	r3, [pc, #56]	; (8009944 <ethernetif_init+0x48>)
 800990c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009910:	490d      	ldr	r1, [pc, #52]	; (8009948 <ethernetif_init+0x4c>)
 8009912:	480e      	ldr	r0, [pc, #56]	; (800994c <ethernetif_init+0x50>)
 8009914:	f01a ff7c 	bl	8024810 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2273      	movs	r2, #115	; 0x73
 800991c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2274      	movs	r2, #116	; 0x74
 8009924:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a09      	ldr	r2, [pc, #36]	; (8009950 <ethernetif_init+0x54>)
 800992c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a08      	ldr	r2, [pc, #32]	; (8009954 <ethernetif_init+0x58>)
 8009932:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff fdd1 	bl	80094dc <low_level_init>

  return ERR_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	08028e94 	.word	0x08028e94
 8009948:	08028eb0 	.word	0x08028eb0
 800994c:	08028ec0 	.word	0x08028ec0
 8009950:	0801cddd 	.word	0x0801cddd
 8009954:	0800974d 	.word	0x0800974d

08009958 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009964:	68f9      	ldr	r1, [r7, #12]
 8009966:	4809      	ldr	r0, [pc, #36]	; (800998c <pbuf_free_custom+0x34>)
 8009968:	f00a ff8a 	bl	8014880 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800996c:	4b08      	ldr	r3, [pc, #32]	; (8009990 <pbuf_free_custom+0x38>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d107      	bne.n	8009984 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009974:	4b06      	ldr	r3, [pc, #24]	; (8009990 <pbuf_free_custom+0x38>)
 8009976:	2200      	movs	r2, #0
 8009978:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800997a:	4b06      	ldr	r3, [pc, #24]	; (8009994 <pbuf_free_custom+0x3c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f004 f9c2 	bl	800dd08 <osSemaphoreRelease>
  }
}
 8009984:	bf00      	nop
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	0802d0ac 	.word	0x0802d0ac
 8009990:	200051d8 	.word	0x200051d8
 8009994:	200051dc 	.word	0x200051dc

08009998 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800999c:	f7f9 f84c 	bl	8002a38 <HAL_GetTick>
 80099a0:	4603      	mov	r3, r0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08e      	sub	sp, #56	; 0x38
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	605a      	str	r2, [r3, #4]
 80099ba:	609a      	str	r2, [r3, #8]
 80099bc:	60da      	str	r2, [r3, #12]
 80099be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a44      	ldr	r2, [pc, #272]	; (8009ad8 <HAL_ETH_MspInit+0x130>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	f040 8081 	bne.w	8009ace <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80099cc:	4b43      	ldr	r3, [pc, #268]	; (8009adc <HAL_ETH_MspInit+0x134>)
 80099ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d0:	4a42      	ldr	r2, [pc, #264]	; (8009adc <HAL_ETH_MspInit+0x134>)
 80099d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80099d6:	6313      	str	r3, [r2, #48]	; 0x30
 80099d8:	4b40      	ldr	r3, [pc, #256]	; (8009adc <HAL_ETH_MspInit+0x134>)
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099e0:	623b      	str	r3, [r7, #32]
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	4b3d      	ldr	r3, [pc, #244]	; (8009adc <HAL_ETH_MspInit+0x134>)
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	4a3c      	ldr	r2, [pc, #240]	; (8009adc <HAL_ETH_MspInit+0x134>)
 80099ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099ee:	6313      	str	r3, [r2, #48]	; 0x30
 80099f0:	4b3a      	ldr	r3, [pc, #232]	; (8009adc <HAL_ETH_MspInit+0x134>)
 80099f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099f8:	61fb      	str	r3, [r7, #28]
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	4b37      	ldr	r3, [pc, #220]	; (8009adc <HAL_ETH_MspInit+0x134>)
 80099fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a00:	4a36      	ldr	r2, [pc, #216]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a06:	6313      	str	r3, [r2, #48]	; 0x30
 8009a08:	4b34      	ldr	r3, [pc, #208]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a14:	4b31      	ldr	r3, [pc, #196]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a18:	4a30      	ldr	r2, [pc, #192]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a1a:	f043 0304 	orr.w	r3, r3, #4
 8009a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8009a20:	4b2e      	ldr	r3, [pc, #184]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a24:	f003 0304 	and.w	r3, r3, #4
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a2c:	4b2b      	ldr	r3, [pc, #172]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a30:	4a2a      	ldr	r2, [pc, #168]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a32:	f043 0301 	orr.w	r3, r3, #1
 8009a36:	6313      	str	r3, [r2, #48]	; 0x30
 8009a38:	4b28      	ldr	r3, [pc, #160]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	613b      	str	r3, [r7, #16]
 8009a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009a44:	4b25      	ldr	r3, [pc, #148]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a48:	4a24      	ldr	r2, [pc, #144]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8009a50:	4b22      	ldr	r3, [pc, #136]	; (8009adc <HAL_ETH_MspInit+0x134>)
 8009a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009a5c:	2332      	movs	r3, #50	; 0x32
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a60:	2302      	movs	r3, #2
 8009a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a6c:	230b      	movs	r3, #11
 8009a6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a74:	4619      	mov	r1, r3
 8009a76:	481a      	ldr	r0, [pc, #104]	; (8009ae0 <HAL_ETH_MspInit+0x138>)
 8009a78:	f7fa feb6 	bl	80047e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009a7c:	2386      	movs	r3, #134	; 0x86
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a80:	2302      	movs	r3, #2
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a84:	2300      	movs	r3, #0
 8009a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a8c:	230b      	movs	r3, #11
 8009a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a94:	4619      	mov	r1, r3
 8009a96:	4813      	ldr	r0, [pc, #76]	; (8009ae4 <HAL_ETH_MspInit+0x13c>)
 8009a98:	f7fa fea6 	bl	80047e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8009a9c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009aae:	230b      	movs	r3, #11
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	480b      	ldr	r0, [pc, #44]	; (8009ae8 <HAL_ETH_MspInit+0x140>)
 8009aba:	f7fa fe95 	bl	80047e8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2105      	movs	r1, #5
 8009ac2:	203d      	movs	r0, #61	; 0x3d
 8009ac4:	f7f9 f8a0 	bl	8002c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009ac8:	203d      	movs	r0, #61	; 0x3d
 8009aca:	f7f9 f8b9 	bl	8002c40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009ace:	bf00      	nop
 8009ad0:	3738      	adds	r7, #56	; 0x38
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	40028000 	.word	0x40028000
 8009adc:	40023800 	.word	0x40023800
 8009ae0:	40020800 	.word	0x40020800
 8009ae4:	40020000 	.word	0x40020000
 8009ae8:	40021800 	.word	0x40021800

08009aec <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009af0:	4802      	ldr	r0, [pc, #8]	; (8009afc <ETH_PHY_IO_Init+0x10>)
 8009af2:	f7fa fa13 	bl	8003f1c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	200051e4 	.word	0x200051e4

08009b00 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
  return 0;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	68f9      	ldr	r1, [r7, #12]
 8009b22:	4807      	ldr	r0, [pc, #28]	; (8009b40 <ETH_PHY_IO_ReadReg+0x30>)
 8009b24:	f7fa f862 	bl	8003bec <HAL_ETH_ReadPHYRegister>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b32:	e000      	b.n	8009b36 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	200051e4 	.word	0x200051e4

08009b44 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	68f9      	ldr	r1, [r7, #12]
 8009b56:	4807      	ldr	r0, [pc, #28]	; (8009b74 <ETH_PHY_IO_WriteReg+0x30>)
 8009b58:	f7fa f893 	bl	8003c82 <HAL_ETH_WritePHYRegister>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d002      	beq.n	8009b68 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b66:	e000      	b.n	8009b6a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200051e4 	.word	0x200051e4

08009b78 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009b7c:	f7f8 ff5c 	bl	8002a38 <HAL_GetTick>
 8009b80:	4603      	mov	r3, r0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b0a0      	sub	sp, #128	; 0x80
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009b90:	f107 0308 	add.w	r3, r7, #8
 8009b94:	2264      	movs	r2, #100	; 0x64
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f019 ff22 	bl	80239e2 <memset>
  int32_t PHYLinkState = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009baa:	2300      	movs	r3, #0
 8009bac:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009bb2:	483a      	ldr	r0, [pc, #232]	; (8009c9c <ethernet_link_thread+0x114>)
 8009bb4:	f7f8 fe97 	bl	80028e6 <LAN8742_GetLinkState>
 8009bb8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bc0:	089b      	lsrs	r3, r3, #2
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00c      	beq.n	8009be6 <ethernet_link_thread+0x5e>
 8009bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	dc09      	bgt.n	8009be6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8009bd2:	4833      	ldr	r0, [pc, #204]	; (8009ca0 <ethernet_link_thread+0x118>)
 8009bd4:	f7f9 fcc4 	bl	8003560 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009bd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009bda:	f00b f8d5 	bl	8014d88 <netif_set_down>
    netif_set_link_down(netif);
 8009bde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009be0:	f00b f938 	bl	8014e54 <netif_set_link_down>
 8009be4:	e055      	b.n	8009c92 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009be8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bec:	f003 0304 	and.w	r3, r3, #4
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d14e      	bne.n	8009c92 <ethernet_link_thread+0x10a>
 8009bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	dd4b      	ble.n	8009c92 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8009bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bfc:	3b02      	subs	r3, #2
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d82a      	bhi.n	8009c58 <ethernet_link_thread+0xd0>
 8009c02:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <ethernet_link_thread+0x80>)
 8009c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c08:	08009c19 	.word	0x08009c19
 8009c0c:	08009c2b 	.word	0x08009c2b
 8009c10:	08009c3b 	.word	0x08009c3b
 8009c14:	08009c4b 	.word	0x08009c4b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009c18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c1c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009c1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c22:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009c24:	2301      	movs	r3, #1
 8009c26:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009c28:	e017      	b.n	8009c5a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c32:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009c34:	2301      	movs	r3, #1
 8009c36:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009c38:	e00f      	b.n	8009c5a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009c3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c3e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009c40:	2300      	movs	r3, #0
 8009c42:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009c44:	2301      	movs	r3, #1
 8009c46:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009c48:	e007      	b.n	8009c5a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009c52:	2301      	movs	r3, #1
 8009c54:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009c56:	e000      	b.n	8009c5a <ethernet_link_thread+0xd2>
    default:
      break;
 8009c58:	bf00      	nop
    }

    if(linkchanged)
 8009c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d018      	beq.n	8009c92 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009c60:	f107 0308 	add.w	r3, r7, #8
 8009c64:	4619      	mov	r1, r3
 8009c66:	480e      	ldr	r0, [pc, #56]	; (8009ca0 <ethernet_link_thread+0x118>)
 8009c68:	f7fa f854 	bl	8003d14 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c6e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c72:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009c74:	f107 0308 	add.w	r3, r7, #8
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4809      	ldr	r0, [pc, #36]	; (8009ca0 <ethernet_link_thread+0x118>)
 8009c7c:	f7fa f934 	bl	8003ee8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009c80:	4807      	ldr	r0, [pc, #28]	; (8009ca0 <ethernet_link_thread+0x118>)
 8009c82:	f7f9 fbdf 	bl	8003444 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009c86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c88:	f00b f812 	bl	8014cb0 <netif_set_up>
      netif_set_link_up(netif);
 8009c8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c8e:	f00b f8ad 	bl	8014dec <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009c92:	2064      	movs	r0, #100	; 0x64
 8009c94:	f003 fdc0 	bl	800d818 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009c98:	e78b      	b.n	8009bb2 <ethernet_link_thread+0x2a>
 8009c9a:	bf00      	nop
 8009c9c:	200052cc 	.word	0x200052cc
 8009ca0:	200051e4 	.word	0x200051e4

08009ca4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af02      	add	r7, sp, #8
 8009caa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009cac:	4812      	ldr	r0, [pc, #72]	; (8009cf8 <HAL_ETH_RxAllocateCallback+0x54>)
 8009cae:	f00a fd73 	bl	8014798 <memp_malloc_pool>
 8009cb2:	60f8      	str	r0, [r7, #12]
  if (p)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d014      	beq.n	8009ce4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f103 0220 	add.w	r2, r3, #32
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4a0d      	ldr	r2, [pc, #52]	; (8009cfc <HAL_ETH_RxAllocateCallback+0x58>)
 8009cc8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, 1024);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cd2:	9201      	str	r2, [sp, #4]
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2241      	movs	r2, #65	; 0x41
 8009cda:	2100      	movs	r1, #0
 8009cdc:	2000      	movs	r0, #0
 8009cde:	f00b fadd 	bl	801529c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009ce2:	e005      	b.n	8009cf0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009ce4:	4b06      	ldr	r3, [pc, #24]	; (8009d00 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]
}
 8009cf0:	bf00      	nop
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	0802d0ac 	.word	0x0802d0ac
 8009cfc:	08009959 	.word	0x08009959
 8009d00:	200051d8 	.word	0x200051d8

08009d04 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b088      	sub	sp, #32
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	3b20      	subs	r3, #32
 8009d22:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	2200      	movs	r2, #0
 8009d28:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	887a      	ldrh	r2, [r7, #2]
 8009d34:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d103      	bne.n	8009d46 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	69fa      	ldr	r2, [r7, #28]
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	e003      	b.n	8009d4e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	69fa      	ldr	r2, [r7, #28]
 8009d52:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	61fb      	str	r3, [r7, #28]
 8009d5a:	e009      	b.n	8009d70 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	891a      	ldrh	r2, [r3, #8]
 8009d60:	887b      	ldrh	r3, [r7, #2]
 8009d62:	4413      	add	r3, r2
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	61fb      	str	r3, [r7, #28]
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1f2      	bne.n	8009d5c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009d76:	887b      	ldrh	r3, [r7, #2]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff fb4a 	bl	8009414 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009d80:	bf00      	nop
 8009d82:	3720      	adds	r7, #32
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f00b fc3d 	bl	8015610 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009d96:	bf00      	nop
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <LL_GPIO_SetOutputPin>:
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b083      	sub	sp, #12
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	619a      	str	r2, [r3, #24]
}
 8009dae:	bf00      	nop
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <LL_GPIO_ResetOutputPin>:
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b083      	sub	sp, #12
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	041a      	lsls	r2, r3, #16
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	619a      	str	r2, [r3, #24]
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <SN74HC595_Delay>:
#include "74HC595.h"

extern struct _bsp bsp;

void SN74HC595_Delay()
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8009ddc:	2001      	movs	r0, #1
 8009dde:	f7f8 fe37 	bl	8002a50 <HAL_Delay>
}
 8009de2:	bf00      	nop
 8009de4:	bd80      	pop	{r7, pc}
	...

08009de8 <SN74HC595_Init>:

//IO init
void SN74HC595_Init()
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
	uint8_t* shift_reg = &bsp.sn74hc595.shift_reg;
 8009dee:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <SN74HC595_Init+0x28>)
 8009df0:	607b      	str	r3, [r7, #4]

	shift_reg[SR0] = SR0_V_G1 | SR0_C_G1| SR0_V_AZ;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	222a      	movs	r2, #42	; 0x2a
 8009df6:	701a      	strb	r2, [r3, #0]
	shift_reg[SR1] = SR1_VMEAS_SEL | SR1_ATT_A0 | SR1_ATT_A1;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	221a      	movs	r2, #26
 8009dfe:	701a      	strb	r2, [r3, #0]
	SN74HC595_Update(shift_reg);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f807 	bl	8009e14 <SN74HC595_Update>

}
 8009e06:	bf00      	nop
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	200053bc 	.word	0x200053bc

08009e14 <SN74HC595_Update>:

void SN74HC595_Update(uint8_t* shift_reg)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
    int8_t i , j;
    LatchPinSet(LOW595);
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	f000 f84b 	bl	8009eb8 <LatchPinSet>
    shift_reg[0] ^=SR_INVERT_MASK;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	43db      	mvns	r3, r3
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	701a      	strb	r2, [r3, #0]
    shift_reg[1] ^=SR_INVERT_MASK;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3301      	adds	r3, #1
 8009e32:	781a      	ldrb	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3301      	adds	r3, #1
 8009e38:	43d2      	mvns	r2, r2
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	701a      	strb	r2, [r3, #0]

    //iterate through the registers
    for(i = number_of_registers- 1; i >=  0; i--)
 8009e3e:	2301      	movs	r3, #1
 8009e40:	73fb      	strb	r3, [r7, #15]
 8009e42:	e02c      	b.n	8009e9e <SN74HC595_Update+0x8a>
    {
        for(j = 8 - 1; j >=  0; j--)
 8009e44:	2307      	movs	r3, #7
 8009e46:	73bb      	strb	r3, [r7, #14]
 8009e48:	e01f      	b.n	8009e8a <SN74HC595_Update+0x76>
        {
            ClockPinSet(LOW595);
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f000 f84e 	bl	8009eec <ClockPinSet>
            int val = shift_reg[i] & (1 << j);
 8009e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	4413      	add	r3, r2
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e60:	2201      	movs	r2, #1
 8009e62:	fa02 f303 	lsl.w	r3, r2, r3
 8009e66:	400b      	ands	r3, r1
 8009e68:	60bb      	str	r3, [r7, #8]
            SerialDataPinSet((PinState595)val);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 f854 	bl	8009f1c <SerialDataPinSet>
			SN74HC595_Delay();
 8009e74:	f7ff ffb0 	bl	8009dd8 <SN74HC595_Delay>
            ClockPinSet(HIGH595);
 8009e78:	2001      	movs	r0, #1
 8009e7a:	f000 f837 	bl	8009eec <ClockPinSet>
        for(j = 8 - 1; j >=  0; j--)
 8009e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	3b01      	subs	r3, #1
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	73bb      	strb	r3, [r7, #14]
 8009e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	dadb      	bge.n	8009e4a <SN74HC595_Update+0x36>
    for(i = number_of_registers- 1; i >=  0; i--)
 8009e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	73fb      	strb	r3, [r7, #15]
 8009e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	dace      	bge.n	8009e44 <SN74HC595_Update+0x30>
        }
    }
		SN74HC595_Delay();
 8009ea6:	f7ff ff97 	bl	8009dd8 <SN74HC595_Delay>
		LatchPinSet(HIGH595);
 8009eaa:	2001      	movs	r0, #1
 8009eac:	f000 f804 	bl	8009eb8 <LatchPinSet>
}
 8009eb0:	bf00      	nop
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <LatchPinSet>:
void SN74HC595_Clear(uint8_t* shift_reg){
    SN74HC595_SetAll(LOW, shift_reg);
}

void LatchPinSet(PinState595 state)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	71fb      	strb	r3, [r7, #7]
	if(GPIO_PIN_RESET == state)
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d105      	bne.n	8009ed4 <LatchPinSet+0x1c>
	{
		LL_GPIO_ResetOutputPin(SR_LAT_GPIO_Port, SR_LAT_Pin);
 8009ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ecc:	4806      	ldr	r0, [pc, #24]	; (8009ee8 <LatchPinSet+0x30>)
 8009ece:	f7ff ff74 	bl	8009dba <LL_GPIO_ResetOutputPin>
	{
		LL_GPIO_SetOutputPin(SR_LAT_GPIO_Port, SR_LAT_Pin);
	}

   // HAL_GPIO_WritePin(SR_LAT_GPIO_Port, SR_LAT_Pin, (GPIO_PinState)state);
}
 8009ed2:	e004      	b.n	8009ede <LatchPinSet+0x26>
		LL_GPIO_SetOutputPin(SR_LAT_GPIO_Port, SR_LAT_Pin);
 8009ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ed8:	4803      	ldr	r0, [pc, #12]	; (8009ee8 <LatchPinSet+0x30>)
 8009eda:	f7ff ff60 	bl	8009d9e <LL_GPIO_SetOutputPin>
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	40020c00 	.word	0x40020c00

08009eec <ClockPinSet>:

void ClockPinSet(PinState595 state)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	71fb      	strb	r3, [r7, #7]
	if(GPIO_PIN_RESET == state)
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d104      	bne.n	8009f06 <ClockPinSet+0x1a>
	{
		LL_GPIO_ResetOutputPin(SR_CLK_GPIO_Port, SR_CLK_Pin);
 8009efc:	2104      	movs	r1, #4
 8009efe:	4806      	ldr	r0, [pc, #24]	; (8009f18 <ClockPinSet+0x2c>)
 8009f00:	f7ff ff5b 	bl	8009dba <LL_GPIO_ResetOutputPin>
	}else
	{
		LL_GPIO_SetOutputPin(SR_CLK_GPIO_Port, SR_CLK_Pin);
	}
   // HAL_GPIO_WritePin(SR_CLK_GPIO_Port, SR_CLK_Pin, (GPIO_PinState)state);
}
 8009f04:	e003      	b.n	8009f0e <ClockPinSet+0x22>
		LL_GPIO_SetOutputPin(SR_CLK_GPIO_Port, SR_CLK_Pin);
 8009f06:	2104      	movs	r1, #4
 8009f08:	4803      	ldr	r0, [pc, #12]	; (8009f18 <ClockPinSet+0x2c>)
 8009f0a:	f7ff ff48 	bl	8009d9e <LL_GPIO_SetOutputPin>
}
 8009f0e:	bf00      	nop
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	40021800 	.word	0x40021800

08009f1c <SerialDataPinSet>:

void SerialDataPinSet(PinState595 state)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	4603      	mov	r3, r0
 8009f24:	71fb      	strb	r3, [r7, #7]
	if(GPIO_PIN_RESET == state)
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d104      	bne.n	8009f36 <SerialDataPinSet+0x1a>
	{
		LL_GPIO_ResetOutputPin(SR_DAT_GPIO_Port, SR_DAT_Pin);
 8009f2c:	2108      	movs	r1, #8
 8009f2e:	4806      	ldr	r0, [pc, #24]	; (8009f48 <SerialDataPinSet+0x2c>)
 8009f30:	f7ff ff43 	bl	8009dba <LL_GPIO_ResetOutputPin>
	}else
	{
		LL_GPIO_SetOutputPin(SR_DAT_GPIO_Port, SR_DAT_Pin);
	}
   // HAL_GPIO_WritePin(SR_DAT_GPIO_Port, SR_DAT_Pin, (GPIO_PinState)state);
}
 8009f34:	e003      	b.n	8009f3e <SerialDataPinSet+0x22>
		LL_GPIO_SetOutputPin(SR_DAT_GPIO_Port, SR_DAT_Pin);
 8009f36:	2108      	movs	r1, #8
 8009f38:	4803      	ldr	r0, [pc, #12]	; (8009f48 <SerialDataPinSet+0x2c>)
 8009f3a:	f7ff ff30 	bl	8009d9e <LL_GPIO_SetOutputPin>
}
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	40021800 	.word	0x40021800

08009f4c <LL_GPIO_SetOutputPin>:
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	619a      	str	r2, [r3, #24]
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <LL_GPIO_ResetOutputPin>:
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	041a      	lsls	r2, r3, #16
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	619a      	str	r2, [r3, #24]
}
 8009f7a:	bf00      	nop
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
	...

08009f88 <AD5322_SetVOUTA>:
	AD5322_SetVOUTA(1.2);
	AD5322_SetVOUTB(0);
}

HAL_StatusTypeDef AD5322_SetVOUTA(float voltage)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	ed87 0a01 	vstr	s0, [r7, #4]
	float tmp =(voltage/AD5322_VOLTA_GAIN);
 8009f92:	ed97 7a01 	vldr	s14, [r7, #4]
 8009f96:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8009f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f9e:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t data = (uint16_t)(tmp/AD5322_VOUTA_LSB);
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f7f6 fb00 	bl	80005a8 <__aeabi_f2d>
 8009fa8:	f04f 0200 	mov.w	r2, #0
 8009fac:	4b0d      	ldr	r3, [pc, #52]	; (8009fe4 <AD5322_SetVOUTA+0x5c>)
 8009fae:	f7f6 fc7d 	bl	80008ac <__aeabi_ddiv>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	4619      	mov	r1, r3
 8009fba:	f7f6 fe25 	bl	8000c08 <__aeabi_d2uiz>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	817b      	strh	r3, [r7, #10]
	data = data & 0x0FFF;
 8009fc4:	897b      	ldrh	r3, [r7, #10]
 8009fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	817b      	strh	r3, [r7, #10]

	return AD5322_Send(&data);
 8009fce:	f107 030a 	add.w	r3, r7, #10
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 f85e 	bl	800a094 <AD5322_Send>
 8009fd8:	4603      	mov	r3, r0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	3f340000 	.word	0x3f340000

08009fe8 <AD5322_SetVOUTB>:

HAL_StatusTypeDef AD5322_SetVOUTB(float voltage)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	ed87 0a01 	vstr	s0, [r7, #4]

	float tmp = (voltage/AD5322_VOLTB_GAIN) + AD5322_VOLTB_REF/2 - AD5322_OFFSET_ERR;
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7f6 fad8 	bl	80005a8 <__aeabi_f2d>
 8009ff8:	a324      	add	r3, pc, #144	; (adr r3, 800a08c <AD5322_SetVOUTB+0xa4>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f7f6 fc55 	bl	80008ac <__aeabi_ddiv>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4610      	mov	r0, r2
 800a008:	4619      	mov	r1, r3
 800a00a:	f04f 0200 	mov.w	r2, #0
 800a00e:	4b1c      	ldr	r3, [pc, #112]	; (800a080 <AD5322_SetVOUTB+0x98>)
 800a010:	f7f6 f96c 	bl	80002ec <__adddf3>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4610      	mov	r0, r2
 800a01a:	4619      	mov	r1, r3
 800a01c:	a316      	add	r3, pc, #88	; (adr r3, 800a078 <AD5322_SetVOUTB+0x90>)
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	f7f6 f961 	bl	80002e8 <__aeabi_dsub>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	4610      	mov	r0, r2
 800a02c:	4619      	mov	r1, r3
 800a02e:	f7f6 fe0b 	bl	8000c48 <__aeabi_d2f>
 800a032:	4603      	mov	r3, r0
 800a034:	60fb      	str	r3, [r7, #12]
	uint16_t data = (uint16_t)(tmp/AD5322_VOUTB_LSB);
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7f6 fab6 	bl	80005a8 <__aeabi_f2d>
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	4b10      	ldr	r3, [pc, #64]	; (800a084 <AD5322_SetVOUTB+0x9c>)
 800a042:	f7f6 fc33 	bl	80008ac <__aeabi_ddiv>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4610      	mov	r0, r2
 800a04c:	4619      	mov	r1, r3
 800a04e:	f7f6 fddb 	bl	8000c08 <__aeabi_d2uiz>
 800a052:	4603      	mov	r3, r0
 800a054:	b29b      	uxth	r3, r3
 800a056:	817b      	strh	r3, [r7, #10]
	data |= AD5322_DACB_ENABLE;
 800a058:	897a      	ldrh	r2, [r7, #10]
 800a05a:	4b0b      	ldr	r3, [pc, #44]	; (800a088 <AD5322_SetVOUTB+0xa0>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	b29b      	uxth	r3, r3
 800a060:	817b      	strh	r3, [r7, #10]

	return AD5322_Send(&data);
 800a062:	f107 030a 	add.w	r3, r7, #10
 800a066:	4618      	mov	r0, r3
 800a068:	f000 f814 	bl	800a094 <AD5322_Send>
 800a06c:	4603      	mov	r3, r0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	47ae147b 	.word	0x47ae147b
 800a07c:	3f947ae1 	.word	0x3f947ae1
 800a080:	3ff40000 	.word	0x3ff40000
 800a084:	3f440000 	.word	0x3f440000
 800a088:	ffff8000 	.word	0xffff8000
 800a08c:	33333333 	.word	0x33333333
 800a090:	40233333 	.word	0x40233333

0800a094 <AD5322_Send>:

static HAL_StatusTypeDef AD5322_Send(uint16_t* data)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]

	LL_GPIO_ResetOutputPin(SPI5_NSS_GPIO_Port, SPI5_NSS_Pin);
 800a0a0:	2140      	movs	r1, #64	; 0x40
 800a0a2:	480f      	ldr	r0, [pc, #60]	; (800a0e0 <AD5322_Send+0x4c>)
 800a0a4:	f7ff ff60 	bl	8009f68 <LL_GPIO_ResetOutputPin>
	status = HAL_SPI_Transmit(&hspi5, (uint8_t*)data, 1, 1000);
 800a0a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	480c      	ldr	r0, [pc, #48]	; (800a0e4 <AD5322_Send+0x50>)
 800a0b2:	f7fd f874 	bl	800719e <HAL_SPI_Transmit>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]
	LL_GPIO_SetOutputPin(SPI5_NSS_GPIO_Port, SPI5_NSS_Pin);
 800a0ba:	2140      	movs	r1, #64	; 0x40
 800a0bc:	4808      	ldr	r0, [pc, #32]	; (800a0e0 <AD5322_Send+0x4c>)
 800a0be:	f7ff ff45 	bl	8009f4c <LL_GPIO_SetOutputPin>

	LL_GPIO_ResetOutputPin(DAC2_nLDAC_GPIO_Port, DAC2_nLDAC_Pin);
 800a0c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a0c6:	4808      	ldr	r0, [pc, #32]	; (800a0e8 <AD5322_Send+0x54>)
 800a0c8:	f7ff ff4e 	bl	8009f68 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(DAC2_nLDAC_GPIO_Port, DAC2_nLDAC_Pin);
 800a0cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a0d0:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <AD5322_Send+0x54>)
 800a0d2:	f7ff ff3b 	bl	8009f4c <LL_GPIO_SetOutputPin>

	return status;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	40021400 	.word	0x40021400
 800a0e4:	20000664 	.word	0x20000664
 800a0e8:	40021800 	.word	0x40021800

0800a0ec <LL_GPIO_SetOutputPin>:
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	619a      	str	r2, [r3, #24]
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <LL_GPIO_ResetOutputPin>:
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	041a      	lsls	r2, r3, #16
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	619a      	str	r2, [r3, #24]
}
 800a11a:	bf00      	nop
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
	...

0800a128 <AD7980_ReadData>:
extern struct _bsp bsp;

float* AD7980_RXDataToVoltage(uint16_t* rx_data);

HAL_StatusTypeDef AD7980_ReadData(uint16_t count)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	73fb      	strb	r3, [r7, #15]
	uint16_t adc_data[2] = {0x0000,0x00000};
 800a136:	2300      	movs	r3, #0
 800a138:	813b      	strh	r3, [r7, #8]
 800a13a:	2300      	movs	r3, #0
 800a13c:	817b      	strh	r3, [r7, #10]
	for(uint16_t x = 0; x < count; x++)
 800a13e:	2300      	movs	r3, #0
 800a140:	81bb      	strh	r3, [r7, #12]
 800a142:	e024      	b.n	800a18e <AD7980_ReadData+0x66>
	{
		LL_GPIO_SetOutputPin(SPI4_NSS_GPIO_Port, SPI4_NSS_Pin);
 800a144:	2110      	movs	r1, #16
 800a146:	4816      	ldr	r0, [pc, #88]	; (800a1a0 <AD7980_ReadData+0x78>)
 800a148:	f7ff ffd0 	bl	800a0ec <LL_GPIO_SetOutputPin>
		//status = HAL_SPI_Receive(&hspi4, (uint8_t*)adc_data, 2, 1000);
		status = HAL_SPI_Receive_DMA(&hspi4, (uint8_t*)adc_data, 2);
 800a14c:	f107 0308 	add.w	r3, r7, #8
 800a150:	2202      	movs	r2, #2
 800a152:	4619      	mov	r1, r3
 800a154:	4813      	ldr	r0, [pc, #76]	; (800a1a4 <AD7980_ReadData+0x7c>)
 800a156:	f7fd fcd3 	bl	8007b00 <HAL_SPI_Receive_DMA>
 800a15a:	4603      	mov	r3, r0
 800a15c:	73fb      	strb	r3, [r7, #15]
		LL_GPIO_ResetOutputPin(SPI4_NSS_GPIO_Port, SPI4_NSS_Pin);
 800a15e:	2110      	movs	r1, #16
 800a160:	480f      	ldr	r0, [pc, #60]	; (800a1a0 <AD7980_ReadData+0x78>)
 800a162:	f7ff ffd1 	bl	800a108 <LL_GPIO_ResetOutputPin>
		bsp.adc[AD7980_VOLT_CH].rx_data[x] = adc_data[AD7980_VOLT_CH];
 800a166:	89bb      	ldrh	r3, [r7, #12]
 800a168:	8939      	ldrh	r1, [r7, #8]
 800a16a:	4a0f      	ldr	r2, [pc, #60]	; (800a1a8 <AD7980_ReadData+0x80>)
 800a16c:	3364      	adds	r3, #100	; 0x64
 800a16e:	005b      	lsls	r3, r3, #1
 800a170:	4413      	add	r3, r2
 800a172:	460a      	mov	r2, r1
 800a174:	811a      	strh	r2, [r3, #8]
		bsp.adc[AD7980_CURR_CH].rx_data[x] = adc_data[AD7980_CURR_CH];
 800a176:	89bb      	ldrh	r3, [r7, #12]
 800a178:	8979      	ldrh	r1, [r7, #10]
 800a17a:	4a0b      	ldr	r2, [pc, #44]	; (800a1a8 <AD7980_ReadData+0x80>)
 800a17c:	f603 0365 	addw	r3, r3, #2149	; 0x865
 800a180:	005b      	lsls	r3, r3, #1
 800a182:	4413      	add	r3, r2
 800a184:	460a      	mov	r2, r1
 800a186:	811a      	strh	r2, [r3, #8]
	for(uint16_t x = 0; x < count; x++)
 800a188:	89bb      	ldrh	r3, [r7, #12]
 800a18a:	3301      	adds	r3, #1
 800a18c:	81bb      	strh	r3, [r7, #12]
 800a18e:	89ba      	ldrh	r2, [r7, #12]
 800a190:	88fb      	ldrh	r3, [r7, #6]
 800a192:	429a      	cmp	r2, r3
 800a194:	d3d6      	bcc.n	800a144 <AD7980_ReadData+0x1c>
	}

	return status;
 800a196:	7bfb      	ldrb	r3, [r7, #15]

}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	40021000 	.word	0x40021000
 800a1a4:	20000600 	.word	0x20000600
 800a1a8:	200052f0 	.word	0x200052f0

0800a1ac <LL_GPIO_SetOutputPin>:
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	619a      	str	r2, [r3, #24]
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <LL_GPIO_ResetOutputPin>:
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	041a      	lsls	r2, r3, #16
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	619a      	str	r2, [r3, #24]
}
 800a1da:	bf00      	nop
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
	...

0800a1e8 <SelectChip>:
uint16_t reg_config = 0x0000;

extern SPI_HandleTypeDef hspi3;

inline static void SelectChip()
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin);
 800a1ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1f0:	4802      	ldr	r0, [pc, #8]	; (800a1fc <SelectChip+0x14>)
 800a1f2:	f7ff ffe9 	bl	800a1c8 <LL_GPIO_ResetOutputPin>
}
 800a1f6:	bf00      	nop
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	40020000 	.word	0x40020000

0800a200 <ReleaseChip>:

inline static void ReleaseChip()
{
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin);
 800a204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a208:	4802      	ldr	r0, [pc, #8]	; (800a214 <ReleaseChip+0x14>)
 800a20a:	f7ff ffcf 	bl	800a1ac <LL_GPIO_SetOutputPin>
}
 800a20e:	bf00      	nop
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	40020000 	.word	0x40020000

0800a218 <SetBit>:

inline static void SetBit(uint16_t mask) {
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	80fb      	strh	r3, [r7, #6]
  reg_config |= mask;
 800a222:	4b06      	ldr	r3, [pc, #24]	; (800a23c <SetBit+0x24>)
 800a224:	881a      	ldrh	r2, [r3, #0]
 800a226:	88fb      	ldrh	r3, [r7, #6]
 800a228:	4313      	orrs	r3, r2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	4b03      	ldr	r3, [pc, #12]	; (800a23c <SetBit+0x24>)
 800a22e:	801a      	strh	r2, [r3, #0]
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	200052ec 	.word	0x200052ec

0800a240 <AD9834_Init>:
inline static void ClrBit(uint16_t mask) {
  reg_config &= (0xFFFF ^ mask);
}

BSP_StatusTypeDef AD9834_Init()
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
	BSP_StatusTypeDef status = BSP_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
	//SelectChip();
	uint16_t tx_data[7];

	SetBit(B28);
 800a24a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a24e:	f7ff ffe3 	bl	800a218 <SetBit>
	SetBit(RESET);
 800a252:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a256:	f7ff ffdf 	bl	800a218 <SetBit>

	tx_data[0] = reg_config;
 800a25a:	4b15      	ldr	r3, [pc, #84]	; (800a2b0 <AD9834_Init+0x70>)
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	803b      	strh	r3, [r7, #0]
	tx_data[1] = FREQ0_ADDR;
 800a260:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a264:	807b      	strh	r3, [r7, #2]
	tx_data[2] = FREQ0_ADDR;
 800a266:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a26a:	80bb      	strh	r3, [r7, #4]
	tx_data[3] = FREQ1_ADDR;
 800a26c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a270:	80fb      	strh	r3, [r7, #6]
	tx_data[4] = FREQ1_ADDR;
 800a272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a276:	813b      	strh	r3, [r7, #8]
	tx_data[5] = PHASE0_ADDR;
 800a278:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a27c:	817b      	strh	r3, [r7, #10]
	tx_data[6] = PHASE1_ADDR;
 800a27e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800a282:	81bb      	strh	r3, [r7, #12]

	SelectChip();
 800a284:	f7ff ffb0 	bl	800a1e8 <SelectChip>
	status = HAL_SPI_Transmit(&hspi3, (uint8_t*)tx_data, 7, SPI3_TIMEOUT);
 800a288:	4639      	mov	r1, r7
 800a28a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a28e:	2207      	movs	r2, #7
 800a290:	4808      	ldr	r0, [pc, #32]	; (800a2b4 <AD9834_Init+0x74>)
 800a292:	f7fc ff84 	bl	800719e <HAL_SPI_Transmit>
 800a296:	4603      	mov	r3, r0
 800a298:	73fb      	strb	r3, [r7, #15]
	ReleaseChip();
 800a29a:	f7ff ffb1 	bl	800a200 <ReleaseChip>
	HAL_Delay(20);
 800a29e:	2014      	movs	r0, #20
 800a2a0:	f7f8 fbd6 	bl	8002a50 <HAL_Delay>

	return status;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	200052ec 	.word	0x200052ec
 800a2b4:	2000059c 	.word	0x2000059c

0800a2b8 <LL_GPIO_SetOutputPin>:
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	619a      	str	r2, [r3, #24]
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <LL_GPIO_ResetOutputPin>:
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	041a      	lsls	r2, r3, #16
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	619a      	str	r2, [r3, #24]
}
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
	...

0800a2f4 <BSP_SPI1_Receive>:
static BSP_StatusTypeDef ADS8681_WriteHWORD(uint8_t* cmd, uint8_t* reg, uint16_t* data);
static BSP_StatusTypeDef ADS8681_ReadLSB(uint8_t* data);
static void ADS8681_ConvertionTime();

static BSP_StatusTypeDef BSP_SPI1_Receive(uint32_t* buffer, uint32_t size, uint32_t timeout)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
	uint16_t rx_tmp[4];

		HAL_SPI_Receive(&hspi1, rx_tmp, 4, 10000);
 800a300:	f107 0110 	add.w	r1, r7, #16
 800a304:	f242 7310 	movw	r3, #10000	; 0x2710
 800a308:	2204      	movs	r2, #4
 800a30a:	480b      	ldr	r0, [pc, #44]	; (800a338 <BSP_SPI1_Receive+0x44>)
 800a30c:	f7fd f8b5 	bl	800747a <HAL_SPI_Receive>
		buffer[0] = rx_tmp[0] << 16 | rx_tmp[1];
 800a310:	8a3b      	ldrh	r3, [r7, #16]
 800a312:	041b      	lsls	r3, r3, #16
 800a314:	8a7a      	ldrh	r2, [r7, #18]
 800a316:	4313      	orrs	r3, r2
 800a318:	461a      	mov	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	601a      	str	r2, [r3, #0]
		buffer[1] = rx_tmp[2] << 16 | rx_tmp[3];
 800a31e:	8abb      	ldrh	r3, [r7, #20]
 800a320:	041b      	lsls	r3, r3, #16
 800a322:	8afa      	ldrh	r2, [r7, #22]
 800a324:	431a      	orrs	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3304      	adds	r3, #4
 800a32a:	601a      	str	r2, [r3, #0]

    return BSP_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3718      	adds	r7, #24
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	200004d4 	.word	0x200004d4

0800a33c <BSP_SPI1_Transmit>:

static BSP_StatusTypeDef BSP_SPI1_Transmit(uint32_t* buffer, uint32_t size, uint32_t timeout)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
	uint16_t tx_tmp[4];
	tx_tmp[0] = (uint16_t) buffer[0];
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	823b      	strh	r3, [r7, #16]
	tx_tmp[1] = (uint16_t)(buffer[0] >> 16);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	0c1b      	lsrs	r3, r3, #16
 800a356:	b29b      	uxth	r3, r3
 800a358:	827b      	strh	r3, [r7, #18]
	tx_tmp[2] = (uint16_t) buffer[1];
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3304      	adds	r3, #4
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	b29b      	uxth	r3, r3
 800a362:	82bb      	strh	r3, [r7, #20]
	tx_tmp[3] = (uint16_t)(buffer[1] >> 16);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3304      	adds	r3, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	0c1b      	lsrs	r3, r3, #16
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	82fb      	strh	r3, [r7, #22]

	HAL_SPI_Transmit(&hspi1, tx_tmp, 4, 10000);
 800a370:	f107 0110 	add.w	r1, r7, #16
 800a374:	f242 7310 	movw	r3, #10000	; 0x2710
 800a378:	2204      	movs	r2, #4
 800a37a:	4804      	ldr	r0, [pc, #16]	; (800a38c <BSP_SPI1_Transmit+0x50>)
 800a37c:	f7fc ff0f 	bl	800719e <HAL_SPI_Transmit>

    return BSP_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	200004d4 	.word	0x200004d4

0800a390 <ADS8681_Init>:

}


BSP_StatusTypeDef ADS8681_Init()
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
	BSP_StatusTypeDef status = BSP_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	71fb      	strb	r3, [r7, #7]
	uint8_t range[2] = {0,0};
 800a39a:	2300      	movs	r3, #0
 800a39c:	80bb      	strh	r3, [r7, #4]

	status = ADS8681_SetID();
 800a39e:	f000 f87d 	bl	800a49c <ADS8681_SetID>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	71fb      	strb	r3, [r7, #7]
	if(BSP_OK != status) return status;
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <ADS8681_Init+0x20>
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
 800a3ae:	e01f      	b.n	800a3f0 <ADS8681_Init+0x60>

	range[0] = bsp.ads8681[0].range = ADS8681_RANGE_3VREF;
 800a3b0:	4b11      	ldr	r3, [pc, #68]	; (800a3f8 <ADS8681_Init+0x68>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 800a3b8:	4b0f      	ldr	r3, [pc, #60]	; (800a3f8 <ADS8681_Init+0x68>)
 800a3ba:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800a3be:	713b      	strb	r3, [r7, #4]
	range[1] = bsp.ads8681[1].range = ADS8681_RANGE_3VREF;
 800a3c0:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <ADS8681_Init+0x68>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800a3c8:	4b0b      	ldr	r3, [pc, #44]	; (800a3f8 <ADS8681_Init+0x68>)
 800a3ca:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800a3ce:	717b      	strb	r3, [r7, #5]

	status = ADS8681_SetDataOutput();
 800a3d0:	f000 f814 	bl	800a3fc <ADS8681_SetDataOutput>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	71fb      	strb	r3, [r7, #7]
	if(BSP_OK != status) return status;
 800a3d8:	79fb      	ldrb	r3, [r7, #7]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <ADS8681_Init+0x52>
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	e006      	b.n	800a3f0 <ADS8681_Init+0x60>

	status = ADS8681_SetRange(range);
 800a3e2:	1d3b      	adds	r3, r7, #4
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 f827 	bl	800a438 <ADS8681_SetRange>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	71fb      	strb	r3, [r7, #7]

	return status;
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	200052f0 	.word	0x200052f0

0800a3fc <ADS8681_SetDataOutput>:

static BSP_StatusTypeDef ADS8681_SetDataOutput()
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0

	uint8_t cmd[2];
	uint8_t reg[2];
	uint16_t tx_hword[2];

	cmd[0] = WRITE_HWORD;
 800a402:	23d0      	movs	r3, #208	; 0xd0
 800a404:	733b      	strb	r3, [r7, #12]
	cmd[1] = WRITE_HWORD;
 800a406:	23d0      	movs	r3, #208	; 0xd0
 800a408:	737b      	strb	r3, [r7, #13]

	reg[0] = DATAOUT_CTL_REG;
 800a40a:	2310      	movs	r3, #16
 800a40c:	723b      	strb	r3, [r7, #8]
	reg[1] = DATAOUT_CTL_REG;
 800a40e:	2310      	movs	r3, #16
 800a410:	727b      	strb	r3, [r7, #9]

	tx_hword[0] = 0x7D08;
 800a412:	f647 5308 	movw	r3, #32008	; 0x7d08
 800a416:	80bb      	strh	r3, [r7, #4]
	tx_hword[1] = 0x7D08;
 800a418:	f647 5308 	movw	r3, #32008	; 0x7d08
 800a41c:	80fb      	strh	r3, [r7, #6]

	return ADS8681_WriteHWORD(cmd, reg, tx_hword);
 800a41e:	1d3a      	adds	r2, r7, #4
 800a420:	f107 0108 	add.w	r1, r7, #8
 800a424:	f107 030c 	add.w	r3, r7, #12
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 f8d9 	bl	800a5e0 <ADS8681_WriteHWORD>
 800a42e:	4603      	mov	r3, r0

}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <ADS8681_SetRange>:


BSP_StatusTypeDef ADS8681_SetRange(uint8_t* range)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
	BSP_StatusTypeDef status = BSP_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[2]={0,0};
 800a444:	2300      	movs	r3, #0
 800a446:	82bb      	strh	r3, [r7, #20]
	uint8_t reg[2]={0,0};
 800a448:	2300      	movs	r3, #0
 800a44a:	823b      	strh	r3, [r7, #16]
	uint8_t tx_data[2]={0,0};
 800a44c:	2300      	movs	r3, #0
 800a44e:	81bb      	strh	r3, [r7, #12]

	cmd[0] = WRITE_LSB;
 800a450:	23d4      	movs	r3, #212	; 0xd4
 800a452:	753b      	strb	r3, [r7, #20]
	cmd[1] = WRITE_LSB;
 800a454:	23d4      	movs	r3, #212	; 0xd4
 800a456:	757b      	strb	r3, [r7, #21]

	reg[0] = RANGE_SEL_REG;
 800a458:	2314      	movs	r3, #20
 800a45a:	743b      	strb	r3, [r7, #16]
	reg[1] = RANGE_SEL_REG;
 800a45c:	2314      	movs	r3, #20
 800a45e:	747b      	strb	r3, [r7, #17]

	tx_data[1] = range[1];
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	785b      	ldrb	r3, [r3, #1]
 800a464:	737b      	strb	r3, [r7, #13]
	tx_data[0] = range[0];
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	733b      	strb	r3, [r7, #12]

	status = ADS8681_WriteLSB(cmd, reg, tx_data);
 800a46c:	f107 020c 	add.w	r2, r7, #12
 800a470:	f107 0110 	add.w	r1, r7, #16
 800a474:	f107 0314 	add.w	r3, r7, #20
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 f8ef 	bl	800a65c <ADS8681_WriteLSB>
 800a47e:	4603      	mov	r3, r0
 800a480:	75fb      	strb	r3, [r7, #23]
	if(BSP_OK != status){return status;}
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <ADS8681_SetRange+0x54>
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	e003      	b.n	800a494 <ADS8681_SetRange+0x5c>

	DWT_Delay_us(10);
 800a48c:	200a      	movs	r0, #10
 800a48e:	f000 fa85 	bl	800a99c <DWT_Delay_us>

	return status;
 800a492:	7dfb      	ldrb	r3, [r7, #23]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <ADS8681_SetID>:

static BSP_StatusTypeDef ADS8681_SetID()
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
	uint8_t cmd[2]={0,0};
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	81bb      	strh	r3, [r7, #12]
	uint8_t reg[2]={0,0};
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	813b      	strh	r3, [r7, #8]
	uint8_t tx_data[2]={0,0};
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	80bb      	strh	r3, [r7, #4]
	uint8_t rx_data[2]={0,0};
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	803b      	strh	r3, [r7, #0]

	BSP_StatusTypeDef status = BSP_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	73bb      	strb	r3, [r7, #14]

	cmd[0] = WRITE_LSB;
 800a4b6:	23d4      	movs	r3, #212	; 0xd4
 800a4b8:	733b      	strb	r3, [r7, #12]
	cmd[1] = WRITE_LSB;
 800a4ba:	23d4      	movs	r3, #212	; 0xd4
 800a4bc:	737b      	strb	r3, [r7, #13]

	reg[0] = DEVICE_ID_REG + 0x02;
 800a4be:	2302      	movs	r3, #2
 800a4c0:	723b      	strb	r3, [r7, #8]
	reg[1] = DEVICE_ID_REG + 0x02;
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	727b      	strb	r3, [r7, #9]

	tx_data[1] = ADS8681_ID1;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	717b      	strb	r3, [r7, #5]
	tx_data[0] = ADS8681_ID2;
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	713b      	strb	r3, [r7, #4]

	status = ADS8681_WriteLSB(cmd, reg, tx_data);
 800a4ce:	1d3a      	adds	r2, r7, #4
 800a4d0:	f107 0108 	add.w	r1, r7, #8
 800a4d4:	f107 030c 	add.w	r3, r7, #12
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 f8bf 	bl	800a65c <ADS8681_WriteLSB>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	73bb      	strb	r3, [r7, #14]
	if(BSP_OK != status) return status;
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <ADS8681_SetID+0x50>
 800a4e8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ea:	e047      	b.n	800a57c <ADS8681_SetID+0xe0>

	HAL_Delay(1);
 800a4ec:	2001      	movs	r0, #1
 800a4ee:	f7f8 faaf 	bl	8002a50 <HAL_Delay>

	cmd[0] = READ_BYTE;
 800a4f2:	2348      	movs	r3, #72	; 0x48
 800a4f4:	733b      	strb	r3, [r7, #12]
	cmd[1] = READ_BYTE;
 800a4f6:	2348      	movs	r3, #72	; 0x48
 800a4f8:	737b      	strb	r3, [r7, #13]

	reg[0] = DEVICE_ID_REG + 0x02;
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	723b      	strb	r3, [r7, #8]
	reg[1] = DEVICE_ID_REG + 0x02;
 800a4fe:	2302      	movs	r3, #2
 800a500:	727b      	strb	r3, [r7, #9]

	tx_data[0] = 0x00;
 800a502:	2300      	movs	r3, #0
 800a504:	713b      	strb	r3, [r7, #4]
	tx_data[1] = 0x00;
 800a506:	2300      	movs	r3, #0
 800a508:	717b      	strb	r3, [r7, #5]

	status = ADS8681_WriteLSB(cmd, reg, tx_data);
 800a50a:	1d3a      	adds	r2, r7, #4
 800a50c:	f107 0108 	add.w	r1, r7, #8
 800a510:	f107 030c 	add.w	r3, r7, #12
 800a514:	4618      	mov	r0, r3
 800a516:	f000 f8a1 	bl	800a65c <ADS8681_WriteLSB>
 800a51a:	4603      	mov	r3, r0
 800a51c:	73bb      	strb	r3, [r7, #14]
	if(BSP_OK != status) return status;
 800a51e:	7bbb      	ldrb	r3, [r7, #14]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <ADS8681_SetID+0x8c>
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	e029      	b.n	800a57c <ADS8681_SetID+0xe0>

	HAL_Delay(1);
 800a528:	2001      	movs	r0, #1
 800a52a:	f7f8 fa91 	bl	8002a50 <HAL_Delay>

	status = ADS8681_ReadLSB(rx_data);
 800a52e:	463b      	mov	r3, r7
 800a530:	4618      	mov	r0, r3
 800a532:	f000 f827 	bl	800a584 <ADS8681_ReadLSB>
 800a536:	4603      	mov	r3, r0
 800a538:	73bb      	strb	r3, [r7, #14]
	if(BSP_OK != status) return status;
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <ADS8681_SetID+0xa8>
 800a540:	7bbb      	ldrb	r3, [r7, #14]
 800a542:	e01b      	b.n	800a57c <ADS8681_SetID+0xe0>

	tx_data[1] = ADS8681_ID1;
 800a544:	2301      	movs	r3, #1
 800a546:	717b      	strb	r3, [r7, #5]
	tx_data[0] = ADS8681_ID2;
 800a548:	2302      	movs	r3, #2
 800a54a:	713b      	strb	r3, [r7, #4]

	for (uint8_t x = 0; x < 2; x++)
 800a54c:	2300      	movs	r3, #0
 800a54e:	73fb      	strb	r3, [r7, #15]
 800a550:	e010      	b.n	800a574 <ADS8681_SetID+0xd8>
	{
		if(rx_data[x] != tx_data[x])
 800a552:	7bfb      	ldrb	r3, [r7, #15]
 800a554:	3310      	adds	r3, #16
 800a556:	443b      	add	r3, r7
 800a558:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
 800a55e:	3310      	adds	r3, #16
 800a560:	443b      	add	r3, r7
 800a562:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a566:	429a      	cmp	r2, r3
 800a568:	d001      	beq.n	800a56e <ADS8681_SetID+0xd2>
		{
			return BSP_ADC_CONFIG_ERROR;
 800a56a:	2304      	movs	r3, #4
 800a56c:	e006      	b.n	800a57c <ADS8681_SetID+0xe0>
	for (uint8_t x = 0; x < 2; x++)
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
 800a570:	3301      	adds	r3, #1
 800a572:	73fb      	strb	r3, [r7, #15]
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d9eb      	bls.n	800a552 <ADS8681_SetID+0xb6>
		}
	}

	return BSP_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <ADS8681_ReadLSB>:


static BSP_StatusTypeDef ADS8681_ReadLSB(uint8_t* data)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]

	BSP_StatusTypeDef status = BSP_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	75fb      	strb	r3, [r7, #23]
	uint32_t rx_data[2] = {0x00000000,0x00000000};
 800a590:	2300      	movs	r3, #0
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	2300      	movs	r3, #0
 800a596:	613b      	str	r3, [r7, #16]

	LL_GPIO_ResetOutputPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
 800a598:	2110      	movs	r1, #16
 800a59a:	4810      	ldr	r0, [pc, #64]	; (800a5dc <ADS8681_ReadLSB+0x58>)
 800a59c:	f7ff fe9a 	bl	800a2d4 <LL_GPIO_ResetOutputPin>
	//status = HAL_SPI_Receive(&hspi3, (uint8_t*)rx_data, 2, 1000);
	status = BSP_SPI1_Receive(rx_data, 2,10000);
 800a5a0:	f107 030c 	add.w	r3, r7, #12
 800a5a4:	f242 7210 	movw	r2, #10000	; 0x2710
 800a5a8:	2102      	movs	r1, #2
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7ff fea2 	bl	800a2f4 <BSP_SPI1_Receive>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	75fb      	strb	r3, [r7, #23]
	LL_GPIO_SetOutputPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
 800a5b4:	2110      	movs	r1, #16
 800a5b6:	4809      	ldr	r0, [pc, #36]	; (800a5dc <ADS8681_ReadLSB+0x58>)
 800a5b8:	f7ff fe7e 	bl	800a2b8 <LL_GPIO_SetOutputPin>


	data[0] = rx_data[0] >> 24;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	0e1b      	lsrs	r3, r3, #24
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	701a      	strb	r2, [r3, #0]
	data[1] = rx_data[1] >> 24;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	0e1a      	lsrs	r2, r3, #24
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	701a      	strb	r2, [r3, #0]

	return status;
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]

}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	40020000 	.word	0x40020000

0800a5e0 <ADS8681_WriteHWORD>:

static BSP_StatusTypeDef ADS8681_WriteHWORD(uint8_t* cmd, uint8_t* reg, uint16_t* data)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]

	BSP_StatusTypeDef status = BSP_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	77fb      	strb	r3, [r7, #31]
	uint32_t tx_data[2] = {0x00000000,0x00000000};
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	61bb      	str	r3, [r7, #24]

	tx_data[0] = cmd[0] << 24 | reg[0] << 16 | (data[0] & 0x0000FFFF);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	061a      	lsls	r2, r3, #24
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	041b      	lsls	r3, r3, #16
 800a604:	4313      	orrs	r3, r2
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	8812      	ldrh	r2, [r2, #0]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	617b      	str	r3, [r7, #20]
	tx_data[1] = cmd[1] << 24 | reg[1] << 16 | (data[1] & 0x0000FFFF);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3301      	adds	r3, #1
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	061a      	lsls	r2, r3, #24
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	3301      	adds	r3, #1
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	041b      	lsls	r3, r3, #16
 800a61e:	4313      	orrs	r3, r2
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	3202      	adds	r2, #2
 800a624:	8812      	ldrh	r2, [r2, #0]
 800a626:	4313      	orrs	r3, r2
 800a628:	61bb      	str	r3, [r7, #24]

	LL_GPIO_ResetOutputPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
 800a62a:	2110      	movs	r1, #16
 800a62c:	480a      	ldr	r0, [pc, #40]	; (800a658 <ADS8681_WriteHWORD+0x78>)
 800a62e:	f7ff fe51 	bl	800a2d4 <LL_GPIO_ResetOutputPin>
	//status = HAL_SPI_Transmit(&hspi3, (uint8_t*)tx_data, 2, 1000);
	status = BSP_SPI1_Transmit(tx_data, 2, 10000);
 800a632:	f107 0314 	add.w	r3, r7, #20
 800a636:	f242 7210 	movw	r2, #10000	; 0x2710
 800a63a:	2102      	movs	r1, #2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff fe7d 	bl	800a33c <BSP_SPI1_Transmit>
 800a642:	4603      	mov	r3, r0
 800a644:	77fb      	strb	r3, [r7, #31]
	LL_GPIO_SetOutputPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
 800a646:	2110      	movs	r1, #16
 800a648:	4803      	ldr	r0, [pc, #12]	; (800a658 <ADS8681_WriteHWORD+0x78>)
 800a64a:	f7ff fe35 	bl	800a2b8 <LL_GPIO_SetOutputPin>

	return status;
 800a64e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3720      	adds	r7, #32
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	40020000 	.word	0x40020000

0800a65c <ADS8681_WriteLSB>:
	return status;
}
*/

static BSP_StatusTypeDef ADS8681_WriteLSB(uint8_t* cmd, uint8_t* reg, uint8_t* data)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]

	BSP_StatusTypeDef status = BSP_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	77fb      	strb	r3, [r7, #31]
	uint32_t tx_data[2] = {0x00000000,0x00000000};
 800a66c:	2300      	movs	r3, #0
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	2300      	movs	r3, #0
 800a672:	61bb      	str	r3, [r7, #24]

	tx_data[0] = cmd[0] << 24 | reg[0] << 16 | (data[0] & 0x000000FF);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	061a      	lsls	r2, r3, #24
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	041b      	lsls	r3, r3, #16
 800a680:	4313      	orrs	r3, r2
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	7812      	ldrb	r2, [r2, #0]
 800a686:	4313      	orrs	r3, r2
 800a688:	617b      	str	r3, [r7, #20]
	tx_data[1] = cmd[1] << 24 | reg[1] << 16 | (data[1] & 0x000000FF);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3301      	adds	r3, #1
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	061a      	lsls	r2, r3, #24
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	3301      	adds	r3, #1
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	041b      	lsls	r3, r3, #16
 800a69a:	4313      	orrs	r3, r2
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	3201      	adds	r2, #1
 800a6a0:	7812      	ldrb	r2, [r2, #0]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	61bb      	str	r3, [r7, #24]

	LL_GPIO_ResetOutputPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
 800a6a6:	2110      	movs	r1, #16
 800a6a8:	480a      	ldr	r0, [pc, #40]	; (800a6d4 <ADS8681_WriteLSB+0x78>)
 800a6aa:	f7ff fe13 	bl	800a2d4 <LL_GPIO_ResetOutputPin>
	//status = HAL_SPI_Transmit(&hspi3, (uint8_t*)tx_data, 2, 1000);
	status = BSP_SPI1_Transmit(tx_data, 2, 10000);
 800a6ae:	f107 0314 	add.w	r3, r7, #20
 800a6b2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a6b6:	2102      	movs	r1, #2
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7ff fe3f 	bl	800a33c <BSP_SPI1_Transmit>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	77fb      	strb	r3, [r7, #31]
	LL_GPIO_SetOutputPin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin);
 800a6c2:	2110      	movs	r1, #16
 800a6c4:	4803      	ldr	r0, [pc, #12]	; (800a6d4 <ADS8681_WriteLSB+0x78>)
 800a6c6:	f7ff fdf7 	bl	800a2b8 <LL_GPIO_SetOutputPin>

	return status;
 800a6ca:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3720      	adds	r7, #32
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	40020000 	.word	0x40020000

0800a6d8 <LL_GPIO_SetOutputPin>:
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	619a      	str	r2, [r3, #24]
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <LL_GPIO_ResetOutputPin>:
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	041a      	lsls	r2, r3, #16
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	619a      	str	r2, [r3, #24]
}
 800a706:	bf00      	nop
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
	...

0800a714 <DAC8565_Init>:
static HAL_StatusTypeDef DAC8565_SetOneChannel(DAC8565_ChannelSelect channel, float voltage);
static HAL_StatusTypeDef DAC8565_SetAllChannels(float voltage);
static HAL_StatusTypeDef DAC8565_DisableInteralReference();

void DAC8565_Init()
{
 800a714:	b580      	push	{r7, lr}
 800a716:	af00      	add	r7, sp, #0
	DAC8565_DisableInteralReference();
 800a718:	f000 f8f4 	bl	800a904 <DAC8565_DisableInteralReference>
	DAC8565_SetVOUT(VOUTA, 0.0);
 800a71c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800a748 <DAC8565_Init+0x34>
 800a720:	2000      	movs	r0, #0
 800a722:	f000 f813 	bl	800a74c <DAC8565_SetVOUT>
	DAC8565_SetVOUT(VOUTB, 0.0);
 800a726:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800a748 <DAC8565_Init+0x34>
 800a72a:	2001      	movs	r0, #1
 800a72c:	f000 f80e 	bl	800a74c <DAC8565_SetVOUT>
	DAC8565_SetVOUT(VOUTC, 0.5);
 800a730:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800a734:	2002      	movs	r0, #2
 800a736:	f000 f809 	bl	800a74c <DAC8565_SetVOUT>
	DAC8565_SetVOUT(VOUTD, 0.5);
 800a73a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800a73e:	2003      	movs	r0, #3
 800a740:	f000 f804 	bl	800a74c <DAC8565_SetVOUT>
}
 800a744:	bf00      	nop
 800a746:	bd80      	pop	{r7, pc}
 800a748:	00000000 	.word	0x00000000

0800a74c <DAC8565_SetVOUT>:

HAL_StatusTypeDef DAC8565_SetVOUT(DAC8565_ChannelSelect channel, float voltage)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	ed87 0a00 	vstr	s0, [r7]
 800a758:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73fb      	strb	r3, [r7, #15]

	switch (channel)
 800a75e:	79fb      	ldrb	r3, [r7, #7]
 800a760:	2b03      	cmp	r3, #3
 800a762:	dc02      	bgt.n	800a76a <DAC8565_SetVOUT+0x1e>
 800a764:	2b00      	cmp	r3, #0
 800a766:	da03      	bge.n	800a770 <DAC8565_SetVOUT+0x24>
 800a768:	e012      	b.n	800a790 <DAC8565_SetVOUT+0x44>
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	d009      	beq.n	800a782 <DAC8565_SetVOUT+0x36>
 800a76e:	e00f      	b.n	800a790 <DAC8565_SetVOUT+0x44>
	{
		case VOUTA:
		case VOUTB:
		case VOUTC:
		case VOUTD: status = DAC8565_SetOneChannel(channel, voltage); break;
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	ed97 0a00 	vldr	s0, [r7]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 f812 	bl	800a7a0 <DAC8565_SetOneChannel>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73fb      	strb	r3, [r7, #15]
 800a780:	e006      	b.n	800a790 <DAC8565_SetVOUT+0x44>
		case ALL: status = DAC8565_SetAllChannels(voltage); break;
 800a782:	ed97 0a00 	vldr	s0, [r7]
 800a786:	f000 f873 	bl	800a870 <DAC8565_SetAllChannels>
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]
 800a78e:	bf00      	nop
	}

	return status;
 800a790:	7bfb      	ldrb	r3, [r7, #15]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	0000      	movs	r0, r0
 800a79c:	0000      	movs	r0, r0
	...

0800a7a0 <DAC8565_SetOneChannel>:

static HAL_StatusTypeDef DAC8565_SetOneChannel(DAC8565_ChannelSelect channel, float voltage)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	ed87 0a00 	vstr	s0, [r7]
 800a7ac:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]
	uint8_t spi_data[3] = {0x00};
 800a7b2:	4b2b      	ldr	r3, [pc, #172]	; (800a860 <DAC8565_SetOneChannel+0xc0>)
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	813b      	strh	r3, [r7, #8]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	72bb      	strb	r3, [r7, #10]

	uint16_t data = (uint16_t)(voltage/DAC8565_VOUT_LSB);
 800a7bc:	6838      	ldr	r0, [r7, #0]
 800a7be:	f7f5 fef3 	bl	80005a8 <__aeabi_f2d>
 800a7c2:	a325      	add	r3, pc, #148	; (adr r3, 800a858 <DAC8565_SetOneChannel+0xb8>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f7f6 f870 	bl	80008ac <__aeabi_ddiv>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4610      	mov	r0, r2
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	f7f6 fa18 	bl	8000c08 <__aeabi_d2uiz>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	81bb      	strh	r3, [r7, #12]

	switch(channel)
 800a7dc:	79fb      	ldrb	r3, [r7, #7]
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d818      	bhi.n	800a814 <DAC8565_SetOneChannel+0x74>
 800a7e2:	a201      	add	r2, pc, #4	; (adr r2, 800a7e8 <DAC8565_SetOneChannel+0x48>)
 800a7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e8:	0800a7fd 	.word	0x0800a7fd
 800a7ec:	0800a803 	.word	0x0800a803
 800a7f0:	0800a809 	.word	0x0800a809
 800a7f4:	0800a80f 	.word	0x0800a80f
 800a7f8:	0800a815 	.word	0x0800a815
	{
		case VOUTA: spi_data[0] = DAC8565_VOUTA; break;
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	723b      	strb	r3, [r7, #8]
 800a800:	e008      	b.n	800a814 <DAC8565_SetOneChannel+0x74>
		case VOUTB: spi_data[0] = DAC8565_VOUTB; break;
 800a802:	2312      	movs	r3, #18
 800a804:	723b      	strb	r3, [r7, #8]
 800a806:	e005      	b.n	800a814 <DAC8565_SetOneChannel+0x74>
		case VOUTC: spi_data[0] = DAC8565_VOUTC; break;
 800a808:	2314      	movs	r3, #20
 800a80a:	723b      	strb	r3, [r7, #8]
 800a80c:	e002      	b.n	800a814 <DAC8565_SetOneChannel+0x74>
		case VOUTD: spi_data[0] = DAC8565_VOUTD; break;
 800a80e:	2316      	movs	r3, #22
 800a810:	723b      	strb	r3, [r7, #8]
 800a812:	bf00      	nop
		case ALL: /* do nothing */ ;break;
	}

	spi_data[1] = (uint8_t)(data >> 8);
 800a814:	89bb      	ldrh	r3, [r7, #12]
 800a816:	0a1b      	lsrs	r3, r3, #8
 800a818:	b29b      	uxth	r3, r3
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	727b      	strb	r3, [r7, #9]
	spi_data[2] = (uint8_t)(data & 0xFF);
 800a81e:	89bb      	ldrh	r3, [r7, #12]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	72bb      	strb	r3, [r7, #10]

	LL_GPIO_ResetOutputPin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 800a824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a828:	480e      	ldr	r0, [pc, #56]	; (800a864 <DAC8565_SetOneChannel+0xc4>)
 800a82a:	f7ff ff63 	bl	800a6f4 <LL_GPIO_ResetOutputPin>
	status = HAL_SPI_Transmit(&hspi2, spi_data, 3, 1000);
 800a82e:	f107 0108 	add.w	r1, r7, #8
 800a832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a836:	2203      	movs	r2, #3
 800a838:	480b      	ldr	r0, [pc, #44]	; (800a868 <DAC8565_SetOneChannel+0xc8>)
 800a83a:	f7fc fcb0 	bl	800719e <HAL_SPI_Transmit>
 800a83e:	4603      	mov	r3, r0
 800a840:	73fb      	strb	r3, [r7, #15]
	LL_GPIO_SetOutputPin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 800a842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a846:	4807      	ldr	r0, [pc, #28]	; (800a864 <DAC8565_SetOneChannel+0xc4>)
 800a848:	f7ff ff46 	bl	800a6d8 <LL_GPIO_SetOutputPin>
	return status;
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	d2f1a9fc 	.word	0xd2f1a9fc
 800a85c:	3f10624d 	.word	0x3f10624d
 800a860:	08028ee8 	.word	0x08028ee8
 800a864:	40020400 	.word	0x40020400
 800a868:	20000538 	.word	0x20000538
 800a86c:	00000000 	.word	0x00000000

0800a870 <DAC8565_SetAllChannels>:

static HAL_StatusTypeDef DAC8565_SetAllChannels(float voltage)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73fb      	strb	r3, [r7, #15]
	uint8_t spi_data[3] = {0x00};
 800a87e:	4b1e      	ldr	r3, [pc, #120]	; (800a8f8 <DAC8565_SetAllChannels+0x88>)
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	813b      	strh	r3, [r7, #8]
 800a884:	2300      	movs	r3, #0
 800a886:	72bb      	strb	r3, [r7, #10]

	uint16_t data = (uint16_t)(voltage/DAC8565_VOUT_LSB);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7f5 fe8d 	bl	80005a8 <__aeabi_f2d>
 800a88e:	a318      	add	r3, pc, #96	; (adr r3, 800a8f0 <DAC8565_SetAllChannels+0x80>)
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	f7f6 f80a 	bl	80008ac <__aeabi_ddiv>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4610      	mov	r0, r2
 800a89e:	4619      	mov	r1, r3
 800a8a0:	f7f6 f9b2 	bl	8000c08 <__aeabi_d2uiz>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	81bb      	strh	r3, [r7, #12]

	spi_data[0] = DAC8565_VOUTALL;
 800a8a8:	2334      	movs	r3, #52	; 0x34
 800a8aa:	723b      	strb	r3, [r7, #8]
	spi_data[1] = (uint8_t)(data >> 8);
 800a8ac:	89bb      	ldrh	r3, [r7, #12]
 800a8ae:	0a1b      	lsrs	r3, r3, #8
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	727b      	strb	r3, [r7, #9]
	spi_data[2] = (uint8_t)(data & 0xFF);
 800a8b6:	89bb      	ldrh	r3, [r7, #12]
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	72bb      	strb	r3, [r7, #10]

	LL_GPIO_ResetOutputPin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 800a8bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8c0:	480e      	ldr	r0, [pc, #56]	; (800a8fc <DAC8565_SetAllChannels+0x8c>)
 800a8c2:	f7ff ff17 	bl	800a6f4 <LL_GPIO_ResetOutputPin>
	status = HAL_SPI_Transmit(&hspi2, (uint8_t*)spi_data, 3, 1000);
 800a8c6:	f107 0108 	add.w	r1, r7, #8
 800a8ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	480b      	ldr	r0, [pc, #44]	; (800a900 <DAC8565_SetAllChannels+0x90>)
 800a8d2:	f7fc fc64 	bl	800719e <HAL_SPI_Transmit>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	73fb      	strb	r3, [r7, #15]
	LL_GPIO_SetOutputPin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 800a8da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8de:	4807      	ldr	r0, [pc, #28]	; (800a8fc <DAC8565_SetAllChannels+0x8c>)
 800a8e0:	f7ff fefa 	bl	800a6d8 <LL_GPIO_SetOutputPin>

	return status;
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	d2f1a9fc 	.word	0xd2f1a9fc
 800a8f4:	3f10624d 	.word	0x3f10624d
 800a8f8:	08028ee8 	.word	0x08028ee8
 800a8fc:	40020400 	.word	0x40020400
 800a900:	20000538 	.word	0x20000538

0800a904 <DAC8565_DisableInteralReference>:

static HAL_StatusTypeDef DAC8565_DisableInteralReference()
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	71fb      	strb	r3, [r7, #7]
	uint8_t spi_data[3] = {0x01, 0x20, 0x00};
 800a90e:	4a10      	ldr	r2, [pc, #64]	; (800a950 <DAC8565_DisableInteralReference+0x4c>)
 800a910:	1d3b      	adds	r3, r7, #4
 800a912:	6812      	ldr	r2, [r2, #0]
 800a914:	4611      	mov	r1, r2
 800a916:	8019      	strh	r1, [r3, #0]
 800a918:	3302      	adds	r3, #2
 800a91a:	0c12      	lsrs	r2, r2, #16
 800a91c:	701a      	strb	r2, [r3, #0]

	LL_GPIO_ResetOutputPin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 800a91e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a922:	480c      	ldr	r0, [pc, #48]	; (800a954 <DAC8565_DisableInteralReference+0x50>)
 800a924:	f7ff fee6 	bl	800a6f4 <LL_GPIO_ResetOutputPin>
	status = HAL_SPI_Transmit(&hspi2, (uint8_t*)spi_data, 3, 1000);
 800a928:	1d39      	adds	r1, r7, #4
 800a92a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a92e:	2203      	movs	r2, #3
 800a930:	4809      	ldr	r0, [pc, #36]	; (800a958 <DAC8565_DisableInteralReference+0x54>)
 800a932:	f7fc fc34 	bl	800719e <HAL_SPI_Transmit>
 800a936:	4603      	mov	r3, r0
 800a938:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 800a93a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a93e:	4805      	ldr	r0, [pc, #20]	; (800a954 <DAC8565_DisableInteralReference+0x50>)
 800a940:	f7ff feca 	bl	800a6d8 <LL_GPIO_SetOutputPin>

	return status;
 800a944:	79fb      	ldrb	r3, [r7, #7]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	08028eec 	.word	0x08028eec
 800a954:	40020400 	.word	0x40020400
 800a958:	20000538 	.word	0x20000538

0800a95c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800a960:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <DWT_Init+0x38>)
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10e      	bne.n	800a98a <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800a96c:	4b09      	ldr	r3, [pc, #36]	; (800a994 <DWT_Init+0x38>)
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	4a08      	ldr	r2, [pc, #32]	; (800a994 <DWT_Init+0x38>)
 800a972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a976:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 800a978:	4b07      	ldr	r3, [pc, #28]	; (800a998 <DWT_Init+0x3c>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800a97e:	4b06      	ldr	r3, [pc, #24]	; (800a998 <DWT_Init+0x3c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a05      	ldr	r2, [pc, #20]	; (800a998 <DWT_Init+0x3c>)
 800a984:	f043 0301 	orr.w	r3, r3, #1
 800a988:	6013      	str	r3, [r2, #0]
    }
}
 800a98a:	bf00      	nop
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	e000edf0 	.word	0xe000edf0
 800a998:	e0001000 	.word	0xe0001000

0800a99c <DWT_Delay_us>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay_us(uint32_t us) // microseconds
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 800a9a4:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <DWT_Delay_us+0x40>)
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 800a9aa:	4b0d      	ldr	r3, [pc, #52]	; (800a9e0 <DWT_Delay_us+0x44>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a0d      	ldr	r2, [pc, #52]	; (800a9e4 <DWT_Delay_us+0x48>)
 800a9b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b4:	0c9a      	lsrs	r2, r3, #18
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	fb02 f303 	mul.w	r3, r2, r3
 800a9bc:	60bb      	str	r3, [r7, #8]


    while (DWT->CYCCNT - startTick < delayTicks);
 800a9be:	bf00      	nop
 800a9c0:	4b06      	ldr	r3, [pc, #24]	; (800a9dc <DWT_Delay_us+0x40>)
 800a9c2:	685a      	ldr	r2, [r3, #4]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d8f8      	bhi.n	800a9c0 <DWT_Delay_us+0x24>
}
 800a9ce:	bf00      	nop
 800a9d0:	bf00      	nop
 800a9d2:	3714      	adds	r7, #20
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	e0001000 	.word	0xe0001000
 800a9e0:	20000000 	.word	0x20000000
 800a9e4:	431bde83 	.word	0x431bde83

0800a9e8 <ee24_isConnected>:
#endif

uint8_t ee24_lock = 0;
//################################################################################################################
bool ee24_isConnected(uint8_t eeprom_address)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	71fb      	strb	r3, [r7, #7]
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, eeprom_address, 2, 1000)==HAL_OK)
 800a9f2:	79fb      	ldrb	r3, [r7, #7]
 800a9f4:	b299      	uxth	r1, r3
 800a9f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	4806      	ldr	r0, [pc, #24]	; (800aa18 <ee24_isConnected+0x30>)
 800a9fe:	f7fa fd47 	bl	8005490 <HAL_I2C_IsDeviceReady>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <ee24_isConnected+0x24>
    return true;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e000      	b.n	800aa0e <ee24_isConnected+0x26>
  else
    return false;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3708      	adds	r7, #8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	20000480 	.word	0x20000480

0800aa1c <ee24_write>:
//################################################################################################################
bool ee24_write(uint8_t eeprom_address, uint16_t address, uint8_t *data, size_t len)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	; 0x28
 800aa20:	af04      	add	r7, sp, #16
 800aa22:	60ba      	str	r2, [r7, #8]
 800aa24:	607b      	str	r3, [r7, #4]
 800aa26:	4603      	mov	r3, r0
 800aa28:	73fb      	strb	r3, [r7, #15]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	81bb      	strh	r3, [r7, #12]
  if (ee24_lock == 1)
 800aa2e:	4b2b      	ldr	r3, [pc, #172]	; (800aadc <ee24_write+0xc0>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d101      	bne.n	800aa3a <ee24_write+0x1e>
    return false;
 800aa36:	2300      	movs	r3, #0
 800aa38:	e04b      	b.n	800aad2 <ee24_write+0xb6>
  ee24_lock = 1;
 800aa3a:	4b28      	ldr	r3, [pc, #160]	; (800aadc <ee24_write+0xc0>)
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 800aa40:	f7f7 fffa 	bl	8002a38 <HAL_GetTick>
 800aa44:	6138      	str	r0, [r7, #16]
  #if	(_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN,GPIO_PIN_RESET);
  #endif
  while (1)
  {
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 800aa46:	89bb      	ldrh	r3, [r7, #12]
 800aa48:	f003 0307 	and.w	r3, r3, #7
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	f1c3 0308 	rsb	r3, r3, #8
 800aa52:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 800aa54:	8afb      	ldrh	r3, [r7, #22]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d201      	bcs.n	800aa60 <ee24_write+0x44>
      w = len;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	82fb      	strh	r3, [r7, #22]
    #if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, eeprom_address, address, I2C_MEMADD_SIZE_8BIT, data, w, 1000) == HAL_OK)
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
 800aa62:	b299      	uxth	r1, r3
 800aa64:	89ba      	ldrh	r2, [r7, #12]
 800aa66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aa6a:	9302      	str	r3, [sp, #8]
 800aa6c:	8afb      	ldrh	r3, [r7, #22]
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	2301      	movs	r3, #1
 800aa76:	481a      	ldr	r0, [pc, #104]	; (800aae0 <ee24_write+0xc4>)
 800aa78:	f7fa fadc 	bl	8005034 <HAL_I2C_Mem_Write>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d123      	bne.n	800aaca <ee24_write+0xae>
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, eeprom_address | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 1000) == HAL_OK)
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, eeprom_address, address, I2C_MEMADD_SIZE_16BIT, data, w, 1000) == HAL_OK)
    #endif
    {
      ee24_delay(10);
 800aa82:	200a      	movs	r0, #10
 800aa84:	f7f7 ffe4 	bl	8002a50 <HAL_Delay>
      len -= w;
 800aa88:	8afb      	ldrh	r3, [r7, #22]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	607b      	str	r3, [r7, #4]
      data += w;
 800aa90:	8afb      	ldrh	r3, [r7, #22]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	4413      	add	r3, r2
 800aa96:	60bb      	str	r3, [r7, #8]
      address += w;
 800aa98:	89ba      	ldrh	r2, [r7, #12]
 800aa9a:	8afb      	ldrh	r3, [r7, #22]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	81bb      	strh	r3, [r7, #12]
      if (len == 0)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d104      	bne.n	800aab0 <ee24_write+0x94>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
        #endif
        ee24_lock = 0;
 800aaa6:	4b0d      	ldr	r3, [pc, #52]	; (800aadc <ee24_write+0xc0>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	701a      	strb	r2, [r3, #0]
        return true;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e010      	b.n	800aad2 <ee24_write+0xb6>
      }
      if (HAL_GetTick() - startTime >= 1000)
 800aab0:	f7f7 ffc2 	bl	8002a38 <HAL_GetTick>
 800aab4:	4602      	mov	r2, r0
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aabe:	d3c2      	bcc.n	800aa46 <ee24_write+0x2a>
      {
        ee24_lock = 0;
 800aac0:	4b06      	ldr	r3, [pc, #24]	; (800aadc <ee24_write+0xc0>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	701a      	strb	r2, [r3, #0]
        return false;
 800aac6:	2300      	movs	r3, #0
 800aac8:	e003      	b.n	800aad2 <ee24_write+0xb6>
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
      #endif
      ee24_lock = 0;
 800aaca:	4b04      	ldr	r3, [pc, #16]	; (800aadc <ee24_write+0xc0>)
 800aacc:	2200      	movs	r2, #0
 800aace:	701a      	strb	r2, [r3, #0]
      return false;
 800aad0:	2300      	movs	r3, #0
    }
  }
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	200052ee 	.word	0x200052ee
 800aae0:	20000480 	.word	0x20000480

0800aae4 <ee24_read>:
//################################################################################################################
bool ee24_read(uint8_t eeprom_address, uint16_t address, uint8_t *data, size_t len)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b088      	sub	sp, #32
 800aae8:	af04      	add	r7, sp, #16
 800aaea:	60ba      	str	r2, [r7, #8]
 800aaec:	607b      	str	r3, [r7, #4]
 800aaee:	4603      	mov	r3, r0
 800aaf0:	73fb      	strb	r3, [r7, #15]
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	81bb      	strh	r3, [r7, #12]
  if (ee24_lock == 1)
 800aaf6:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <ee24_read+0x64>)
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d101      	bne.n	800ab02 <ee24_read+0x1e>
    return false;
 800aafe:	2300      	movs	r3, #0
 800ab00:	e01d      	b.n	800ab3e <ee24_read+0x5a>
  ee24_lock = 1;
 800ab02:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <ee24_read+0x64>)
 800ab04:	2201      	movs	r2, #1
 800ab06:	701a      	strb	r2, [r3, #0]
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
  #endif
  #if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, eeprom_address, address, I2C_MEMADD_SIZE_8BIT, data, len, 1000) == HAL_OK)
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	b299      	uxth	r1, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	89ba      	ldrh	r2, [r7, #12]
 800ab12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ab16:	9002      	str	r0, [sp, #8]
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	2301      	movs	r3, #1
 800ab20:	480a      	ldr	r0, [pc, #40]	; (800ab4c <ee24_read+0x68>)
 800ab22:	f7fa fb9b 	bl	800525c <HAL_I2C_Mem_Read>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d104      	bne.n	800ab36 <ee24_read+0x52>
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, eeprom_address | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 1000) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, eeprom_address, address, I2C_MEMADD_SIZE_16BIT, data, len, 1000) == HAL_OK)
  #endif
  {
    ee24_lock = 0;
 800ab2c:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <ee24_read+0x64>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	701a      	strb	r2, [r3, #0]
    return true;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e003      	b.n	800ab3e <ee24_read+0x5a>
  }
  else
  {
    ee24_lock = 0;
 800ab36:	4b04      	ldr	r3, [pc, #16]	; (800ab48 <ee24_read+0x64>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	701a      	strb	r2, [r3, #0]
    return false;
 800ab3c:	2300      	movs	r3, #0
  }
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	200052ee 	.word	0x200052ee
 800ab4c:	20000480 	.word	0x20000480

0800ab50 <ee24_eraseChip>:
//################################################################################################################
bool ee24_eraseChip(uint8_t eeprom_address)
{
 800ab50:	b5b0      	push	{r4, r5, r7, lr}
 800ab52:	b08c      	sub	sp, #48	; 0x30
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	71fb      	strb	r3, [r7, #7]
  const uint8_t eraseData[32] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\
 800ab5a:	4b14      	ldr	r3, [pc, #80]	; (800abac <ee24_eraseChip+0x5c>)
 800ab5c:	f107 040c 	add.w	r4, r7, #12
 800ab60:	461d      	mov	r5, r3
 800ab62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ab6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    , 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  uint32_t bytes = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	62fb      	str	r3, [r7, #44]	; 0x2c
  while ( bytes < (_EEPROM_SIZE_KBIT * 256))
 800ab72:	e012      	b.n	800ab9a <ee24_eraseChip+0x4a>
  {
    if (ee24_write(eeprom_address, bytes, (uint8_t*)eraseData, sizeof(eraseData)) == false)
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	b299      	uxth	r1, r3
 800ab78:	f107 020c 	add.w	r2, r7, #12
 800ab7c:	79f8      	ldrb	r0, [r7, #7]
 800ab7e:	2320      	movs	r3, #32
 800ab80:	f7ff ff4c 	bl	800aa1c <ee24_write>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f083 0301 	eor.w	r3, r3, #1
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <ee24_eraseChip+0x44>
      return false;
 800ab90:	2300      	movs	r3, #0
 800ab92:	e006      	b.n	800aba2 <ee24_eraseChip+0x52>
    bytes += sizeof(eraseData);
 800ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab96:	3320      	adds	r3, #32
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
  while ( bytes < (_EEPROM_SIZE_KBIT * 256))
 800ab9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9c:	2bff      	cmp	r3, #255	; 0xff
 800ab9e:	d9e9      	bls.n	800ab74 <ee24_eraseChip+0x24>
  }
  return true;
 800aba0:	2301      	movs	r3, #1
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3730      	adds	r7, #48	; 0x30
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bdb0      	pop	{r4, r5, r7, pc}
 800abaa:	bf00      	nop
 800abac:	08028ef0 	.word	0x08028ef0

0800abb0 <LL_GPIO_SetOutputPin>:
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	619a      	str	r2, [r3, #24]
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <LL_GPIO_ResetOutputPin>:
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	041a      	lsls	r2, r3, #16
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	619a      	str	r2, [r3, #24]
}
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <EEPROM_Erase>:

void EEPROM_WriteProtect(GPIO_PinState state);


BSP_StatusTypeDef EEPROM_Erase()
{
 800abea:	b580      	push	{r7, lr}
 800abec:	af00      	add	r7, sp, #0

	EEPROM_WriteProtect(GPIO_PIN_SET);
 800abee:	2001      	movs	r0, #1
 800abf0:	f000 f81c 	bl	800ac2c <EEPROM_WriteProtect>

	if(ee24_isConnected(EEPROM_ADDRESS))
 800abf4:	20a0      	movs	r0, #160	; 0xa0
 800abf6:	f7ff fef7 	bl	800a9e8 <ee24_isConnected>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00f      	beq.n	800ac20 <EEPROM_Erase+0x36>
	{
		if(ee24_eraseChip(EEPROM_ADDRESS))
 800ac00:	20a0      	movs	r0, #160	; 0xa0
 800ac02:	f7ff ffa5 	bl	800ab50 <ee24_eraseChip>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d004      	beq.n	800ac16 <EEPROM_Erase+0x2c>
		{
			EEPROM_WriteProtect(GPIO_PIN_RESET);
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	f000 f80d 	bl	800ac2c <EEPROM_WriteProtect>
			return BSP_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	e008      	b.n	800ac28 <EEPROM_Erase+0x3e>
		}
		else
		{
			EEPROM_WriteProtect(GPIO_PIN_RESET);
 800ac16:	2000      	movs	r0, #0
 800ac18:	f000 f808 	bl	800ac2c <EEPROM_WriteProtect>
			return BSP_EEPROM_WRITE_ERROR;
 800ac1c:	2308      	movs	r3, #8
 800ac1e:	e003      	b.n	800ac28 <EEPROM_Erase+0x3e>
		}
	}
	else
	{
		EEPROM_WriteProtect(GPIO_PIN_RESET);
 800ac20:	2000      	movs	r0, #0
 800ac22:	f000 f803 	bl	800ac2c <EEPROM_WriteProtect>
		return BSP_EEPROM_NO_CONNECTION;
 800ac26:	2307      	movs	r3, #7
	}


}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <EEPROM_WriteProtect>:

void EEPROM_WriteProtect(GPIO_PinState state)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	4603      	mov	r3, r0
 800ac34:	71fb      	strb	r3, [r7, #7]
	if(GPIO_PIN_SET == state)
 800ac36:	79fb      	ldrb	r3, [r7, #7]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d104      	bne.n	800ac46 <EEPROM_WriteProtect+0x1a>
	{
		LL_GPIO_SetOutputPin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin);
 800ac3c:	2110      	movs	r1, #16
 800ac3e:	4807      	ldr	r0, [pc, #28]	; (800ac5c <EEPROM_WriteProtect+0x30>)
 800ac40:	f7ff ffb6 	bl	800abb0 <LL_GPIO_SetOutputPin>
	} else if (GPIO_PIN_RESET == state)
	{
		LL_GPIO_ResetOutputPin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin);
	}

}
 800ac44:	e006      	b.n	800ac54 <EEPROM_WriteProtect+0x28>
	} else if (GPIO_PIN_RESET == state)
 800ac46:	79fb      	ldrb	r3, [r7, #7]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d103      	bne.n	800ac54 <EEPROM_WriteProtect+0x28>
		LL_GPIO_ResetOutputPin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin);
 800ac4c:	2110      	movs	r1, #16
 800ac4e:	4803      	ldr	r0, [pc, #12]	; (800ac5c <EEPROM_WriteProtect+0x30>)
 800ac50:	f7ff ffbc 	bl	800abcc <LL_GPIO_ResetOutputPin>
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	40021800 	.word	0x40021800

0800ac60 <EEPROM_Write>:

BSP_StatusTypeDef EEPROM_Write(bsp_eeprom_union_t* union_data, size_t size)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
	uint8_t tx_data = EEPROM_WRITE_DONE;
 800ac6a:	2344      	movs	r3, #68	; 0x44
 800ac6c:	73fb      	strb	r3, [r7, #15]


	EEPROM_WriteProtect(GPIO_PIN_RESET);
 800ac6e:	2000      	movs	r0, #0
 800ac70:	f7ff ffdc 	bl	800ac2c <EEPROM_WriteProtect>
	if(ee24_isConnected(EEPROM_ADDRESS))
 800ac74:	20a0      	movs	r0, #160	; 0xa0
 800ac76:	f7ff feb7 	bl	800a9e8 <ee24_isConnected>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d021      	beq.n	800acc4 <EEPROM_Write+0x64>
	{

		if(ee24_write(EEPROM_ADDRESS, 0, union_data->bytes, size))
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2100      	movs	r1, #0
 800ac86:	20a0      	movs	r0, #160	; 0xa0
 800ac88:	f7ff fec8 	bl	800aa1c <ee24_write>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d013      	beq.n	800acba <EEPROM_Write+0x5a>
		{

			if(ee24_write(EEPROM_ADDRESS, EEPROM_END, &tx_data, 1))
 800ac92:	f107 020f 	add.w	r2, r7, #15
 800ac96:	2301      	movs	r3, #1
 800ac98:	21ff      	movs	r1, #255	; 0xff
 800ac9a:	20a0      	movs	r0, #160	; 0xa0
 800ac9c:	f7ff febe 	bl	800aa1c <ee24_write>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d004      	beq.n	800acb0 <EEPROM_Write+0x50>
			{
				EEPROM_WriteProtect(GPIO_PIN_SET);
 800aca6:	2001      	movs	r0, #1
 800aca8:	f7ff ffc0 	bl	800ac2c <EEPROM_WriteProtect>
				return BSP_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	e00d      	b.n	800accc <EEPROM_Write+0x6c>
			}
			else
			{
				EEPROM_WriteProtect(GPIO_PIN_SET);
 800acb0:	2001      	movs	r0, #1
 800acb2:	f7ff ffbb 	bl	800ac2c <EEPROM_WriteProtect>
				return BSP_EEPROM_WRITE_ERROR;
 800acb6:	2308      	movs	r3, #8
 800acb8:	e008      	b.n	800accc <EEPROM_Write+0x6c>
			}

		}
		else
		{
			EEPROM_WriteProtect(GPIO_PIN_SET);
 800acba:	2001      	movs	r0, #1
 800acbc:	f7ff ffb6 	bl	800ac2c <EEPROM_WriteProtect>
			return BSP_EEPROM_WRITE_ERROR;
 800acc0:	2308      	movs	r3, #8
 800acc2:	e003      	b.n	800accc <EEPROM_Write+0x6c>
		}

	}
	else
	{
		EEPROM_WriteProtect(GPIO_PIN_SET);
 800acc4:	2001      	movs	r0, #1
 800acc6:	f7ff ffb1 	bl	800ac2c <EEPROM_WriteProtect>
		return BSP_EEPROM_NO_CONNECTION;
 800acca:	2307      	movs	r3, #7
	}
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <EEPROM_Read>:

BSP_StatusTypeDef EEPROM_Read(bsp_eeprom_union_t* union_data, size_t size)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
	EEPROM_WriteProtect(GPIO_PIN_RESET);
 800acde:	2000      	movs	r0, #0
 800ace0:	f7ff ffa4 	bl	800ac2c <EEPROM_WriteProtect>

	if(ee24_isConnected(EEPROM_ADDRESS))
 800ace4:	20a0      	movs	r0, #160	; 0xa0
 800ace6:	f7ff fe7f 	bl	800a9e8 <ee24_isConnected>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d012      	beq.n	800ad16 <EEPROM_Read+0x42>
	{
		if(ee24_read(EEPROM_ADDRESS, 0, union_data->bytes, size))
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2100      	movs	r1, #0
 800acf6:	20a0      	movs	r0, #160	; 0xa0
 800acf8:	f7ff fef4 	bl	800aae4 <ee24_read>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d004      	beq.n	800ad0c <EEPROM_Read+0x38>
		{
			EEPROM_WriteProtect(GPIO_PIN_SET);
 800ad02:	2001      	movs	r0, #1
 800ad04:	f7ff ff92 	bl	800ac2c <EEPROM_WriteProtect>
			return BSP_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	e008      	b.n	800ad1e <EEPROM_Read+0x4a>
		}
		else
		{
			EEPROM_WriteProtect(GPIO_PIN_SET);
 800ad0c:	2001      	movs	r0, #1
 800ad0e:	f7ff ff8d 	bl	800ac2c <EEPROM_WriteProtect>
			return BSP_EEPROM_READ_ERROR;
 800ad12:	2309      	movs	r3, #9
 800ad14:	e003      	b.n	800ad1e <EEPROM_Read+0x4a>
		}

	}
	else
	{
		EEPROM_WriteProtect(GPIO_PIN_SET);
 800ad16:	2001      	movs	r0, #1
 800ad18:	f7ff ff88 	bl	800ac2c <EEPROM_WriteProtect>
		return BSP_EEPROM_NO_CONNECTION;
 800ad1c:	2307      	movs	r3, #7
	}
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <EEPROM_Status>:

BSP_StatusTypeDef EEPROM_Status()
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	71fb      	strb	r3, [r7, #7]

	EEPROM_WriteProtect(GPIO_PIN_RESET);
 800ad30:	2000      	movs	r0, #0
 800ad32:	f7ff ff7b 	bl	800ac2c <EEPROM_WriteProtect>

	if(ee24_isConnected(EEPROM_ADDRESS))
 800ad36:	20a0      	movs	r0, #160	; 0xa0
 800ad38:	f7ff fe56 	bl	800a9e8 <ee24_isConnected>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d01a      	beq.n	800ad78 <EEPROM_Status+0x52>
	{
		if(ee24_read(EEPROM_ADDRESS, EEPROM_END, &rx_data, 1))
 800ad42:	1dfa      	adds	r2, r7, #7
 800ad44:	2301      	movs	r3, #1
 800ad46:	21ff      	movs	r1, #255	; 0xff
 800ad48:	20a0      	movs	r0, #160	; 0xa0
 800ad4a:	f7ff fecb 	bl	800aae4 <ee24_read>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00c      	beq.n	800ad6e <EEPROM_Status+0x48>
		{
			if(EEPROM_WRITE_DONE == rx_data)
 800ad54:	79fb      	ldrb	r3, [r7, #7]
 800ad56:	2b44      	cmp	r3, #68	; 0x44
 800ad58:	d104      	bne.n	800ad64 <EEPROM_Status+0x3e>
			{
				EEPROM_WriteProtect(GPIO_PIN_SET);
 800ad5a:	2001      	movs	r0, #1
 800ad5c:	f7ff ff66 	bl	800ac2c <EEPROM_WriteProtect>
				return BSP_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	e00d      	b.n	800ad80 <EEPROM_Status+0x5a>
			}
			else
			{
				EEPROM_WriteProtect(GPIO_PIN_SET);
 800ad64:	2001      	movs	r0, #1
 800ad66:	f7ff ff61 	bl	800ac2c <EEPROM_WriteProtect>
				return BSP_EEPROM_EMPTY;
 800ad6a:	2305      	movs	r3, #5
 800ad6c:	e008      	b.n	800ad80 <EEPROM_Status+0x5a>
			}

		}
		else
		{
			EEPROM_WriteProtect(GPIO_PIN_SET);
 800ad6e:	2001      	movs	r0, #1
 800ad70:	f7ff ff5c 	bl	800ac2c <EEPROM_WriteProtect>
			return BSP_EEPROM_READ_ERROR;
 800ad74:	2309      	movs	r3, #9
 800ad76:	e003      	b.n	800ad80 <EEPROM_Status+0x5a>
		}

	}
	else
	{
		EEPROM_WriteProtect(GPIO_PIN_SET);
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f7ff ff57 	bl	800ac2c <EEPROM_WriteProtect>
		return BSP_EEPROM_NO_CONNECTION;
 800ad7e:	2307      	movs	r3, #7
	}
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <FGEN_SetAmplitude>:

	return freq28;
}

BSP_StatusTypeDef FGEN_SetAmplitude(float amplitude)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	ed87 0a01 	vstr	s0, [r7, #4]
	float tmp_amp = (float)(FGEN_AMPL_MAX - amplitude);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7f5 fc08 	bl	80005a8 <__aeabi_f2d>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	a10d      	add	r1, pc, #52	; (adr r1, 800add4 <FGEN_SetAmplitude+0x4c>)
 800ad9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ada2:	f7f5 faa1 	bl	80002e8 <__aeabi_dsub>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	4610      	mov	r0, r2
 800adac:	4619      	mov	r1, r3
 800adae:	f7f5 ff4b 	bl	8000c48 <__aeabi_d2f>
 800adb2:	4603      	mov	r3, r0
 800adb4:	60fb      	str	r3, [r7, #12]
	bsp.config.fgen.amplitude = amplitude;
 800adb6:	4a06      	ldr	r2, [pc, #24]	; (800add0 <FGEN_SetAmplitude+0x48>)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

	return AD5322_SetVOUTA(tmp_amp);
 800adbe:	ed97 0a03 	vldr	s0, [r7, #12]
 800adc2:	f7ff f8e1 	bl	8009f88 <AD5322_SetVOUTA>
 800adc6:	4603      	mov	r3, r0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	200052f0 	.word	0x200052f0
 800add4:	33333333 	.word	0x33333333
 800add8:	40233333 	.word	0x40233333

0800addc <FGEN_SetOffset>:

BSP_StatusTypeDef FGEN_SetOffset(float offset)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	ed87 0a01 	vstr	s0, [r7, #4]
	bsp.config.fgen.offset = offset;
 800ade6:	4a06      	ldr	r2, [pc, #24]	; (800ae00 <FGEN_SetOffset+0x24>)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	return AD5322_SetVOUTB(offset);
 800adee:	ed97 0a01 	vldr	s0, [r7, #4]
 800adf2:	f7ff f8f9 	bl	8009fe8 <AD5322_SetVOUTB>
 800adf6:	4603      	mov	r3, r0


}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	200052f0 	.word	0x200052f0

0800ae04 <FGEN_Init>:

	SN74HC595_Update(bsp.sn74hc595.shift_reg);
}

BSP_StatusTypeDef FGEN_Init()
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
	BSP_StatusTypeDef status = BSP_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	71fb      	strb	r3, [r7, #7]
	status = FGEN_SetAmplitude(0.0);
 800ae0e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800ae38 <FGEN_Init+0x34>
 800ae12:	f7ff ffb9 	bl	800ad88 <FGEN_SetAmplitude>
 800ae16:	4603      	mov	r3, r0
 800ae18:	71fb      	strb	r3, [r7, #7]
	status = FGEN_SetOffset(0.0);
 800ae1a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800ae38 <FGEN_Init+0x34>
 800ae1e:	f7ff ffdd 	bl	800addc <FGEN_SetOffset>
 800ae22:	4603      	mov	r3, r0
 800ae24:	71fb      	strb	r3, [r7, #7]
	status = AD9834_Init();
 800ae26:	f7ff fa0b 	bl	800a240 <AD9834_Init>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	71fb      	strb	r3, [r7, #7]

	return status;
 800ae2e:	79fb      	ldrb	r3, [r7, #7]

}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	00000000 	.word	0x00000000

0800ae3c <LL_GPIO_SetOutputPin>:
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	619a      	str	r2, [r3, #24]
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <LL_GPIO_ResetOutputPin>:
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	041a      	lsls	r2, r3, #16
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	619a      	str	r2, [r3, #24]
}
 800ae6a:	bf00      	nop
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
	...

0800ae78 <CXN_Relays_Control>:

#include "GPIO.h"

void CXN_Relays_Control(gpio_state gpio, uint8_t state)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	460a      	mov	r2, r1
 800ae82:	71fb      	strb	r3, [r7, #7]
 800ae84:	4613      	mov	r3, r2
 800ae86:	71bb      	strb	r3, [r7, #6]
	switch(gpio)
 800ae88:	79fb      	ldrb	r3, [r7, #7]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	2b05      	cmp	r3, #5
 800ae8e:	d869      	bhi.n	800af64 <CXN_Relays_Control+0xec>
 800ae90:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <CXN_Relays_Control+0x20>)
 800ae92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae96:	bf00      	nop
 800ae98:	0800aeb1 	.word	0x0800aeb1
 800ae9c:	0800aecf 	.word	0x0800aecf
 800aea0:	0800aeed 	.word	0x0800aeed
 800aea4:	0800af0b 	.word	0x0800af0b
 800aea8:	0800af29 	.word	0x0800af29
 800aeac:	0800af47 	.word	0x0800af47
	{
		case CXN_REL1: (GPIO_ON == state) ? LL_GPIO_SetOutputPin(CXN_REL1_GPIO_Port, CXN_REL1_Pin) : LL_GPIO_ResetOutputPin(CXN_REL1_GPIO_Port, CXN_REL1_Pin); break;
 800aeb0:	79bb      	ldrb	r3, [r7, #6]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d105      	bne.n	800aec2 <CXN_Relays_Control+0x4a>
 800aeb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aeba:	482c      	ldr	r0, [pc, #176]	; (800af6c <CXN_Relays_Control+0xf4>)
 800aebc:	f7ff ffbe 	bl	800ae3c <LL_GPIO_SetOutputPin>
 800aec0:	e050      	b.n	800af64 <CXN_Relays_Control+0xec>
 800aec2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aec6:	4829      	ldr	r0, [pc, #164]	; (800af6c <CXN_Relays_Control+0xf4>)
 800aec8:	f7ff ffc6 	bl	800ae58 <LL_GPIO_ResetOutputPin>
 800aecc:	e04a      	b.n	800af64 <CXN_Relays_Control+0xec>
		case CXN_REL2: (GPIO_ON == state) ? LL_GPIO_SetOutputPin(CXN_REL2_GPIO_Port, CXN_REL2_Pin) : LL_GPIO_ResetOutputPin(CXN_REL2_GPIO_Port, CXN_REL2_Pin); break;
 800aece:	79bb      	ldrb	r3, [r7, #6]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d105      	bne.n	800aee0 <CXN_Relays_Control+0x68>
 800aed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aed8:	4824      	ldr	r0, [pc, #144]	; (800af6c <CXN_Relays_Control+0xf4>)
 800aeda:	f7ff ffaf 	bl	800ae3c <LL_GPIO_SetOutputPin>
 800aede:	e041      	b.n	800af64 <CXN_Relays_Control+0xec>
 800aee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aee4:	4821      	ldr	r0, [pc, #132]	; (800af6c <CXN_Relays_Control+0xf4>)
 800aee6:	f7ff ffb7 	bl	800ae58 <LL_GPIO_ResetOutputPin>
 800aeea:	e03b      	b.n	800af64 <CXN_Relays_Control+0xec>
		case CXN_REL3: (GPIO_ON == state) ? LL_GPIO_SetOutputPin(CXN_REL3_GPIO_Port, CXN_REL3_Pin) : LL_GPIO_ResetOutputPin(CXN_REL3_GPIO_Port, CXN_REL3_Pin); break;
 800aeec:	79bb      	ldrb	r3, [r7, #6]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d105      	bne.n	800aefe <CXN_Relays_Control+0x86>
 800aef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aef6:	481e      	ldr	r0, [pc, #120]	; (800af70 <CXN_Relays_Control+0xf8>)
 800aef8:	f7ff ffa0 	bl	800ae3c <LL_GPIO_SetOutputPin>
 800aefc:	e032      	b.n	800af64 <CXN_Relays_Control+0xec>
 800aefe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800af02:	481b      	ldr	r0, [pc, #108]	; (800af70 <CXN_Relays_Control+0xf8>)
 800af04:	f7ff ffa8 	bl	800ae58 <LL_GPIO_ResetOutputPin>
 800af08:	e02c      	b.n	800af64 <CXN_Relays_Control+0xec>
		case CXN_REL4: (GPIO_ON == state) ? LL_GPIO_SetOutputPin(CXN_REL4_GPIO_Port, CXN_REL4_Pin) : LL_GPIO_ResetOutputPin(CXN_REL4_GPIO_Port, CXN_REL4_Pin); break;
 800af0a:	79bb      	ldrb	r3, [r7, #6]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d105      	bne.n	800af1c <CXN_Relays_Control+0xa4>
 800af10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800af14:	4816      	ldr	r0, [pc, #88]	; (800af70 <CXN_Relays_Control+0xf8>)
 800af16:	f7ff ff91 	bl	800ae3c <LL_GPIO_SetOutputPin>
 800af1a:	e023      	b.n	800af64 <CXN_Relays_Control+0xec>
 800af1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800af20:	4813      	ldr	r0, [pc, #76]	; (800af70 <CXN_Relays_Control+0xf8>)
 800af22:	f7ff ff99 	bl	800ae58 <LL_GPIO_ResetOutputPin>
 800af26:	e01d      	b.n	800af64 <CXN_Relays_Control+0xec>
		case CXN_REL5: (GPIO_ON == state) ? LL_GPIO_SetOutputPin(CXN_REL5_GPIO_Port, CXN_REL5_Pin) : LL_GPIO_ResetOutputPin(CXN_REL5_GPIO_Port, CXN_REL5_Pin); break;
 800af28:	79bb      	ldrb	r3, [r7, #6]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d105      	bne.n	800af3a <CXN_Relays_Control+0xc2>
 800af2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800af32:	480f      	ldr	r0, [pc, #60]	; (800af70 <CXN_Relays_Control+0xf8>)
 800af34:	f7ff ff82 	bl	800ae3c <LL_GPIO_SetOutputPin>
 800af38:	e014      	b.n	800af64 <CXN_Relays_Control+0xec>
 800af3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800af3e:	480c      	ldr	r0, [pc, #48]	; (800af70 <CXN_Relays_Control+0xf8>)
 800af40:	f7ff ff8a 	bl	800ae58 <LL_GPIO_ResetOutputPin>
 800af44:	e00e      	b.n	800af64 <CXN_Relays_Control+0xec>
		case CXN_REL6: (GPIO_ON == state) ? LL_GPIO_SetOutputPin(CXN_REL6_GPIO_Port, CXN_REL6_Pin) : LL_GPIO_ResetOutputPin(CXN_REL6_GPIO_Port, CXN_REL6_Pin); break;
 800af46:	79bb      	ldrb	r3, [r7, #6]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d105      	bne.n	800af58 <CXN_Relays_Control+0xe0>
 800af4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800af50:	4807      	ldr	r0, [pc, #28]	; (800af70 <CXN_Relays_Control+0xf8>)
 800af52:	f7ff ff73 	bl	800ae3c <LL_GPIO_SetOutputPin>
 800af56:	e004      	b.n	800af62 <CXN_Relays_Control+0xea>
 800af58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800af5c:	4804      	ldr	r0, [pc, #16]	; (800af70 <CXN_Relays_Control+0xf8>)
 800af5e:	f7ff ff7b 	bl	800ae58 <LL_GPIO_ResetOutputPin>
 800af62:	bf00      	nop
	}
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	40020400 	.word	0x40020400
 800af70:	40021000 	.word	0x40021000

0800af74 <HDC1080_read_reg>:
#include "HDC1080.h"
#include <string.h>


static BSP_StatusTypeDef HDC1080_read_reg(I2C_HandleTypeDef *hi2c, uint16_t delay, uint8_t reg, uint16_t *val)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af02      	add	r7, sp, #8
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	607b      	str	r3, [r7, #4]
 800af7e:	460b      	mov	r3, r1
 800af80:	817b      	strh	r3, [r7, #10]
 800af82:	4613      	mov	r3, r2
 800af84:	727b      	strb	r3, [r7, #9]
	uint8_t buf[2];
	BSP_StatusTypeDef  status;

	// Check argument
	if ((reg != HDC1080_TEMPERATURE) &
 800af86:	7a7b      	ldrb	r3, [r7, #9]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	bf14      	ite	ne
 800af8c:	2301      	movne	r3, #1
 800af8e:	2300      	moveq	r3, #0
 800af90:	b2da      	uxtb	r2, r3
 800af92:	7a7b      	ldrb	r3, [r7, #9]
 800af94:	2b01      	cmp	r3, #1
 800af96:	bf14      	ite	ne
 800af98:	2301      	movne	r3, #1
 800af9a:	2300      	moveq	r3, #0
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	4013      	ands	r3, r2
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	461a      	mov	r2, r3
		  (reg != HDC1080_HUMIDITY) &
		  (reg != HDC1080_CONFIG) &
 800afa4:	7a7b      	ldrb	r3, [r7, #9]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	bf14      	ite	ne
 800afaa:	2301      	movne	r3, #1
 800afac:	2300      	moveq	r3, #0
 800afae:	b2db      	uxtb	r3, r3
		  (reg != HDC1080_HUMIDITY) &
 800afb0:	4013      	ands	r3, r2
		  (reg != HDC1080_SERIAL_ID1) &
 800afb2:	7a7a      	ldrb	r2, [r7, #9]
 800afb4:	2afb      	cmp	r2, #251	; 0xfb
 800afb6:	bf14      	ite	ne
 800afb8:	2201      	movne	r2, #1
 800afba:	2200      	moveq	r2, #0
 800afbc:	b2d2      	uxtb	r2, r2
		  (reg != HDC1080_CONFIG) &
 800afbe:	4013      	ands	r3, r2
		  (reg != HDC1080_SERIAL_ID2) &
 800afc0:	7a7a      	ldrb	r2, [r7, #9]
 800afc2:	2afc      	cmp	r2, #252	; 0xfc
 800afc4:	bf14      	ite	ne
 800afc6:	2201      	movne	r2, #1
 800afc8:	2200      	moveq	r2, #0
 800afca:	b2d2      	uxtb	r2, r2
		  (reg != HDC1080_SERIAL_ID1) &
 800afcc:	4013      	ands	r3, r2
		  (reg != HDC1080_SERIAL_ID3) &
 800afce:	7a7a      	ldrb	r2, [r7, #9]
 800afd0:	2afd      	cmp	r2, #253	; 0xfd
 800afd2:	bf14      	ite	ne
 800afd4:	2201      	movne	r2, #1
 800afd6:	2200      	moveq	r2, #0
 800afd8:	b2d2      	uxtb	r2, r2
		  (reg != HDC1080_SERIAL_ID2) &
 800afda:	4013      	ands	r3, r2
		  (reg != HDC1080_ID_MANU) &
 800afdc:	7a7a      	ldrb	r2, [r7, #9]
 800afde:	2afe      	cmp	r2, #254	; 0xfe
 800afe0:	bf14      	ite	ne
 800afe2:	2201      	movne	r2, #1
 800afe4:	2200      	moveq	r2, #0
 800afe6:	b2d2      	uxtb	r2, r2
		  (reg != HDC1080_SERIAL_ID3) &
 800afe8:	4013      	ands	r3, r2
	    (reg != HDC1080_ID_DEV) )
 800afea:	7a7a      	ldrb	r2, [r7, #9]
 800afec:	2aff      	cmp	r2, #255	; 0xff
 800afee:	bf14      	ite	ne
 800aff0:	2201      	movne	r2, #1
 800aff2:	2200      	moveq	r2, #0
 800aff4:	b2d2      	uxtb	r2, r2
		  (reg != HDC1080_ID_MANU) &
 800aff6:	4013      	ands	r3, r2
	if ((reg != HDC1080_TEMPERATURE) &
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <HDC1080_read_reg+0x8c>
		return BSP_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e031      	b.n	800b064 <HDC1080_read_reg+0xf0>

	buf[0] = reg;
 800b000:	7a7b      	ldrb	r3, [r7, #9]
 800b002:	753b      	strb	r3, [r7, #20]
	/* Read register */
	/* Send the read followed by address */
	status = HAL_I2C_Master_Transmit(hi2c,HDC1080_ADDR<<1,buf,1,100);
 800b004:	f107 0214 	add.w	r2, r7, #20
 800b008:	2364      	movs	r3, #100	; 0x64
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	2301      	movs	r3, #1
 800b00e:	2180      	movs	r1, #128	; 0x80
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f7f9 fe25 	bl	8004c60 <HAL_I2C_Master_Transmit>
 800b016:	4603      	mov	r3, r0
 800b018:	75fb      	strb	r3, [r7, #23]
	if (status != BSP_OK)
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <HDC1080_read_reg+0xb0>
		return status;
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	e01f      	b.n	800b064 <HDC1080_read_reg+0xf0>

	HAL_Delay(delay);
 800b024:	897b      	ldrh	r3, [r7, #10]
 800b026:	4618      	mov	r0, r3
 800b028:	f7f7 fd12 	bl	8002a50 <HAL_Delay>

	/* Receive a 2-byte result */
	status = HAL_I2C_Master_Receive(hi2c, HDC1080_ADDR<<1 | 0x01, buf, 2, 1000);
 800b02c:	f107 0214 	add.w	r2, r7, #20
 800b030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	2302      	movs	r3, #2
 800b038:	2181      	movs	r1, #129	; 0x81
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7f9 ff04 	bl	8004e48 <HAL_I2C_Master_Receive>
 800b040:	4603      	mov	r3, r0
 800b042:	75fb      	strb	r3, [r7, #23]
	if (status != BSP_OK)
 800b044:	7dfb      	ldrb	r3, [r7, #23]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <HDC1080_read_reg+0xda>
		return status;
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	e00a      	b.n	800b064 <HDC1080_read_reg+0xf0>

	/* Result */
	*val = buf[0]*256+buf[1];
 800b04e:	7d3b      	ldrb	r3, [r7, #20]
 800b050:	b29b      	uxth	r3, r3
 800b052:	021b      	lsls	r3, r3, #8
 800b054:	b29a      	uxth	r2, r3
 800b056:	7d7b      	ldrb	r3, [r7, #21]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	4413      	add	r3, r2
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	801a      	strh	r2, [r3, #0]

	return BSP_OK;  /* Success */
 800b062:	2300      	movs	r3, #0

}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	0000      	movs	r0, r0
	...

0800b070 <HDC1080_measure_temperature>:
	  return BSP_OK;
}
*/

BSP_StatusTypeDef HDC1080_measure_temperature(I2C_HandleTypeDef *hi2c, float *temperature)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
	BSP_StatusTypeDef status;
	float tmp = 0.0;
 800b07a:	f04f 0300 	mov.w	r3, #0
 800b07e:	60fb      	str	r3, [r7, #12]
	uint16_t readout = 0x00;
 800b080:	2300      	movs	r3, #0
 800b082:	813b      	strh	r3, [r7, #8]

	status = HDC1080_read_reg(hi2c, 150, HDC1080_TEMPERATURE, &readout);
 800b084:	f107 0308 	add.w	r3, r7, #8
 800b088:	2200      	movs	r2, #0
 800b08a:	2196      	movs	r1, #150	; 0x96
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7ff ff71 	bl	800af74 <HDC1080_read_reg>
 800b092:	4603      	mov	r3, r0
 800b094:	72fb      	strb	r3, [r7, #11]
	if (status != BSP_OK)
 800b096:	7afb      	ldrb	r3, [r7, #11]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <HDC1080_measure_temperature+0x30>
		return status;
 800b09c:	7afb      	ldrb	r3, [r7, #11]
 800b09e:	e02c      	b.n	800b0fa <HDC1080_measure_temperature+0x8a>

	tmp = (float)readout;
 800b0a0:	893b      	ldrh	r3, [r7, #8]
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0aa:	edc7 7a03 	vstr	s15, [r7, #12]
	tmp = (tmp / 65536.0) * 165.0 - 40.0;
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f7f5 fa7a 	bl	80005a8 <__aeabi_f2d>
 800b0b4:	f04f 0200 	mov.w	r2, #0
 800b0b8:	4b15      	ldr	r3, [pc, #84]	; (800b110 <HDC1080_measure_temperature+0xa0>)
 800b0ba:	f7f5 fbf7 	bl	80008ac <__aeabi_ddiv>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	a310      	add	r3, pc, #64	; (adr r3, 800b108 <HDC1080_measure_temperature+0x98>)
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f7f5 fac4 	bl	8000658 <__aeabi_dmul>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	f04f 0200 	mov.w	r2, #0
 800b0dc:	4b0d      	ldr	r3, [pc, #52]	; (800b114 <HDC1080_measure_temperature+0xa4>)
 800b0de:	f7f5 f903 	bl	80002e8 <__aeabi_dsub>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	f7f5 fdad 	bl	8000c48 <__aeabi_d2f>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	60fb      	str	r3, [r7, #12]
	*temperature = tmp;  // °C
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	f3af 8000 	nop.w
 800b108:	00000000 	.word	0x00000000
 800b10c:	4064a000 	.word	0x4064a000
 800b110:	40f00000 	.word	0x40f00000
 800b114:	40440000 	.word	0x40440000

0800b118 <HDC1080_measure_humidity>:

BSP_StatusTypeDef HDC1080_measure_humidity(I2C_HandleTypeDef *hi2c, float *humidity)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
	BSP_StatusTypeDef status;
	float tmp = 0.0;
 800b122:	f04f 0300 	mov.w	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]
	uint16_t readout = 0x00;
 800b128:	2300      	movs	r3, #0
 800b12a:	813b      	strh	r3, [r7, #8]


	status = HDC1080_read_reg(hi2c, 150, HDC1080_HUMIDITY, &readout);
 800b12c:	f107 0308 	add.w	r3, r7, #8
 800b130:	2201      	movs	r2, #1
 800b132:	2196      	movs	r1, #150	; 0x96
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff ff1d 	bl	800af74 <HDC1080_read_reg>
 800b13a:	4603      	mov	r3, r0
 800b13c:	72fb      	strb	r3, [r7, #11]
	if (status != BSP_OK)
 800b13e:	7afb      	ldrb	r3, [r7, #11]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <HDC1080_measure_humidity+0x30>
		return status;
 800b144:	7afb      	ldrb	r3, [r7, #11]
 800b146:	e038      	b.n	800b1ba <HDC1080_measure_humidity+0xa2>

	tmp = (float)readout;
 800b148:	893b      	ldrh	r3, [r7, #8]
 800b14a:	ee07 3a90 	vmov	s15, r3
 800b14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b152:	edc7 7a03 	vstr	s15, [r7, #12]
	tmp = (tmp / 65536.0) * 100.0;
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f7f5 fa26 	bl	80005a8 <__aeabi_f2d>
 800b15c:	f04f 0200 	mov.w	r2, #0
 800b160:	4b18      	ldr	r3, [pc, #96]	; (800b1c4 <HDC1080_measure_humidity+0xac>)
 800b162:	f7f5 fba3 	bl	80008ac <__aeabi_ddiv>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4610      	mov	r0, r2
 800b16c:	4619      	mov	r1, r3
 800b16e:	f04f 0200 	mov.w	r2, #0
 800b172:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <HDC1080_measure_humidity+0xb0>)
 800b174:	f7f5 fa70 	bl	8000658 <__aeabi_dmul>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4610      	mov	r0, r2
 800b17e:	4619      	mov	r1, r3
 800b180:	f7f5 fd62 	bl	8000c48 <__aeabi_d2f>
 800b184:	4603      	mov	r3, r0
 800b186:	60fb      	str	r3, [r7, #12]
	if (tmp>100.0) tmp = 100.0;
 800b188:	edd7 7a03 	vldr	s15, [r7, #12]
 800b18c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800b1cc <HDC1080_measure_humidity+0xb4>
 800b190:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b198:	dd01      	ble.n	800b19e <HDC1080_measure_humidity+0x86>
 800b19a:	4b0d      	ldr	r3, [pc, #52]	; (800b1d0 <HDC1080_measure_humidity+0xb8>)
 800b19c:	60fb      	str	r3, [r7, #12]
	if (tmp<0) tmp = 0.0;
 800b19e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1aa:	d502      	bpl.n	800b1b2 <HDC1080_measure_humidity+0x9a>
 800b1ac:	f04f 0300 	mov.w	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]
	*humidity = tmp;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	601a      	str	r2, [r3, #0]

	return BSP_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	40f00000 	.word	0x40f00000
 800b1c8:	40590000 	.word	0x40590000
 800b1cc:	42c80000 	.word	0x42c80000
 800b1d0:	42c80000 	.word	0x42c80000

0800b1d4 <LL_GPIO_SetOutputPin>:
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	619a      	str	r2, [r3, #24]
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <LL_GPIO_ResetOutputPin>:
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	041a      	lsls	r2, r3, #16
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	619a      	str	r2, [r3, #24]
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
	...

0800b210 <LED_Switch>:
extern osThreadId_t LEDTaskHandle;
extern osMessageQueueId_t QueueLEDHandle;


void LED_Switch(uint8_t LED_state)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	4603      	mov	r3, r0
 800b218:	71fb      	strb	r3, [r7, #7]

	static uint8_t led_color_send;

	LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800b21a:	2104      	movs	r1, #4
 800b21c:	4824      	ldr	r0, [pc, #144]	; (800b2b0 <LED_Switch+0xa0>)
 800b21e:	f7ff ffd9 	bl	800b1d4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800b222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b226:	4823      	ldr	r0, [pc, #140]	; (800b2b4 <LED_Switch+0xa4>)
 800b228:	f7ff ffd4 	bl	800b1d4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 800b22c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b230:	4820      	ldr	r0, [pc, #128]	; (800b2b4 <LED_Switch+0xa4>)
 800b232:	f7ff ffcf 	bl	800b1d4 <LL_GPIO_SetOutputPin>

	switch(LED_state)
 800b236:	79fb      	ldrb	r3, [r7, #7]
 800b238:	2b03      	cmp	r3, #3
 800b23a:	d834      	bhi.n	800b2a6 <LED_Switch+0x96>
 800b23c:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <LED_Switch+0x34>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b255 	.word	0x0800b255
 800b248:	0800b285 	.word	0x0800b285
 800b24c:	0800b26d 	.word	0x0800b26d
 800b250:	0800b28f 	.word	0x0800b28f
	{
		case LED_IDLE:
		{
			led_color_send = GREEN;
 800b254:	4b18      	ldr	r3, [pc, #96]	; (800b2b8 <LED_Switch+0xa8>)
 800b256:	2200      	movs	r2, #0
 800b258:	701a      	strb	r2, [r3, #0]
			osMessageQueuePut(QueueLEDHandle, &led_color_send, 0U, osWaitForever);
 800b25a:	4b18      	ldr	r3, [pc, #96]	; (800b2bc <LED_Switch+0xac>)
 800b25c:	6818      	ldr	r0, [r3, #0]
 800b25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b262:	2200      	movs	r2, #0
 800b264:	4914      	ldr	r1, [pc, #80]	; (800b2b8 <LED_Switch+0xa8>)
 800b266:	f002 fe63 	bl	800df30 <osMessageQueuePut>

		}; break;
 800b26a:	e01c      	b.n	800b2a6 <LED_Switch+0x96>

		case LED_ERROR:
		{
			led_color_send = RED;
 800b26c:	4b12      	ldr	r3, [pc, #72]	; (800b2b8 <LED_Switch+0xa8>)
 800b26e:	2201      	movs	r2, #1
 800b270:	701a      	strb	r2, [r3, #0]
			osMessageQueuePut(QueueLEDHandle, &led_color_send, 0U, osWaitForever);
 800b272:	4b12      	ldr	r3, [pc, #72]	; (800b2bc <LED_Switch+0xac>)
 800b274:	6818      	ldr	r0, [r3, #0]
 800b276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b27a:	2200      	movs	r2, #0
 800b27c:	490e      	ldr	r1, [pc, #56]	; (800b2b8 <LED_Switch+0xa8>)
 800b27e:	f002 fe57 	bl	800df30 <osMessageQueuePut>

		}; break;
 800b282:	e010      	b.n	800b2a6 <LED_Switch+0x96>

		case LED_BUSY:
		{
			LL_GPIO_ResetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800b284:	2104      	movs	r1, #4
 800b286:	480a      	ldr	r0, [pc, #40]	; (800b2b0 <LED_Switch+0xa0>)
 800b288:	f7ff ffb2 	bl	800b1f0 <LL_GPIO_ResetOutputPin>

		}; break;
 800b28c:	e00b      	b.n	800b2a6 <LED_Switch+0x96>

		case LED_DEFUALT:
		{
			led_color_send = BLUE;
 800b28e:	4b0a      	ldr	r3, [pc, #40]	; (800b2b8 <LED_Switch+0xa8>)
 800b290:	2202      	movs	r2, #2
 800b292:	701a      	strb	r2, [r3, #0]
			osMessageQueuePut(QueueLEDHandle, &led_color_send, 0U, osWaitForever);
 800b294:	4b09      	ldr	r3, [pc, #36]	; (800b2bc <LED_Switch+0xac>)
 800b296:	6818      	ldr	r0, [r3, #0]
 800b298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b29c:	2200      	movs	r2, #0
 800b29e:	4906      	ldr	r1, [pc, #24]	; (800b2b8 <LED_Switch+0xa8>)
 800b2a0:	f002 fe46 	bl	800df30 <osMessageQueuePut>

		}; break;
 800b2a4:	bf00      	nop

	}
}
 800b2a6:	bf00      	nop
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	40020400 	.word	0x40020400
 800b2b4:	40021400 	.word	0x40021400
 800b2b8:	200052ef 	.word	0x200052ef
 800b2bc:	20000730 	.word	0x20000730

0800b2c0 <MAX5217_Init>:
#include "MAX5217.h"

extern I2C_HandleTypeDef hi2c3;

void MAX5217_Init()
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	af00      	add	r7, sp, #0
	MAX5217_SetVoltage(0.0);
 800b2c4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800b2d0 <MAX5217_Init+0x10>
 800b2c8:	f000 f804 	bl	800b2d4 <MAX5217_SetVoltage>
}
 800b2cc:	bf00      	nop
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	00000000 	.word	0x00000000

0800b2d4 <MAX5217_SetVoltage>:


// Code adjusted to the schematic of ETH1CSMU2. The input range is from -25mV to 25mV.
HAL_StatusTypeDef MAX5217_SetVoltage(float voltage)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b088      	sub	sp, #32
 800b2d8:	af02      	add	r7, sp, #8
 800b2da:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t i2c_data[3] = {0x00};
 800b2de:	4b21      	ldr	r3, [pc, #132]	; (800b364 <MAX5217_SetVoltage+0x90>)
 800b2e0:	881b      	ldrh	r3, [r3, #0]
 800b2e2:	81bb      	strh	r3, [r7, #12]
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	73bb      	strb	r3, [r7, #14]
	float tmp = ((voltage * VOLT_DIV)/2) + VOLT_MID;
 800b2e8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b2ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800b368 <MAX5217_SetVoltage+0x94>
 800b2f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b2f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b2f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b2fc:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 800b300:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b304:	edc7 7a05 	vstr	s15, [r7, #20]
	uint16_t reg16 = (uint16_t)(tmp/MAX5217_LSB);
 800b308:	6978      	ldr	r0, [r7, #20]
 800b30a:	f7f5 f94d 	bl	80005a8 <__aeabi_f2d>
 800b30e:	f04f 0200 	mov.w	r2, #0
 800b312:	4b16      	ldr	r3, [pc, #88]	; (800b36c <MAX5217_SetVoltage+0x98>)
 800b314:	f7f5 faca 	bl	80008ac <__aeabi_ddiv>
 800b318:	4602      	mov	r2, r0
 800b31a:	460b      	mov	r3, r1
 800b31c:	4610      	mov	r0, r2
 800b31e:	4619      	mov	r1, r3
 800b320:	f7f5 fc72 	bl	8000c08 <__aeabi_d2uiz>
 800b324:	4603      	mov	r3, r0
 800b326:	827b      	strh	r3, [r7, #18]
	HAL_StatusTypeDef status = HAL_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	747b      	strb	r3, [r7, #17]

	i2c_data[0] = CODE_LOAD;
 800b32c:	2301      	movs	r3, #1
 800b32e:	733b      	strb	r3, [r7, #12]
	i2c_data[1] = (uint8_t)(reg16 >> 8);
 800b330:	8a7b      	ldrh	r3, [r7, #18]
 800b332:	0a1b      	lsrs	r3, r3, #8
 800b334:	b29b      	uxth	r3, r3
 800b336:	b2db      	uxtb	r3, r3
 800b338:	737b      	strb	r3, [r7, #13]
	i2c_data[2] = (uint8_t)(reg16 & 0xFF);
 800b33a:	8a7b      	ldrh	r3, [r7, #18]
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Master_Transmit(&hi2c3, MAX5217_ADDR, i2c_data, 3, 1000);
 800b340:	f107 020c 	add.w	r2, r7, #12
 800b344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	2303      	movs	r3, #3
 800b34c:	2138      	movs	r1, #56	; 0x38
 800b34e:	4808      	ldr	r0, [pc, #32]	; (800b370 <MAX5217_SetVoltage+0x9c>)
 800b350:	f7f9 fc86 	bl	8004c60 <HAL_I2C_Master_Transmit>
 800b354:	4603      	mov	r3, r0
 800b356:	747b      	strb	r3, [r7, #17]

	return status;
 800b358:	7c7b      	ldrb	r3, [r7, #17]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3718      	adds	r7, #24
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	08028f10 	.word	0x08028f10
 800b368:	42c80000 	.word	0x42c80000
 800b36c:	3f040000 	.word	0x3f040000
 800b370:	2000042c 	.word	0x2000042c

0800b374 <LL_GPIO_ReadInputPort>:
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	691b      	ldr	r3, [r3, #16]
}
 800b380:	4618      	mov	r0, r3
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <BSP_Init_Common>:
#include "scpi_def.h"

struct _bsp bsp;

static void BSP_Init_Common()
{
 800b38c:	b480      	push	{r7}
 800b38e:	af00      	add	r7, sp, #0

	bsp.trigger.delay = 0;
 800b390:	4b13      	ldr	r3, [pc, #76]	; (800b3e0 <BSP_Init_Common+0x54>)
 800b392:	2200      	movs	r2, #0
 800b394:	67da      	str	r2, [r3, #124]	; 0x7c
	bsp.trigger.in_slope = POS;
 800b396:	4b12      	ldr	r3, [pc, #72]	; (800b3e0 <BSP_Init_Common+0x54>)
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	bsp.trigger.out_slope = POS;
 800b39e:	4b10      	ldr	r3, [pc, #64]	; (800b3e0 <BSP_Init_Common+0x54>)
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	bsp.trigger.source = TRG_IMM;
 800b3a6:	4b0e      	ldr	r3, [pc, #56]	; (800b3e0 <BSP_Init_Common+0x54>)
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	bsp.trigger.count = 0;
 800b3ae:	4b0c      	ldr	r3, [pc, #48]	; (800b3e0 <BSP_Init_Common+0x54>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	bsp.data_format = DATA_FORMAT_ASCII;
 800b3b6:	4b0a      	ldr	r3, [pc, #40]	; (800b3e0 <BSP_Init_Common+0x54>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	bsp.security.status = 1;
 800b3be:	4b08      	ldr	r3, [pc, #32]	; (800b3e0 <BSP_Init_Common+0x54>)
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	bsp.sn74hc595.shift_reg[0] = 0;
 800b3c6:	4b06      	ldr	r3, [pc, #24]	; (800b3e0 <BSP_Init_Common+0x54>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	bsp.sn74hc595.shift_reg[1] = 0;
 800b3ce:	4b04      	ldr	r3, [pc, #16]	; (800b3e0 <BSP_Init_Common+0x54>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
 800b3d6:	bf00      	nop
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	200052f0 	.word	0x200052f0

0800b3e4 <BSP_Init_DefualtEEPROM>:

void BSP_Init_DefualtEEPROM()
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	af00      	add	r7, sp, #0
	bsp.eeprom.structure.ip4.MAC[0] = MAC_0;
 800b3e8:	4b2a      	ldr	r3, [pc, #168]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	731a      	strb	r2, [r3, #12]
	bsp.eeprom.structure.ip4.MAC[1] = MAC_1;
 800b3ee:	4b29      	ldr	r3, [pc, #164]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b3f0:	2280      	movs	r2, #128	; 0x80
 800b3f2:	735a      	strb	r2, [r3, #13]
	bsp.eeprom.structure.ip4.MAC[2] = MAC_2;
 800b3f4:	4b27      	ldr	r3, [pc, #156]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b3f6:	22e1      	movs	r2, #225	; 0xe1
 800b3f8:	739a      	strb	r2, [r3, #14]
	bsp.eeprom.structure.ip4.MAC[3] = MAC_3;
 800b3fa:	4b26      	ldr	r3, [pc, #152]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	73da      	strb	r2, [r3, #15]
	bsp.eeprom.structure.ip4.MAC[4] = MAC_4;
 800b400:	4b24      	ldr	r3, [pc, #144]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b402:	2200      	movs	r2, #0
 800b404:	741a      	strb	r2, [r3, #16]
	bsp.eeprom.structure.ip4.MAC[5] = MAC_5;
 800b406:	4b23      	ldr	r3, [pc, #140]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b408:	2200      	movs	r2, #0
 800b40a:	745a      	strb	r2, [r3, #17]

	bsp.eeprom.structure.ip4.gateway[0] = GATEWAY_ADDRESS_0;
 800b40c:	4b21      	ldr	r3, [pc, #132]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b40e:	22c0      	movs	r2, #192	; 0xc0
 800b410:	721a      	strb	r2, [r3, #8]
	bsp.eeprom.structure.ip4.gateway[1] = GATEWAY_ADDRESS_1;
 800b412:	4b20      	ldr	r3, [pc, #128]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b414:	22a8      	movs	r2, #168	; 0xa8
 800b416:	725a      	strb	r2, [r3, #9]
	bsp.eeprom.structure.ip4.gateway[2] = GATEWAY_ADDRESS_2;
 800b418:	4b1e      	ldr	r3, [pc, #120]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b41a:	2201      	movs	r2, #1
 800b41c:	729a      	strb	r2, [r3, #10]
	bsp.eeprom.structure.ip4.gateway[3] = GATEWAY_ADDRESS_3;
 800b41e:	4b1d      	ldr	r3, [pc, #116]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b420:	2201      	movs	r2, #1
 800b422:	72da      	strb	r2, [r3, #11]

	bsp.eeprom.structure.ip4.ip[0] = IP_ADDRESS_0;
 800b424:	4b1b      	ldr	r3, [pc, #108]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b426:	22c0      	movs	r2, #192	; 0xc0
 800b428:	701a      	strb	r2, [r3, #0]
	bsp.eeprom.structure.ip4.ip[1] = IP_ADDRESS_1;
 800b42a:	4b1a      	ldr	r3, [pc, #104]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b42c:	22a8      	movs	r2, #168	; 0xa8
 800b42e:	705a      	strb	r2, [r3, #1]
	bsp.eeprom.structure.ip4.ip[2] = IP_ADDRESS_2;
 800b430:	4b18      	ldr	r3, [pc, #96]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b432:	2201      	movs	r2, #1
 800b434:	709a      	strb	r2, [r3, #2]
	bsp.eeprom.structure.ip4.ip[3] = IP_ADDRESS_3;
 800b436:	4b17      	ldr	r3, [pc, #92]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b438:	227b      	movs	r2, #123	; 0x7b
 800b43a:	70da      	strb	r2, [r3, #3]

	bsp.eeprom.structure.ip4.netmask[0] = NETMASK_ADDRESS_0;
 800b43c:	4b15      	ldr	r3, [pc, #84]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b43e:	22ff      	movs	r2, #255	; 0xff
 800b440:	711a      	strb	r2, [r3, #4]
	bsp.eeprom.structure.ip4.netmask[1] = NETMASK_ADDRESS_1;
 800b442:	4b14      	ldr	r3, [pc, #80]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b444:	22ff      	movs	r2, #255	; 0xff
 800b446:	715a      	strb	r2, [r3, #5]
	bsp.eeprom.structure.ip4.netmask[2] = NETMASK_ADDRESS_2;
 800b448:	4b12      	ldr	r3, [pc, #72]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b44a:	22ff      	movs	r2, #255	; 0xff
 800b44c:	719a      	strb	r2, [r3, #6]
	bsp.eeprom.structure.ip4.netmask[3] = NETMASK_ADDRESS_3;
 800b44e:	4b11      	ldr	r3, [pc, #68]	; (800b494 <BSP_Init_DefualtEEPROM+0xb0>)
 800b450:	2200      	movs	r2, #0
 800b452:	71da      	strb	r2, [r3, #7]



	strncpy(bsp.eeprom.structure.password, PASSWORD, STRING_LENGTH);
 800b454:	2210      	movs	r2, #16
 800b456:	4910      	ldr	r1, [pc, #64]	; (800b498 <BSP_Init_DefualtEEPROM+0xb4>)
 800b458:	4810      	ldr	r0, [pc, #64]	; (800b49c <BSP_Init_DefualtEEPROM+0xb8>)
 800b45a:	f019 fbab 	bl	8024bb4 <strncpy>
	strncpy(bsp.eeprom.structure.info.manufacturer, SCPI_IDN1, STRING_LENGTH);
 800b45e:	2210      	movs	r2, #16
 800b460:	490f      	ldr	r1, [pc, #60]	; (800b4a0 <BSP_Init_DefualtEEPROM+0xbc>)
 800b462:	4810      	ldr	r0, [pc, #64]	; (800b4a4 <BSP_Init_DefualtEEPROM+0xc0>)
 800b464:	f019 fba6 	bl	8024bb4 <strncpy>
	strncpy(bsp.eeprom.structure.info.device, SCPI_IDN2, STRING_LENGTH);
 800b468:	2210      	movs	r2, #16
 800b46a:	490f      	ldr	r1, [pc, #60]	; (800b4a8 <BSP_Init_DefualtEEPROM+0xc4>)
 800b46c:	480f      	ldr	r0, [pc, #60]	; (800b4ac <BSP_Init_DefualtEEPROM+0xc8>)
 800b46e:	f019 fba1 	bl	8024bb4 <strncpy>
	strncpy(bsp.eeprom.structure.info.serial_number, SCPI_IDN4, STRING_LENGTH);
 800b472:	2210      	movs	r2, #16
 800b474:	490e      	ldr	r1, [pc, #56]	; (800b4b0 <BSP_Init_DefualtEEPROM+0xcc>)
 800b476:	480f      	ldr	r0, [pc, #60]	; (800b4b4 <BSP_Init_DefualtEEPROM+0xd0>)
 800b478:	f019 fb9c 	bl	8024bb4 <strncpy>
	strncpy(bsp.eeprom.structure.info.software_version, SCPI_IDN3, STRING_LENGTH);
 800b47c:	2210      	movs	r2, #16
 800b47e:	490e      	ldr	r1, [pc, #56]	; (800b4b8 <BSP_Init_DefualtEEPROM+0xd4>)
 800b480:	480e      	ldr	r0, [pc, #56]	; (800b4bc <BSP_Init_DefualtEEPROM+0xd8>)
 800b482:	f019 fb97 	bl	8024bb4 <strncpy>
	memset(bsp.eeprom.structure.calib_string, 0, sizeof(bsp.eeprom.structure.calib_string));
 800b486:	2210      	movs	r2, #16
 800b488:	2100      	movs	r1, #0
 800b48a:	480d      	ldr	r0, [pc, #52]	; (800b4c0 <BSP_Init_DefualtEEPROM+0xdc>)
 800b48c:	f018 faa9 	bl	80239e2 <memset>

}
 800b490:	bf00      	nop
 800b492:	bd80      	pop	{r7, pc}
 800b494:	200052f0 	.word	0x200052f0
 800b498:	08028f14 	.word	0x08028f14
 800b49c:	20005344 	.word	0x20005344
 800b4a0:	08028f20 	.word	0x08028f20
 800b4a4:	20005304 	.word	0x20005304
 800b4a8:	08028f24 	.word	0x08028f24
 800b4ac:	20005314 	.word	0x20005314
 800b4b0:	08028f30 	.word	0x08028f30
 800b4b4:	20005324 	.word	0x20005324
 800b4b8:	08028f40 	.word	0x08028f40
 800b4bc:	20005334 	.word	0x20005334
 800b4c0:	20005354 	.word	0x20005354

0800b4c4 <BSP_Init_IP4Current>:

static void BSP_Init_IP4Current()
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	af00      	add	r7, sp, #0
	bsp.ip4.MAC[0] = bsp.eeprom.structure.ip4.MAC[0];
 800b4c8:	4b2f      	ldr	r3, [pc, #188]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4ca:	7b1a      	ldrb	r2, [r3, #12]
 800b4cc:	4b2e      	ldr	r3, [pc, #184]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4ce:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	bsp.ip4.MAC[1] = bsp.eeprom.structure.ip4.MAC[1];
 800b4d2:	4b2d      	ldr	r3, [pc, #180]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4d4:	7b5a      	ldrb	r2, [r3, #13]
 800b4d6:	4b2c      	ldr	r3, [pc, #176]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4d8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	bsp.ip4.MAC[2] = bsp.eeprom.structure.ip4.MAC[2];
 800b4dc:	4b2a      	ldr	r3, [pc, #168]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4de:	7b9a      	ldrb	r2, [r3, #14]
 800b4e0:	4b29      	ldr	r3, [pc, #164]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	bsp.ip4.MAC[3] = bsp.eeprom.structure.ip4.MAC[3];
 800b4e6:	4b28      	ldr	r3, [pc, #160]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4e8:	7bda      	ldrb	r2, [r3, #15]
 800b4ea:	4b27      	ldr	r3, [pc, #156]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	bsp.ip4.MAC[4] = bsp.eeprom.structure.ip4.MAC[4];
 800b4f0:	4b25      	ldr	r3, [pc, #148]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4f2:	7c1a      	ldrb	r2, [r3, #16]
 800b4f4:	4b24      	ldr	r3, [pc, #144]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4f6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	bsp.ip4.MAC[5] = bsp.eeprom.structure.ip4.MAC[5];
 800b4fa:	4b23      	ldr	r3, [pc, #140]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b4fc:	7c5a      	ldrb	r2, [r3, #17]
 800b4fe:	4b22      	ldr	r3, [pc, #136]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b500:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

	bsp.ip4.gateway[0] = bsp.eeprom.structure.ip4.gateway[0];
 800b504:	4b20      	ldr	r3, [pc, #128]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b506:	7a1a      	ldrb	r2, [r3, #8]
 800b508:	4b1f      	ldr	r3, [pc, #124]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b50a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	bsp.ip4.gateway[1] = bsp.eeprom.structure.ip4.gateway[1];
 800b50e:	4b1e      	ldr	r3, [pc, #120]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b510:	7a5a      	ldrb	r2, [r3, #9]
 800b512:	4b1d      	ldr	r3, [pc, #116]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b514:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	bsp.ip4.gateway[2] = bsp.eeprom.structure.ip4.gateway[2];
 800b518:	4b1b      	ldr	r3, [pc, #108]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b51a:	7a9a      	ldrb	r2, [r3, #10]
 800b51c:	4b1a      	ldr	r3, [pc, #104]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b51e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	bsp.ip4.gateway[3] = bsp.eeprom.structure.ip4.gateway[3];
 800b522:	4b19      	ldr	r3, [pc, #100]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b524:	7ada      	ldrb	r2, [r3, #11]
 800b526:	4b18      	ldr	r3, [pc, #96]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b528:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	bsp.ip4.ip[0] = bsp.eeprom.structure.ip4.ip[0];
 800b52c:	4b16      	ldr	r3, [pc, #88]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b52e:	781a      	ldrb	r2, [r3, #0]
 800b530:	4b15      	ldr	r3, [pc, #84]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b532:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	bsp.ip4.ip[1] = bsp.eeprom.structure.ip4.ip[1];
 800b536:	4b14      	ldr	r3, [pc, #80]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b538:	785a      	ldrb	r2, [r3, #1]
 800b53a:	4b13      	ldr	r3, [pc, #76]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b53c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	bsp.ip4.ip[2] = bsp.eeprom.structure.ip4.ip[2];
 800b540:	4b11      	ldr	r3, [pc, #68]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b542:	789a      	ldrb	r2, [r3, #2]
 800b544:	4b10      	ldr	r3, [pc, #64]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b546:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	bsp.ip4.ip[3] = bsp.eeprom.structure.ip4.ip[3];
 800b54a:	4b0f      	ldr	r3, [pc, #60]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b54c:	78da      	ldrb	r2, [r3, #3]
 800b54e:	4b0e      	ldr	r3, [pc, #56]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b550:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

	bsp.ip4.netmask[0] = bsp.eeprom.structure.ip4.netmask[0];
 800b554:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b556:	791a      	ldrb	r2, [r3, #4]
 800b558:	4b0b      	ldr	r3, [pc, #44]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b55a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	bsp.ip4.netmask[1] = bsp.eeprom.structure.ip4.netmask[1];
 800b55e:	4b0a      	ldr	r3, [pc, #40]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b560:	795a      	ldrb	r2, [r3, #5]
 800b562:	4b09      	ldr	r3, [pc, #36]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b564:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	bsp.ip4.netmask[2] = bsp.eeprom.structure.ip4.netmask[2];
 800b568:	4b07      	ldr	r3, [pc, #28]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b56a:	799a      	ldrb	r2, [r3, #6]
 800b56c:	4b06      	ldr	r3, [pc, #24]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b56e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	bsp.ip4.netmask[3] = bsp.eeprom.structure.ip4.netmask[3];
 800b572:	4b05      	ldr	r3, [pc, #20]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b574:	79da      	ldrb	r2, [r3, #7]
 800b576:	4b04      	ldr	r3, [pc, #16]	; (800b588 <BSP_Init_IP4Current+0xc4>)
 800b578:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 800b57c:	bf00      	nop
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	200052f0 	.word	0x200052f0

0800b58c <BSP_Init>:

BSP_StatusTypeDef BSP_Init()
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
	BSP_StatusTypeDef eeprom_status;

	BSP_Init_Common();
 800b592:	f7ff fefb 	bl	800b38c <BSP_Init_Common>

	if(!(LL_GPIO_ReadInputPort(MCU_DEFAULT_GPIO_Port) & MCU_DEFAULT_Pin))
 800b596:	4829      	ldr	r0, [pc, #164]	; (800b63c <BSP_Init+0xb0>)
 800b598:	f7ff feec 	bl	800b374 <LL_GPIO_ReadInputPort>
 800b59c:	4603      	mov	r3, r0
 800b59e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d108      	bne.n	800b5b8 <BSP_Init+0x2c>
	{
		BSP_Init_DefualtEEPROM();
 800b5a6:	f7ff ff1d 	bl	800b3e4 <BSP_Init_DefualtEEPROM>
		BSP_Init_IP4Current();
 800b5aa:	f7ff ff8b 	bl	800b4c4 <BSP_Init_IP4Current>
		bsp.default_cfg = 1;
 800b5ae:	4b24      	ldr	r3, [pc, #144]	; (800b640 <BSP_Init+0xb4>)
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800b5b6:	e03c      	b.n	800b632 <BSP_Init+0xa6>
	}
	else
	{
		eeprom_status = EEPROM_Status();
 800b5b8:	f7ff fbb5 	bl	800ad26 <EEPROM_Status>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	71fb      	strb	r3, [r7, #7]

		switch (eeprom_status)
 800b5c0:	79fb      	ldrb	r3, [r7, #7]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d019      	beq.n	800b5fa <BSP_Init+0x6e>
 800b5c6:	2b05      	cmp	r3, #5
 800b5c8:	d127      	bne.n	800b61a <BSP_Init+0x8e>
		{
			case BSP_EEPROM_EMPTY:
			{
				BSP_Init_DefualtEEPROM();
 800b5ca:	f7ff ff0b 	bl	800b3e4 <BSP_Init_DefualtEEPROM>
				eeprom_status = EEPROM_Write(&bsp.eeprom, EEPROM_CFG_SIZE);
 800b5ce:	2178      	movs	r1, #120	; 0x78
 800b5d0:	481b      	ldr	r0, [pc, #108]	; (800b640 <BSP_Init+0xb4>)
 800b5d2:	f7ff fb45 	bl	800ac60 <EEPROM_Write>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	71fb      	strb	r3, [r7, #7]
				eeprom_status = EEPROM_Read(&bsp.eeprom, EEPROM_CFG_SIZE);
 800b5da:	2178      	movs	r1, #120	; 0x78
 800b5dc:	4818      	ldr	r0, [pc, #96]	; (800b640 <BSP_Init+0xb4>)
 800b5de:	f7ff fb79 	bl	800acd4 <EEPROM_Read>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	71fb      	strb	r3, [r7, #7]
				if(BSP_OK == eeprom_status)
 800b5e6:	79fb      	ldrb	r3, [r7, #7]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d11f      	bne.n	800b62c <BSP_Init+0xa0>
				{
					BSP_Init_IP4Current();
 800b5ec:	f7ff ff6a 	bl	800b4c4 <BSP_Init_IP4Current>
					bsp.default_cfg = 0;
 800b5f0:	4b13      	ldr	r3, [pc, #76]	; (800b640 <BSP_Init+0xb4>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
				}; break;
 800b5f8:	e018      	b.n	800b62c <BSP_Init+0xa0>
			}
			case BSP_OK:
			{
				eeprom_status = EEPROM_Read(&bsp.eeprom, EEPROM_CFG_SIZE);
 800b5fa:	2178      	movs	r1, #120	; 0x78
 800b5fc:	4810      	ldr	r0, [pc, #64]	; (800b640 <BSP_Init+0xb4>)
 800b5fe:	f7ff fb69 	bl	800acd4 <EEPROM_Read>
 800b602:	4603      	mov	r3, r0
 800b604:	71fb      	strb	r3, [r7, #7]
				if(BSP_OK == eeprom_status)
 800b606:	79fb      	ldrb	r3, [r7, #7]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d111      	bne.n	800b630 <BSP_Init+0xa4>
				{
					BSP_Init_IP4Current();
 800b60c:	f7ff ff5a 	bl	800b4c4 <BSP_Init_IP4Current>
					bsp.default_cfg = 0;
 800b610:	4b0b      	ldr	r3, [pc, #44]	; (800b640 <BSP_Init+0xb4>)
 800b612:	2200      	movs	r2, #0
 800b614:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
				}; break;
 800b618:	e00a      	b.n	800b630 <BSP_Init+0xa4>
			}
			default:
			{
				BSP_Init_DefualtEEPROM();
 800b61a:	f7ff fee3 	bl	800b3e4 <BSP_Init_DefualtEEPROM>
				BSP_Init_IP4Current();
 800b61e:	f7ff ff51 	bl	800b4c4 <BSP_Init_IP4Current>
				bsp.default_cfg = 1;
 800b622:	4b07      	ldr	r3, [pc, #28]	; (800b640 <BSP_Init+0xb4>)
 800b624:	2201      	movs	r2, #1
 800b626:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
			}; break;
 800b62a:	e002      	b.n	800b632 <BSP_Init+0xa6>
				}; break;
 800b62c:	bf00      	nop
 800b62e:	e000      	b.n	800b632 <BSP_Init+0xa6>
				}; break;
 800b630:	bf00      	nop
		}

	}

	return eeprom_status;
 800b632:	79fb      	ldrb	r3, [r7, #7]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	40021000 	.word	0x40021000
 800b640:	200052f0 	.word	0x200052f0

0800b644 <__NVIC_SystemReset>:
{
 800b644:	b480      	push	{r7}
 800b646:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b648:	f3bf 8f4f 	dsb	sy
}
 800b64c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b64e:	4b06      	ldr	r3, [pc, #24]	; (800b668 <__NVIC_SystemReset+0x24>)
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b656:	4904      	ldr	r1, [pc, #16]	; (800b668 <__NVIC_SystemReset+0x24>)
 800b658:	4b04      	ldr	r3, [pc, #16]	; (800b66c <__NVIC_SystemReset+0x28>)
 800b65a:	4313      	orrs	r3, r2
 800b65c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b65e:	f3bf 8f4f 	dsb	sy
}
 800b662:	bf00      	nop
    __NOP();
 800b664:	bf00      	nop
 800b666:	e7fd      	b.n	800b664 <__NVIC_SystemReset+0x20>
 800b668:	e000ed00 	.word	0xe000ed00
 800b66c:	05fa0004 	.word	0x05fa0004

0800b670 <SCPI_GetChannels>:
#include "AD7980.h"

extern struct _bsp bsp;

size_t SCPI_GetChannels(scpi_t* context, scpi_channel_value_t array[])
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b096      	sub	sp, #88	; 0x58
 800b674:	af04      	add	r7, sp, #16
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
    scpi_parameter_t channel_list_param;
    // scpi_channel_value_t array[MAXROW * MAXCOL]; /* array which holds values in order (2D) */
    size_t chanlst_idx; /* index for channel list */
    size_t arr_idx = 0; /* index for array */
 800b67a:	2300      	movs	r3, #0
 800b67c:	643b      	str	r3, [r7, #64]	; 0x40
    size_t n, m = 1; /* counters for row (n) and columns (m) */
 800b67e:	2301      	movs	r3, #1
 800b680:	63bb      	str	r3, [r7, #56]	; 0x38
    scpi_expr_result_t res;

    /* get channel list */
    if (SCPI_Parameter(context, &channel_list_param, TRUE)) {
 800b682:	f107 031c 	add.w	r3, r7, #28
 800b686:	2201      	movs	r2, #1
 800b688:	4619      	mov	r1, r3
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f016 fa98 	bl	8021bc0 <SCPI_Parameter>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	f000 8110 	beq.w	800b8b8 <SCPI_GetChannels+0x248>
        scpi_bool_t is_range;
        int32_t values_from[MAXDIM];
        int32_t values_to[MAXDIM];
        size_t dimensions;

        bool for_stop_row = FALSE; /* true if iteration for rows has to stop */
 800b698:	2300      	movs	r3, #0
 800b69a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        bool for_stop_col = FALSE; /* true if iteration for columns has to stop */
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        int32_t dir_row = 1; /* direction of counter for rows, +/-1 */
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t dir_col = 1; /* direction of counter for columns, +/-1 */
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* the next statement is valid usage and it gets only real number of dimensions for the first item (index 0) */
        if (!SCPI_ExprChannelListEntry(context, &channel_list_param, 0, &is_range, NULL, NULL, 0, &dimensions)) {
 800b6ac:	f107 021b 	add.w	r2, r7, #27
 800b6b0:	f107 011c 	add.w	r1, r7, #28
 800b6b4:	f107 030c 	add.w	r3, r7, #12
 800b6b8:	9303      	str	r3, [sp, #12]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9302      	str	r3, [sp, #8]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	9301      	str	r3, [sp, #4]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f013 ffee 	bl	801f6ac <SCPI_ExprChannelListEntry>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f040 80f0 	bne.w	800b8b8 <SCPI_GetChannels+0x248>
            chanlst_idx = 0; /* call first index */
 800b6d8:	2300      	movs	r3, #0
 800b6da:	647b      	str	r3, [r7, #68]	; 0x44
            arr_idx = 0; /* set arr_idx to 0 */
 800b6dc:	2300      	movs	r3, #0
 800b6de:	643b      	str	r3, [r7, #64]	; 0x40
            do { /* if valid, iterate over channel_list_param index while res == valid (do-while cause we have to do it once) */
                res = SCPI_ExprChannelListEntry(context, &channel_list_param, chanlst_idx, &is_range, values_from, values_to, 4, &dimensions);
 800b6e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6e2:	f107 001b 	add.w	r0, r7, #27
 800b6e6:	f107 011c 	add.w	r1, r7, #28
 800b6ea:	f107 030c 	add.w	r3, r7, #12
 800b6ee:	9303      	str	r3, [sp, #12]
 800b6f0:	2304      	movs	r3, #4
 800b6f2:	9302      	str	r3, [sp, #8]
 800b6f4:	f107 0310 	add.w	r3, r7, #16
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	f107 0314 	add.w	r3, r7, #20
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	4603      	mov	r3, r0
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f013 ffd2 	bl	801f6ac <SCPI_ExprChannelListEntry>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                if (is_range == FALSE) { /* still can have multiple dimensions */
 800b70e:	7efb      	ldrb	r3, [r7, #27]
 800b710:	f083 0301 	eor.w	r3, r3, #1
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d02e      	beq.n	800b778 <SCPI_GetChannels+0x108>
                    if (dimensions == 1) {
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d10c      	bne.n	800b73a <SCPI_GetChannels+0xca>
                        /* here we have our values
                         * row == values_from[0]
                         * col == 0 (fixed number)
                         * call a function or something */
                        array[arr_idx].row = values_from[0];
 800b720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	4413      	add	r3, r2
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	601a      	str	r2, [r3, #0]
                        array[arr_idx].col = 0;
 800b72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b72e:	00db      	lsls	r3, r3, #3
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	4413      	add	r3, r2
 800b734:	2200      	movs	r2, #0
 800b736:	605a      	str	r2, [r3, #4]
 800b738:	e013      	b.n	800b762 <SCPI_GetChannels+0xf2>
                    } else if (dimensions == 2) {
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d10c      	bne.n	800b75a <SCPI_GetChannels+0xea>
                        /* here we have our values
                         * row == values_fom[0]
                         * col == values_from[1]
                         * call a function or something */
                        array[arr_idx].row = values_from[0];
 800b740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b742:	00db      	lsls	r3, r3, #3
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	4413      	add	r3, r2
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	601a      	str	r2, [r3, #0]
                        array[arr_idx].col = values_from[1];
 800b74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b74e:	00db      	lsls	r3, r3, #3
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	4413      	add	r3, r2
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	605a      	str	r2, [r3, #4]
 800b758:	e003      	b.n	800b762 <SCPI_GetChannels+0xf2>
                    } else {
                        return arr_idx = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	643b      	str	r3, [r7, #64]	; 0x40
 800b75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b760:	e0ab      	b.n	800b8ba <SCPI_GetChannels+0x24a>
                    }
                    arr_idx++; /* inkrement array where we want to save our values to, not neccessary otherwise */
 800b762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b764:	3301      	adds	r3, #1
 800b766:	643b      	str	r3, [r7, #64]	; 0x40
                    if (arr_idx >= MAXROW * MAXCOL) {
 800b768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76a:	2b05      	cmp	r3, #5
 800b76c:	f240 8089 	bls.w	800b882 <SCPI_GetChannels+0x212>
                        return arr_idx = 0;
 800b770:	2300      	movs	r3, #0
 800b772:	643b      	str	r3, [r7, #64]	; 0x40
 800b774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b776:	e0a0      	b.n	800b8ba <SCPI_GetChannels+0x24a>
                    }
                } else if (is_range == TRUE) {
 800b778:	7efb      	ldrb	r3, [r7, #27]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d07d      	beq.n	800b87a <SCPI_GetChannels+0x20a>
                    if (values_from[0] > values_to[0]) {
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	429a      	cmp	r2, r3
 800b784:	dd03      	ble.n	800b78e <SCPI_GetChannels+0x11e>
                        dir_row = -1; /* we have to decrement from values_from */
 800b786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b78a:	633b      	str	r3, [r7, #48]	; 0x30
 800b78c:	e001      	b.n	800b792 <SCPI_GetChannels+0x122>
                    } else { /* if (values_from[0] < values_to[0]) */
                        dir_row = +1; /* default, we increment from values_from */
 800b78e:	2301      	movs	r3, #1
 800b790:	633b      	str	r3, [r7, #48]	; 0x30
                    }

                    /* iterating over rows, do ilwip nvic gpiot once -> set for_stop_row = false
                     * needed if there is channel list index isn't at end yet */
                    for_stop_row = FALSE;
 800b792:	2300      	movs	r3, #0
 800b794:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    for (n = values_from[0]; for_stop_row == FALSE; n += dir_row) {
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b79c:	e065      	b.n	800b86a <SCPI_GetChannels+0x1fa>
                        /* usual case for ranges, 2 dimensions */
                        if (dimensions == 2) {
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d13d      	bne.n	800b820 <SCPI_GetChannels+0x1b0>
                            if (values_from[1] > values_to[1]) {
 800b7a4:	69ba      	ldr	r2, [r7, #24]
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	dd03      	ble.n	800b7b4 <SCPI_GetChannels+0x144>
                                dir_col = -1;
 800b7ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7b2:	e005      	b.n	800b7c0 <SCPI_GetChannels+0x150>
                            } else if (values_from[1] < values_to[1]) {
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	da01      	bge.n	800b7c0 <SCPI_GetChannels+0x150>
                                dir_col = +1;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	62fb      	str	r3, [r7, #44]	; 0x2c
                            }
                            /* iterating over columns, do it at least once -> set for_stop_col = false
                             * needed if there is channel list index isn't at end yet */
                            for_stop_col = FALSE;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                            for (m = values_from[1]; for_stop_col == FALSE; m += dir_col) {
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7ca:	e021      	b.n	800b810 <SCPI_GetChannels+0x1a0>
                                /* here we have our values
                                 * row == n
                                 * col == m
                                 * call a function or something */
                                array[arr_idx].row = n;
 800b7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ce:	00db      	lsls	r3, r3, #3
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7d6:	601a      	str	r2, [r3, #0]
                                array[arr_idx].col = m;
 800b7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	4413      	add	r3, r2
 800b7e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7e2:	605a      	str	r2, [r3, #4]
                                arr_idx++;
 800b7e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	643b      	str	r3, [r7, #64]	; 0x40
                                if (arr_idx >= MAXROW * MAXCOL) {
 800b7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ec:	2b05      	cmp	r3, #5
 800b7ee:	d903      	bls.n	800b7f8 <SCPI_GetChannels+0x188>
                                    return arr_idx = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	643b      	str	r3, [r7, #64]	; 0x40
 800b7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f6:	e060      	b.n	800b8ba <SCPI_GetChannels+0x24a>
                                }
                                if (m == (size_t)values_to[1]) {
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d102      	bne.n	800b808 <SCPI_GetChannels+0x198>
                                    /* endpoint reached, stop column for-loop */
                                    for_stop_col = TRUE;
 800b802:	2301      	movs	r3, #1
 800b804:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                            for (m = values_from[1]; for_stop_col == FALSE; m += dir_col) {
 800b808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b80c:	4413      	add	r3, r2
 800b80e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b810:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b814:	f083 0301 	eor.w	r3, r3, #1
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1d6      	bne.n	800b7cc <SCPI_GetChannels+0x15c>
 800b81e:	e018      	b.n	800b852 <SCPI_GetChannels+0x1e2>
                                }
                            }
                            /* special case for range, example: (@2!1) */
                        } else if (dimensions == 1) {
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d115      	bne.n	800b852 <SCPI_GetChannels+0x1e2>
                            /* here we have values
                             * row == n
                             * col == 0 (fixed number)
                             * call function or sth. */
                            array[arr_idx].row = n;
 800b826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b828:	00db      	lsls	r3, r3, #3
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	4413      	add	r3, r2
 800b82e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b830:	601a      	str	r2, [r3, #0]
                            array[arr_idx].col = 0;
 800b832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b834:	00db      	lsls	r3, r3, #3
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	4413      	add	r3, r2
 800b83a:	2200      	movs	r2, #0
 800b83c:	605a      	str	r2, [r3, #4]
                            arr_idx++;
 800b83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b840:	3301      	adds	r3, #1
 800b842:	643b      	str	r3, [r7, #64]	; 0x40
                            if (arr_idx >= MAXROW * MAXCOL) {
 800b844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b846:	2b05      	cmp	r3, #5
 800b848:	d903      	bls.n	800b852 <SCPI_GetChannels+0x1e2>
                                return arr_idx = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	643b      	str	r3, [r7, #64]	; 0x40
 800b84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b850:	e033      	b.n	800b8ba <SCPI_GetChannels+0x24a>
                            }
                        }
                        if (n == (size_t)values_to[0]) {
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	461a      	mov	r2, r3
 800b856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b858:	4293      	cmp	r3, r2
 800b85a:	d102      	bne.n	800b862 <SCPI_GetChannels+0x1f2>
                            /* endpoint reached, stop row for-loop */
                            for_stop_row = TRUE;
 800b85c:	2301      	movs	r3, #1
 800b85e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    for (n = values_from[0]; for_stop_row == FALSE; n += dir_row) {
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b866:	4413      	add	r3, r2
 800b868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b86a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b86e:	f083 0301 	eor.w	r3, r3, #1
 800b872:	b2db      	uxtb	r3, r3
 800b874:	2b00      	cmp	r3, #0
 800b876:	d192      	bne.n	800b79e <SCPI_GetChannels+0x12e>
 800b878:	e003      	b.n	800b882 <SCPI_GetChannels+0x212>
                        }
                    }


                } else {
                    return arr_idx = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	643b      	str	r3, [r7, #64]	; 0x40
 800b87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b880:	e01b      	b.n	800b8ba <SCPI_GetChannels+0x24a>
                }
                /* increase index */
                chanlst_idx++;
 800b882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b884:	3301      	adds	r3, #1
 800b886:	647b      	str	r3, [r7, #68]	; 0x44
            } while (SCPI_EXPR_OK == SCPI_ExprChannelListEntry(context, &channel_list_param, chanlst_idx, &is_range, values_from, values_to, 4, &dimensions));
 800b888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b88a:	f107 001b 	add.w	r0, r7, #27
 800b88e:	f107 011c 	add.w	r1, r7, #28
 800b892:	f107 030c 	add.w	r3, r7, #12
 800b896:	9303      	str	r3, [sp, #12]
 800b898:	2304      	movs	r3, #4
 800b89a:	9302      	str	r3, [sp, #8]
 800b89c:	f107 0310 	add.w	r3, r7, #16
 800b8a0:	9301      	str	r3, [sp, #4]
 800b8a2:	f107 0314 	add.w	r3, r7, #20
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f013 fefe 	bl	801f6ac <SCPI_ExprChannelListEntry>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f43f af14 	beq.w	800b6e0 <SCPI_GetChannels+0x70>
        }
        /* do something at the end if needed */
        /* array[arr_idx].row = 0; */
        /* array[arr_idx].col = 0; */
    }
    return arr_idx;
 800b8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3748      	adds	r7, #72	; 0x48
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <SCPI_Rst>:


static scpi_result_t SCPI_Rst(scpi_t * context)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b082      	sub	sp, #8
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]

	NVIC_SystemReset();
 800b8ca:	f7ff febb 	bl	800b644 <__NVIC_SystemReset>
	...

0800b8d0 <SCPI_IdnQ>:
    return SCPI_RES_OK;
}

static scpi_result_t SCPI_IdnQ(scpi_t * context)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
	int32_t ptr = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	60fb      	str	r3, [r7, #12]
	static char info[46] = {'\0'};

    for (uint8_t i = 0; i < 4; i++)
 800b8dc:	2300      	movs	r3, #0
 800b8de:	72fb      	strb	r3, [r7, #11]
 800b8e0:	e01d      	b.n	800b91e <SCPI_IdnQ+0x4e>
    {
        if (context->idn[i])
 800b8e2:	7afb      	ldrb	r3, [r7, #11]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	3320      	adds	r3, #32
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d012      	beq.n	800b918 <SCPI_IdnQ+0x48>
        {
        	ptr += snprintf(info + ptr, sizeof(info) - ptr, "%s,", context->idn[i] );
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	4a10      	ldr	r2, [pc, #64]	; (800b938 <SCPI_IdnQ+0x68>)
 800b8f6:	1898      	adds	r0, r3, r2
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f1c3 012e 	rsb	r1, r3, #46	; 0x2e
 800b8fe:	7afb      	ldrb	r3, [r7, #11]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	3320      	adds	r3, #32
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	4a0c      	ldr	r2, [pc, #48]	; (800b93c <SCPI_IdnQ+0x6c>)
 800b90c:	f019 f856 	bl	80249bc <sniprintf>
 800b910:	4602      	mov	r2, r0
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	4413      	add	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < 4; i++)
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	3301      	adds	r3, #1
 800b91c:	72fb      	strb	r3, [r7, #11]
 800b91e:	7afb      	ldrb	r3, [r7, #11]
 800b920:	2b03      	cmp	r3, #3
 800b922:	d9de      	bls.n	800b8e2 <SCPI_IdnQ+0x12>
        }
        else{}
    }

    SCPI_ResultCharacters(context, info, 45);
 800b924:	222d      	movs	r2, #45	; 0x2d
 800b926:	4904      	ldr	r1, [pc, #16]	; (800b938 <SCPI_IdnQ+0x68>)
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f015 fe9c 	bl	8021666 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 800b92e:	2301      	movs	r3, #1
}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	20007680 	.word	0x20007680
 800b93c:	08028f48 	.word	0x08028f48

0800b940 <SCPI_TS>:


scpi_result_t SCPI_TS(scpi_t * context)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]

	//AD5322_SetVOUTA(volt);
	FGEN_SetAmplitude(volt);
	FGEN_SetFrequency(freq); */
	HAL_StatusTypeDef status;
	status = AD7980_ReadData(1024);
 800b948:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b94c:	f7fe fbec 	bl	800a128 <AD7980_ReadData>
 800b950:	4603      	mov	r3, r0
 800b952:	73fb      	strb	r3, [r7, #15]

	//SCPI_ResultArrayFloat(context, meas, 2, SCPI_FORMAT_ASCII);
    return SCPI_RES_OK;
 800b954:	2301      	movs	r3, #1
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <SCPI_FetchQ>:
 * @NOTE:
 *
 */

scpi_result_t SCPI_FetchQ(scpi_t * context)
{
 800b95e:	b480      	push	{r7}
 800b960:	b083      	sub	sp, #12
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800b966:	2301      	movs	r3, #1
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <SCPI_FetchArrayQ>:
 * @NOTE:
 *
 */

scpi_result_t SCPI_FetchArrayQ(scpi_t * context)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800b97c:	2301      	movs	r3, #1
}
 800b97e:	4618      	mov	r0, r3
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <SCPI_FetchArrayVoltageQ>:
 * @NOTE:
 *
 */

scpi_result_t SCPI_FetchArrayVoltageQ(scpi_t * context)
{
 800b98a:	b480      	push	{r7}
 800b98c:	b083      	sub	sp, #12
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800b992:	2301      	movs	r3, #1
}
 800b994:	4618      	mov	r0, r3
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <SCPI_FetchArrayCurrentQ>:
 * @NOTE:
 *
 */

scpi_result_t SCPI_FetchArrayCurrentQ(scpi_t * context)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800b9a8:	2301      	movs	r3, #1
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <SCPI_MeasureQ>:

#include "scpi_measure.h"


scpi_result_t SCPI_MeasureQ(scpi_t * context)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b083      	sub	sp, #12
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800b9be:	2301      	movs	r3, #1
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <SCPI_MeasureCurrentQ>:

scpi_result_t SCPI_MeasureCurrentQ(scpi_t * context)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800b9d4:	2301      	movs	r3, #1
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <SCPI_MeasureVoltageQ>:

scpi_result_t SCPI_MeasureVoltageQ(scpi_t * context)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800b9ea:	2301      	movs	r3, #1
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <SCPI_SenseCurrentDCProtectionLevelPositive>:
 */

#include "scpi_sense.h"

scpi_result_t SCPI_SenseCurrentDCProtectionLevelPositive(scpi_t* context)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800ba00:	2301      	movs	r3, #1
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <SCPI_SenseCurrentDCProtectionLevelPositiveQ>:

scpi_result_t SCPI_SenseCurrentDCProtectionLevelPositiveQ(scpi_t* context)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b083      	sub	sp, #12
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800ba16:	2301      	movs	r3, #1
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <SCPI_SenseCurrentDCProtectionLevelNegative>:

scpi_result_t SCPI_SenseCurrentDCProtectionLevelNegative(scpi_t* context)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800ba2c:	2301      	movs	r3, #1
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <SCPI_Write>:
    .control_io_listen = NULL,
    .control_io = NULL,
    .evtQueue = 0,
};

size_t SCPI_Write(scpi_t * context, const char * data, size_t len) {
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b088      	sub	sp, #32
 800ba3e:	af02      	add	r7, sp, #8
 800ba40:	60f8      	str	r0, [r7, #12]
 800ba42:	60b9      	str	r1, [r7, #8]
 800ba44:	607a      	str	r2, [r7, #4]
    if (context->user_context != NULL) {
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d019      	beq.n	800ba82 <SCPI_Write+0x48>
        user_data_t * u = (user_data_t *) (context->user_context);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba52:	617b      	str	r3, [r7, #20]
        if (u->io) {
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d012      	beq.n	800ba82 <SCPI_Write+0x48>
        	osDelay(1);
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	f001 fedb 	bl	800d818 <osDelay>
        	return (netconn_write(u->io, data, len, NETCONN_NOFLAG) == ERR_OK) ? len : 0;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	6898      	ldr	r0, [r3, #8]
 800ba66:	2300      	movs	r3, #0
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	68b9      	ldr	r1, [r7, #8]
 800ba70:	f006 faba 	bl	8011fe8 <netconn_write_partly>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d101      	bne.n	800ba7e <SCPI_Write+0x44>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	e002      	b.n	800ba84 <SCPI_Write+0x4a>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e000      	b.n	800ba84 <SCPI_Write+0x4a>
        }
    }
    return 0;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context) {
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
    if (context->user_context != NULL) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d008      	beq.n	800baae <SCPI_Flush+0x22>
        user_data_t * u = (user_data_t *) (context->user_context);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baa0:	60fb      	str	r3, [r7, #12]
        if (u->io) {
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <SCPI_Flush+0x22>
            /* flush not implemented */
            return SCPI_RES_OK;
 800baaa:	2301      	movs	r3, #1
 800baac:	e000      	b.n	800bab0 <SCPI_Flush+0x24>
        }
    }
    return SCPI_RES_OK;
 800baae:	2301      	movs	r3, #1
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err) {
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
    (void) context;
    // BEEP
    iprintf("**ERROR: %ld, \"%s\"\r\n", (int32_t) err, SCPI_ErrorTranslate(err));
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	b21b      	sxth	r3, r3
 800baca:	4618      	mov	r0, r3
 800bacc:	f013 fb12 	bl	801f0f4 <SCPI_ErrorTranslate>
 800bad0:	4603      	mov	r3, r0
 800bad2:	461a      	mov	r2, r3
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	4804      	ldr	r0, [pc, #16]	; (800bae8 <SCPI_Error+0x2c>)
 800bad8:	f018 fe9a 	bl	8024810 <iprintf>
        /* Error LED ON */
    } else {
        /* No more errors in the queue */
        /* Error LED OFF */
    }
    return 0;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	08029510 	.word	0x08029510

0800baec <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 800baec:	b590      	push	{r4, r7, lr}
 800baee:	b08b      	sub	sp, #44	; 0x2c
 800baf0:	af02      	add	r7, sp, #8
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	70fb      	strb	r3, [r7, #3]
 800baf8:	4613      	mov	r3, r2
 800bafa:	803b      	strh	r3, [r7, #0]
    char b[16];

    if (SCPI_CTRL_SRQ == ctrl) {
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d106      	bne.n	800bb10 <SCPI_Control+0x24>
        iprintf("**SRQ: 0x%X (%d)\r\n", val, val);
 800bb02:	883b      	ldrh	r3, [r7, #0]
 800bb04:	883a      	ldrh	r2, [r7, #0]
 800bb06:	4619      	mov	r1, r3
 800bb08:	481c      	ldr	r0, [pc, #112]	; (800bb7c <SCPI_Control+0x90>)
 800bb0a:	f018 fe81 	bl	8024810 <iprintf>
 800bb0e:	e005      	b.n	800bb1c <SCPI_Control+0x30>
    } else {
        iprintf("**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
 800bb10:	78f9      	ldrb	r1, [r7, #3]
 800bb12:	883a      	ldrh	r2, [r7, #0]
 800bb14:	883b      	ldrh	r3, [r7, #0]
 800bb16:	481a      	ldr	r0, [pc, #104]	; (800bb80 <SCPI_Control+0x94>)
 800bb18:	f018 fe7a 	bl	8024810 <iprintf>
    }

    if (context->user_context != NULL) {
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d025      	beq.n	800bb70 <SCPI_Control+0x84>
        user_data_t * u = (user_data_t *) (context->user_context);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb28:	61fb      	str	r3, [r7, #28]
        if (u->control_io) {
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d01e      	beq.n	800bb70 <SCPI_Control+0x84>
            snprintf(b, sizeof (b), "SRQ%d\r\n", val);
 800bb32:	883b      	ldrh	r3, [r7, #0]
 800bb34:	f107 000c 	add.w	r0, r7, #12
 800bb38:	4a12      	ldr	r2, [pc, #72]	; (800bb84 <SCPI_Control+0x98>)
 800bb3a:	2110      	movs	r1, #16
 800bb3c:	f018 ff3e 	bl	80249bc <sniprintf>
            return netconn_write(u->control_io, b, strlen(b), NETCONN_NOCOPY) == ERR_OK ? SCPI_RES_OK : SCPI_RES_ERR;
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	68dc      	ldr	r4, [r3, #12]
 800bb44:	f107 030c 	add.w	r3, r7, #12
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7f4 fb6b 	bl	8000224 <strlen>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	f107 010c 	add.w	r1, r7, #12
 800bb54:	2300      	movs	r3, #0
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f006 fa44 	bl	8011fe8 <netconn_write_partly>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <SCPI_Control+0x7e>
 800bb66:	2301      	movs	r3, #1
 800bb68:	e003      	b.n	800bb72 <SCPI_Control+0x86>
 800bb6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb6e:	e000      	b.n	800bb72 <SCPI_Control+0x86>
        }
    }
    return SCPI_RES_OK;
 800bb70:	2301      	movs	r3, #1
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3724      	adds	r7, #36	; 0x24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd90      	pop	{r4, r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	08029528 	.word	0x08029528
 800bb80:	0802953c 	.word	0x0802953c
 800bb84:	08029558 	.word	0x08029558

0800bb88 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context) {
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]

    (void) context;

    return SCPI_RES_OK;
 800bb90:	2301      	movs	r3, #1
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
	...

0800bba0 <setEseReq>:
scpi_result_t SCPI_SystemCommTcpipControlQ(scpi_t * context) {
    SCPI_ResultInt(context, CONTROL_PORT);
    return SCPI_RES_OK;
}

static void setEseReq(void) {
 800bba0:	b580      	push	{r7, lr}
 800bba2:	af00      	add	r7, sp, #0
    SCPI_RegSetBits(&scpi_context, SCPI_REG_ESR, ESR_REQ);
 800bba4:	2202      	movs	r2, #2
 800bba6:	2102      	movs	r1, #2
 800bba8:	4802      	ldr	r0, [pc, #8]	; (800bbb4 <setEseReq+0x14>)
 800bbaa:	f014 f88d 	bl	801fcc8 <SCPI_RegSetBits>
}
 800bbae:	bf00      	nop
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	200075e8 	.word	0x200075e8

0800bbb8 <setError>:

static void setError(int16_t err) {
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	80fb      	strh	r3, [r7, #6]
    SCPI_ErrorPush(&scpi_context, err);
 800bbc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	4803      	ldr	r0, [pc, #12]	; (800bbd8 <setError+0x20>)
 800bbca:	f013 fa81 	bl	801f0d0 <SCPI_ErrorPush>
}
 800bbce:	bf00      	nop
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	200075e8 	.word	0x200075e8

0800bbdc <scpi_netconn_callback>:
    msg.param2 = err;

    xQueueSend(user_data.evtQueue, &msg, 1000);
}

void scpi_netconn_callback(struct netconn * conn, enum netconn_evt evt, u16_t len) {
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	70fb      	strb	r3, [r7, #3]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	803b      	strh	r3, [r7, #0]
    queue_event_t msg;
    (void) len;


    if (evt == NETCONN_EVT_RCVPLUS) {
 800bbec:	78fb      	ldrb	r3, [r7, #3]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d129      	bne.n	800bc46 <scpi_netconn_callback+0x6a>
        msg.cmd = SCPI_MSG_TEST;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	733b      	strb	r3, [r7, #12]
        if (conn == user_data.io) {
 800bbf6:	4b16      	ldr	r3, [pc, #88]	; (800bc50 <scpi_netconn_callback+0x74>)
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d102      	bne.n	800bc06 <scpi_netconn_callback+0x2a>
            msg.cmd = SCPI_MSG_IO;
 800bc00:	2304      	movs	r3, #4
 800bc02:	733b      	strb	r3, [r7, #12]
 800bc04:	e016      	b.n	800bc34 <scpi_netconn_callback+0x58>
        } else if (conn == user_data.io_listen) {
 800bc06:	4b12      	ldr	r3, [pc, #72]	; (800bc50 <scpi_netconn_callback+0x74>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d102      	bne.n	800bc16 <scpi_netconn_callback+0x3a>
            msg.cmd = SCPI_MSG_IO_LISTEN;
 800bc10:	2302      	movs	r3, #2
 800bc12:	733b      	strb	r3, [r7, #12]
 800bc14:	e00e      	b.n	800bc34 <scpi_netconn_callback+0x58>
        } else if (conn == user_data.control_io) {
 800bc16:	4b0e      	ldr	r3, [pc, #56]	; (800bc50 <scpi_netconn_callback+0x74>)
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d102      	bne.n	800bc26 <scpi_netconn_callback+0x4a>
            msg.cmd = SCPI_MSG_CONTROL_IO;
 800bc20:	2305      	movs	r3, #5
 800bc22:	733b      	strb	r3, [r7, #12]
 800bc24:	e006      	b.n	800bc34 <scpi_netconn_callback+0x58>
        } else if (conn == user_data.control_io_listen) {
 800bc26:	4b0a      	ldr	r3, [pc, #40]	; (800bc50 <scpi_netconn_callback+0x74>)
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d101      	bne.n	800bc34 <scpi_netconn_callback+0x58>
            msg.cmd = SCPI_MSG_CONTROL_IO_LISTEN;
 800bc30:	2303      	movs	r3, #3
 800bc32:	733b      	strb	r3, [r7, #12]
        }
        xQueueSend(user_data.evtQueue, &msg, 1000);
 800bc34:	4b06      	ldr	r3, [pc, #24]	; (800bc50 <scpi_netconn_callback+0x74>)
 800bc36:	6918      	ldr	r0, [r3, #16]
 800bc38:	f107 010c 	add.w	r1, r7, #12
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc42:	f002 fe29 	bl	800e898 <xQueueGenericSend>
    }
}
 800bc46:	bf00      	nop
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	200076b0 	.word	0x200076b0

0800bc54 <createServer>:

static struct netconn * createServer(int port) {
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
    struct netconn * conn;
    err_t err;

    conn = netconn_new_with_callback(NETCONN_TCP, scpi_netconn_callback);
 800bc5c:	4a12      	ldr	r2, [pc, #72]	; (800bca8 <createServer+0x54>)
 800bc5e:	2100      	movs	r1, #0
 800bc60:	2010      	movs	r0, #16
 800bc62:	f005 fe21 	bl	80118a8 <netconn_new_with_proto_and_callback>
 800bc66:	60f8      	str	r0, [r7, #12]
    if (conn == NULL) {
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <createServer+0x1e>
        return NULL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e016      	b.n	800bca0 <createServer+0x4c>
    }

    err = netconn_bind(conn, NULL, port);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	461a      	mov	r2, r3
 800bc78:	2100      	movs	r1, #0
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f005 fece 	bl	8011a1c <netconn_bind>
 800bc80:	4603      	mov	r3, r0
 800bc82:	72fb      	strb	r3, [r7, #11]
    if (err != ERR_OK) {
 800bc84:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d004      	beq.n	800bc96 <createServer+0x42>
        netconn_delete(conn);
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f005 fea9 	bl	80119e4 <netconn_delete>
        return NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	e004      	b.n	800bca0 <createServer+0x4c>
    }


    netconn_listen(conn);
 800bc96:	21ff      	movs	r1, #255	; 0xff
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f005 fef7 	bl	8011a8c <netconn_listen_with_backlog>

    return conn;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	0800bbdd 	.word	0x0800bbdd

0800bcac <waitServer>:

static void waitServer(user_data_t * user_data, queue_event_t * evt) {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
    /* 5s timeout */
    if (xQueueReceive(user_data->evtQueue, evt, 50000 * portTICK_RATE_MS) != pdPASS) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bcbe:	6839      	ldr	r1, [r7, #0]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f003 f825 	bl	800ed10 <xQueueReceive>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d002      	beq.n	800bcd2 <waitServer+0x26>
        evt->cmd = SCPI_MSG_TIMEOUT;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	701a      	strb	r2, [r3, #0]
    }
}
 800bcd2:	bf00      	nop
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <processIoListen>:

static int processIoListen(user_data_t * user_data) {
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
    struct netconn *newconn;

    if (netconn_accept(user_data->io_listen, &newconn) == ERR_OK) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f107 020c 	add.w	r2, r7, #12
 800bcea:	4611      	mov	r1, r2
 800bcec:	4618      	mov	r0, r3
 800bcee:	f005 fef9 	bl	8011ae4 <netconn_accept>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10f      	bne.n	800bd18 <processIoListen+0x3e>
        if (user_data->io) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d008      	beq.n	800bd12 <processIoListen+0x38>
            // Close unwanted connection
            netconn_close(newconn);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f006 fa72 	bl	80121ec <netconn_close>
            netconn_delete(newconn);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f005 fe6a 	bl	80119e4 <netconn_delete>
 800bd10:	e002      	b.n	800bd18 <processIoListen+0x3e>
        } else {
            // connection established
          //  iprintf("***Connection established %s\r\n", inet_ntoa(newconn->pcb.ip->remote_ip));
            user_data->io = newconn;
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	609a      	str	r2, [r3, #8]
        }
    }

    return 0;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <processSrqIoListen>:

static int processSrqIoListen(user_data_t * user_data) {
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b084      	sub	sp, #16
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
    struct netconn *newconn;

    if (netconn_accept(user_data->control_io_listen, &newconn) == ERR_OK) {
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	f107 020c 	add.w	r2, r7, #12
 800bd32:	4611      	mov	r1, r2
 800bd34:	4618      	mov	r0, r3
 800bd36:	f005 fed5 	bl	8011ae4 <netconn_accept>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10f      	bne.n	800bd60 <processSrqIoListen+0x3e>
        if (user_data->control_io) {
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d008      	beq.n	800bd5a <processSrqIoListen+0x38>
            netconn_close(newconn);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f006 fa4e 	bl	80121ec <netconn_close>
            netconn_delete(newconn);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f005 fe46 	bl	80119e4 <netconn_delete>
 800bd58:	e002      	b.n	800bd60 <processSrqIoListen+0x3e>
        } else {
            // control connection established
          //  iprintf("***Control Connection established %s\r\n", inet_ntoa(newconn->pcb.ip->remote_ip));
            user_data->control_io = newconn;
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	60da      	str	r2, [r3, #12]
        }
    }

    return 0;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
	...

0800bd6c <closeIo>:

static void closeIo(user_data_t * user_data) {
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
    // connection closed
    netconn_close(user_data->io);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f006 fa37 	bl	80121ec <netconn_close>
    netconn_delete(user_data->io);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f005 fe2e 	bl	80119e4 <netconn_delete>
    user_data->io = NULL;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	609a      	str	r2, [r3, #8]
    iprintf("***Connection closed\r\n");
 800bd8e:	4803      	ldr	r0, [pc, #12]	; (800bd9c <closeIo+0x30>)
 800bd90:	f018 fd3e 	bl	8024810 <iprintf>
}
 800bd94:	bf00      	nop
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	08029560 	.word	0x08029560

0800bda0 <closeSrqIo>:

static void closeSrqIo(user_data_t * user_data) {
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
    // control connection closed
    netconn_close(user_data->control_io);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f006 fa1d 	bl	80121ec <netconn_close>
    netconn_delete(user_data->control_io);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f005 fe14 	bl	80119e4 <netconn_delete>
    user_data->control_io = NULL;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	60da      	str	r2, [r3, #12]
    iprintf("***Control Connection closed\r\n");
 800bdc2:	4803      	ldr	r0, [pc, #12]	; (800bdd0 <closeSrqIo+0x30>)
 800bdc4:	f018 fd24 	bl	8024810 <iprintf>
}
 800bdc8:	bf00      	nop
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	08029578 	.word	0x08029578

0800bdd4 <processIo>:

static int processIo(user_data_t * user_data) {
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
    struct netbuf *inbuf;
    char* buf;
    u16_t buflen;

    if (netconn_recv(user_data->io, &inbuf) != ERR_OK) {
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	f107 0214 	add.w	r2, r7, #20
 800bde4:	4611      	mov	r1, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f006 f884 	bl	8011ef4 <netconn_recv>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d133      	bne.n	800be5a <processIo+0x86>
        goto fail1;
    }
    if (netconn_err(user_data->io) != ERR_OK) {
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f006 fa05 	bl	8012206 <netconn_err>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d125      	bne.n	800be4e <processIo+0x7a>
        goto fail2;
    }

    netbuf_data(inbuf, (void**) &buf, &buflen);
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f107 020e 	add.w	r2, r7, #14
 800be08:	f107 0110 	add.w	r1, r7, #16
 800be0c:	4618      	mov	r0, r3
 800be0e:	f007 fe0b 	bl	8013a28 <netbuf_data>

    if (buflen > 0) {
 800be12:	89fb      	ldrh	r3, [r7, #14]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d014      	beq.n	800be42 <processIo+0x6e>

    	LED_Switch(LED_BUSY);
 800be18:	2001      	movs	r0, #1
 800be1a:	f7ff f9f9 	bl	800b210 <LED_Switch>

        SCPI_Input(&scpi_context, buf, buflen);
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	89fa      	ldrh	r2, [r7, #14]
 800be22:	4619      	mov	r1, r3
 800be24:	4811      	ldr	r0, [pc, #68]	; (800be6c <processIo+0x98>)
 800be26:	f015 fb7e 	bl	8021526 <SCPI_Input>

        if(scpi_context.cmd_error)
 800be2a:	4b10      	ldr	r3, [pc, #64]	; (800be6c <processIo+0x98>)
 800be2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800be30:	2b00      	cmp	r3, #0
 800be32:	d003      	beq.n	800be3c <processIo+0x68>
        {
        	LED_Switch(LED_ERROR);
 800be34:	2002      	movs	r0, #2
 800be36:	f7ff f9eb 	bl	800b210 <LED_Switch>
 800be3a:	e002      	b.n	800be42 <processIo+0x6e>

        }
        else
        {
        	LED_Switch(LED_IDLE);
 800be3c:	2000      	movs	r0, #0
 800be3e:	f7ff f9e7 	bl	800b210 <LED_Switch>

    } else {
        //goto fail2;
    }

    netbuf_delete(inbuf);
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	4618      	mov	r0, r3
 800be46:	f007 fdcf 	bl	80139e8 <netbuf_delete>

    return 0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	e00a      	b.n	800be64 <processIo+0x90>
        goto fail2;
 800be4e:	bf00      	nop

fail2:
    netbuf_delete(inbuf);
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	4618      	mov	r0, r3
 800be54:	f007 fdc8 	bl	80139e8 <netbuf_delete>
 800be58:	e000      	b.n	800be5c <processIo+0x88>
        goto fail1;
 800be5a:	bf00      	nop
fail1:
    closeIo(user_data);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7ff ff85 	bl	800bd6c <closeIo>

    return 0;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3718      	adds	r7, #24
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	200075e8 	.word	0x200075e8

0800be70 <processSrqIo>:

static int processSrqIo(user_data_t * user_data) {
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
    struct netbuf *inbuf;
    char* buf;
    u16_t buflen;

    if (netconn_recv(user_data->control_io, &inbuf) != ERR_OK) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	f107 0214 	add.w	r2, r7, #20
 800be80:	4611      	mov	r1, r2
 800be82:	4618      	mov	r0, r3
 800be84:	f006 f836 	bl	8011ef4 <netconn_recv>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d11b      	bne.n	800bec6 <processSrqIo+0x56>
        goto fail1;
    }
    if (netconn_err(user_data->control_io) != ERR_OK) {
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	4618      	mov	r0, r3
 800be94:	f006 f9b7 	bl	8012206 <netconn_err>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10d      	bne.n	800beba <processSrqIo+0x4a>
        goto fail2;
    }

    netbuf_data(inbuf, (void**) &buf, &buflen);
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f107 020e 	add.w	r2, r7, #14
 800bea4:	f107 0110 	add.w	r1, r7, #16
 800bea8:	4618      	mov	r0, r3
 800beaa:	f007 fdbd 	bl	8013a28 <netbuf_data>
        // TODO process control
    } else {
        //goto fail2;
    }

    netbuf_delete(inbuf);
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f007 fd99 	bl	80139e8 <netbuf_delete>

    return 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	e00a      	b.n	800bed0 <processSrqIo+0x60>
        goto fail2;
 800beba:	bf00      	nop

fail2:
    netbuf_delete(inbuf);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f007 fd92 	bl	80139e8 <netbuf_delete>
 800bec4:	e000      	b.n	800bec8 <processSrqIo+0x58>
        goto fail1;
 800bec6:	bf00      	nop
fail1:
    closeSrqIo(user_data);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7ff ff69 	bl	800bda0 <closeSrqIo>

    return 0;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3718      	adds	r7, #24
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <scpi_server_thread>:

/*
 *
 */
static void scpi_server_thread(void *arg) {
 800bed8:	b580      	push	{r7, lr}
 800beda:	b08c      	sub	sp, #48	; 0x30
 800bedc:	af08      	add	r7, sp, #32
 800bede:	6078      	str	r0, [r7, #4]
    queue_event_t evt;

    (void) arg;

    user_data.evtQueue = xQueueCreate(10, sizeof (queue_event_t));
 800bee0:	2200      	movs	r2, #0
 800bee2:	2104      	movs	r1, #4
 800bee4:	200a      	movs	r0, #10
 800bee6:	f002 fb45 	bl	800e574 <xQueueGenericCreate>
 800beea:	4603      	mov	r3, r0
 800beec:	4a38      	ldr	r2, [pc, #224]	; (800bfd0 <scpi_server_thread+0xf8>)
 800beee:	6113      	str	r3, [r2, #16]

    // user_context will be pointer to socket
    SCPI_Init(&scpi_context,
 800bef0:	2311      	movs	r3, #17
 800bef2:	9307      	str	r3, [sp, #28]
 800bef4:	4b37      	ldr	r3, [pc, #220]	; (800bfd4 <scpi_server_thread+0xfc>)
 800bef6:	9306      	str	r3, [sp, #24]
 800bef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800befc:	9305      	str	r3, [sp, #20]
 800befe:	4b36      	ldr	r3, [pc, #216]	; (800bfd8 <scpi_server_thread+0x100>)
 800bf00:	9304      	str	r3, [sp, #16]
 800bf02:	4b36      	ldr	r3, [pc, #216]	; (800bfdc <scpi_server_thread+0x104>)
 800bf04:	9303      	str	r3, [sp, #12]
 800bf06:	4b36      	ldr	r3, [pc, #216]	; (800bfe0 <scpi_server_thread+0x108>)
 800bf08:	9302      	str	r3, [sp, #8]
 800bf0a:	4b36      	ldr	r3, [pc, #216]	; (800bfe4 <scpi_server_thread+0x10c>)
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	4b36      	ldr	r3, [pc, #216]	; (800bfe8 <scpi_server_thread+0x110>)
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	4b36      	ldr	r3, [pc, #216]	; (800bfec <scpi_server_thread+0x114>)
 800bf14:	4a36      	ldr	r2, [pc, #216]	; (800bff0 <scpi_server_thread+0x118>)
 800bf16:	4937      	ldr	r1, [pc, #220]	; (800bff4 <scpi_server_thread+0x11c>)
 800bf18:	4837      	ldr	r0, [pc, #220]	; (800bff8 <scpi_server_thread+0x120>)
 800bf1a:	f015 facb 	bl	80214b4 <SCPI_Init>
            scpi_units_def,
            SCPI_IDN1, SCPI_IDN2, SCPI_IDN3, SCPI_IDN4,
            scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
            scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE);

    scpi_context.user_context = &user_data;
 800bf1e:	4b36      	ldr	r3, [pc, #216]	; (800bff8 <scpi_server_thread+0x120>)
 800bf20:	4a2b      	ldr	r2, [pc, #172]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf22:	661a      	str	r2, [r3, #96]	; 0x60

    user_data.io_listen = createServer(DEVICE_PORT);
 800bf24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bf28:	f7ff fe94 	bl	800bc54 <createServer>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	4a28      	ldr	r2, [pc, #160]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf30:	6013      	str	r3, [r2, #0]
    user_data.control_io_listen = createServer(CONTROL_PORT);
 800bf32:	f240 70d1 	movw	r0, #2001	; 0x7d1
 800bf36:	f7ff fe8d 	bl	800bc54 <createServer>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	4a24      	ldr	r2, [pc, #144]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf3e:	6053      	str	r3, [r2, #4]

    while (1) {
        waitServer(&user_data, &evt);
 800bf40:	f107 030c 	add.w	r3, r7, #12
 800bf44:	4619      	mov	r1, r3
 800bf46:	4822      	ldr	r0, [pc, #136]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf48:	f7ff feb0 	bl	800bcac <waitServer>

        if (evt.cmd == SCPI_MSG_TIMEOUT) { // timeout
 800bf4c:	7b3b      	ldrb	r3, [r7, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d104      	bne.n	800bf5c <scpi_server_thread+0x84>
            SCPI_Input(&scpi_context, NULL, 0);
 800bf52:	2200      	movs	r2, #0
 800bf54:	2100      	movs	r1, #0
 800bf56:	4828      	ldr	r0, [pc, #160]	; (800bff8 <scpi_server_thread+0x120>)
 800bf58:	f015 fae5 	bl	8021526 <SCPI_Input>
        }

        if ((user_data.io_listen != NULL) && (evt.cmd == SCPI_MSG_IO_LISTEN)) {
 800bf5c:	4b1c      	ldr	r3, [pc, #112]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d005      	beq.n	800bf70 <scpi_server_thread+0x98>
 800bf64:	7b3b      	ldrb	r3, [r7, #12]
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d102      	bne.n	800bf70 <scpi_server_thread+0x98>
            processIoListen(&user_data);
 800bf6a:	4819      	ldr	r0, [pc, #100]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf6c:	f7ff feb5 	bl	800bcda <processIoListen>
        }

        if ((user_data.control_io_listen != NULL) && (evt.cmd == SCPI_MSG_CONTROL_IO_LISTEN)) {
 800bf70:	4b17      	ldr	r3, [pc, #92]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d005      	beq.n	800bf84 <scpi_server_thread+0xac>
 800bf78:	7b3b      	ldrb	r3, [r7, #12]
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d102      	bne.n	800bf84 <scpi_server_thread+0xac>
            processSrqIoListen(&user_data);
 800bf7e:	4814      	ldr	r0, [pc, #80]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf80:	f7ff fecf 	bl	800bd22 <processSrqIoListen>
        }

        if ((user_data.io != NULL) && (evt.cmd == SCPI_MSG_IO)) {
 800bf84:	4b12      	ldr	r3, [pc, #72]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d005      	beq.n	800bf98 <scpi_server_thread+0xc0>
 800bf8c:	7b3b      	ldrb	r3, [r7, #12]
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d102      	bne.n	800bf98 <scpi_server_thread+0xc0>
            processIo(&user_data);
 800bf92:	480f      	ldr	r0, [pc, #60]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf94:	f7ff ff1e 	bl	800bdd4 <processIo>
        }

        if ((user_data.control_io != NULL) && (evt.cmd == SCPI_MSG_CONTROL_IO)) {
 800bf98:	4b0d      	ldr	r3, [pc, #52]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d005      	beq.n	800bfac <scpi_server_thread+0xd4>
 800bfa0:	7b3b      	ldrb	r3, [r7, #12]
 800bfa2:	2b05      	cmp	r3, #5
 800bfa4:	d102      	bne.n	800bfac <scpi_server_thread+0xd4>
            processSrqIo(&user_data);
 800bfa6:	480a      	ldr	r0, [pc, #40]	; (800bfd0 <scpi_server_thread+0xf8>)
 800bfa8:	f7ff ff62 	bl	800be70 <processSrqIo>
        }

        if (evt.cmd == SCPI_MSG_SET_ESE_REQ) {
 800bfac:	7b3b      	ldrb	r3, [r7, #12]
 800bfae:	2b06      	cmp	r3, #6
 800bfb0:	d101      	bne.n	800bfb6 <scpi_server_thread+0xde>
            setEseReq();
 800bfb2:	f7ff fdf5 	bl	800bba0 <setEseReq>
        }

        if (evt.cmd == SCPI_MSG_SET_ERROR) {
 800bfb6:	7b3b      	ldrb	r3, [r7, #12]
 800bfb8:	2b07      	cmp	r3, #7
 800bfba:	d104      	bne.n	800bfc6 <scpi_server_thread+0xee>
            setError(evt.param2);
 800bfbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7ff fdf9 	bl	800bbb8 <setError>
        }
        osDelay(pdMS_TO_TICKS(2));
 800bfc6:	2002      	movs	r0, #2
 800bfc8:	f001 fc26 	bl	800d818 <osDelay>
        waitServer(&user_data, &evt);
 800bfcc:	e7b8      	b.n	800bf40 <scpi_server_thread+0x68>
 800bfce:	bf00      	nop
 800bfd0:	200076b0 	.word	0x200076b0
 800bfd4:	200075c4 	.word	0x200075c4
 800bfd8:	200073c4 	.word	0x200073c4
 800bfdc:	08029598 	.word	0x08029598
 800bfe0:	080295a8 	.word	0x080295a8
 800bfe4:	080295b0 	.word	0x080295b0
 800bfe8:	080295bc 	.word	0x080295bc
 800bfec:	0802d578 	.word	0x0802d578
 800bff0:	20000020 	.word	0x20000020
 800bff4:	0802d0b8 	.word	0x0802d0b8
 800bff8:	200075e8 	.word	0x200075e8

0800bffc <scpi_server_init>:
    }

    vTaskDelete(NULL);
}

void scpi_server_init(void) {
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af02      	add	r7, sp, #8
    sys_thread_new("SCPI", scpi_server_thread, NULL, 4 * DEFAULT_THREAD_STACKSIZE, osPriorityRealtime);
 800c002:	2330      	movs	r3, #48	; 0x30
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c00a:	2200      	movs	r2, #0
 800c00c:	4903      	ldr	r1, [pc, #12]	; (800c01c <scpi_server_init+0x20>)
 800c00e:	4804      	ldr	r0, [pc, #16]	; (800c020 <scpi_server_init+0x24>)
 800c010:	f012 fed6 	bl	801edc0 <sys_thread_new>
}
 800c014:	bf00      	nop
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	0800bed9 	.word	0x0800bed9
 800c020:	080295c0 	.word	0x080295c0

0800c024 <SCPI_SourceCurrentRange>:
 * @NOTE:
 *
 */

scpi_result_t SCPI_SourceCurrentRange(scpi_t* context)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800c02c:	2301      	movs	r3, #1
}
 800c02e:	4618      	mov	r0, r3
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <SCPI_SourceCurrentRangeQ>:
 * @NOTE:
 *
 */

scpi_result_t SCPI_SourceCurrentRangeQ(scpi_t* context)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b083      	sub	sp, #12
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800c042:	2301      	movs	r3, #1
}
 800c044:	4618      	mov	r0, r3
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <SCPI_SourceCurrentRangeAuto>:
 * @NOTE:
 *
 */

scpi_result_t SCPI_SourceCurrentRangeAuto(scpi_t* context)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800c058:	2301      	movs	r3, #1
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <SCPI_SourceFunctionMode>:

scpi_result_t SCPI_SourceFunctionMode(scpi_t* context)
{
 800c066:	b480      	push	{r7}
 800c068:	b083      	sub	sp, #12
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800c06e:	2301      	movs	r3, #1
}
 800c070:	4618      	mov	r0, r3
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <SCPI_SourceFunctionModeQ>:

scpi_result_t SCPI_SourceFunctionModeQ(scpi_t* context)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	return SCPI_RES_OK;
 800c084:	2301      	movs	r3, #1
}
 800c086:	4618      	mov	r0, r3
 800c088:	370c      	adds	r7, #12
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
	...

0800c094 <SCPI_SourceRelayOutput>:


scpi_result_t SCPI_SourceRelayOutput(scpi_t * context)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b092      	sub	sp, #72	; 0x48
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
	scpi_channel_value_t array[MAXCOL*MAXROW] = {0};
 800c09c:	f107 030c 	add.w	r3, r7, #12
 800c0a0:	2230      	movs	r2, #48	; 0x30
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f017 fc9c 	bl	80239e2 <memset>
	size_t channel_size = 0;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t index = 0;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	scpi_bool_t state = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	72fb      	strb	r3, [r7, #11]

	channel_size = SCPI_GetChannels(context, array);
 800c0b8:	f107 030c 	add.w	r3, r7, #12
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff fad6 	bl	800b670 <SCPI_GetChannels>
 800c0c4:	6438      	str	r0, [r7, #64]	; 0x40

	if(!channel_size || (channel_size > MAXROW))
 800c0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <SCPI_SourceRelayOutput+0x3e>
 800c0cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ce:	2b06      	cmp	r3, #6
 800c0d0:	d907      	bls.n	800c0e2 <SCPI_SourceRelayOutput+0x4e>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_DATA_OUT_OF_RANGE);
 800c0d2:	f06f 01dd 	mvn.w	r1, #221	; 0xdd
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f012 fffa 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800c0dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0e0:	e037      	b.n	800c152 <SCPI_SourceRelayOutput+0xbe>
	}

	if(!SCPI_ParamBool(context, &state, TRUE))
 800c0e2:	f107 030b 	add.w	r3, r7, #11
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f016 f896 	bl	802221c <SCPI_ParamBool>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	f083 0301 	eor.w	r3, r3, #1
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <SCPI_SourceRelayOutput+0x6e>
	{
		return SCPI_RES_ERR;
 800c0fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c100:	e027      	b.n	800c152 <SCPI_SourceRelayOutput+0xbe>
	}

	for(uint8_t i = 0; i < channel_size; i++)
 800c102:	2300      	movs	r3, #0
 800c104:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c108:	e01d      	b.n	800c146 <SCPI_SourceRelayOutput+0xb2>
	{
		index = array[i].row;
 800c10a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c10e:	00db      	lsls	r3, r3, #3
 800c110:	3348      	adds	r3, #72	; 0x48
 800c112:	443b      	add	r3, r7
 800c114:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		CXN_Relays_Control(index, state);
 800c11c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c120:	7afa      	ldrb	r2, [r7, #11]
 800c122:	4611      	mov	r1, r2
 800c124:	4618      	mov	r0, r3
 800c126:	f7fe fea7 	bl	800ae78 <CXN_Relays_Control>
		bsp.config.relay.state[index] = (uint8_t)state;
 800c12a:	7afa      	ldrb	r2, [r7, #11]
 800c12c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c130:	4611      	mov	r1, r2
 800c132:	4a0a      	ldr	r2, [pc, #40]	; (800c15c <SCPI_SourceRelayOutput+0xc8>)
 800c134:	4413      	add	r3, r2
 800c136:	460a      	mov	r2, r1
 800c138:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	for(uint8_t i = 0; i < channel_size; i++)
 800c13c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c140:	3301      	adds	r3, #1
 800c142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c146:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c14a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d8dc      	bhi.n	800c10a <SCPI_SourceRelayOutput+0x76>
	}

	return SCPI_RES_OK;
 800c150:	2301      	movs	r3, #1
}
 800c152:	4618      	mov	r0, r3
 800c154:	3748      	adds	r7, #72	; 0x48
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	200052f0 	.word	0x200052f0

0800c160 <SCPI_SourceRelayOutputQ>:

scpi_result_t SCPI_SourceRelayOutputQ(scpi_t * context)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
	SCPI_ResultArrayUInt8(context, bsp.config.relay.state, MAXROW, SCPI_FORMAT_NORMAL);
 800c168:	2301      	movs	r3, #1
 800c16a:	2206      	movs	r2, #6
 800c16c:	4904      	ldr	r1, [pc, #16]	; (800c180 <SCPI_SourceRelayOutputQ+0x20>)
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f016 fb3c 	bl	80227ec <SCPI_ResultArrayUInt8>
	return SCPI_RES_OK;
 800c174:	2301      	movs	r3, #1
}
 800c176:	4618      	mov	r0, r3
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	200053a1 	.word	0x200053a1

0800c184 <SCPI_StringToIP4Array>:
 * Private function to convert a IP string (format nnnn.nnnn.nnnn.nnnn) to a array of uint8_t. The conversion is need for the lwIP Ethernet function.
 *
 */

static uint8_t SCPI_StringToIP4Array(const char* ip_string, uint8_t* ip_array)
{
 800c184:	b480      	push	{r7}
 800c186:	b087      	sub	sp, #28
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]

    /* A pointer to the next digit to process. */
    const char* start;

    start = ip_string;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < 4; i++)
 800c192:	2300      	movs	r3, #0
 800c194:	74fb      	strb	r3, [r7, #19]
 800c196:	e034      	b.n	800c202 <SCPI_StringToIP4Array+0x7e>
    {
        /* The digit being processed. */
        uint8_t c;
        /* The value of this byte. */
        uint16_t n = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	823b      	strh	r3, [r7, #16]
        while (1)
        {
            c = * start;
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	73fb      	strb	r3, [r7, #15]
            start++;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	617b      	str	r3, [r7, #20]
            if (c >= '0' && c <= '9')
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
 800c1aa:	2b2f      	cmp	r3, #47	; 0x2f
 800c1ac:	d910      	bls.n	800c1d0 <SCPI_StringToIP4Array+0x4c>
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
 800c1b0:	2b39      	cmp	r3, #57	; 0x39
 800c1b2:	d80d      	bhi.n	800c1d0 <SCPI_StringToIP4Array+0x4c>
            {
                n *= 10;
 800c1b4:	8a3b      	ldrh	r3, [r7, #16]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	0092      	lsls	r2, r2, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	005b      	lsls	r3, r3, #1
 800c1be:	823b      	strh	r3, [r7, #16]
                n += c - '0';
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	8a3b      	ldrh	r3, [r7, #16]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	3b30      	subs	r3, #48	; 0x30
 800c1cc:	823b      	strh	r3, [r7, #16]
            c = * start;
 800c1ce:	e7e5      	b.n	800c19c <SCPI_StringToIP4Array+0x18>
            }
            /* We insist on stopping at "." if we are still parsing
               the first, second, or third numbers. If we have reached
               the end of the numbers, we will allow any character. */
            else if ((i < 3 && c == '.') || i == 3)
 800c1d0:	7cfb      	ldrb	r3, [r7, #19]
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d802      	bhi.n	800c1dc <SCPI_StringToIP4Array+0x58>
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c1da:	d004      	beq.n	800c1e6 <SCPI_StringToIP4Array+0x62>
 800c1dc:	7cfb      	ldrb	r3, [r7, #19]
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d001      	beq.n	800c1e6 <SCPI_StringToIP4Array+0x62>
            {
                break;
            }
            else
            {
                return NET_STR_WRONG_FORMAT;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e011      	b.n	800c20a <SCPI_StringToIP4Array+0x86>
            }
        }
        if (n >= 256)
 800c1e6:	8a3b      	ldrh	r3, [r7, #16]
 800c1e8:	2bff      	cmp	r3, #255	; 0xff
 800c1ea:	d901      	bls.n	800c1f0 <SCPI_StringToIP4Array+0x6c>
        {
            return NET_STR_WRONG_NUMBER;
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	e00c      	b.n	800c20a <SCPI_StringToIP4Array+0x86>
        }
        ip_array[i] = n;
 800c1f0:	7cfb      	ldrb	r3, [r7, #19]
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	4413      	add	r3, r2
 800c1f6:	8a3a      	ldrh	r2, [r7, #16]
 800c1f8:	b2d2      	uxtb	r2, r2
 800c1fa:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 800c1fc:	7cfb      	ldrb	r3, [r7, #19]
 800c1fe:	3301      	adds	r3, #1
 800c200:	74fb      	strb	r3, [r7, #19]
 800c202:	7cfb      	ldrb	r3, [r7, #19]
 800c204:	2b03      	cmp	r3, #3
 800c206:	d9c7      	bls.n	800c198 <SCPI_StringToIP4Array+0x14>
    }

    return NET_STR_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	371c      	adds	r7, #28
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
	...

0800c218 <SCPI_StringToMACArray>:
 * Private function to convert a MAC string (format xx:xx:xx:xx:xx:xx or xx-xx-xx-xx-xx-xx) to a array of uint8_t. The conversion is need for the lwIP Ethernet function.
 *
 */

static uint8_t SCPI_StringToMACArray(const char* MAC_string, uint8_t* MAC_array)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08e      	sub	sp, #56	; 0x38
 800c21c:	af04      	add	r7, sp, #16
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
    uint32_t values[6];

    if(6 == sscanf(MAC_string, "%x:%x:%x:%x:%x:%x%*c",
 800c222:	f107 030c 	add.w	r3, r7, #12
 800c226:	1d19      	adds	r1, r3, #4
 800c228:	f107 020c 	add.w	r2, r7, #12
 800c22c:	f107 030c 	add.w	r3, r7, #12
 800c230:	3314      	adds	r3, #20
 800c232:	9303      	str	r3, [sp, #12]
 800c234:	f107 030c 	add.w	r3, r7, #12
 800c238:	3310      	adds	r3, #16
 800c23a:	9302      	str	r3, [sp, #8]
 800c23c:	f107 030c 	add.w	r3, r7, #12
 800c240:	330c      	adds	r3, #12
 800c242:	9301      	str	r3, [sp, #4]
 800c244:	f107 030c 	add.w	r3, r7, #12
 800c248:	3308      	adds	r3, #8
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	460b      	mov	r3, r1
 800c24e:	492f      	ldr	r1, [pc, #188]	; (800c30c <SCPI_StringToMACArray+0xf4>)
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f018 fc07 	bl	8024a64 <siscanf>
 800c256:	4603      	mov	r3, r0
 800c258:	2b06      	cmp	r3, #6
 800c25a:	d11a      	bne.n	800c292 <SCPI_StringToMACArray+0x7a>
    &values[0], &values[1], &values[2],
    &values[3], &values[4], &values[5]))
    {
        for (uint8_t i = 0; i < 6; i++)
 800c25c:	2300      	movs	r3, #0
 800c25e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c262:	e011      	b.n	800c288 <SCPI_StringToMACArray+0x70>
        MAC_array[i] = (uint8_t)values[i];
 800c264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	3328      	adds	r3, #40	; 0x28
 800c26c:	443b      	add	r3, r7
 800c26e:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 800c272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c276:	683a      	ldr	r2, [r7, #0]
 800c278:	4413      	add	r3, r2
 800c27a:	b2ca      	uxtb	r2, r1
 800c27c:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < 6; i++)
 800c27e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c282:	3301      	adds	r3, #1
 800c284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c28c:	2b05      	cmp	r3, #5
 800c28e:	d9e9      	bls.n	800c264 <SCPI_StringToMACArray+0x4c>
 800c290:	e036      	b.n	800c300 <SCPI_StringToMACArray+0xe8>
    }
    else if (6 == sscanf(MAC_string, "%x-%x-%x-%x-%x-%x%*c",
 800c292:	f107 030c 	add.w	r3, r7, #12
 800c296:	1d19      	adds	r1, r3, #4
 800c298:	f107 020c 	add.w	r2, r7, #12
 800c29c:	f107 030c 	add.w	r3, r7, #12
 800c2a0:	3314      	adds	r3, #20
 800c2a2:	9303      	str	r3, [sp, #12]
 800c2a4:	f107 030c 	add.w	r3, r7, #12
 800c2a8:	3310      	adds	r3, #16
 800c2aa:	9302      	str	r3, [sp, #8]
 800c2ac:	f107 030c 	add.w	r3, r7, #12
 800c2b0:	330c      	adds	r3, #12
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	f107 030c 	add.w	r3, r7, #12
 800c2b8:	3308      	adds	r3, #8
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	4914      	ldr	r1, [pc, #80]	; (800c310 <SCPI_StringToMACArray+0xf8>)
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f018 fbcf 	bl	8024a64 <siscanf>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b06      	cmp	r3, #6
 800c2ca:	d119      	bne.n	800c300 <SCPI_StringToMACArray+0xe8>
    &values[0], &values[1], &values[2],
    &values[3], &values[4], &values[5]))
    {
        for (uint8_t i = 0; i < 6; i++)
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2d2:	e011      	b.n	800c2f8 <SCPI_StringToMACArray+0xe0>
        MAC_array[i] = (uint8_t)values[i];
 800c2d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	3328      	adds	r3, #40	; 0x28
 800c2dc:	443b      	add	r3, r7
 800c2de:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 800c2e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	b2ca      	uxtb	r2, r1
 800c2ec:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < 6; i++)
 800c2ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2fc:	2b05      	cmp	r3, #5
 800c2fe:	d9e9      	bls.n	800c2d4 <SCPI_StringToMACArray+0xbc>
    }
    else
    {}

    return NET_STR_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3728      	adds	r7, #40	; 0x28
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	08029604 	.word	0x08029604
 800c310:	0802961c 	.word	0x0802961c

0800c314 <SCPI_SystemCommunicateLANIPAddress>:
 * This setting is non-volatile; it is not changed by power cycling, a Factory Reset (*RST).
 *
 */

scpi_result_t SCPI_SystemCommunicateLANIPAddress(scpi_t * context)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b08c      	sub	sp, #48	; 0x30
 800c318:	af02      	add	r7, sp, #8
 800c31a:	6078      	str	r0, [r7, #4]
	char str[16] = {0};
 800c31c:	2300      	movs	r3, #0
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	f107 0318 	add.w	r3, r7, #24
 800c324:	2200      	movs	r2, #0
 800c326:	601a      	str	r2, [r3, #0]
 800c328:	605a      	str	r2, [r3, #4]
 800c32a:	609a      	str	r2, [r3, #8]
	uint8_t numb[4] = {0};
 800c32c:	2300      	movs	r3, #0
 800c32e:	613b      	str	r3, [r7, #16]
	size_t len = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	60fb      	str	r3, [r7, #12]
	uint8_t conv_result = 0;
 800c334:	2300      	movs	r3, #0
 800c336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(!SCPI_ParamCopyText(context,(char*)str, 16, &len, TRUE))
 800c33a:	f107 030c 	add.w	r3, r7, #12
 800c33e:	f107 0114 	add.w	r1, r7, #20
 800c342:	2201      	movs	r2, #1
 800c344:	9200      	str	r2, [sp, #0]
 800c346:	2210      	movs	r2, #16
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f015 fe89 	bl	8022060 <SCPI_ParamCopyText>
 800c34e:	4603      	mov	r3, r0
 800c350:	f083 0301 	eor.w	r3, r3, #1
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b00      	cmp	r3, #0
 800c358:	d002      	beq.n	800c360 <SCPI_SystemCommunicateLANIPAddress+0x4c>
	{
		return SCPI_RES_ERR;
 800c35a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c35e:	e036      	b.n	800c3ce <SCPI_SystemCommunicateLANIPAddress+0xba>
	}

	conv_result = SCPI_StringToIP4Array(str, numb);
 800c360:	f107 0210 	add.w	r2, r7, #16
 800c364:	f107 0314 	add.w	r3, r7, #20
 800c368:	4611      	mov	r1, r2
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff ff0a 	bl	800c184 <SCPI_StringToIP4Array>
 800c370:	4603      	mov	r3, r0
 800c372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(conv_result)
 800c376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d01d      	beq.n	800c3ba <SCPI_SystemCommunicateLANIPAddress+0xa6>
 800c37e:	2b02      	cmp	r3, #2
 800c380:	dc21      	bgt.n	800c3c6 <SCPI_SystemCommunicateLANIPAddress+0xb2>
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <SCPI_SystemCommunicateLANIPAddress+0x78>
 800c386:	2b01      	cmp	r3, #1
 800c388:	d011      	beq.n	800c3ae <SCPI_SystemCommunicateLANIPAddress+0x9a>
 800c38a:	e01c      	b.n	800c3c6 <SCPI_SystemCommunicateLANIPAddress+0xb2>
	{
	case NET_STR_OK:
	{
		bsp.ip4.ip[0] = numb[0];
 800c38c:	7c3a      	ldrb	r2, [r7, #16]
 800c38e:	4b12      	ldr	r3, [pc, #72]	; (800c3d8 <SCPI_SystemCommunicateLANIPAddress+0xc4>)
 800c390:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		bsp.ip4.ip[1] = numb[1];
 800c394:	7c7a      	ldrb	r2, [r7, #17]
 800c396:	4b10      	ldr	r3, [pc, #64]	; (800c3d8 <SCPI_SystemCommunicateLANIPAddress+0xc4>)
 800c398:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
		bsp.ip4.ip[2] = numb[2];
 800c39c:	7cba      	ldrb	r2, [r7, #18]
 800c39e:	4b0e      	ldr	r3, [pc, #56]	; (800c3d8 <SCPI_SystemCommunicateLANIPAddress+0xc4>)
 800c3a0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		bsp.ip4.ip[3] = numb[3];
 800c3a4:	7cfa      	ldrb	r2, [r7, #19]
 800c3a6:	4b0c      	ldr	r3, [pc, #48]	; (800c3d8 <SCPI_SystemCommunicateLANIPAddress+0xc4>)
 800c3a8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	}break;
 800c3ac:	e00e      	b.n	800c3cc <SCPI_SystemCommunicateLANIPAddress+0xb8>
	case NET_STR_WRONG_FORMAT: SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR); break;
 800c3ae:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f012 fe8c 	bl	801f0d0 <SCPI_ErrorPush>
 800c3b8:	e008      	b.n	800c3cc <SCPI_SystemCommunicateLANIPAddress+0xb8>
	case NET_STR_WRONG_NUMBER: SCPI_ErrorPush(context, SCPI_ERROR_NUMERIC_DATA_NOT_ALLOWED); break;
 800c3ba:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f012 fe86 	bl	801f0d0 <SCPI_ErrorPush>
 800c3c4:	e002      	b.n	800c3cc <SCPI_SystemCommunicateLANIPAddress+0xb8>
	default: return SCPI_RES_ERR; break;
 800c3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3ca:	e000      	b.n	800c3ce <SCPI_SystemCommunicateLANIPAddress+0xba>
	}

	return SCPI_RES_OK;
 800c3cc:	2301      	movs	r3, #1
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3728      	adds	r7, #40	; 0x28
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	200052f0 	.word	0x200052f0

0800c3dc <SCPI_SystemCommunicateLANIPAddressQ>:
 * Readout may not be the actual address used by the instrument if DHCP is enabled.
 *
 */

scpi_result_t SCPI_SystemCommunicateLANIPAddressQ(scpi_t * context)
{
 800c3dc:	b590      	push	{r4, r7, lr}
 800c3de:	b08b      	sub	sp, #44	; 0x2c
 800c3e0:	af02      	add	r7, sp, #8
 800c3e2:	6078      	str	r0, [r7, #4]
	int32_t value = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	61fb      	str	r3, [r7, #28]
	char str[16] = {0};
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	60fb      	str	r3, [r7, #12]
 800c3ec:	f107 0310 	add.w	r3, r7, #16
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	605a      	str	r2, [r3, #4]
 800c3f6:	609a      	str	r2, [r3, #8]

	if(!SCPI_ParamChoice(context, LAN_state_select, &value, FALSE))
 800c3f8:	f107 021c 	add.w	r2, r7, #28
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4928      	ldr	r1, [pc, #160]	; (800c4a0 <SCPI_SystemCommunicateLANIPAddressQ+0xc4>)
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f015 ff5f 	bl	80222c4 <SCPI_ParamChoice>
 800c406:	4603      	mov	r3, r0
 800c408:	f083 0301 	eor.w	r3, r3, #1
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d002      	beq.n	800c418 <SCPI_SystemCommunicateLANIPAddressQ+0x3c>
	{
		return SCPI_RES_ERR;
 800c412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c416:	e03f      	b.n	800c498 <SCPI_SystemCommunicateLANIPAddressQ+0xbc>
	}

	if(CURRENT == value)
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d118      	bne.n	800c450 <SCPI_SystemCommunicateLANIPAddressQ+0x74>
	{
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.ip[0],
 800c41e:	4b21      	ldr	r3, [pc, #132]	; (800c4a4 <SCPI_SystemCommunicateLANIPAddressQ+0xc8>)
 800c420:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 800c424:	4619      	mov	r1, r3
									bsp.ip4.ip[1],
 800c426:	4b1f      	ldr	r3, [pc, #124]	; (800c4a4 <SCPI_SystemCommunicateLANIPAddressQ+0xc8>)
 800c428:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.ip[0],
 800c42c:	461c      	mov	r4, r3
									bsp.ip4.ip[2],
 800c42e:	4b1d      	ldr	r3, [pc, #116]	; (800c4a4 <SCPI_SystemCommunicateLANIPAddressQ+0xc8>)
 800c430:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.ip[0],
 800c434:	461a      	mov	r2, r3
									bsp.ip4.ip[3]);
 800c436:	4b1b      	ldr	r3, [pc, #108]	; (800c4a4 <SCPI_SystemCommunicateLANIPAddressQ+0xc8>)
 800c438:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.ip[0],
 800c43c:	f107 000c 	add.w	r0, r7, #12
 800c440:	9301      	str	r3, [sp, #4]
 800c442:	9200      	str	r2, [sp, #0]
 800c444:	4623      	mov	r3, r4
 800c446:	460a      	mov	r2, r1
 800c448:	4917      	ldr	r1, [pc, #92]	; (800c4a8 <SCPI_SystemCommunicateLANIPAddressQ+0xcc>)
 800c44a:	f018 faeb 	bl	8024a24 <siprintf>
 800c44e:	e016      	b.n	800c47e <SCPI_SystemCommunicateLANIPAddressQ+0xa2>
	}
	else if(STATIC == value)
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	2b01      	cmp	r3, #1
 800c454:	d113      	bne.n	800c47e <SCPI_SystemCommunicateLANIPAddressQ+0xa2>
	{
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.ip[0],
 800c456:	4b13      	ldr	r3, [pc, #76]	; (800c4a4 <SCPI_SystemCommunicateLANIPAddressQ+0xc8>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	4619      	mov	r1, r3
									bsp.eeprom.structure.ip4.ip[1],
 800c45c:	4b11      	ldr	r3, [pc, #68]	; (800c4a4 <SCPI_SystemCommunicateLANIPAddressQ+0xc8>)
 800c45e:	785b      	ldrb	r3, [r3, #1]
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.ip[0],
 800c460:	461c      	mov	r4, r3
									bsp.eeprom.structure.ip4.ip[2],
 800c462:	4b10      	ldr	r3, [pc, #64]	; (800c4a4 <SCPI_SystemCommunicateLANIPAddressQ+0xc8>)
 800c464:	789b      	ldrb	r3, [r3, #2]
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.ip[0],
 800c466:	461a      	mov	r2, r3
									bsp.eeprom.structure.ip4.ip[3]);
 800c468:	4b0e      	ldr	r3, [pc, #56]	; (800c4a4 <SCPI_SystemCommunicateLANIPAddressQ+0xc8>)
 800c46a:	78db      	ldrb	r3, [r3, #3]
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.ip[0],
 800c46c:	f107 000c 	add.w	r0, r7, #12
 800c470:	9301      	str	r3, [sp, #4]
 800c472:	9200      	str	r2, [sp, #0]
 800c474:	4623      	mov	r3, r4
 800c476:	460a      	mov	r2, r1
 800c478:	490b      	ldr	r1, [pc, #44]	; (800c4a8 <SCPI_SystemCommunicateLANIPAddressQ+0xcc>)
 800c47a:	f018 fad3 	bl	8024a24 <siprintf>
	}

	SCPI_ResultMnemonic(context, (char*)str);
 800c47e:	f107 030c 	add.w	r3, r7, #12
 800c482:	4618      	mov	r0, r3
 800c484:	f7f3 fece 	bl	8000224 <strlen>
 800c488:	4602      	mov	r2, r0
 800c48a:	f107 030c 	add.w	r3, r7, #12
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f015 f8e8 	bl	8021666 <SCPI_ResultCharacters>
	return SCPI_RES_OK;
 800c496:	2301      	movs	r3, #1
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3724      	adds	r7, #36	; 0x24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd90      	pop	{r4, r7, pc}
 800c4a0:	20000034 	.word	0x20000034
 800c4a4:	200052f0 	.word	0x200052f0
 800c4a8:	08029634 	.word	0x08029634

0800c4ac <SCPI_SystemCommunicateLANIPSmask>:
 * This setting is non-volatile; it is not changed by power cycling, a Factory Reset (*RST).
 *
 */

scpi_result_t SCPI_SystemCommunicateLANIPSmask(scpi_t * context)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b08c      	sub	sp, #48	; 0x30
 800c4b0:	af02      	add	r7, sp, #8
 800c4b2:	6078      	str	r0, [r7, #4]
	char str[16] = {0};
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	617b      	str	r3, [r7, #20]
 800c4b8:	f107 0318 	add.w	r3, r7, #24
 800c4bc:	2200      	movs	r2, #0
 800c4be:	601a      	str	r2, [r3, #0]
 800c4c0:	605a      	str	r2, [r3, #4]
 800c4c2:	609a      	str	r2, [r3, #8]
	uint8_t numb[4] = {0};
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	613b      	str	r3, [r7, #16]
	size_t len = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	60fb      	str	r3, [r7, #12]
	uint8_t conv_result = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(!SCPI_ParamCopyText(context,(char*)str, 16, &len, TRUE))
 800c4d2:	f107 030c 	add.w	r3, r7, #12
 800c4d6:	f107 0114 	add.w	r1, r7, #20
 800c4da:	2201      	movs	r2, #1
 800c4dc:	9200      	str	r2, [sp, #0]
 800c4de:	2210      	movs	r2, #16
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f015 fdbd 	bl	8022060 <SCPI_ParamCopyText>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	f083 0301 	eor.w	r3, r3, #1
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d002      	beq.n	800c4f8 <SCPI_SystemCommunicateLANIPSmask+0x4c>
	{
		return SCPI_RES_ERR;
 800c4f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4f6:	e036      	b.n	800c566 <SCPI_SystemCommunicateLANIPSmask+0xba>
	}

	conv_result = SCPI_StringToIP4Array(str, numb);
 800c4f8:	f107 0210 	add.w	r2, r7, #16
 800c4fc:	f107 0314 	add.w	r3, r7, #20
 800c500:	4611      	mov	r1, r2
 800c502:	4618      	mov	r0, r3
 800c504:	f7ff fe3e 	bl	800c184 <SCPI_StringToIP4Array>
 800c508:	4603      	mov	r3, r0
 800c50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(conv_result)
 800c50e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c512:	2b02      	cmp	r3, #2
 800c514:	d01d      	beq.n	800c552 <SCPI_SystemCommunicateLANIPSmask+0xa6>
 800c516:	2b02      	cmp	r3, #2
 800c518:	dc21      	bgt.n	800c55e <SCPI_SystemCommunicateLANIPSmask+0xb2>
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <SCPI_SystemCommunicateLANIPSmask+0x78>
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d011      	beq.n	800c546 <SCPI_SystemCommunicateLANIPSmask+0x9a>
 800c522:	e01c      	b.n	800c55e <SCPI_SystemCommunicateLANIPSmask+0xb2>
	{
	case NET_STR_OK:
	{
		bsp.ip4.netmask[0] = numb[0];
 800c524:	7c3a      	ldrb	r2, [r7, #16]
 800c526:	4b12      	ldr	r3, [pc, #72]	; (800c570 <SCPI_SystemCommunicateLANIPSmask+0xc4>)
 800c528:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		bsp.ip4.netmask[1] = numb[1];
 800c52c:	7c7a      	ldrb	r2, [r7, #17]
 800c52e:	4b10      	ldr	r3, [pc, #64]	; (800c570 <SCPI_SystemCommunicateLANIPSmask+0xc4>)
 800c530:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
		bsp.ip4.netmask[2] = numb[2];
 800c534:	7cba      	ldrb	r2, [r7, #18]
 800c536:	4b0e      	ldr	r3, [pc, #56]	; (800c570 <SCPI_SystemCommunicateLANIPSmask+0xc4>)
 800c538:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		bsp.ip4.netmask[3] = numb[3];
 800c53c:	7cfa      	ldrb	r2, [r7, #19]
 800c53e:	4b0c      	ldr	r3, [pc, #48]	; (800c570 <SCPI_SystemCommunicateLANIPSmask+0xc4>)
 800c540:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	}break;
 800c544:	e00e      	b.n	800c564 <SCPI_SystemCommunicateLANIPSmask+0xb8>
	case NET_STR_WRONG_FORMAT: SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR); break;
 800c546:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f012 fdc0 	bl	801f0d0 <SCPI_ErrorPush>
 800c550:	e008      	b.n	800c564 <SCPI_SystemCommunicateLANIPSmask+0xb8>
	case NET_STR_WRONG_NUMBER: SCPI_ErrorPush(context, SCPI_ERROR_NUMERIC_DATA_NOT_ALLOWED); break;
 800c552:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f012 fdba 	bl	801f0d0 <SCPI_ErrorPush>
 800c55c:	e002      	b.n	800c564 <SCPI_SystemCommunicateLANIPSmask+0xb8>
	default: return SCPI_RES_ERR; break;
 800c55e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c562:	e000      	b.n	800c566 <SCPI_SystemCommunicateLANIPSmask+0xba>
	}

	return SCPI_RES_OK;
 800c564:	2301      	movs	r3, #1
}
 800c566:	4618      	mov	r0, r3
 800c568:	3728      	adds	r7, #40	; 0x28
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	200052f0 	.word	0x200052f0

0800c574 <SCPI_SystemCommunicateLANIPSmaskQ>:
 * Readout may not be the actual mask used by the instrument if DHCP is enabled.
 *
 */

scpi_result_t SCPI_SystemCommunicateLANIPSmaskQ(scpi_t * context)
{
 800c574:	b590      	push	{r4, r7, lr}
 800c576:	b08b      	sub	sp, #44	; 0x2c
 800c578:	af02      	add	r7, sp, #8
 800c57a:	6078      	str	r0, [r7, #4]
	int32_t value = 0;
 800c57c:	2300      	movs	r3, #0
 800c57e:	61fb      	str	r3, [r7, #28]
	char str[16] = {0};
 800c580:	2300      	movs	r3, #0
 800c582:	60fb      	str	r3, [r7, #12]
 800c584:	f107 0310 	add.w	r3, r7, #16
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]
 800c58c:	605a      	str	r2, [r3, #4]
 800c58e:	609a      	str	r2, [r3, #8]

	if(!SCPI_ParamChoice(context, LAN_state_select, &value, FALSE))
 800c590:	f107 021c 	add.w	r2, r7, #28
 800c594:	2300      	movs	r3, #0
 800c596:	4928      	ldr	r1, [pc, #160]	; (800c638 <SCPI_SystemCommunicateLANIPSmaskQ+0xc4>)
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f015 fe93 	bl	80222c4 <SCPI_ParamChoice>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f083 0301 	eor.w	r3, r3, #1
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d001      	beq.n	800c5ae <SCPI_SystemCommunicateLANIPSmaskQ+0x3a>
	{
		value = CURRENT;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	61fb      	str	r3, [r7, #28]
	}
	if(CURRENT == value)
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d118      	bne.n	800c5e6 <SCPI_SystemCommunicateLANIPSmaskQ+0x72>
	{
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.netmask[0],
 800c5b4:	4b21      	ldr	r3, [pc, #132]	; (800c63c <SCPI_SystemCommunicateLANIPSmaskQ+0xc8>)
 800c5b6:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800c5ba:	4619      	mov	r1, r3
									bsp.ip4.netmask[1],
 800c5bc:	4b1f      	ldr	r3, [pc, #124]	; (800c63c <SCPI_SystemCommunicateLANIPSmaskQ+0xc8>)
 800c5be:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.netmask[0],
 800c5c2:	461c      	mov	r4, r3
									bsp.ip4.netmask[2],
 800c5c4:	4b1d      	ldr	r3, [pc, #116]	; (800c63c <SCPI_SystemCommunicateLANIPSmaskQ+0xc8>)
 800c5c6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.netmask[0],
 800c5ca:	461a      	mov	r2, r3
									bsp.ip4.netmask[3]);
 800c5cc:	4b1b      	ldr	r3, [pc, #108]	; (800c63c <SCPI_SystemCommunicateLANIPSmaskQ+0xc8>)
 800c5ce:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.netmask[0],
 800c5d2:	f107 000c 	add.w	r0, r7, #12
 800c5d6:	9301      	str	r3, [sp, #4]
 800c5d8:	9200      	str	r2, [sp, #0]
 800c5da:	4623      	mov	r3, r4
 800c5dc:	460a      	mov	r2, r1
 800c5de:	4918      	ldr	r1, [pc, #96]	; (800c640 <SCPI_SystemCommunicateLANIPSmaskQ+0xcc>)
 800c5e0:	f018 fa20 	bl	8024a24 <siprintf>
 800c5e4:	e016      	b.n	800c614 <SCPI_SystemCommunicateLANIPSmaskQ+0xa0>
	}
	else if(STATIC == value)
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d113      	bne.n	800c614 <SCPI_SystemCommunicateLANIPSmaskQ+0xa0>
	{
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.netmask[0],
 800c5ec:	4b13      	ldr	r3, [pc, #76]	; (800c63c <SCPI_SystemCommunicateLANIPSmaskQ+0xc8>)
 800c5ee:	791b      	ldrb	r3, [r3, #4]
 800c5f0:	4619      	mov	r1, r3
									bsp.eeprom.structure.ip4.netmask[1],
 800c5f2:	4b12      	ldr	r3, [pc, #72]	; (800c63c <SCPI_SystemCommunicateLANIPSmaskQ+0xc8>)
 800c5f4:	795b      	ldrb	r3, [r3, #5]
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.netmask[0],
 800c5f6:	461c      	mov	r4, r3
									bsp.eeprom.structure.ip4.netmask[2],
 800c5f8:	4b10      	ldr	r3, [pc, #64]	; (800c63c <SCPI_SystemCommunicateLANIPSmaskQ+0xc8>)
 800c5fa:	799b      	ldrb	r3, [r3, #6]
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.netmask[0],
 800c5fc:	461a      	mov	r2, r3
									bsp.eeprom.structure.ip4.netmask[3]);
 800c5fe:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <SCPI_SystemCommunicateLANIPSmaskQ+0xc8>)
 800c600:	79db      	ldrb	r3, [r3, #7]
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.netmask[0],
 800c602:	f107 000c 	add.w	r0, r7, #12
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	9200      	str	r2, [sp, #0]
 800c60a:	4623      	mov	r3, r4
 800c60c:	460a      	mov	r2, r1
 800c60e:	490c      	ldr	r1, [pc, #48]	; (800c640 <SCPI_SystemCommunicateLANIPSmaskQ+0xcc>)
 800c610:	f018 fa08 	bl	8024a24 <siprintf>
	}
	SCPI_ResultMnemonic(context, (char*)str);
 800c614:	f107 030c 	add.w	r3, r7, #12
 800c618:	4618      	mov	r0, r3
 800c61a:	f7f3 fe03 	bl	8000224 <strlen>
 800c61e:	4602      	mov	r2, r0
 800c620:	f107 030c 	add.w	r3, r7, #12
 800c624:	4619      	mov	r1, r3
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f015 f81d 	bl	8021666 <SCPI_ResultCharacters>

	return SCPI_RES_OK;
 800c62c:	2301      	movs	r3, #1
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3724      	adds	r7, #36	; 0x24
 800c632:	46bd      	mov	sp, r7
 800c634:	bd90      	pop	{r4, r7, pc}
 800c636:	bf00      	nop
 800c638:	20000034 	.word	0x20000034
 800c63c:	200052f0 	.word	0x200052f0
 800c640:	08029634 	.word	0x08029634

0800c644 <SCPI_SystemCommunicateLANGateway>:
 * If you change this setting, you must send SYSTem:COMMunicate:LAN:UPDate to activate the new setting.
 *
 */

scpi_result_t SCPI_SystemCommunicateLANGateway(scpi_t * context)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b08c      	sub	sp, #48	; 0x30
 800c648:	af02      	add	r7, sp, #8
 800c64a:	6078      	str	r0, [r7, #4]
	char gateway_str[16] = {0};
 800c64c:	2300      	movs	r3, #0
 800c64e:	617b      	str	r3, [r7, #20]
 800c650:	f107 0318 	add.w	r3, r7, #24
 800c654:	2200      	movs	r2, #0
 800c656:	601a      	str	r2, [r3, #0]
 800c658:	605a      	str	r2, [r3, #4]
 800c65a:	609a      	str	r2, [r3, #8]
	uint8_t gateway_numb[4] = {0};
 800c65c:	2300      	movs	r3, #0
 800c65e:	613b      	str	r3, [r7, #16]
	size_t len = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	60fb      	str	r3, [r7, #12]
	uint8_t conv_result = 0;
 800c664:	2300      	movs	r3, #0
 800c666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(!SCPI_ParamCopyText(context,gateway_str, 16, &len, TRUE))
 800c66a:	f107 030c 	add.w	r3, r7, #12
 800c66e:	f107 0114 	add.w	r1, r7, #20
 800c672:	2201      	movs	r2, #1
 800c674:	9200      	str	r2, [sp, #0]
 800c676:	2210      	movs	r2, #16
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f015 fcf1 	bl	8022060 <SCPI_ParamCopyText>
 800c67e:	4603      	mov	r3, r0
 800c680:	f083 0301 	eor.w	r3, r3, #1
 800c684:	b2db      	uxtb	r3, r3
 800c686:	2b00      	cmp	r3, #0
 800c688:	d002      	beq.n	800c690 <SCPI_SystemCommunicateLANGateway+0x4c>
	{
		return SCPI_RES_ERR;
 800c68a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c68e:	e036      	b.n	800c6fe <SCPI_SystemCommunicateLANGateway+0xba>
	}

	conv_result = SCPI_StringToIP4Array(gateway_str, gateway_numb);
 800c690:	f107 0210 	add.w	r2, r7, #16
 800c694:	f107 0314 	add.w	r3, r7, #20
 800c698:	4611      	mov	r1, r2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7ff fd72 	bl	800c184 <SCPI_StringToIP4Array>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(conv_result)
 800c6a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d01d      	beq.n	800c6ea <SCPI_SystemCommunicateLANGateway+0xa6>
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	dc21      	bgt.n	800c6f6 <SCPI_SystemCommunicateLANGateway+0xb2>
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d002      	beq.n	800c6bc <SCPI_SystemCommunicateLANGateway+0x78>
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d011      	beq.n	800c6de <SCPI_SystemCommunicateLANGateway+0x9a>
 800c6ba:	e01c      	b.n	800c6f6 <SCPI_SystemCommunicateLANGateway+0xb2>
	{
		case NET_STR_OK:
		{
			bsp.ip4.gateway[0] = gateway_numb[0];
 800c6bc:	7c3a      	ldrb	r2, [r7, #16]
 800c6be:	4b12      	ldr	r3, [pc, #72]	; (800c708 <SCPI_SystemCommunicateLANGateway+0xc4>)
 800c6c0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			bsp.ip4.gateway[1] = gateway_numb[1];
 800c6c4:	7c7a      	ldrb	r2, [r7, #17]
 800c6c6:	4b10      	ldr	r3, [pc, #64]	; (800c708 <SCPI_SystemCommunicateLANGateway+0xc4>)
 800c6c8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
			bsp.ip4.gateway[2] = gateway_numb[2];
 800c6cc:	7cba      	ldrb	r2, [r7, #18]
 800c6ce:	4b0e      	ldr	r3, [pc, #56]	; (800c708 <SCPI_SystemCommunicateLANGateway+0xc4>)
 800c6d0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			bsp.ip4.gateway[3] = gateway_numb[3];
 800c6d4:	7cfa      	ldrb	r2, [r7, #19]
 800c6d6:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <SCPI_SystemCommunicateLANGateway+0xc4>)
 800c6d8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
		}break;
 800c6dc:	e00e      	b.n	800c6fc <SCPI_SystemCommunicateLANGateway+0xb8>
		case NET_STR_WRONG_FORMAT: SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR); break;
 800c6de:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f012 fcf4 	bl	801f0d0 <SCPI_ErrorPush>
 800c6e8:	e008      	b.n	800c6fc <SCPI_SystemCommunicateLANGateway+0xb8>
		case NET_STR_WRONG_NUMBER: SCPI_ErrorPush(context, SCPI_ERROR_NUMERIC_DATA_NOT_ALLOWED); break;
 800c6ea:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f012 fcee 	bl	801f0d0 <SCPI_ErrorPush>
 800c6f4:	e002      	b.n	800c6fc <SCPI_SystemCommunicateLANGateway+0xb8>
		default: return SCPI_RES_ERR; break;
 800c6f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6fa:	e000      	b.n	800c6fe <SCPI_SystemCommunicateLANGateway+0xba>
	}

	return SCPI_RES_OK;
 800c6fc:	2301      	movs	r3, #1
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3728      	adds	r7, #40	; 0x28
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	200052f0 	.word	0x200052f0

0800c70c <SCPI_SystemCommunicateLANGatewayQ>:
 * Query the gateway address. Typical return "192.168.1.1".
 *
 */

scpi_result_t SCPI_SystemCommunicateLANGatewayQ(scpi_t * context)
{
 800c70c:	b590      	push	{r4, r7, lr}
 800c70e:	b08b      	sub	sp, #44	; 0x2c
 800c710:	af02      	add	r7, sp, #8
 800c712:	6078      	str	r0, [r7, #4]
	int32_t value = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	61fb      	str	r3, [r7, #28]
	char str[16] = {0};
 800c718:	2300      	movs	r3, #0
 800c71a:	60fb      	str	r3, [r7, #12]
 800c71c:	f107 0310 	add.w	r3, r7, #16
 800c720:	2200      	movs	r2, #0
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	605a      	str	r2, [r3, #4]
 800c726:	609a      	str	r2, [r3, #8]

	if(!SCPI_ParamChoice(context, LAN_state_select, &value, FALSE))
 800c728:	f107 021c 	add.w	r2, r7, #28
 800c72c:	2300      	movs	r3, #0
 800c72e:	4928      	ldr	r1, [pc, #160]	; (800c7d0 <SCPI_SystemCommunicateLANGatewayQ+0xc4>)
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f015 fdc7 	bl	80222c4 <SCPI_ParamChoice>
 800c736:	4603      	mov	r3, r0
 800c738:	f083 0301 	eor.w	r3, r3, #1
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d001      	beq.n	800c746 <SCPI_SystemCommunicateLANGatewayQ+0x3a>
	{
		value = CURRENT;
 800c742:	2300      	movs	r3, #0
 800c744:	61fb      	str	r3, [r7, #28]
	}
	if(CURRENT == value)
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d118      	bne.n	800c77e <SCPI_SystemCommunicateLANGatewayQ+0x72>
	{

		sprintf(str, "%d.%d.%d.%d", bsp.ip4.gateway[0],
 800c74c:	4b21      	ldr	r3, [pc, #132]	; (800c7d4 <SCPI_SystemCommunicateLANGatewayQ+0xc8>)
 800c74e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800c752:	4619      	mov	r1, r3
									bsp.ip4.gateway[1],
 800c754:	4b1f      	ldr	r3, [pc, #124]	; (800c7d4 <SCPI_SystemCommunicateLANGatewayQ+0xc8>)
 800c756:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.gateway[0],
 800c75a:	461c      	mov	r4, r3
									bsp.ip4.gateway[2],
 800c75c:	4b1d      	ldr	r3, [pc, #116]	; (800c7d4 <SCPI_SystemCommunicateLANGatewayQ+0xc8>)
 800c75e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.gateway[0],
 800c762:	461a      	mov	r2, r3
									bsp.ip4.gateway[3]);
 800c764:	4b1b      	ldr	r3, [pc, #108]	; (800c7d4 <SCPI_SystemCommunicateLANGatewayQ+0xc8>)
 800c766:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
		sprintf(str, "%d.%d.%d.%d", bsp.ip4.gateway[0],
 800c76a:	f107 000c 	add.w	r0, r7, #12
 800c76e:	9301      	str	r3, [sp, #4]
 800c770:	9200      	str	r2, [sp, #0]
 800c772:	4623      	mov	r3, r4
 800c774:	460a      	mov	r2, r1
 800c776:	4918      	ldr	r1, [pc, #96]	; (800c7d8 <SCPI_SystemCommunicateLANGatewayQ+0xcc>)
 800c778:	f018 f954 	bl	8024a24 <siprintf>
 800c77c:	e016      	b.n	800c7ac <SCPI_SystemCommunicateLANGatewayQ+0xa0>
	}
	else if(STATIC == value)
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d113      	bne.n	800c7ac <SCPI_SystemCommunicateLANGatewayQ+0xa0>
	{
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.gateway[0],
 800c784:	4b13      	ldr	r3, [pc, #76]	; (800c7d4 <SCPI_SystemCommunicateLANGatewayQ+0xc8>)
 800c786:	7a1b      	ldrb	r3, [r3, #8]
 800c788:	4619      	mov	r1, r3
									bsp.eeprom.structure.ip4.gateway[1],
 800c78a:	4b12      	ldr	r3, [pc, #72]	; (800c7d4 <SCPI_SystemCommunicateLANGatewayQ+0xc8>)
 800c78c:	7a5b      	ldrb	r3, [r3, #9]
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.gateway[0],
 800c78e:	461c      	mov	r4, r3
									bsp.eeprom.structure.ip4.gateway[2],
 800c790:	4b10      	ldr	r3, [pc, #64]	; (800c7d4 <SCPI_SystemCommunicateLANGatewayQ+0xc8>)
 800c792:	7a9b      	ldrb	r3, [r3, #10]
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.gateway[0],
 800c794:	461a      	mov	r2, r3
									bsp.eeprom.structure.ip4.gateway[3]);
 800c796:	4b0f      	ldr	r3, [pc, #60]	; (800c7d4 <SCPI_SystemCommunicateLANGatewayQ+0xc8>)
 800c798:	7adb      	ldrb	r3, [r3, #11]
		sprintf(str, "%d.%d.%d.%d", bsp.eeprom.structure.ip4.gateway[0],
 800c79a:	f107 000c 	add.w	r0, r7, #12
 800c79e:	9301      	str	r3, [sp, #4]
 800c7a0:	9200      	str	r2, [sp, #0]
 800c7a2:	4623      	mov	r3, r4
 800c7a4:	460a      	mov	r2, r1
 800c7a6:	490c      	ldr	r1, [pc, #48]	; (800c7d8 <SCPI_SystemCommunicateLANGatewayQ+0xcc>)
 800c7a8:	f018 f93c 	bl	8024a24 <siprintf>
	}

	SCPI_ResultMnemonic(context, (char*)str);
 800c7ac:	f107 030c 	add.w	r3, r7, #12
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7f3 fd37 	bl	8000224 <strlen>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	f107 030c 	add.w	r3, r7, #12
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f014 ff51 	bl	8021666 <SCPI_ResultCharacters>

	return SCPI_RES_OK;
 800c7c4:	2301      	movs	r3, #1
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3724      	adds	r7, #36	; 0x24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd90      	pop	{r4, r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20000034 	.word	0x20000034
 800c7d4:	200052f0 	.word	0x200052f0
 800c7d8:	08029634 	.word	0x08029634

0800c7dc <SCPI_SystemCommunicateLANMAC>:
 * To use this function the device must be first unlocked using the SYSTem:SECure:STATe command.
 *
 */

scpi_result_t SCPI_SystemCommunicateLANMAC(scpi_t * context)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b08c      	sub	sp, #48	; 0x30
 800c7e0:	af02      	add	r7, sp, #8
 800c7e2:	6078      	str	r0, [r7, #4]
	uint8_t str[18] = {0};
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	617b      	str	r3, [r7, #20]
 800c7e8:	f107 0318 	add.w	r3, r7, #24
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	605a      	str	r2, [r3, #4]
 800c7f2:	609a      	str	r2, [r3, #8]
 800c7f4:	819a      	strh	r2, [r3, #12]
	uint8_t numb[6] = {0};
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60fb      	str	r3, [r7, #12]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	823b      	strh	r3, [r7, #16]
	size_t len = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	60bb      	str	r3, [r7, #8]
	uint8_t conv_result = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(bsp.security.status)
 800c808:	4b31      	ldr	r3, [pc, #196]	; (800c8d0 <SCPI_SystemCommunicateLANMAC+0xf4>)
 800c80a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d007      	beq.n	800c822 <SCPI_SystemCommunicateLANMAC+0x46>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_SERVICE_MODE_SECURE);
 800c812:	f44f 7148 	mov.w	r1, #800	; 0x320
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f012 fc5a 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800c81c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c820:	e051      	b.n	800c8c6 <SCPI_SystemCommunicateLANMAC+0xea>
	}

	if(!SCPI_ParamCopyText(context,(char*)str, 18, &len, TRUE))
 800c822:	f107 0308 	add.w	r3, r7, #8
 800c826:	f107 0114 	add.w	r1, r7, #20
 800c82a:	2201      	movs	r2, #1
 800c82c:	9200      	str	r2, [sp, #0]
 800c82e:	2212      	movs	r2, #18
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f015 fc15 	bl	8022060 <SCPI_ParamCopyText>
 800c836:	4603      	mov	r3, r0
 800c838:	f083 0301 	eor.w	r3, r3, #1
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d002      	beq.n	800c848 <SCPI_SystemCommunicateLANMAC+0x6c>
	{
		return SCPI_RES_ERR;
 800c842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c846:	e03e      	b.n	800c8c6 <SCPI_SystemCommunicateLANMAC+0xea>
	}

	conv_result = SCPI_StringToMACArray(str, numb);
 800c848:	f107 020c 	add.w	r2, r7, #12
 800c84c:	f107 0314 	add.w	r3, r7, #20
 800c850:	4611      	mov	r1, r2
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff fce0 	bl	800c218 <SCPI_StringToMACArray>
 800c858:	4603      	mov	r3, r0
 800c85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(conv_result)
 800c85e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c862:	2b02      	cmp	r3, #2
 800c864:	d025      	beq.n	800c8b2 <SCPI_SystemCommunicateLANMAC+0xd6>
 800c866:	2b02      	cmp	r3, #2
 800c868:	dc29      	bgt.n	800c8be <SCPI_SystemCommunicateLANMAC+0xe2>
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d002      	beq.n	800c874 <SCPI_SystemCommunicateLANMAC+0x98>
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d019      	beq.n	800c8a6 <SCPI_SystemCommunicateLANMAC+0xca>
 800c872:	e024      	b.n	800c8be <SCPI_SystemCommunicateLANMAC+0xe2>
	{
		case NET_STR_OK:
		{
			bsp.ip4.MAC[0] = numb[0];
 800c874:	7b3a      	ldrb	r2, [r7, #12]
 800c876:	4b16      	ldr	r3, [pc, #88]	; (800c8d0 <SCPI_SystemCommunicateLANMAC+0xf4>)
 800c878:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			bsp.ip4.MAC[1] = numb[1];
 800c87c:	7b7a      	ldrb	r2, [r7, #13]
 800c87e:	4b14      	ldr	r3, [pc, #80]	; (800c8d0 <SCPI_SystemCommunicateLANMAC+0xf4>)
 800c880:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
			bsp.ip4.MAC[2] = numb[2];
 800c884:	7bba      	ldrb	r2, [r7, #14]
 800c886:	4b12      	ldr	r3, [pc, #72]	; (800c8d0 <SCPI_SystemCommunicateLANMAC+0xf4>)
 800c888:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			bsp.ip4.MAC[3] = numb[3];
 800c88c:	7bfa      	ldrb	r2, [r7, #15]
 800c88e:	4b10      	ldr	r3, [pc, #64]	; (800c8d0 <SCPI_SystemCommunicateLANMAC+0xf4>)
 800c890:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			bsp.ip4.MAC[4] = numb[4];
 800c894:	7c3a      	ldrb	r2, [r7, #16]
 800c896:	4b0e      	ldr	r3, [pc, #56]	; (800c8d0 <SCPI_SystemCommunicateLANMAC+0xf4>)
 800c898:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			bsp.ip4.MAC[5] = numb[5];
 800c89c:	7c7a      	ldrb	r2, [r7, #17]
 800c89e:	4b0c      	ldr	r3, [pc, #48]	; (800c8d0 <SCPI_SystemCommunicateLANMAC+0xf4>)
 800c8a0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		}break;
 800c8a4:	e00e      	b.n	800c8c4 <SCPI_SystemCommunicateLANMAC+0xe8>
		case NET_STR_WRONG_FORMAT: SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR); break;
 800c8a6:	f06f 0167 	mvn.w	r1, #103	; 0x67
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f012 fc10 	bl	801f0d0 <SCPI_ErrorPush>
 800c8b0:	e008      	b.n	800c8c4 <SCPI_SystemCommunicateLANMAC+0xe8>
		case NET_STR_WRONG_NUMBER: SCPI_ErrorPush(context, SCPI_ERROR_NUMERIC_DATA_NOT_ALLOWED); break;
 800c8b2:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f012 fc0a 	bl	801f0d0 <SCPI_ErrorPush>
 800c8bc:	e002      	b.n	800c8c4 <SCPI_SystemCommunicateLANMAC+0xe8>
		default: return SCPI_RES_ERR; break;
 800c8be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8c2:	e000      	b.n	800c8c6 <SCPI_SystemCommunicateLANMAC+0xea>
	}

	return SCPI_RES_OK;
 800c8c4:	2301      	movs	r3, #1
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3728      	adds	r7, #40	; 0x28
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	200052f0 	.word	0x200052f0

0800c8d4 <SCPI_SystemCommunicateLANMACQ>:
 * Query the device MAC address. The default value is "00:80:E1:00:00:00".
 *
 */

scpi_result_t SCPI_SystemCommunicateLANMACQ(scpi_t * context)
{
 800c8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8d6:	b08d      	sub	sp, #52	; 0x34
 800c8d8:	af04      	add	r7, sp, #16
 800c8da:	6078      	str	r0, [r7, #4]
	char str[18] = {0};
 800c8dc:	2300      	movs	r3, #0
 800c8de:	60fb      	str	r3, [r7, #12]
 800c8e0:	f107 0310 	add.w	r3, r7, #16
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]
 800c8e8:	605a      	str	r2, [r3, #4]
 800c8ea:	609a      	str	r2, [r3, #8]
 800c8ec:	819a      	strh	r2, [r3, #12]

	if(!bsp.default_cfg)
 800c8ee:	4b2a      	ldr	r3, [pc, #168]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c8f0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d122      	bne.n	800c93e <SCPI_SystemCommunicateLANMACQ+0x6a>
	{
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.ip4.MAC[0],
 800c8f8:	4b27      	ldr	r3, [pc, #156]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c8fa:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800c8fe:	461d      	mov	r5, r3
														bsp.ip4.MAC[1],
 800c900:	4b25      	ldr	r3, [pc, #148]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c902:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.ip4.MAC[0],
 800c906:	461e      	mov	r6, r3
														bsp.ip4.MAC[2],
 800c908:	4b23      	ldr	r3, [pc, #140]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c90a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.ip4.MAC[0],
 800c90e:	461a      	mov	r2, r3
														bsp.ip4.MAC[3],
 800c910:	4b21      	ldr	r3, [pc, #132]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c912:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.ip4.MAC[0],
 800c916:	4619      	mov	r1, r3
														bsp.ip4.MAC[4],
 800c918:	4b1f      	ldr	r3, [pc, #124]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c91a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.ip4.MAC[0],
 800c91e:	461c      	mov	r4, r3
														bsp.ip4.MAC[5]);
 800c920:	4b1d      	ldr	r3, [pc, #116]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c922:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.ip4.MAC[0],
 800c926:	f107 000c 	add.w	r0, r7, #12
 800c92a:	9303      	str	r3, [sp, #12]
 800c92c:	9402      	str	r4, [sp, #8]
 800c92e:	9101      	str	r1, [sp, #4]
 800c930:	9200      	str	r2, [sp, #0]
 800c932:	4633      	mov	r3, r6
 800c934:	462a      	mov	r2, r5
 800c936:	4919      	ldr	r1, [pc, #100]	; (800c99c <SCPI_SystemCommunicateLANMACQ+0xc8>)
 800c938:	f018 f874 	bl	8024a24 <siprintf>
 800c93c:	e01b      	b.n	800c976 <SCPI_SystemCommunicateLANMACQ+0xa2>
	}
	else
	{
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.eeprom.structure.ip4.MAC[0],
 800c93e:	4b16      	ldr	r3, [pc, #88]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c940:	7b1b      	ldrb	r3, [r3, #12]
 800c942:	461d      	mov	r5, r3
														bsp.eeprom.structure.ip4.MAC[1],
 800c944:	4b14      	ldr	r3, [pc, #80]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c946:	7b5b      	ldrb	r3, [r3, #13]
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.eeprom.structure.ip4.MAC[0],
 800c948:	461e      	mov	r6, r3
														bsp.eeprom.structure.ip4.MAC[2],
 800c94a:	4b13      	ldr	r3, [pc, #76]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c94c:	7b9b      	ldrb	r3, [r3, #14]
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.eeprom.structure.ip4.MAC[0],
 800c94e:	461a      	mov	r2, r3
														bsp.eeprom.structure.ip4.MAC[3],
 800c950:	4b11      	ldr	r3, [pc, #68]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c952:	7bdb      	ldrb	r3, [r3, #15]
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.eeprom.structure.ip4.MAC[0],
 800c954:	4619      	mov	r1, r3
														bsp.eeprom.structure.ip4.MAC[4],
 800c956:	4b10      	ldr	r3, [pc, #64]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c958:	7c1b      	ldrb	r3, [r3, #16]
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.eeprom.structure.ip4.MAC[0],
 800c95a:	461c      	mov	r4, r3
														bsp.eeprom.structure.ip4.MAC[5]);
 800c95c:	4b0e      	ldr	r3, [pc, #56]	; (800c998 <SCPI_SystemCommunicateLANMACQ+0xc4>)
 800c95e:	7c5b      	ldrb	r3, [r3, #17]
		sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",	bsp.eeprom.structure.ip4.MAC[0],
 800c960:	f107 000c 	add.w	r0, r7, #12
 800c964:	9303      	str	r3, [sp, #12]
 800c966:	9402      	str	r4, [sp, #8]
 800c968:	9101      	str	r1, [sp, #4]
 800c96a:	9200      	str	r2, [sp, #0]
 800c96c:	4633      	mov	r3, r6
 800c96e:	462a      	mov	r2, r5
 800c970:	490a      	ldr	r1, [pc, #40]	; (800c99c <SCPI_SystemCommunicateLANMACQ+0xc8>)
 800c972:	f018 f857 	bl	8024a24 <siprintf>
	}

	SCPI_ResultMnemonic(context, (char*)str);
 800c976:	f107 030c 	add.w	r3, r7, #12
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7f3 fc52 	bl	8000224 <strlen>
 800c980:	4602      	mov	r2, r0
 800c982:	f107 030c 	add.w	r3, r7, #12
 800c986:	4619      	mov	r1, r3
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f014 fe6c 	bl	8021666 <SCPI_ResultCharacters>

	return SCPI_RES_OK;
 800c98e:	2301      	movs	r3, #1
}
 800c990:	4618      	mov	r0, r3
 800c992:	3724      	adds	r7, #36	; 0x24
 800c994:	46bd      	mov	sp, r7
 800c996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c998:	200052f0 	.word	0x200052f0
 800c99c:	08029640 	.word	0x08029640

0800c9a0 <SCPI_SystemCommunicateLANPort>:
 * If you change this setting, you must send SYSTem:COMMunicate:LAN:UPDate to activate the new setting.
 *
 */

scpi_result_t SCPI_SystemCommunicateLANPort(scpi_t * context)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
    uint32_t port = 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	60fb      	str	r3, [r7, #12]

    if(!SCPI_ParamUInt32(context, &port, TRUE))
 800c9ac:	f107 030c 	add.w	r3, r7, #12
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f015 fb41 	bl	802203c <SCPI_ParamUInt32>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	f083 0301 	eor.w	r3, r3, #1
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d002      	beq.n	800c9cc <SCPI_SystemCommunicateLANPort+0x2c>
    {
        return SCPI_RES_ERR;
 800c9c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9ca:	e011      	b.n	800c9f0 <SCPI_SystemCommunicateLANPort+0x50>
    }

    if(port > ETH_PORT_MAX_VAL)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9d2:	d307      	bcc.n	800c9e4 <SCPI_SystemCommunicateLANPort+0x44>
    {
        SCPI_ErrorPush(context, SCPI_ERROR_TOO_MANY_DIGITS);
 800c9d4:	f06f 017b 	mvn.w	r1, #123	; 0x7b
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f012 fb79 	bl	801f0d0 <SCPI_ErrorPush>
        return SCPI_RES_ERR;
 800c9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9e2:	e005      	b.n	800c9f0 <SCPI_SystemCommunicateLANPort+0x50>
    }


    bsp.ip4.port = (uint16_t)port;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	4b03      	ldr	r3, [pc, #12]	; (800c9f8 <SCPI_SystemCommunicateLANPort+0x58>)
 800c9ea:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	return SCPI_RES_OK;
 800c9ee:	2301      	movs	r3, #1
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	200052f0 	.word	0x200052f0

0800c9fc <SCPI_SystemCommunicateLANPortQ>:
 * Query the TCP/IP port number. Typical result 2000.
 *
 */

scpi_result_t SCPI_SystemCommunicateLANPortQ(scpi_t * context)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
	int32_t value = 0;
 800ca04:	2300      	movs	r3, #0
 800ca06:	60fb      	str	r3, [r7, #12]

	if(!SCPI_ParamChoice(context, LAN_state_select, &value, TRUE))
 800ca08:	f107 020c 	add.w	r2, r7, #12
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	4914      	ldr	r1, [pc, #80]	; (800ca60 <SCPI_SystemCommunicateLANPortQ+0x64>)
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f015 fc57 	bl	80222c4 <SCPI_ParamChoice>
 800ca16:	4603      	mov	r3, r0
 800ca18:	f083 0301 	eor.w	r3, r3, #1
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d002      	beq.n	800ca28 <SCPI_SystemCommunicateLANPortQ+0x2c>
	{
		return SCPI_RES_ERR;
 800ca22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca26:	e016      	b.n	800ca56 <SCPI_SystemCommunicateLANPortQ+0x5a>
	}

	if(CURRENT == value)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d108      	bne.n	800ca40 <SCPI_SystemCommunicateLANPortQ+0x44>
	{
		SCPI_ResultUInt16(context,bsp.ip4.port);
 800ca2e:	4b0d      	ldr	r3, [pc, #52]	; (800ca64 <SCPI_SystemCommunicateLANPortQ+0x68>)
 800ca30:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ca34:	220a      	movs	r2, #10
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f014 feb2 	bl	80217a2 <SCPI_ResultUInt32Base>
 800ca3e:	e009      	b.n	800ca54 <SCPI_SystemCommunicateLANPortQ+0x58>
	}
	else if(STATIC == value)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d106      	bne.n	800ca54 <SCPI_SystemCommunicateLANPortQ+0x58>
	{
		SCPI_ResultUInt16(context,bsp.eeprom.structure.ip4.port);
 800ca46:	4b07      	ldr	r3, [pc, #28]	; (800ca64 <SCPI_SystemCommunicateLANPortQ+0x68>)
 800ca48:	8a5b      	ldrh	r3, [r3, #18]
 800ca4a:	220a      	movs	r2, #10
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f014 fea7 	bl	80217a2 <SCPI_ResultUInt32Base>
	}

	return SCPI_RES_OK;
 800ca54:	2301      	movs	r3, #1
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	20000034 	.word	0x20000034
 800ca64:	200052f0 	.word	0x200052f0

0800ca68 <SCPI_SystemCommunicationLanUpdate>:
 * This command must be sent after changing the settings for DHCP, gateway, hostname, IP address, subnet mask.
 *
 */

scpi_result_t SCPI_SystemCommunicationLanUpdate(scpi_t * context)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]

	if(bsp.security.status)
 800ca70:	4b3c      	ldr	r3, [pc, #240]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800ca72:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d007      	beq.n	800ca8a <SCPI_SystemCommunicationLanUpdate+0x22>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_SERVICE_MODE_SECURE);
 800ca7a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f012 fb26 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800ca84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca88:	e068      	b.n	800cb5c <SCPI_SystemCommunicationLanUpdate+0xf4>
	}

	bsp.eeprom.structure.ip4.MAC[0] = bsp.ip4.MAC[0];
 800ca8a:	4b36      	ldr	r3, [pc, #216]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800ca8c:	f893 2096 	ldrb.w	r2, [r3, #150]	; 0x96
 800ca90:	4b34      	ldr	r3, [pc, #208]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800ca92:	731a      	strb	r2, [r3, #12]
	bsp.eeprom.structure.ip4.MAC[1] = bsp.ip4.MAC[1];
 800ca94:	4b33      	ldr	r3, [pc, #204]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800ca96:	f893 2097 	ldrb.w	r2, [r3, #151]	; 0x97
 800ca9a:	4b32      	ldr	r3, [pc, #200]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800ca9c:	735a      	strb	r2, [r3, #13]
	bsp.eeprom.structure.ip4.MAC[2] = bsp.ip4.MAC[2];
 800ca9e:	4b31      	ldr	r3, [pc, #196]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800caa0:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 800caa4:	4b2f      	ldr	r3, [pc, #188]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800caa6:	739a      	strb	r2, [r3, #14]
	bsp.eeprom.structure.ip4.MAC[3] = bsp.ip4.MAC[3];
 800caa8:	4b2e      	ldr	r3, [pc, #184]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800caaa:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
 800caae:	4b2d      	ldr	r3, [pc, #180]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cab0:	73da      	strb	r2, [r3, #15]
	bsp.eeprom.structure.ip4.MAC[4] = bsp.ip4.MAC[4];
 800cab2:	4b2c      	ldr	r3, [pc, #176]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cab4:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
 800cab8:	4b2a      	ldr	r3, [pc, #168]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800caba:	741a      	strb	r2, [r3, #16]
	bsp.eeprom.structure.ip4.MAC[5] = bsp.ip4.MAC[5];
 800cabc:	4b29      	ldr	r3, [pc, #164]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cabe:	f893 209b 	ldrb.w	r2, [r3, #155]	; 0x9b
 800cac2:	4b28      	ldr	r3, [pc, #160]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cac4:	745a      	strb	r2, [r3, #17]

	bsp.eeprom.structure.ip4.gateway[0] = bsp.ip4.gateway[0];
 800cac6:	4b27      	ldr	r3, [pc, #156]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cac8:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800cacc:	4b25      	ldr	r3, [pc, #148]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cace:	721a      	strb	r2, [r3, #8]
	bsp.eeprom.structure.ip4.gateway[1] = bsp.ip4.gateway[1];
 800cad0:	4b24      	ldr	r3, [pc, #144]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cad2:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800cad6:	4b23      	ldr	r3, [pc, #140]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cad8:	725a      	strb	r2, [r3, #9]
	bsp.eeprom.structure.ip4.gateway[2] = bsp.ip4.gateway[2];
 800cada:	4b22      	ldr	r3, [pc, #136]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cadc:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 800cae0:	4b20      	ldr	r3, [pc, #128]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cae2:	729a      	strb	r2, [r3, #10]
	bsp.eeprom.structure.ip4.gateway[3] = bsp.ip4.gateway[3];
 800cae4:	4b1f      	ldr	r3, [pc, #124]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cae6:	f893 2095 	ldrb.w	r2, [r3, #149]	; 0x95
 800caea:	4b1e      	ldr	r3, [pc, #120]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800caec:	72da      	strb	r2, [r3, #11]

	bsp.eeprom.structure.ip4.ip[0] = bsp.ip4.ip[0];
 800caee:	4b1d      	ldr	r3, [pc, #116]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800caf0:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 800caf4:	4b1b      	ldr	r3, [pc, #108]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800caf6:	701a      	strb	r2, [r3, #0]
	bsp.eeprom.structure.ip4.ip[1] = bsp.ip4.ip[1];
 800caf8:	4b1a      	ldr	r3, [pc, #104]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cafa:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 800cafe:	4b19      	ldr	r3, [pc, #100]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb00:	705a      	strb	r2, [r3, #1]
	bsp.eeprom.structure.ip4.ip[2] = bsp.ip4.ip[2];
 800cb02:	4b18      	ldr	r3, [pc, #96]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb04:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800cb08:	4b16      	ldr	r3, [pc, #88]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb0a:	709a      	strb	r2, [r3, #2]
	bsp.eeprom.structure.ip4.ip[3] = bsp.ip4.ip[3];
 800cb0c:	4b15      	ldr	r3, [pc, #84]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb0e:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
 800cb12:	4b14      	ldr	r3, [pc, #80]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb14:	70da      	strb	r2, [r3, #3]

	bsp.eeprom.structure.ip4.netmask[0] = bsp.ip4.netmask[0];
 800cb16:	4b13      	ldr	r3, [pc, #76]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb18:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
 800cb1c:	4b11      	ldr	r3, [pc, #68]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb1e:	711a      	strb	r2, [r3, #4]
	bsp.eeprom.structure.ip4.netmask[1] = bsp.ip4.netmask[1];
 800cb20:	4b10      	ldr	r3, [pc, #64]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb22:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800cb26:	4b0f      	ldr	r3, [pc, #60]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb28:	715a      	strb	r2, [r3, #5]
	bsp.eeprom.structure.ip4.netmask[2] = bsp.ip4.netmask[2];
 800cb2a:	4b0e      	ldr	r3, [pc, #56]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb2c:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800cb30:	4b0c      	ldr	r3, [pc, #48]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb32:	719a      	strb	r2, [r3, #6]
	bsp.eeprom.structure.ip4.netmask[3] = bsp.ip4.netmask[3];
 800cb34:	4b0b      	ldr	r3, [pc, #44]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb36:	f893 2091 	ldrb.w	r2, [r3, #145]	; 0x91
 800cb3a:	4b0a      	ldr	r3, [pc, #40]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb3c:	71da      	strb	r2, [r3, #7]

	if(BSP_OK == EEPROM_Write(&bsp.eeprom,EEPROM_CFG_SIZE))
 800cb3e:	2178      	movs	r1, #120	; 0x78
 800cb40:	4808      	ldr	r0, [pc, #32]	; (800cb64 <SCPI_SystemCommunicationLanUpdate+0xfc>)
 800cb42:	f7fe f88d 	bl	800ac60 <EEPROM_Write>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d101      	bne.n	800cb50 <SCPI_SystemCommunicationLanUpdate+0xe8>
	{
		return SCPI_RES_OK;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e005      	b.n	800cb5c <SCPI_SystemCommunicationLanUpdate+0xf4>
	}
	else
	{
		SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800cb50:	4905      	ldr	r1, [pc, #20]	; (800cb68 <SCPI_SystemCommunicationLanUpdate+0x100>)
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f012 fabc 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800cb58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	200052f0 	.word	0x200052f0
 800cb68:	fffffeca 	.word	0xfffffeca

0800cb6c <SCPI_SystemSecureState>:
 * 				"<password>"	Password string. The default password is "ETH1CLCR1". Max. password lenght is PASSWORD_LENGTH.
 *
 */

scpi_result_t SCPI_SystemSecureState(scpi_t * context)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b08c      	sub	sp, #48	; 0x30
 800cb70:	af02      	add	r7, sp, #8
 800cb72:	6078      	str	r0, [r7, #4]
	int32_t state = 0;
 800cb74:	2300      	movs	r3, #0
 800cb76:	623b      	str	r3, [r7, #32]
	int8_t password_read[STRING_LENGTH] = {0};
 800cb78:	2300      	movs	r3, #0
 800cb7a:	613b      	str	r3, [r7, #16]
 800cb7c:	f107 0314 	add.w	r3, r7, #20
 800cb80:	2200      	movs	r2, #0
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	605a      	str	r2, [r3, #4]
 800cb86:	609a      	str	r2, [r3, #8]
	size_t length = 0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60fb      	str	r3, [r7, #12]
	int8_t* password_reference = bsp.eeprom.structure.password;
 800cb8c:	4b20      	ldr	r3, [pc, #128]	; (800cc10 <SCPI_SystemSecureState+0xa4>)
 800cb8e:	627b      	str	r3, [r7, #36]	; 0x24

	if(!SCPI_ParamChoice(context, security_state_select, &state, TRUE))
 800cb90:	f107 0220 	add.w	r2, r7, #32
 800cb94:	2301      	movs	r3, #1
 800cb96:	491f      	ldr	r1, [pc, #124]	; (800cc14 <SCPI_SystemSecureState+0xa8>)
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f015 fb93 	bl	80222c4 <SCPI_ParamChoice>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	f083 0301 	eor.w	r3, r3, #1
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <SCPI_SystemSecureState+0x44>
	{
		return SCPI_RES_ERR;
 800cbaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbae:	e02a      	b.n	800cc06 <SCPI_SystemSecureState+0x9a>
	}

	if(!SCPI_ParamCopyText(context, (char*)password_read, STRING_LENGTH, &length, TRUE))
 800cbb0:	f107 030c 	add.w	r3, r7, #12
 800cbb4:	f107 0110 	add.w	r1, r7, #16
 800cbb8:	2201      	movs	r2, #1
 800cbba:	9200      	str	r2, [sp, #0]
 800cbbc:	2210      	movs	r2, #16
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f015 fa4e 	bl	8022060 <SCPI_ParamCopyText>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	f083 0301 	eor.w	r3, r3, #1
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d002      	beq.n	800cbd6 <SCPI_SystemSecureState+0x6a>
	{
		return SCPI_RES_ERR;
 800cbd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbd4:	e017      	b.n	800cc06 <SCPI_SystemSecureState+0x9a>
	}

	if(!strcmp((const char*)password_read, (const char*)password_reference))
 800cbd6:	f107 0310 	add.w	r3, r7, #16
 800cbda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7f3 fb17 	bl	8000210 <strcmp>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d107      	bne.n	800cbf8 <SCPI_SystemSecureState+0x8c>
	{
		bsp.security.status = state;
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	4b0a      	ldr	r3, [pc, #40]	; (800cc18 <SCPI_SystemSecureState+0xac>)
 800cbee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		return SCPI_RES_ERR;
 800cbf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbf6:	e006      	b.n	800cc06 <SCPI_SystemSecureState+0x9a>
	}
	else
	{
		SCPI_ErrorPush(context, SCPI_ERROR_SERVICE_INVALID_PASSWORD);
 800cbf8:	f240 3121 	movw	r1, #801	; 0x321
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f012 fa67 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800cc02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	return SCPI_RES_OK;
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3728      	adds	r7, #40	; 0x28
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20005344 	.word	0x20005344
 800cc14:	2000006c 	.word	0x2000006c
 800cc18:	200052f0 	.word	0x200052f0

0800cc1c <SCPI_SystemSecureStateQ>:
 * Query the device security state. Returns 1 or 0.
 *
 */

scpi_result_t SCPI_SystemSecureStateQ(scpi_t * context)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
	SCPI_ResultUInt8(context, bsp.security.status);
 800cc24:	4b06      	ldr	r3, [pc, #24]	; (800cc40 <SCPI_SystemSecureStateQ+0x24>)
 800cc26:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800cc2a:	220a      	movs	r2, #10
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f014 fdb7 	bl	80217a2 <SCPI_ResultUInt32Base>
	return SCPI_RES_OK;
 800cc34:	2301      	movs	r3, #1
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	200052f0 	.word	0x200052f0
 800cc44:	00000000 	.word	0x00000000

0800cc48 <SCPI_SystemTemperatureQ>:
 * Returns the instrument's internal temperature. The temperature format depends on the selected unit (celsius, kelvin or fahrenheit).
 *
 */

scpi_result_t SCPI_SystemTemperatureQ(scpi_t * context)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
	float temperature = 0.0;
 800cc50:	f04f 0300 	mov.w	r3, #0
 800cc54:	60fb      	str	r3, [r7, #12]

	HDC1080_measure_temperature(&hi2c3, &temperature);
 800cc56:	f107 030c 	add.w	r3, r7, #12
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	482a      	ldr	r0, [pc, #168]	; (800cd08 <SCPI_SystemTemperatureQ+0xc0>)
 800cc5e:	f7fe fa07 	bl	800b070 <HDC1080_measure_temperature>

	switch(bsp.temperature.unit)
 800cc62:	4b2a      	ldr	r3, [pc, #168]	; (800cd0c <SCPI_SystemTemperatureQ+0xc4>)
 800cc64:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cc68:	2b03      	cmp	r3, #3
 800cc6a:	d020      	beq.n	800ccae <SCPI_SystemTemperatureQ+0x66>
 800cc6c:	2b03      	cmp	r3, #3
 800cc6e:	dc31      	bgt.n	800ccd4 <SCPI_SystemTemperatureQ+0x8c>
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d02e      	beq.n	800ccd2 <SCPI_SystemTemperatureQ+0x8a>
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d12d      	bne.n	800ccd4 <SCPI_SystemTemperatureQ+0x8c>
	{
		case CELSIUS: break;
		case FAHRENHEIT: temperature = (temperature*1.8)+32; break;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7f3 fc94 	bl	80005a8 <__aeabi_f2d>
 800cc80:	a31d      	add	r3, pc, #116	; (adr r3, 800ccf8 <SCPI_SystemTemperatureQ+0xb0>)
 800cc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc86:	f7f3 fce7 	bl	8000658 <__aeabi_dmul>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	4610      	mov	r0, r2
 800cc90:	4619      	mov	r1, r3
 800cc92:	f04f 0200 	mov.w	r2, #0
 800cc96:	4b1e      	ldr	r3, [pc, #120]	; (800cd10 <SCPI_SystemTemperatureQ+0xc8>)
 800cc98:	f7f3 fb28 	bl	80002ec <__adddf3>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4610      	mov	r0, r2
 800cca2:	4619      	mov	r1, r3
 800cca4:	f7f3 ffd0 	bl	8000c48 <__aeabi_d2f>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	e012      	b.n	800ccd4 <SCPI_SystemTemperatureQ+0x8c>
		case KELVIN: temperature += 273.15; break;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7f3 fc79 	bl	80005a8 <__aeabi_f2d>
 800ccb6:	a312      	add	r3, pc, #72	; (adr r3, 800cd00 <SCPI_SystemTemperatureQ+0xb8>)
 800ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbc:	f7f3 fb16 	bl	80002ec <__adddf3>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	f7f3 ffbe 	bl	8000c48 <__aeabi_d2f>
 800cccc:	4603      	mov	r3, r0
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	e000      	b.n	800ccd4 <SCPI_SystemTemperatureQ+0x8c>
		case CELSIUS: break;
 800ccd2:	bf00      	nop
	}

	SCPI_ResultUInt8(context, (uint8_t)temperature);
 800ccd4:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccdc:	edc7 7a00 	vstr	s15, [r7]
 800cce0:	783b      	ldrb	r3, [r7, #0]
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	220a      	movs	r2, #10
 800cce6:	4619      	mov	r1, r3
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f014 fd5a 	bl	80217a2 <SCPI_ResultUInt32Base>

	return SCPI_RES_OK;
 800ccee:	2301      	movs	r3, #1
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	cccccccd 	.word	0xcccccccd
 800ccfc:	3ffccccc 	.word	0x3ffccccc
 800cd00:	66666666 	.word	0x66666666
 800cd04:	40711266 	.word	0x40711266
 800cd08:	2000042c 	.word	0x2000042c
 800cd0c:	200052f0 	.word	0x200052f0
 800cd10:	40400000 	.word	0x40400000

0800cd14 <SCPI_SystemTemperatureUnit>:
 * 				K	kelvin
 *
 */

scpi_result_t SCPI_SystemTemperatureUnit(scpi_t * context)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
	int32_t param = 0;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	60fb      	str	r3, [r7, #12]

    if(!SCPI_ParamChoice(context, temperature_unit_select, &param, TRUE))
 800cd20:	f107 020c 	add.w	r2, r7, #12
 800cd24:	2301      	movs	r3, #1
 800cd26:	490b      	ldr	r1, [pc, #44]	; (800cd54 <SCPI_SystemTemperatureUnit+0x40>)
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f015 facb 	bl	80222c4 <SCPI_ParamChoice>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	f083 0301 	eor.w	r3, r3, #1
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d002      	beq.n	800cd40 <SCPI_SystemTemperatureUnit+0x2c>
    {
        return SCPI_RES_ERR;
 800cd3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd3e:	e005      	b.n	800cd4c <SCPI_SystemTemperatureUnit+0x38>
    }

    bsp.temperature.unit = param;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	4b04      	ldr	r3, [pc, #16]	; (800cd58 <SCPI_SystemTemperatureUnit+0x44>)
 800cd46:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	return SCPI_RES_OK;
 800cd4a:	2301      	movs	r3, #1
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	2000004c 	.word	0x2000004c
 800cd58:	200052f0 	.word	0x200052f0

0800cd5c <SCPI_SystemTemperatureUnitQ>:
 * Query the temperature unit. Result can be C, K or F.
 *
 */

scpi_result_t SCPI_SystemTemperatureUnitQ(scpi_t * context)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
	switch(bsp.temperature.unit)
 800cd64:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <SCPI_SystemTemperatureUnitQ+0x48>)
 800cd66:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cd6a:	2b03      	cmp	r3, #3
 800cd6c:	d010      	beq.n	800cd90 <SCPI_SystemTemperatureUnitQ+0x34>
 800cd6e:	2b03      	cmp	r3, #3
 800cd70:	dc13      	bgt.n	800cd9a <SCPI_SystemTemperatureUnitQ+0x3e>
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d002      	beq.n	800cd7c <SCPI_SystemTemperatureUnitQ+0x20>
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d005      	beq.n	800cd86 <SCPI_SystemTemperatureUnitQ+0x2a>
 800cd7a:	e00e      	b.n	800cd9a <SCPI_SystemTemperatureUnitQ+0x3e>
	{
		case CELSIUS: SCPI_ResultText(context, "C");break;
 800cd7c:	490a      	ldr	r1, [pc, #40]	; (800cda8 <SCPI_SystemTemperatureUnitQ+0x4c>)
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f014 fd22 	bl	80217c8 <SCPI_ResultText>
 800cd84:	e009      	b.n	800cd9a <SCPI_SystemTemperatureUnitQ+0x3e>
		case FAHRENHEIT: SCPI_ResultText(context, "F");break;
 800cd86:	4909      	ldr	r1, [pc, #36]	; (800cdac <SCPI_SystemTemperatureUnitQ+0x50>)
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f014 fd1d 	bl	80217c8 <SCPI_ResultText>
 800cd8e:	e004      	b.n	800cd9a <SCPI_SystemTemperatureUnitQ+0x3e>
		case KELVIN: SCPI_ResultText(context, "K");break;
 800cd90:	4907      	ldr	r1, [pc, #28]	; (800cdb0 <SCPI_SystemTemperatureUnitQ+0x54>)
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f014 fd18 	bl	80217c8 <SCPI_ResultText>
 800cd98:	bf00      	nop
	}

	return SCPI_RES_OK;
 800cd9a:	2301      	movs	r3, #1
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	200052f0 	.word	0x200052f0
 800cda8:	080295d8 	.word	0x080295d8
 800cdac:	080295dc 	.word	0x080295dc
 800cdb0:	080295e0 	.word	0x080295e0

0800cdb4 <SCPI_SystemHumidityQ>:
 * Readout the device internal humidity as percentage value.
 *
 */

scpi_result_t SCPI_SystemHumidityQ(scpi_t * context)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
	float humidity = 0.0;
 800cdbc:	f04f 0300 	mov.w	r3, #0
 800cdc0:	60fb      	str	r3, [r7, #12]

	HDC1080_measure_humidity(&hi2c3, &humidity);
 800cdc2:	f107 030c 	add.w	r3, r7, #12
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	480a      	ldr	r0, [pc, #40]	; (800cdf4 <SCPI_SystemHumidityQ+0x40>)
 800cdca:	f7fe f9a5 	bl	800b118 <HDC1080_measure_humidity>
	SCPI_ResultUInt8(context,(uint8_t)humidity);
 800cdce:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdd6:	edc7 7a00 	vstr	s15, [r7]
 800cdda:	783b      	ldrb	r3, [r7, #0]
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	220a      	movs	r2, #10
 800cde0:	4619      	mov	r1, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f014 fcdd 	bl	80217a2 <SCPI_ResultUInt32Base>

	return SCPI_RES_OK;
 800cde8:	2301      	movs	r3, #1
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	2000042c 	.word	0x2000042c

0800cdf8 <SCPI_SystemServiceEEPROM>:
 * To use this function the device must be first unlocked using the SYSTem:SECure:STATe command.
 *
 */

scpi_result_t SCPI_SystemServiceEEPROM(scpi_t * context)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
	int32_t select = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	60fb      	str	r3, [r7, #12]

	if(!SCPI_ParamChoice(context, EEPROM_state_select, &select, TRUE))
 800ce04:	f107 020c 	add.w	r2, r7, #12
 800ce08:	2301      	movs	r3, #1
 800ce0a:	491f      	ldr	r1, [pc, #124]	; (800ce88 <SCPI_SystemServiceEEPROM+0x90>)
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f015 fa59 	bl	80222c4 <SCPI_ParamChoice>
 800ce12:	4603      	mov	r3, r0
 800ce14:	f083 0301 	eor.w	r3, r3, #1
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d002      	beq.n	800ce24 <SCPI_SystemServiceEEPROM+0x2c>
	{
		return SCPI_RES_ERR;
 800ce1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce22:	e02d      	b.n	800ce80 <SCPI_SystemServiceEEPROM+0x88>
	}

	if(!bsp.security.status)
 800ce24:	4b19      	ldr	r3, [pc, #100]	; (800ce8c <SCPI_SystemServiceEEPROM+0x94>)
 800ce26:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d107      	bne.n	800ce3e <SCPI_SystemServiceEEPROM+0x46>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_SERVICE_MODE_SECURE);
 800ce2e:	f44f 7148 	mov.w	r1, #800	; 0x320
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f012 f94c 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800ce38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce3c:	e020      	b.n	800ce80 <SCPI_SystemServiceEEPROM+0x88>
	}

	if(RESET == select)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10b      	bne.n	800ce5c <SCPI_SystemServiceEEPROM+0x64>
	{
		if(BSP_OK != EEPROM_Erase())
 800ce44:	f7fd fed1 	bl	800abea <EEPROM_Erase>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d017      	beq.n	800ce7e <SCPI_SystemServiceEEPROM+0x86>
		{
			SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800ce4e:	4910      	ldr	r1, [pc, #64]	; (800ce90 <SCPI_SystemServiceEEPROM+0x98>)
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f012 f93d 	bl	801f0d0 <SCPI_ErrorPush>
			return SCPI_RES_ERR;
 800ce56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce5a:	e011      	b.n	800ce80 <SCPI_SystemServiceEEPROM+0x88>
		}
	}
	else if(DEFAULT == select)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	d10d      	bne.n	800ce7e <SCPI_SystemServiceEEPROM+0x86>
	{
		if(BSP_OK != EEPROM_Write(&bsp.eeprom, EEPROM_CFG_SIZE))
 800ce62:	2178      	movs	r1, #120	; 0x78
 800ce64:	4809      	ldr	r0, [pc, #36]	; (800ce8c <SCPI_SystemServiceEEPROM+0x94>)
 800ce66:	f7fd fefb 	bl	800ac60 <EEPROM_Write>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d006      	beq.n	800ce7e <SCPI_SystemServiceEEPROM+0x86>
		{
			SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800ce70:	4907      	ldr	r1, [pc, #28]	; (800ce90 <SCPI_SystemServiceEEPROM+0x98>)
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f012 f92c 	bl	801f0d0 <SCPI_ErrorPush>
			return SCPI_RES_ERR;
 800ce78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce7c:	e000      	b.n	800ce80 <SCPI_SystemServiceEEPROM+0x88>
		}
	}


	return SCPI_RES_OK;
 800ce7e:	2301      	movs	r3, #1
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3710      	adds	r7, #16
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	20000094 	.word	0x20000094
 800ce8c:	200052f0 	.word	0x200052f0
 800ce90:	fffffeca 	.word	0xfffffeca

0800ce94 <SCPI_SystemServiceID>:
 * To use this function the device must be first unlocked using the SYSTem:SECure:STATe command.
 *
 */

scpi_result_t SCPI_SystemServiceID(scpi_t * context)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b0c6      	sub	sp, #280	; 0x118
 800ce98:	af02      	add	r7, sp, #8
 800ce9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ce9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800cea2:	6018      	str	r0, [r3, #0]
	char buffer[256];
	size_t len;

	if(!bsp.security.status)
 800cea4:	4b5c      	ldr	r3, [pc, #368]	; (800d018 <SCPI_SystemServiceID+0x184>)
 800cea6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10b      	bne.n	800cec6 <SCPI_SystemServiceID+0x32>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_SERVICE_MODE_SECURE);
 800ceae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ceb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ceb6:	f44f 7148 	mov.w	r1, #800	; 0x320
 800ceba:	6818      	ldr	r0, [r3, #0]
 800cebc:	f012 f908 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800cec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cec4:	e0a2      	b.n	800d00c <SCPI_SystemServiceID+0x178>
	}

	if(!SCPI_ParamCopyText(context, buffer, STRING_LENGTH, &len, TRUE))
 800cec6:	f107 030c 	add.w	r3, r7, #12
 800ceca:	f107 0110 	add.w	r1, r7, #16
 800cece:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800ced2:	f5a2 7086 	sub.w	r0, r2, #268	; 0x10c
 800ced6:	2201      	movs	r2, #1
 800ced8:	9200      	str	r2, [sp, #0]
 800ceda:	2210      	movs	r2, #16
 800cedc:	6800      	ldr	r0, [r0, #0]
 800cede:	f015 f8bf 	bl	8022060 <SCPI_ParamCopyText>
 800cee2:	4603      	mov	r3, r0
 800cee4:	f083 0301 	eor.w	r3, r3, #1
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d008      	beq.n	800cf00 <SCPI_SystemServiceID+0x6c>
	{
		buffer[0]='\0';
 800ceee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cef2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800cef6:	2200      	movs	r2, #0
 800cef8:	701a      	strb	r2, [r3, #0]
		return SCPI_RES_ERR;
 800cefa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cefe:	e085      	b.n	800d00c <SCPI_SystemServiceID+0x178>
	}

	if(!SCPI_ParamCopyText(context, buffer, STRING_LENGTH, &len, TRUE))
 800cf00:	f107 030c 	add.w	r3, r7, #12
 800cf04:	f107 0110 	add.w	r1, r7, #16
 800cf08:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800cf0c:	f5a2 7086 	sub.w	r0, r2, #268	; 0x10c
 800cf10:	2201      	movs	r2, #1
 800cf12:	9200      	str	r2, [sp, #0]
 800cf14:	2210      	movs	r2, #16
 800cf16:	6800      	ldr	r0, [r0, #0]
 800cf18:	f015 f8a2 	bl	8022060 <SCPI_ParamCopyText>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	f083 0301 	eor.w	r3, r3, #1
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d008      	beq.n	800cf3a <SCPI_SystemServiceID+0xa6>
	{
		buffer[0]='\0';
 800cf28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800cf30:	2200      	movs	r2, #0
 800cf32:	701a      	strb	r2, [r3, #0]
		return SCPI_RES_ERR;
 800cf34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf38:	e068      	b.n	800d00c <SCPI_SystemServiceID+0x178>
	}

	if(!SCPI_ParamCopyText(context, buffer, STRING_LENGTH, &len, TRUE))
 800cf3a:	f107 030c 	add.w	r3, r7, #12
 800cf3e:	f107 0110 	add.w	r1, r7, #16
 800cf42:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800cf46:	f5a2 7086 	sub.w	r0, r2, #268	; 0x10c
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	9200      	str	r2, [sp, #0]
 800cf4e:	2210      	movs	r2, #16
 800cf50:	6800      	ldr	r0, [r0, #0]
 800cf52:	f015 f885 	bl	8022060 <SCPI_ParamCopyText>
 800cf56:	4603      	mov	r3, r0
 800cf58:	f083 0301 	eor.w	r3, r3, #1
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d008      	beq.n	800cf74 <SCPI_SystemServiceID+0xe0>
	{
		buffer[0]='\0';
 800cf62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf66:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	701a      	strb	r2, [r3, #0]
		return SCPI_RES_ERR;
 800cf6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf72:	e04b      	b.n	800d00c <SCPI_SystemServiceID+0x178>
	}

	if(!SCPI_ParamCopyText(context, buffer, STRING_LENGTH, &len, TRUE))
 800cf74:	f107 030c 	add.w	r3, r7, #12
 800cf78:	f107 0110 	add.w	r1, r7, #16
 800cf7c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800cf80:	f5a2 7086 	sub.w	r0, r2, #268	; 0x10c
 800cf84:	2201      	movs	r2, #1
 800cf86:	9200      	str	r2, [sp, #0]
 800cf88:	2210      	movs	r2, #16
 800cf8a:	6800      	ldr	r0, [r0, #0]
 800cf8c:	f015 f868 	bl	8022060 <SCPI_ParamCopyText>
 800cf90:	4603      	mov	r3, r0
 800cf92:	f083 0301 	eor.w	r3, r3, #1
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d008      	beq.n	800cfae <SCPI_SystemServiceID+0x11a>
	{
		buffer[0]='\0';
 800cf9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cfa0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	701a      	strb	r2, [r3, #0]
		return SCPI_RES_ERR;
 800cfa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfac:	e02e      	b.n	800d00c <SCPI_SystemServiceID+0x178>
	}

	strncpy(bsp.eeprom.structure.info.manufacturer,buffer,STRING_LENGTH);
 800cfae:	f107 0310 	add.w	r3, r7, #16
 800cfb2:	2210      	movs	r2, #16
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4819      	ldr	r0, [pc, #100]	; (800d01c <SCPI_SystemServiceID+0x188>)
 800cfb8:	f017 fdfc 	bl	8024bb4 <strncpy>
	strncpy(bsp.eeprom.structure.info.device,buffer,STRING_LENGTH);
 800cfbc:	f107 0310 	add.w	r3, r7, #16
 800cfc0:	2210      	movs	r2, #16
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	4816      	ldr	r0, [pc, #88]	; (800d020 <SCPI_SystemServiceID+0x18c>)
 800cfc6:	f017 fdf5 	bl	8024bb4 <strncpy>
	strncpy(bsp.eeprom.structure.info.software_version,buffer,STRING_LENGTH);
 800cfca:	f107 0310 	add.w	r3, r7, #16
 800cfce:	2210      	movs	r2, #16
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	4814      	ldr	r0, [pc, #80]	; (800d024 <SCPI_SystemServiceID+0x190>)
 800cfd4:	f017 fdee 	bl	8024bb4 <strncpy>
	strncpy(bsp.eeprom.structure.info.serial_number,buffer,STRING_LENGTH);
 800cfd8:	f107 0310 	add.w	r3, r7, #16
 800cfdc:	2210      	movs	r2, #16
 800cfde:	4619      	mov	r1, r3
 800cfe0:	4811      	ldr	r0, [pc, #68]	; (800d028 <SCPI_SystemServiceID+0x194>)
 800cfe2:	f017 fde7 	bl	8024bb4 <strncpy>

	if(BSP_OK != EEPROM_Write(&bsp.eeprom, EEPROM_CFG_SIZE))
 800cfe6:	2178      	movs	r1, #120	; 0x78
 800cfe8:	480b      	ldr	r0, [pc, #44]	; (800d018 <SCPI_SystemServiceID+0x184>)
 800cfea:	f7fd fe39 	bl	800ac60 <EEPROM_Write>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00a      	beq.n	800d00a <SCPI_SystemServiceID+0x176>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800cff4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cff8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800cffc:	490b      	ldr	r1, [pc, #44]	; (800d02c <SCPI_SystemServiceID+0x198>)
 800cffe:	6818      	ldr	r0, [r3, #0]
 800d000:	f012 f866 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800d004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d008:	e000      	b.n	800d00c <SCPI_SystemServiceID+0x178>
	}

	return SCPI_RES_OK;
 800d00a:	2301      	movs	r3, #1
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	200052f0 	.word	0x200052f0
 800d01c:	20005304 	.word	0x20005304
 800d020:	20005314 	.word	0x20005314
 800d024:	20005334 	.word	0x20005334
 800d028:	20005324 	.word	0x20005324
 800d02c:	fffffeca 	.word	0xfffffeca

0800d030 <LL_GPIO_SetOutputPin>:
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	619a      	str	r2, [r3, #24]
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <LL_GPIO_ResetOutputPin>:
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	041a      	lsls	r2, r3, #16
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	619a      	str	r2, [r3, #24]
}
 800d05e:	bf00      	nop
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <LL_GPIO_TogglePin>:
{
 800d06a:	b480      	push	{r7}
 800d06c:	b085      	sub	sp, #20
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	695b      	ldr	r3, [r3, #20]
 800d078:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	4013      	ands	r3, r2
 800d080:	041a      	lsls	r2, r3, #16
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	43d9      	mvns	r1, r3
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	400b      	ands	r3, r1
 800d08a:	431a      	orrs	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	619a      	str	r2, [r3, #24]
}
 800d090:	bf00      	nop
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	0000      	movs	r0, r0
	...

0800d0a0 <SCPI_TriggerDelay>:
  * @NOTE:
  * Min. resolution is 1ms.
  */

scpi_result_t SCPI_TriggerDelay(scpi_t* context)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
	scpi_number_t param_delay;

	if(!SCPI_ParamNumber(context, scpi_special_numbers_def, &param_delay, TRUE))
 800d0a8:	f107 0208 	add.w	r2, r7, #8
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	4936      	ldr	r1, [pc, #216]	; (800d188 <SCPI_TriggerDelay+0xe8>)
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f015 fc47 	bl	8022944 <SCPI_ParamNumber>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	f083 0301 	eor.w	r3, r3, #1
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d002      	beq.n	800d0c8 <SCPI_TriggerDelay+0x28>
	{
		return SCPI_RES_ERR;
 800d0c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0c6:	e057      	b.n	800d178 <SCPI_TriggerDelay+0xd8>
	}

	if(param_delay.special)
 800d0c8:	7a3b      	ldrb	r3, [r7, #8]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d01d      	beq.n	800d10a <SCPI_TriggerDelay+0x6a>
	{
		switch(param_delay.content.tag)
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	2b03      	cmp	r3, #3
 800d0d2:	d00e      	beq.n	800d0f2 <SCPI_TriggerDelay+0x52>
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	dc10      	bgt.n	800d0fa <SCPI_TriggerDelay+0x5a>
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d002      	beq.n	800d0e2 <SCPI_TriggerDelay+0x42>
 800d0dc:	2b02      	cmp	r3, #2
 800d0de:	d004      	beq.n	800d0ea <SCPI_TriggerDelay+0x4a>
 800d0e0:	e00b      	b.n	800d0fa <SCPI_TriggerDelay+0x5a>
		{
		case SCPI_NUM_MIN: bsp.trigger.delay = 0; break;
 800d0e2:	4b2a      	ldr	r3, [pc, #168]	; (800d18c <SCPI_TriggerDelay+0xec>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	67da      	str	r2, [r3, #124]	; 0x7c
 800d0e8:	e045      	b.n	800d176 <SCPI_TriggerDelay+0xd6>
		case SCPI_NUM_MAX: bsp.trigger.delay = 1000000; break;
 800d0ea:	4b28      	ldr	r3, [pc, #160]	; (800d18c <SCPI_TriggerDelay+0xec>)
 800d0ec:	4a28      	ldr	r2, [pc, #160]	; (800d190 <SCPI_TriggerDelay+0xf0>)
 800d0ee:	67da      	str	r2, [r3, #124]	; 0x7c
 800d0f0:	e041      	b.n	800d176 <SCPI_TriggerDelay+0xd6>
		case SCPI_NUM_DEF: bsp.trigger.delay = 0; break;
 800d0f2:	4b26      	ldr	r3, [pc, #152]	; (800d18c <SCPI_TriggerDelay+0xec>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	67da      	str	r2, [r3, #124]	; 0x7c
 800d0f8:	e03d      	b.n	800d176 <SCPI_TriggerDelay+0xd6>
		default: SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE); return SCPI_RES_ERR;
 800d0fa:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f011 ffe6 	bl	801f0d0 <SCPI_ErrorPush>
 800d104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d108:	e036      	b.n	800d178 <SCPI_TriggerDelay+0xd8>
		}
	}
	else
	{
		if(SCPI_UNIT_NONE == param_delay.unit || SCPI_UNIT_UNITLESS == param_delay.unit)
 800d10a:	7e3b      	ldrb	r3, [r7, #24]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <SCPI_TriggerDelay+0x76>
 800d110:	7e3b      	ldrb	r3, [r7, #24]
 800d112:	2b2e      	cmp	r3, #46	; 0x2e
 800d114:	d127      	bne.n	800d166 <SCPI_TriggerDelay+0xc6>
		{
			if(param_delay.content.value < 0 || param_delay.content.value > 1000000)
 800d116:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d11a:	f04f 0200 	mov.w	r2, #0
 800d11e:	f04f 0300 	mov.w	r3, #0
 800d122:	f7f3 fd0b 	bl	8000b3c <__aeabi_dcmplt>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d109      	bne.n	800d140 <SCPI_TriggerDelay+0xa0>
 800d12c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d130:	a313      	add	r3, pc, #76	; (adr r3, 800d180 <SCPI_TriggerDelay+0xe0>)
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	f7f3 fd1f 	bl	8000b78 <__aeabi_dcmpgt>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d007      	beq.n	800d150 <SCPI_TriggerDelay+0xb0>
			{
				SCPI_ErrorPush(context, SCPI_ERROR_DATA_OUT_OF_RANGE);
 800d140:	f06f 01dd 	mvn.w	r1, #221	; 0xdd
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f011 ffc3 	bl	801f0d0 <SCPI_ErrorPush>
				return SCPI_RES_ERR;
 800d14a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d14e:	e013      	b.n	800d178 <SCPI_TriggerDelay+0xd8>
			}
			else
			{
				bsp.trigger.delay = param_delay.content.value;
 800d150:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d154:	4610      	mov	r0, r2
 800d156:	4619      	mov	r1, r3
 800d158:	f7f3 fd56 	bl	8000c08 <__aeabi_d2uiz>
 800d15c:	4603      	mov	r3, r0
 800d15e:	4a0b      	ldr	r2, [pc, #44]	; (800d18c <SCPI_TriggerDelay+0xec>)
 800d160:	67d3      	str	r3, [r2, #124]	; 0x7c
				return SCPI_RES_OK;
 800d162:	2301      	movs	r3, #1
 800d164:	e008      	b.n	800d178 <SCPI_TriggerDelay+0xd8>
			}
		}
		else
		{
			SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SUFFIX);
 800d166:	f06f 0182 	mvn.w	r1, #130	; 0x82
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f011 ffb0 	bl	801f0d0 <SCPI_ErrorPush>
			return SCPI_RES_ERR;
 800d170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d174:	e000      	b.n	800d178 <SCPI_TriggerDelay+0xd8>
		}
	}

	return SCPI_RES_OK;
 800d176:	2301      	movs	r3, #1
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3720      	adds	r7, #32
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	00000000 	.word	0x00000000
 800d184:	412e8480 	.word	0x412e8480
 800d188:	0802d728 	.word	0x0802d728
 800d18c:	200052f0 	.word	0x200052f0
 800d190:	000f4240 	.word	0x000f4240

0800d194 <SCPI_TriggerDelayQ>:
 * Query the trigger delay time. Response is a numeric value.
 *
 */

scpi_result_t SCPI_TriggerDelayQ(scpi_t* context)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
	SCPI_ResultUInt32(context, bsp.trigger.delay);
 800d19c:	4b05      	ldr	r3, [pc, #20]	; (800d1b4 <SCPI_TriggerDelayQ+0x20>)
 800d19e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1a0:	220a      	movs	r2, #10
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f014 fafc 	bl	80217a2 <SCPI_ResultUInt32Base>
	return SCPI_RES_OK;
 800d1aa:	2301      	movs	r3, #1
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	200052f0 	.word	0x200052f0

0800d1b8 <SCPI_TriggerImmediate>:
 * Causes the trigger to execute a measurement, regardless of the trigger state.
 *
 */

scpi_result_t SCPI_TriggerImmediate(scpi_t* context)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]

	if(TRIG_OUT != bsp.trigger.source)
 800d1c0:	4b10      	ldr	r3, [pc, #64]	; (800d204 <SCPI_TriggerImmediate+0x4c>)
 800d1c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1c6:	2b04      	cmp	r3, #4
 800d1c8:	d010      	beq.n	800d1ec <SCPI_TriggerImmediate+0x34>
	{
		LL_GPIO_TogglePin(TRIG_OUT_GPIO_Port, TRIG_OUT_Pin);
 800d1ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d1ce:	480e      	ldr	r0, [pc, #56]	; (800d208 <SCPI_TriggerImmediate+0x50>)
 800d1d0:	f7ff ff4b 	bl	800d06a <LL_GPIO_TogglePin>
		DWT_Delay_us(bsp.trigger.delay);
 800d1d4:	4b0b      	ldr	r3, [pc, #44]	; (800d204 <SCPI_TriggerImmediate+0x4c>)
 800d1d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7fd fbdf 	bl	800a99c <DWT_Delay_us>
		LL_GPIO_TogglePin(TRIG_OUT_GPIO_Port, TRIG_OUT_Pin);
 800d1de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d1e2:	4809      	ldr	r0, [pc, #36]	; (800d208 <SCPI_TriggerImmediate+0x50>)
 800d1e4:	f7ff ff41 	bl	800d06a <LL_GPIO_TogglePin>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_TRIGGER_IGNORED);
		return SCPI_RES_ERR;
	}

	return SCPI_RES_OK;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e006      	b.n	800d1fa <SCPI_TriggerImmediate+0x42>
		SCPI_ErrorPush(context, SCPI_ERROR_TRIGGER_IGNORED);
 800d1ec:	f06f 01d2 	mvn.w	r1, #210	; 0xd2
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f011 ff6d 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800d1f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	200052f0 	.word	0x200052f0
 800d208:	40021000 	.word	0x40021000

0800d20c <SCPI_TriggerSource>:
 * 				OUTput :	the board outputs a trigger pulse
 *
 */

scpi_result_t SCPI_TriggerSource(scpi_t* context)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
	int32_t paramTRIG;

	if(!SCPI_ParamChoice(context, trigger_source_select, &paramTRIG, TRUE))
 800d214:	f107 020c 	add.w	r2, r7, #12
 800d218:	2301      	movs	r3, #1
 800d21a:	4917      	ldr	r1, [pc, #92]	; (800d278 <SCPI_TriggerSource+0x6c>)
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f015 f851 	bl	80222c4 <SCPI_ParamChoice>
 800d222:	4603      	mov	r3, r0
 800d224:	f083 0301 	eor.w	r3, r3, #1
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d002      	beq.n	800d234 <SCPI_TriggerSource+0x28>
	{
		return SCPI_RES_ERR;
 800d22e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d232:	e01d      	b.n	800d270 <SCPI_TriggerSource+0x64>
	}

	bsp.trigger.source = paramTRIG;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	b2da      	uxtb	r2, r3
 800d238:	4b10      	ldr	r3, [pc, #64]	; (800d27c <SCPI_TriggerSource+0x70>)
 800d23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	if(TRIG_OUT == paramTRIG)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2b04      	cmp	r3, #4
 800d242:	d10a      	bne.n	800d25a <SCPI_TriggerSource+0x4e>
	{
		LL_GPIO_ResetOutputPin(TRIG_EN_GPIO_Port, TRIG_EN_Pin);
 800d244:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d248:	480d      	ldr	r0, [pc, #52]	; (800d280 <SCPI_TriggerSource+0x74>)
 800d24a:	f7ff feff 	bl	800d04c <LL_GPIO_ResetOutputPin>
		osThreadSuspend(TriggerTaskHandle);
 800d24e:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <SCPI_TriggerSource+0x78>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4618      	mov	r0, r3
 800d254:	f000 fa78 	bl	800d748 <osThreadSuspend>
 800d258:	e009      	b.n	800d26e <SCPI_TriggerSource+0x62>
	}
	else
	{
		LL_GPIO_SetOutputPin(TRIG_EN_GPIO_Port, TRIG_EN_Pin);
 800d25a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d25e:	4808      	ldr	r0, [pc, #32]	; (800d280 <SCPI_TriggerSource+0x74>)
 800d260:	f7ff fee6 	bl	800d030 <LL_GPIO_SetOutputPin>
		osThreadResume(TriggerTaskHandle);
 800d264:	4b07      	ldr	r3, [pc, #28]	; (800d284 <SCPI_TriggerSource+0x78>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4618      	mov	r0, r3
 800d26a:	f000 faa1 	bl	800d7b0 <osThreadResume>
	}

	return SCPI_RES_OK;
 800d26e:	2301      	movs	r3, #1
}
 800d270:	4618      	mov	r0, r3
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	200000ac 	.word	0x200000ac
 800d27c:	200052f0 	.word	0x200052f0
 800d280:	40021000 	.word	0x40021000
 800d284:	2000072c 	.word	0x2000072c

0800d288 <SCPI_TriggerSourceQ>:
 * Query the trigger mode. Response is BUS, EXT, IMM or OUT.
 *
 */

scpi_result_t SCPI_TriggerSourceQ(scpi_t* context)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]

	switch(bsp.trigger.source)
 800d290:	4b17      	ldr	r3, [pc, #92]	; (800d2f0 <SCPI_TriggerSourceQ+0x68>)
 800d292:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d296:	3b01      	subs	r3, #1
 800d298:	2b03      	cmp	r3, #3
 800d29a:	d823      	bhi.n	800d2e4 <SCPI_TriggerSourceQ+0x5c>
 800d29c:	a201      	add	r2, pc, #4	; (adr r2, 800d2a4 <SCPI_TriggerSourceQ+0x1c>)
 800d29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a2:	bf00      	nop
 800d2a4:	0800d2cd 	.word	0x0800d2cd
 800d2a8:	0800d2c1 	.word	0x0800d2c1
 800d2ac:	0800d2b5 	.word	0x0800d2b5
 800d2b0:	0800d2d9 	.word	0x0800d2d9
	{
		case TRIG_BUS: SCPI_ResultCharacters(context, "BUS", 3); break;
 800d2b4:	2203      	movs	r2, #3
 800d2b6:	490f      	ldr	r1, [pc, #60]	; (800d2f4 <SCPI_TriggerSourceQ+0x6c>)
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f014 f9d4 	bl	8021666 <SCPI_ResultCharacters>
 800d2be:	e011      	b.n	800d2e4 <SCPI_TriggerSourceQ+0x5c>
		case TRIG_EXT: SCPI_ResultCharacters(context, "EXT", 3); break;
 800d2c0:	2203      	movs	r2, #3
 800d2c2:	490d      	ldr	r1, [pc, #52]	; (800d2f8 <SCPI_TriggerSourceQ+0x70>)
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f014 f9ce 	bl	8021666 <SCPI_ResultCharacters>
 800d2ca:	e00b      	b.n	800d2e4 <SCPI_TriggerSourceQ+0x5c>
		case TRIG_IMM: SCPI_ResultCharacters(context, "IMM", 3); break;
 800d2cc:	2203      	movs	r2, #3
 800d2ce:	490b      	ldr	r1, [pc, #44]	; (800d2fc <SCPI_TriggerSourceQ+0x74>)
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f014 f9c8 	bl	8021666 <SCPI_ResultCharacters>
 800d2d6:	e005      	b.n	800d2e4 <SCPI_TriggerSourceQ+0x5c>
		case TRIG_OUT: SCPI_ResultCharacters(context, "OUT", 3); break;
 800d2d8:	2203      	movs	r2, #3
 800d2da:	4909      	ldr	r1, [pc, #36]	; (800d300 <SCPI_TriggerSourceQ+0x78>)
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f014 f9c2 	bl	8021666 <SCPI_ResultCharacters>
 800d2e2:	bf00      	nop
	}
	return SCPI_RES_OK;
 800d2e4:	2301      	movs	r3, #1
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3708      	adds	r7, #8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	200052f0 	.word	0x200052f0
 800d2f4:	08029678 	.word	0x08029678
 800d2f8:	0802969c 	.word	0x0802969c
 800d2fc:	080296a0 	.word	0x080296a0
 800d300:	080296a4 	.word	0x080296a4

0800d304 <SCPI_TriggerOutput>:
 *
 *
 */

scpi_result_t SCPI_TriggerOutput(scpi_t* context)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]

	if(TRIG_OUT != bsp.trigger.source)
 800d30c:	4b10      	ldr	r3, [pc, #64]	; (800d350 <SCPI_TriggerOutput+0x4c>)
 800d30e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d312:	2b04      	cmp	r3, #4
 800d314:	d007      	beq.n	800d326 <SCPI_TriggerOutput+0x22>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_TRIGGER_IGNORED);
 800d316:	f06f 01d2 	mvn.w	r1, #210	; 0xd2
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f011 fed8 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800d320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d324:	e00f      	b.n	800d346 <SCPI_TriggerOutput+0x42>
	}

	LL_GPIO_TogglePin(TRIG_OUT_GPIO_Port, TRIG_OUT_Pin);
 800d326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d32a:	480a      	ldr	r0, [pc, #40]	; (800d354 <SCPI_TriggerOutput+0x50>)
 800d32c:	f7ff fe9d 	bl	800d06a <LL_GPIO_TogglePin>
	DWT_Delay_us(bsp.trigger.delay);
 800d330:	4b07      	ldr	r3, [pc, #28]	; (800d350 <SCPI_TriggerOutput+0x4c>)
 800d332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d334:	4618      	mov	r0, r3
 800d336:	f7fd fb31 	bl	800a99c <DWT_Delay_us>
	LL_GPIO_TogglePin(TRIG_OUT_GPIO_Port, TRIG_OUT_Pin);
 800d33a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d33e:	4805      	ldr	r0, [pc, #20]	; (800d354 <SCPI_TriggerOutput+0x50>)
 800d340:	f7ff fe93 	bl	800d06a <LL_GPIO_TogglePin>

	return SCPI_RES_OK;
 800d344:	2301      	movs	r3, #1
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	200052f0 	.word	0x200052f0
 800d354:	40021000 	.word	0x40021000

0800d358 <SCPI_TriggerSlope>:
 * 				NEGative :	falling edge
 *
 */

scpi_result_t SCPI_TriggerSlope(scpi_t* context)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
	int32_t paramSLOPE;
	//GPIO_InitTypeDef GPIO_InitStruct = {0};

	if(!SCPI_ParamChoice(context, trigger_slope_select, &paramSLOPE, TRUE))
 800d360:	f107 020c 	add.w	r2, r7, #12
 800d364:	2301      	movs	r3, #1
 800d366:	490b      	ldr	r1, [pc, #44]	; (800d394 <SCPI_TriggerSlope+0x3c>)
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f014 ffab 	bl	80222c4 <SCPI_ParamChoice>
 800d36e:	4603      	mov	r3, r0
 800d370:	f083 0301 	eor.w	r3, r3, #1
 800d374:	b2db      	uxtb	r3, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <SCPI_TriggerSlope+0x28>
	{
		return SCPI_RES_ERR;
 800d37a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d37e:	e005      	b.n	800d38c <SCPI_TriggerSlope+0x34>
	}

	GPIO_InitStruct.Pull = GPIO_NOPULL;
	LL_GPIO_Init(TRIG_IN_GPIO_Port, &GPIO_InitStruct);
*/
	bsp.trigger.in_slope = paramSLOPE;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	b2da      	uxtb	r2, r3
 800d384:	4b04      	ldr	r3, [pc, #16]	; (800d398 <SCPI_TriggerSlope+0x40>)
 800d386:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	return SCPI_RES_OK;
 800d38a:	2301      	movs	r3, #1
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	200000d4 	.word	0x200000d4
 800d398:	200052f0 	.word	0x200052f0

0800d39c <SCPI_TriggerSlopeQ>:
 * Query trigger input slope edge. Returns POS or NEG.
 *
 */

scpi_result_t SCPI_TriggerSlopeQ(scpi_t* context)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]

	switch(bsp.trigger.in_slope)
 800d3a4:	4b0c      	ldr	r3, [pc, #48]	; (800d3d8 <SCPI_TriggerSlopeQ+0x3c>)
 800d3a6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d002      	beq.n	800d3b4 <SCPI_TriggerSlopeQ+0x18>
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d006      	beq.n	800d3c0 <SCPI_TriggerSlopeQ+0x24>
 800d3b2:	e00b      	b.n	800d3cc <SCPI_TriggerSlopeQ+0x30>
	{
		case SLOPE_POS: SCPI_ResultCharacters(context, "POS", 3); break;
 800d3b4:	2203      	movs	r2, #3
 800d3b6:	4909      	ldr	r1, [pc, #36]	; (800d3dc <SCPI_TriggerSlopeQ+0x40>)
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f014 f954 	bl	8021666 <SCPI_ResultCharacters>
 800d3be:	e005      	b.n	800d3cc <SCPI_TriggerSlopeQ+0x30>
		case SLOPE_NEG: SCPI_ResultCharacters(context, "NEG", 3); break;
 800d3c0:	2203      	movs	r2, #3
 800d3c2:	4907      	ldr	r1, [pc, #28]	; (800d3e0 <SCPI_TriggerSlopeQ+0x44>)
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f014 f94e 	bl	8021666 <SCPI_ResultCharacters>
 800d3ca:	bf00      	nop
	}

	return SCPI_RES_OK;
 800d3cc:	2301      	movs	r3, #1
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	200052f0 	.word	0x200052f0
 800d3dc:	080296a8 	.word	0x080296a8
 800d3e0:	080296ac 	.word	0x080296ac

0800d3e4 <SCPI_TriggerOutputSlope>:
 * 				NEGative :	falling edge
 *
 */

scpi_result_t SCPI_TriggerOutputSlope(scpi_t* context)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
	int32_t paramSLOPE;

	if(!SCPI_ParamChoice(context, trigger_slope_select, &paramSLOPE, TRUE))
 800d3ec:	f107 020c 	add.w	r2, r7, #12
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	4914      	ldr	r1, [pc, #80]	; (800d444 <SCPI_TriggerOutputSlope+0x60>)
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f014 ff65 	bl	80222c4 <SCPI_ParamChoice>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	f083 0301 	eor.w	r3, r3, #1
 800d400:	b2db      	uxtb	r3, r3
 800d402:	2b00      	cmp	r3, #0
 800d404:	d002      	beq.n	800d40c <SCPI_TriggerOutputSlope+0x28>
	{
		return SCPI_RES_ERR;
 800d406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d40a:	e017      	b.n	800d43c <SCPI_TriggerOutputSlope+0x58>
	}

	switch(paramSLOPE)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d002      	beq.n	800d418 <SCPI_TriggerOutputSlope+0x34>
 800d412:	2b02      	cmp	r3, #2
 800d414:	d006      	beq.n	800d424 <SCPI_TriggerOutputSlope+0x40>
 800d416:	e00b      	b.n	800d430 <SCPI_TriggerOutputSlope+0x4c>
	{
		case SLOPE_POS: LL_GPIO_ResetOutputPin(TRIG_OUT_GPIO_Port, TRIG_OUT_Pin); break;
 800d418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d41c:	480a      	ldr	r0, [pc, #40]	; (800d448 <SCPI_TriggerOutputSlope+0x64>)
 800d41e:	f7ff fe15 	bl	800d04c <LL_GPIO_ResetOutputPin>
 800d422:	e005      	b.n	800d430 <SCPI_TriggerOutputSlope+0x4c>
		case SLOPE_NEG: LL_GPIO_SetOutputPin(TRIG_OUT_GPIO_Port, TRIG_OUT_Pin); break;
 800d424:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d428:	4807      	ldr	r0, [pc, #28]	; (800d448 <SCPI_TriggerOutputSlope+0x64>)
 800d42a:	f7ff fe01 	bl	800d030 <LL_GPIO_SetOutputPin>
 800d42e:	bf00      	nop
	}

	bsp.trigger.out_slope = paramSLOPE;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	b2da      	uxtb	r2, r3
 800d434:	4b05      	ldr	r3, [pc, #20]	; (800d44c <SCPI_TriggerOutputSlope+0x68>)
 800d436:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

	return SCPI_RES_OK;
 800d43a:	2301      	movs	r3, #1
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	200000d4 	.word	0x200000d4
 800d448:	40021000 	.word	0x40021000
 800d44c:	200052f0 	.word	0x200052f0

0800d450 <SCPI_TriggerOutputSlopeQ>:
 * Query trigger output slope edge. Returns POS or NEG.
 *
 */

scpi_result_t SCPI_TriggerOutputSlopeQ(scpi_t* context)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]

	switch(bsp.trigger.out_slope)
 800d458:	4b0c      	ldr	r3, [pc, #48]	; (800d48c <SCPI_TriggerOutputSlopeQ+0x3c>)
 800d45a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d002      	beq.n	800d468 <SCPI_TriggerOutputSlopeQ+0x18>
 800d462:	2b02      	cmp	r3, #2
 800d464:	d006      	beq.n	800d474 <SCPI_TriggerOutputSlopeQ+0x24>
 800d466:	e00b      	b.n	800d480 <SCPI_TriggerOutputSlopeQ+0x30>
	{
		case SLOPE_POS: SCPI_ResultCharacters(context, "POS", 3); break;
 800d468:	2203      	movs	r2, #3
 800d46a:	4909      	ldr	r1, [pc, #36]	; (800d490 <SCPI_TriggerOutputSlopeQ+0x40>)
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f014 f8fa 	bl	8021666 <SCPI_ResultCharacters>
 800d472:	e005      	b.n	800d480 <SCPI_TriggerOutputSlopeQ+0x30>
		case SLOPE_NEG: SCPI_ResultCharacters(context, "NEG", 3); break;
 800d474:	2203      	movs	r2, #3
 800d476:	4907      	ldr	r1, [pc, #28]	; (800d494 <SCPI_TriggerOutputSlopeQ+0x44>)
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f014 f8f4 	bl	8021666 <SCPI_ResultCharacters>
 800d47e:	bf00      	nop
	}

	return SCPI_RES_OK;
 800d480:	2301      	movs	r3, #1
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	200052f0 	.word	0x200052f0
 800d490:	080296a8 	.word	0x080296a8
 800d494:	080296ac 	.word	0x080296ac

0800d498 <SCPI_TRG>:
 * This command triggers the device if the trigger source is set to Bus.
 *
 */

scpi_result_t SCPI_TRG(scpi_t* context)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]

	if(TRIG_BUS != bsp.trigger.source)
 800d4a0:	4b08      	ldr	r3, [pc, #32]	; (800d4c4 <SCPI_TRG+0x2c>)
 800d4a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4a6:	2b03      	cmp	r3, #3
 800d4a8:	d007      	beq.n	800d4ba <SCPI_TRG+0x22>
	{
		SCPI_ErrorPush(context, SCPI_ERROR_TRIGGER_IGNORED);
 800d4aa:	f06f 01d2 	mvn.w	r1, #210	; 0xd2
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f011 fe0e 	bl	801f0d0 <SCPI_ErrorPush>
		return SCPI_RES_ERR;
 800d4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4b8:	e000      	b.n	800d4bc <SCPI_TRG+0x24>
	}

	return SCPI_RES_OK;
 800d4ba:	2301      	movs	r3, #1
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	200052f0 	.word	0x200052f0

0800d4c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d4c8:	b480      	push	{r7}
 800d4ca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d4cc:	bf00      	nop
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
	...

0800d4d8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4de:	f3ef 8305 	mrs	r3, IPSR
 800d4e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10f      	bne.n	800d50a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4ea:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ee:	607b      	str	r3, [r7, #4]
  return(result);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d105      	bne.n	800d502 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4f6:	f3ef 8311 	mrs	r3, BASEPRI
 800d4fa:	603b      	str	r3, [r7, #0]
  return(result);
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d007      	beq.n	800d512 <osKernelInitialize+0x3a>
 800d502:	4b0e      	ldr	r3, [pc, #56]	; (800d53c <osKernelInitialize+0x64>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b02      	cmp	r3, #2
 800d508:	d103      	bne.n	800d512 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d50a:	f06f 0305 	mvn.w	r3, #5
 800d50e:	60fb      	str	r3, [r7, #12]
 800d510:	e00c      	b.n	800d52c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d512:	4b0a      	ldr	r3, [pc, #40]	; (800d53c <osKernelInitialize+0x64>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d105      	bne.n	800d526 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d51a:	4b08      	ldr	r3, [pc, #32]	; (800d53c <osKernelInitialize+0x64>)
 800d51c:	2201      	movs	r2, #1
 800d51e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d520:	2300      	movs	r3, #0
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	e002      	b.n	800d52c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d52a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d52c:	68fb      	ldr	r3, [r7, #12]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3714      	adds	r7, #20
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	200076c4 	.word	0x200076c4

0800d540 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d546:	f3ef 8305 	mrs	r3, IPSR
 800d54a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d54c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10f      	bne.n	800d572 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d552:	f3ef 8310 	mrs	r3, PRIMASK
 800d556:	607b      	str	r3, [r7, #4]
  return(result);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d105      	bne.n	800d56a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d55e:	f3ef 8311 	mrs	r3, BASEPRI
 800d562:	603b      	str	r3, [r7, #0]
  return(result);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d007      	beq.n	800d57a <osKernelStart+0x3a>
 800d56a:	4b0f      	ldr	r3, [pc, #60]	; (800d5a8 <osKernelStart+0x68>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2b02      	cmp	r3, #2
 800d570:	d103      	bne.n	800d57a <osKernelStart+0x3a>
    stat = osErrorISR;
 800d572:	f06f 0305 	mvn.w	r3, #5
 800d576:	60fb      	str	r3, [r7, #12]
 800d578:	e010      	b.n	800d59c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d57a:	4b0b      	ldr	r3, [pc, #44]	; (800d5a8 <osKernelStart+0x68>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d109      	bne.n	800d596 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d582:	f7ff ffa1 	bl	800d4c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d586:	4b08      	ldr	r3, [pc, #32]	; (800d5a8 <osKernelStart+0x68>)
 800d588:	2202      	movs	r2, #2
 800d58a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d58c:	f002 fb5c 	bl	800fc48 <vTaskStartScheduler>
      stat = osOK;
 800d590:	2300      	movs	r3, #0
 800d592:	60fb      	str	r3, [r7, #12]
 800d594:	e002      	b.n	800d59c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d59a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d59c:	68fb      	ldr	r3, [r7, #12]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	200076c4 	.word	0x200076c4

0800d5ac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5b2:	f3ef 8305 	mrs	r3, IPSR
 800d5b6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d5b8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10f      	bne.n	800d5de <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5be:	f3ef 8310 	mrs	r3, PRIMASK
 800d5c2:	607b      	str	r3, [r7, #4]
  return(result);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d105      	bne.n	800d5d6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5ca:	f3ef 8311 	mrs	r3, BASEPRI
 800d5ce:	603b      	str	r3, [r7, #0]
  return(result);
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d007      	beq.n	800d5e6 <osKernelGetTickCount+0x3a>
 800d5d6:	4b08      	ldr	r3, [pc, #32]	; (800d5f8 <osKernelGetTickCount+0x4c>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d103      	bne.n	800d5e6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800d5de:	f002 fc67 	bl	800feb0 <xTaskGetTickCountFromISR>
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	e002      	b.n	800d5ec <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800d5e6:	f002 fc53 	bl	800fe90 <xTaskGetTickCount>
 800d5ea:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	200076c4 	.word	0x200076c4

0800d5fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b090      	sub	sp, #64	; 0x40
 800d600:	af04      	add	r7, sp, #16
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d608:	2300      	movs	r3, #0
 800d60a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d60c:	f3ef 8305 	mrs	r3, IPSR
 800d610:	61fb      	str	r3, [r7, #28]
  return(result);
 800d612:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d614:	2b00      	cmp	r3, #0
 800d616:	f040 808f 	bne.w	800d738 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d61a:	f3ef 8310 	mrs	r3, PRIMASK
 800d61e:	61bb      	str	r3, [r7, #24]
  return(result);
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d105      	bne.n	800d632 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d626:	f3ef 8311 	mrs	r3, BASEPRI
 800d62a:	617b      	str	r3, [r7, #20]
  return(result);
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d003      	beq.n	800d63a <osThreadNew+0x3e>
 800d632:	4b44      	ldr	r3, [pc, #272]	; (800d744 <osThreadNew+0x148>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b02      	cmp	r3, #2
 800d638:	d07e      	beq.n	800d738 <osThreadNew+0x13c>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d07b      	beq.n	800d738 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d640:	2380      	movs	r3, #128	; 0x80
 800d642:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d644:	2318      	movs	r3, #24
 800d646:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d648:	2300      	movs	r3, #0
 800d64a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d64c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d650:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d045      	beq.n	800d6e4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <osThreadNew+0x6a>
        name = attr->name;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	699b      	ldr	r3, [r3, #24]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d002      	beq.n	800d674 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	699b      	ldr	r3, [r3, #24]
 800d672:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d676:	2b00      	cmp	r3, #0
 800d678:	d008      	beq.n	800d68c <osThreadNew+0x90>
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	2b38      	cmp	r3, #56	; 0x38
 800d67e:	d805      	bhi.n	800d68c <osThreadNew+0x90>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	f003 0301 	and.w	r3, r3, #1
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d001      	beq.n	800d690 <osThreadNew+0x94>
        return (NULL);
 800d68c:	2300      	movs	r3, #0
 800d68e:	e054      	b.n	800d73a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	695b      	ldr	r3, [r3, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d003      	beq.n	800d6a0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	695b      	ldr	r3, [r3, #20]
 800d69c:	089b      	lsrs	r3, r3, #2
 800d69e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00e      	beq.n	800d6c6 <osThreadNew+0xca>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	2bbf      	cmp	r3, #191	; 0xbf
 800d6ae:	d90a      	bls.n	800d6c6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d006      	beq.n	800d6c6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	695b      	ldr	r3, [r3, #20]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <osThreadNew+0xca>
        mem = 1;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	623b      	str	r3, [r7, #32]
 800d6c4:	e010      	b.n	800d6e8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10c      	bne.n	800d6e8 <osThreadNew+0xec>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d108      	bne.n	800d6e8 <osThreadNew+0xec>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d104      	bne.n	800d6e8 <osThreadNew+0xec>
          mem = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	623b      	str	r3, [r7, #32]
 800d6e2:	e001      	b.n	800d6e8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d6e8:	6a3b      	ldr	r3, [r7, #32]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d110      	bne.n	800d710 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d6f6:	9202      	str	r2, [sp, #8]
 800d6f8:	9301      	str	r3, [sp, #4]
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f001 ff99 	bl	800f63c <xTaskCreateStatic>
 800d70a:	4603      	mov	r3, r0
 800d70c:	613b      	str	r3, [r7, #16]
 800d70e:	e013      	b.n	800d738 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d710:	6a3b      	ldr	r3, [r7, #32]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d110      	bne.n	800d738 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d718:	b29a      	uxth	r2, r3
 800d71a:	f107 0310 	add.w	r3, r7, #16
 800d71e:	9301      	str	r3, [sp, #4]
 800d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f001 ffea 	bl	800f702 <xTaskCreate>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b01      	cmp	r3, #1
 800d732:	d001      	beq.n	800d738 <osThreadNew+0x13c>
          hTask = NULL;
 800d734:	2300      	movs	r3, #0
 800d736:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d738:	693b      	ldr	r3, [r7, #16]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3730      	adds	r7, #48	; 0x30
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	200076c4 	.word	0x200076c4

0800d748 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d754:	f3ef 8305 	mrs	r3, IPSR
 800d758:	617b      	str	r3, [r7, #20]
  return(result);
 800d75a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10f      	bne.n	800d780 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d760:	f3ef 8310 	mrs	r3, PRIMASK
 800d764:	613b      	str	r3, [r7, #16]
  return(result);
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d105      	bne.n	800d778 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d76c:	f3ef 8311 	mrs	r3, BASEPRI
 800d770:	60fb      	str	r3, [r7, #12]
  return(result);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d007      	beq.n	800d788 <osThreadSuspend+0x40>
 800d778:	4b0c      	ldr	r3, [pc, #48]	; (800d7ac <osThreadSuspend+0x64>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d103      	bne.n	800d788 <osThreadSuspend+0x40>
    stat = osErrorISR;
 800d780:	f06f 0305 	mvn.w	r3, #5
 800d784:	61fb      	str	r3, [r7, #28]
 800d786:	e00b      	b.n	800d7a0 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d103      	bne.n	800d796 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800d78e:	f06f 0303 	mvn.w	r3, #3
 800d792:	61fb      	str	r3, [r7, #28]
 800d794:	e004      	b.n	800d7a0 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 800d796:	2300      	movs	r3, #0
 800d798:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800d79a:	69b8      	ldr	r0, [r7, #24]
 800d79c:	f002 f948 	bl	800fa30 <vTaskSuspend>
  }

  return (stat);
 800d7a0:	69fb      	ldr	r3, [r7, #28]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3720      	adds	r7, #32
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	200076c4 	.word	0x200076c4

0800d7b0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b088      	sub	sp, #32
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7bc:	f3ef 8305 	mrs	r3, IPSR
 800d7c0:	617b      	str	r3, [r7, #20]
  return(result);
 800d7c2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10f      	bne.n	800d7e8 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7c8:	f3ef 8310 	mrs	r3, PRIMASK
 800d7cc:	613b      	str	r3, [r7, #16]
  return(result);
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d105      	bne.n	800d7e0 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7d4:	f3ef 8311 	mrs	r3, BASEPRI
 800d7d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d007      	beq.n	800d7f0 <osThreadResume+0x40>
 800d7e0:	4b0c      	ldr	r3, [pc, #48]	; (800d814 <osThreadResume+0x64>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b02      	cmp	r3, #2
 800d7e6:	d103      	bne.n	800d7f0 <osThreadResume+0x40>
    stat = osErrorISR;
 800d7e8:	f06f 0305 	mvn.w	r3, #5
 800d7ec:	61fb      	str	r3, [r7, #28]
 800d7ee:	e00b      	b.n	800d808 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d103      	bne.n	800d7fe <osThreadResume+0x4e>
    stat = osErrorParameter;
 800d7f6:	f06f 0303 	mvn.w	r3, #3
 800d7fa:	61fb      	str	r3, [r7, #28]
 800d7fc:	e004      	b.n	800d808 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800d7fe:	2300      	movs	r3, #0
 800d800:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 800d802:	69b8      	ldr	r0, [r7, #24]
 800d804:	f002 f9c0 	bl	800fb88 <vTaskResume>
  }

  return (stat);
 800d808:	69fb      	ldr	r3, [r7, #28]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3720      	adds	r7, #32
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	200076c4 	.word	0x200076c4

0800d818 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d820:	f3ef 8305 	mrs	r3, IPSR
 800d824:	613b      	str	r3, [r7, #16]
  return(result);
 800d826:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d10f      	bne.n	800d84c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d82c:	f3ef 8310 	mrs	r3, PRIMASK
 800d830:	60fb      	str	r3, [r7, #12]
  return(result);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d105      	bne.n	800d844 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d838:	f3ef 8311 	mrs	r3, BASEPRI
 800d83c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d007      	beq.n	800d854 <osDelay+0x3c>
 800d844:	4b0a      	ldr	r3, [pc, #40]	; (800d870 <osDelay+0x58>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b02      	cmp	r3, #2
 800d84a:	d103      	bne.n	800d854 <osDelay+0x3c>
    stat = osErrorISR;
 800d84c:	f06f 0305 	mvn.w	r3, #5
 800d850:	617b      	str	r3, [r7, #20]
 800d852:	e007      	b.n	800d864 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d854:	2300      	movs	r3, #0
 800d856:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d002      	beq.n	800d864 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f002 f8b0 	bl	800f9c4 <vTaskDelay>
    }
  }

  return (stat);
 800d864:	697b      	ldr	r3, [r7, #20]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3718      	adds	r7, #24
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	200076c4 	.word	0x200076c4

0800d874 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d874:	b580      	push	{r7, lr}
 800d876:	b08a      	sub	sp, #40	; 0x28
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d87c:	2300      	movs	r3, #0
 800d87e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d880:	f3ef 8305 	mrs	r3, IPSR
 800d884:	613b      	str	r3, [r7, #16]
  return(result);
 800d886:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f040 8085 	bne.w	800d998 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d88e:	f3ef 8310 	mrs	r3, PRIMASK
 800d892:	60fb      	str	r3, [r7, #12]
  return(result);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d105      	bne.n	800d8a6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d89a:	f3ef 8311 	mrs	r3, BASEPRI
 800d89e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d003      	beq.n	800d8ae <osMutexNew+0x3a>
 800d8a6:	4b3f      	ldr	r3, [pc, #252]	; (800d9a4 <osMutexNew+0x130>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b02      	cmp	r3, #2
 800d8ac:	d074      	beq.n	800d998 <osMutexNew+0x124>
    if (attr != NULL) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d003      	beq.n	800d8bc <osMutexNew+0x48>
      type = attr->attr_bits;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	623b      	str	r3, [r7, #32]
 800d8ba:	e001      	b.n	800d8c0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	f003 0301 	and.w	r3, r3, #1
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d002      	beq.n	800d8d0 <osMutexNew+0x5c>
      rmtx = 1U;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	61fb      	str	r3, [r7, #28]
 800d8ce:	e001      	b.n	800d8d4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d8d4:	6a3b      	ldr	r3, [r7, #32]
 800d8d6:	f003 0308 	and.w	r3, r3, #8
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d15c      	bne.n	800d998 <osMutexNew+0x124>
      mem = -1;
 800d8de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8e2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d015      	beq.n	800d916 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d006      	beq.n	800d900 <osMutexNew+0x8c>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	2b4f      	cmp	r3, #79	; 0x4f
 800d8f8:	d902      	bls.n	800d900 <osMutexNew+0x8c>
          mem = 1;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	61bb      	str	r3, [r7, #24]
 800d8fe:	e00c      	b.n	800d91a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d108      	bne.n	800d91a <osMutexNew+0xa6>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d104      	bne.n	800d91a <osMutexNew+0xa6>
            mem = 0;
 800d910:	2300      	movs	r3, #0
 800d912:	61bb      	str	r3, [r7, #24]
 800d914:	e001      	b.n	800d91a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800d916:	2300      	movs	r3, #0
 800d918:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d112      	bne.n	800d946 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d007      	beq.n	800d936 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	4619      	mov	r1, r3
 800d92c:	2004      	movs	r0, #4
 800d92e:	f000 feb8 	bl	800e6a2 <xQueueCreateMutexStatic>
 800d932:	6278      	str	r0, [r7, #36]	; 0x24
 800d934:	e016      	b.n	800d964 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	4619      	mov	r1, r3
 800d93c:	2001      	movs	r0, #1
 800d93e:	f000 feb0 	bl	800e6a2 <xQueueCreateMutexStatic>
 800d942:	6278      	str	r0, [r7, #36]	; 0x24
 800d944:	e00e      	b.n	800d964 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d10b      	bne.n	800d964 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d004      	beq.n	800d95c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800d952:	2004      	movs	r0, #4
 800d954:	f000 fe8d 	bl	800e672 <xQueueCreateMutex>
 800d958:	6278      	str	r0, [r7, #36]	; 0x24
 800d95a:	e003      	b.n	800d964 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800d95c:	2001      	movs	r0, #1
 800d95e:	f000 fe88 	bl	800e672 <xQueueCreateMutex>
 800d962:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00c      	beq.n	800d984 <osMutexNew+0x110>
        if (attr != NULL) {
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d003      	beq.n	800d978 <osMutexNew+0x104>
          name = attr->name;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	617b      	str	r3, [r7, #20]
 800d976:	e001      	b.n	800d97c <osMutexNew+0x108>
        } else {
          name = NULL;
 800d978:	2300      	movs	r3, #0
 800d97a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800d97c:	6979      	ldr	r1, [r7, #20]
 800d97e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d980:	f001 fdd4 	bl	800f52c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	2b00      	cmp	r3, #0
 800d988:	d006      	beq.n	800d998 <osMutexNew+0x124>
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d003      	beq.n	800d998 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d992:	f043 0301 	orr.w	r3, r3, #1
 800d996:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3728      	adds	r7, #40	; 0x28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	200076c4 	.word	0x200076c4

0800d9a8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b088      	sub	sp, #32
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f023 0301 	bic.w	r3, r3, #1
 800d9b8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f003 0301 	and.w	r3, r3, #1
 800d9c0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9c6:	f3ef 8305 	mrs	r3, IPSR
 800d9ca:	613b      	str	r3, [r7, #16]
  return(result);
 800d9cc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d10f      	bne.n	800d9f2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9d2:	f3ef 8310 	mrs	r3, PRIMASK
 800d9d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d105      	bne.n	800d9ea <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d9de:	f3ef 8311 	mrs	r3, BASEPRI
 800d9e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d007      	beq.n	800d9fa <osMutexAcquire+0x52>
 800d9ea:	4b1d      	ldr	r3, [pc, #116]	; (800da60 <osMutexAcquire+0xb8>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	d103      	bne.n	800d9fa <osMutexAcquire+0x52>
    stat = osErrorISR;
 800d9f2:	f06f 0305 	mvn.w	r3, #5
 800d9f6:	61fb      	str	r3, [r7, #28]
 800d9f8:	e02c      	b.n	800da54 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d103      	bne.n	800da08 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800da00:	f06f 0303 	mvn.w	r3, #3
 800da04:	61fb      	str	r3, [r7, #28]
 800da06:	e025      	b.n	800da54 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d011      	beq.n	800da32 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800da0e:	6839      	ldr	r1, [r7, #0]
 800da10:	69b8      	ldr	r0, [r7, #24]
 800da12:	f000 fe97 	bl	800e744 <xQueueTakeMutexRecursive>
 800da16:	4603      	mov	r3, r0
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d01b      	beq.n	800da54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d003      	beq.n	800da2a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800da22:	f06f 0301 	mvn.w	r3, #1
 800da26:	61fb      	str	r3, [r7, #28]
 800da28:	e014      	b.n	800da54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800da2a:	f06f 0302 	mvn.w	r3, #2
 800da2e:	61fb      	str	r3, [r7, #28]
 800da30:	e010      	b.n	800da54 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800da32:	6839      	ldr	r1, [r7, #0]
 800da34:	69b8      	ldr	r0, [r7, #24]
 800da36:	f001 fa51 	bl	800eedc <xQueueSemaphoreTake>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d009      	beq.n	800da54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800da46:	f06f 0301 	mvn.w	r3, #1
 800da4a:	61fb      	str	r3, [r7, #28]
 800da4c:	e002      	b.n	800da54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800da4e:	f06f 0302 	mvn.w	r3, #2
 800da52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800da54:	69fb      	ldr	r3, [r7, #28]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3720      	adds	r7, #32
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	200076c4 	.word	0x200076c4

0800da64 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800da64:	b580      	push	{r7, lr}
 800da66:	b088      	sub	sp, #32
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f023 0301 	bic.w	r3, r3, #1
 800da72:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800da7c:	2300      	movs	r3, #0
 800da7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da80:	f3ef 8305 	mrs	r3, IPSR
 800da84:	613b      	str	r3, [r7, #16]
  return(result);
 800da86:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10f      	bne.n	800daac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da8c:	f3ef 8310 	mrs	r3, PRIMASK
 800da90:	60fb      	str	r3, [r7, #12]
  return(result);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d105      	bne.n	800daa4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da98:	f3ef 8311 	mrs	r3, BASEPRI
 800da9c:	60bb      	str	r3, [r7, #8]
  return(result);
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d007      	beq.n	800dab4 <osMutexRelease+0x50>
 800daa4:	4b16      	ldr	r3, [pc, #88]	; (800db00 <osMutexRelease+0x9c>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d103      	bne.n	800dab4 <osMutexRelease+0x50>
    stat = osErrorISR;
 800daac:	f06f 0305 	mvn.w	r3, #5
 800dab0:	61fb      	str	r3, [r7, #28]
 800dab2:	e01f      	b.n	800daf4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d103      	bne.n	800dac2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800daba:	f06f 0303 	mvn.w	r3, #3
 800dabe:	61fb      	str	r3, [r7, #28]
 800dac0:	e018      	b.n	800daf4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d009      	beq.n	800dadc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800dac8:	69b8      	ldr	r0, [r7, #24]
 800daca:	f000 fe05 	bl	800e6d8 <xQueueGiveMutexRecursive>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d00f      	beq.n	800daf4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800dad4:	f06f 0302 	mvn.w	r3, #2
 800dad8:	61fb      	str	r3, [r7, #28]
 800dada:	e00b      	b.n	800daf4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800dadc:	2300      	movs	r3, #0
 800dade:	2200      	movs	r2, #0
 800dae0:	2100      	movs	r1, #0
 800dae2:	69b8      	ldr	r0, [r7, #24]
 800dae4:	f000 fed8 	bl	800e898 <xQueueGenericSend>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b01      	cmp	r3, #1
 800daec:	d002      	beq.n	800daf4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800daee:	f06f 0302 	mvn.w	r3, #2
 800daf2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800daf4:	69fb      	ldr	r3, [r7, #28]
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3720      	adds	r7, #32
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	200076c4 	.word	0x200076c4

0800db04 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800db04:	b580      	push	{r7, lr}
 800db06:	b08c      	sub	sp, #48	; 0x30
 800db08:	af02      	add	r7, sp, #8
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800db10:	2300      	movs	r3, #0
 800db12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db14:	f3ef 8305 	mrs	r3, IPSR
 800db18:	61bb      	str	r3, [r7, #24]
  return(result);
 800db1a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f040 8086 	bne.w	800dc2e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db22:	f3ef 8310 	mrs	r3, PRIMASK
 800db26:	617b      	str	r3, [r7, #20]
  return(result);
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d105      	bne.n	800db3a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db2e:	f3ef 8311 	mrs	r3, BASEPRI
 800db32:	613b      	str	r3, [r7, #16]
  return(result);
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d003      	beq.n	800db42 <osSemaphoreNew+0x3e>
 800db3a:	4b3f      	ldr	r3, [pc, #252]	; (800dc38 <osSemaphoreNew+0x134>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d075      	beq.n	800dc2e <osSemaphoreNew+0x12a>
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d072      	beq.n	800dc2e <osSemaphoreNew+0x12a>
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d86e      	bhi.n	800dc2e <osSemaphoreNew+0x12a>
    mem = -1;
 800db50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d015      	beq.n	800db88 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <osSemaphoreNew+0x6e>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	2b4f      	cmp	r3, #79	; 0x4f
 800db6a:	d902      	bls.n	800db72 <osSemaphoreNew+0x6e>
        mem = 1;
 800db6c:	2301      	movs	r3, #1
 800db6e:	623b      	str	r3, [r7, #32]
 800db70:	e00c      	b.n	800db8c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d108      	bne.n	800db8c <osSemaphoreNew+0x88>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d104      	bne.n	800db8c <osSemaphoreNew+0x88>
          mem = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	623b      	str	r3, [r7, #32]
 800db86:	e001      	b.n	800db8c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800db8c:	6a3b      	ldr	r3, [r7, #32]
 800db8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db92:	d04c      	beq.n	800dc2e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d128      	bne.n	800dbec <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800db9a:	6a3b      	ldr	r3, [r7, #32]
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d10a      	bne.n	800dbb6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	2203      	movs	r2, #3
 800dba6:	9200      	str	r2, [sp, #0]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	2100      	movs	r1, #0
 800dbac:	2001      	movs	r0, #1
 800dbae:	f000 fc5f 	bl	800e470 <xQueueGenericCreateStatic>
 800dbb2:	6278      	str	r0, [r7, #36]	; 0x24
 800dbb4:	e005      	b.n	800dbc2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800dbb6:	2203      	movs	r2, #3
 800dbb8:	2100      	movs	r1, #0
 800dbba:	2001      	movs	r0, #1
 800dbbc:	f000 fcda 	bl	800e574 <xQueueGenericCreate>
 800dbc0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d022      	beq.n	800dc0e <osSemaphoreNew+0x10a>
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d01f      	beq.n	800dc0e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dbce:	2300      	movs	r3, #0
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbd6:	f000 fe5f 	bl	800e898 <xQueueGenericSend>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d016      	beq.n	800dc0e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800dbe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbe2:	f001 fb55 	bl	800f290 <vQueueDelete>
            hSemaphore = NULL;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	627b      	str	r3, [r7, #36]	; 0x24
 800dbea:	e010      	b.n	800dc0e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800dbec:	6a3b      	ldr	r3, [r7, #32]
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d108      	bne.n	800dc04 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	68b9      	ldr	r1, [r7, #8]
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f000 fdda 	bl	800e7b4 <xQueueCreateCountingSemaphoreStatic>
 800dc00:	6278      	str	r0, [r7, #36]	; 0x24
 800dc02:	e004      	b.n	800dc0e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800dc04:	68b9      	ldr	r1, [r7, #8]
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f000 fe0f 	bl	800e82a <xQueueCreateCountingSemaphore>
 800dc0c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00c      	beq.n	800dc2e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d003      	beq.n	800dc22 <osSemaphoreNew+0x11e>
          name = attr->name;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	61fb      	str	r3, [r7, #28]
 800dc20:	e001      	b.n	800dc26 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800dc26:	69f9      	ldr	r1, [r7, #28]
 800dc28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc2a:	f001 fc7f 	bl	800f52c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3728      	adds	r7, #40	; 0x28
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	200076c4 	.word	0x200076c4

0800dc3c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d103      	bne.n	800dc5c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800dc54:	f06f 0303 	mvn.w	r3, #3
 800dc58:	61fb      	str	r3, [r7, #28]
 800dc5a:	e04b      	b.n	800dcf4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc5c:	f3ef 8305 	mrs	r3, IPSR
 800dc60:	617b      	str	r3, [r7, #20]
  return(result);
 800dc62:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10f      	bne.n	800dc88 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc68:	f3ef 8310 	mrs	r3, PRIMASK
 800dc6c:	613b      	str	r3, [r7, #16]
  return(result);
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d105      	bne.n	800dc80 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc74:	f3ef 8311 	mrs	r3, BASEPRI
 800dc78:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d026      	beq.n	800dcce <osSemaphoreAcquire+0x92>
 800dc80:	4b1f      	ldr	r3, [pc, #124]	; (800dd00 <osSemaphoreAcquire+0xc4>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b02      	cmp	r3, #2
 800dc86:	d122      	bne.n	800dcce <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d003      	beq.n	800dc96 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800dc8e:	f06f 0303 	mvn.w	r3, #3
 800dc92:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800dc94:	e02d      	b.n	800dcf2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800dc96:	2300      	movs	r3, #0
 800dc98:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dc9a:	f107 0308 	add.w	r3, r7, #8
 800dc9e:	461a      	mov	r2, r3
 800dca0:	2100      	movs	r1, #0
 800dca2:	69b8      	ldr	r0, [r7, #24]
 800dca4:	f001 fa2e 	bl	800f104 <xQueueReceiveFromISR>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d003      	beq.n	800dcb6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800dcae:	f06f 0302 	mvn.w	r3, #2
 800dcb2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800dcb4:	e01d      	b.n	800dcf2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d01a      	beq.n	800dcf2 <osSemaphoreAcquire+0xb6>
 800dcbc:	4b11      	ldr	r3, [pc, #68]	; (800dd04 <osSemaphoreAcquire+0xc8>)
 800dcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	f3bf 8f4f 	dsb	sy
 800dcc8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800dccc:	e011      	b.n	800dcf2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	69b8      	ldr	r0, [r7, #24]
 800dcd2:	f001 f903 	bl	800eedc <xQueueSemaphoreTake>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d00b      	beq.n	800dcf4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d003      	beq.n	800dcea <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800dce2:	f06f 0301 	mvn.w	r3, #1
 800dce6:	61fb      	str	r3, [r7, #28]
 800dce8:	e004      	b.n	800dcf4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800dcea:	f06f 0302 	mvn.w	r3, #2
 800dcee:	61fb      	str	r3, [r7, #28]
 800dcf0:	e000      	b.n	800dcf4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800dcf2:	bf00      	nop
      }
    }
  }

  return (stat);
 800dcf4:	69fb      	ldr	r3, [r7, #28]
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3720      	adds	r7, #32
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	200076c4 	.word	0x200076c4
 800dd04:	e000ed04 	.word	0xe000ed04

0800dd08 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b088      	sub	sp, #32
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dd14:	2300      	movs	r3, #0
 800dd16:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d103      	bne.n	800dd26 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800dd1e:	f06f 0303 	mvn.w	r3, #3
 800dd22:	61fb      	str	r3, [r7, #28]
 800dd24:	e03e      	b.n	800dda4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd26:	f3ef 8305 	mrs	r3, IPSR
 800dd2a:	617b      	str	r3, [r7, #20]
  return(result);
 800dd2c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d10f      	bne.n	800dd52 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd32:	f3ef 8310 	mrs	r3, PRIMASK
 800dd36:	613b      	str	r3, [r7, #16]
  return(result);
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d105      	bne.n	800dd4a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd3e:	f3ef 8311 	mrs	r3, BASEPRI
 800dd42:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d01e      	beq.n	800dd88 <osSemaphoreRelease+0x80>
 800dd4a:	4b19      	ldr	r3, [pc, #100]	; (800ddb0 <osSemaphoreRelease+0xa8>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d11a      	bne.n	800dd88 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800dd52:	2300      	movs	r3, #0
 800dd54:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dd56:	f107 0308 	add.w	r3, r7, #8
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	69b8      	ldr	r0, [r7, #24]
 800dd5e:	f000 ff41 	bl	800ebe4 <xQueueGiveFromISR>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d003      	beq.n	800dd70 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800dd68:	f06f 0302 	mvn.w	r3, #2
 800dd6c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dd6e:	e018      	b.n	800dda2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d015      	beq.n	800dda2 <osSemaphoreRelease+0x9a>
 800dd76:	4b0f      	ldr	r3, [pc, #60]	; (800ddb4 <osSemaphoreRelease+0xac>)
 800dd78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dd86:	e00c      	b.n	800dda2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dd88:	2300      	movs	r3, #0
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	69b8      	ldr	r0, [r7, #24]
 800dd90:	f000 fd82 	bl	800e898 <xQueueGenericSend>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d004      	beq.n	800dda4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800dd9a:	f06f 0302 	mvn.w	r3, #2
 800dd9e:	61fb      	str	r3, [r7, #28]
 800dda0:	e000      	b.n	800dda4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dda2:	bf00      	nop
    }
  }

  return (stat);
 800dda4:	69fb      	ldr	r3, [r7, #28]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3720      	adds	r7, #32
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	200076c4 	.word	0x200076c4
 800ddb4:	e000ed04 	.word	0xe000ed04

0800ddb8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b088      	sub	sp, #32
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddc4:	f3ef 8305 	mrs	r3, IPSR
 800ddc8:	617b      	str	r3, [r7, #20]
  return(result);
 800ddca:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10f      	bne.n	800ddf0 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddd0:	f3ef 8310 	mrs	r3, PRIMASK
 800ddd4:	613b      	str	r3, [r7, #16]
  return(result);
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d105      	bne.n	800dde8 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dddc:	f3ef 8311 	mrs	r3, BASEPRI
 800dde0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d007      	beq.n	800ddf8 <osSemaphoreDelete+0x40>
 800dde8:	4b0d      	ldr	r3, [pc, #52]	; (800de20 <osSemaphoreDelete+0x68>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d103      	bne.n	800ddf8 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800ddf0:	f06f 0305 	mvn.w	r3, #5
 800ddf4:	61fb      	str	r3, [r7, #28]
 800ddf6:	e00e      	b.n	800de16 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d103      	bne.n	800de06 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800ddfe:	f06f 0303 	mvn.w	r3, #3
 800de02:	61fb      	str	r3, [r7, #28]
 800de04:	e007      	b.n	800de16 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800de06:	69b8      	ldr	r0, [r7, #24]
 800de08:	f001 fbba 	bl	800f580 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800de0c:	2300      	movs	r3, #0
 800de0e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800de10:	69b8      	ldr	r0, [r7, #24]
 800de12:	f001 fa3d 	bl	800f290 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800de16:	69fb      	ldr	r3, [r7, #28]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3720      	adds	r7, #32
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	200076c4 	.word	0x200076c4

0800de24 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800de24:	b580      	push	{r7, lr}
 800de26:	b08c      	sub	sp, #48	; 0x30
 800de28:	af02      	add	r7, sp, #8
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800de30:	2300      	movs	r3, #0
 800de32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de34:	f3ef 8305 	mrs	r3, IPSR
 800de38:	61bb      	str	r3, [r7, #24]
  return(result);
 800de3a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d16f      	bne.n	800df20 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de40:	f3ef 8310 	mrs	r3, PRIMASK
 800de44:	617b      	str	r3, [r7, #20]
  return(result);
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d105      	bne.n	800de58 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de4c:	f3ef 8311 	mrs	r3, BASEPRI
 800de50:	613b      	str	r3, [r7, #16]
  return(result);
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d003      	beq.n	800de60 <osMessageQueueNew+0x3c>
 800de58:	4b34      	ldr	r3, [pc, #208]	; (800df2c <osMessageQueueNew+0x108>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d05f      	beq.n	800df20 <osMessageQueueNew+0xfc>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d05c      	beq.n	800df20 <osMessageQueueNew+0xfc>
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d059      	beq.n	800df20 <osMessageQueueNew+0xfc>
    mem = -1;
 800de6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de70:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d029      	beq.n	800decc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d012      	beq.n	800dea6 <osMessageQueueNew+0x82>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	2b4f      	cmp	r3, #79	; 0x4f
 800de86:	d90e      	bls.n	800dea6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d00a      	beq.n	800dea6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	695a      	ldr	r2, [r3, #20]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	68b9      	ldr	r1, [r7, #8]
 800de98:	fb01 f303 	mul.w	r3, r1, r3
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d302      	bcc.n	800dea6 <osMessageQueueNew+0x82>
        mem = 1;
 800dea0:	2301      	movs	r3, #1
 800dea2:	623b      	str	r3, [r7, #32]
 800dea4:	e014      	b.n	800ded0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	689b      	ldr	r3, [r3, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d110      	bne.n	800ded0 <osMessageQueueNew+0xac>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d10c      	bne.n	800ded0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800deba:	2b00      	cmp	r3, #0
 800debc:	d108      	bne.n	800ded0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d104      	bne.n	800ded0 <osMessageQueueNew+0xac>
          mem = 0;
 800dec6:	2300      	movs	r3, #0
 800dec8:	623b      	str	r3, [r7, #32]
 800deca:	e001      	b.n	800ded0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800decc:	2300      	movs	r3, #0
 800dece:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ded0:	6a3b      	ldr	r3, [r7, #32]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d10b      	bne.n	800deee <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	691a      	ldr	r2, [r3, #16]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	2100      	movs	r1, #0
 800dee0:	9100      	str	r1, [sp, #0]
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f000 fac3 	bl	800e470 <xQueueGenericCreateStatic>
 800deea:	6278      	str	r0, [r7, #36]	; 0x24
 800deec:	e008      	b.n	800df00 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800deee:	6a3b      	ldr	r3, [r7, #32]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d105      	bne.n	800df00 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800def4:	2200      	movs	r2, #0
 800def6:	68b9      	ldr	r1, [r7, #8]
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f000 fb3b 	bl	800e574 <xQueueGenericCreate>
 800defe:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	2b00      	cmp	r3, #0
 800df04:	d00c      	beq.n	800df20 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d003      	beq.n	800df14 <osMessageQueueNew+0xf0>
        name = attr->name;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	61fb      	str	r3, [r7, #28]
 800df12:	e001      	b.n	800df18 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800df14:	2300      	movs	r3, #0
 800df16:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800df18:	69f9      	ldr	r1, [r7, #28]
 800df1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df1c:	f001 fb06 	bl	800f52c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800df20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df22:	4618      	mov	r0, r3
 800df24:	3728      	adds	r7, #40	; 0x28
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	200076c4 	.word	0x200076c4

0800df30 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800df30:	b580      	push	{r7, lr}
 800df32:	b08a      	sub	sp, #40	; 0x28
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	603b      	str	r3, [r7, #0]
 800df3c:	4613      	mov	r3, r2
 800df3e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800df44:	2300      	movs	r3, #0
 800df46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df48:	f3ef 8305 	mrs	r3, IPSR
 800df4c:	61fb      	str	r3, [r7, #28]
  return(result);
 800df4e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10f      	bne.n	800df74 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df54:	f3ef 8310 	mrs	r3, PRIMASK
 800df58:	61bb      	str	r3, [r7, #24]
  return(result);
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d105      	bne.n	800df6c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df60:	f3ef 8311 	mrs	r3, BASEPRI
 800df64:	617b      	str	r3, [r7, #20]
  return(result);
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d02c      	beq.n	800dfc6 <osMessageQueuePut+0x96>
 800df6c:	4b28      	ldr	r3, [pc, #160]	; (800e010 <osMessageQueuePut+0xe0>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b02      	cmp	r3, #2
 800df72:	d128      	bne.n	800dfc6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800df74:	6a3b      	ldr	r3, [r7, #32]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d005      	beq.n	800df86 <osMessageQueuePut+0x56>
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d002      	beq.n	800df86 <osMessageQueuePut+0x56>
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d003      	beq.n	800df8e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800df86:	f06f 0303 	mvn.w	r3, #3
 800df8a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800df8c:	e039      	b.n	800e002 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800df8e:	2300      	movs	r3, #0
 800df90:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800df92:	f107 0210 	add.w	r2, r7, #16
 800df96:	2300      	movs	r3, #0
 800df98:	68b9      	ldr	r1, [r7, #8]
 800df9a:	6a38      	ldr	r0, [r7, #32]
 800df9c:	f000 fd82 	bl	800eaa4 <xQueueGenericSendFromISR>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d003      	beq.n	800dfae <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800dfa6:	f06f 0302 	mvn.w	r3, #2
 800dfaa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dfac:	e029      	b.n	800e002 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d026      	beq.n	800e002 <osMessageQueuePut+0xd2>
 800dfb4:	4b17      	ldr	r3, [pc, #92]	; (800e014 <osMessageQueuePut+0xe4>)
 800dfb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfba:	601a      	str	r2, [r3, #0]
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dfc4:	e01d      	b.n	800e002 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <osMessageQueuePut+0xa2>
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d103      	bne.n	800dfda <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800dfd2:	f06f 0303 	mvn.w	r3, #3
 800dfd6:	627b      	str	r3, [r7, #36]	; 0x24
 800dfd8:	e014      	b.n	800e004 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dfda:	2300      	movs	r3, #0
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	68b9      	ldr	r1, [r7, #8]
 800dfe0:	6a38      	ldr	r0, [r7, #32]
 800dfe2:	f000 fc59 	bl	800e898 <xQueueGenericSend>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d00b      	beq.n	800e004 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d003      	beq.n	800dffa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800dff2:	f06f 0301 	mvn.w	r3, #1
 800dff6:	627b      	str	r3, [r7, #36]	; 0x24
 800dff8:	e004      	b.n	800e004 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800dffa:	f06f 0302 	mvn.w	r3, #2
 800dffe:	627b      	str	r3, [r7, #36]	; 0x24
 800e000:	e000      	b.n	800e004 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e002:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e006:	4618      	mov	r0, r3
 800e008:	3728      	adds	r7, #40	; 0x28
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	200076c4 	.word	0x200076c4
 800e014:	e000ed04 	.word	0xe000ed04

0800e018 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e018:	b580      	push	{r7, lr}
 800e01a:	b08a      	sub	sp, #40	; 0x28
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
 800e024:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e02a:	2300      	movs	r3, #0
 800e02c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e02e:	f3ef 8305 	mrs	r3, IPSR
 800e032:	61fb      	str	r3, [r7, #28]
  return(result);
 800e034:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10f      	bne.n	800e05a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e03a:	f3ef 8310 	mrs	r3, PRIMASK
 800e03e:	61bb      	str	r3, [r7, #24]
  return(result);
 800e040:	69bb      	ldr	r3, [r7, #24]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d105      	bne.n	800e052 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e046:	f3ef 8311 	mrs	r3, BASEPRI
 800e04a:	617b      	str	r3, [r7, #20]
  return(result);
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d02c      	beq.n	800e0ac <osMessageQueueGet+0x94>
 800e052:	4b28      	ldr	r3, [pc, #160]	; (800e0f4 <osMessageQueueGet+0xdc>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b02      	cmp	r3, #2
 800e058:	d128      	bne.n	800e0ac <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e05a:	6a3b      	ldr	r3, [r7, #32]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d005      	beq.n	800e06c <osMessageQueueGet+0x54>
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d002      	beq.n	800e06c <osMessageQueueGet+0x54>
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d003      	beq.n	800e074 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e06c:	f06f 0303 	mvn.w	r3, #3
 800e070:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e072:	e038      	b.n	800e0e6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e074:	2300      	movs	r3, #0
 800e076:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e078:	f107 0310 	add.w	r3, r7, #16
 800e07c:	461a      	mov	r2, r3
 800e07e:	68b9      	ldr	r1, [r7, #8]
 800e080:	6a38      	ldr	r0, [r7, #32]
 800e082:	f001 f83f 	bl	800f104 <xQueueReceiveFromISR>
 800e086:	4603      	mov	r3, r0
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d003      	beq.n	800e094 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e08c:	f06f 0302 	mvn.w	r3, #2
 800e090:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e092:	e028      	b.n	800e0e6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d025      	beq.n	800e0e6 <osMessageQueueGet+0xce>
 800e09a:	4b17      	ldr	r3, [pc, #92]	; (800e0f8 <osMessageQueueGet+0xe0>)
 800e09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0aa:	e01c      	b.n	800e0e6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e0ac:	6a3b      	ldr	r3, [r7, #32]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d002      	beq.n	800e0b8 <osMessageQueueGet+0xa0>
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d103      	bne.n	800e0c0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e0b8:	f06f 0303 	mvn.w	r3, #3
 800e0bc:	627b      	str	r3, [r7, #36]	; 0x24
 800e0be:	e013      	b.n	800e0e8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e0c0:	683a      	ldr	r2, [r7, #0]
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	6a38      	ldr	r0, [r7, #32]
 800e0c6:	f000 fe23 	bl	800ed10 <xQueueReceive>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d00b      	beq.n	800e0e8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d003      	beq.n	800e0de <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e0d6:	f06f 0301 	mvn.w	r3, #1
 800e0da:	627b      	str	r3, [r7, #36]	; 0x24
 800e0dc:	e004      	b.n	800e0e8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e0de:	f06f 0302 	mvn.w	r3, #2
 800e0e2:	627b      	str	r3, [r7, #36]	; 0x24
 800e0e4:	e000      	b.n	800e0e8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3728      	adds	r7, #40	; 0x28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	200076c4 	.word	0x200076c4
 800e0f8:	e000ed04 	.word	0xe000ed04

0800e0fc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b088      	sub	sp, #32
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d102      	bne.n	800e114 <osMessageQueueGetCount+0x18>
    count = 0U;
 800e10e:	2300      	movs	r3, #0
 800e110:	61fb      	str	r3, [r7, #28]
 800e112:	e01e      	b.n	800e152 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e114:	f3ef 8305 	mrs	r3, IPSR
 800e118:	617b      	str	r3, [r7, #20]
  return(result);
 800e11a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10f      	bne.n	800e140 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e120:	f3ef 8310 	mrs	r3, PRIMASK
 800e124:	613b      	str	r3, [r7, #16]
  return(result);
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d105      	bne.n	800e138 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e12c:	f3ef 8311 	mrs	r3, BASEPRI
 800e130:	60fb      	str	r3, [r7, #12]
  return(result);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d008      	beq.n	800e14a <osMessageQueueGetCount+0x4e>
 800e138:	4b08      	ldr	r3, [pc, #32]	; (800e15c <osMessageQueueGetCount+0x60>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d104      	bne.n	800e14a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800e140:	69b8      	ldr	r0, [r7, #24]
 800e142:	f001 f885 	bl	800f250 <uxQueueMessagesWaitingFromISR>
 800e146:	61f8      	str	r0, [r7, #28]
 800e148:	e003      	b.n	800e152 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800e14a:	69b8      	ldr	r0, [r7, #24]
 800e14c:	f001 f860 	bl	800f210 <uxQueueMessagesWaiting>
 800e150:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800e152:	69fb      	ldr	r3, [r7, #28]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3720      	adds	r7, #32
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	200076c4 	.word	0x200076c4

0800e160 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800e160:	b580      	push	{r7, lr}
 800e162:	b088      	sub	sp, #32
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e16c:	f3ef 8305 	mrs	r3, IPSR
 800e170:	617b      	str	r3, [r7, #20]
  return(result);
 800e172:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10f      	bne.n	800e198 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e178:	f3ef 8310 	mrs	r3, PRIMASK
 800e17c:	613b      	str	r3, [r7, #16]
  return(result);
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d105      	bne.n	800e190 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e184:	f3ef 8311 	mrs	r3, BASEPRI
 800e188:	60fb      	str	r3, [r7, #12]
  return(result);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d007      	beq.n	800e1a0 <osMessageQueueDelete+0x40>
 800e190:	4b0d      	ldr	r3, [pc, #52]	; (800e1c8 <osMessageQueueDelete+0x68>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b02      	cmp	r3, #2
 800e196:	d103      	bne.n	800e1a0 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800e198:	f06f 0305 	mvn.w	r3, #5
 800e19c:	61fb      	str	r3, [r7, #28]
 800e19e:	e00e      	b.n	800e1be <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d103      	bne.n	800e1ae <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800e1a6:	f06f 0303 	mvn.w	r3, #3
 800e1aa:	61fb      	str	r3, [r7, #28]
 800e1ac:	e007      	b.n	800e1be <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800e1ae:	69b8      	ldr	r0, [r7, #24]
 800e1b0:	f001 f9e6 	bl	800f580 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800e1b8:	69b8      	ldr	r0, [r7, #24]
 800e1ba:	f001 f869 	bl	800f290 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800e1be:	69fb      	ldr	r3, [r7, #28]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3720      	adds	r7, #32
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	200076c4 	.word	0x200076c4

0800e1cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e1cc:	b480      	push	{r7}
 800e1ce:	b085      	sub	sp, #20
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	4a07      	ldr	r2, [pc, #28]	; (800e1f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800e1dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	4a06      	ldr	r2, [pc, #24]	; (800e1fc <vApplicationGetIdleTaskMemory+0x30>)
 800e1e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2280      	movs	r2, #128	; 0x80
 800e1e8:	601a      	str	r2, [r3, #0]
}
 800e1ea:	bf00      	nop
 800e1ec:	3714      	adds	r7, #20
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	200076c8 	.word	0x200076c8
 800e1fc:	20007788 	.word	0x20007788

0800e200 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	4a07      	ldr	r2, [pc, #28]	; (800e22c <vApplicationGetTimerTaskMemory+0x2c>)
 800e210:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	4a06      	ldr	r2, [pc, #24]	; (800e230 <vApplicationGetTimerTaskMemory+0x30>)
 800e216:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	22fe      	movs	r2, #254	; 0xfe
 800e21c:	601a      	str	r2, [r3, #0]
}
 800e21e:	bf00      	nop
 800e220:	3714      	adds	r7, #20
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop
 800e22c:	20007988 	.word	0x20007988
 800e230:	20007a48 	.word	0x20007a48

0800e234 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f103 0208 	add.w	r2, r3, #8
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e24c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f103 0208 	add.w	r2, r3, #8
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f103 0208 	add.w	r2, r3, #8
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e268:	bf00      	nop
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e282:	bf00      	nop
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e28e:	b480      	push	{r7}
 800e290:	b085      	sub	sp, #20
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
 800e296:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	68fa      	ldr	r2, [r7, #12]
 800e2a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	689a      	ldr	r2, [r3, #8]
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	683a      	ldr	r2, [r7, #0]
 800e2b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	683a      	ldr	r2, [r7, #0]
 800e2b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	1c5a      	adds	r2, r3, #1
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	601a      	str	r2, [r3, #0]
}
 800e2ca:	bf00      	nop
 800e2cc:	3714      	adds	r7, #20
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e2d6:	b480      	push	{r7}
 800e2d8:	b085      	sub	sp, #20
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
 800e2de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2ec:	d103      	bne.n	800e2f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	691b      	ldr	r3, [r3, #16]
 800e2f2:	60fb      	str	r3, [r7, #12]
 800e2f4:	e00c      	b.n	800e310 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	3308      	adds	r3, #8
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	e002      	b.n	800e304 <vListInsert+0x2e>
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	60fb      	str	r3, [r7, #12]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d2f6      	bcs.n	800e2fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	685a      	ldr	r2, [r3, #4]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	683a      	ldr	r2, [r7, #0]
 800e31e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	68fa      	ldr	r2, [r7, #12]
 800e324:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	683a      	ldr	r2, [r7, #0]
 800e32a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	1c5a      	adds	r2, r3, #1
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	601a      	str	r2, [r3, #0]
}
 800e33c:	bf00      	nop
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	691b      	ldr	r3, [r3, #16]
 800e354:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	6892      	ldr	r2, [r2, #8]
 800e35e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	6852      	ldr	r2, [r2, #4]
 800e368:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	429a      	cmp	r2, r3
 800e372:	d103      	bne.n	800e37c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	689a      	ldr	r2, [r3, #8]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	1e5a      	subs	r2, r3, #1
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d10c      	bne.n	800e3ca <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b4:	b672      	cpsid	i
 800e3b6:	f383 8811 	msr	BASEPRI, r3
 800e3ba:	f3bf 8f6f 	isb	sy
 800e3be:	f3bf 8f4f 	dsb	sy
 800e3c2:	b662      	cpsie	i
 800e3c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e3c6:	bf00      	nop
 800e3c8:	e7fe      	b.n	800e3c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e3ca:	f002 ff3f 	bl	801124c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3d6:	68f9      	ldr	r1, [r7, #12]
 800e3d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e3da:	fb01 f303 	mul.w	r3, r1, r3
 800e3de:	441a      	add	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3fa:	3b01      	subs	r3, #1
 800e3fc:	68f9      	ldr	r1, [r7, #12]
 800e3fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e400:	fb01 f303 	mul.w	r3, r1, r3
 800e404:	441a      	add	r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	22ff      	movs	r2, #255	; 0xff
 800e40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	22ff      	movs	r2, #255	; 0xff
 800e416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d114      	bne.n	800e44a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d01a      	beq.n	800e45e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	3310      	adds	r3, #16
 800e42c:	4618      	mov	r0, r3
 800e42e:	f001 fee3 	bl	80101f8 <xTaskRemoveFromEventList>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d012      	beq.n	800e45e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e438:	4b0c      	ldr	r3, [pc, #48]	; (800e46c <xQueueGenericReset+0xd0>)
 800e43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e43e:	601a      	str	r2, [r3, #0]
 800e440:	f3bf 8f4f 	dsb	sy
 800e444:	f3bf 8f6f 	isb	sy
 800e448:	e009      	b.n	800e45e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	3310      	adds	r3, #16
 800e44e:	4618      	mov	r0, r3
 800e450:	f7ff fef0 	bl	800e234 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	3324      	adds	r3, #36	; 0x24
 800e458:	4618      	mov	r0, r3
 800e45a:	f7ff feeb 	bl	800e234 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e45e:	f002 ff29 	bl	80112b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e462:	2301      	movs	r3, #1
}
 800e464:	4618      	mov	r0, r3
 800e466:	3710      	adds	r7, #16
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	e000ed04 	.word	0xe000ed04

0800e470 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e470:	b580      	push	{r7, lr}
 800e472:	b08e      	sub	sp, #56	; 0x38
 800e474:	af02      	add	r7, sp, #8
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
 800e47c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d10c      	bne.n	800e49e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e488:	b672      	cpsid	i
 800e48a:	f383 8811 	msr	BASEPRI, r3
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	b662      	cpsie	i
 800e498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e49a:	bf00      	nop
 800e49c:	e7fe      	b.n	800e49c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10c      	bne.n	800e4be <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a8:	b672      	cpsid	i
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	b662      	cpsie	i
 800e4b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e4ba:	bf00      	nop
 800e4bc:	e7fe      	b.n	800e4bc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d002      	beq.n	800e4ca <xQueueGenericCreateStatic+0x5a>
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d001      	beq.n	800e4ce <xQueueGenericCreateStatic+0x5e>
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e000      	b.n	800e4d0 <xQueueGenericCreateStatic+0x60>
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d10c      	bne.n	800e4ee <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d8:	b672      	cpsid	i
 800e4da:	f383 8811 	msr	BASEPRI, r3
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	f3bf 8f4f 	dsb	sy
 800e4e6:	b662      	cpsie	i
 800e4e8:	623b      	str	r3, [r7, #32]
}
 800e4ea:	bf00      	nop
 800e4ec:	e7fe      	b.n	800e4ec <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d102      	bne.n	800e4fa <xQueueGenericCreateStatic+0x8a>
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d101      	bne.n	800e4fe <xQueueGenericCreateStatic+0x8e>
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e000      	b.n	800e500 <xQueueGenericCreateStatic+0x90>
 800e4fe:	2300      	movs	r3, #0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d10c      	bne.n	800e51e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e508:	b672      	cpsid	i
 800e50a:	f383 8811 	msr	BASEPRI, r3
 800e50e:	f3bf 8f6f 	isb	sy
 800e512:	f3bf 8f4f 	dsb	sy
 800e516:	b662      	cpsie	i
 800e518:	61fb      	str	r3, [r7, #28]
}
 800e51a:	bf00      	nop
 800e51c:	e7fe      	b.n	800e51c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e51e:	2350      	movs	r3, #80	; 0x50
 800e520:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	2b50      	cmp	r3, #80	; 0x50
 800e526:	d00c      	beq.n	800e542 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52c:	b672      	cpsid	i
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	b662      	cpsie	i
 800e53c:	61bb      	str	r3, [r7, #24]
}
 800e53e:	bf00      	nop
 800e540:	e7fe      	b.n	800e540 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e542:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00d      	beq.n	800e56a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e550:	2201      	movs	r2, #1
 800e552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e556:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	4613      	mov	r3, r2
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	68b9      	ldr	r1, [r7, #8]
 800e564:	68f8      	ldr	r0, [r7, #12]
 800e566:	f000 f847 	bl	800e5f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3730      	adds	r7, #48	; 0x30
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e574:	b580      	push	{r7, lr}
 800e576:	b08a      	sub	sp, #40	; 0x28
 800e578:	af02      	add	r7, sp, #8
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	4613      	mov	r3, r2
 800e580:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d10c      	bne.n	800e5a2 <xQueueGenericCreate+0x2e>
	__asm volatile
 800e588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e58c:	b672      	cpsid	i
 800e58e:	f383 8811 	msr	BASEPRI, r3
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	b662      	cpsie	i
 800e59c:	613b      	str	r3, [r7, #16]
}
 800e59e:	bf00      	nop
 800e5a0:	e7fe      	b.n	800e5a0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d102      	bne.n	800e5ae <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	61fb      	str	r3, [r7, #28]
 800e5ac:	e004      	b.n	800e5b8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	fb02 f303 	mul.w	r3, r2, r3
 800e5b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	3350      	adds	r3, #80	; 0x50
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f002 ff71 	bl	80114a4 <pvPortMalloc>
 800e5c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e5c4:	69bb      	ldr	r3, [r7, #24]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d011      	beq.n	800e5ee <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	3350      	adds	r3, #80	; 0x50
 800e5d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e5dc:	79fa      	ldrb	r2, [r7, #7]
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	68b9      	ldr	r1, [r7, #8]
 800e5e8:	68f8      	ldr	r0, [r7, #12]
 800e5ea:	f000 f805 	bl	800e5f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e5ee:	69bb      	ldr	r3, [r7, #24]
	}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3720      	adds	r7, #32
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	60b9      	str	r1, [r7, #8]
 800e602:	607a      	str	r2, [r7, #4]
 800e604:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d103      	bne.n	800e614 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	69ba      	ldr	r2, [r7, #24]
 800e610:	601a      	str	r2, [r3, #0]
 800e612:	e002      	b.n	800e61a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	68ba      	ldr	r2, [r7, #8]
 800e624:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e626:	2101      	movs	r1, #1
 800e628:	69b8      	ldr	r0, [r7, #24]
 800e62a:	f7ff feb7 	bl	800e39c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	78fa      	ldrb	r2, [r7, #3]
 800e632:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e636:	bf00      	nop
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b082      	sub	sp, #8
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00e      	beq.n	800e66a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e65e:	2300      	movs	r3, #0
 800e660:	2200      	movs	r2, #0
 800e662:	2100      	movs	r1, #0
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 f917 	bl	800e898 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e66a:	bf00      	nop
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e672:	b580      	push	{r7, lr}
 800e674:	b086      	sub	sp, #24
 800e676:	af00      	add	r7, sp, #0
 800e678:	4603      	mov	r3, r0
 800e67a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e67c:	2301      	movs	r3, #1
 800e67e:	617b      	str	r3, [r7, #20]
 800e680:	2300      	movs	r3, #0
 800e682:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e684:	79fb      	ldrb	r3, [r7, #7]
 800e686:	461a      	mov	r2, r3
 800e688:	6939      	ldr	r1, [r7, #16]
 800e68a:	6978      	ldr	r0, [r7, #20]
 800e68c:	f7ff ff72 	bl	800e574 <xQueueGenericCreate>
 800e690:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f7ff ffd3 	bl	800e63e <prvInitialiseMutex>

		return xNewQueue;
 800e698:	68fb      	ldr	r3, [r7, #12]
	}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3718      	adds	r7, #24
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b088      	sub	sp, #32
 800e6a6:	af02      	add	r7, sp, #8
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	6039      	str	r1, [r7, #0]
 800e6ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	617b      	str	r3, [r7, #20]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	6939      	ldr	r1, [r7, #16]
 800e6c0:	6978      	ldr	r0, [r7, #20]
 800e6c2:	f7ff fed5 	bl	800e470 <xQueueGenericCreateStatic>
 800e6c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f7ff ffb8 	bl	800e63e <prvInitialiseMutex>

		return xNewQueue;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
	}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3718      	adds	r7, #24
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e6d8:	b590      	push	{r4, r7, lr}
 800e6da:	b087      	sub	sp, #28
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d10c      	bne.n	800e704 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800e6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ee:	b672      	cpsid	i
 800e6f0:	f383 8811 	msr	BASEPRI, r3
 800e6f4:	f3bf 8f6f 	isb	sy
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	b662      	cpsie	i
 800e6fe:	60fb      	str	r3, [r7, #12]
}
 800e700:	bf00      	nop
 800e702:	e7fe      	b.n	800e702 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	689c      	ldr	r4, [r3, #8]
 800e708:	f001 ff40 	bl	801058c <xTaskGetCurrentTaskHandle>
 800e70c:	4603      	mov	r3, r0
 800e70e:	429c      	cmp	r4, r3
 800e710:	d111      	bne.n	800e736 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	1e5a      	subs	r2, r3, #1
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d105      	bne.n	800e730 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e724:	2300      	movs	r3, #0
 800e726:	2200      	movs	r2, #0
 800e728:	2100      	movs	r1, #0
 800e72a:	6938      	ldr	r0, [r7, #16]
 800e72c:	f000 f8b4 	bl	800e898 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e730:	2301      	movs	r3, #1
 800e732:	617b      	str	r3, [r7, #20]
 800e734:	e001      	b.n	800e73a <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e736:	2300      	movs	r3, #0
 800e738:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e73a:	697b      	ldr	r3, [r7, #20]
	}
 800e73c:	4618      	mov	r0, r3
 800e73e:	371c      	adds	r7, #28
 800e740:	46bd      	mov	sp, r7
 800e742:	bd90      	pop	{r4, r7, pc}

0800e744 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e744:	b590      	push	{r4, r7, lr}
 800e746:	b087      	sub	sp, #28
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d10c      	bne.n	800e772 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800e758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75c:	b672      	cpsid	i
 800e75e:	f383 8811 	msr	BASEPRI, r3
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	b662      	cpsie	i
 800e76c:	60fb      	str	r3, [r7, #12]
}
 800e76e:	bf00      	nop
 800e770:	e7fe      	b.n	800e770 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	689c      	ldr	r4, [r3, #8]
 800e776:	f001 ff09 	bl	801058c <xTaskGetCurrentTaskHandle>
 800e77a:	4603      	mov	r3, r0
 800e77c:	429c      	cmp	r4, r3
 800e77e:	d107      	bne.n	800e790 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	1c5a      	adds	r2, r3, #1
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e78a:	2301      	movs	r3, #1
 800e78c:	617b      	str	r3, [r7, #20]
 800e78e:	e00c      	b.n	800e7aa <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e790:	6839      	ldr	r1, [r7, #0]
 800e792:	6938      	ldr	r0, [r7, #16]
 800e794:	f000 fba2 	bl	800eedc <xQueueSemaphoreTake>
 800e798:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d004      	beq.n	800e7aa <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	1c5a      	adds	r2, r3, #1
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e7aa:	697b      	ldr	r3, [r7, #20]
	}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	371c      	adds	r7, #28
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd90      	pop	{r4, r7, pc}

0800e7b4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b08a      	sub	sp, #40	; 0x28
 800e7b8:	af02      	add	r7, sp, #8
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d10c      	bne.n	800e7e0 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800e7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ca:	b672      	cpsid	i
 800e7cc:	f383 8811 	msr	BASEPRI, r3
 800e7d0:	f3bf 8f6f 	isb	sy
 800e7d4:	f3bf 8f4f 	dsb	sy
 800e7d8:	b662      	cpsie	i
 800e7da:	61bb      	str	r3, [r7, #24]
}
 800e7dc:	bf00      	nop
 800e7de:	e7fe      	b.n	800e7de <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d90c      	bls.n	800e802 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800e7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ec:	b672      	cpsid	i
 800e7ee:	f383 8811 	msr	BASEPRI, r3
 800e7f2:	f3bf 8f6f 	isb	sy
 800e7f6:	f3bf 8f4f 	dsb	sy
 800e7fa:	b662      	cpsie	i
 800e7fc:	617b      	str	r3, [r7, #20]
}
 800e7fe:	bf00      	nop
 800e800:	e7fe      	b.n	800e800 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e802:	2302      	movs	r3, #2
 800e804:	9300      	str	r3, [sp, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	2100      	movs	r1, #0
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f7ff fe2f 	bl	800e470 <xQueueGenericCreateStatic>
 800e812:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d002      	beq.n	800e820 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	68ba      	ldr	r2, [r7, #8]
 800e81e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e820:	69fb      	ldr	r3, [r7, #28]
	}
 800e822:	4618      	mov	r0, r3
 800e824:	3720      	adds	r7, #32
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b086      	sub	sp, #24
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
 800e832:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10c      	bne.n	800e854 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800e83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83e:	b672      	cpsid	i
 800e840:	f383 8811 	msr	BASEPRI, r3
 800e844:	f3bf 8f6f 	isb	sy
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	b662      	cpsie	i
 800e84e:	613b      	str	r3, [r7, #16]
}
 800e850:	bf00      	nop
 800e852:	e7fe      	b.n	800e852 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e854:	683a      	ldr	r2, [r7, #0]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d90c      	bls.n	800e876 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800e85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e860:	b672      	cpsid	i
 800e862:	f383 8811 	msr	BASEPRI, r3
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	b662      	cpsie	i
 800e870:	60fb      	str	r3, [r7, #12]
}
 800e872:	bf00      	nop
 800e874:	e7fe      	b.n	800e874 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e876:	2202      	movs	r2, #2
 800e878:	2100      	movs	r1, #0
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7ff fe7a 	bl	800e574 <xQueueGenericCreate>
 800e880:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d002      	beq.n	800e88e <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e88e:	697b      	ldr	r3, [r7, #20]
	}
 800e890:	4618      	mov	r0, r3
 800e892:	3718      	adds	r7, #24
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b08e      	sub	sp, #56	; 0x38
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	607a      	str	r2, [r7, #4]
 800e8a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10c      	bne.n	800e8ce <xQueueGenericSend+0x36>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b8:	b672      	cpsid	i
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	b662      	cpsie	i
 800e8c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e8ca:	bf00      	nop
 800e8cc:	e7fe      	b.n	800e8cc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d103      	bne.n	800e8dc <xQueueGenericSend+0x44>
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <xQueueGenericSend+0x48>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e000      	b.n	800e8e2 <xQueueGenericSend+0x4a>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10c      	bne.n	800e900 <xQueueGenericSend+0x68>
	__asm volatile
 800e8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ea:	b672      	cpsid	i
 800e8ec:	f383 8811 	msr	BASEPRI, r3
 800e8f0:	f3bf 8f6f 	isb	sy
 800e8f4:	f3bf 8f4f 	dsb	sy
 800e8f8:	b662      	cpsie	i
 800e8fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e8fc:	bf00      	nop
 800e8fe:	e7fe      	b.n	800e8fe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2b02      	cmp	r3, #2
 800e904:	d103      	bne.n	800e90e <xQueueGenericSend+0x76>
 800e906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d101      	bne.n	800e912 <xQueueGenericSend+0x7a>
 800e90e:	2301      	movs	r3, #1
 800e910:	e000      	b.n	800e914 <xQueueGenericSend+0x7c>
 800e912:	2300      	movs	r3, #0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10c      	bne.n	800e932 <xQueueGenericSend+0x9a>
	__asm volatile
 800e918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91c:	b672      	cpsid	i
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	b662      	cpsie	i
 800e92c:	623b      	str	r3, [r7, #32]
}
 800e92e:	bf00      	nop
 800e930:	e7fe      	b.n	800e930 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e932:	f001 fe3b 	bl	80105ac <xTaskGetSchedulerState>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d102      	bne.n	800e942 <xQueueGenericSend+0xaa>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d101      	bne.n	800e946 <xQueueGenericSend+0xae>
 800e942:	2301      	movs	r3, #1
 800e944:	e000      	b.n	800e948 <xQueueGenericSend+0xb0>
 800e946:	2300      	movs	r3, #0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d10c      	bne.n	800e966 <xQueueGenericSend+0xce>
	__asm volatile
 800e94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e950:	b672      	cpsid	i
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	b662      	cpsie	i
 800e960:	61fb      	str	r3, [r7, #28]
}
 800e962:	bf00      	nop
 800e964:	e7fe      	b.n	800e964 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e966:	f002 fc71 	bl	801124c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e972:	429a      	cmp	r2, r3
 800e974:	d302      	bcc.n	800e97c <xQueueGenericSend+0xe4>
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	2b02      	cmp	r3, #2
 800e97a:	d129      	bne.n	800e9d0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e97c:	683a      	ldr	r2, [r7, #0]
 800e97e:	68b9      	ldr	r1, [r7, #8]
 800e980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e982:	f000 fcc2 	bl	800f30a <prvCopyDataToQueue>
 800e986:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d010      	beq.n	800e9b2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e992:	3324      	adds	r3, #36	; 0x24
 800e994:	4618      	mov	r0, r3
 800e996:	f001 fc2f 	bl	80101f8 <xTaskRemoveFromEventList>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d013      	beq.n	800e9c8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e9a0:	4b3f      	ldr	r3, [pc, #252]	; (800eaa0 <xQueueGenericSend+0x208>)
 800e9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a6:	601a      	str	r2, [r3, #0]
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	e00a      	b.n	800e9c8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d007      	beq.n	800e9c8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e9b8:	4b39      	ldr	r3, [pc, #228]	; (800eaa0 <xQueueGenericSend+0x208>)
 800e9ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9be:	601a      	str	r2, [r3, #0]
 800e9c0:	f3bf 8f4f 	dsb	sy
 800e9c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e9c8:	f002 fc74 	bl	80112b4 <vPortExitCritical>
				return pdPASS;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	e063      	b.n	800ea98 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d103      	bne.n	800e9de <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e9d6:	f002 fc6d 	bl	80112b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	e05c      	b.n	800ea98 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d106      	bne.n	800e9f2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9e4:	f107 0314 	add.w	r3, r7, #20
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f001 fc6b 	bl	80102c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9f2:	f002 fc5f 	bl	80112b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e9f6:	f001 f99d 	bl	800fd34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9fa:	f002 fc27 	bl	801124c <vPortEnterCritical>
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea04:	b25b      	sxtb	r3, r3
 800ea06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea0a:	d103      	bne.n	800ea14 <xQueueGenericSend+0x17c>
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea1a:	b25b      	sxtb	r3, r3
 800ea1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea20:	d103      	bne.n	800ea2a <xQueueGenericSend+0x192>
 800ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea2a:	f002 fc43 	bl	80112b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea2e:	1d3a      	adds	r2, r7, #4
 800ea30:	f107 0314 	add.w	r3, r7, #20
 800ea34:	4611      	mov	r1, r2
 800ea36:	4618      	mov	r0, r3
 800ea38:	f001 fc5a 	bl	80102f0 <xTaskCheckForTimeOut>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d124      	bne.n	800ea8c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ea42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea44:	f000 fd59 	bl	800f4fa <prvIsQueueFull>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d018      	beq.n	800ea80 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	3310      	adds	r3, #16
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	4611      	mov	r1, r2
 800ea56:	4618      	mov	r0, r3
 800ea58:	f001 fb7a 	bl	8010150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ea5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea5e:	f000 fce4 	bl	800f42a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ea62:	f001 f975 	bl	800fd50 <xTaskResumeAll>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f47f af7c 	bne.w	800e966 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ea6e:	4b0c      	ldr	r3, [pc, #48]	; (800eaa0 <xQueueGenericSend+0x208>)
 800ea70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea74:	601a      	str	r2, [r3, #0]
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	f3bf 8f6f 	isb	sy
 800ea7e:	e772      	b.n	800e966 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ea80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea82:	f000 fcd2 	bl	800f42a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea86:	f001 f963 	bl	800fd50 <xTaskResumeAll>
 800ea8a:	e76c      	b.n	800e966 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ea8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea8e:	f000 fccc 	bl	800f42a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea92:	f001 f95d 	bl	800fd50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ea96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3738      	adds	r7, #56	; 0x38
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	e000ed04 	.word	0xe000ed04

0800eaa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b08e      	sub	sp, #56	; 0x38
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
 800eab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d10c      	bne.n	800ead6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800eabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac0:	b672      	cpsid	i
 800eac2:	f383 8811 	msr	BASEPRI, r3
 800eac6:	f3bf 8f6f 	isb	sy
 800eaca:	f3bf 8f4f 	dsb	sy
 800eace:	b662      	cpsie	i
 800ead0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ead2:	bf00      	nop
 800ead4:	e7fe      	b.n	800ead4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d103      	bne.n	800eae4 <xQueueGenericSendFromISR+0x40>
 800eadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d101      	bne.n	800eae8 <xQueueGenericSendFromISR+0x44>
 800eae4:	2301      	movs	r3, #1
 800eae6:	e000      	b.n	800eaea <xQueueGenericSendFromISR+0x46>
 800eae8:	2300      	movs	r3, #0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10c      	bne.n	800eb08 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	b672      	cpsid	i
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	b662      	cpsie	i
 800eb02:	623b      	str	r3, [r7, #32]
}
 800eb04:	bf00      	nop
 800eb06:	e7fe      	b.n	800eb06 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d103      	bne.n	800eb16 <xQueueGenericSendFromISR+0x72>
 800eb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	d101      	bne.n	800eb1a <xQueueGenericSendFromISR+0x76>
 800eb16:	2301      	movs	r3, #1
 800eb18:	e000      	b.n	800eb1c <xQueueGenericSendFromISR+0x78>
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d10c      	bne.n	800eb3a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800eb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb24:	b672      	cpsid	i
 800eb26:	f383 8811 	msr	BASEPRI, r3
 800eb2a:	f3bf 8f6f 	isb	sy
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	b662      	cpsie	i
 800eb34:	61fb      	str	r3, [r7, #28]
}
 800eb36:	bf00      	nop
 800eb38:	e7fe      	b.n	800eb38 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb3a:	f002 fc6f 	bl	801141c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800eb3e:	f3ef 8211 	mrs	r2, BASEPRI
 800eb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb46:	b672      	cpsid	i
 800eb48:	f383 8811 	msr	BASEPRI, r3
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	f3bf 8f4f 	dsb	sy
 800eb54:	b662      	cpsie	i
 800eb56:	61ba      	str	r2, [r7, #24]
 800eb58:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eb5a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d302      	bcc.n	800eb70 <xQueueGenericSendFromISR+0xcc>
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	2b02      	cmp	r3, #2
 800eb6e:	d12c      	bne.n	800ebca <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb7a:	683a      	ldr	r2, [r7, #0]
 800eb7c:	68b9      	ldr	r1, [r7, #8]
 800eb7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb80:	f000 fbc3 	bl	800f30a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eb84:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800eb88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb8c:	d112      	bne.n	800ebb4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d016      	beq.n	800ebc4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb98:	3324      	adds	r3, #36	; 0x24
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f001 fb2c 	bl	80101f8 <xTaskRemoveFromEventList>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00e      	beq.n	800ebc4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00b      	beq.n	800ebc4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	601a      	str	r2, [r3, #0]
 800ebb2:	e007      	b.n	800ebc4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ebb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ebb8:	3301      	adds	r3, #1
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	b25a      	sxtb	r2, r3
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ebc8:	e001      	b.n	800ebce <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	637b      	str	r3, [r7, #52]	; 0x34
 800ebce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ebd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ebda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3738      	adds	r7, #56	; 0x38
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b08e      	sub	sp, #56	; 0x38
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d10c      	bne.n	800ec12 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800ebf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfc:	b672      	cpsid	i
 800ebfe:	f383 8811 	msr	BASEPRI, r3
 800ec02:	f3bf 8f6f 	isb	sy
 800ec06:	f3bf 8f4f 	dsb	sy
 800ec0a:	b662      	cpsie	i
 800ec0c:	623b      	str	r3, [r7, #32]
}
 800ec0e:	bf00      	nop
 800ec10:	e7fe      	b.n	800ec10 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00c      	beq.n	800ec34 <xQueueGiveFromISR+0x50>
	__asm volatile
 800ec1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1e:	b672      	cpsid	i
 800ec20:	f383 8811 	msr	BASEPRI, r3
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	f3bf 8f4f 	dsb	sy
 800ec2c:	b662      	cpsie	i
 800ec2e:	61fb      	str	r3, [r7, #28]
}
 800ec30:	bf00      	nop
 800ec32:	e7fe      	b.n	800ec32 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ec34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d103      	bne.n	800ec44 <xQueueGiveFromISR+0x60>
 800ec3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d101      	bne.n	800ec48 <xQueueGiveFromISR+0x64>
 800ec44:	2301      	movs	r3, #1
 800ec46:	e000      	b.n	800ec4a <xQueueGiveFromISR+0x66>
 800ec48:	2300      	movs	r3, #0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d10c      	bne.n	800ec68 <xQueueGiveFromISR+0x84>
	__asm volatile
 800ec4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec52:	b672      	cpsid	i
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	b662      	cpsie	i
 800ec62:	61bb      	str	r3, [r7, #24]
}
 800ec64:	bf00      	nop
 800ec66:	e7fe      	b.n	800ec66 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec68:	f002 fbd8 	bl	801141c <vPortValidateInterruptPriority>
	__asm volatile
 800ec6c:	f3ef 8211 	mrs	r2, BASEPRI
 800ec70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec74:	b672      	cpsid	i
 800ec76:	f383 8811 	msr	BASEPRI, r3
 800ec7a:	f3bf 8f6f 	isb	sy
 800ec7e:	f3bf 8f4f 	dsb	sy
 800ec82:	b662      	cpsie	i
 800ec84:	617a      	str	r2, [r7, #20]
 800ec86:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ec88:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec90:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d22b      	bcs.n	800ecf4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ec9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca8:	1c5a      	adds	r2, r3, #1
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecac:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ecae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecb6:	d112      	bne.n	800ecde <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ecb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d016      	beq.n	800ecee <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	3324      	adds	r3, #36	; 0x24
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f001 fa97 	bl	80101f8 <xTaskRemoveFromEventList>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d00e      	beq.n	800ecee <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00b      	beq.n	800ecee <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	e007      	b.n	800ecee <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ecde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ece2:	3301      	adds	r3, #1
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	b25a      	sxtb	r2, r3
 800ece8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	637b      	str	r3, [r7, #52]	; 0x34
 800ecf2:	e001      	b.n	800ecf8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	637b      	str	r3, [r7, #52]	; 0x34
 800ecf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f383 8811 	msr	BASEPRI, r3
}
 800ed02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3738      	adds	r7, #56	; 0x38
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
	...

0800ed10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b08c      	sub	sp, #48	; 0x30
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ed24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d10c      	bne.n	800ed44 <xQueueReceive+0x34>
	__asm volatile
 800ed2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2e:	b672      	cpsid	i
 800ed30:	f383 8811 	msr	BASEPRI, r3
 800ed34:	f3bf 8f6f 	isb	sy
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	b662      	cpsie	i
 800ed3e:	623b      	str	r3, [r7, #32]
}
 800ed40:	bf00      	nop
 800ed42:	e7fe      	b.n	800ed42 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d103      	bne.n	800ed52 <xQueueReceive+0x42>
 800ed4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d101      	bne.n	800ed56 <xQueueReceive+0x46>
 800ed52:	2301      	movs	r3, #1
 800ed54:	e000      	b.n	800ed58 <xQueueReceive+0x48>
 800ed56:	2300      	movs	r3, #0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10c      	bne.n	800ed76 <xQueueReceive+0x66>
	__asm volatile
 800ed5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed60:	b672      	cpsid	i
 800ed62:	f383 8811 	msr	BASEPRI, r3
 800ed66:	f3bf 8f6f 	isb	sy
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	b662      	cpsie	i
 800ed70:	61fb      	str	r3, [r7, #28]
}
 800ed72:	bf00      	nop
 800ed74:	e7fe      	b.n	800ed74 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed76:	f001 fc19 	bl	80105ac <xTaskGetSchedulerState>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d102      	bne.n	800ed86 <xQueueReceive+0x76>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d101      	bne.n	800ed8a <xQueueReceive+0x7a>
 800ed86:	2301      	movs	r3, #1
 800ed88:	e000      	b.n	800ed8c <xQueueReceive+0x7c>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d10c      	bne.n	800edaa <xQueueReceive+0x9a>
	__asm volatile
 800ed90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed94:	b672      	cpsid	i
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	b662      	cpsie	i
 800eda4:	61bb      	str	r3, [r7, #24]
}
 800eda6:	bf00      	nop
 800eda8:	e7fe      	b.n	800eda8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800edaa:	f002 fa4f 	bl	801124c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800edb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d01f      	beq.n	800edfa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800edba:	68b9      	ldr	r1, [r7, #8]
 800edbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edbe:	f000 fb0e 	bl	800f3de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800edc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc4:	1e5a      	subs	r2, r3, #1
 800edc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edcc:	691b      	ldr	r3, [r3, #16]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d00f      	beq.n	800edf2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd4:	3310      	adds	r3, #16
 800edd6:	4618      	mov	r0, r3
 800edd8:	f001 fa0e 	bl	80101f8 <xTaskRemoveFromEventList>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d007      	beq.n	800edf2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ede2:	4b3d      	ldr	r3, [pc, #244]	; (800eed8 <xQueueReceive+0x1c8>)
 800ede4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ede8:	601a      	str	r2, [r3, #0]
 800edea:	f3bf 8f4f 	dsb	sy
 800edee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800edf2:	f002 fa5f 	bl	80112b4 <vPortExitCritical>
				return pdPASS;
 800edf6:	2301      	movs	r3, #1
 800edf8:	e069      	b.n	800eece <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d103      	bne.n	800ee08 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee00:	f002 fa58 	bl	80112b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ee04:	2300      	movs	r3, #0
 800ee06:	e062      	b.n	800eece <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d106      	bne.n	800ee1c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee0e:	f107 0310 	add.w	r3, r7, #16
 800ee12:	4618      	mov	r0, r3
 800ee14:	f001 fa56 	bl	80102c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee1c:	f002 fa4a 	bl	80112b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee20:	f000 ff88 	bl	800fd34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee24:	f002 fa12 	bl	801124c <vPortEnterCritical>
 800ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee2e:	b25b      	sxtb	r3, r3
 800ee30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee34:	d103      	bne.n	800ee3e <xQueueReceive+0x12e>
 800ee36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee44:	b25b      	sxtb	r3, r3
 800ee46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee4a:	d103      	bne.n	800ee54 <xQueueReceive+0x144>
 800ee4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4e:	2200      	movs	r2, #0
 800ee50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee54:	f002 fa2e 	bl	80112b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee58:	1d3a      	adds	r2, r7, #4
 800ee5a:	f107 0310 	add.w	r3, r7, #16
 800ee5e:	4611      	mov	r1, r2
 800ee60:	4618      	mov	r0, r3
 800ee62:	f001 fa45 	bl	80102f0 <xTaskCheckForTimeOut>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d123      	bne.n	800eeb4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee6e:	f000 fb2e 	bl	800f4ce <prvIsQueueEmpty>
 800ee72:	4603      	mov	r3, r0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d017      	beq.n	800eea8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	3324      	adds	r3, #36	; 0x24
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	4611      	mov	r1, r2
 800ee80:	4618      	mov	r0, r3
 800ee82:	f001 f965 	bl	8010150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ee86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee88:	f000 facf 	bl	800f42a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ee8c:	f000 ff60 	bl	800fd50 <xTaskResumeAll>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d189      	bne.n	800edaa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ee96:	4b10      	ldr	r3, [pc, #64]	; (800eed8 <xQueueReceive+0x1c8>)
 800ee98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee9c:	601a      	str	r2, [r3, #0]
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	f3bf 8f6f 	isb	sy
 800eea6:	e780      	b.n	800edaa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeaa:	f000 fabe 	bl	800f42a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eeae:	f000 ff4f 	bl	800fd50 <xTaskResumeAll>
 800eeb2:	e77a      	b.n	800edaa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eeb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeb6:	f000 fab8 	bl	800f42a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eeba:	f000 ff49 	bl	800fd50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec0:	f000 fb05 	bl	800f4ce <prvIsQueueEmpty>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f43f af6f 	beq.w	800edaa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eecc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3730      	adds	r7, #48	; 0x30
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	e000ed04 	.word	0xe000ed04

0800eedc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08e      	sub	sp, #56	; 0x38
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800eee6:	2300      	movs	r3, #0
 800eee8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800eeee:	2300      	movs	r3, #0
 800eef0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d10c      	bne.n	800ef12 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800eef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefc:	b672      	cpsid	i
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	b662      	cpsie	i
 800ef0c:	623b      	str	r3, [r7, #32]
}
 800ef0e:	bf00      	nop
 800ef10:	e7fe      	b.n	800ef10 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00c      	beq.n	800ef34 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ef1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1e:	b672      	cpsid	i
 800ef20:	f383 8811 	msr	BASEPRI, r3
 800ef24:	f3bf 8f6f 	isb	sy
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	b662      	cpsie	i
 800ef2e:	61fb      	str	r3, [r7, #28]
}
 800ef30:	bf00      	nop
 800ef32:	e7fe      	b.n	800ef32 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef34:	f001 fb3a 	bl	80105ac <xTaskGetSchedulerState>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d102      	bne.n	800ef44 <xQueueSemaphoreTake+0x68>
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d101      	bne.n	800ef48 <xQueueSemaphoreTake+0x6c>
 800ef44:	2301      	movs	r3, #1
 800ef46:	e000      	b.n	800ef4a <xQueueSemaphoreTake+0x6e>
 800ef48:	2300      	movs	r3, #0
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d10c      	bne.n	800ef68 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ef4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef52:	b672      	cpsid	i
 800ef54:	f383 8811 	msr	BASEPRI, r3
 800ef58:	f3bf 8f6f 	isb	sy
 800ef5c:	f3bf 8f4f 	dsb	sy
 800ef60:	b662      	cpsie	i
 800ef62:	61bb      	str	r3, [r7, #24]
}
 800ef64:	bf00      	nop
 800ef66:	e7fe      	b.n	800ef66 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef68:	f002 f970 	bl	801124c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ef6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ef72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d024      	beq.n	800efc2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ef78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7a:	1e5a      	subs	r2, r3, #1
 800ef7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d104      	bne.n	800ef92 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ef88:	f001 fc8e 	bl	80108a8 <pvTaskIncrementMutexHeldCount>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef94:	691b      	ldr	r3, [r3, #16]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00f      	beq.n	800efba <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	3310      	adds	r3, #16
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f001 f92a 	bl	80101f8 <xTaskRemoveFromEventList>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d007      	beq.n	800efba <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800efaa:	4b55      	ldr	r3, [pc, #340]	; (800f100 <xQueueSemaphoreTake+0x224>)
 800efac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efb0:	601a      	str	r2, [r3, #0]
 800efb2:	f3bf 8f4f 	dsb	sy
 800efb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800efba:	f002 f97b 	bl	80112b4 <vPortExitCritical>
				return pdPASS;
 800efbe:	2301      	movs	r3, #1
 800efc0:	e099      	b.n	800f0f6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d113      	bne.n	800eff0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800efc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00c      	beq.n	800efe8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800efce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd2:	b672      	cpsid	i
 800efd4:	f383 8811 	msr	BASEPRI, r3
 800efd8:	f3bf 8f6f 	isb	sy
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	b662      	cpsie	i
 800efe2:	617b      	str	r3, [r7, #20]
}
 800efe4:	bf00      	nop
 800efe6:	e7fe      	b.n	800efe6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800efe8:	f002 f964 	bl	80112b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800efec:	2300      	movs	r3, #0
 800efee:	e082      	b.n	800f0f6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d106      	bne.n	800f004 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eff6:	f107 030c 	add.w	r3, r7, #12
 800effa:	4618      	mov	r0, r3
 800effc:	f001 f962 	bl	80102c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f000:	2301      	movs	r3, #1
 800f002:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f004:	f002 f956 	bl	80112b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f008:	f000 fe94 	bl	800fd34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f00c:	f002 f91e 	bl	801124c <vPortEnterCritical>
 800f010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f016:	b25b      	sxtb	r3, r3
 800f018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f01c:	d103      	bne.n	800f026 <xQueueSemaphoreTake+0x14a>
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	2200      	movs	r2, #0
 800f022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f02c:	b25b      	sxtb	r3, r3
 800f02e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f032:	d103      	bne.n	800f03c <xQueueSemaphoreTake+0x160>
 800f034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f036:	2200      	movs	r2, #0
 800f038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f03c:	f002 f93a 	bl	80112b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f040:	463a      	mov	r2, r7
 800f042:	f107 030c 	add.w	r3, r7, #12
 800f046:	4611      	mov	r1, r2
 800f048:	4618      	mov	r0, r3
 800f04a:	f001 f951 	bl	80102f0 <xTaskCheckForTimeOut>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	d132      	bne.n	800f0ba <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f056:	f000 fa3a 	bl	800f4ce <prvIsQueueEmpty>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d026      	beq.n	800f0ae <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d109      	bne.n	800f07c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800f068:	f002 f8f0 	bl	801124c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	4618      	mov	r0, r3
 800f072:	f001 fab9 	bl	80105e8 <xTaskPriorityInherit>
 800f076:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f078:	f002 f91c 	bl	80112b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07e:	3324      	adds	r3, #36	; 0x24
 800f080:	683a      	ldr	r2, [r7, #0]
 800f082:	4611      	mov	r1, r2
 800f084:	4618      	mov	r0, r3
 800f086:	f001 f863 	bl	8010150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f08a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f08c:	f000 f9cd 	bl	800f42a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f090:	f000 fe5e 	bl	800fd50 <xTaskResumeAll>
 800f094:	4603      	mov	r3, r0
 800f096:	2b00      	cmp	r3, #0
 800f098:	f47f af66 	bne.w	800ef68 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800f09c:	4b18      	ldr	r3, [pc, #96]	; (800f100 <xQueueSemaphoreTake+0x224>)
 800f09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0a2:	601a      	str	r2, [r3, #0]
 800f0a4:	f3bf 8f4f 	dsb	sy
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	e75c      	b.n	800ef68 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f0ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0b0:	f000 f9bb 	bl	800f42a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0b4:	f000 fe4c 	bl	800fd50 <xTaskResumeAll>
 800f0b8:	e756      	b.n	800ef68 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f0ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0bc:	f000 f9b5 	bl	800f42a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0c0:	f000 fe46 	bl	800fd50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0c6:	f000 fa02 	bl	800f4ce <prvIsQueueEmpty>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	f43f af4b 	beq.w	800ef68 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d00d      	beq.n	800f0f4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800f0d8:	f002 f8b8 	bl	801124c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f0dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0de:	f000 f8fc 	bl	800f2da <prvGetDisinheritPriorityAfterTimeout>
 800f0e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f001 fb56 	bl	801079c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f0f0:	f002 f8e0 	bl	80112b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f0f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3738      	adds	r7, #56	; 0x38
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	e000ed04 	.word	0xe000ed04

0800f104 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b08e      	sub	sp, #56	; 0x38
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10c      	bne.n	800f134 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800f11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11e:	b672      	cpsid	i
 800f120:	f383 8811 	msr	BASEPRI, r3
 800f124:	f3bf 8f6f 	isb	sy
 800f128:	f3bf 8f4f 	dsb	sy
 800f12c:	b662      	cpsie	i
 800f12e:	623b      	str	r3, [r7, #32]
}
 800f130:	bf00      	nop
 800f132:	e7fe      	b.n	800f132 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d103      	bne.n	800f142 <xQueueReceiveFromISR+0x3e>
 800f13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d101      	bne.n	800f146 <xQueueReceiveFromISR+0x42>
 800f142:	2301      	movs	r3, #1
 800f144:	e000      	b.n	800f148 <xQueueReceiveFromISR+0x44>
 800f146:	2300      	movs	r3, #0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10c      	bne.n	800f166 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800f14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f150:	b672      	cpsid	i
 800f152:	f383 8811 	msr	BASEPRI, r3
 800f156:	f3bf 8f6f 	isb	sy
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	b662      	cpsie	i
 800f160:	61fb      	str	r3, [r7, #28]
}
 800f162:	bf00      	nop
 800f164:	e7fe      	b.n	800f164 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f166:	f002 f959 	bl	801141c <vPortValidateInterruptPriority>
	__asm volatile
 800f16a:	f3ef 8211 	mrs	r2, BASEPRI
 800f16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f172:	b672      	cpsid	i
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	b662      	cpsie	i
 800f182:	61ba      	str	r2, [r7, #24]
 800f184:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f186:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f188:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f18e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f192:	2b00      	cmp	r3, #0
 800f194:	d02f      	beq.n	800f1f6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1a0:	68b9      	ldr	r1, [r7, #8]
 800f1a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1a4:	f000 f91b 	bl	800f3de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1aa:	1e5a      	subs	r2, r3, #1
 800f1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f1b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f1b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1b8:	d112      	bne.n	800f1e0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d016      	beq.n	800f1f0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c4:	3310      	adds	r3, #16
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f001 f816 	bl	80101f8 <xTaskRemoveFromEventList>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00e      	beq.n	800f1f0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00b      	beq.n	800f1f0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	601a      	str	r2, [r3, #0]
 800f1de:	e007      	b.n	800f1f0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	b25a      	sxtb	r2, r3
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f1f4:	e001      	b.n	800f1fa <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	637b      	str	r3, [r7, #52]	; 0x34
 800f1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	f383 8811 	msr	BASEPRI, r3
}
 800f204:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3738      	adds	r7, #56	; 0x38
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d10c      	bne.n	800f238 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800f21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f222:	b672      	cpsid	i
 800f224:	f383 8811 	msr	BASEPRI, r3
 800f228:	f3bf 8f6f 	isb	sy
 800f22c:	f3bf 8f4f 	dsb	sy
 800f230:	b662      	cpsie	i
 800f232:	60bb      	str	r3, [r7, #8]
}
 800f234:	bf00      	nop
 800f236:	e7fe      	b.n	800f236 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800f238:	f002 f808 	bl	801124c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f240:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800f242:	f002 f837 	bl	80112b4 <vPortExitCritical>

	return uxReturn;
 800f246:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f248:	4618      	mov	r0, r3
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800f250:	b480      	push	{r7}
 800f252:	b087      	sub	sp, #28
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d10c      	bne.n	800f27c <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800f262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f266:	b672      	cpsid	i
 800f268:	f383 8811 	msr	BASEPRI, r3
 800f26c:	f3bf 8f6f 	isb	sy
 800f270:	f3bf 8f4f 	dsb	sy
 800f274:	b662      	cpsie	i
 800f276:	60fb      	str	r3, [r7, #12]
}
 800f278:	bf00      	nop
 800f27a:	e7fe      	b.n	800f27a <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f280:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800f282:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f284:	4618      	mov	r0, r3
 800f286:	371c      	adds	r7, #28
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d10c      	bne.n	800f2bc <vQueueDelete+0x2c>
	__asm volatile
 800f2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a6:	b672      	cpsid	i
 800f2a8:	f383 8811 	msr	BASEPRI, r3
 800f2ac:	f3bf 8f6f 	isb	sy
 800f2b0:	f3bf 8f4f 	dsb	sy
 800f2b4:	b662      	cpsie	i
 800f2b6:	60bb      	str	r3, [r7, #8]
}
 800f2b8:	bf00      	nop
 800f2ba:	e7fe      	b.n	800f2ba <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f000 f95f 	bl	800f580 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d102      	bne.n	800f2d2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f002 f9b3 	bl	8011638 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f2d2:	bf00      	nop
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f2da:	b480      	push	{r7}
 800f2dc:	b085      	sub	sp, #20
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d006      	beq.n	800f2f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f2f4:	60fb      	str	r3, [r7, #12]
 800f2f6:	e001      	b.n	800f2fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
	}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr

0800f30a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f30a:	b580      	push	{r7, lr}
 800f30c:	b086      	sub	sp, #24
 800f30e:	af00      	add	r7, sp, #0
 800f310:	60f8      	str	r0, [r7, #12]
 800f312:	60b9      	str	r1, [r7, #8]
 800f314:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f316:	2300      	movs	r3, #0
 800f318:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f31e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f324:	2b00      	cmp	r3, #0
 800f326:	d10d      	bne.n	800f344 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d14d      	bne.n	800f3cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	4618      	mov	r0, r3
 800f336:	f001 f9bf 	bl	80106b8 <xTaskPriorityDisinherit>
 800f33a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2200      	movs	r2, #0
 800f340:	609a      	str	r2, [r3, #8]
 800f342:	e043      	b.n	800f3cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d119      	bne.n	800f37e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	6858      	ldr	r0, [r3, #4]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f352:	461a      	mov	r2, r3
 800f354:	68b9      	ldr	r1, [r7, #8]
 800f356:	f014 fb1c 	bl	8023992 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	685a      	ldr	r2, [r3, #4]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f362:	441a      	add	r2, r3
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	685a      	ldr	r2, [r3, #4]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	429a      	cmp	r2, r3
 800f372:	d32b      	bcc.n	800f3cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	605a      	str	r2, [r3, #4]
 800f37c:	e026      	b.n	800f3cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	68d8      	ldr	r0, [r3, #12]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f386:	461a      	mov	r2, r3
 800f388:	68b9      	ldr	r1, [r7, #8]
 800f38a:	f014 fb02 	bl	8023992 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	68da      	ldr	r2, [r3, #12]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f396:	425b      	negs	r3, r3
 800f398:	441a      	add	r2, r3
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	68da      	ldr	r2, [r3, #12]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d207      	bcs.n	800f3ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	689a      	ldr	r2, [r3, #8]
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b2:	425b      	negs	r3, r3
 800f3b4:	441a      	add	r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b02      	cmp	r3, #2
 800f3be:	d105      	bne.n	800f3cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d002      	beq.n	800f3cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	3b01      	subs	r3, #1
 800f3ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	1c5a      	adds	r2, r3, #1
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f3d4:	697b      	ldr	r3, [r7, #20]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3718      	adds	r7, #24
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}

0800f3de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b082      	sub	sp, #8
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
 800f3e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d018      	beq.n	800f422 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	68da      	ldr	r2, [r3, #12]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3f8:	441a      	add	r2, r3
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	68da      	ldr	r2, [r3, #12]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	429a      	cmp	r2, r3
 800f408:	d303      	bcc.n	800f412 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	68d9      	ldr	r1, [r3, #12]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f41a:	461a      	mov	r2, r3
 800f41c:	6838      	ldr	r0, [r7, #0]
 800f41e:	f014 fab8 	bl	8023992 <memcpy>
	}
}
 800f422:	bf00      	nop
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b084      	sub	sp, #16
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f432:	f001 ff0b 	bl	801124c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f43c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f43e:	e011      	b.n	800f464 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f444:	2b00      	cmp	r3, #0
 800f446:	d012      	beq.n	800f46e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	3324      	adds	r3, #36	; 0x24
 800f44c:	4618      	mov	r0, r3
 800f44e:	f000 fed3 	bl	80101f8 <xTaskRemoveFromEventList>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d001      	beq.n	800f45c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f458:	f000 ffb0 	bl	80103bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f45c:	7bfb      	ldrb	r3, [r7, #15]
 800f45e:	3b01      	subs	r3, #1
 800f460:	b2db      	uxtb	r3, r3
 800f462:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	dce9      	bgt.n	800f440 <prvUnlockQueue+0x16>
 800f46c:	e000      	b.n	800f470 <prvUnlockQueue+0x46>
					break;
 800f46e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	22ff      	movs	r2, #255	; 0xff
 800f474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f478:	f001 ff1c 	bl	80112b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f47c:	f001 fee6 	bl	801124c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f486:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f488:	e011      	b.n	800f4ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	691b      	ldr	r3, [r3, #16]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d012      	beq.n	800f4b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	3310      	adds	r3, #16
 800f496:	4618      	mov	r0, r3
 800f498:	f000 feae 	bl	80101f8 <xTaskRemoveFromEventList>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d001      	beq.n	800f4a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f4a2:	f000 ff8b 	bl	80103bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f4a6:	7bbb      	ldrb	r3, [r7, #14]
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	dce9      	bgt.n	800f48a <prvUnlockQueue+0x60>
 800f4b6:	e000      	b.n	800f4ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	22ff      	movs	r2, #255	; 0xff
 800f4be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4c2:	f001 fef7 	bl	80112b4 <vPortExitCritical>
}
 800f4c6:	bf00      	nop
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b084      	sub	sp, #16
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4d6:	f001 feb9 	bl	801124c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d102      	bne.n	800f4e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	60fb      	str	r3, [r7, #12]
 800f4e6:	e001      	b.n	800f4ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4ec:	f001 fee2 	bl	80112b4 <vPortExitCritical>

	return xReturn;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b084      	sub	sp, #16
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f502:	f001 fea3 	bl	801124c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f50e:	429a      	cmp	r2, r3
 800f510:	d102      	bne.n	800f518 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f512:	2301      	movs	r3, #1
 800f514:	60fb      	str	r3, [r7, #12]
 800f516:	e001      	b.n	800f51c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f518:	2300      	movs	r3, #0
 800f51a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f51c:	f001 feca 	bl	80112b4 <vPortExitCritical>

	return xReturn;
 800f520:	68fb      	ldr	r3, [r7, #12]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
	...

0800f52c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f52c:	b480      	push	{r7}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f536:	2300      	movs	r3, #0
 800f538:	60fb      	str	r3, [r7, #12]
 800f53a:	e014      	b.n	800f566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f53c:	4a0f      	ldr	r2, [pc, #60]	; (800f57c <vQueueAddToRegistry+0x50>)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d10b      	bne.n	800f560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f548:	490c      	ldr	r1, [pc, #48]	; (800f57c <vQueueAddToRegistry+0x50>)
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	683a      	ldr	r2, [r7, #0]
 800f54e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f552:	4a0a      	ldr	r2, [pc, #40]	; (800f57c <vQueueAddToRegistry+0x50>)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	00db      	lsls	r3, r3, #3
 800f558:	4413      	add	r3, r2
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f55e:	e006      	b.n	800f56e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3301      	adds	r3, #1
 800f564:	60fb      	str	r3, [r7, #12]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2b07      	cmp	r3, #7
 800f56a:	d9e7      	bls.n	800f53c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f56c:	bf00      	nop
 800f56e:	bf00      	nop
 800f570:	3714      	adds	r7, #20
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop
 800f57c:	20007e40 	.word	0x20007e40

0800f580 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f580:	b480      	push	{r7}
 800f582:	b085      	sub	sp, #20
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f588:	2300      	movs	r3, #0
 800f58a:	60fb      	str	r3, [r7, #12]
 800f58c:	e016      	b.n	800f5bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f58e:	4a10      	ldr	r2, [pc, #64]	; (800f5d0 <vQueueUnregisterQueue+0x50>)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	00db      	lsls	r3, r3, #3
 800f594:	4413      	add	r3, r2
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d10b      	bne.n	800f5b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f59e:	4a0c      	ldr	r2, [pc, #48]	; (800f5d0 <vQueueUnregisterQueue+0x50>)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2100      	movs	r1, #0
 800f5a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f5a8:	4a09      	ldr	r2, [pc, #36]	; (800f5d0 <vQueueUnregisterQueue+0x50>)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	00db      	lsls	r3, r3, #3
 800f5ae:	4413      	add	r3, r2
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	605a      	str	r2, [r3, #4]
				break;
 800f5b4:	e006      	b.n	800f5c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	60fb      	str	r3, [r7, #12]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2b07      	cmp	r3, #7
 800f5c0:	d9e5      	bls.n	800f58e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f5c2:	bf00      	nop
 800f5c4:	bf00      	nop
 800f5c6:	3714      	adds	r7, #20
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr
 800f5d0:	20007e40 	.word	0x20007e40

0800f5d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f5e4:	f001 fe32 	bl	801124c <vPortEnterCritical>
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5ee:	b25b      	sxtb	r3, r3
 800f5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5f4:	d103      	bne.n	800f5fe <vQueueWaitForMessageRestricted+0x2a>
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f604:	b25b      	sxtb	r3, r3
 800f606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f60a:	d103      	bne.n	800f614 <vQueueWaitForMessageRestricted+0x40>
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	2200      	movs	r2, #0
 800f610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f614:	f001 fe4e 	bl	80112b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d106      	bne.n	800f62e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	3324      	adds	r3, #36	; 0x24
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	68b9      	ldr	r1, [r7, #8]
 800f628:	4618      	mov	r0, r3
 800f62a:	f000 fdb7 	bl	801019c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f62e:	6978      	ldr	r0, [r7, #20]
 800f630:	f7ff fefb 	bl	800f42a <prvUnlockQueue>
	}
 800f634:	bf00      	nop
 800f636:	3718      	adds	r7, #24
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b08e      	sub	sp, #56	; 0x38
 800f640:	af04      	add	r7, sp, #16
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
 800f648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d10c      	bne.n	800f66a <xTaskCreateStatic+0x2e>
	__asm volatile
 800f650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f654:	b672      	cpsid	i
 800f656:	f383 8811 	msr	BASEPRI, r3
 800f65a:	f3bf 8f6f 	isb	sy
 800f65e:	f3bf 8f4f 	dsb	sy
 800f662:	b662      	cpsie	i
 800f664:	623b      	str	r3, [r7, #32]
}
 800f666:	bf00      	nop
 800f668:	e7fe      	b.n	800f668 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10c      	bne.n	800f68a <xTaskCreateStatic+0x4e>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f674:	b672      	cpsid	i
 800f676:	f383 8811 	msr	BASEPRI, r3
 800f67a:	f3bf 8f6f 	isb	sy
 800f67e:	f3bf 8f4f 	dsb	sy
 800f682:	b662      	cpsie	i
 800f684:	61fb      	str	r3, [r7, #28]
}
 800f686:	bf00      	nop
 800f688:	e7fe      	b.n	800f688 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f68a:	23c0      	movs	r3, #192	; 0xc0
 800f68c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	2bc0      	cmp	r3, #192	; 0xc0
 800f692:	d00c      	beq.n	800f6ae <xTaskCreateStatic+0x72>
	__asm volatile
 800f694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f698:	b672      	cpsid	i
 800f69a:	f383 8811 	msr	BASEPRI, r3
 800f69e:	f3bf 8f6f 	isb	sy
 800f6a2:	f3bf 8f4f 	dsb	sy
 800f6a6:	b662      	cpsie	i
 800f6a8:	61bb      	str	r3, [r7, #24]
}
 800f6aa:	bf00      	nop
 800f6ac:	e7fe      	b.n	800f6ac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f6ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d01e      	beq.n	800f6f4 <xTaskCreateStatic+0xb8>
 800f6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d01b      	beq.n	800f6f4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c8:	2202      	movs	r2, #2
 800f6ca:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	9303      	str	r3, [sp, #12]
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d4:	9302      	str	r3, [sp, #8]
 800f6d6:	f107 0314 	add.w	r3, r7, #20
 800f6da:	9301      	str	r3, [sp, #4]
 800f6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	68b9      	ldr	r1, [r7, #8]
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f000 f850 	bl	800f78c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6ee:	f000 f8f9 	bl	800f8e4 <prvAddNewTaskToReadyList>
 800f6f2:	e001      	b.n	800f6f8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f6f8:	697b      	ldr	r3, [r7, #20]
	}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3728      	adds	r7, #40	; 0x28
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f702:	b580      	push	{r7, lr}
 800f704:	b08c      	sub	sp, #48	; 0x30
 800f706:	af04      	add	r7, sp, #16
 800f708:	60f8      	str	r0, [r7, #12]
 800f70a:	60b9      	str	r1, [r7, #8]
 800f70c:	603b      	str	r3, [r7, #0]
 800f70e:	4613      	mov	r3, r2
 800f710:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f712:	88fb      	ldrh	r3, [r7, #6]
 800f714:	009b      	lsls	r3, r3, #2
 800f716:	4618      	mov	r0, r3
 800f718:	f001 fec4 	bl	80114a4 <pvPortMalloc>
 800f71c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00e      	beq.n	800f742 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f724:	20c0      	movs	r0, #192	; 0xc0
 800f726:	f001 febd 	bl	80114a4 <pvPortMalloc>
 800f72a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d003      	beq.n	800f73a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	631a      	str	r2, [r3, #48]	; 0x30
 800f738:	e005      	b.n	800f746 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f73a:	6978      	ldr	r0, [r7, #20]
 800f73c:	f001 ff7c 	bl	8011638 <vPortFree>
 800f740:	e001      	b.n	800f746 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f742:	2300      	movs	r3, #0
 800f744:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d017      	beq.n	800f77c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	2200      	movs	r2, #0
 800f750:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f754:	88fa      	ldrh	r2, [r7, #6]
 800f756:	2300      	movs	r3, #0
 800f758:	9303      	str	r3, [sp, #12]
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	9302      	str	r3, [sp, #8]
 800f75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f760:	9301      	str	r3, [sp, #4]
 800f762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f764:	9300      	str	r3, [sp, #0]
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	68b9      	ldr	r1, [r7, #8]
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f000 f80e 	bl	800f78c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f770:	69f8      	ldr	r0, [r7, #28]
 800f772:	f000 f8b7 	bl	800f8e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f776:	2301      	movs	r3, #1
 800f778:	61bb      	str	r3, [r7, #24]
 800f77a:	e002      	b.n	800f782 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f77c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f780:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f782:	69bb      	ldr	r3, [r7, #24]
	}
 800f784:	4618      	mov	r0, r3
 800f786:	3720      	adds	r7, #32
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b088      	sub	sp, #32
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
 800f798:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	21a5      	movs	r1, #165	; 0xa5
 800f7a6:	f014 f91c 	bl	80239e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7ae:	6879      	ldr	r1, [r7, #4]
 800f7b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f7b4:	440b      	add	r3, r1
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	4413      	add	r3, r2
 800f7ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	f023 0307 	bic.w	r3, r3, #7
 800f7c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f7c4:	69bb      	ldr	r3, [r7, #24]
 800f7c6:	f003 0307 	and.w	r3, r3, #7
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00c      	beq.n	800f7e8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d2:	b672      	cpsid	i
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	b662      	cpsie	i
 800f7e2:	617b      	str	r3, [r7, #20]
}
 800f7e4:	bf00      	nop
 800f7e6:	e7fe      	b.n	800f7e6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d01f      	beq.n	800f82e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	61fb      	str	r3, [r7, #28]
 800f7f2:	e012      	b.n	800f81a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7f4:	68ba      	ldr	r2, [r7, #8]
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	7819      	ldrb	r1, [r3, #0]
 800f7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	4413      	add	r3, r2
 800f802:	3334      	adds	r3, #52	; 0x34
 800f804:	460a      	mov	r2, r1
 800f806:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	4413      	add	r3, r2
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d006      	beq.n	800f822 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	3301      	adds	r3, #1
 800f818:	61fb      	str	r3, [r7, #28]
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	2b0f      	cmp	r3, #15
 800f81e:	d9e9      	bls.n	800f7f4 <prvInitialiseNewTask+0x68>
 800f820:	e000      	b.n	800f824 <prvInitialiseNewTask+0x98>
			{
				break;
 800f822:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f826:	2200      	movs	r2, #0
 800f828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f82c:	e003      	b.n	800f836 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f830:	2200      	movs	r2, #0
 800f832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f838:	2b37      	cmp	r3, #55	; 0x37
 800f83a:	d901      	bls.n	800f840 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f83c:	2337      	movs	r3, #55	; 0x37
 800f83e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f844:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f84a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84e:	2200      	movs	r2, #0
 800f850:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f854:	3304      	adds	r3, #4
 800f856:	4618      	mov	r0, r3
 800f858:	f7fe fd0c 	bl	800e274 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85e:	3318      	adds	r3, #24
 800f860:	4618      	mov	r0, r3
 800f862:	f7fe fd07 	bl	800e274 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f86a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f874:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f87a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87e:	2200      	movs	r2, #0
 800f880:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f884:	2200      	movs	r2, #0
 800f886:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88c:	2200      	movs	r2, #0
 800f88e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f894:	3358      	adds	r3, #88	; 0x58
 800f896:	2260      	movs	r2, #96	; 0x60
 800f898:	2100      	movs	r1, #0
 800f89a:	4618      	mov	r0, r3
 800f89c:	f014 f8a1 	bl	80239e2 <memset>
 800f8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a2:	4a0d      	ldr	r2, [pc, #52]	; (800f8d8 <prvInitialiseNewTask+0x14c>)
 800f8a4:	65da      	str	r2, [r3, #92]	; 0x5c
 800f8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a8:	4a0c      	ldr	r2, [pc, #48]	; (800f8dc <prvInitialiseNewTask+0x150>)
 800f8aa:	661a      	str	r2, [r3, #96]	; 0x60
 800f8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ae:	4a0c      	ldr	r2, [pc, #48]	; (800f8e0 <prvInitialiseNewTask+0x154>)
 800f8b0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f8b2:	683a      	ldr	r2, [r7, #0]
 800f8b4:	68f9      	ldr	r1, [r7, #12]
 800f8b6:	69b8      	ldr	r0, [r7, #24]
 800f8b8:	f001 fbba 	bl	8011030 <pxPortInitialiseStack>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d002      	beq.n	800f8ce <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8ce:	bf00      	nop
 800f8d0:	3720      	adds	r7, #32
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	0802d89c 	.word	0x0802d89c
 800f8dc:	0802d8bc 	.word	0x0802d8bc
 800f8e0:	0802d87c 	.word	0x0802d87c

0800f8e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f8ec:	f001 fcae 	bl	801124c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f8f0:	4b2d      	ldr	r3, [pc, #180]	; (800f9a8 <prvAddNewTaskToReadyList+0xc4>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	4a2c      	ldr	r2, [pc, #176]	; (800f9a8 <prvAddNewTaskToReadyList+0xc4>)
 800f8f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f8fa:	4b2c      	ldr	r3, [pc, #176]	; (800f9ac <prvAddNewTaskToReadyList+0xc8>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d109      	bne.n	800f916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f902:	4a2a      	ldr	r2, [pc, #168]	; (800f9ac <prvAddNewTaskToReadyList+0xc8>)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f908:	4b27      	ldr	r3, [pc, #156]	; (800f9a8 <prvAddNewTaskToReadyList+0xc4>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d110      	bne.n	800f932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f910:	f000 fd78 	bl	8010404 <prvInitialiseTaskLists>
 800f914:	e00d      	b.n	800f932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f916:	4b26      	ldr	r3, [pc, #152]	; (800f9b0 <prvAddNewTaskToReadyList+0xcc>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d109      	bne.n	800f932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f91e:	4b23      	ldr	r3, [pc, #140]	; (800f9ac <prvAddNewTaskToReadyList+0xc8>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f928:	429a      	cmp	r2, r3
 800f92a:	d802      	bhi.n	800f932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f92c:	4a1f      	ldr	r2, [pc, #124]	; (800f9ac <prvAddNewTaskToReadyList+0xc8>)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f932:	4b20      	ldr	r3, [pc, #128]	; (800f9b4 <prvAddNewTaskToReadyList+0xd0>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	3301      	adds	r3, #1
 800f938:	4a1e      	ldr	r2, [pc, #120]	; (800f9b4 <prvAddNewTaskToReadyList+0xd0>)
 800f93a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f93c:	4b1d      	ldr	r3, [pc, #116]	; (800f9b4 <prvAddNewTaskToReadyList+0xd0>)
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f948:	4b1b      	ldr	r3, [pc, #108]	; (800f9b8 <prvAddNewTaskToReadyList+0xd4>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d903      	bls.n	800f958 <prvAddNewTaskToReadyList+0x74>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f954:	4a18      	ldr	r2, [pc, #96]	; (800f9b8 <prvAddNewTaskToReadyList+0xd4>)
 800f956:	6013      	str	r3, [r2, #0]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f95c:	4613      	mov	r3, r2
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	4413      	add	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	4a15      	ldr	r2, [pc, #84]	; (800f9bc <prvAddNewTaskToReadyList+0xd8>)
 800f966:	441a      	add	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	3304      	adds	r3, #4
 800f96c:	4619      	mov	r1, r3
 800f96e:	4610      	mov	r0, r2
 800f970:	f7fe fc8d 	bl	800e28e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f974:	f001 fc9e 	bl	80112b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f978:	4b0d      	ldr	r3, [pc, #52]	; (800f9b0 <prvAddNewTaskToReadyList+0xcc>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d00e      	beq.n	800f99e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f980:	4b0a      	ldr	r3, [pc, #40]	; (800f9ac <prvAddNewTaskToReadyList+0xc8>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d207      	bcs.n	800f99e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f98e:	4b0c      	ldr	r3, [pc, #48]	; (800f9c0 <prvAddNewTaskToReadyList+0xdc>)
 800f990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f994:	601a      	str	r2, [r3, #0]
 800f996:	f3bf 8f4f 	dsb	sy
 800f99a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f99e:	bf00      	nop
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	20008354 	.word	0x20008354
 800f9ac:	20007e80 	.word	0x20007e80
 800f9b0:	20008360 	.word	0x20008360
 800f9b4:	20008370 	.word	0x20008370
 800f9b8:	2000835c 	.word	0x2000835c
 800f9bc:	20007e84 	.word	0x20007e84
 800f9c0:	e000ed04 	.word	0xe000ed04

0800f9c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d019      	beq.n	800fa0a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f9d6:	4b14      	ldr	r3, [pc, #80]	; (800fa28 <vTaskDelay+0x64>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00c      	beq.n	800f9f8 <vTaskDelay+0x34>
	__asm volatile
 800f9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e2:	b672      	cpsid	i
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	b662      	cpsie	i
 800f9f2:	60bb      	str	r3, [r7, #8]
}
 800f9f4:	bf00      	nop
 800f9f6:	e7fe      	b.n	800f9f6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f9f8:	f000 f99c 	bl	800fd34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 ff66 	bl	80108d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa04:	f000 f9a4 	bl	800fd50 <xTaskResumeAll>
 800fa08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d107      	bne.n	800fa20 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800fa10:	4b06      	ldr	r3, [pc, #24]	; (800fa2c <vTaskDelay+0x68>)
 800fa12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa16:	601a      	str	r2, [r3, #0]
 800fa18:	f3bf 8f4f 	dsb	sy
 800fa1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa20:	bf00      	nop
 800fa22:	3710      	adds	r7, #16
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	2000837c 	.word	0x2000837c
 800fa2c:	e000ed04 	.word	0xe000ed04

0800fa30 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fa38:	f001 fc08 	bl	801124c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d102      	bne.n	800fa48 <vTaskSuspend+0x18>
 800fa42:	4b31      	ldr	r3, [pc, #196]	; (800fb08 <vTaskSuspend+0xd8>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	e000      	b.n	800fa4a <vTaskSuspend+0x1a>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	3304      	adds	r3, #4
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7fe fc79 	bl	800e348 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d004      	beq.n	800fa68 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	3318      	adds	r3, #24
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fe fc70 	bl	800e348 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	3304      	adds	r3, #4
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	4827      	ldr	r0, [pc, #156]	; (800fb0c <vTaskSuspend+0xdc>)
 800fa70:	f7fe fc0d 	bl	800e28e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d103      	bne.n	800fa88 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2200      	movs	r2, #0
 800fa84:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800fa88:	f001 fc14 	bl	80112b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800fa8c:	4b20      	ldr	r3, [pc, #128]	; (800fb10 <vTaskSuspend+0xe0>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d005      	beq.n	800faa0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800fa94:	f001 fbda 	bl	801124c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800fa98:	f000 fd58 	bl	801054c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800fa9c:	f001 fc0a 	bl	80112b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800faa0:	4b19      	ldr	r3, [pc, #100]	; (800fb08 <vTaskSuspend+0xd8>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	68fa      	ldr	r2, [r7, #12]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d129      	bne.n	800fafe <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800faaa:	4b19      	ldr	r3, [pc, #100]	; (800fb10 <vTaskSuspend+0xe0>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d019      	beq.n	800fae6 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800fab2:	4b18      	ldr	r3, [pc, #96]	; (800fb14 <vTaskSuspend+0xe4>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00c      	beq.n	800fad4 <vTaskSuspend+0xa4>
	__asm volatile
 800faba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fabe:	b672      	cpsid	i
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	b662      	cpsie	i
 800face:	60bb      	str	r3, [r7, #8]
}
 800fad0:	bf00      	nop
 800fad2:	e7fe      	b.n	800fad2 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 800fad4:	4b10      	ldr	r3, [pc, #64]	; (800fb18 <vTaskSuspend+0xe8>)
 800fad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fada:	601a      	str	r2, [r3, #0]
 800fadc:	f3bf 8f4f 	dsb	sy
 800fae0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fae4:	e00b      	b.n	800fafe <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800fae6:	4b09      	ldr	r3, [pc, #36]	; (800fb0c <vTaskSuspend+0xdc>)
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	4b0c      	ldr	r3, [pc, #48]	; (800fb1c <vTaskSuspend+0xec>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	429a      	cmp	r2, r3
 800faf0:	d103      	bne.n	800fafa <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 800faf2:	4b05      	ldr	r3, [pc, #20]	; (800fb08 <vTaskSuspend+0xd8>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	601a      	str	r2, [r3, #0]
	}
 800faf8:	e001      	b.n	800fafe <vTaskSuspend+0xce>
					vTaskSwitchContext();
 800fafa:	f000 faa7 	bl	801004c <vTaskSwitchContext>
	}
 800fafe:	bf00      	nop
 800fb00:	3710      	adds	r7, #16
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	20007e80 	.word	0x20007e80
 800fb0c:	20008340 	.word	0x20008340
 800fb10:	20008360 	.word	0x20008360
 800fb14:	2000837c 	.word	0x2000837c
 800fb18:	e000ed04 	.word	0xe000ed04
 800fb1c:	20008354 	.word	0x20008354

0800fb20 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800fb20:	b480      	push	{r7}
 800fb22:	b087      	sub	sp, #28
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d10c      	bne.n	800fb50 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 800fb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3a:	b672      	cpsid	i
 800fb3c:	f383 8811 	msr	BASEPRI, r3
 800fb40:	f3bf 8f6f 	isb	sy
 800fb44:	f3bf 8f4f 	dsb	sy
 800fb48:	b662      	cpsie	i
 800fb4a:	60fb      	str	r3, [r7, #12]
}
 800fb4c:	bf00      	nop
 800fb4e:	e7fe      	b.n	800fb4e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	695b      	ldr	r3, [r3, #20]
 800fb54:	4a0a      	ldr	r2, [pc, #40]	; (800fb80 <prvTaskIsTaskSuspended+0x60>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d10a      	bne.n	800fb70 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb5e:	4a09      	ldr	r2, [pc, #36]	; (800fb84 <prvTaskIsTaskSuspended+0x64>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d005      	beq.n	800fb70 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d101      	bne.n	800fb70 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb70:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800fb72:	4618      	mov	r0, r3
 800fb74:	371c      	adds	r7, #28
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	20008340 	.word	0x20008340
 800fb84:	20008314 	.word	0x20008314

0800fb88 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d10c      	bne.n	800fbb4 <vTaskResume+0x2c>
	__asm volatile
 800fb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9e:	b672      	cpsid	i
 800fba0:	f383 8811 	msr	BASEPRI, r3
 800fba4:	f3bf 8f6f 	isb	sy
 800fba8:	f3bf 8f4f 	dsb	sy
 800fbac:	b662      	cpsie	i
 800fbae:	60bb      	str	r3, [r7, #8]
}
 800fbb0:	bf00      	nop
 800fbb2:	e7fe      	b.n	800fbb2 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800fbb4:	4b20      	ldr	r3, [pc, #128]	; (800fc38 <vTaskResume+0xb0>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d038      	beq.n	800fc30 <vTaskResume+0xa8>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d035      	beq.n	800fc30 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 800fbc4:	f001 fb42 	bl	801124c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	f7ff ffa9 	bl	800fb20 <prvTaskIsTaskSuspended>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d02b      	beq.n	800fc2c <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	3304      	adds	r3, #4
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fe fbb5 	bl	800e348 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbe2:	4b16      	ldr	r3, [pc, #88]	; (800fc3c <vTaskResume+0xb4>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d903      	bls.n	800fbf2 <vTaskResume+0x6a>
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbee:	4a13      	ldr	r2, [pc, #76]	; (800fc3c <vTaskResume+0xb4>)
 800fbf0:	6013      	str	r3, [r2, #0]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf6:	4613      	mov	r3, r2
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	4413      	add	r3, r2
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	4a10      	ldr	r2, [pc, #64]	; (800fc40 <vTaskResume+0xb8>)
 800fc00:	441a      	add	r2, r3
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3304      	adds	r3, #4
 800fc06:	4619      	mov	r1, r3
 800fc08:	4610      	mov	r0, r2
 800fc0a:	f7fe fb40 	bl	800e28e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc12:	4b09      	ldr	r3, [pc, #36]	; (800fc38 <vTaskResume+0xb0>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d307      	bcc.n	800fc2c <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800fc1c:	4b09      	ldr	r3, [pc, #36]	; (800fc44 <vTaskResume+0xbc>)
 800fc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc22:	601a      	str	r2, [r3, #0]
 800fc24:	f3bf 8f4f 	dsb	sy
 800fc28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800fc2c:	f001 fb42 	bl	80112b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc30:	bf00      	nop
 800fc32:	3710      	adds	r7, #16
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	20007e80 	.word	0x20007e80
 800fc3c:	2000835c 	.word	0x2000835c
 800fc40:	20007e84 	.word	0x20007e84
 800fc44:	e000ed04 	.word	0xe000ed04

0800fc48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b08a      	sub	sp, #40	; 0x28
 800fc4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fc52:	2300      	movs	r3, #0
 800fc54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fc56:	463a      	mov	r2, r7
 800fc58:	1d39      	adds	r1, r7, #4
 800fc5a:	f107 0308 	add.w	r3, r7, #8
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fe fab4 	bl	800e1cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fc64:	6839      	ldr	r1, [r7, #0]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	68ba      	ldr	r2, [r7, #8]
 800fc6a:	9202      	str	r2, [sp, #8]
 800fc6c:	9301      	str	r3, [sp, #4]
 800fc6e:	2300      	movs	r3, #0
 800fc70:	9300      	str	r3, [sp, #0]
 800fc72:	2300      	movs	r3, #0
 800fc74:	460a      	mov	r2, r1
 800fc76:	4927      	ldr	r1, [pc, #156]	; (800fd14 <vTaskStartScheduler+0xcc>)
 800fc78:	4827      	ldr	r0, [pc, #156]	; (800fd18 <vTaskStartScheduler+0xd0>)
 800fc7a:	f7ff fcdf 	bl	800f63c <xTaskCreateStatic>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	4a26      	ldr	r2, [pc, #152]	; (800fd1c <vTaskStartScheduler+0xd4>)
 800fc82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fc84:	4b25      	ldr	r3, [pc, #148]	; (800fd1c <vTaskStartScheduler+0xd4>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d002      	beq.n	800fc92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	617b      	str	r3, [r7, #20]
 800fc90:	e001      	b.n	800fc96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fc92:	2300      	movs	r3, #0
 800fc94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	d102      	bne.n	800fca2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fc9c:	f000 fe6c 	bl	8010978 <xTimerCreateTimerTask>
 800fca0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d11f      	bne.n	800fce8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800fca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcac:	b672      	cpsid	i
 800fcae:	f383 8811 	msr	BASEPRI, r3
 800fcb2:	f3bf 8f6f 	isb	sy
 800fcb6:	f3bf 8f4f 	dsb	sy
 800fcba:	b662      	cpsie	i
 800fcbc:	613b      	str	r3, [r7, #16]
}
 800fcbe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fcc0:	4b17      	ldr	r3, [pc, #92]	; (800fd20 <vTaskStartScheduler+0xd8>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	3358      	adds	r3, #88	; 0x58
 800fcc6:	4a17      	ldr	r2, [pc, #92]	; (800fd24 <vTaskStartScheduler+0xdc>)
 800fcc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fcca:	4b17      	ldr	r3, [pc, #92]	; (800fd28 <vTaskStartScheduler+0xe0>)
 800fccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fcd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fcd2:	4b16      	ldr	r3, [pc, #88]	; (800fd2c <vTaskStartScheduler+0xe4>)
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fcd8:	4b15      	ldr	r3, [pc, #84]	; (800fd30 <vTaskStartScheduler+0xe8>)
 800fcda:	2200      	movs	r2, #0
 800fcdc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800fcde:	f7f1 f9bb 	bl	8001058 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fce2:	f001 fa35 	bl	8011150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fce6:	e010      	b.n	800fd0a <vTaskStartScheduler+0xc2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcee:	d10c      	bne.n	800fd0a <vTaskStartScheduler+0xc2>
	__asm volatile
 800fcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf4:	b672      	cpsid	i
 800fcf6:	f383 8811 	msr	BASEPRI, r3
 800fcfa:	f3bf 8f6f 	isb	sy
 800fcfe:	f3bf 8f4f 	dsb	sy
 800fd02:	b662      	cpsie	i
 800fd04:	60fb      	str	r3, [r7, #12]
}
 800fd06:	bf00      	nop
 800fd08:	e7fe      	b.n	800fd08 <vTaskStartScheduler+0xc0>
}
 800fd0a:	bf00      	nop
 800fd0c:	3718      	adds	r7, #24
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	080296b0 	.word	0x080296b0
 800fd18:	080103d5 	.word	0x080103d5
 800fd1c:	20008378 	.word	0x20008378
 800fd20:	20007e80 	.word	0x20007e80
 800fd24:	200000fc 	.word	0x200000fc
 800fd28:	20008374 	.word	0x20008374
 800fd2c:	20008360 	.word	0x20008360
 800fd30:	20008358 	.word	0x20008358

0800fd34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fd34:	b480      	push	{r7}
 800fd36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fd38:	4b04      	ldr	r3, [pc, #16]	; (800fd4c <vTaskSuspendAll+0x18>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	4a03      	ldr	r2, [pc, #12]	; (800fd4c <vTaskSuspendAll+0x18>)
 800fd40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fd42:	bf00      	nop
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr
 800fd4c:	2000837c 	.word	0x2000837c

0800fd50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fd5e:	4b43      	ldr	r3, [pc, #268]	; (800fe6c <xTaskResumeAll+0x11c>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d10c      	bne.n	800fd80 <xTaskResumeAll+0x30>
	__asm volatile
 800fd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6a:	b672      	cpsid	i
 800fd6c:	f383 8811 	msr	BASEPRI, r3
 800fd70:	f3bf 8f6f 	isb	sy
 800fd74:	f3bf 8f4f 	dsb	sy
 800fd78:	b662      	cpsie	i
 800fd7a:	603b      	str	r3, [r7, #0]
}
 800fd7c:	bf00      	nop
 800fd7e:	e7fe      	b.n	800fd7e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fd80:	f001 fa64 	bl	801124c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fd84:	4b39      	ldr	r3, [pc, #228]	; (800fe6c <xTaskResumeAll+0x11c>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	4a38      	ldr	r2, [pc, #224]	; (800fe6c <xTaskResumeAll+0x11c>)
 800fd8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd8e:	4b37      	ldr	r3, [pc, #220]	; (800fe6c <xTaskResumeAll+0x11c>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d162      	bne.n	800fe5c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fd96:	4b36      	ldr	r3, [pc, #216]	; (800fe70 <xTaskResumeAll+0x120>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d05e      	beq.n	800fe5c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd9e:	e02f      	b.n	800fe00 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fda0:	4b34      	ldr	r3, [pc, #208]	; (800fe74 <xTaskResumeAll+0x124>)
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	3318      	adds	r3, #24
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fe facb 	bl	800e348 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	3304      	adds	r3, #4
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fe fac6 	bl	800e348 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdc0:	4b2d      	ldr	r3, [pc, #180]	; (800fe78 <xTaskResumeAll+0x128>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d903      	bls.n	800fdd0 <xTaskResumeAll+0x80>
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdcc:	4a2a      	ldr	r2, [pc, #168]	; (800fe78 <xTaskResumeAll+0x128>)
 800fdce:	6013      	str	r3, [r2, #0]
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd4:	4613      	mov	r3, r2
 800fdd6:	009b      	lsls	r3, r3, #2
 800fdd8:	4413      	add	r3, r2
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	4a27      	ldr	r2, [pc, #156]	; (800fe7c <xTaskResumeAll+0x12c>)
 800fdde:	441a      	add	r2, r3
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	3304      	adds	r3, #4
 800fde4:	4619      	mov	r1, r3
 800fde6:	4610      	mov	r0, r2
 800fde8:	f7fe fa51 	bl	800e28e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdf0:	4b23      	ldr	r3, [pc, #140]	; (800fe80 <xTaskResumeAll+0x130>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d302      	bcc.n	800fe00 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800fdfa:	4b22      	ldr	r3, [pc, #136]	; (800fe84 <xTaskResumeAll+0x134>)
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe00:	4b1c      	ldr	r3, [pc, #112]	; (800fe74 <xTaskResumeAll+0x124>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d1cb      	bne.n	800fda0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fe0e:	f000 fb9d 	bl	801054c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fe12:	4b1d      	ldr	r3, [pc, #116]	; (800fe88 <xTaskResumeAll+0x138>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d010      	beq.n	800fe40 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fe1e:	f000 f859 	bl	800fed4 <xTaskIncrementTick>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d002      	beq.n	800fe2e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800fe28:	4b16      	ldr	r3, [pc, #88]	; (800fe84 <xTaskResumeAll+0x134>)
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	3b01      	subs	r3, #1
 800fe32:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d1f1      	bne.n	800fe1e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800fe3a:	4b13      	ldr	r3, [pc, #76]	; (800fe88 <xTaskResumeAll+0x138>)
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fe40:	4b10      	ldr	r3, [pc, #64]	; (800fe84 <xTaskResumeAll+0x134>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d009      	beq.n	800fe5c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fe4c:	4b0f      	ldr	r3, [pc, #60]	; (800fe8c <xTaskResumeAll+0x13c>)
 800fe4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe52:	601a      	str	r2, [r3, #0]
 800fe54:	f3bf 8f4f 	dsb	sy
 800fe58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe5c:	f001 fa2a 	bl	80112b4 <vPortExitCritical>

	return xAlreadyYielded;
 800fe60:	68bb      	ldr	r3, [r7, #8]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3710      	adds	r7, #16
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	2000837c 	.word	0x2000837c
 800fe70:	20008354 	.word	0x20008354
 800fe74:	20008314 	.word	0x20008314
 800fe78:	2000835c 	.word	0x2000835c
 800fe7c:	20007e84 	.word	0x20007e84
 800fe80:	20007e80 	.word	0x20007e80
 800fe84:	20008368 	.word	0x20008368
 800fe88:	20008364 	.word	0x20008364
 800fe8c:	e000ed04 	.word	0xe000ed04

0800fe90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fe96:	4b05      	ldr	r3, [pc, #20]	; (800feac <xTaskGetTickCount+0x1c>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fe9c:	687b      	ldr	r3, [r7, #4]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	370c      	adds	r7, #12
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	20008358 	.word	0x20008358

0800feb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800feb6:	f001 fab1 	bl	801141c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800feba:	2300      	movs	r3, #0
 800febc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800febe:	4b04      	ldr	r3, [pc, #16]	; (800fed0 <xTaskGetTickCountFromISR+0x20>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fec4:	683b      	ldr	r3, [r7, #0]
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3708      	adds	r7, #8
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
 800fece:	bf00      	nop
 800fed0:	20008358 	.word	0x20008358

0800fed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b086      	sub	sp, #24
 800fed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800feda:	2300      	movs	r3, #0
 800fedc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fede:	4b50      	ldr	r3, [pc, #320]	; (8010020 <xTaskIncrementTick+0x14c>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f040 808b 	bne.w	800fffe <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fee8:	4b4e      	ldr	r3, [pc, #312]	; (8010024 <xTaskIncrementTick+0x150>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	3301      	adds	r3, #1
 800feee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fef0:	4a4c      	ldr	r2, [pc, #304]	; (8010024 <xTaskIncrementTick+0x150>)
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d122      	bne.n	800ff42 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800fefc:	4b4a      	ldr	r3, [pc, #296]	; (8010028 <xTaskIncrementTick+0x154>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00c      	beq.n	800ff20 <xTaskIncrementTick+0x4c>
	__asm volatile
 800ff06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0a:	b672      	cpsid	i
 800ff0c:	f383 8811 	msr	BASEPRI, r3
 800ff10:	f3bf 8f6f 	isb	sy
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	b662      	cpsie	i
 800ff1a:	603b      	str	r3, [r7, #0]
}
 800ff1c:	bf00      	nop
 800ff1e:	e7fe      	b.n	800ff1e <xTaskIncrementTick+0x4a>
 800ff20:	4b41      	ldr	r3, [pc, #260]	; (8010028 <xTaskIncrementTick+0x154>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	60fb      	str	r3, [r7, #12]
 800ff26:	4b41      	ldr	r3, [pc, #260]	; (801002c <xTaskIncrementTick+0x158>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	4a3f      	ldr	r2, [pc, #252]	; (8010028 <xTaskIncrementTick+0x154>)
 800ff2c:	6013      	str	r3, [r2, #0]
 800ff2e:	4a3f      	ldr	r2, [pc, #252]	; (801002c <xTaskIncrementTick+0x158>)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6013      	str	r3, [r2, #0]
 800ff34:	4b3e      	ldr	r3, [pc, #248]	; (8010030 <xTaskIncrementTick+0x15c>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	3301      	adds	r3, #1
 800ff3a:	4a3d      	ldr	r2, [pc, #244]	; (8010030 <xTaskIncrementTick+0x15c>)
 800ff3c:	6013      	str	r3, [r2, #0]
 800ff3e:	f000 fb05 	bl	801054c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ff42:	4b3c      	ldr	r3, [pc, #240]	; (8010034 <xTaskIncrementTick+0x160>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	693a      	ldr	r2, [r7, #16]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d349      	bcc.n	800ffe0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff4c:	4b36      	ldr	r3, [pc, #216]	; (8010028 <xTaskIncrementTick+0x154>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d104      	bne.n	800ff60 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff56:	4b37      	ldr	r3, [pc, #220]	; (8010034 <xTaskIncrementTick+0x160>)
 800ff58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff5c:	601a      	str	r2, [r3, #0]
					break;
 800ff5e:	e03f      	b.n	800ffe0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff60:	4b31      	ldr	r3, [pc, #196]	; (8010028 <xTaskIncrementTick+0x154>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ff70:	693a      	ldr	r2, [r7, #16]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d203      	bcs.n	800ff80 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ff78:	4a2e      	ldr	r2, [pc, #184]	; (8010034 <xTaskIncrementTick+0x160>)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ff7e:	e02f      	b.n	800ffe0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	3304      	adds	r3, #4
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fe f9df 	bl	800e348 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d004      	beq.n	800ff9c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	3318      	adds	r3, #24
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fe f9d6 	bl	800e348 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa0:	4b25      	ldr	r3, [pc, #148]	; (8010038 <xTaskIncrementTick+0x164>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d903      	bls.n	800ffb0 <xTaskIncrementTick+0xdc>
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffac:	4a22      	ldr	r2, [pc, #136]	; (8010038 <xTaskIncrementTick+0x164>)
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4413      	add	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	4a1f      	ldr	r2, [pc, #124]	; (801003c <xTaskIncrementTick+0x168>)
 800ffbe:	441a      	add	r2, r3
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	4610      	mov	r0, r2
 800ffc8:	f7fe f961 	bl	800e28e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd0:	4b1b      	ldr	r3, [pc, #108]	; (8010040 <xTaskIncrementTick+0x16c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d3b8      	bcc.n	800ff4c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffde:	e7b5      	b.n	800ff4c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ffe0:	4b17      	ldr	r3, [pc, #92]	; (8010040 <xTaskIncrementTick+0x16c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffe6:	4915      	ldr	r1, [pc, #84]	; (801003c <xTaskIncrementTick+0x168>)
 800ffe8:	4613      	mov	r3, r2
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	4413      	add	r3, r2
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	440b      	add	r3, r1
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d907      	bls.n	8010008 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800fff8:	2301      	movs	r3, #1
 800fffa:	617b      	str	r3, [r7, #20]
 800fffc:	e004      	b.n	8010008 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fffe:	4b11      	ldr	r3, [pc, #68]	; (8010044 <xTaskIncrementTick+0x170>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	3301      	adds	r3, #1
 8010004:	4a0f      	ldr	r2, [pc, #60]	; (8010044 <xTaskIncrementTick+0x170>)
 8010006:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010008:	4b0f      	ldr	r3, [pc, #60]	; (8010048 <xTaskIncrementTick+0x174>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d001      	beq.n	8010014 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8010010:	2301      	movs	r3, #1
 8010012:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010014:	697b      	ldr	r3, [r7, #20]
}
 8010016:	4618      	mov	r0, r3
 8010018:	3718      	adds	r7, #24
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	2000837c 	.word	0x2000837c
 8010024:	20008358 	.word	0x20008358
 8010028:	2000830c 	.word	0x2000830c
 801002c:	20008310 	.word	0x20008310
 8010030:	2000836c 	.word	0x2000836c
 8010034:	20008374 	.word	0x20008374
 8010038:	2000835c 	.word	0x2000835c
 801003c:	20007e84 	.word	0x20007e84
 8010040:	20007e80 	.word	0x20007e80
 8010044:	20008364 	.word	0x20008364
 8010048:	20008368 	.word	0x20008368

0801004c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010052:	4b37      	ldr	r3, [pc, #220]	; (8010130 <vTaskSwitchContext+0xe4>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d003      	beq.n	8010062 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801005a:	4b36      	ldr	r3, [pc, #216]	; (8010134 <vTaskSwitchContext+0xe8>)
 801005c:	2201      	movs	r2, #1
 801005e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010060:	e061      	b.n	8010126 <vTaskSwitchContext+0xda>
		xYieldPending = pdFALSE;
 8010062:	4b34      	ldr	r3, [pc, #208]	; (8010134 <vTaskSwitchContext+0xe8>)
 8010064:	2200      	movs	r2, #0
 8010066:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010068:	f7f0 fffd 	bl	8001066 <getRunTimeCounterValue>
 801006c:	4603      	mov	r3, r0
 801006e:	4a32      	ldr	r2, [pc, #200]	; (8010138 <vTaskSwitchContext+0xec>)
 8010070:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010072:	4b31      	ldr	r3, [pc, #196]	; (8010138 <vTaskSwitchContext+0xec>)
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	4b31      	ldr	r3, [pc, #196]	; (801013c <vTaskSwitchContext+0xf0>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	429a      	cmp	r2, r3
 801007c:	d909      	bls.n	8010092 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801007e:	4b30      	ldr	r3, [pc, #192]	; (8010140 <vTaskSwitchContext+0xf4>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010084:	4a2c      	ldr	r2, [pc, #176]	; (8010138 <vTaskSwitchContext+0xec>)
 8010086:	6810      	ldr	r0, [r2, #0]
 8010088:	4a2c      	ldr	r2, [pc, #176]	; (801013c <vTaskSwitchContext+0xf0>)
 801008a:	6812      	ldr	r2, [r2, #0]
 801008c:	1a82      	subs	r2, r0, r2
 801008e:	440a      	add	r2, r1
 8010090:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8010092:	4b29      	ldr	r3, [pc, #164]	; (8010138 <vTaskSwitchContext+0xec>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4a29      	ldr	r2, [pc, #164]	; (801013c <vTaskSwitchContext+0xf0>)
 8010098:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801009a:	4b2a      	ldr	r3, [pc, #168]	; (8010144 <vTaskSwitchContext+0xf8>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	60fb      	str	r3, [r7, #12]
 80100a0:	e012      	b.n	80100c8 <vTaskSwitchContext+0x7c>
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d10c      	bne.n	80100c2 <vTaskSwitchContext+0x76>
	__asm volatile
 80100a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ac:	b672      	cpsid	i
 80100ae:	f383 8811 	msr	BASEPRI, r3
 80100b2:	f3bf 8f6f 	isb	sy
 80100b6:	f3bf 8f4f 	dsb	sy
 80100ba:	b662      	cpsie	i
 80100bc:	607b      	str	r3, [r7, #4]
}
 80100be:	bf00      	nop
 80100c0:	e7fe      	b.n	80100c0 <vTaskSwitchContext+0x74>
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	3b01      	subs	r3, #1
 80100c6:	60fb      	str	r3, [r7, #12]
 80100c8:	491f      	ldr	r1, [pc, #124]	; (8010148 <vTaskSwitchContext+0xfc>)
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	4613      	mov	r3, r2
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	4413      	add	r3, r2
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	440b      	add	r3, r1
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d0e2      	beq.n	80100a2 <vTaskSwitchContext+0x56>
 80100dc:	68fa      	ldr	r2, [r7, #12]
 80100de:	4613      	mov	r3, r2
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	4413      	add	r3, r2
 80100e4:	009b      	lsls	r3, r3, #2
 80100e6:	4a18      	ldr	r2, [pc, #96]	; (8010148 <vTaskSwitchContext+0xfc>)
 80100e8:	4413      	add	r3, r2
 80100ea:	60bb      	str	r3, [r7, #8]
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	685a      	ldr	r2, [r3, #4]
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	605a      	str	r2, [r3, #4]
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	685a      	ldr	r2, [r3, #4]
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	3308      	adds	r3, #8
 80100fe:	429a      	cmp	r2, r3
 8010100:	d104      	bne.n	801010c <vTaskSwitchContext+0xc0>
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	685a      	ldr	r2, [r3, #4]
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	605a      	str	r2, [r3, #4]
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	4a0b      	ldr	r2, [pc, #44]	; (8010140 <vTaskSwitchContext+0xf4>)
 8010114:	6013      	str	r3, [r2, #0]
 8010116:	4a0b      	ldr	r2, [pc, #44]	; (8010144 <vTaskSwitchContext+0xf8>)
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801011c:	4b08      	ldr	r3, [pc, #32]	; (8010140 <vTaskSwitchContext+0xf4>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	3358      	adds	r3, #88	; 0x58
 8010122:	4a0a      	ldr	r2, [pc, #40]	; (801014c <vTaskSwitchContext+0x100>)
 8010124:	6013      	str	r3, [r2, #0]
}
 8010126:	bf00      	nop
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	2000837c 	.word	0x2000837c
 8010134:	20008368 	.word	0x20008368
 8010138:	20008384 	.word	0x20008384
 801013c:	20008380 	.word	0x20008380
 8010140:	20007e80 	.word	0x20007e80
 8010144:	2000835c 	.word	0x2000835c
 8010148:	20007e84 	.word	0x20007e84
 801014c:	200000fc 	.word	0x200000fc

08010150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d10c      	bne.n	801017a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8010160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010164:	b672      	cpsid	i
 8010166:	f383 8811 	msr	BASEPRI, r3
 801016a:	f3bf 8f6f 	isb	sy
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	b662      	cpsie	i
 8010174:	60fb      	str	r3, [r7, #12]
}
 8010176:	bf00      	nop
 8010178:	e7fe      	b.n	8010178 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801017a:	4b07      	ldr	r3, [pc, #28]	; (8010198 <vTaskPlaceOnEventList+0x48>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	3318      	adds	r3, #24
 8010180:	4619      	mov	r1, r3
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7fe f8a7 	bl	800e2d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010188:	2101      	movs	r1, #1
 801018a:	6838      	ldr	r0, [r7, #0]
 801018c:	f000 fba0 	bl	80108d0 <prvAddCurrentTaskToDelayedList>
}
 8010190:	bf00      	nop
 8010192:	3710      	adds	r7, #16
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	20007e80 	.word	0x20007e80

0801019c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801019c:	b580      	push	{r7, lr}
 801019e:	b086      	sub	sp, #24
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d10c      	bne.n	80101c8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80101ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b2:	b672      	cpsid	i
 80101b4:	f383 8811 	msr	BASEPRI, r3
 80101b8:	f3bf 8f6f 	isb	sy
 80101bc:	f3bf 8f4f 	dsb	sy
 80101c0:	b662      	cpsie	i
 80101c2:	617b      	str	r3, [r7, #20]
}
 80101c4:	bf00      	nop
 80101c6:	e7fe      	b.n	80101c6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80101c8:	4b0a      	ldr	r3, [pc, #40]	; (80101f4 <vTaskPlaceOnEventListRestricted+0x58>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	3318      	adds	r3, #24
 80101ce:	4619      	mov	r1, r3
 80101d0:	68f8      	ldr	r0, [r7, #12]
 80101d2:	f7fe f85c 	bl	800e28e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d002      	beq.n	80101e2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80101dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80101e2:	6879      	ldr	r1, [r7, #4]
 80101e4:	68b8      	ldr	r0, [r7, #8]
 80101e6:	f000 fb73 	bl	80108d0 <prvAddCurrentTaskToDelayedList>
	}
 80101ea:	bf00      	nop
 80101ec:	3718      	adds	r7, #24
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	20007e80 	.word	0x20007e80

080101f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b086      	sub	sp, #24
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d10c      	bne.n	8010228 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801020e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010212:	b672      	cpsid	i
 8010214:	f383 8811 	msr	BASEPRI, r3
 8010218:	f3bf 8f6f 	isb	sy
 801021c:	f3bf 8f4f 	dsb	sy
 8010220:	b662      	cpsie	i
 8010222:	60fb      	str	r3, [r7, #12]
}
 8010224:	bf00      	nop
 8010226:	e7fe      	b.n	8010226 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	3318      	adds	r3, #24
 801022c:	4618      	mov	r0, r3
 801022e:	f7fe f88b 	bl	800e348 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010232:	4b1e      	ldr	r3, [pc, #120]	; (80102ac <xTaskRemoveFromEventList+0xb4>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d11d      	bne.n	8010276 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	3304      	adds	r3, #4
 801023e:	4618      	mov	r0, r3
 8010240:	f7fe f882 	bl	800e348 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010248:	4b19      	ldr	r3, [pc, #100]	; (80102b0 <xTaskRemoveFromEventList+0xb8>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	429a      	cmp	r2, r3
 801024e:	d903      	bls.n	8010258 <xTaskRemoveFromEventList+0x60>
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010254:	4a16      	ldr	r2, [pc, #88]	; (80102b0 <xTaskRemoveFromEventList+0xb8>)
 8010256:	6013      	str	r3, [r2, #0]
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801025c:	4613      	mov	r3, r2
 801025e:	009b      	lsls	r3, r3, #2
 8010260:	4413      	add	r3, r2
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	4a13      	ldr	r2, [pc, #76]	; (80102b4 <xTaskRemoveFromEventList+0xbc>)
 8010266:	441a      	add	r2, r3
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	3304      	adds	r3, #4
 801026c:	4619      	mov	r1, r3
 801026e:	4610      	mov	r0, r2
 8010270:	f7fe f80d 	bl	800e28e <vListInsertEnd>
 8010274:	e005      	b.n	8010282 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	3318      	adds	r3, #24
 801027a:	4619      	mov	r1, r3
 801027c:	480e      	ldr	r0, [pc, #56]	; (80102b8 <xTaskRemoveFromEventList+0xc0>)
 801027e:	f7fe f806 	bl	800e28e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010286:	4b0d      	ldr	r3, [pc, #52]	; (80102bc <xTaskRemoveFromEventList+0xc4>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801028c:	429a      	cmp	r2, r3
 801028e:	d905      	bls.n	801029c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010290:	2301      	movs	r3, #1
 8010292:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010294:	4b0a      	ldr	r3, [pc, #40]	; (80102c0 <xTaskRemoveFromEventList+0xc8>)
 8010296:	2201      	movs	r2, #1
 8010298:	601a      	str	r2, [r3, #0]
 801029a:	e001      	b.n	80102a0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 801029c:	2300      	movs	r3, #0
 801029e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80102a0:	697b      	ldr	r3, [r7, #20]
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3718      	adds	r7, #24
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	2000837c 	.word	0x2000837c
 80102b0:	2000835c 	.word	0x2000835c
 80102b4:	20007e84 	.word	0x20007e84
 80102b8:	20008314 	.word	0x20008314
 80102bc:	20007e80 	.word	0x20007e80
 80102c0:	20008368 	.word	0x20008368

080102c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80102cc:	4b06      	ldr	r3, [pc, #24]	; (80102e8 <vTaskInternalSetTimeOutState+0x24>)
 80102ce:	681a      	ldr	r2, [r3, #0]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80102d4:	4b05      	ldr	r3, [pc, #20]	; (80102ec <vTaskInternalSetTimeOutState+0x28>)
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	605a      	str	r2, [r3, #4]
}
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr
 80102e8:	2000836c 	.word	0x2000836c
 80102ec:	20008358 	.word	0x20008358

080102f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b088      	sub	sp, #32
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d10c      	bne.n	801031a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010304:	b672      	cpsid	i
 8010306:	f383 8811 	msr	BASEPRI, r3
 801030a:	f3bf 8f6f 	isb	sy
 801030e:	f3bf 8f4f 	dsb	sy
 8010312:	b662      	cpsie	i
 8010314:	613b      	str	r3, [r7, #16]
}
 8010316:	bf00      	nop
 8010318:	e7fe      	b.n	8010318 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d10c      	bne.n	801033a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010324:	b672      	cpsid	i
 8010326:	f383 8811 	msr	BASEPRI, r3
 801032a:	f3bf 8f6f 	isb	sy
 801032e:	f3bf 8f4f 	dsb	sy
 8010332:	b662      	cpsie	i
 8010334:	60fb      	str	r3, [r7, #12]
}
 8010336:	bf00      	nop
 8010338:	e7fe      	b.n	8010338 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801033a:	f000 ff87 	bl	801124c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801033e:	4b1d      	ldr	r3, [pc, #116]	; (80103b4 <xTaskCheckForTimeOut+0xc4>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	69ba      	ldr	r2, [r7, #24]
 801034a:	1ad3      	subs	r3, r2, r3
 801034c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010356:	d102      	bne.n	801035e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010358:	2300      	movs	r3, #0
 801035a:	61fb      	str	r3, [r7, #28]
 801035c:	e023      	b.n	80103a6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	4b15      	ldr	r3, [pc, #84]	; (80103b8 <xTaskCheckForTimeOut+0xc8>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	429a      	cmp	r2, r3
 8010368:	d007      	beq.n	801037a <xTaskCheckForTimeOut+0x8a>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	69ba      	ldr	r2, [r7, #24]
 8010370:	429a      	cmp	r2, r3
 8010372:	d302      	bcc.n	801037a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010374:	2301      	movs	r3, #1
 8010376:	61fb      	str	r3, [r7, #28]
 8010378:	e015      	b.n	80103a6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	697a      	ldr	r2, [r7, #20]
 8010380:	429a      	cmp	r2, r3
 8010382:	d20b      	bcs.n	801039c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	1ad2      	subs	r2, r2, r3
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f7ff ff97 	bl	80102c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010396:	2300      	movs	r3, #0
 8010398:	61fb      	str	r3, [r7, #28]
 801039a:	e004      	b.n	80103a6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	2200      	movs	r2, #0
 80103a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80103a2:	2301      	movs	r3, #1
 80103a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80103a6:	f000 ff85 	bl	80112b4 <vPortExitCritical>

	return xReturn;
 80103aa:	69fb      	ldr	r3, [r7, #28]
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3720      	adds	r7, #32
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}
 80103b4:	20008358 	.word	0x20008358
 80103b8:	2000836c 	.word	0x2000836c

080103bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80103bc:	b480      	push	{r7}
 80103be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80103c0:	4b03      	ldr	r3, [pc, #12]	; (80103d0 <vTaskMissedYield+0x14>)
 80103c2:	2201      	movs	r2, #1
 80103c4:	601a      	str	r2, [r3, #0]
}
 80103c6:	bf00      	nop
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr
 80103d0:	20008368 	.word	0x20008368

080103d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80103dc:	f000 f852 	bl	8010484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80103e0:	4b06      	ldr	r3, [pc, #24]	; (80103fc <prvIdleTask+0x28>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d9f9      	bls.n	80103dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80103e8:	4b05      	ldr	r3, [pc, #20]	; (8010400 <prvIdleTask+0x2c>)
 80103ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103ee:	601a      	str	r2, [r3, #0]
 80103f0:	f3bf 8f4f 	dsb	sy
 80103f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80103f8:	e7f0      	b.n	80103dc <prvIdleTask+0x8>
 80103fa:	bf00      	nop
 80103fc:	20007e84 	.word	0x20007e84
 8010400:	e000ed04 	.word	0xe000ed04

08010404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801040a:	2300      	movs	r3, #0
 801040c:	607b      	str	r3, [r7, #4]
 801040e:	e00c      	b.n	801042a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	4613      	mov	r3, r2
 8010414:	009b      	lsls	r3, r3, #2
 8010416:	4413      	add	r3, r2
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	4a12      	ldr	r2, [pc, #72]	; (8010464 <prvInitialiseTaskLists+0x60>)
 801041c:	4413      	add	r3, r2
 801041e:	4618      	mov	r0, r3
 8010420:	f7fd ff08 	bl	800e234 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	3301      	adds	r3, #1
 8010428:	607b      	str	r3, [r7, #4]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2b37      	cmp	r3, #55	; 0x37
 801042e:	d9ef      	bls.n	8010410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010430:	480d      	ldr	r0, [pc, #52]	; (8010468 <prvInitialiseTaskLists+0x64>)
 8010432:	f7fd feff 	bl	800e234 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010436:	480d      	ldr	r0, [pc, #52]	; (801046c <prvInitialiseTaskLists+0x68>)
 8010438:	f7fd fefc 	bl	800e234 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801043c:	480c      	ldr	r0, [pc, #48]	; (8010470 <prvInitialiseTaskLists+0x6c>)
 801043e:	f7fd fef9 	bl	800e234 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010442:	480c      	ldr	r0, [pc, #48]	; (8010474 <prvInitialiseTaskLists+0x70>)
 8010444:	f7fd fef6 	bl	800e234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010448:	480b      	ldr	r0, [pc, #44]	; (8010478 <prvInitialiseTaskLists+0x74>)
 801044a:	f7fd fef3 	bl	800e234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801044e:	4b0b      	ldr	r3, [pc, #44]	; (801047c <prvInitialiseTaskLists+0x78>)
 8010450:	4a05      	ldr	r2, [pc, #20]	; (8010468 <prvInitialiseTaskLists+0x64>)
 8010452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010454:	4b0a      	ldr	r3, [pc, #40]	; (8010480 <prvInitialiseTaskLists+0x7c>)
 8010456:	4a05      	ldr	r2, [pc, #20]	; (801046c <prvInitialiseTaskLists+0x68>)
 8010458:	601a      	str	r2, [r3, #0]
}
 801045a:	bf00      	nop
 801045c:	3708      	adds	r7, #8
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	20007e84 	.word	0x20007e84
 8010468:	200082e4 	.word	0x200082e4
 801046c:	200082f8 	.word	0x200082f8
 8010470:	20008314 	.word	0x20008314
 8010474:	20008328 	.word	0x20008328
 8010478:	20008340 	.word	0x20008340
 801047c:	2000830c 	.word	0x2000830c
 8010480:	20008310 	.word	0x20008310

08010484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801048a:	e019      	b.n	80104c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801048c:	f000 fede 	bl	801124c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010490:	4b10      	ldr	r3, [pc, #64]	; (80104d4 <prvCheckTasksWaitingTermination+0x50>)
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	68db      	ldr	r3, [r3, #12]
 8010496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	3304      	adds	r3, #4
 801049c:	4618      	mov	r0, r3
 801049e:	f7fd ff53 	bl	800e348 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80104a2:	4b0d      	ldr	r3, [pc, #52]	; (80104d8 <prvCheckTasksWaitingTermination+0x54>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	3b01      	subs	r3, #1
 80104a8:	4a0b      	ldr	r2, [pc, #44]	; (80104d8 <prvCheckTasksWaitingTermination+0x54>)
 80104aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80104ac:	4b0b      	ldr	r3, [pc, #44]	; (80104dc <prvCheckTasksWaitingTermination+0x58>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	3b01      	subs	r3, #1
 80104b2:	4a0a      	ldr	r2, [pc, #40]	; (80104dc <prvCheckTasksWaitingTermination+0x58>)
 80104b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80104b6:	f000 fefd 	bl	80112b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f000 f810 	bl	80104e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80104c0:	4b06      	ldr	r3, [pc, #24]	; (80104dc <prvCheckTasksWaitingTermination+0x58>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d1e1      	bne.n	801048c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80104c8:	bf00      	nop
 80104ca:	bf00      	nop
 80104cc:	3708      	adds	r7, #8
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	20008328 	.word	0x20008328
 80104d8:	20008354 	.word	0x20008354
 80104dc:	2000833c 	.word	0x2000833c

080104e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	3358      	adds	r3, #88	; 0x58
 80104ec:	4618      	mov	r0, r3
 80104ee:	f014 f9f3 	bl	80248d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d108      	bne.n	801050e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010500:	4618      	mov	r0, r3
 8010502:	f001 f899 	bl	8011638 <vPortFree>
				vPortFree( pxTCB );
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f001 f896 	bl	8011638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801050c:	e01a      	b.n	8010544 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010514:	2b01      	cmp	r3, #1
 8010516:	d103      	bne.n	8010520 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f001 f88d 	bl	8011638 <vPortFree>
	}
 801051e:	e011      	b.n	8010544 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010526:	2b02      	cmp	r3, #2
 8010528:	d00c      	beq.n	8010544 <prvDeleteTCB+0x64>
	__asm volatile
 801052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052e:	b672      	cpsid	i
 8010530:	f383 8811 	msr	BASEPRI, r3
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	b662      	cpsie	i
 801053e:	60fb      	str	r3, [r7, #12]
}
 8010540:	bf00      	nop
 8010542:	e7fe      	b.n	8010542 <prvDeleteTCB+0x62>
	}
 8010544:	bf00      	nop
 8010546:	3710      	adds	r7, #16
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801054c:	b480      	push	{r7}
 801054e:	b083      	sub	sp, #12
 8010550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010552:	4b0c      	ldr	r3, [pc, #48]	; (8010584 <prvResetNextTaskUnblockTime+0x38>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d104      	bne.n	8010566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801055c:	4b0a      	ldr	r3, [pc, #40]	; (8010588 <prvResetNextTaskUnblockTime+0x3c>)
 801055e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010564:	e008      	b.n	8010578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010566:	4b07      	ldr	r3, [pc, #28]	; (8010584 <prvResetNextTaskUnblockTime+0x38>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	4a04      	ldr	r2, [pc, #16]	; (8010588 <prvResetNextTaskUnblockTime+0x3c>)
 8010576:	6013      	str	r3, [r2, #0]
}
 8010578:	bf00      	nop
 801057a:	370c      	adds	r7, #12
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr
 8010584:	2000830c 	.word	0x2000830c
 8010588:	20008374 	.word	0x20008374

0801058c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010592:	4b05      	ldr	r3, [pc, #20]	; (80105a8 <xTaskGetCurrentTaskHandle+0x1c>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010598:	687b      	ldr	r3, [r7, #4]
	}
 801059a:	4618      	mov	r0, r3
 801059c:	370c      	adds	r7, #12
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr
 80105a6:	bf00      	nop
 80105a8:	20007e80 	.word	0x20007e80

080105ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80105b2:	4b0b      	ldr	r3, [pc, #44]	; (80105e0 <xTaskGetSchedulerState+0x34>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d102      	bne.n	80105c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80105ba:	2301      	movs	r3, #1
 80105bc:	607b      	str	r3, [r7, #4]
 80105be:	e008      	b.n	80105d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105c0:	4b08      	ldr	r3, [pc, #32]	; (80105e4 <xTaskGetSchedulerState+0x38>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d102      	bne.n	80105ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80105c8:	2302      	movs	r3, #2
 80105ca:	607b      	str	r3, [r7, #4]
 80105cc:	e001      	b.n	80105d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80105ce:	2300      	movs	r3, #0
 80105d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80105d2:	687b      	ldr	r3, [r7, #4]
	}
 80105d4:	4618      	mov	r0, r3
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr
 80105e0:	20008360 	.word	0x20008360
 80105e4:	2000837c 	.word	0x2000837c

080105e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80105f4:	2300      	movs	r3, #0
 80105f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d051      	beq.n	80106a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010602:	4b2a      	ldr	r3, [pc, #168]	; (80106ac <xTaskPriorityInherit+0xc4>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010608:	429a      	cmp	r2, r3
 801060a:	d241      	bcs.n	8010690 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	699b      	ldr	r3, [r3, #24]
 8010610:	2b00      	cmp	r3, #0
 8010612:	db06      	blt.n	8010622 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010614:	4b25      	ldr	r3, [pc, #148]	; (80106ac <xTaskPriorityInherit+0xc4>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801061a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	6959      	ldr	r1, [r3, #20]
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801062a:	4613      	mov	r3, r2
 801062c:	009b      	lsls	r3, r3, #2
 801062e:	4413      	add	r3, r2
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	4a1f      	ldr	r2, [pc, #124]	; (80106b0 <xTaskPriorityInherit+0xc8>)
 8010634:	4413      	add	r3, r2
 8010636:	4299      	cmp	r1, r3
 8010638:	d122      	bne.n	8010680 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	3304      	adds	r3, #4
 801063e:	4618      	mov	r0, r3
 8010640:	f7fd fe82 	bl	800e348 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010644:	4b19      	ldr	r3, [pc, #100]	; (80106ac <xTaskPriorityInherit+0xc4>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010652:	4b18      	ldr	r3, [pc, #96]	; (80106b4 <xTaskPriorityInherit+0xcc>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	429a      	cmp	r2, r3
 8010658:	d903      	bls.n	8010662 <xTaskPriorityInherit+0x7a>
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801065e:	4a15      	ldr	r2, [pc, #84]	; (80106b4 <xTaskPriorityInherit+0xcc>)
 8010660:	6013      	str	r3, [r2, #0]
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010666:	4613      	mov	r3, r2
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	4413      	add	r3, r2
 801066c:	009b      	lsls	r3, r3, #2
 801066e:	4a10      	ldr	r2, [pc, #64]	; (80106b0 <xTaskPriorityInherit+0xc8>)
 8010670:	441a      	add	r2, r3
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	3304      	adds	r3, #4
 8010676:	4619      	mov	r1, r3
 8010678:	4610      	mov	r0, r2
 801067a:	f7fd fe08 	bl	800e28e <vListInsertEnd>
 801067e:	e004      	b.n	801068a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010680:	4b0a      	ldr	r3, [pc, #40]	; (80106ac <xTaskPriorityInherit+0xc4>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801068a:	2301      	movs	r3, #1
 801068c:	60fb      	str	r3, [r7, #12]
 801068e:	e008      	b.n	80106a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010694:	4b05      	ldr	r3, [pc, #20]	; (80106ac <xTaskPriorityInherit+0xc4>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801069a:	429a      	cmp	r2, r3
 801069c:	d201      	bcs.n	80106a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801069e:	2301      	movs	r3, #1
 80106a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80106a2:	68fb      	ldr	r3, [r7, #12]
	}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3710      	adds	r7, #16
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	20007e80 	.word	0x20007e80
 80106b0:	20007e84 	.word	0x20007e84
 80106b4:	2000835c 	.word	0x2000835c

080106b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b086      	sub	sp, #24
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80106c4:	2300      	movs	r3, #0
 80106c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d05a      	beq.n	8010784 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80106ce:	4b30      	ldr	r3, [pc, #192]	; (8010790 <xTaskPriorityDisinherit+0xd8>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	693a      	ldr	r2, [r7, #16]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d00c      	beq.n	80106f2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80106d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106dc:	b672      	cpsid	i
 80106de:	f383 8811 	msr	BASEPRI, r3
 80106e2:	f3bf 8f6f 	isb	sy
 80106e6:	f3bf 8f4f 	dsb	sy
 80106ea:	b662      	cpsie	i
 80106ec:	60fb      	str	r3, [r7, #12]
}
 80106ee:	bf00      	nop
 80106f0:	e7fe      	b.n	80106f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d10c      	bne.n	8010714 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80106fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fe:	b672      	cpsid	i
 8010700:	f383 8811 	msr	BASEPRI, r3
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	f3bf 8f4f 	dsb	sy
 801070c:	b662      	cpsie	i
 801070e:	60bb      	str	r3, [r7, #8]
}
 8010710:	bf00      	nop
 8010712:	e7fe      	b.n	8010712 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010718:	1e5a      	subs	r2, r3, #1
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010726:	429a      	cmp	r2, r3
 8010728:	d02c      	beq.n	8010784 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801072e:	2b00      	cmp	r3, #0
 8010730:	d128      	bne.n	8010784 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	3304      	adds	r3, #4
 8010736:	4618      	mov	r0, r3
 8010738:	f7fd fe06 	bl	800e348 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010748:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010754:	4b0f      	ldr	r3, [pc, #60]	; (8010794 <xTaskPriorityDisinherit+0xdc>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	429a      	cmp	r2, r3
 801075a:	d903      	bls.n	8010764 <xTaskPriorityDisinherit+0xac>
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010760:	4a0c      	ldr	r2, [pc, #48]	; (8010794 <xTaskPriorityDisinherit+0xdc>)
 8010762:	6013      	str	r3, [r2, #0]
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010768:	4613      	mov	r3, r2
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	4413      	add	r3, r2
 801076e:	009b      	lsls	r3, r3, #2
 8010770:	4a09      	ldr	r2, [pc, #36]	; (8010798 <xTaskPriorityDisinherit+0xe0>)
 8010772:	441a      	add	r2, r3
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	3304      	adds	r3, #4
 8010778:	4619      	mov	r1, r3
 801077a:	4610      	mov	r0, r2
 801077c:	f7fd fd87 	bl	800e28e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010780:	2301      	movs	r3, #1
 8010782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010784:	697b      	ldr	r3, [r7, #20]
	}
 8010786:	4618      	mov	r0, r3
 8010788:	3718      	adds	r7, #24
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	20007e80 	.word	0x20007e80
 8010794:	2000835c 	.word	0x2000835c
 8010798:	20007e84 	.word	0x20007e84

0801079c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801079c:	b580      	push	{r7, lr}
 801079e:	b088      	sub	sp, #32
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80107aa:	2301      	movs	r3, #1
 80107ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d06e      	beq.n	8010892 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80107b4:	69bb      	ldr	r3, [r7, #24]
 80107b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d10c      	bne.n	80107d6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80107bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c0:	b672      	cpsid	i
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	b662      	cpsie	i
 80107d0:	60fb      	str	r3, [r7, #12]
}
 80107d2:	bf00      	nop
 80107d4:	e7fe      	b.n	80107d4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107da:	683a      	ldr	r2, [r7, #0]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d902      	bls.n	80107e6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	61fb      	str	r3, [r7, #28]
 80107e4:	e002      	b.n	80107ec <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f0:	69fa      	ldr	r2, [r7, #28]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d04d      	beq.n	8010892 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107fa:	697a      	ldr	r2, [r7, #20]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d148      	bne.n	8010892 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010800:	4b26      	ldr	r3, [pc, #152]	; (801089c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	69ba      	ldr	r2, [r7, #24]
 8010806:	429a      	cmp	r2, r3
 8010808:	d10c      	bne.n	8010824 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 801080a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080e:	b672      	cpsid	i
 8010810:	f383 8811 	msr	BASEPRI, r3
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	b662      	cpsie	i
 801081e:	60bb      	str	r3, [r7, #8]
}
 8010820:	bf00      	nop
 8010822:	e7fe      	b.n	8010822 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010824:	69bb      	ldr	r3, [r7, #24]
 8010826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010828:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801082a:	69bb      	ldr	r3, [r7, #24]
 801082c:	69fa      	ldr	r2, [r7, #28]
 801082e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010830:	69bb      	ldr	r3, [r7, #24]
 8010832:	699b      	ldr	r3, [r3, #24]
 8010834:	2b00      	cmp	r3, #0
 8010836:	db04      	blt.n	8010842 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010842:	69bb      	ldr	r3, [r7, #24]
 8010844:	6959      	ldr	r1, [r3, #20]
 8010846:	693a      	ldr	r2, [r7, #16]
 8010848:	4613      	mov	r3, r2
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	4413      	add	r3, r2
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	4a13      	ldr	r2, [pc, #76]	; (80108a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010852:	4413      	add	r3, r2
 8010854:	4299      	cmp	r1, r3
 8010856:	d11c      	bne.n	8010892 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010858:	69bb      	ldr	r3, [r7, #24]
 801085a:	3304      	adds	r3, #4
 801085c:	4618      	mov	r0, r3
 801085e:	f7fd fd73 	bl	800e348 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010866:	4b0f      	ldr	r3, [pc, #60]	; (80108a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	429a      	cmp	r2, r3
 801086c:	d903      	bls.n	8010876 <vTaskPriorityDisinheritAfterTimeout+0xda>
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010872:	4a0c      	ldr	r2, [pc, #48]	; (80108a4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010874:	6013      	str	r3, [r2, #0]
 8010876:	69bb      	ldr	r3, [r7, #24]
 8010878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801087a:	4613      	mov	r3, r2
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	4413      	add	r3, r2
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	4a07      	ldr	r2, [pc, #28]	; (80108a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010884:	441a      	add	r2, r3
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	3304      	adds	r3, #4
 801088a:	4619      	mov	r1, r3
 801088c:	4610      	mov	r0, r2
 801088e:	f7fd fcfe 	bl	800e28e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010892:	bf00      	nop
 8010894:	3720      	adds	r7, #32
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	20007e80 	.word	0x20007e80
 80108a0:	20007e84 	.word	0x20007e84
 80108a4:	2000835c 	.word	0x2000835c

080108a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80108a8:	b480      	push	{r7}
 80108aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80108ac:	4b07      	ldr	r3, [pc, #28]	; (80108cc <pvTaskIncrementMutexHeldCount+0x24>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d004      	beq.n	80108be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80108b4:	4b05      	ldr	r3, [pc, #20]	; (80108cc <pvTaskIncrementMutexHeldCount+0x24>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108ba:	3201      	adds	r2, #1
 80108bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80108be:	4b03      	ldr	r3, [pc, #12]	; (80108cc <pvTaskIncrementMutexHeldCount+0x24>)
 80108c0:	681b      	ldr	r3, [r3, #0]
	}
 80108c2:	4618      	mov	r0, r3
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr
 80108cc:	20007e80 	.word	0x20007e80

080108d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b084      	sub	sp, #16
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80108da:	4b21      	ldr	r3, [pc, #132]	; (8010960 <prvAddCurrentTaskToDelayedList+0x90>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108e0:	4b20      	ldr	r3, [pc, #128]	; (8010964 <prvAddCurrentTaskToDelayedList+0x94>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	3304      	adds	r3, #4
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7fd fd2e 	bl	800e348 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108f2:	d10a      	bne.n	801090a <prvAddCurrentTaskToDelayedList+0x3a>
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d007      	beq.n	801090a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108fa:	4b1a      	ldr	r3, [pc, #104]	; (8010964 <prvAddCurrentTaskToDelayedList+0x94>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	3304      	adds	r3, #4
 8010900:	4619      	mov	r1, r3
 8010902:	4819      	ldr	r0, [pc, #100]	; (8010968 <prvAddCurrentTaskToDelayedList+0x98>)
 8010904:	f7fd fcc3 	bl	800e28e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010908:	e026      	b.n	8010958 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	4413      	add	r3, r2
 8010910:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010912:	4b14      	ldr	r3, [pc, #80]	; (8010964 <prvAddCurrentTaskToDelayedList+0x94>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	68ba      	ldr	r2, [r7, #8]
 8010918:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801091a:	68ba      	ldr	r2, [r7, #8]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	429a      	cmp	r2, r3
 8010920:	d209      	bcs.n	8010936 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010922:	4b12      	ldr	r3, [pc, #72]	; (801096c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	4b0f      	ldr	r3, [pc, #60]	; (8010964 <prvAddCurrentTaskToDelayedList+0x94>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	3304      	adds	r3, #4
 801092c:	4619      	mov	r1, r3
 801092e:	4610      	mov	r0, r2
 8010930:	f7fd fcd1 	bl	800e2d6 <vListInsert>
}
 8010934:	e010      	b.n	8010958 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010936:	4b0e      	ldr	r3, [pc, #56]	; (8010970 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	4b0a      	ldr	r3, [pc, #40]	; (8010964 <prvAddCurrentTaskToDelayedList+0x94>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	3304      	adds	r3, #4
 8010940:	4619      	mov	r1, r3
 8010942:	4610      	mov	r0, r2
 8010944:	f7fd fcc7 	bl	800e2d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010948:	4b0a      	ldr	r3, [pc, #40]	; (8010974 <prvAddCurrentTaskToDelayedList+0xa4>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	68ba      	ldr	r2, [r7, #8]
 801094e:	429a      	cmp	r2, r3
 8010950:	d202      	bcs.n	8010958 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010952:	4a08      	ldr	r2, [pc, #32]	; (8010974 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	6013      	str	r3, [r2, #0]
}
 8010958:	bf00      	nop
 801095a:	3710      	adds	r7, #16
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}
 8010960:	20008358 	.word	0x20008358
 8010964:	20007e80 	.word	0x20007e80
 8010968:	20008340 	.word	0x20008340
 801096c:	20008310 	.word	0x20008310
 8010970:	2000830c 	.word	0x2000830c
 8010974:	20008374 	.word	0x20008374

08010978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b08a      	sub	sp, #40	; 0x28
 801097c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801097e:	2300      	movs	r3, #0
 8010980:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010982:	f000 fb15 	bl	8010fb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010986:	4b1d      	ldr	r3, [pc, #116]	; (80109fc <xTimerCreateTimerTask+0x84>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d021      	beq.n	80109d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801098e:	2300      	movs	r3, #0
 8010990:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010992:	2300      	movs	r3, #0
 8010994:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010996:	1d3a      	adds	r2, r7, #4
 8010998:	f107 0108 	add.w	r1, r7, #8
 801099c:	f107 030c 	add.w	r3, r7, #12
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fd fc2d 	bl	800e200 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80109a6:	6879      	ldr	r1, [r7, #4]
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	68fa      	ldr	r2, [r7, #12]
 80109ac:	9202      	str	r2, [sp, #8]
 80109ae:	9301      	str	r3, [sp, #4]
 80109b0:	2302      	movs	r3, #2
 80109b2:	9300      	str	r3, [sp, #0]
 80109b4:	2300      	movs	r3, #0
 80109b6:	460a      	mov	r2, r1
 80109b8:	4911      	ldr	r1, [pc, #68]	; (8010a00 <xTimerCreateTimerTask+0x88>)
 80109ba:	4812      	ldr	r0, [pc, #72]	; (8010a04 <xTimerCreateTimerTask+0x8c>)
 80109bc:	f7fe fe3e 	bl	800f63c <xTaskCreateStatic>
 80109c0:	4603      	mov	r3, r0
 80109c2:	4a11      	ldr	r2, [pc, #68]	; (8010a08 <xTimerCreateTimerTask+0x90>)
 80109c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80109c6:	4b10      	ldr	r3, [pc, #64]	; (8010a08 <xTimerCreateTimerTask+0x90>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d001      	beq.n	80109d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80109ce:	2301      	movs	r3, #1
 80109d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d10c      	bne.n	80109f2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80109d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109dc:	b672      	cpsid	i
 80109de:	f383 8811 	msr	BASEPRI, r3
 80109e2:	f3bf 8f6f 	isb	sy
 80109e6:	f3bf 8f4f 	dsb	sy
 80109ea:	b662      	cpsie	i
 80109ec:	613b      	str	r3, [r7, #16]
}
 80109ee:	bf00      	nop
 80109f0:	e7fe      	b.n	80109f0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80109f2:	697b      	ldr	r3, [r7, #20]
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3718      	adds	r7, #24
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}
 80109fc:	200083b8 	.word	0x200083b8
 8010a00:	080296e0 	.word	0x080296e0
 8010a04:	08010b49 	.word	0x08010b49
 8010a08:	200083bc 	.word	0x200083bc

08010a0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b08a      	sub	sp, #40	; 0x28
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
 8010a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d10c      	bne.n	8010a3e <xTimerGenericCommand+0x32>
	__asm volatile
 8010a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a28:	b672      	cpsid	i
 8010a2a:	f383 8811 	msr	BASEPRI, r3
 8010a2e:	f3bf 8f6f 	isb	sy
 8010a32:	f3bf 8f4f 	dsb	sy
 8010a36:	b662      	cpsie	i
 8010a38:	623b      	str	r3, [r7, #32]
}
 8010a3a:	bf00      	nop
 8010a3c:	e7fe      	b.n	8010a3c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010a3e:	4b1a      	ldr	r3, [pc, #104]	; (8010aa8 <xTimerGenericCommand+0x9c>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d02a      	beq.n	8010a9c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	2b05      	cmp	r3, #5
 8010a56:	dc18      	bgt.n	8010a8a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010a58:	f7ff fda8 	bl	80105ac <xTaskGetSchedulerState>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	d109      	bne.n	8010a76 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010a62:	4b11      	ldr	r3, [pc, #68]	; (8010aa8 <xTimerGenericCommand+0x9c>)
 8010a64:	6818      	ldr	r0, [r3, #0]
 8010a66:	f107 0110 	add.w	r1, r7, #16
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a6e:	f7fd ff13 	bl	800e898 <xQueueGenericSend>
 8010a72:	6278      	str	r0, [r7, #36]	; 0x24
 8010a74:	e012      	b.n	8010a9c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010a76:	4b0c      	ldr	r3, [pc, #48]	; (8010aa8 <xTimerGenericCommand+0x9c>)
 8010a78:	6818      	ldr	r0, [r3, #0]
 8010a7a:	f107 0110 	add.w	r1, r7, #16
 8010a7e:	2300      	movs	r3, #0
 8010a80:	2200      	movs	r2, #0
 8010a82:	f7fd ff09 	bl	800e898 <xQueueGenericSend>
 8010a86:	6278      	str	r0, [r7, #36]	; 0x24
 8010a88:	e008      	b.n	8010a9c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a8a:	4b07      	ldr	r3, [pc, #28]	; (8010aa8 <xTimerGenericCommand+0x9c>)
 8010a8c:	6818      	ldr	r0, [r3, #0]
 8010a8e:	f107 0110 	add.w	r1, r7, #16
 8010a92:	2300      	movs	r3, #0
 8010a94:	683a      	ldr	r2, [r7, #0]
 8010a96:	f7fe f805 	bl	800eaa4 <xQueueGenericSendFromISR>
 8010a9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3728      	adds	r7, #40	; 0x28
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	200083b8 	.word	0x200083b8

08010aac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b088      	sub	sp, #32
 8010ab0:	af02      	add	r7, sp, #8
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ab6:	4b23      	ldr	r3, [pc, #140]	; (8010b44 <prvProcessExpiredTimer+0x98>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	68db      	ldr	r3, [r3, #12]
 8010abe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	3304      	adds	r3, #4
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fd fc3f 	bl	800e348 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ad0:	f003 0304 	and.w	r3, r3, #4
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d024      	beq.n	8010b22 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	699a      	ldr	r2, [r3, #24]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	18d1      	adds	r1, r2, r3
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	683a      	ldr	r2, [r7, #0]
 8010ae4:	6978      	ldr	r0, [r7, #20]
 8010ae6:	f000 f8d3 	bl	8010c90 <prvInsertTimerInActiveList>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d021      	beq.n	8010b34 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010af0:	2300      	movs	r3, #0
 8010af2:	9300      	str	r3, [sp, #0]
 8010af4:	2300      	movs	r3, #0
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	2100      	movs	r1, #0
 8010afa:	6978      	ldr	r0, [r7, #20]
 8010afc:	f7ff ff86 	bl	8010a0c <xTimerGenericCommand>
 8010b00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d115      	bne.n	8010b34 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8010b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0c:	b672      	cpsid	i
 8010b0e:	f383 8811 	msr	BASEPRI, r3
 8010b12:	f3bf 8f6f 	isb	sy
 8010b16:	f3bf 8f4f 	dsb	sy
 8010b1a:	b662      	cpsie	i
 8010b1c:	60fb      	str	r3, [r7, #12]
}
 8010b1e:	bf00      	nop
 8010b20:	e7fe      	b.n	8010b20 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b28:	f023 0301 	bic.w	r3, r3, #1
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	6a1b      	ldr	r3, [r3, #32]
 8010b38:	6978      	ldr	r0, [r7, #20]
 8010b3a:	4798      	blx	r3
}
 8010b3c:	bf00      	nop
 8010b3e:	3718      	adds	r7, #24
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	200083b0 	.word	0x200083b0

08010b48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b50:	f107 0308 	add.w	r3, r7, #8
 8010b54:	4618      	mov	r0, r3
 8010b56:	f000 f857 	bl	8010c08 <prvGetNextExpireTime>
 8010b5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	4619      	mov	r1, r3
 8010b60:	68f8      	ldr	r0, [r7, #12]
 8010b62:	f000 f803 	bl	8010b6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010b66:	f000 f8d5 	bl	8010d14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b6a:	e7f1      	b.n	8010b50 <prvTimerTask+0x8>

08010b6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b084      	sub	sp, #16
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010b76:	f7ff f8dd 	bl	800fd34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b7a:	f107 0308 	add.w	r3, r7, #8
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f000 f866 	bl	8010c50 <prvSampleTimeNow>
 8010b84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d130      	bne.n	8010bee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d10a      	bne.n	8010ba8 <prvProcessTimerOrBlockTask+0x3c>
 8010b92:	687a      	ldr	r2, [r7, #4]
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d806      	bhi.n	8010ba8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010b9a:	f7ff f8d9 	bl	800fd50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010b9e:	68f9      	ldr	r1, [r7, #12]
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7ff ff83 	bl	8010aac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010ba6:	e024      	b.n	8010bf2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d008      	beq.n	8010bc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010bae:	4b13      	ldr	r3, [pc, #76]	; (8010bfc <prvProcessTimerOrBlockTask+0x90>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d101      	bne.n	8010bbc <prvProcessTimerOrBlockTask+0x50>
 8010bb8:	2301      	movs	r3, #1
 8010bba:	e000      	b.n	8010bbe <prvProcessTimerOrBlockTask+0x52>
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010bc0:	4b0f      	ldr	r3, [pc, #60]	; (8010c00 <prvProcessTimerOrBlockTask+0x94>)
 8010bc2:	6818      	ldr	r0, [r3, #0]
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	1ad3      	subs	r3, r2, r3
 8010bca:	683a      	ldr	r2, [r7, #0]
 8010bcc:	4619      	mov	r1, r3
 8010bce:	f7fe fd01 	bl	800f5d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010bd2:	f7ff f8bd 	bl	800fd50 <xTaskResumeAll>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d10a      	bne.n	8010bf2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010bdc:	4b09      	ldr	r3, [pc, #36]	; (8010c04 <prvProcessTimerOrBlockTask+0x98>)
 8010bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010be2:	601a      	str	r2, [r3, #0]
 8010be4:	f3bf 8f4f 	dsb	sy
 8010be8:	f3bf 8f6f 	isb	sy
}
 8010bec:	e001      	b.n	8010bf2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010bee:	f7ff f8af 	bl	800fd50 <xTaskResumeAll>
}
 8010bf2:	bf00      	nop
 8010bf4:	3710      	adds	r7, #16
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	200083b4 	.word	0x200083b4
 8010c00:	200083b8 	.word	0x200083b8
 8010c04:	e000ed04 	.word	0xe000ed04

08010c08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b085      	sub	sp, #20
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010c10:	4b0e      	ldr	r3, [pc, #56]	; (8010c4c <prvGetNextExpireTime+0x44>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d101      	bne.n	8010c1e <prvGetNextExpireTime+0x16>
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	e000      	b.n	8010c20 <prvGetNextExpireTime+0x18>
 8010c1e:	2200      	movs	r2, #0
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d105      	bne.n	8010c38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c2c:	4b07      	ldr	r3, [pc, #28]	; (8010c4c <prvGetNextExpireTime+0x44>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	60fb      	str	r3, [r7, #12]
 8010c36:	e001      	b.n	8010c3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3714      	adds	r7, #20
 8010c42:	46bd      	mov	sp, r7
 8010c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c48:	4770      	bx	lr
 8010c4a:	bf00      	nop
 8010c4c:	200083b0 	.word	0x200083b0

08010c50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010c58:	f7ff f91a 	bl	800fe90 <xTaskGetTickCount>
 8010c5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010c5e:	4b0b      	ldr	r3, [pc, #44]	; (8010c8c <prvSampleTimeNow+0x3c>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68fa      	ldr	r2, [r7, #12]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d205      	bcs.n	8010c74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010c68:	f000 f93c 	bl	8010ee4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2201      	movs	r2, #1
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	e002      	b.n	8010c7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2200      	movs	r2, #0
 8010c78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010c7a:	4a04      	ldr	r2, [pc, #16]	; (8010c8c <prvSampleTimeNow+0x3c>)
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010c80:	68fb      	ldr	r3, [r7, #12]
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	200083c0 	.word	0x200083c0

08010c90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b086      	sub	sp, #24
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
 8010c9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	68ba      	ldr	r2, [r7, #8]
 8010ca6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	68fa      	ldr	r2, [r7, #12]
 8010cac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010cae:	68ba      	ldr	r2, [r7, #8]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d812      	bhi.n	8010cdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	1ad2      	subs	r2, r2, r3
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	699b      	ldr	r3, [r3, #24]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d302      	bcc.n	8010cca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	617b      	str	r3, [r7, #20]
 8010cc8:	e01b      	b.n	8010d02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010cca:	4b10      	ldr	r3, [pc, #64]	; (8010d0c <prvInsertTimerInActiveList+0x7c>)
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	3304      	adds	r3, #4
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	4610      	mov	r0, r2
 8010cd6:	f7fd fafe 	bl	800e2d6 <vListInsert>
 8010cda:	e012      	b.n	8010d02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010cdc:	687a      	ldr	r2, [r7, #4]
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d206      	bcs.n	8010cf2 <prvInsertTimerInActiveList+0x62>
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d302      	bcc.n	8010cf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010cec:	2301      	movs	r3, #1
 8010cee:	617b      	str	r3, [r7, #20]
 8010cf0:	e007      	b.n	8010d02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010cf2:	4b07      	ldr	r3, [pc, #28]	; (8010d10 <prvInsertTimerInActiveList+0x80>)
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	3304      	adds	r3, #4
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	4610      	mov	r0, r2
 8010cfe:	f7fd faea 	bl	800e2d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010d02:	697b      	ldr	r3, [r7, #20]
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3718      	adds	r7, #24
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	200083b4 	.word	0x200083b4
 8010d10:	200083b0 	.word	0x200083b0

08010d14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b08e      	sub	sp, #56	; 0x38
 8010d18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d1a:	e0d0      	b.n	8010ebe <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	da1a      	bge.n	8010d58 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010d22:	1d3b      	adds	r3, r7, #4
 8010d24:	3304      	adds	r3, #4
 8010d26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d10c      	bne.n	8010d48 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8010d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d32:	b672      	cpsid	i
 8010d34:	f383 8811 	msr	BASEPRI, r3
 8010d38:	f3bf 8f6f 	isb	sy
 8010d3c:	f3bf 8f4f 	dsb	sy
 8010d40:	b662      	cpsie	i
 8010d42:	61fb      	str	r3, [r7, #28]
}
 8010d44:	bf00      	nop
 8010d46:	e7fe      	b.n	8010d46 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d4e:	6850      	ldr	r0, [r2, #4]
 8010d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d52:	6892      	ldr	r2, [r2, #8]
 8010d54:	4611      	mov	r1, r2
 8010d56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	f2c0 80ae 	blt.w	8010ebc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d66:	695b      	ldr	r3, [r3, #20]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d004      	beq.n	8010d76 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6e:	3304      	adds	r3, #4
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fd fae9 	bl	800e348 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d76:	463b      	mov	r3, r7
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7ff ff69 	bl	8010c50 <prvSampleTimeNow>
 8010d7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2b09      	cmp	r3, #9
 8010d84:	f200 809b 	bhi.w	8010ebe <prvProcessReceivedCommands+0x1aa>
 8010d88:	a201      	add	r2, pc, #4	; (adr r2, 8010d90 <prvProcessReceivedCommands+0x7c>)
 8010d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d8e:	bf00      	nop
 8010d90:	08010db9 	.word	0x08010db9
 8010d94:	08010db9 	.word	0x08010db9
 8010d98:	08010db9 	.word	0x08010db9
 8010d9c:	08010e31 	.word	0x08010e31
 8010da0:	08010e45 	.word	0x08010e45
 8010da4:	08010e93 	.word	0x08010e93
 8010da8:	08010db9 	.word	0x08010db9
 8010dac:	08010db9 	.word	0x08010db9
 8010db0:	08010e31 	.word	0x08010e31
 8010db4:	08010e45 	.word	0x08010e45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dbe:	f043 0301 	orr.w	r3, r3, #1
 8010dc2:	b2da      	uxtb	r2, r3
 8010dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010dca:	68ba      	ldr	r2, [r7, #8]
 8010dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dce:	699b      	ldr	r3, [r3, #24]
 8010dd0:	18d1      	adds	r1, r2, r3
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dd8:	f7ff ff5a 	bl	8010c90 <prvInsertTimerInActiveList>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d06d      	beq.n	8010ebe <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de4:	6a1b      	ldr	r3, [r3, #32]
 8010de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010de8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010df0:	f003 0304 	and.w	r3, r3, #4
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d062      	beq.n	8010ebe <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010df8:	68ba      	ldr	r2, [r7, #8]
 8010dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfc:	699b      	ldr	r3, [r3, #24]
 8010dfe:	441a      	add	r2, r3
 8010e00:	2300      	movs	r3, #0
 8010e02:	9300      	str	r3, [sp, #0]
 8010e04:	2300      	movs	r3, #0
 8010e06:	2100      	movs	r1, #0
 8010e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e0a:	f7ff fdff 	bl	8010a0c <xTimerGenericCommand>
 8010e0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010e10:	6a3b      	ldr	r3, [r7, #32]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d153      	bne.n	8010ebe <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8010e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1a:	b672      	cpsid	i
 8010e1c:	f383 8811 	msr	BASEPRI, r3
 8010e20:	f3bf 8f6f 	isb	sy
 8010e24:	f3bf 8f4f 	dsb	sy
 8010e28:	b662      	cpsie	i
 8010e2a:	61bb      	str	r3, [r7, #24]
}
 8010e2c:	bf00      	nop
 8010e2e:	e7fe      	b.n	8010e2e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e36:	f023 0301 	bic.w	r3, r3, #1
 8010e3a:	b2da      	uxtb	r2, r3
 8010e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010e42:	e03c      	b.n	8010ebe <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e4a:	f043 0301 	orr.w	r3, r3, #1
 8010e4e:	b2da      	uxtb	r2, r3
 8010e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010e56:	68ba      	ldr	r2, [r7, #8]
 8010e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5e:	699b      	ldr	r3, [r3, #24]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d10c      	bne.n	8010e7e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8010e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e68:	b672      	cpsid	i
 8010e6a:	f383 8811 	msr	BASEPRI, r3
 8010e6e:	f3bf 8f6f 	isb	sy
 8010e72:	f3bf 8f4f 	dsb	sy
 8010e76:	b662      	cpsie	i
 8010e78:	617b      	str	r3, [r7, #20]
}
 8010e7a:	bf00      	nop
 8010e7c:	e7fe      	b.n	8010e7c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e80:	699a      	ldr	r2, [r3, #24]
 8010e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e84:	18d1      	adds	r1, r2, r3
 8010e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e8c:	f7ff ff00 	bl	8010c90 <prvInsertTimerInActiveList>
					break;
 8010e90:	e015      	b.n	8010ebe <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e98:	f003 0302 	and.w	r3, r3, #2
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d103      	bne.n	8010ea8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8010ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ea2:	f000 fbc9 	bl	8011638 <vPortFree>
 8010ea6:	e00a      	b.n	8010ebe <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010eae:	f023 0301 	bic.w	r3, r3, #1
 8010eb2:	b2da      	uxtb	r2, r3
 8010eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010eba:	e000      	b.n	8010ebe <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010ebc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ebe:	4b08      	ldr	r3, [pc, #32]	; (8010ee0 <prvProcessReceivedCommands+0x1cc>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	1d39      	adds	r1, r7, #4
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fd ff22 	bl	800ed10 <xQueueReceive>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f47f af24 	bne.w	8010d1c <prvProcessReceivedCommands+0x8>
	}
}
 8010ed4:	bf00      	nop
 8010ed6:	bf00      	nop
 8010ed8:	3730      	adds	r7, #48	; 0x30
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	200083b8 	.word	0x200083b8

08010ee4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b088      	sub	sp, #32
 8010ee8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010eea:	e04a      	b.n	8010f82 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010eec:	4b2e      	ldr	r3, [pc, #184]	; (8010fa8 <prvSwitchTimerLists+0xc4>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ef6:	4b2c      	ldr	r3, [pc, #176]	; (8010fa8 <prvSwitchTimerLists+0xc4>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	68db      	ldr	r3, [r3, #12]
 8010efc:	68db      	ldr	r3, [r3, #12]
 8010efe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	3304      	adds	r3, #4
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fd fa1f 	bl	800e348 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	6a1b      	ldr	r3, [r3, #32]
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f18:	f003 0304 	and.w	r3, r3, #4
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d030      	beq.n	8010f82 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	699b      	ldr	r3, [r3, #24]
 8010f24:	693a      	ldr	r2, [r7, #16]
 8010f26:	4413      	add	r3, r2
 8010f28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010f2a:	68ba      	ldr	r2, [r7, #8]
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d90e      	bls.n	8010f50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	68ba      	ldr	r2, [r7, #8]
 8010f36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	68fa      	ldr	r2, [r7, #12]
 8010f3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f3e:	4b1a      	ldr	r3, [pc, #104]	; (8010fa8 <prvSwitchTimerLists+0xc4>)
 8010f40:	681a      	ldr	r2, [r3, #0]
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	3304      	adds	r3, #4
 8010f46:	4619      	mov	r1, r3
 8010f48:	4610      	mov	r0, r2
 8010f4a:	f7fd f9c4 	bl	800e2d6 <vListInsert>
 8010f4e:	e018      	b.n	8010f82 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010f50:	2300      	movs	r3, #0
 8010f52:	9300      	str	r3, [sp, #0]
 8010f54:	2300      	movs	r3, #0
 8010f56:	693a      	ldr	r2, [r7, #16]
 8010f58:	2100      	movs	r1, #0
 8010f5a:	68f8      	ldr	r0, [r7, #12]
 8010f5c:	f7ff fd56 	bl	8010a0c <xTimerGenericCommand>
 8010f60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d10c      	bne.n	8010f82 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8010f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6c:	b672      	cpsid	i
 8010f6e:	f383 8811 	msr	BASEPRI, r3
 8010f72:	f3bf 8f6f 	isb	sy
 8010f76:	f3bf 8f4f 	dsb	sy
 8010f7a:	b662      	cpsie	i
 8010f7c:	603b      	str	r3, [r7, #0]
}
 8010f7e:	bf00      	nop
 8010f80:	e7fe      	b.n	8010f80 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f82:	4b09      	ldr	r3, [pc, #36]	; (8010fa8 <prvSwitchTimerLists+0xc4>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d1af      	bne.n	8010eec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010f8c:	4b06      	ldr	r3, [pc, #24]	; (8010fa8 <prvSwitchTimerLists+0xc4>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010f92:	4b06      	ldr	r3, [pc, #24]	; (8010fac <prvSwitchTimerLists+0xc8>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4a04      	ldr	r2, [pc, #16]	; (8010fa8 <prvSwitchTimerLists+0xc4>)
 8010f98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010f9a:	4a04      	ldr	r2, [pc, #16]	; (8010fac <prvSwitchTimerLists+0xc8>)
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	6013      	str	r3, [r2, #0]
}
 8010fa0:	bf00      	nop
 8010fa2:	3718      	adds	r7, #24
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	200083b0 	.word	0x200083b0
 8010fac:	200083b4 	.word	0x200083b4

08010fb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b082      	sub	sp, #8
 8010fb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010fb6:	f000 f949 	bl	801124c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010fba:	4b15      	ldr	r3, [pc, #84]	; (8011010 <prvCheckForValidListAndQueue+0x60>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d120      	bne.n	8011004 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010fc2:	4814      	ldr	r0, [pc, #80]	; (8011014 <prvCheckForValidListAndQueue+0x64>)
 8010fc4:	f7fd f936 	bl	800e234 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010fc8:	4813      	ldr	r0, [pc, #76]	; (8011018 <prvCheckForValidListAndQueue+0x68>)
 8010fca:	f7fd f933 	bl	800e234 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010fce:	4b13      	ldr	r3, [pc, #76]	; (801101c <prvCheckForValidListAndQueue+0x6c>)
 8010fd0:	4a10      	ldr	r2, [pc, #64]	; (8011014 <prvCheckForValidListAndQueue+0x64>)
 8010fd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010fd4:	4b12      	ldr	r3, [pc, #72]	; (8011020 <prvCheckForValidListAndQueue+0x70>)
 8010fd6:	4a10      	ldr	r2, [pc, #64]	; (8011018 <prvCheckForValidListAndQueue+0x68>)
 8010fd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010fda:	2300      	movs	r3, #0
 8010fdc:	9300      	str	r3, [sp, #0]
 8010fde:	4b11      	ldr	r3, [pc, #68]	; (8011024 <prvCheckForValidListAndQueue+0x74>)
 8010fe0:	4a11      	ldr	r2, [pc, #68]	; (8011028 <prvCheckForValidListAndQueue+0x78>)
 8010fe2:	2110      	movs	r1, #16
 8010fe4:	200a      	movs	r0, #10
 8010fe6:	f7fd fa43 	bl	800e470 <xQueueGenericCreateStatic>
 8010fea:	4603      	mov	r3, r0
 8010fec:	4a08      	ldr	r2, [pc, #32]	; (8011010 <prvCheckForValidListAndQueue+0x60>)
 8010fee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ff0:	4b07      	ldr	r3, [pc, #28]	; (8011010 <prvCheckForValidListAndQueue+0x60>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d005      	beq.n	8011004 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010ff8:	4b05      	ldr	r3, [pc, #20]	; (8011010 <prvCheckForValidListAndQueue+0x60>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	490b      	ldr	r1, [pc, #44]	; (801102c <prvCheckForValidListAndQueue+0x7c>)
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7fe fa94 	bl	800f52c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011004:	f000 f956 	bl	80112b4 <vPortExitCritical>
}
 8011008:	bf00      	nop
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	200083b8 	.word	0x200083b8
 8011014:	20008388 	.word	0x20008388
 8011018:	2000839c 	.word	0x2000839c
 801101c:	200083b0 	.word	0x200083b0
 8011020:	200083b4 	.word	0x200083b4
 8011024:	20008464 	.word	0x20008464
 8011028:	200083c4 	.word	0x200083c4
 801102c:	080296e8 	.word	0x080296e8

08011030 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011030:	b480      	push	{r7}
 8011032:	b085      	sub	sp, #20
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	3b04      	subs	r3, #4
 8011040:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	3b04      	subs	r3, #4
 801104e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	f023 0201 	bic.w	r2, r3, #1
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	3b04      	subs	r3, #4
 801105e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011060:	4a0c      	ldr	r2, [pc, #48]	; (8011094 <pxPortInitialiseStack+0x64>)
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	3b14      	subs	r3, #20
 801106a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	3b04      	subs	r3, #4
 8011076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	f06f 0202 	mvn.w	r2, #2
 801107e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	3b20      	subs	r3, #32
 8011084:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011086:	68fb      	ldr	r3, [r7, #12]
}
 8011088:	4618      	mov	r0, r3
 801108a:	3714      	adds	r7, #20
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr
 8011094:	08011099 	.word	0x08011099

08011098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011098:	b480      	push	{r7}
 801109a:	b085      	sub	sp, #20
 801109c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801109e:	2300      	movs	r3, #0
 80110a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80110a2:	4b14      	ldr	r3, [pc, #80]	; (80110f4 <prvTaskExitError+0x5c>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110aa:	d00c      	beq.n	80110c6 <prvTaskExitError+0x2e>
	__asm volatile
 80110ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b0:	b672      	cpsid	i
 80110b2:	f383 8811 	msr	BASEPRI, r3
 80110b6:	f3bf 8f6f 	isb	sy
 80110ba:	f3bf 8f4f 	dsb	sy
 80110be:	b662      	cpsie	i
 80110c0:	60fb      	str	r3, [r7, #12]
}
 80110c2:	bf00      	nop
 80110c4:	e7fe      	b.n	80110c4 <prvTaskExitError+0x2c>
	__asm volatile
 80110c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ca:	b672      	cpsid	i
 80110cc:	f383 8811 	msr	BASEPRI, r3
 80110d0:	f3bf 8f6f 	isb	sy
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	b662      	cpsie	i
 80110da:	60bb      	str	r3, [r7, #8]
}
 80110dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80110de:	bf00      	nop
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d0fc      	beq.n	80110e0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80110e6:	bf00      	nop
 80110e8:	bf00      	nop
 80110ea:	3714      	adds	r7, #20
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr
 80110f4:	200000ec 	.word	0x200000ec
	...

08011100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011100:	4b07      	ldr	r3, [pc, #28]	; (8011120 <pxCurrentTCBConst2>)
 8011102:	6819      	ldr	r1, [r3, #0]
 8011104:	6808      	ldr	r0, [r1, #0]
 8011106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110a:	f380 8809 	msr	PSP, r0
 801110e:	f3bf 8f6f 	isb	sy
 8011112:	f04f 0000 	mov.w	r0, #0
 8011116:	f380 8811 	msr	BASEPRI, r0
 801111a:	4770      	bx	lr
 801111c:	f3af 8000 	nop.w

08011120 <pxCurrentTCBConst2>:
 8011120:	20007e80 	.word	0x20007e80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011124:	bf00      	nop
 8011126:	bf00      	nop

08011128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011128:	4808      	ldr	r0, [pc, #32]	; (801114c <prvPortStartFirstTask+0x24>)
 801112a:	6800      	ldr	r0, [r0, #0]
 801112c:	6800      	ldr	r0, [r0, #0]
 801112e:	f380 8808 	msr	MSP, r0
 8011132:	f04f 0000 	mov.w	r0, #0
 8011136:	f380 8814 	msr	CONTROL, r0
 801113a:	b662      	cpsie	i
 801113c:	b661      	cpsie	f
 801113e:	f3bf 8f4f 	dsb	sy
 8011142:	f3bf 8f6f 	isb	sy
 8011146:	df00      	svc	0
 8011148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801114a:	bf00      	nop
 801114c:	e000ed08 	.word	0xe000ed08

08011150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011156:	4b37      	ldr	r3, [pc, #220]	; (8011234 <xPortStartScheduler+0xe4>)
 8011158:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	b2db      	uxtb	r3, r3
 8011160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	22ff      	movs	r2, #255	; 0xff
 8011166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	b2db      	uxtb	r3, r3
 801116e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011170:	78fb      	ldrb	r3, [r7, #3]
 8011172:	b2db      	uxtb	r3, r3
 8011174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011178:	b2da      	uxtb	r2, r3
 801117a:	4b2f      	ldr	r3, [pc, #188]	; (8011238 <xPortStartScheduler+0xe8>)
 801117c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801117e:	4b2f      	ldr	r3, [pc, #188]	; (801123c <xPortStartScheduler+0xec>)
 8011180:	2207      	movs	r2, #7
 8011182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011184:	e009      	b.n	801119a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011186:	4b2d      	ldr	r3, [pc, #180]	; (801123c <xPortStartScheduler+0xec>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	3b01      	subs	r3, #1
 801118c:	4a2b      	ldr	r2, [pc, #172]	; (801123c <xPortStartScheduler+0xec>)
 801118e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011190:	78fb      	ldrb	r3, [r7, #3]
 8011192:	b2db      	uxtb	r3, r3
 8011194:	005b      	lsls	r3, r3, #1
 8011196:	b2db      	uxtb	r3, r3
 8011198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801119a:	78fb      	ldrb	r3, [r7, #3]
 801119c:	b2db      	uxtb	r3, r3
 801119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111a2:	2b80      	cmp	r3, #128	; 0x80
 80111a4:	d0ef      	beq.n	8011186 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80111a6:	4b25      	ldr	r3, [pc, #148]	; (801123c <xPortStartScheduler+0xec>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f1c3 0307 	rsb	r3, r3, #7
 80111ae:	2b04      	cmp	r3, #4
 80111b0:	d00c      	beq.n	80111cc <xPortStartScheduler+0x7c>
	__asm volatile
 80111b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b6:	b672      	cpsid	i
 80111b8:	f383 8811 	msr	BASEPRI, r3
 80111bc:	f3bf 8f6f 	isb	sy
 80111c0:	f3bf 8f4f 	dsb	sy
 80111c4:	b662      	cpsie	i
 80111c6:	60bb      	str	r3, [r7, #8]
}
 80111c8:	bf00      	nop
 80111ca:	e7fe      	b.n	80111ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80111cc:	4b1b      	ldr	r3, [pc, #108]	; (801123c <xPortStartScheduler+0xec>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	021b      	lsls	r3, r3, #8
 80111d2:	4a1a      	ldr	r2, [pc, #104]	; (801123c <xPortStartScheduler+0xec>)
 80111d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80111d6:	4b19      	ldr	r3, [pc, #100]	; (801123c <xPortStartScheduler+0xec>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80111de:	4a17      	ldr	r2, [pc, #92]	; (801123c <xPortStartScheduler+0xec>)
 80111e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	b2da      	uxtb	r2, r3
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80111ea:	4b15      	ldr	r3, [pc, #84]	; (8011240 <xPortStartScheduler+0xf0>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4a14      	ldr	r2, [pc, #80]	; (8011240 <xPortStartScheduler+0xf0>)
 80111f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80111f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80111f6:	4b12      	ldr	r3, [pc, #72]	; (8011240 <xPortStartScheduler+0xf0>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4a11      	ldr	r2, [pc, #68]	; (8011240 <xPortStartScheduler+0xf0>)
 80111fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011200:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011202:	f000 f8dd 	bl	80113c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011206:	4b0f      	ldr	r3, [pc, #60]	; (8011244 <xPortStartScheduler+0xf4>)
 8011208:	2200      	movs	r2, #0
 801120a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801120c:	f000 f8fc 	bl	8011408 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011210:	4b0d      	ldr	r3, [pc, #52]	; (8011248 <xPortStartScheduler+0xf8>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	4a0c      	ldr	r2, [pc, #48]	; (8011248 <xPortStartScheduler+0xf8>)
 8011216:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801121a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801121c:	f7ff ff84 	bl	8011128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011220:	f7fe ff14 	bl	801004c <vTaskSwitchContext>
	prvTaskExitError();
 8011224:	f7ff ff38 	bl	8011098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3710      	adds	r7, #16
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	e000e400 	.word	0xe000e400
 8011238:	200084b4 	.word	0x200084b4
 801123c:	200084b8 	.word	0x200084b8
 8011240:	e000ed20 	.word	0xe000ed20
 8011244:	200000ec 	.word	0x200000ec
 8011248:	e000ef34 	.word	0xe000ef34

0801124c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
	__asm volatile
 8011252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011256:	b672      	cpsid	i
 8011258:	f383 8811 	msr	BASEPRI, r3
 801125c:	f3bf 8f6f 	isb	sy
 8011260:	f3bf 8f4f 	dsb	sy
 8011264:	b662      	cpsie	i
 8011266:	607b      	str	r3, [r7, #4]
}
 8011268:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801126a:	4b10      	ldr	r3, [pc, #64]	; (80112ac <vPortEnterCritical+0x60>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	3301      	adds	r3, #1
 8011270:	4a0e      	ldr	r2, [pc, #56]	; (80112ac <vPortEnterCritical+0x60>)
 8011272:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011274:	4b0d      	ldr	r3, [pc, #52]	; (80112ac <vPortEnterCritical+0x60>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d111      	bne.n	80112a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801127c:	4b0c      	ldr	r3, [pc, #48]	; (80112b0 <vPortEnterCritical+0x64>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	b2db      	uxtb	r3, r3
 8011282:	2b00      	cmp	r3, #0
 8011284:	d00c      	beq.n	80112a0 <vPortEnterCritical+0x54>
	__asm volatile
 8011286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128a:	b672      	cpsid	i
 801128c:	f383 8811 	msr	BASEPRI, r3
 8011290:	f3bf 8f6f 	isb	sy
 8011294:	f3bf 8f4f 	dsb	sy
 8011298:	b662      	cpsie	i
 801129a:	603b      	str	r3, [r7, #0]
}
 801129c:	bf00      	nop
 801129e:	e7fe      	b.n	801129e <vPortEnterCritical+0x52>
	}
}
 80112a0:	bf00      	nop
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr
 80112ac:	200000ec 	.word	0x200000ec
 80112b0:	e000ed04 	.word	0xe000ed04

080112b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80112b4:	b480      	push	{r7}
 80112b6:	b083      	sub	sp, #12
 80112b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80112ba:	4b13      	ldr	r3, [pc, #76]	; (8011308 <vPortExitCritical+0x54>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d10c      	bne.n	80112dc <vPortExitCritical+0x28>
	__asm volatile
 80112c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c6:	b672      	cpsid	i
 80112c8:	f383 8811 	msr	BASEPRI, r3
 80112cc:	f3bf 8f6f 	isb	sy
 80112d0:	f3bf 8f4f 	dsb	sy
 80112d4:	b662      	cpsie	i
 80112d6:	607b      	str	r3, [r7, #4]
}
 80112d8:	bf00      	nop
 80112da:	e7fe      	b.n	80112da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80112dc:	4b0a      	ldr	r3, [pc, #40]	; (8011308 <vPortExitCritical+0x54>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	3b01      	subs	r3, #1
 80112e2:	4a09      	ldr	r2, [pc, #36]	; (8011308 <vPortExitCritical+0x54>)
 80112e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80112e6:	4b08      	ldr	r3, [pc, #32]	; (8011308 <vPortExitCritical+0x54>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d105      	bne.n	80112fa <vPortExitCritical+0x46>
 80112ee:	2300      	movs	r3, #0
 80112f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	f383 8811 	msr	BASEPRI, r3
}
 80112f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80112fa:	bf00      	nop
 80112fc:	370c      	adds	r7, #12
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	200000ec 	.word	0x200000ec
 801130c:	00000000 	.word	0x00000000

08011310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011310:	f3ef 8009 	mrs	r0, PSP
 8011314:	f3bf 8f6f 	isb	sy
 8011318:	4b15      	ldr	r3, [pc, #84]	; (8011370 <pxCurrentTCBConst>)
 801131a:	681a      	ldr	r2, [r3, #0]
 801131c:	f01e 0f10 	tst.w	lr, #16
 8011320:	bf08      	it	eq
 8011322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801132a:	6010      	str	r0, [r2, #0]
 801132c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011334:	b672      	cpsid	i
 8011336:	f380 8811 	msr	BASEPRI, r0
 801133a:	f3bf 8f4f 	dsb	sy
 801133e:	f3bf 8f6f 	isb	sy
 8011342:	b662      	cpsie	i
 8011344:	f7fe fe82 	bl	801004c <vTaskSwitchContext>
 8011348:	f04f 0000 	mov.w	r0, #0
 801134c:	f380 8811 	msr	BASEPRI, r0
 8011350:	bc09      	pop	{r0, r3}
 8011352:	6819      	ldr	r1, [r3, #0]
 8011354:	6808      	ldr	r0, [r1, #0]
 8011356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135a:	f01e 0f10 	tst.w	lr, #16
 801135e:	bf08      	it	eq
 8011360:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011364:	f380 8809 	msr	PSP, r0
 8011368:	f3bf 8f6f 	isb	sy
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop

08011370 <pxCurrentTCBConst>:
 8011370:	20007e80 	.word	0x20007e80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011374:	bf00      	nop
 8011376:	bf00      	nop

08011378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
	__asm volatile
 801137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011382:	b672      	cpsid	i
 8011384:	f383 8811 	msr	BASEPRI, r3
 8011388:	f3bf 8f6f 	isb	sy
 801138c:	f3bf 8f4f 	dsb	sy
 8011390:	b662      	cpsie	i
 8011392:	607b      	str	r3, [r7, #4]
}
 8011394:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011396:	f7fe fd9d 	bl	800fed4 <xTaskIncrementTick>
 801139a:	4603      	mov	r3, r0
 801139c:	2b00      	cmp	r3, #0
 801139e:	d003      	beq.n	80113a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80113a0:	4b06      	ldr	r3, [pc, #24]	; (80113bc <SysTick_Handler+0x44>)
 80113a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113a6:	601a      	str	r2, [r3, #0]
 80113a8:	2300      	movs	r3, #0
 80113aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	f383 8811 	msr	BASEPRI, r3
}
 80113b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80113b4:	bf00      	nop
 80113b6:	3708      	adds	r7, #8
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	e000ed04 	.word	0xe000ed04

080113c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80113c0:	b480      	push	{r7}
 80113c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80113c4:	4b0b      	ldr	r3, [pc, #44]	; (80113f4 <vPortSetupTimerInterrupt+0x34>)
 80113c6:	2200      	movs	r2, #0
 80113c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80113ca:	4b0b      	ldr	r3, [pc, #44]	; (80113f8 <vPortSetupTimerInterrupt+0x38>)
 80113cc:	2200      	movs	r2, #0
 80113ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80113d0:	4b0a      	ldr	r3, [pc, #40]	; (80113fc <vPortSetupTimerInterrupt+0x3c>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	4a0a      	ldr	r2, [pc, #40]	; (8011400 <vPortSetupTimerInterrupt+0x40>)
 80113d6:	fba2 2303 	umull	r2, r3, r2, r3
 80113da:	099b      	lsrs	r3, r3, #6
 80113dc:	4a09      	ldr	r2, [pc, #36]	; (8011404 <vPortSetupTimerInterrupt+0x44>)
 80113de:	3b01      	subs	r3, #1
 80113e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80113e2:	4b04      	ldr	r3, [pc, #16]	; (80113f4 <vPortSetupTimerInterrupt+0x34>)
 80113e4:	2207      	movs	r2, #7
 80113e6:	601a      	str	r2, [r3, #0]
}
 80113e8:	bf00      	nop
 80113ea:	46bd      	mov	sp, r7
 80113ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f0:	4770      	bx	lr
 80113f2:	bf00      	nop
 80113f4:	e000e010 	.word	0xe000e010
 80113f8:	e000e018 	.word	0xe000e018
 80113fc:	20000000 	.word	0x20000000
 8011400:	10624dd3 	.word	0x10624dd3
 8011404:	e000e014 	.word	0xe000e014

08011408 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011408:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011418 <vPortEnableVFP+0x10>
 801140c:	6801      	ldr	r1, [r0, #0]
 801140e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011412:	6001      	str	r1, [r0, #0]
 8011414:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011416:	bf00      	nop
 8011418:	e000ed88 	.word	0xe000ed88

0801141c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801141c:	b480      	push	{r7}
 801141e:	b085      	sub	sp, #20
 8011420:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011422:	f3ef 8305 	mrs	r3, IPSR
 8011426:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2b0f      	cmp	r3, #15
 801142c:	d916      	bls.n	801145c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801142e:	4a19      	ldr	r2, [pc, #100]	; (8011494 <vPortValidateInterruptPriority+0x78>)
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	4413      	add	r3, r2
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011438:	4b17      	ldr	r3, [pc, #92]	; (8011498 <vPortValidateInterruptPriority+0x7c>)
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	7afa      	ldrb	r2, [r7, #11]
 801143e:	429a      	cmp	r2, r3
 8011440:	d20c      	bcs.n	801145c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011446:	b672      	cpsid	i
 8011448:	f383 8811 	msr	BASEPRI, r3
 801144c:	f3bf 8f6f 	isb	sy
 8011450:	f3bf 8f4f 	dsb	sy
 8011454:	b662      	cpsie	i
 8011456:	607b      	str	r3, [r7, #4]
}
 8011458:	bf00      	nop
 801145a:	e7fe      	b.n	801145a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801145c:	4b0f      	ldr	r3, [pc, #60]	; (801149c <vPortValidateInterruptPriority+0x80>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011464:	4b0e      	ldr	r3, [pc, #56]	; (80114a0 <vPortValidateInterruptPriority+0x84>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	429a      	cmp	r2, r3
 801146a:	d90c      	bls.n	8011486 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801146c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011470:	b672      	cpsid	i
 8011472:	f383 8811 	msr	BASEPRI, r3
 8011476:	f3bf 8f6f 	isb	sy
 801147a:	f3bf 8f4f 	dsb	sy
 801147e:	b662      	cpsie	i
 8011480:	603b      	str	r3, [r7, #0]
}
 8011482:	bf00      	nop
 8011484:	e7fe      	b.n	8011484 <vPortValidateInterruptPriority+0x68>
	}
 8011486:	bf00      	nop
 8011488:	3714      	adds	r7, #20
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	e000e3f0 	.word	0xe000e3f0
 8011498:	200084b4 	.word	0x200084b4
 801149c:	e000ed0c 	.word	0xe000ed0c
 80114a0:	200084b8 	.word	0x200084b8

080114a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b08a      	sub	sp, #40	; 0x28
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80114ac:	2300      	movs	r3, #0
 80114ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80114b0:	f7fe fc40 	bl	800fd34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80114b4:	4b5b      	ldr	r3, [pc, #364]	; (8011624 <pvPortMalloc+0x180>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d101      	bne.n	80114c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80114bc:	f000 f91a 	bl	80116f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80114c0:	4b59      	ldr	r3, [pc, #356]	; (8011628 <pvPortMalloc+0x184>)
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	4013      	ands	r3, r2
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f040 8092 	bne.w	80115f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d01f      	beq.n	8011514 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80114d4:	2208      	movs	r2, #8
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	4413      	add	r3, r2
 80114da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f003 0307 	and.w	r3, r3, #7
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d016      	beq.n	8011514 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f023 0307 	bic.w	r3, r3, #7
 80114ec:	3308      	adds	r3, #8
 80114ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f003 0307 	and.w	r3, r3, #7
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d00c      	beq.n	8011514 <pvPortMalloc+0x70>
	__asm volatile
 80114fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114fe:	b672      	cpsid	i
 8011500:	f383 8811 	msr	BASEPRI, r3
 8011504:	f3bf 8f6f 	isb	sy
 8011508:	f3bf 8f4f 	dsb	sy
 801150c:	b662      	cpsie	i
 801150e:	617b      	str	r3, [r7, #20]
}
 8011510:	bf00      	nop
 8011512:	e7fe      	b.n	8011512 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d06b      	beq.n	80115f2 <pvPortMalloc+0x14e>
 801151a:	4b44      	ldr	r3, [pc, #272]	; (801162c <pvPortMalloc+0x188>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	429a      	cmp	r2, r3
 8011522:	d866      	bhi.n	80115f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011524:	4b42      	ldr	r3, [pc, #264]	; (8011630 <pvPortMalloc+0x18c>)
 8011526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011528:	4b41      	ldr	r3, [pc, #260]	; (8011630 <pvPortMalloc+0x18c>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801152e:	e004      	b.n	801153a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	687a      	ldr	r2, [r7, #4]
 8011540:	429a      	cmp	r2, r3
 8011542:	d903      	bls.n	801154c <pvPortMalloc+0xa8>
 8011544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1f1      	bne.n	8011530 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801154c:	4b35      	ldr	r3, [pc, #212]	; (8011624 <pvPortMalloc+0x180>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011552:	429a      	cmp	r2, r3
 8011554:	d04d      	beq.n	80115f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011556:	6a3b      	ldr	r3, [r7, #32]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2208      	movs	r2, #8
 801155c:	4413      	add	r3, r2
 801155e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011562:	681a      	ldr	r2, [r3, #0]
 8011564:	6a3b      	ldr	r3, [r7, #32]
 8011566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156a:	685a      	ldr	r2, [r3, #4]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	1ad2      	subs	r2, r2, r3
 8011570:	2308      	movs	r3, #8
 8011572:	005b      	lsls	r3, r3, #1
 8011574:	429a      	cmp	r2, r3
 8011576:	d921      	bls.n	80115bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	4413      	add	r3, r2
 801157e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	f003 0307 	and.w	r3, r3, #7
 8011586:	2b00      	cmp	r3, #0
 8011588:	d00c      	beq.n	80115a4 <pvPortMalloc+0x100>
	__asm volatile
 801158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158e:	b672      	cpsid	i
 8011590:	f383 8811 	msr	BASEPRI, r3
 8011594:	f3bf 8f6f 	isb	sy
 8011598:	f3bf 8f4f 	dsb	sy
 801159c:	b662      	cpsie	i
 801159e:	613b      	str	r3, [r7, #16]
}
 80115a0:	bf00      	nop
 80115a2:	e7fe      	b.n	80115a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80115a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a6:	685a      	ldr	r2, [r3, #4]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	1ad2      	subs	r2, r2, r3
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80115b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80115b6:	69b8      	ldr	r0, [r7, #24]
 80115b8:	f000 f8fe 	bl	80117b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80115bc:	4b1b      	ldr	r3, [pc, #108]	; (801162c <pvPortMalloc+0x188>)
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	4a19      	ldr	r2, [pc, #100]	; (801162c <pvPortMalloc+0x188>)
 80115c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80115ca:	4b18      	ldr	r3, [pc, #96]	; (801162c <pvPortMalloc+0x188>)
 80115cc:	681a      	ldr	r2, [r3, #0]
 80115ce:	4b19      	ldr	r3, [pc, #100]	; (8011634 <pvPortMalloc+0x190>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d203      	bcs.n	80115de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80115d6:	4b15      	ldr	r3, [pc, #84]	; (801162c <pvPortMalloc+0x188>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	4a16      	ldr	r2, [pc, #88]	; (8011634 <pvPortMalloc+0x190>)
 80115dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80115de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e0:	685a      	ldr	r2, [r3, #4]
 80115e2:	4b11      	ldr	r3, [pc, #68]	; (8011628 <pvPortMalloc+0x184>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	431a      	orrs	r2, r3
 80115e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80115ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ee:	2200      	movs	r2, #0
 80115f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80115f2:	f7fe fbad 	bl	800fd50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	f003 0307 	and.w	r3, r3, #7
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d00c      	beq.n	801161a <pvPortMalloc+0x176>
	__asm volatile
 8011600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011604:	b672      	cpsid	i
 8011606:	f383 8811 	msr	BASEPRI, r3
 801160a:	f3bf 8f6f 	isb	sy
 801160e:	f3bf 8f4f 	dsb	sy
 8011612:	b662      	cpsie	i
 8011614:	60fb      	str	r3, [r7, #12]
}
 8011616:	bf00      	nop
 8011618:	e7fe      	b.n	8011618 <pvPortMalloc+0x174>
	return pvReturn;
 801161a:	69fb      	ldr	r3, [r7, #28]
}
 801161c:	4618      	mov	r0, r3
 801161e:	3728      	adds	r7, #40	; 0x28
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}
 8011624:	20016f24 	.word	0x20016f24
 8011628:	20016f30 	.word	0x20016f30
 801162c:	20016f28 	.word	0x20016f28
 8011630:	20016f1c 	.word	0x20016f1c
 8011634:	20016f2c 	.word	0x20016f2c

08011638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b086      	sub	sp, #24
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d04c      	beq.n	80116e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801164a:	2308      	movs	r3, #8
 801164c:	425b      	negs	r3, r3
 801164e:	697a      	ldr	r2, [r7, #20]
 8011650:	4413      	add	r3, r2
 8011652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	4b23      	ldr	r3, [pc, #140]	; (80116ec <vPortFree+0xb4>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	4013      	ands	r3, r2
 8011662:	2b00      	cmp	r3, #0
 8011664:	d10c      	bne.n	8011680 <vPortFree+0x48>
	__asm volatile
 8011666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801166a:	b672      	cpsid	i
 801166c:	f383 8811 	msr	BASEPRI, r3
 8011670:	f3bf 8f6f 	isb	sy
 8011674:	f3bf 8f4f 	dsb	sy
 8011678:	b662      	cpsie	i
 801167a:	60fb      	str	r3, [r7, #12]
}
 801167c:	bf00      	nop
 801167e:	e7fe      	b.n	801167e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d00c      	beq.n	80116a2 <vPortFree+0x6a>
	__asm volatile
 8011688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801168c:	b672      	cpsid	i
 801168e:	f383 8811 	msr	BASEPRI, r3
 8011692:	f3bf 8f6f 	isb	sy
 8011696:	f3bf 8f4f 	dsb	sy
 801169a:	b662      	cpsie	i
 801169c:	60bb      	str	r3, [r7, #8]
}
 801169e:	bf00      	nop
 80116a0:	e7fe      	b.n	80116a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	4b11      	ldr	r3, [pc, #68]	; (80116ec <vPortFree+0xb4>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	4013      	ands	r3, r2
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d019      	beq.n	80116e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d115      	bne.n	80116e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	685a      	ldr	r2, [r3, #4]
 80116bc:	4b0b      	ldr	r3, [pc, #44]	; (80116ec <vPortFree+0xb4>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	43db      	mvns	r3, r3
 80116c2:	401a      	ands	r2, r3
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80116c8:	f7fe fb34 	bl	800fd34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	685a      	ldr	r2, [r3, #4]
 80116d0:	4b07      	ldr	r3, [pc, #28]	; (80116f0 <vPortFree+0xb8>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	4413      	add	r3, r2
 80116d6:	4a06      	ldr	r2, [pc, #24]	; (80116f0 <vPortFree+0xb8>)
 80116d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80116da:	6938      	ldr	r0, [r7, #16]
 80116dc:	f000 f86c 	bl	80117b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80116e0:	f7fe fb36 	bl	800fd50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80116e4:	bf00      	nop
 80116e6:	3718      	adds	r7, #24
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	20016f30 	.word	0x20016f30
 80116f0:	20016f28 	.word	0x20016f28

080116f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80116f4:	b480      	push	{r7}
 80116f6:	b085      	sub	sp, #20
 80116f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80116fa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80116fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011700:	4b27      	ldr	r3, [pc, #156]	; (80117a0 <prvHeapInit+0xac>)
 8011702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f003 0307 	and.w	r3, r3, #7
 801170a:	2b00      	cmp	r3, #0
 801170c:	d00c      	beq.n	8011728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3307      	adds	r3, #7
 8011712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f023 0307 	bic.w	r3, r3, #7
 801171a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801171c:	68ba      	ldr	r2, [r7, #8]
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	1ad3      	subs	r3, r2, r3
 8011722:	4a1f      	ldr	r2, [pc, #124]	; (80117a0 <prvHeapInit+0xac>)
 8011724:	4413      	add	r3, r2
 8011726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801172c:	4a1d      	ldr	r2, [pc, #116]	; (80117a4 <prvHeapInit+0xb0>)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011732:	4b1c      	ldr	r3, [pc, #112]	; (80117a4 <prvHeapInit+0xb0>)
 8011734:	2200      	movs	r2, #0
 8011736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	68ba      	ldr	r2, [r7, #8]
 801173c:	4413      	add	r3, r2
 801173e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011740:	2208      	movs	r2, #8
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	1a9b      	subs	r3, r3, r2
 8011746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f023 0307 	bic.w	r3, r3, #7
 801174e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	4a15      	ldr	r2, [pc, #84]	; (80117a8 <prvHeapInit+0xb4>)
 8011754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011756:	4b14      	ldr	r3, [pc, #80]	; (80117a8 <prvHeapInit+0xb4>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2200      	movs	r2, #0
 801175c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801175e:	4b12      	ldr	r3, [pc, #72]	; (80117a8 <prvHeapInit+0xb4>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2200      	movs	r2, #0
 8011764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	1ad2      	subs	r2, r2, r3
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011774:	4b0c      	ldr	r3, [pc, #48]	; (80117a8 <prvHeapInit+0xb4>)
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	4a0a      	ldr	r2, [pc, #40]	; (80117ac <prvHeapInit+0xb8>)
 8011782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	4a09      	ldr	r2, [pc, #36]	; (80117b0 <prvHeapInit+0xbc>)
 801178a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801178c:	4b09      	ldr	r3, [pc, #36]	; (80117b4 <prvHeapInit+0xc0>)
 801178e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011792:	601a      	str	r2, [r3, #0]
}
 8011794:	bf00      	nop
 8011796:	3714      	adds	r7, #20
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr
 80117a0:	200084bc 	.word	0x200084bc
 80117a4:	20016f1c 	.word	0x20016f1c
 80117a8:	20016f24 	.word	0x20016f24
 80117ac:	20016f2c 	.word	0x20016f2c
 80117b0:	20016f28 	.word	0x20016f28
 80117b4:	20016f30 	.word	0x20016f30

080117b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80117b8:	b480      	push	{r7}
 80117ba:	b085      	sub	sp, #20
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80117c0:	4b28      	ldr	r3, [pc, #160]	; (8011864 <prvInsertBlockIntoFreeList+0xac>)
 80117c2:	60fb      	str	r3, [r7, #12]
 80117c4:	e002      	b.n	80117cc <prvInsertBlockIntoFreeList+0x14>
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	60fb      	str	r3, [r7, #12]
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d8f7      	bhi.n	80117c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	68ba      	ldr	r2, [r7, #8]
 80117e0:	4413      	add	r3, r2
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d108      	bne.n	80117fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	441a      	add	r2, r3
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	68ba      	ldr	r2, [r7, #8]
 8011804:	441a      	add	r2, r3
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	429a      	cmp	r2, r3
 801180c:	d118      	bne.n	8011840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681a      	ldr	r2, [r3, #0]
 8011812:	4b15      	ldr	r3, [pc, #84]	; (8011868 <prvInsertBlockIntoFreeList+0xb0>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	429a      	cmp	r2, r3
 8011818:	d00d      	beq.n	8011836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	685a      	ldr	r2, [r3, #4]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	441a      	add	r2, r3
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	601a      	str	r2, [r3, #0]
 8011834:	e008      	b.n	8011848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011836:	4b0c      	ldr	r3, [pc, #48]	; (8011868 <prvInsertBlockIntoFreeList+0xb0>)
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	601a      	str	r2, [r3, #0]
 801183e:	e003      	b.n	8011848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011848:	68fa      	ldr	r2, [r7, #12]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	429a      	cmp	r2, r3
 801184e:	d002      	beq.n	8011856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	687a      	ldr	r2, [r7, #4]
 8011854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011856:	bf00      	nop
 8011858:	3714      	adds	r7, #20
 801185a:	46bd      	mov	sp, r7
 801185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011860:	4770      	bx	lr
 8011862:	bf00      	nop
 8011864:	20016f1c 	.word	0x20016f1c
 8011868:	20016f24 	.word	0x20016f24

0801186c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	330c      	adds	r3, #12
 801187c:	461a      	mov	r2, r3
 801187e:	6839      	ldr	r1, [r7, #0]
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f002 fa73 	bl	8013d6c <tcpip_send_msg_wait_sem>
 8011886:	4603      	mov	r3, r0
 8011888:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d103      	bne.n	801189a <netconn_apimsg+0x2e>
    return apimsg->err;
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011898:	e001      	b.n	801189e <netconn_apimsg+0x32>
  }
  return err;
 801189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3710      	adds	r7, #16
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
	...

080118a8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b08c      	sub	sp, #48	; 0x30
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	4603      	mov	r3, r0
 80118b0:	603a      	str	r2, [r7, #0]
 80118b2:	71fb      	strb	r3, [r7, #7]
 80118b4:	460b      	mov	r3, r1
 80118b6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80118b8:	79fb      	ldrb	r3, [r7, #7]
 80118ba:	6839      	ldr	r1, [r7, #0]
 80118bc:	4618      	mov	r0, r3
 80118be:	f001 f923 	bl	8012b08 <netconn_alloc>
 80118c2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80118c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d054      	beq.n	8011974 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80118ca:	79bb      	ldrb	r3, [r7, #6]
 80118cc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80118ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80118d2:	f107 0308 	add.w	r3, r7, #8
 80118d6:	4619      	mov	r1, r3
 80118d8:	4829      	ldr	r0, [pc, #164]	; (8011980 <netconn_new_with_proto_and_callback+0xd8>)
 80118da:	f7ff ffc7 	bl	801186c <netconn_apimsg>
 80118de:	4603      	mov	r3, r0
 80118e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80118e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d043      	beq.n	8011974 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80118ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d005      	beq.n	8011900 <netconn_new_with_proto_and_callback+0x58>
 80118f4:	4b23      	ldr	r3, [pc, #140]	; (8011984 <netconn_new_with_proto_and_callback+0xdc>)
 80118f6:	22a3      	movs	r2, #163	; 0xa3
 80118f8:	4923      	ldr	r1, [pc, #140]	; (8011988 <netconn_new_with_proto_and_callback+0xe0>)
 80118fa:	4824      	ldr	r0, [pc, #144]	; (801198c <netconn_new_with_proto_and_callback+0xe4>)
 80118fc:	f012 ff88 	bl	8024810 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8011900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011902:	3310      	adds	r3, #16
 8011904:	4618      	mov	r0, r3
 8011906:	f00d f971 	bl	801ebec <sys_mbox_valid>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d105      	bne.n	801191c <netconn_new_with_proto_and_callback+0x74>
 8011910:	4b1c      	ldr	r3, [pc, #112]	; (8011984 <netconn_new_with_proto_and_callback+0xdc>)
 8011912:	22a4      	movs	r2, #164	; 0xa4
 8011914:	491e      	ldr	r1, [pc, #120]	; (8011990 <netconn_new_with_proto_and_callback+0xe8>)
 8011916:	481d      	ldr	r0, [pc, #116]	; (801198c <netconn_new_with_proto_and_callback+0xe4>)
 8011918:	f012 ff7a 	bl	8024810 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 801191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191e:	3314      	adds	r3, #20
 8011920:	4618      	mov	r0, r3
 8011922:	f00d f963 	bl	801ebec <sys_mbox_valid>
 8011926:	4603      	mov	r3, r0
 8011928:	2b00      	cmp	r3, #0
 801192a:	d005      	beq.n	8011938 <netconn_new_with_proto_and_callback+0x90>
 801192c:	4b15      	ldr	r3, [pc, #84]	; (8011984 <netconn_new_with_proto_and_callback+0xdc>)
 801192e:	22a6      	movs	r2, #166	; 0xa6
 8011930:	4918      	ldr	r1, [pc, #96]	; (8011994 <netconn_new_with_proto_and_callback+0xec>)
 8011932:	4816      	ldr	r0, [pc, #88]	; (801198c <netconn_new_with_proto_and_callback+0xe4>)
 8011934:	f012 ff6c 	bl	8024810 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8011938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193a:	330c      	adds	r3, #12
 801193c:	4618      	mov	r0, r3
 801193e:	f00d f9e3 	bl	801ed08 <sys_sem_valid>
 8011942:	4603      	mov	r3, r0
 8011944:	2b00      	cmp	r3, #0
 8011946:	d105      	bne.n	8011954 <netconn_new_with_proto_and_callback+0xac>
 8011948:	4b0e      	ldr	r3, [pc, #56]	; (8011984 <netconn_new_with_proto_and_callback+0xdc>)
 801194a:	22a9      	movs	r2, #169	; 0xa9
 801194c:	4912      	ldr	r1, [pc, #72]	; (8011998 <netconn_new_with_proto_and_callback+0xf0>)
 801194e:	480f      	ldr	r0, [pc, #60]	; (801198c <netconn_new_with_proto_and_callback+0xe4>)
 8011950:	f012 ff5e 	bl	8024810 <iprintf>
      sys_sem_free(&conn->op_completed);
 8011954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011956:	330c      	adds	r3, #12
 8011958:	4618      	mov	r0, r3
 801195a:	f00d f9c8 	bl	801ecee <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011960:	3310      	adds	r3, #16
 8011962:	4618      	mov	r0, r3
 8011964:	f00d f8ce 	bl	801eb04 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801196a:	2007      	movs	r0, #7
 801196c:	f002 ffac 	bl	80148c8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8011970:	2300      	movs	r3, #0
 8011972:	e000      	b.n	8011976 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8011974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011976:	4618      	mov	r0, r3
 8011978:	3730      	adds	r7, #48	; 0x30
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	08012add 	.word	0x08012add
 8011984:	080296f0 	.word	0x080296f0
 8011988:	08029724 	.word	0x08029724
 801198c:	08029748 	.word	0x08029748
 8011990:	08029770 	.word	0x08029770
 8011994:	08029788 	.word	0x08029788
 8011998:	080297ac 	.word	0x080297ac

0801199c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b08c      	sub	sp, #48	; 0x30
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d101      	bne.n	80119ae <netconn_prepare_delete+0x12>
    return ERR_OK;
 80119aa:	2300      	movs	r3, #0
 80119ac:	e014      	b.n	80119d8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80119b2:	2329      	movs	r3, #41	; 0x29
 80119b4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80119b6:	f107 030c 	add.w	r3, r7, #12
 80119ba:	4619      	mov	r1, r3
 80119bc:	4808      	ldr	r0, [pc, #32]	; (80119e0 <netconn_prepare_delete+0x44>)
 80119be:	f7ff ff55 	bl	801186c <netconn_apimsg>
 80119c2:	4603      	mov	r3, r0
 80119c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80119c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d002      	beq.n	80119d6 <netconn_prepare_delete+0x3a>
    return err;
 80119d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80119d4:	e000      	b.n	80119d8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3730      	adds	r7, #48	; 0x30
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	08013049 	.word	0x08013049

080119e4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d101      	bne.n	80119f6 <netconn_delete+0x12>
    return ERR_OK;
 80119f2:	2300      	movs	r3, #0
 80119f4:	e00d      	b.n	8011a12 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f7ff ffd0 	bl	801199c <netconn_prepare_delete>
 80119fc:	4603      	mov	r3, r0
 80119fe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8011a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d102      	bne.n	8011a0e <netconn_delete+0x2a>
    netconn_free(conn);
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f001 f8eb 	bl	8012be4 <netconn_free>
  }
  return err;
 8011a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3710      	adds	r7, #16
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
	...

08011a1c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b08e      	sub	sp, #56	; 0x38
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	60b9      	str	r1, [r7, #8]
 8011a26:	4613      	mov	r3, r2
 8011a28:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d109      	bne.n	8011a44 <netconn_bind+0x28>
 8011a30:	4b11      	ldr	r3, [pc, #68]	; (8011a78 <netconn_bind+0x5c>)
 8011a32:	f44f 729c 	mov.w	r2, #312	; 0x138
 8011a36:	4911      	ldr	r1, [pc, #68]	; (8011a7c <netconn_bind+0x60>)
 8011a38:	4811      	ldr	r0, [pc, #68]	; (8011a80 <netconn_bind+0x64>)
 8011a3a:	f012 fee9 	bl	8024810 <iprintf>
 8011a3e:	f06f 030f 	mvn.w	r3, #15
 8011a42:	e015      	b.n	8011a70 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d101      	bne.n	8011a4e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8011a4a:	4b0e      	ldr	r3, [pc, #56]	; (8011a84 <netconn_bind+0x68>)
 8011a4c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011a56:	88fb      	ldrh	r3, [r7, #6]
 8011a58:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011a5a:	f107 0314 	add.w	r3, r7, #20
 8011a5e:	4619      	mov	r1, r3
 8011a60:	4809      	ldr	r0, [pc, #36]	; (8011a88 <netconn_bind+0x6c>)
 8011a62:	f7ff ff03 	bl	801186c <netconn_apimsg>
 8011a66:	4603      	mov	r3, r0
 8011a68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011a6c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3738      	adds	r7, #56	; 0x38
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	080296f0 	.word	0x080296f0
 8011a7c:	08029828 	.word	0x08029828
 8011a80:	08029748 	.word	0x08029748
 8011a84:	0802d514 	.word	0x0802d514
 8011a88:	08013211 	.word	0x08013211

08011a8c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08c      	sub	sp, #48	; 0x30
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	460b      	mov	r3, r1
 8011a96:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d109      	bne.n	8011ab2 <netconn_listen_with_backlog+0x26>
 8011a9e:	4b0d      	ldr	r3, [pc, #52]	; (8011ad4 <netconn_listen_with_backlog+0x48>)
 8011aa0:	f240 12bb 	movw	r2, #443	; 0x1bb
 8011aa4:	490c      	ldr	r1, [pc, #48]	; (8011ad8 <netconn_listen_with_backlog+0x4c>)
 8011aa6:	480d      	ldr	r0, [pc, #52]	; (8011adc <netconn_listen_with_backlog+0x50>)
 8011aa8:	f012 feb2 	bl	8024810 <iprintf>
 8011aac:	f06f 030f 	mvn.w	r3, #15
 8011ab0:	e00c      	b.n	8011acc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8011ab6:	f107 030c 	add.w	r3, r7, #12
 8011aba:	4619      	mov	r1, r3
 8011abc:	4808      	ldr	r0, [pc, #32]	; (8011ae0 <netconn_listen_with_backlog+0x54>)
 8011abe:	f7ff fed5 	bl	801186c <netconn_apimsg>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011ac8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3730      	adds	r7, #48	; 0x30
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	080296f0 	.word	0x080296f0
 8011ad8:	080298a8 	.word	0x080298a8
 8011adc:	08029748 	.word	0x08029748
 8011ae0:	08013285 	.word	0x08013285

08011ae4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b086      	sub	sp, #24
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d109      	bne.n	8011b08 <netconn_accept+0x24>
 8011af4:	4b3d      	ldr	r3, [pc, #244]	; (8011bec <netconn_accept+0x108>)
 8011af6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011afa:	493d      	ldr	r1, [pc, #244]	; (8011bf0 <netconn_accept+0x10c>)
 8011afc:	483d      	ldr	r0, [pc, #244]	; (8011bf4 <netconn_accept+0x110>)
 8011afe:	f012 fe87 	bl	8024810 <iprintf>
 8011b02:	f06f 030f 	mvn.w	r3, #15
 8011b06:	e06c      	b.n	8011be2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d109      	bne.n	8011b28 <netconn_accept+0x44>
 8011b14:	4b35      	ldr	r3, [pc, #212]	; (8011bec <netconn_accept+0x108>)
 8011b16:	f240 12e3 	movw	r2, #483	; 0x1e3
 8011b1a:	4937      	ldr	r1, [pc, #220]	; (8011bf8 <netconn_accept+0x114>)
 8011b1c:	4835      	ldr	r0, [pc, #212]	; (8011bf4 <netconn_accept+0x110>)
 8011b1e:	f012 fe77 	bl	8024810 <iprintf>
 8011b22:	f06f 030f 	mvn.w	r3, #15
 8011b26:	e05c      	b.n	8011be2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 fb6c 	bl	8012206 <netconn_err>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8011b32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d002      	beq.n	8011b40 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8011b3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b3e:	e050      	b.n	8011be2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	3314      	adds	r3, #20
 8011b44:	4618      	mov	r0, r3
 8011b46:	f00d f851 	bl	801ebec <sys_mbox_valid>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d005      	beq.n	8011b5c <netconn_accept+0x78>
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	7f1b      	ldrb	r3, [r3, #28]
 8011b54:	f003 0301 	and.w	r3, r3, #1
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d002      	beq.n	8011b62 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8011b5c:	f06f 030e 	mvn.w	r3, #14
 8011b60:	e03f      	b.n	8011be2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	7f1b      	ldrb	r3, [r3, #28]
 8011b66:	f003 0302 	and.w	r3, r3, #2
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d00e      	beq.n	8011b8c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	3314      	adds	r3, #20
 8011b72:	f107 020c 	add.w	r2, r7, #12
 8011b76:	4611      	mov	r1, r2
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f00d f820 	bl	801ebbe <sys_arch_mbox_tryfetch>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b84:	d10a      	bne.n	8011b9c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8011b86:	f06f 0306 	mvn.w	r3, #6
 8011b8a:	e02a      	b.n	8011be2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	3314      	adds	r3, #20
 8011b90:	f107 010c 	add.w	r1, r7, #12
 8011b94:	2200      	movs	r2, #0
 8011b96:	4618      	mov	r0, r3
 8011b98:	f00c ffe0 	bl	801eb5c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d005      	beq.n	8011bb0 <netconn_accept+0xcc>
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba8:	2200      	movs	r2, #0
 8011baa:	2101      	movs	r1, #1
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	f107 0213 	add.w	r2, r7, #19
 8011bb6:	4611      	mov	r1, r2
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f000 fb75 	bl	80122a8 <lwip_netconn_is_err_msg>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d002      	beq.n	8011bca <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8011bc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011bc8:	e00b      	b.n	8011be2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d102      	bne.n	8011bd6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8011bd0:	f06f 030e 	mvn.w	r3, #14
 8011bd4:	e005      	b.n	8011be2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	697a      	ldr	r2, [r7, #20]
 8011bde:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011be0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3718      	adds	r7, #24
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	080296f0 	.word	0x080296f0
 8011bf0:	080298c8 	.word	0x080298c8
 8011bf4:	08029748 	.word	0x08029748
 8011bf8:	080298e8 	.word	0x080298e8

08011bfc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b088      	sub	sp, #32
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	60f8      	str	r0, [r7, #12]
 8011c04:	60b9      	str	r1, [r7, #8]
 8011c06:	4613      	mov	r3, r2
 8011c08:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d109      	bne.n	8011c28 <netconn_recv_data+0x2c>
 8011c14:	4b58      	ldr	r3, [pc, #352]	; (8011d78 <netconn_recv_data+0x17c>)
 8011c16:	f44f 7212 	mov.w	r2, #584	; 0x248
 8011c1a:	4958      	ldr	r1, [pc, #352]	; (8011d7c <netconn_recv_data+0x180>)
 8011c1c:	4858      	ldr	r0, [pc, #352]	; (8011d80 <netconn_recv_data+0x184>)
 8011c1e:	f012 fdf7 	bl	8024810 <iprintf>
 8011c22:	f06f 030f 	mvn.w	r3, #15
 8011c26:	e0a2      	b.n	8011d6e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d109      	bne.n	8011c48 <netconn_recv_data+0x4c>
 8011c34:	4b50      	ldr	r3, [pc, #320]	; (8011d78 <netconn_recv_data+0x17c>)
 8011c36:	f240 224a 	movw	r2, #586	; 0x24a
 8011c3a:	4952      	ldr	r1, [pc, #328]	; (8011d84 <netconn_recv_data+0x188>)
 8011c3c:	4850      	ldr	r0, [pc, #320]	; (8011d80 <netconn_recv_data+0x184>)
 8011c3e:	f012 fde7 	bl	8024810 <iprintf>
 8011c42:	f06f 030f 	mvn.w	r3, #15
 8011c46:	e092      	b.n	8011d6e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	3310      	adds	r3, #16
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f00c ffcd 	bl	801ebec <sys_mbox_valid>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d10e      	bne.n	8011c76 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011c58:	68f8      	ldr	r0, [r7, #12]
 8011c5a:	f000 fad4 	bl	8012206 <netconn_err>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8011c62:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d002      	beq.n	8011c70 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8011c6a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011c6e:	e07e      	b.n	8011d6e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8011c70:	f06f 030a 	mvn.w	r3, #10
 8011c74:	e07b      	b.n	8011d6e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	7f1b      	ldrb	r3, [r3, #28]
 8011c7a:	f003 0302 	and.w	r3, r3, #2
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d10f      	bne.n	8011ca2 <netconn_recv_data+0xa6>
 8011c82:	79fb      	ldrb	r3, [r7, #7]
 8011c84:	f003 0304 	and.w	r3, r3, #4
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d10a      	bne.n	8011ca2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	7f1b      	ldrb	r3, [r3, #28]
 8011c90:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d104      	bne.n	8011ca2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d023      	beq.n	8011cea <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	3310      	adds	r3, #16
 8011ca6:	f107 0218 	add.w	r2, r7, #24
 8011caa:	4611      	mov	r1, r2
 8011cac:	4618      	mov	r0, r3
 8011cae:	f00c ff86 	bl	801ebbe <sys_arch_mbox_tryfetch>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011cb8:	d11f      	bne.n	8011cfa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f000 faa3 	bl	8012206 <netconn_err>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8011cc4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d002      	beq.n	8011cd2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8011ccc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011cd0:	e04d      	b.n	8011d6e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	7f1b      	ldrb	r3, [r3, #28]
 8011cd6:	f003 0301 	and.w	r3, r3, #1
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d002      	beq.n	8011ce4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8011cde:	f06f 030a 	mvn.w	r3, #10
 8011ce2:	e044      	b.n	8011d6e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8011ce4:	f06f 0306 	mvn.w	r3, #6
 8011ce8:	e041      	b.n	8011d6e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	3310      	adds	r3, #16
 8011cee:	f107 0118 	add.w	r1, r7, #24
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f00c ff31 	bl	801eb5c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d02:	2b10      	cmp	r3, #16
 8011d04:	d117      	bne.n	8011d36 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8011d06:	69bb      	ldr	r3, [r7, #24]
 8011d08:	f107 0217 	add.w	r2, r7, #23
 8011d0c:	4611      	mov	r1, r2
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f000 faca 	bl	80122a8 <lwip_netconn_is_err_msg>
 8011d14:	4603      	mov	r3, r0
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d009      	beq.n	8011d2e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8011d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d1e:	f113 0f0f 	cmn.w	r3, #15
 8011d22:	d101      	bne.n	8011d28 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8011d24:	2300      	movs	r3, #0
 8011d26:	e022      	b.n	8011d6e <netconn_recv_data+0x172>
      }
      return err;
 8011d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d2c:	e01f      	b.n	8011d6e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011d2e:	69bb      	ldr	r3, [r7, #24]
 8011d30:	891b      	ldrh	r3, [r3, #8]
 8011d32:	83fb      	strh	r3, [r7, #30]
 8011d34:	e00d      	b.n	8011d52 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d106      	bne.n	8011d4a <netconn_recv_data+0x14e>
 8011d3c:	4b0e      	ldr	r3, [pc, #56]	; (8011d78 <netconn_recv_data+0x17c>)
 8011d3e:	f240 2291 	movw	r2, #657	; 0x291
 8011d42:	4911      	ldr	r1, [pc, #68]	; (8011d88 <netconn_recv_data+0x18c>)
 8011d44:	480e      	ldr	r0, [pc, #56]	; (8011d80 <netconn_recv_data+0x184>)
 8011d46:	f012 fd63 	bl	8024810 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	891b      	ldrh	r3, [r3, #8]
 8011d50:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d005      	beq.n	8011d66 <netconn_recv_data+0x16a>
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d5e:	8bfa      	ldrh	r2, [r7, #30]
 8011d60:	2101      	movs	r1, #1
 8011d62:	68f8      	ldr	r0, [r7, #12]
 8011d64:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8011d66:	69ba      	ldr	r2, [r7, #24]
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3720      	adds	r7, #32
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	080296f0 	.word	0x080296f0
 8011d7c:	08029908 	.word	0x08029908
 8011d80:	08029748 	.word	0x08029748
 8011d84:	08029928 	.word	0x08029928
 8011d88:	08029944 	.word	0x08029944

08011d8c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d005      	beq.n	8011daa <netconn_tcp_recvd_msg+0x1e>
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011da6:	2b10      	cmp	r3, #16
 8011da8:	d009      	beq.n	8011dbe <netconn_tcp_recvd_msg+0x32>
 8011daa:	4b0c      	ldr	r3, [pc, #48]	; (8011ddc <netconn_tcp_recvd_msg+0x50>)
 8011dac:	f240 22a7 	movw	r2, #679	; 0x2a7
 8011db0:	490b      	ldr	r1, [pc, #44]	; (8011de0 <netconn_tcp_recvd_msg+0x54>)
 8011db2:	480c      	ldr	r0, [pc, #48]	; (8011de4 <netconn_tcp_recvd_msg+0x58>)
 8011db4:	f012 fd2c 	bl	8024810 <iprintf>
 8011db8:	f06f 030f 	mvn.w	r3, #15
 8011dbc:	e00a      	b.n	8011dd4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	68fa      	ldr	r2, [r7, #12]
 8011dc2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	68ba      	ldr	r2, [r7, #8]
 8011dc8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8011dca:	6879      	ldr	r1, [r7, #4]
 8011dcc:	4806      	ldr	r0, [pc, #24]	; (8011de8 <netconn_tcp_recvd_msg+0x5c>)
 8011dce:	f7ff fd4d 	bl	801186c <netconn_apimsg>
 8011dd2:	4603      	mov	r3, r0
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3710      	adds	r7, #16
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}
 8011ddc:	080296f0 	.word	0x080296f0
 8011de0:	08029950 	.word	0x08029950
 8011de4:	08029748 	.word	0x08029748
 8011de8:	080133b5 	.word	0x080133b5

08011dec <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b090      	sub	sp, #64	; 0x40
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	4613      	mov	r3, r2
 8011df8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	3310      	adds	r3, #16
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f00c fef4 	bl	801ebec <sys_mbox_valid>
 8011e04:	4603      	mov	r3, r0
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d102      	bne.n	8011e10 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011e0a:	f06f 030a 	mvn.w	r3, #10
 8011e0e:	e06d      	b.n	8011eec <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	7f1b      	ldrb	r3, [r3, #28]
 8011e14:	b25b      	sxtb	r3, r3
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	da07      	bge.n	8011e2a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	7f1b      	ldrb	r3, [r3, #28]
 8011e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e22:	b2da      	uxtb	r2, r3
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011e28:	e039      	b.n	8011e9e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011e2a:	79fb      	ldrb	r3, [r7, #7]
 8011e2c:	461a      	mov	r2, r3
 8011e2e:	68b9      	ldr	r1, [r7, #8]
 8011e30:	68f8      	ldr	r0, [r7, #12]
 8011e32:	f7ff fee3 	bl	8011bfc <netconn_recv_data>
 8011e36:	4603      	mov	r3, r0
 8011e38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8011e3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d002      	beq.n	8011e4a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8011e44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011e48:	e050      	b.n	8011eec <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011e50:	79fb      	ldrb	r3, [r7, #7]
 8011e52:	f003 0308 	and.w	r3, r3, #8
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d10e      	bne.n	8011e78 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d002      	beq.n	8011e66 <netconn_recv_data_tcp+0x7a>
 8011e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e62:	891b      	ldrh	r3, [r3, #8]
 8011e64:	e000      	b.n	8011e68 <netconn_recv_data_tcp+0x7c>
 8011e66:	2301      	movs	r3, #1
 8011e68:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011e6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011e6c:	f107 0214 	add.w	r2, r7, #20
 8011e70:	4619      	mov	r1, r3
 8011e72:	68f8      	ldr	r0, [r7, #12]
 8011e74:	f7ff ff8a 	bl	8011d8c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d134      	bne.n	8011ee8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8011e7e:	79fb      	ldrb	r3, [r7, #7]
 8011e80:	f003 0310 	and.w	r3, r3, #16
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d009      	beq.n	8011e9c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	7f1b      	ldrb	r3, [r3, #28]
 8011e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e90:	b2da      	uxtb	r2, r3
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8011e96:	f06f 0306 	mvn.w	r3, #6
 8011e9a:	e027      	b.n	8011eec <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8011e9c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d005      	beq.n	8011eb2 <netconn_recv_data_tcp+0xc6>
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eaa:	2200      	movs	r2, #0
 8011eac:	2101      	movs	r1, #1
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d10f      	bne.n	8011eda <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8011eba:	68f8      	ldr	r0, [r7, #12]
 8011ebc:	f000 f9a3 	bl	8012206 <netconn_err>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8011ec6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d002      	beq.n	8011ed4 <netconn_recv_data_tcp+0xe8>
          return err;
 8011ece:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011ed2:	e00b      	b.n	8011eec <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8011ed4:	f06f 030d 	mvn.w	r3, #13
 8011ed8:	e008      	b.n	8011eec <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011eda:	2101      	movs	r1, #1
 8011edc:	68f8      	ldr	r0, [r7, #12]
 8011ede:	f000 f955 	bl	801218c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8011ee2:	f06f 030e 	mvn.w	r3, #14
 8011ee6:	e001      	b.n	8011eec <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011ee8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3740      	adds	r7, #64	; 0x40
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b086      	sub	sp, #24
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8011efe:	2300      	movs	r3, #0
 8011f00:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d109      	bne.n	8011f1c <netconn_recv+0x28>
 8011f08:	4b32      	ldr	r3, [pc, #200]	; (8011fd4 <netconn_recv+0xe0>)
 8011f0a:	f240 3263 	movw	r2, #867	; 0x363
 8011f0e:	4932      	ldr	r1, [pc, #200]	; (8011fd8 <netconn_recv+0xe4>)
 8011f10:	4832      	ldr	r0, [pc, #200]	; (8011fdc <netconn_recv+0xe8>)
 8011f12:	f012 fc7d 	bl	8024810 <iprintf>
 8011f16:	f06f 030f 	mvn.w	r3, #15
 8011f1a:	e056      	b.n	8011fca <netconn_recv+0xd6>
  *new_buf = NULL;
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d109      	bne.n	8011f3c <netconn_recv+0x48>
 8011f28:	4b2a      	ldr	r3, [pc, #168]	; (8011fd4 <netconn_recv+0xe0>)
 8011f2a:	f240 3265 	movw	r2, #869	; 0x365
 8011f2e:	492c      	ldr	r1, [pc, #176]	; (8011fe0 <netconn_recv+0xec>)
 8011f30:	482a      	ldr	r0, [pc, #168]	; (8011fdc <netconn_recv+0xe8>)
 8011f32:	f012 fc6d 	bl	8024810 <iprintf>
 8011f36:	f06f 030f 	mvn.w	r3, #15
 8011f3a:	e046      	b.n	8011fca <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f44:	2b10      	cmp	r3, #16
 8011f46:	d13a      	bne.n	8011fbe <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011f48:	2300      	movs	r3, #0
 8011f4a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011f4c:	2006      	movs	r0, #6
 8011f4e:	f002 fc45 	bl	80147dc <memp_malloc>
 8011f52:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d102      	bne.n	8011f60 <netconn_recv+0x6c>
      return ERR_MEM;
 8011f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f5e:	e034      	b.n	8011fca <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011f60:	f107 030c 	add.w	r3, r7, #12
 8011f64:	2200      	movs	r2, #0
 8011f66:	4619      	mov	r1, r3
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7ff ff3f 	bl	8011dec <netconn_recv_data_tcp>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011f72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d006      	beq.n	8011f88 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8011f7a:	6979      	ldr	r1, [r7, #20]
 8011f7c:	2006      	movs	r0, #6
 8011f7e:	f002 fca3 	bl	80148c8 <memp_free>
      return err;
 8011f82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f86:	e020      	b.n	8011fca <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d106      	bne.n	8011f9c <netconn_recv+0xa8>
 8011f8e:	4b11      	ldr	r3, [pc, #68]	; (8011fd4 <netconn_recv+0xe0>)
 8011f90:	f240 3279 	movw	r2, #889	; 0x379
 8011f94:	4913      	ldr	r1, [pc, #76]	; (8011fe4 <netconn_recv+0xf0>)
 8011f96:	4811      	ldr	r0, [pc, #68]	; (8011fdc <netconn_recv+0xe8>)
 8011f98:	f012 fc3a 	bl	8024810 <iprintf>

    buf->p = p;
 8011f9c:	68fa      	ldr	r2, [r7, #12]
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011fa2:	68fa      	ldr	r2, [r7, #12]
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	2200      	movs	r2, #0
 8011fac:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	697a      	ldr	r2, [r7, #20]
 8011fb8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	e005      	b.n	8011fca <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	6839      	ldr	r1, [r7, #0]
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f7ff fe1a 	bl	8011bfc <netconn_recv_data>
 8011fc8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3718      	adds	r7, #24
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	bf00      	nop
 8011fd4:	080296f0 	.word	0x080296f0
 8011fd8:	08029908 	.word	0x08029908
 8011fdc:	08029748 	.word	0x08029748
 8011fe0:	08029928 	.word	0x08029928
 8011fe4:	080299a0 	.word	0x080299a0

08011fe8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b088      	sub	sp, #32
 8011fec:	af02      	add	r7, sp, #8
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
 8011ff4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8011ffe:	78fa      	ldrb	r2, [r7, #3]
 8012000:	f107 0110 	add.w	r1, r7, #16
 8012004:	6a3b      	ldr	r3, [r7, #32]
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	4613      	mov	r3, r2
 801200a:	2201      	movs	r2, #1
 801200c:	68f8      	ldr	r0, [r7, #12]
 801200e:	f000 f805 	bl	801201c <netconn_write_vectors_partly>
 8012012:	4603      	mov	r3, r0
}
 8012014:	4618      	mov	r0, r3
 8012016:	3718      	adds	r7, #24
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}

0801201c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b092      	sub	sp, #72	; 0x48
 8012020:	af00      	add	r7, sp, #0
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	60b9      	str	r1, [r7, #8]
 8012026:	4611      	mov	r1, r2
 8012028:	461a      	mov	r2, r3
 801202a:	460b      	mov	r3, r1
 801202c:	80fb      	strh	r3, [r7, #6]
 801202e:	4613      	mov	r3, r2
 8012030:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d109      	bne.n	801204c <netconn_write_vectors_partly+0x30>
 8012038:	4b4e      	ldr	r3, [pc, #312]	; (8012174 <netconn_write_vectors_partly+0x158>)
 801203a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801203e:	494e      	ldr	r1, [pc, #312]	; (8012178 <netconn_write_vectors_partly+0x15c>)
 8012040:	484e      	ldr	r0, [pc, #312]	; (801217c <netconn_write_vectors_partly+0x160>)
 8012042:	f012 fbe5 	bl	8024810 <iprintf>
 8012046:	f06f 030f 	mvn.w	r3, #15
 801204a:	e08e      	b.n	801216a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012054:	2b10      	cmp	r3, #16
 8012056:	d009      	beq.n	801206c <netconn_write_vectors_partly+0x50>
 8012058:	4b46      	ldr	r3, [pc, #280]	; (8012174 <netconn_write_vectors_partly+0x158>)
 801205a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801205e:	4948      	ldr	r1, [pc, #288]	; (8012180 <netconn_write_vectors_partly+0x164>)
 8012060:	4846      	ldr	r0, [pc, #280]	; (801217c <netconn_write_vectors_partly+0x160>)
 8012062:	f012 fbd5 	bl	8024810 <iprintf>
 8012066:	f06f 0305 	mvn.w	r3, #5
 801206a:	e07e      	b.n	801216a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	7f1b      	ldrb	r3, [r3, #28]
 8012070:	f003 0302 	and.w	r3, r3, #2
 8012074:	2b00      	cmp	r3, #0
 8012076:	d104      	bne.n	8012082 <netconn_write_vectors_partly+0x66>
 8012078:	797b      	ldrb	r3, [r7, #5]
 801207a:	f003 0304 	and.w	r3, r3, #4
 801207e:	2b00      	cmp	r3, #0
 8012080:	d001      	beq.n	8012086 <netconn_write_vectors_partly+0x6a>
 8012082:	2301      	movs	r3, #1
 8012084:	e000      	b.n	8012088 <netconn_write_vectors_partly+0x6c>
 8012086:	2300      	movs	r3, #0
 8012088:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 801208c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012090:	2b00      	cmp	r3, #0
 8012092:	d005      	beq.n	80120a0 <netconn_write_vectors_partly+0x84>
 8012094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012096:	2b00      	cmp	r3, #0
 8012098:	d102      	bne.n	80120a0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801209a:	f06f 0305 	mvn.w	r3, #5
 801209e:	e064      	b.n	801216a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80120a0:	2300      	movs	r3, #0
 80120a2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80120a4:	2300      	movs	r3, #0
 80120a6:	643b      	str	r3, [r7, #64]	; 0x40
 80120a8:	e015      	b.n	80120d6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80120aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120ac:	00db      	lsls	r3, r3, #3
 80120ae:	68ba      	ldr	r2, [r7, #8]
 80120b0:	4413      	add	r3, r2
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120b6:	4413      	add	r3, r2
 80120b8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80120ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120bc:	00db      	lsls	r3, r3, #3
 80120be:	68ba      	ldr	r2, [r7, #8]
 80120c0:	4413      	add	r3, r2
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d202      	bcs.n	80120d0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80120ca:	f06f 0305 	mvn.w	r3, #5
 80120ce:	e04c      	b.n	801216a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80120d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120d2:	3301      	adds	r3, #1
 80120d4:	643b      	str	r3, [r7, #64]	; 0x40
 80120d6:	88fb      	ldrh	r3, [r7, #6]
 80120d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120da:	429a      	cmp	r2, r3
 80120dc:	dbe5      	blt.n	80120aa <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80120de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d101      	bne.n	80120e8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80120e4:	2300      	movs	r3, #0
 80120e6:	e040      	b.n	801216a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80120e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	da0a      	bge.n	8012104 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80120ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d102      	bne.n	80120fa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80120f4:	f06f 0305 	mvn.w	r3, #5
 80120f8:	e037      	b.n	801216a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80120fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80120fe:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8012100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012102:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 801210c:	88fb      	ldrh	r3, [r7, #6]
 801210e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8012110:	2300      	movs	r3, #0
 8012112:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8012114:	797b      	ldrb	r3, [r7, #5]
 8012116:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 801211a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801211c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 801211e:	2300      	movs	r3, #0
 8012120:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8012122:	f107 0314 	add.w	r3, r7, #20
 8012126:	4619      	mov	r1, r3
 8012128:	4816      	ldr	r0, [pc, #88]	; (8012184 <netconn_write_vectors_partly+0x168>)
 801212a:	f7ff fb9f 	bl	801186c <netconn_apimsg>
 801212e:	4603      	mov	r3, r0
 8012130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8012134:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012138:	2b00      	cmp	r3, #0
 801213a:	d114      	bne.n	8012166 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 801213c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801213e:	2b00      	cmp	r3, #0
 8012140:	d002      	beq.n	8012148 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8012142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012146:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8012148:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801214c:	2b00      	cmp	r3, #0
 801214e:	d10a      	bne.n	8012166 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8012150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012154:	429a      	cmp	r2, r3
 8012156:	d006      	beq.n	8012166 <netconn_write_vectors_partly+0x14a>
 8012158:	4b06      	ldr	r3, [pc, #24]	; (8012174 <netconn_write_vectors_partly+0x158>)
 801215a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801215e:	490a      	ldr	r1, [pc, #40]	; (8012188 <netconn_write_vectors_partly+0x16c>)
 8012160:	4806      	ldr	r0, [pc, #24]	; (801217c <netconn_write_vectors_partly+0x160>)
 8012162:	f012 fb55 	bl	8024810 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8012166:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801216a:	4618      	mov	r0, r3
 801216c:	3748      	adds	r7, #72	; 0x48
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}
 8012172:	bf00      	nop
 8012174:	080296f0 	.word	0x080296f0
 8012178:	080299c8 	.word	0x080299c8
 801217c:	08029748 	.word	0x08029748
 8012180:	080299e4 	.word	0x080299e4
 8012184:	080137b9 	.word	0x080137b9
 8012188:	08029a08 	.word	0x08029a08

0801218c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b08c      	sub	sp, #48	; 0x30
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	460b      	mov	r3, r1
 8012196:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d109      	bne.n	80121b2 <netconn_close_shutdown+0x26>
 801219e:	4b0f      	ldr	r3, [pc, #60]	; (80121dc <netconn_close_shutdown+0x50>)
 80121a0:	f240 4247 	movw	r2, #1095	; 0x447
 80121a4:	490e      	ldr	r1, [pc, #56]	; (80121e0 <netconn_close_shutdown+0x54>)
 80121a6:	480f      	ldr	r0, [pc, #60]	; (80121e4 <netconn_close_shutdown+0x58>)
 80121a8:	f012 fb32 	bl	8024810 <iprintf>
 80121ac:	f06f 030f 	mvn.w	r3, #15
 80121b0:	e010      	b.n	80121d4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80121b6:	78fb      	ldrb	r3, [r7, #3]
 80121b8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80121ba:	2329      	movs	r3, #41	; 0x29
 80121bc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80121be:	f107 030c 	add.w	r3, r7, #12
 80121c2:	4619      	mov	r1, r3
 80121c4:	4808      	ldr	r0, [pc, #32]	; (80121e8 <netconn_close_shutdown+0x5c>)
 80121c6:	f7ff fb51 	bl	801186c <netconn_apimsg>
 80121ca:	4603      	mov	r3, r0
 80121cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80121d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3730      	adds	r7, #48	; 0x30
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}
 80121dc:	080296f0 	.word	0x080296f0
 80121e0:	08029a2c 	.word	0x08029a2c
 80121e4:	08029748 	.word	0x08029748
 80121e8:	080138d1 	.word	0x080138d1

080121ec <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b082      	sub	sp, #8
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80121f4:	2103      	movs	r1, #3
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f7ff ffc8 	bl	801218c <netconn_close_shutdown>
 80121fc:	4603      	mov	r3, r0
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3708      	adds	r7, #8
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}

08012206 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8012206:	b580      	push	{r7, lr}
 8012208:	b084      	sub	sp, #16
 801220a:	af00      	add	r7, sp, #0
 801220c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d101      	bne.n	8012218 <netconn_err+0x12>
    return ERR_OK;
 8012214:	2300      	movs	r3, #0
 8012216:	e00d      	b.n	8012234 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8012218:	f00c fdf2 	bl	801ee00 <sys_arch_protect>
 801221c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	7a1b      	ldrb	r3, [r3, #8]
 8012222:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2200      	movs	r2, #0
 8012228:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	f00c fdf6 	bl	801ee1c <sys_arch_unprotect>
  return err;
 8012230:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012234:	4618      	mov	r0, r3
 8012236:	3710      	adds	r7, #16
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}

0801223c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	4603      	mov	r3, r0
 8012244:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8012246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801224a:	f113 0f0d 	cmn.w	r3, #13
 801224e:	d009      	beq.n	8012264 <lwip_netconn_err_to_msg+0x28>
 8012250:	f113 0f0d 	cmn.w	r3, #13
 8012254:	dc0c      	bgt.n	8012270 <lwip_netconn_err_to_msg+0x34>
 8012256:	f113 0f0f 	cmn.w	r3, #15
 801225a:	d007      	beq.n	801226c <lwip_netconn_err_to_msg+0x30>
 801225c:	f113 0f0e 	cmn.w	r3, #14
 8012260:	d002      	beq.n	8012268 <lwip_netconn_err_to_msg+0x2c>
 8012262:	e005      	b.n	8012270 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8012264:	4b0a      	ldr	r3, [pc, #40]	; (8012290 <lwip_netconn_err_to_msg+0x54>)
 8012266:	e00e      	b.n	8012286 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8012268:	4b0a      	ldr	r3, [pc, #40]	; (8012294 <lwip_netconn_err_to_msg+0x58>)
 801226a:	e00c      	b.n	8012286 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 801226c:	4b0a      	ldr	r3, [pc, #40]	; (8012298 <lwip_netconn_err_to_msg+0x5c>)
 801226e:	e00a      	b.n	8012286 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8012270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d005      	beq.n	8012284 <lwip_netconn_err_to_msg+0x48>
 8012278:	4b08      	ldr	r3, [pc, #32]	; (801229c <lwip_netconn_err_to_msg+0x60>)
 801227a:	227d      	movs	r2, #125	; 0x7d
 801227c:	4908      	ldr	r1, [pc, #32]	; (80122a0 <lwip_netconn_err_to_msg+0x64>)
 801227e:	4809      	ldr	r0, [pc, #36]	; (80122a4 <lwip_netconn_err_to_msg+0x68>)
 8012280:	f012 fac6 	bl	8024810 <iprintf>
      return NULL;
 8012284:	2300      	movs	r3, #0
  }
}
 8012286:	4618      	mov	r0, r3
 8012288:	3708      	adds	r7, #8
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	0802d400 	.word	0x0802d400
 8012294:	0802d401 	.word	0x0802d401
 8012298:	0802d402 	.word	0x0802d402
 801229c:	08029a48 	.word	0x08029a48
 80122a0:	08029a7c 	.word	0x08029a7c
 80122a4:	08029a8c 	.word	0x08029a8c

080122a8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d105      	bne.n	80122c4 <lwip_netconn_is_err_msg+0x1c>
 80122b8:	4b12      	ldr	r3, [pc, #72]	; (8012304 <lwip_netconn_is_err_msg+0x5c>)
 80122ba:	2285      	movs	r2, #133	; 0x85
 80122bc:	4912      	ldr	r1, [pc, #72]	; (8012308 <lwip_netconn_is_err_msg+0x60>)
 80122be:	4813      	ldr	r0, [pc, #76]	; (801230c <lwip_netconn_is_err_msg+0x64>)
 80122c0:	f012 faa6 	bl	8024810 <iprintf>

  if (msg == &netconn_aborted) {
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	4a12      	ldr	r2, [pc, #72]	; (8012310 <lwip_netconn_is_err_msg+0x68>)
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d104      	bne.n	80122d6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	22f3      	movs	r2, #243	; 0xf3
 80122d0:	701a      	strb	r2, [r3, #0]
    return 1;
 80122d2:	2301      	movs	r3, #1
 80122d4:	e012      	b.n	80122fc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4a0e      	ldr	r2, [pc, #56]	; (8012314 <lwip_netconn_is_err_msg+0x6c>)
 80122da:	4293      	cmp	r3, r2
 80122dc:	d104      	bne.n	80122e8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	22f2      	movs	r2, #242	; 0xf2
 80122e2:	701a      	strb	r2, [r3, #0]
    return 1;
 80122e4:	2301      	movs	r3, #1
 80122e6:	e009      	b.n	80122fc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	4a0b      	ldr	r2, [pc, #44]	; (8012318 <lwip_netconn_is_err_msg+0x70>)
 80122ec:	4293      	cmp	r3, r2
 80122ee:	d104      	bne.n	80122fa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	22f1      	movs	r2, #241	; 0xf1
 80122f4:	701a      	strb	r2, [r3, #0]
    return 1;
 80122f6:	2301      	movs	r3, #1
 80122f8:	e000      	b.n	80122fc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	08029a48 	.word	0x08029a48
 8012308:	08029ab4 	.word	0x08029ab4
 801230c:	08029a8c 	.word	0x08029a8c
 8012310:	0802d400 	.word	0x0802d400
 8012314:	0802d401 	.word	0x0802d401
 8012318:	0802d402 	.word	0x0802d402

0801231c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b088      	sub	sp, #32
 8012320:	af00      	add	r7, sp, #0
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
 8012328:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d105      	bne.n	801233c <recv_udp+0x20>
 8012330:	4b34      	ldr	r3, [pc, #208]	; (8012404 <recv_udp+0xe8>)
 8012332:	22e5      	movs	r2, #229	; 0xe5
 8012334:	4934      	ldr	r1, [pc, #208]	; (8012408 <recv_udp+0xec>)
 8012336:	4835      	ldr	r0, [pc, #212]	; (801240c <recv_udp+0xf0>)
 8012338:	f012 fa6a 	bl	8024810 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d105      	bne.n	801234e <recv_udp+0x32>
 8012342:	4b30      	ldr	r3, [pc, #192]	; (8012404 <recv_udp+0xe8>)
 8012344:	22e6      	movs	r2, #230	; 0xe6
 8012346:	4932      	ldr	r1, [pc, #200]	; (8012410 <recv_udp+0xf4>)
 8012348:	4830      	ldr	r0, [pc, #192]	; (801240c <recv_udp+0xf0>)
 801234a:	f012 fa61 	bl	8024810 <iprintf>
  conn = (struct netconn *)arg;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d103      	bne.n	8012360 <recv_udp+0x44>
    pbuf_free(p);
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f003 f959 	bl	8015610 <pbuf_free>
    return;
 801235e:	e04d      	b.n	80123fc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8012360:	69fb      	ldr	r3, [r7, #28]
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	68ba      	ldr	r2, [r7, #8]
 8012366:	429a      	cmp	r2, r3
 8012368:	d005      	beq.n	8012376 <recv_udp+0x5a>
 801236a:	4b26      	ldr	r3, [pc, #152]	; (8012404 <recv_udp+0xe8>)
 801236c:	22ee      	movs	r2, #238	; 0xee
 801236e:	4929      	ldr	r1, [pc, #164]	; (8012414 <recv_udp+0xf8>)
 8012370:	4826      	ldr	r0, [pc, #152]	; (801240c <recv_udp+0xf0>)
 8012372:	f012 fa4d 	bl	8024810 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	3310      	adds	r3, #16
 801237a:	4618      	mov	r0, r3
 801237c:	f00c fc36 	bl	801ebec <sys_mbox_valid>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d103      	bne.n	801238e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f003 f942 	bl	8015610 <pbuf_free>
    return;
 801238c:	e036      	b.n	80123fc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801238e:	2006      	movs	r0, #6
 8012390:	f002 fa24 	bl	80147dc <memp_malloc>
 8012394:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d103      	bne.n	80123a4 <recv_udp+0x88>
    pbuf_free(p);
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f003 f937 	bl	8015610 <pbuf_free>
    return;
 80123a2:	e02b      	b.n	80123fc <recv_udp+0xe0>
  } else {
    buf->p = p;
 80123a4:	69bb      	ldr	r3, [r7, #24]
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80123aa:	69bb      	ldr	r3, [r7, #24]
 80123ac:	687a      	ldr	r2, [r7, #4]
 80123ae:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d002      	beq.n	80123bc <recv_udp+0xa0>
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	e000      	b.n	80123be <recv_udp+0xa2>
 80123bc:	2300      	movs	r3, #0
 80123be:	69ba      	ldr	r2, [r7, #24]
 80123c0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80123c6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	891b      	ldrh	r3, [r3, #8]
 80123cc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	3310      	adds	r3, #16
 80123d2:	69b9      	ldr	r1, [r7, #24]
 80123d4:	4618      	mov	r0, r3
 80123d6:	f00c fba7 	bl	801eb28 <sys_mbox_trypost>
 80123da:	4603      	mov	r3, r0
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d003      	beq.n	80123e8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80123e0:	69b8      	ldr	r0, [r7, #24]
 80123e2:	f001 fb01 	bl	80139e8 <netbuf_delete>
    return;
 80123e6:	e009      	b.n	80123fc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80123e8:	69fb      	ldr	r3, [r7, #28]
 80123ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d005      	beq.n	80123fc <recv_udp+0xe0>
 80123f0:	69fb      	ldr	r3, [r7, #28]
 80123f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123f4:	8afa      	ldrh	r2, [r7, #22]
 80123f6:	2100      	movs	r1, #0
 80123f8:	69f8      	ldr	r0, [r7, #28]
 80123fa:	4798      	blx	r3
  }
}
 80123fc:	3720      	adds	r7, #32
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
 8012402:	bf00      	nop
 8012404:	08029a48 	.word	0x08029a48
 8012408:	08029ac0 	.word	0x08029ac0
 801240c:	08029a8c 	.word	0x08029a8c
 8012410:	08029ae4 	.word	0x08029ae4
 8012414:	08029b04 	.word	0x08029b04

08012418 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b088      	sub	sp, #32
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
 8012424:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d106      	bne.n	801243a <recv_tcp+0x22>
 801242c:	4b36      	ldr	r3, [pc, #216]	; (8012508 <recv_tcp+0xf0>)
 801242e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012432:	4936      	ldr	r1, [pc, #216]	; (801250c <recv_tcp+0xf4>)
 8012434:	4836      	ldr	r0, [pc, #216]	; (8012510 <recv_tcp+0xf8>)
 8012436:	f012 f9eb 	bl	8024810 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d106      	bne.n	801244e <recv_tcp+0x36>
 8012440:	4b31      	ldr	r3, [pc, #196]	; (8012508 <recv_tcp+0xf0>)
 8012442:	f240 122d 	movw	r2, #301	; 0x12d
 8012446:	4933      	ldr	r1, [pc, #204]	; (8012514 <recv_tcp+0xfc>)
 8012448:	4831      	ldr	r0, [pc, #196]	; (8012510 <recv_tcp+0xf8>)
 801244a:	f012 f9e1 	bl	8024810 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801244e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d006      	beq.n	8012464 <recv_tcp+0x4c>
 8012456:	4b2c      	ldr	r3, [pc, #176]	; (8012508 <recv_tcp+0xf0>)
 8012458:	f44f 7297 	mov.w	r2, #302	; 0x12e
 801245c:	492e      	ldr	r1, [pc, #184]	; (8012518 <recv_tcp+0x100>)
 801245e:	482c      	ldr	r0, [pc, #176]	; (8012510 <recv_tcp+0xf8>)
 8012460:	f012 f9d6 	bl	8024810 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d102      	bne.n	8012474 <recv_tcp+0x5c>
    return ERR_VAL;
 801246e:	f06f 0305 	mvn.w	r3, #5
 8012472:	e045      	b.n	8012500 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	68ba      	ldr	r2, [r7, #8]
 801247a:	429a      	cmp	r2, r3
 801247c:	d006      	beq.n	801248c <recv_tcp+0x74>
 801247e:	4b22      	ldr	r3, [pc, #136]	; (8012508 <recv_tcp+0xf0>)
 8012480:	f240 1235 	movw	r2, #309	; 0x135
 8012484:	4925      	ldr	r1, [pc, #148]	; (801251c <recv_tcp+0x104>)
 8012486:	4822      	ldr	r0, [pc, #136]	; (8012510 <recv_tcp+0xf8>)
 8012488:	f012 f9c2 	bl	8024810 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	3310      	adds	r3, #16
 8012490:	4618      	mov	r0, r3
 8012492:	f00c fbab 	bl	801ebec <sys_mbox_valid>
 8012496:	4603      	mov	r3, r0
 8012498:	2b00      	cmp	r3, #0
 801249a:	d10d      	bne.n	80124b8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d008      	beq.n	80124b4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	891b      	ldrh	r3, [r3, #8]
 80124a6:	4619      	mov	r1, r3
 80124a8:	68b8      	ldr	r0, [r7, #8]
 80124aa:	f004 f869 	bl	8016580 <tcp_recved>
      pbuf_free(p);
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f003 f8ae 	bl	8015610 <pbuf_free>
    }
    return ERR_OK;
 80124b4:	2300      	movs	r3, #0
 80124b6:	e023      	b.n	8012500 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d005      	beq.n	80124ca <recv_tcp+0xb2>
    msg = p;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	891b      	ldrh	r3, [r3, #8]
 80124c6:	83fb      	strh	r3, [r7, #30]
 80124c8:	e003      	b.n	80124d2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80124ca:	4b15      	ldr	r3, [pc, #84]	; (8012520 <recv_tcp+0x108>)
 80124cc:	61bb      	str	r3, [r7, #24]
    len = 0;
 80124ce:	2300      	movs	r3, #0
 80124d0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80124d2:	697b      	ldr	r3, [r7, #20]
 80124d4:	3310      	adds	r3, #16
 80124d6:	69b9      	ldr	r1, [r7, #24]
 80124d8:	4618      	mov	r0, r3
 80124da:	f00c fb25 	bl	801eb28 <sys_mbox_trypost>
 80124de:	4603      	mov	r3, r0
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d002      	beq.n	80124ea <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80124e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124e8:	e00a      	b.n	8012500 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d005      	beq.n	80124fe <recv_tcp+0xe6>
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f6:	8bfa      	ldrh	r2, [r7, #30]
 80124f8:	2100      	movs	r1, #0
 80124fa:	6978      	ldr	r0, [r7, #20]
 80124fc:	4798      	blx	r3
  }

  return ERR_OK;
 80124fe:	2300      	movs	r3, #0
}
 8012500:	4618      	mov	r0, r3
 8012502:	3720      	adds	r7, #32
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}
 8012508:	08029a48 	.word	0x08029a48
 801250c:	08029b24 	.word	0x08029b24
 8012510:	08029a8c 	.word	0x08029a8c
 8012514:	08029b48 	.word	0x08029b48
 8012518:	08029b68 	.word	0x08029b68
 801251c:	08029b80 	.word	0x08029b80
 8012520:	0802d402 	.word	0x0802d402

08012524 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b084      	sub	sp, #16
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d106      	bne.n	8012546 <poll_tcp+0x22>
 8012538:	4b29      	ldr	r3, [pc, #164]	; (80125e0 <poll_tcp+0xbc>)
 801253a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 801253e:	4929      	ldr	r1, [pc, #164]	; (80125e4 <poll_tcp+0xc0>)
 8012540:	4829      	ldr	r0, [pc, #164]	; (80125e8 <poll_tcp+0xc4>)
 8012542:	f012 f965 	bl	8024810 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	785b      	ldrb	r3, [r3, #1]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d104      	bne.n	8012558 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801254e:	2101      	movs	r1, #1
 8012550:	68f8      	ldr	r0, [r7, #12]
 8012552:	f000 ff65 	bl	8013420 <lwip_netconn_do_writemore>
 8012556:	e016      	b.n	8012586 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	785b      	ldrb	r3, [r3, #1]
 801255c:	2b04      	cmp	r3, #4
 801255e:	d112      	bne.n	8012586 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	6a1b      	ldr	r3, [r3, #32]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d00a      	beq.n	801257e <poll_tcp+0x5a>
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	6a1b      	ldr	r3, [r3, #32]
 801256c:	7a5b      	ldrb	r3, [r3, #9]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d005      	beq.n	801257e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	6a1b      	ldr	r3, [r3, #32]
 8012576:	7a5a      	ldrb	r2, [r3, #9]
 8012578:	3a01      	subs	r2, #1
 801257a:	b2d2      	uxtb	r2, r2
 801257c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801257e:	2101      	movs	r1, #1
 8012580:	68f8      	ldr	r0, [r7, #12]
 8012582:	f000 fbf7 	bl	8012d74 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	7f1b      	ldrb	r3, [r3, #28]
 801258a:	f003 0310 	and.w	r3, r3, #16
 801258e:	2b00      	cmp	r3, #0
 8012590:	d021      	beq.n	80125d6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d01d      	beq.n	80125d6 <poll_tcp+0xb2>
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80125a2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80125a6:	d316      	bcc.n	80125d6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80125b0:	2b04      	cmp	r3, #4
 80125b2:	d810      	bhi.n	80125d6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	7f1b      	ldrb	r3, [r3, #28]
 80125b8:	f023 0310 	bic.w	r3, r3, #16
 80125bc:	b2da      	uxtb	r2, r3
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d005      	beq.n	80125d6 <poll_tcp+0xb2>
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ce:	2200      	movs	r2, #0
 80125d0:	2102      	movs	r1, #2
 80125d2:	68f8      	ldr	r0, [r7, #12]
 80125d4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80125d6:	2300      	movs	r3, #0
}
 80125d8:	4618      	mov	r0, r3
 80125da:	3710      	adds	r7, #16
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}
 80125e0:	08029a48 	.word	0x08029a48
 80125e4:	08029ba0 	.word	0x08029ba0
 80125e8:	08029a8c 	.word	0x08029a8c

080125ec <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b086      	sub	sp, #24
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	4613      	mov	r3, r2
 80125f8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d106      	bne.n	8012612 <sent_tcp+0x26>
 8012604:	4b20      	ldr	r3, [pc, #128]	; (8012688 <sent_tcp+0x9c>)
 8012606:	f240 1293 	movw	r2, #403	; 0x193
 801260a:	4920      	ldr	r1, [pc, #128]	; (801268c <sent_tcp+0xa0>)
 801260c:	4820      	ldr	r0, [pc, #128]	; (8012690 <sent_tcp+0xa4>)
 801260e:	f012 f8ff 	bl	8024810 <iprintf>

  if (conn) {
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d032      	beq.n	801267e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	785b      	ldrb	r3, [r3, #1]
 801261c:	2b01      	cmp	r3, #1
 801261e:	d104      	bne.n	801262a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8012620:	2101      	movs	r1, #1
 8012622:	6978      	ldr	r0, [r7, #20]
 8012624:	f000 fefc 	bl	8013420 <lwip_netconn_do_writemore>
 8012628:	e007      	b.n	801263a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	785b      	ldrb	r3, [r3, #1]
 801262e:	2b04      	cmp	r3, #4
 8012630:	d103      	bne.n	801263a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8012632:	2101      	movs	r1, #1
 8012634:	6978      	ldr	r0, [r7, #20]
 8012636:	f000 fb9d 	bl	8012d74 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d01d      	beq.n	801267e <sent_tcp+0x92>
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801264a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801264e:	d316      	bcc.n	801267e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012658:	2b04      	cmp	r3, #4
 801265a:	d810      	bhi.n	801267e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	7f1b      	ldrb	r3, [r3, #28]
 8012660:	f023 0310 	bic.w	r3, r3, #16
 8012664:	b2da      	uxtb	r2, r3
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801266e:	2b00      	cmp	r3, #0
 8012670:	d005      	beq.n	801267e <sent_tcp+0x92>
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012676:	88fa      	ldrh	r2, [r7, #6]
 8012678:	2102      	movs	r1, #2
 801267a:	6978      	ldr	r0, [r7, #20]
 801267c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801267e:	2300      	movs	r3, #0
}
 8012680:	4618      	mov	r0, r3
 8012682:	3718      	adds	r7, #24
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	08029a48 	.word	0x08029a48
 801268c:	08029ba0 	.word	0x08029ba0
 8012690:	08029a8c 	.word	0x08029a8c

08012694 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b088      	sub	sp, #32
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	460b      	mov	r3, r1
 801269e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d106      	bne.n	80126b8 <err_tcp+0x24>
 80126aa:	4b5f      	ldr	r3, [pc, #380]	; (8012828 <err_tcp+0x194>)
 80126ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80126b0:	495e      	ldr	r1, [pc, #376]	; (801282c <err_tcp+0x198>)
 80126b2:	485f      	ldr	r0, [pc, #380]	; (8012830 <err_tcp+0x19c>)
 80126b4:	f012 f8ac 	bl	8024810 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80126b8:	f00c fba2 	bl	801ee00 <sys_arch_protect>
 80126bc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	2200      	movs	r2, #0
 80126c2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	78fa      	ldrb	r2, [r7, #3]
 80126c8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80126ca:	69fb      	ldr	r3, [r7, #28]
 80126cc:	7f1b      	ldrb	r3, [r3, #28]
 80126ce:	f043 0301 	orr.w	r3, r3, #1
 80126d2:	b2da      	uxtb	r2, r3
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80126d8:	69fb      	ldr	r3, [r7, #28]
 80126da:	785b      	ldrb	r3, [r3, #1]
 80126dc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80126de:	69fb      	ldr	r3, [r7, #28]
 80126e0:	2200      	movs	r2, #0
 80126e2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80126e4:	69b8      	ldr	r0, [r7, #24]
 80126e6:	f00c fb99 	bl	801ee1c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d005      	beq.n	80126fe <err_tcp+0x6a>
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126f6:	2200      	movs	r2, #0
 80126f8:	2104      	movs	r1, #4
 80126fa:	69f8      	ldr	r0, [r7, #28]
 80126fc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012702:	2b00      	cmp	r3, #0
 8012704:	d005      	beq.n	8012712 <err_tcp+0x7e>
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801270a:	2200      	movs	r2, #0
 801270c:	2100      	movs	r1, #0
 801270e:	69f8      	ldr	r0, [r7, #28]
 8012710:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012716:	2b00      	cmp	r3, #0
 8012718:	d005      	beq.n	8012726 <err_tcp+0x92>
 801271a:	69fb      	ldr	r3, [r7, #28]
 801271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271e:	2200      	movs	r2, #0
 8012720:	2102      	movs	r1, #2
 8012722:	69f8      	ldr	r0, [r7, #28]
 8012724:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8012726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801272a:	4618      	mov	r0, r3
 801272c:	f7ff fd86 	bl	801223c <lwip_netconn_err_to_msg>
 8012730:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	3310      	adds	r3, #16
 8012736:	4618      	mov	r0, r3
 8012738:	f00c fa58 	bl	801ebec <sys_mbox_valid>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d005      	beq.n	801274e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	3310      	adds	r3, #16
 8012746:	6939      	ldr	r1, [r7, #16]
 8012748:	4618      	mov	r0, r3
 801274a:	f00c f9ed 	bl	801eb28 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	3314      	adds	r3, #20
 8012752:	4618      	mov	r0, r3
 8012754:	f00c fa4a 	bl	801ebec <sys_mbox_valid>
 8012758:	4603      	mov	r3, r0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d005      	beq.n	801276a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801275e:	69fb      	ldr	r3, [r7, #28]
 8012760:	3314      	adds	r3, #20
 8012762:	6939      	ldr	r1, [r7, #16]
 8012764:	4618      	mov	r0, r3
 8012766:	f00c f9df 	bl	801eb28 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801276a:	7dfb      	ldrb	r3, [r7, #23]
 801276c:	2b01      	cmp	r3, #1
 801276e:	d005      	beq.n	801277c <err_tcp+0xe8>
 8012770:	7dfb      	ldrb	r3, [r7, #23]
 8012772:	2b04      	cmp	r3, #4
 8012774:	d002      	beq.n	801277c <err_tcp+0xe8>
 8012776:	7dfb      	ldrb	r3, [r7, #23]
 8012778:	2b03      	cmp	r3, #3
 801277a:	d143      	bne.n	8012804 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801277c:	69fb      	ldr	r3, [r7, #28]
 801277e:	7f1b      	ldrb	r3, [r3, #28]
 8012780:	f003 0304 	and.w	r3, r3, #4
 8012784:	2b00      	cmp	r3, #0
 8012786:	bf14      	ite	ne
 8012788:	2301      	movne	r3, #1
 801278a:	2300      	moveq	r3, #0
 801278c:	b2db      	uxtb	r3, r3
 801278e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	7f1b      	ldrb	r3, [r3, #28]
 8012794:	f023 0304 	bic.w	r3, r3, #4
 8012798:	b2da      	uxtb	r2, r3
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d13b      	bne.n	801281c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80127a4:	69fb      	ldr	r3, [r7, #28]
 80127a6:	6a1b      	ldr	r3, [r3, #32]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d106      	bne.n	80127ba <err_tcp+0x126>
 80127ac:	4b1e      	ldr	r3, [pc, #120]	; (8012828 <err_tcp+0x194>)
 80127ae:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80127b2:	4920      	ldr	r1, [pc, #128]	; (8012834 <err_tcp+0x1a0>)
 80127b4:	481e      	ldr	r0, [pc, #120]	; (8012830 <err_tcp+0x19c>)
 80127b6:	f012 f82b 	bl	8024810 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80127ba:	7dfb      	ldrb	r3, [r7, #23]
 80127bc:	2b04      	cmp	r3, #4
 80127be:	d104      	bne.n	80127ca <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	6a1b      	ldr	r3, [r3, #32]
 80127c4:	2200      	movs	r2, #0
 80127c6:	711a      	strb	r2, [r3, #4]
 80127c8:	e003      	b.n	80127d2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	6a1b      	ldr	r3, [r3, #32]
 80127ce:	78fa      	ldrb	r2, [r7, #3]
 80127d0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	6a1b      	ldr	r3, [r3, #32]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	330c      	adds	r3, #12
 80127da:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80127dc:	68b8      	ldr	r0, [r7, #8]
 80127de:	f00c fa93 	bl	801ed08 <sys_sem_valid>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d106      	bne.n	80127f6 <err_tcp+0x162>
 80127e8:	4b0f      	ldr	r3, [pc, #60]	; (8012828 <err_tcp+0x194>)
 80127ea:	f240 12ef 	movw	r2, #495	; 0x1ef
 80127ee:	4912      	ldr	r1, [pc, #72]	; (8012838 <err_tcp+0x1a4>)
 80127f0:	480f      	ldr	r0, [pc, #60]	; (8012830 <err_tcp+0x19c>)
 80127f2:	f012 f80d 	bl	8024810 <iprintf>
      conn->current_msg = NULL;
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	2200      	movs	r2, #0
 80127fa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80127fc:	68b8      	ldr	r0, [r7, #8]
 80127fe:	f00c fa69 	bl	801ecd4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8012802:	e00b      	b.n	801281c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	6a1b      	ldr	r3, [r3, #32]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d008      	beq.n	801281e <err_tcp+0x18a>
 801280c:	4b06      	ldr	r3, [pc, #24]	; (8012828 <err_tcp+0x194>)
 801280e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8012812:	490a      	ldr	r1, [pc, #40]	; (801283c <err_tcp+0x1a8>)
 8012814:	4806      	ldr	r0, [pc, #24]	; (8012830 <err_tcp+0x19c>)
 8012816:	f011 fffb 	bl	8024810 <iprintf>
  }
}
 801281a:	e000      	b.n	801281e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 801281c:	bf00      	nop
}
 801281e:	bf00      	nop
 8012820:	3720      	adds	r7, #32
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	08029a48 	.word	0x08029a48
 801282c:	08029ba0 	.word	0x08029ba0
 8012830:	08029a8c 	.word	0x08029a8c
 8012834:	08029bb0 	.word	0x08029bb0
 8012838:	08029bcc 	.word	0x08029bcc
 801283c:	08029be8 	.word	0x08029be8

08012840 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801284e:	6879      	ldr	r1, [r7, #4]
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	f004 fd5b 	bl	801730c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8012856:	490a      	ldr	r1, [pc, #40]	; (8012880 <setup_tcp+0x40>)
 8012858:	68f8      	ldr	r0, [r7, #12]
 801285a:	f004 fd69 	bl	8017330 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801285e:	4909      	ldr	r1, [pc, #36]	; (8012884 <setup_tcp+0x44>)
 8012860:	68f8      	ldr	r0, [r7, #12]
 8012862:	f004 fd87 	bl	8017374 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8012866:	2202      	movs	r2, #2
 8012868:	4907      	ldr	r1, [pc, #28]	; (8012888 <setup_tcp+0x48>)
 801286a:	68f8      	ldr	r0, [r7, #12]
 801286c:	f004 fdde 	bl	801742c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8012870:	4906      	ldr	r1, [pc, #24]	; (801288c <setup_tcp+0x4c>)
 8012872:	68f8      	ldr	r0, [r7, #12]
 8012874:	f004 fda0 	bl	80173b8 <tcp_err>
}
 8012878:	bf00      	nop
 801287a:	3710      	adds	r7, #16
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	08012419 	.word	0x08012419
 8012884:	080125ed 	.word	0x080125ed
 8012888:	08012525 	.word	0x08012525
 801288c:	08012695 	.word	0x08012695

08012890 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8012890:	b590      	push	{r4, r7, lr}
 8012892:	b089      	sub	sp, #36	; 0x24
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	4613      	mov	r3, r2
 801289c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d102      	bne.n	80128ae <accept_function+0x1e>
    return ERR_VAL;
 80128a8:	f06f 0305 	mvn.w	r3, #5
 80128ac:	e0a1      	b.n	80129f2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80128ae:	69fb      	ldr	r3, [r7, #28]
 80128b0:	3314      	adds	r3, #20
 80128b2:	4618      	mov	r0, r3
 80128b4:	f00c f99a 	bl	801ebec <sys_mbox_valid>
 80128b8:	4603      	mov	r3, r0
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d102      	bne.n	80128c4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80128be:	f06f 0305 	mvn.w	r3, #5
 80128c2:	e096      	b.n	80129f2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d11b      	bne.n	8012902 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80128ca:	69fb      	ldr	r3, [r7, #28]
 80128cc:	f103 0414 	add.w	r4, r3, #20
 80128d0:	f06f 000c 	mvn.w	r0, #12
 80128d4:	f7ff fcb2 	bl	801223c <lwip_netconn_err_to_msg>
 80128d8:	4603      	mov	r3, r0
 80128da:	4619      	mov	r1, r3
 80128dc:	4620      	mov	r0, r4
 80128de:	f00c f923 	bl	801eb28 <sys_mbox_trypost>
 80128e2:	4603      	mov	r3, r0
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d109      	bne.n	80128fc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d005      	beq.n	80128fc <accept_function+0x6c>
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128f4:	2200      	movs	r2, #0
 80128f6:	2100      	movs	r1, #0
 80128f8:	69f8      	ldr	r0, [r7, #28]
 80128fa:	4798      	blx	r3
    }
    return ERR_VAL;
 80128fc:	f06f 0305 	mvn.w	r3, #5
 8012900:	e077      	b.n	80129f2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8012902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d006      	beq.n	8012918 <accept_function+0x88>
 801290a:	4b3c      	ldr	r3, [pc, #240]	; (80129fc <accept_function+0x16c>)
 801290c:	f240 222a 	movw	r2, #554	; 0x22a
 8012910:	493b      	ldr	r1, [pc, #236]	; (8012a00 <accept_function+0x170>)
 8012912:	483c      	ldr	r0, [pc, #240]	; (8012a04 <accept_function+0x174>)
 8012914:	f011 ff7c 	bl	8024810 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8012918:	69fb      	ldr	r3, [r7, #28]
 801291a:	781a      	ldrb	r2, [r3, #0]
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012920:	4619      	mov	r1, r3
 8012922:	4610      	mov	r0, r2
 8012924:	f000 f8f0 	bl	8012b08 <netconn_alloc>
 8012928:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801292a:	69bb      	ldr	r3, [r7, #24]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d11b      	bne.n	8012968 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8012930:	69fb      	ldr	r3, [r7, #28]
 8012932:	f103 0414 	add.w	r4, r3, #20
 8012936:	f06f 000c 	mvn.w	r0, #12
 801293a:	f7ff fc7f 	bl	801223c <lwip_netconn_err_to_msg>
 801293e:	4603      	mov	r3, r0
 8012940:	4619      	mov	r1, r3
 8012942:	4620      	mov	r0, r4
 8012944:	f00c f8f0 	bl	801eb28 <sys_mbox_trypost>
 8012948:	4603      	mov	r3, r0
 801294a:	2b00      	cmp	r3, #0
 801294c:	d109      	bne.n	8012962 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801294e:	69fb      	ldr	r3, [r7, #28]
 8012950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012952:	2b00      	cmp	r3, #0
 8012954:	d005      	beq.n	8012962 <accept_function+0xd2>
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801295a:	2200      	movs	r2, #0
 801295c:	2100      	movs	r1, #0
 801295e:	69f8      	ldr	r0, [r7, #28]
 8012960:	4798      	blx	r3
    }
    return ERR_MEM;
 8012962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012966:	e044      	b.n	80129f2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8012968:	69bb      	ldr	r3, [r7, #24]
 801296a:	68ba      	ldr	r2, [r7, #8]
 801296c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 801296e:	69b8      	ldr	r0, [r7, #24]
 8012970:	f7ff ff66 	bl	8012840 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	3314      	adds	r3, #20
 8012978:	69b9      	ldr	r1, [r7, #24]
 801297a:	4618      	mov	r0, r3
 801297c:	f00c f8d4 	bl	801eb28 <sys_mbox_trypost>
 8012980:	4603      	mov	r3, r0
 8012982:	2b00      	cmp	r3, #0
 8012984:	d02a      	beq.n	80129dc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8012986:	69bb      	ldr	r3, [r7, #24]
 8012988:	685b      	ldr	r3, [r3, #4]
 801298a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 801298c:	2100      	movs	r1, #0
 801298e:	6978      	ldr	r0, [r7, #20]
 8012990:	f004 fcbc 	bl	801730c <tcp_arg>
    tcp_recv(pcb, NULL);
 8012994:	2100      	movs	r1, #0
 8012996:	6978      	ldr	r0, [r7, #20]
 8012998:	f004 fcca 	bl	8017330 <tcp_recv>
    tcp_sent(pcb, NULL);
 801299c:	2100      	movs	r1, #0
 801299e:	6978      	ldr	r0, [r7, #20]
 80129a0:	f004 fce8 	bl	8017374 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80129a4:	2200      	movs	r2, #0
 80129a6:	2100      	movs	r1, #0
 80129a8:	6978      	ldr	r0, [r7, #20]
 80129aa:	f004 fd3f 	bl	801742c <tcp_poll>
    tcp_err(pcb, NULL);
 80129ae:	2100      	movs	r1, #0
 80129b0:	6978      	ldr	r0, [r7, #20]
 80129b2:	f004 fd01 	bl	80173b8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80129b6:	69bb      	ldr	r3, [r7, #24]
 80129b8:	2200      	movs	r2, #0
 80129ba:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80129bc:	69bb      	ldr	r3, [r7, #24]
 80129be:	3310      	adds	r3, #16
 80129c0:	4618      	mov	r0, r3
 80129c2:	f00c f89f 	bl	801eb04 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80129c6:	69bb      	ldr	r3, [r7, #24]
 80129c8:	3310      	adds	r3, #16
 80129ca:	4618      	mov	r0, r3
 80129cc:	f00c f91f 	bl	801ec0e <sys_mbox_set_invalid>
    netconn_free(newconn);
 80129d0:	69b8      	ldr	r0, [r7, #24]
 80129d2:	f000 f907 	bl	8012be4 <netconn_free>
    return ERR_MEM;
 80129d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129da:	e00a      	b.n	80129f2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80129dc:	69fb      	ldr	r3, [r7, #28]
 80129de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d005      	beq.n	80129f0 <accept_function+0x160>
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129e8:	2200      	movs	r2, #0
 80129ea:	2100      	movs	r1, #0
 80129ec:	69f8      	ldr	r0, [r7, #28]
 80129ee:	4798      	blx	r3
  }

  return ERR_OK;
 80129f0:	2300      	movs	r3, #0
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	3724      	adds	r7, #36	; 0x24
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd90      	pop	{r4, r7, pc}
 80129fa:	bf00      	nop
 80129fc:	08029a48 	.word	0x08029a48
 8012a00:	08029c04 	.word	0x08029c04
 8012a04:	08029a8c 	.word	0x08029a8c

08012a08 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8012a08:	b590      	push	{r4, r7, lr}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8012a10:	2300      	movs	r3, #0
 8012a12:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	685b      	ldr	r3, [r3, #4]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d006      	beq.n	8012a2c <pcb_new+0x24>
 8012a1e:	4b2b      	ldr	r3, [pc, #172]	; (8012acc <pcb_new+0xc4>)
 8012a20:	f240 2265 	movw	r2, #613	; 0x265
 8012a24:	492a      	ldr	r1, [pc, #168]	; (8012ad0 <pcb_new+0xc8>)
 8012a26:	482b      	ldr	r0, [pc, #172]	; (8012ad4 <pcb_new+0xcc>)
 8012a28:	f011 fef2 	bl	8024810 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a36:	2b10      	cmp	r3, #16
 8012a38:	d022      	beq.n	8012a80 <pcb_new+0x78>
 8012a3a:	2b20      	cmp	r3, #32
 8012a3c:	d133      	bne.n	8012aa6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681c      	ldr	r4, [r3, #0]
 8012a42:	7bfb      	ldrb	r3, [r7, #15]
 8012a44:	4618      	mov	r0, r3
 8012a46:	f009 fd40 	bl	801c4ca <udp_new_ip_type>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d02a      	beq.n	8012aae <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	2b22      	cmp	r3, #34	; 0x22
 8012a60:	d104      	bne.n	8012a6c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	2201      	movs	r2, #1
 8012a6a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	6858      	ldr	r0, [r3, #4]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	461a      	mov	r2, r3
 8012a78:	4917      	ldr	r1, [pc, #92]	; (8012ad8 <pcb_new+0xd0>)
 8012a7a:	f009 fcad 	bl	801c3d8 <udp_recv>
      }
      break;
 8012a7e:	e016      	b.n	8012aae <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681c      	ldr	r4, [r3, #0]
 8012a84:	7bfb      	ldrb	r3, [r7, #15]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f004 fc32 	bl	80172f0 <tcp_new_ip_type>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	685b      	ldr	r3, [r3, #4]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d00b      	beq.n	8012ab2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7ff fece 	bl	8012840 <setup_tcp>
      }
      break;
 8012aa4:	e005      	b.n	8012ab2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	22fa      	movs	r2, #250	; 0xfa
 8012aaa:	711a      	strb	r2, [r3, #4]
      return;
 8012aac:	e00a      	b.n	8012ac4 <pcb_new+0xbc>
      break;
 8012aae:	bf00      	nop
 8012ab0:	e000      	b.n	8012ab4 <pcb_new+0xac>
      break;
 8012ab2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	685b      	ldr	r3, [r3, #4]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d102      	bne.n	8012ac4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	22ff      	movs	r2, #255	; 0xff
 8012ac2:	711a      	strb	r2, [r3, #4]
  }
}
 8012ac4:	3714      	adds	r7, #20
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd90      	pop	{r4, r7, pc}
 8012aca:	bf00      	nop
 8012acc:	08029a48 	.word	0x08029a48
 8012ad0:	08029c2c 	.word	0x08029c2c
 8012ad4:	08029a8c 	.word	0x08029a8c
 8012ad8:	0801231d 	.word	0x0801231d

08012adc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b084      	sub	sp, #16
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2200      	movs	r2, #0
 8012aec:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d102      	bne.n	8012afe <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8012af8:	68f8      	ldr	r0, [r7, #12]
 8012afa:	f7ff ff85 	bl	8012a08 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8012afe:	bf00      	nop
 8012b00:	3710      	adds	r7, #16
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
	...

08012b08 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b086      	sub	sp, #24
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	4603      	mov	r3, r0
 8012b10:	6039      	str	r1, [r7, #0]
 8012b12:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8012b14:	2300      	movs	r3, #0
 8012b16:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8012b18:	2007      	movs	r0, #7
 8012b1a:	f001 fe5f 	bl	80147dc <memp_malloc>
 8012b1e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d101      	bne.n	8012b2a <netconn_alloc+0x22>
    return NULL;
 8012b26:	2300      	movs	r3, #0
 8012b28:	e052      	b.n	8012bd0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	79fa      	ldrb	r2, [r7, #7]
 8012b34:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8012b3c:	79fb      	ldrb	r3, [r7, #7]
 8012b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012b42:	2b10      	cmp	r3, #16
 8012b44:	d004      	beq.n	8012b50 <netconn_alloc+0x48>
 8012b46:	2b20      	cmp	r3, #32
 8012b48:	d105      	bne.n	8012b56 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8012b4a:	2306      	movs	r3, #6
 8012b4c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8012b4e:	e00a      	b.n	8012b66 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8012b50:	2306      	movs	r3, #6
 8012b52:	617b      	str	r3, [r7, #20]
      break;
 8012b54:	e007      	b.n	8012b66 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8012b56:	4b20      	ldr	r3, [pc, #128]	; (8012bd8 <netconn_alloc+0xd0>)
 8012b58:	f240 22e5 	movw	r2, #741	; 0x2e5
 8012b5c:	491f      	ldr	r1, [pc, #124]	; (8012bdc <netconn_alloc+0xd4>)
 8012b5e:	4820      	ldr	r0, [pc, #128]	; (8012be0 <netconn_alloc+0xd8>)
 8012b60:	f011 fe56 	bl	8024810 <iprintf>
      goto free_and_return;
 8012b64:	e02f      	b.n	8012bc6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	3310      	adds	r3, #16
 8012b6a:	6979      	ldr	r1, [r7, #20]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f00b ffaf 	bl	801ead0 <sys_mbox_new>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d125      	bne.n	8012bc4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	330c      	adds	r3, #12
 8012b7c:	2100      	movs	r1, #0
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f00c f852 	bl	801ec28 <sys_sem_new>
 8012b84:	4603      	mov	r3, r0
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d005      	beq.n	8012b96 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	3310      	adds	r3, #16
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f00b ffb8 	bl	801eb04 <sys_mbox_free>
    goto free_and_return;
 8012b94:	e017      	b.n	8012bc6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	3314      	adds	r3, #20
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f00c f837 	bl	801ec0e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012bac:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	683a      	ldr	r2, [r7, #0]
 8012bb2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	7cfa      	ldrb	r2, [r7, #19]
 8012bbe:	771a      	strb	r2, [r3, #28]
  return conn;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	e005      	b.n	8012bd0 <netconn_alloc+0xc8>
    goto free_and_return;
 8012bc4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8012bc6:	68f9      	ldr	r1, [r7, #12]
 8012bc8:	2007      	movs	r0, #7
 8012bca:	f001 fe7d 	bl	80148c8 <memp_free>
  return NULL;
 8012bce:	2300      	movs	r3, #0
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3718      	adds	r7, #24
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	08029a48 	.word	0x08029a48
 8012bdc:	08029c4c 	.word	0x08029c4c
 8012be0:	08029a8c 	.word	0x08029a8c

08012be4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d006      	beq.n	8012c02 <netconn_free+0x1e>
 8012bf4:	4b1b      	ldr	r3, [pc, #108]	; (8012c64 <netconn_free+0x80>)
 8012bf6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012bfa:	491b      	ldr	r1, [pc, #108]	; (8012c68 <netconn_free+0x84>)
 8012bfc:	481b      	ldr	r0, [pc, #108]	; (8012c6c <netconn_free+0x88>)
 8012bfe:	f011 fe07 	bl	8024810 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	3310      	adds	r3, #16
 8012c06:	4618      	mov	r0, r3
 8012c08:	f00b fff0 	bl	801ebec <sys_mbox_valid>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d006      	beq.n	8012c20 <netconn_free+0x3c>
 8012c12:	4b14      	ldr	r3, [pc, #80]	; (8012c64 <netconn_free+0x80>)
 8012c14:	f240 3223 	movw	r2, #803	; 0x323
 8012c18:	4915      	ldr	r1, [pc, #84]	; (8012c70 <netconn_free+0x8c>)
 8012c1a:	4814      	ldr	r0, [pc, #80]	; (8012c6c <netconn_free+0x88>)
 8012c1c:	f011 fdf8 	bl	8024810 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	3314      	adds	r3, #20
 8012c24:	4618      	mov	r0, r3
 8012c26:	f00b ffe1 	bl	801ebec <sys_mbox_valid>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d006      	beq.n	8012c3e <netconn_free+0x5a>
 8012c30:	4b0c      	ldr	r3, [pc, #48]	; (8012c64 <netconn_free+0x80>)
 8012c32:	f240 3226 	movw	r2, #806	; 0x326
 8012c36:	490f      	ldr	r1, [pc, #60]	; (8012c74 <netconn_free+0x90>)
 8012c38:	480c      	ldr	r0, [pc, #48]	; (8012c6c <netconn_free+0x88>)
 8012c3a:	f011 fde9 	bl	8024810 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	330c      	adds	r3, #12
 8012c42:	4618      	mov	r0, r3
 8012c44:	f00c f853 	bl	801ecee <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	330c      	adds	r3, #12
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f00c f86c 	bl	801ed2a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8012c52:	6879      	ldr	r1, [r7, #4]
 8012c54:	2007      	movs	r0, #7
 8012c56:	f001 fe37 	bl	80148c8 <memp_free>
}
 8012c5a:	bf00      	nop
 8012c5c:	3708      	adds	r7, #8
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	08029a48 	.word	0x08029a48
 8012c68:	08029c74 	.word	0x08029c74
 8012c6c:	08029a8c 	.word	0x08029a8c
 8012c70:	08029ca4 	.word	0x08029ca4
 8012c74:	08029ce0 	.word	0x08029ce0

08012c78 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b086      	sub	sp, #24
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	3310      	adds	r3, #16
 8012c84:	4618      	mov	r0, r3
 8012c86:	f00b ffb1 	bl	801ebec <sys_mbox_valid>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d02f      	beq.n	8012cf0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012c90:	e018      	b.n	8012cc4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c9a:	2b10      	cmp	r3, #16
 8012c9c:	d10e      	bne.n	8012cbc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012c9e:	693b      	ldr	r3, [r7, #16]
 8012ca0:	f107 020f 	add.w	r2, r7, #15
 8012ca4:	4611      	mov	r1, r2
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7ff fafe 	bl	80122a8 <lwip_netconn_is_err_msg>
 8012cac:	4603      	mov	r3, r0
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d108      	bne.n	8012cc4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f002 fcab 	bl	8015610 <pbuf_free>
 8012cba:	e003      	b.n	8012cc4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f000 fe92 	bl	80139e8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	3310      	adds	r3, #16
 8012cc8:	f107 0210 	add.w	r2, r7, #16
 8012ccc:	4611      	mov	r1, r2
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f00b ff75 	bl	801ebbe <sys_arch_mbox_tryfetch>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cda:	d1da      	bne.n	8012c92 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	3310      	adds	r3, #16
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f00b ff0f 	bl	801eb04 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	3310      	adds	r3, #16
 8012cea:	4618      	mov	r0, r3
 8012cec:	f00b ff8f 	bl	801ec0e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	3314      	adds	r3, #20
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f00b ff79 	bl	801ebec <sys_mbox_valid>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d034      	beq.n	8012d6a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012d00:	e01d      	b.n	8012d3e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	f107 020e 	add.w	r2, r7, #14
 8012d08:	4611      	mov	r1, r2
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7ff facc 	bl	80122a8 <lwip_netconn_is_err_msg>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d113      	bne.n	8012d3e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8012d1a:	6978      	ldr	r0, [r7, #20]
 8012d1c:	f7ff ffac 	bl	8012c78 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d007      	beq.n	8012d38 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	685b      	ldr	r3, [r3, #4]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f003 fa5f 	bl	80161f0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	2200      	movs	r2, #0
 8012d36:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8012d38:	6978      	ldr	r0, [r7, #20]
 8012d3a:	f7ff ff53 	bl	8012be4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	3314      	adds	r3, #20
 8012d42:	f107 0210 	add.w	r2, r7, #16
 8012d46:	4611      	mov	r1, r2
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f00b ff38 	bl	801ebbe <sys_arch_mbox_tryfetch>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d54:	d1d5      	bne.n	8012d02 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3314      	adds	r3, #20
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f00b fed2 	bl	801eb04 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	3314      	adds	r3, #20
 8012d64:	4618      	mov	r0, r3
 8012d66:	f00b ff52 	bl	801ec0e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8012d6a:	bf00      	nop
 8012d6c:	3718      	adds	r7, #24
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
	...

08012d74 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b086      	sub	sp, #24
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8012d80:	2300      	movs	r3, #0
 8012d82:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d106      	bne.n	8012d98 <lwip_netconn_do_close_internal+0x24>
 8012d8a:	4b87      	ldr	r3, [pc, #540]	; (8012fa8 <lwip_netconn_do_close_internal+0x234>)
 8012d8c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8012d90:	4986      	ldr	r1, [pc, #536]	; (8012fac <lwip_netconn_do_close_internal+0x238>)
 8012d92:	4887      	ldr	r0, [pc, #540]	; (8012fb0 <lwip_netconn_do_close_internal+0x23c>)
 8012d94:	f011 fd3c 	bl	8024810 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012da0:	2b10      	cmp	r3, #16
 8012da2:	d006      	beq.n	8012db2 <lwip_netconn_do_close_internal+0x3e>
 8012da4:	4b80      	ldr	r3, [pc, #512]	; (8012fa8 <lwip_netconn_do_close_internal+0x234>)
 8012da6:	f240 32a3 	movw	r2, #931	; 0x3a3
 8012daa:	4982      	ldr	r1, [pc, #520]	; (8012fb4 <lwip_netconn_do_close_internal+0x240>)
 8012dac:	4880      	ldr	r0, [pc, #512]	; (8012fb0 <lwip_netconn_do_close_internal+0x23c>)
 8012dae:	f011 fd2f 	bl	8024810 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	785b      	ldrb	r3, [r3, #1]
 8012db6:	2b04      	cmp	r3, #4
 8012db8:	d006      	beq.n	8012dc8 <lwip_netconn_do_close_internal+0x54>
 8012dba:	4b7b      	ldr	r3, [pc, #492]	; (8012fa8 <lwip_netconn_do_close_internal+0x234>)
 8012dbc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8012dc0:	497d      	ldr	r1, [pc, #500]	; (8012fb8 <lwip_netconn_do_close_internal+0x244>)
 8012dc2:	487b      	ldr	r0, [pc, #492]	; (8012fb0 <lwip_netconn_do_close_internal+0x23c>)
 8012dc4:	f011 fd24 	bl	8024810 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d106      	bne.n	8012dde <lwip_netconn_do_close_internal+0x6a>
 8012dd0:	4b75      	ldr	r3, [pc, #468]	; (8012fa8 <lwip_netconn_do_close_internal+0x234>)
 8012dd2:	f240 32a5 	movw	r2, #933	; 0x3a5
 8012dd6:	4979      	ldr	r1, [pc, #484]	; (8012fbc <lwip_netconn_do_close_internal+0x248>)
 8012dd8:	4875      	ldr	r0, [pc, #468]	; (8012fb0 <lwip_netconn_do_close_internal+0x23c>)
 8012dda:	f011 fd19 	bl	8024810 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	6a1b      	ldr	r3, [r3, #32]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d106      	bne.n	8012df4 <lwip_netconn_do_close_internal+0x80>
 8012de6:	4b70      	ldr	r3, [pc, #448]	; (8012fa8 <lwip_netconn_do_close_internal+0x234>)
 8012de8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012dec:	4974      	ldr	r1, [pc, #464]	; (8012fc0 <lwip_netconn_do_close_internal+0x24c>)
 8012dee:	4870      	ldr	r0, [pc, #448]	; (8012fb0 <lwip_netconn_do_close_internal+0x23c>)
 8012df0:	f011 fd0e 	bl	8024810 <iprintf>

  tpcb = conn->pcb.tcp;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6a1b      	ldr	r3, [r3, #32]
 8012dfe:	7a1b      	ldrb	r3, [r3, #8]
 8012e00:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8012e02:	7bfb      	ldrb	r3, [r7, #15]
 8012e04:	f003 0301 	and.w	r3, r3, #1
 8012e08:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8012e0a:	7bfb      	ldrb	r3, [r7, #15]
 8012e0c:	f003 0302 	and.w	r3, r3, #2
 8012e10:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8012e12:	7bfb      	ldrb	r3, [r7, #15]
 8012e14:	2b03      	cmp	r3, #3
 8012e16:	d102      	bne.n	8012e1e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8012e18:	2301      	movs	r3, #1
 8012e1a:	75bb      	strb	r3, [r7, #22]
 8012e1c:	e01f      	b.n	8012e5e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8012e1e:	7bbb      	ldrb	r3, [r7, #14]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d00e      	beq.n	8012e42 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8012e28:	2b05      	cmp	r3, #5
 8012e2a:	d007      	beq.n	8012e3c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8012e30:	2b06      	cmp	r3, #6
 8012e32:	d003      	beq.n	8012e3c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8012e34:	693b      	ldr	r3, [r7, #16]
 8012e36:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8012e38:	2b08      	cmp	r3, #8
 8012e3a:	d102      	bne.n	8012e42 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	75bb      	strb	r3, [r7, #22]
 8012e40:	e00d      	b.n	8012e5e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8012e42:	7b7b      	ldrb	r3, [r7, #13]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d008      	beq.n	8012e5a <lwip_netconn_do_close_internal+0xe6>
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	8b5b      	ldrh	r3, [r3, #26]
 8012e4c:	f003 0310 	and.w	r3, r3, #16
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d002      	beq.n	8012e5a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8012e54:	2301      	movs	r3, #1
 8012e56:	75bb      	strb	r3, [r7, #22]
 8012e58:	e001      	b.n	8012e5e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012e5e:	7dbb      	ldrb	r3, [r7, #22]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d003      	beq.n	8012e6c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8012e64:	2100      	movs	r1, #0
 8012e66:	6938      	ldr	r0, [r7, #16]
 8012e68:	f004 fa50 	bl	801730c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	7d1b      	ldrb	r3, [r3, #20]
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d104      	bne.n	8012e7e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8012e74:	2100      	movs	r1, #0
 8012e76:	6938      	ldr	r0, [r7, #16]
 8012e78:	f004 fac0 	bl	80173fc <tcp_accept>
 8012e7c:	e01d      	b.n	8012eba <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012e7e:	7bbb      	ldrb	r3, [r7, #14]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d007      	beq.n	8012e94 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8012e84:	2100      	movs	r1, #0
 8012e86:	6938      	ldr	r0, [r7, #16]
 8012e88:	f004 fa52 	bl	8017330 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8012e8c:	2100      	movs	r1, #0
 8012e8e:	6938      	ldr	r0, [r7, #16]
 8012e90:	f004 fab4 	bl	80173fc <tcp_accept>
    }
    if (shut_tx) {
 8012e94:	7b7b      	ldrb	r3, [r7, #13]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d003      	beq.n	8012ea2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8012e9a:	2100      	movs	r1, #0
 8012e9c:	6938      	ldr	r0, [r7, #16]
 8012e9e:	f004 fa69 	bl	8017374 <tcp_sent>
    }
    if (shut_close) {
 8012ea2:	7dbb      	ldrb	r3, [r7, #22]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d008      	beq.n	8012eba <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	2100      	movs	r1, #0
 8012eac:	6938      	ldr	r0, [r7, #16]
 8012eae:	f004 fabd 	bl	801742c <tcp_poll>
      tcp_err(tpcb, NULL);
 8012eb2:	2100      	movs	r1, #0
 8012eb4:	6938      	ldr	r0, [r7, #16]
 8012eb6:	f004 fa7f 	bl	80173b8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8012eba:	7dbb      	ldrb	r3, [r7, #22]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d005      	beq.n	8012ecc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012ec0:	6938      	ldr	r0, [r7, #16]
 8012ec2:	f003 f84f 	bl	8015f64 <tcp_close>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	75fb      	strb	r3, [r7, #23]
 8012eca:	e007      	b.n	8012edc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012ecc:	7bbb      	ldrb	r3, [r7, #14]
 8012ece:	7b7a      	ldrb	r2, [r7, #13]
 8012ed0:	4619      	mov	r1, r3
 8012ed2:	6938      	ldr	r0, [r7, #16]
 8012ed4:	f003 f872 	bl	8015fbc <tcp_shutdown>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012edc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d102      	bne.n	8012eea <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	757b      	strb	r3, [r7, #21]
 8012ee8:	e016      	b.n	8012f18 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8012eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ef2:	d10f      	bne.n	8012f14 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6a1b      	ldr	r3, [r3, #32]
 8012ef8:	7a5b      	ldrb	r3, [r3, #9]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d10c      	bne.n	8012f18 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8012efe:	2301      	movs	r3, #1
 8012f00:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8012f02:	7dbb      	ldrb	r3, [r7, #22]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d007      	beq.n	8012f18 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8012f08:	6938      	ldr	r0, [r7, #16]
 8012f0a:	f003 f971 	bl	80161f0 <tcp_abort>
          err = ERR_OK;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	75fb      	strb	r3, [r7, #23]
 8012f12:	e001      	b.n	8012f18 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8012f14:	2301      	movs	r3, #1
 8012f16:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8012f18:	7d7b      	ldrb	r3, [r7, #21]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d052      	beq.n	8012fc4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6a1b      	ldr	r3, [r3, #32]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	330c      	adds	r3, #12
 8012f26:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6a1b      	ldr	r3, [r3, #32]
 8012f2c:	7dfa      	ldrb	r2, [r7, #23]
 8012f2e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2200      	movs	r2, #0
 8012f34:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8012f3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d129      	bne.n	8012f98 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8012f44:	7dbb      	ldrb	r3, [r7, #22]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d00c      	beq.n	8012f64 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d005      	beq.n	8012f64 <lwip_netconn_do_close_internal+0x1f0>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	2104      	movs	r1, #4
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	4798      	blx	r3
      }
      if (shut_rx) {
 8012f64:	7bbb      	ldrb	r3, [r7, #14]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d009      	beq.n	8012f7e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d005      	beq.n	8012f7e <lwip_netconn_do_close_internal+0x20a>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f76:	2200      	movs	r2, #0
 8012f78:	2100      	movs	r1, #0
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	4798      	blx	r3
      }
      if (shut_tx) {
 8012f7e:	7b7b      	ldrb	r3, [r7, #13]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d009      	beq.n	8012f98 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d005      	beq.n	8012f98 <lwip_netconn_do_close_internal+0x224>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f90:	2200      	movs	r2, #0
 8012f92:	2102      	movs	r1, #2
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012f98:	78fb      	ldrb	r3, [r7, #3]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d002      	beq.n	8012fa4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012f9e:	68b8      	ldr	r0, [r7, #8]
 8012fa0:	f00b fe98 	bl	801ecd4 <sys_sem_signal>
    }
    return ERR_OK;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	e03c      	b.n	8013022 <lwip_netconn_do_close_internal+0x2ae>
 8012fa8:	08029a48 	.word	0x08029a48
 8012fac:	08029d1c 	.word	0x08029d1c
 8012fb0:	08029a8c 	.word	0x08029a8c
 8012fb4:	08029d2c 	.word	0x08029d2c
 8012fb8:	08029d4c 	.word	0x08029d4c
 8012fbc:	08029d70 	.word	0x08029d70
 8012fc0:	08029bb0 	.word	0x08029bb0
  }
  if (!close_finished) {
 8012fc4:	7d7b      	ldrb	r3, [r7, #21]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d11e      	bne.n	8013008 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	7d1b      	ldrb	r3, [r3, #20]
 8012fce:	2b01      	cmp	r3, #1
 8012fd0:	d106      	bne.n	8012fe0 <lwip_netconn_do_close_internal+0x26c>
 8012fd2:	4b16      	ldr	r3, [pc, #88]	; (801302c <lwip_netconn_do_close_internal+0x2b8>)
 8012fd4:	f240 4241 	movw	r2, #1089	; 0x441
 8012fd8:	4915      	ldr	r1, [pc, #84]	; (8013030 <lwip_netconn_do_close_internal+0x2bc>)
 8012fda:	4816      	ldr	r0, [pc, #88]	; (8013034 <lwip_netconn_do_close_internal+0x2c0>)
 8012fdc:	f011 fc18 	bl	8024810 <iprintf>
    if (shut_tx) {
 8012fe0:	7b7b      	ldrb	r3, [r7, #13]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d003      	beq.n	8012fee <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8012fe6:	4914      	ldr	r1, [pc, #80]	; (8013038 <lwip_netconn_do_close_internal+0x2c4>)
 8012fe8:	6938      	ldr	r0, [r7, #16]
 8012fea:	f004 f9c3 	bl	8017374 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012fee:	2201      	movs	r2, #1
 8012ff0:	4912      	ldr	r1, [pc, #72]	; (801303c <lwip_netconn_do_close_internal+0x2c8>)
 8012ff2:	6938      	ldr	r0, [r7, #16]
 8012ff4:	f004 fa1a 	bl	801742c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8012ff8:	4911      	ldr	r1, [pc, #68]	; (8013040 <lwip_netconn_do_close_internal+0x2cc>)
 8012ffa:	6938      	ldr	r0, [r7, #16]
 8012ffc:	f004 f9dc 	bl	80173b8 <tcp_err>
    tcp_arg(tpcb, conn);
 8013000:	6879      	ldr	r1, [r7, #4]
 8013002:	6938      	ldr	r0, [r7, #16]
 8013004:	f004 f982 	bl	801730c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8013008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d106      	bne.n	801301e <lwip_netconn_do_close_internal+0x2aa>
 8013010:	4b06      	ldr	r3, [pc, #24]	; (801302c <lwip_netconn_do_close_internal+0x2b8>)
 8013012:	f240 424d 	movw	r2, #1101	; 0x44d
 8013016:	490b      	ldr	r1, [pc, #44]	; (8013044 <lwip_netconn_do_close_internal+0x2d0>)
 8013018:	4806      	ldr	r0, [pc, #24]	; (8013034 <lwip_netconn_do_close_internal+0x2c0>)
 801301a:	f011 fbf9 	bl	8024810 <iprintf>
  return err;
 801301e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013022:	4618      	mov	r0, r3
 8013024:	3718      	adds	r7, #24
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}
 801302a:	bf00      	nop
 801302c:	08029a48 	.word	0x08029a48
 8013030:	08029d84 	.word	0x08029d84
 8013034:	08029a8c 	.word	0x08029a8c
 8013038:	080125ed 	.word	0x080125ed
 801303c:	08012525 	.word	0x08012525
 8013040:	08012695 	.word	0x08012695
 8013044:	08029da8 	.word	0x08029da8

08013048 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b084      	sub	sp, #16
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	785b      	ldrb	r3, [r3, #1]
 801305a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 801305c:	7afb      	ldrb	r3, [r7, #11]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d00d      	beq.n	801307e <lwip_netconn_do_delconn+0x36>
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801306c:	2b10      	cmp	r3, #16
 801306e:	d006      	beq.n	801307e <lwip_netconn_do_delconn+0x36>
 8013070:	4b60      	ldr	r3, [pc, #384]	; (80131f4 <lwip_netconn_do_delconn+0x1ac>)
 8013072:	f240 425e 	movw	r2, #1118	; 0x45e
 8013076:	4960      	ldr	r1, [pc, #384]	; (80131f8 <lwip_netconn_do_delconn+0x1b0>)
 8013078:	4860      	ldr	r0, [pc, #384]	; (80131fc <lwip_netconn_do_delconn+0x1b4>)
 801307a:	f011 fbc9 	bl	8024810 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801307e:	7afb      	ldrb	r3, [r7, #11]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d005      	beq.n	8013090 <lwip_netconn_do_delconn+0x48>
 8013084:	7afb      	ldrb	r3, [r7, #11]
 8013086:	2b02      	cmp	r3, #2
 8013088:	d002      	beq.n	8013090 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801308a:	7afb      	ldrb	r3, [r7, #11]
 801308c:	2b03      	cmp	r3, #3
 801308e:	d109      	bne.n	80130a4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8013090:	7afb      	ldrb	r3, [r7, #11]
 8013092:	2b03      	cmp	r3, #3
 8013094:	d10a      	bne.n	80130ac <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	7f1b      	ldrb	r3, [r3, #28]
 801309c:	f003 0304 	and.w	r3, r3, #4
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d103      	bne.n	80130ac <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	22fb      	movs	r2, #251	; 0xfb
 80130a8:	711a      	strb	r2, [r3, #4]
 80130aa:	e097      	b.n	80131dc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80130ac:	7afb      	ldrb	r3, [r7, #11]
 80130ae:	2b03      	cmp	r3, #3
 80130b0:	d10d      	bne.n	80130ce <lwip_netconn_do_delconn+0x86>
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	7f1b      	ldrb	r3, [r3, #28]
 80130b8:	f003 0304 	and.w	r3, r3, #4
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d106      	bne.n	80130ce <lwip_netconn_do_delconn+0x86>
 80130c0:	4b4c      	ldr	r3, [pc, #304]	; (80131f4 <lwip_netconn_do_delconn+0x1ac>)
 80130c2:	f240 427a 	movw	r2, #1146	; 0x47a
 80130c6:	494e      	ldr	r1, [pc, #312]	; (8013200 <lwip_netconn_do_delconn+0x1b8>)
 80130c8:	484c      	ldr	r0, [pc, #304]	; (80131fc <lwip_netconn_do_delconn+0x1b4>)
 80130ca:	f011 fba1 	bl	8024810 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2200      	movs	r2, #0
 80130d2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	4618      	mov	r0, r3
 80130da:	f7ff fdcd 	bl	8012c78 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d05f      	beq.n	80131a8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	781b      	ldrb	r3, [r3, #0]
 80130ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130f2:	2b10      	cmp	r3, #16
 80130f4:	d00d      	beq.n	8013112 <lwip_netconn_do_delconn+0xca>
 80130f6:	2b20      	cmp	r3, #32
 80130f8:	d151      	bne.n	801319e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	2200      	movs	r2, #0
 8013102:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	4618      	mov	r0, r3
 801310c:	f009 f984 	bl	801c418 <udp_remove>
          break;
 8013110:	e046      	b.n	80131a0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	6a1b      	ldr	r3, [r3, #32]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d006      	beq.n	801312a <lwip_netconn_do_delconn+0xe2>
 801311c:	4b35      	ldr	r3, [pc, #212]	; (80131f4 <lwip_netconn_do_delconn+0x1ac>)
 801311e:	f240 4294 	movw	r2, #1172	; 0x494
 8013122:	4938      	ldr	r1, [pc, #224]	; (8013204 <lwip_netconn_do_delconn+0x1bc>)
 8013124:	4835      	ldr	r0, [pc, #212]	; (80131fc <lwip_netconn_do_delconn+0x1b4>)
 8013126:	f011 fb73 	bl	8024810 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	2204      	movs	r2, #4
 8013130:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	2203      	movs	r2, #3
 8013136:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	68fa      	ldr	r2, [r7, #12]
 801313e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	2100      	movs	r1, #0
 8013146:	4618      	mov	r0, r3
 8013148:	f7ff fe14 	bl	8012d74 <lwip_netconn_do_close_internal>
 801314c:	4603      	mov	r3, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	d04b      	beq.n	80131ea <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	785b      	ldrb	r3, [r3, #1]
 8013158:	2b04      	cmp	r3, #4
 801315a:	d006      	beq.n	801316a <lwip_netconn_do_delconn+0x122>
 801315c:	4b25      	ldr	r3, [pc, #148]	; (80131f4 <lwip_netconn_do_delconn+0x1ac>)
 801315e:	f240 429a 	movw	r2, #1178	; 0x49a
 8013162:	4929      	ldr	r1, [pc, #164]	; (8013208 <lwip_netconn_do_delconn+0x1c0>)
 8013164:	4825      	ldr	r0, [pc, #148]	; (80131fc <lwip_netconn_do_delconn+0x1b4>)
 8013166:	f011 fb53 	bl	8024810 <iprintf>
            UNLOCK_TCPIP_CORE();
 801316a:	4828      	ldr	r0, [pc, #160]	; (801320c <lwip_netconn_do_delconn+0x1c4>)
 801316c:	f00b fe1b 	bl	801eda6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	330c      	adds	r3, #12
 8013176:	2100      	movs	r1, #0
 8013178:	4618      	mov	r0, r3
 801317a:	f00b fd7a 	bl	801ec72 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801317e:	4823      	ldr	r0, [pc, #140]	; (801320c <lwip_netconn_do_delconn+0x1c4>)
 8013180:	f00b fe02 	bl	801ed88 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	785b      	ldrb	r3, [r3, #1]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d02d      	beq.n	80131ea <lwip_netconn_do_delconn+0x1a2>
 801318e:	4b19      	ldr	r3, [pc, #100]	; (80131f4 <lwip_netconn_do_delconn+0x1ac>)
 8013190:	f240 429e 	movw	r2, #1182	; 0x49e
 8013194:	491c      	ldr	r1, [pc, #112]	; (8013208 <lwip_netconn_do_delconn+0x1c0>)
 8013196:	4819      	ldr	r0, [pc, #100]	; (80131fc <lwip_netconn_do_delconn+0x1b4>)
 8013198:	f011 fb3a 	bl	8024810 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 801319c:	e025      	b.n	80131ea <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 801319e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2200      	movs	r2, #0
 80131a6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d007      	beq.n	80131c2 <lwip_netconn_do_delconn+0x17a>
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	6810      	ldr	r0, [r2, #0]
 80131bc:	2200      	movs	r2, #0
 80131be:	2100      	movs	r1, #0
 80131c0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d007      	beq.n	80131dc <lwip_netconn_do_delconn+0x194>
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131d2:	68fa      	ldr	r2, [r7, #12]
 80131d4:	6810      	ldr	r0, [r2, #0]
 80131d6:	2200      	movs	r2, #0
 80131d8:	2102      	movs	r1, #2
 80131da:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	330c      	adds	r3, #12
 80131e2:	4618      	mov	r0, r3
 80131e4:	f00b fd90 	bl	801ed08 <sys_sem_valid>
 80131e8:	e000      	b.n	80131ec <lwip_netconn_do_delconn+0x1a4>
          return;
 80131ea:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80131ec:	3710      	adds	r7, #16
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
 80131f2:	bf00      	nop
 80131f4:	08029a48 	.word	0x08029a48
 80131f8:	08029db8 	.word	0x08029db8
 80131fc:	08029a8c 	.word	0x08029a8c
 8013200:	08029dcc 	.word	0x08029dcc
 8013204:	08029dec 	.word	0x08029dec
 8013208:	08029e08 	.word	0x08029e08
 801320c:	20016f40 	.word	0x20016f40

08013210 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b084      	sub	sp, #16
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d025      	beq.n	8013272 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013230:	2b10      	cmp	r3, #16
 8013232:	d00e      	beq.n	8013252 <lwip_netconn_do_bind+0x42>
 8013234:	2b20      	cmp	r3, #32
 8013236:	d119      	bne.n	801326c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	6858      	ldr	r0, [r3, #4]
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	6899      	ldr	r1, [r3, #8]
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	899b      	ldrh	r3, [r3, #12]
 8013246:	461a      	mov	r2, r3
 8013248:	f009 f83e 	bl	801c2c8 <udp_bind>
 801324c:	4603      	mov	r3, r0
 801324e:	73fb      	strb	r3, [r7, #15]
        break;
 8013250:	e011      	b.n	8013276 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	6858      	ldr	r0, [r3, #4]
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	6899      	ldr	r1, [r3, #8]
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	899b      	ldrh	r3, [r3, #12]
 8013260:	461a      	mov	r2, r3
 8013262:	f002 ffd1 	bl	8016208 <tcp_bind>
 8013266:	4603      	mov	r3, r0
 8013268:	73fb      	strb	r3, [r7, #15]
        break;
 801326a:	e004      	b.n	8013276 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801326c:	23fa      	movs	r3, #250	; 0xfa
 801326e:	73fb      	strb	r3, [r7, #15]
        break;
 8013270:	e001      	b.n	8013276 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8013272:	23fa      	movs	r3, #250	; 0xfa
 8013274:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	7bfa      	ldrb	r2, [r7, #15]
 801327a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801327c:	bf00      	nop
 801327e:	3710      	adds	r7, #16
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b086      	sub	sp, #24
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d07f      	beq.n	801339a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80132a4:	2b10      	cmp	r3, #16
 80132a6:	d175      	bne.n	8013394 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	785b      	ldrb	r3, [r3, #1]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d165      	bne.n	801337e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	685b      	ldr	r3, [r3, #4]
 80132b8:	7d1b      	ldrb	r3, [r3, #20]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d002      	beq.n	80132c4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80132be:	23fa      	movs	r3, #250	; 0xfa
 80132c0:	72fb      	strb	r3, [r7, #11]
 80132c2:	e06c      	b.n	801339e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80132c4:	23ff      	movs	r3, #255	; 0xff
 80132c6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	685b      	ldr	r3, [r3, #4]
 80132ce:	f107 020b 	add.w	r2, r7, #11
 80132d2:	7cf9      	ldrb	r1, [r7, #19]
 80132d4:	4618      	mov	r0, r3
 80132d6:	f003 f84f 	bl	8016378 <tcp_listen_with_backlog_and_err>
 80132da:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d05d      	beq.n	801339e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	3310      	adds	r3, #16
 80132e8:	4618      	mov	r0, r3
 80132ea:	f00b fc7f 	bl	801ebec <sys_mbox_valid>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d00b      	beq.n	801330c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	3310      	adds	r3, #16
 80132fa:	4618      	mov	r0, r3
 80132fc:	f00b fc02 	bl	801eb04 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	3310      	adds	r3, #16
 8013306:	4618      	mov	r0, r3
 8013308:	f00b fc81 	bl	801ec0e <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 801330c:	2300      	movs	r3, #0
 801330e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	3314      	adds	r3, #20
 8013316:	4618      	mov	r0, r3
 8013318:	f00b fc68 	bl	801ebec <sys_mbox_valid>
 801331c:	4603      	mov	r3, r0
 801331e:	2b00      	cmp	r3, #0
 8013320:	d108      	bne.n	8013334 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	3314      	adds	r3, #20
 8013328:	2106      	movs	r1, #6
 801332a:	4618      	mov	r0, r3
 801332c:	f00b fbd0 	bl	801ead0 <sys_mbox_new>
 8013330:	4603      	mov	r3, r0
 8013332:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8013334:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d118      	bne.n	801336e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	2202      	movs	r2, #2
 8013342:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	68fa      	ldr	r2, [r7, #12]
 801334a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	685a      	ldr	r2, [r3, #4]
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	4619      	mov	r1, r3
 8013358:	4610      	mov	r0, r2
 801335a:	f003 ffd7 	bl	801730c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	4912      	ldr	r1, [pc, #72]	; (80133b0 <lwip_netconn_do_listen+0x12c>)
 8013366:	4618      	mov	r0, r3
 8013368:	f004 f848 	bl	80173fc <tcp_accept>
 801336c:	e017      	b.n	801339e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801336e:	68f8      	ldr	r0, [r7, #12]
 8013370:	f002 fdf8 	bl	8015f64 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2200      	movs	r2, #0
 801337a:	605a      	str	r2, [r3, #4]
 801337c:	e00f      	b.n	801339e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	785b      	ldrb	r3, [r3, #1]
 8013384:	2b02      	cmp	r3, #2
 8013386:	d102      	bne.n	801338e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8013388:	2300      	movs	r3, #0
 801338a:	72fb      	strb	r3, [r7, #11]
 801338c:	e007      	b.n	801339e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801338e:	23f5      	movs	r3, #245	; 0xf5
 8013390:	72fb      	strb	r3, [r7, #11]
 8013392:	e004      	b.n	801339e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8013394:	23f0      	movs	r3, #240	; 0xf0
 8013396:	72fb      	strb	r3, [r7, #11]
 8013398:	e001      	b.n	801339e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801339a:	23f5      	movs	r3, #245	; 0xf5
 801339c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801339e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80133a6:	bf00      	nop
 80133a8:	3718      	adds	r7, #24
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	bf00      	nop
 80133b0:	08012891 	.word	0x08012891

080133b4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b086      	sub	sp, #24
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	2200      	movs	r2, #0
 80133c4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d022      	beq.n	8013416 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80133da:	2b10      	cmp	r3, #16
 80133dc:	d11b      	bne.n	8013416 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	689b      	ldr	r3, [r3, #8]
 80133e2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133ea:	d202      	bcs.n	80133f2 <lwip_netconn_do_recv+0x3e>
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	e001      	b.n	80133f6 <lwip_netconn_do_recv+0x42>
 80133f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80133f6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	89fa      	ldrh	r2, [r7, #14]
 8013400:	4611      	mov	r1, r2
 8013402:	4618      	mov	r0, r3
 8013404:	f003 f8bc 	bl	8016580 <tcp_recved>
        remaining -= recved;
 8013408:	89fb      	ldrh	r3, [r7, #14]
 801340a:	697a      	ldr	r2, [r7, #20]
 801340c:	1ad3      	subs	r3, r2, r3
 801340e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d1e6      	bne.n	80133e4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8013416:	bf00      	nop
 8013418:	3718      	adds	r7, #24
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
	...

08013420 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b088      	sub	sp, #32
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	460b      	mov	r3, r1
 801342a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801342c:	2300      	movs	r3, #0
 801342e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d106      	bne.n	8013444 <lwip_netconn_do_writemore+0x24>
 8013436:	4b96      	ldr	r3, [pc, #600]	; (8013690 <lwip_netconn_do_writemore+0x270>)
 8013438:	f240 6273 	movw	r2, #1651	; 0x673
 801343c:	4995      	ldr	r1, [pc, #596]	; (8013694 <lwip_netconn_do_writemore+0x274>)
 801343e:	4896      	ldr	r0, [pc, #600]	; (8013698 <lwip_netconn_do_writemore+0x278>)
 8013440:	f011 f9e6 	bl	8024810 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	785b      	ldrb	r3, [r3, #1]
 8013448:	2b01      	cmp	r3, #1
 801344a:	d006      	beq.n	801345a <lwip_netconn_do_writemore+0x3a>
 801344c:	4b90      	ldr	r3, [pc, #576]	; (8013690 <lwip_netconn_do_writemore+0x270>)
 801344e:	f240 6274 	movw	r2, #1652	; 0x674
 8013452:	4992      	ldr	r1, [pc, #584]	; (801369c <lwip_netconn_do_writemore+0x27c>)
 8013454:	4890      	ldr	r0, [pc, #576]	; (8013698 <lwip_netconn_do_writemore+0x278>)
 8013456:	f011 f9db 	bl	8024810 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6a1b      	ldr	r3, [r3, #32]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d106      	bne.n	8013470 <lwip_netconn_do_writemore+0x50>
 8013462:	4b8b      	ldr	r3, [pc, #556]	; (8013690 <lwip_netconn_do_writemore+0x270>)
 8013464:	f240 6275 	movw	r2, #1653	; 0x675
 8013468:	498d      	ldr	r1, [pc, #564]	; (80136a0 <lwip_netconn_do_writemore+0x280>)
 801346a:	488b      	ldr	r0, [pc, #556]	; (8013698 <lwip_netconn_do_writemore+0x278>)
 801346c:	f011 f9d0 	bl	8024810 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	685b      	ldr	r3, [r3, #4]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d106      	bne.n	8013486 <lwip_netconn_do_writemore+0x66>
 8013478:	4b85      	ldr	r3, [pc, #532]	; (8013690 <lwip_netconn_do_writemore+0x270>)
 801347a:	f240 6276 	movw	r2, #1654	; 0x676
 801347e:	4989      	ldr	r1, [pc, #548]	; (80136a4 <lwip_netconn_do_writemore+0x284>)
 8013480:	4885      	ldr	r0, [pc, #532]	; (8013698 <lwip_netconn_do_writemore+0x278>)
 8013482:	f011 f9c5 	bl	8024810 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a1b      	ldr	r3, [r3, #32]
 801348a:	699a      	ldr	r2, [r3, #24]
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6a1b      	ldr	r3, [r3, #32]
 8013490:	695b      	ldr	r3, [r3, #20]
 8013492:	429a      	cmp	r2, r3
 8013494:	d306      	bcc.n	80134a4 <lwip_netconn_do_writemore+0x84>
 8013496:	4b7e      	ldr	r3, [pc, #504]	; (8013690 <lwip_netconn_do_writemore+0x270>)
 8013498:	f240 6277 	movw	r2, #1655	; 0x677
 801349c:	4982      	ldr	r1, [pc, #520]	; (80136a8 <lwip_netconn_do_writemore+0x288>)
 801349e:	487e      	ldr	r0, [pc, #504]	; (8013698 <lwip_netconn_do_writemore+0x278>)
 80134a0:	f011 f9b6 	bl	8024810 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6a1b      	ldr	r3, [r3, #32]
 80134a8:	899b      	ldrh	r3, [r3, #12]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d106      	bne.n	80134bc <lwip_netconn_do_writemore+0x9c>
 80134ae:	4b78      	ldr	r3, [pc, #480]	; (8013690 <lwip_netconn_do_writemore+0x270>)
 80134b0:	f240 6279 	movw	r2, #1657	; 0x679
 80134b4:	497d      	ldr	r1, [pc, #500]	; (80136ac <lwip_netconn_do_writemore+0x28c>)
 80134b6:	4878      	ldr	r0, [pc, #480]	; (8013698 <lwip_netconn_do_writemore+0x278>)
 80134b8:	f011 f9aa 	bl	8024810 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	6a1b      	ldr	r3, [r3, #32]
 80134c0:	7f1b      	ldrb	r3, [r3, #28]
 80134c2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	7f1b      	ldrb	r3, [r3, #28]
 80134c8:	f003 0302 	and.w	r3, r3, #2
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d104      	bne.n	80134da <lwip_netconn_do_writemore+0xba>
 80134d0:	7ebb      	ldrb	r3, [r7, #26]
 80134d2:	f003 0304 	and.w	r3, r3, #4
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d001      	beq.n	80134de <lwip_netconn_do_writemore+0xbe>
 80134da:	2301      	movs	r3, #1
 80134dc:	e000      	b.n	80134e0 <lwip_netconn_do_writemore+0xc0>
 80134de:	2300      	movs	r3, #0
 80134e0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6a1b      	ldr	r3, [r3, #32]
 80134e6:	689b      	ldr	r3, [r3, #8]
 80134e8:	681a      	ldr	r2, [r3, #0]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	6a1b      	ldr	r3, [r3, #32]
 80134ee:	691b      	ldr	r3, [r3, #16]
 80134f0:	4413      	add	r3, r2
 80134f2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6a1b      	ldr	r3, [r3, #32]
 80134f8:	689b      	ldr	r3, [r3, #8]
 80134fa:	685a      	ldr	r2, [r3, #4]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6a1b      	ldr	r3, [r3, #32]
 8013500:	691b      	ldr	r3, [r3, #16]
 8013502:	1ad3      	subs	r3, r2, r3
 8013504:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801350c:	d307      	bcc.n	801351e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801350e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013512:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8013514:	7ebb      	ldrb	r3, [r7, #26]
 8013516:	f043 0302 	orr.w	r3, r3, #2
 801351a:	76bb      	strb	r3, [r7, #26]
 801351c:	e001      	b.n	8013522 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801352a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801352c:	89fa      	ldrh	r2, [r7, #14]
 801352e:	8bbb      	ldrh	r3, [r7, #28]
 8013530:	429a      	cmp	r2, r3
 8013532:	d216      	bcs.n	8013562 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8013534:	89fb      	ldrh	r3, [r7, #14]
 8013536:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8013538:	7e3b      	ldrb	r3, [r7, #24]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d00d      	beq.n	801355a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801353e:	8bbb      	ldrh	r3, [r7, #28]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d10e      	bne.n	8013562 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6a1b      	ldr	r3, [r3, #32]
 8013548:	699b      	ldr	r3, [r3, #24]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d102      	bne.n	8013554 <lwip_netconn_do_writemore+0x134>
 801354e:	f06f 0306 	mvn.w	r3, #6
 8013552:	e000      	b.n	8013556 <lwip_netconn_do_writemore+0x136>
 8013554:	2300      	movs	r3, #0
 8013556:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8013558:	e07d      	b.n	8013656 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801355a:	7ebb      	ldrb	r3, [r7, #26]
 801355c:	f043 0302 	orr.w	r3, r3, #2
 8013560:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	6a1b      	ldr	r3, [r3, #32]
 8013566:	691a      	ldr	r2, [r3, #16]
 8013568:	8bbb      	ldrh	r3, [r7, #28]
 801356a:	441a      	add	r2, r3
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6a1b      	ldr	r3, [r3, #32]
 8013570:	689b      	ldr	r3, [r3, #8]
 8013572:	685b      	ldr	r3, [r3, #4]
 8013574:	429a      	cmp	r2, r3
 8013576:	d906      	bls.n	8013586 <lwip_netconn_do_writemore+0x166>
 8013578:	4b45      	ldr	r3, [pc, #276]	; (8013690 <lwip_netconn_do_writemore+0x270>)
 801357a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801357e:	494c      	ldr	r1, [pc, #304]	; (80136b0 <lwip_netconn_do_writemore+0x290>)
 8013580:	4845      	ldr	r0, [pc, #276]	; (8013698 <lwip_netconn_do_writemore+0x278>)
 8013582:	f011 f945 	bl	8024810 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8013586:	8bbb      	ldrh	r3, [r7, #28]
 8013588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801358c:	4293      	cmp	r3, r2
 801358e:	d103      	bne.n	8013598 <lwip_netconn_do_writemore+0x178>
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013596:	d209      	bcs.n	80135ac <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801359c:	8bba      	ldrh	r2, [r7, #28]
 801359e:	429a      	cmp	r2, r3
 80135a0:	d10b      	bne.n	80135ba <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6a1b      	ldr	r3, [r3, #32]
 80135a6:	899b      	ldrh	r3, [r3, #12]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d906      	bls.n	80135ba <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80135ac:	2301      	movs	r3, #1
 80135ae:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80135b0:	7ebb      	ldrb	r3, [r7, #26]
 80135b2:	f043 0302 	orr.w	r3, r3, #2
 80135b6:	76bb      	strb	r3, [r7, #26]
 80135b8:	e001      	b.n	80135be <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80135ba:	2300      	movs	r3, #0
 80135bc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6858      	ldr	r0, [r3, #4]
 80135c2:	7ebb      	ldrb	r3, [r7, #26]
 80135c4:	8bba      	ldrh	r2, [r7, #28]
 80135c6:	6979      	ldr	r1, [r7, #20]
 80135c8:	f006 fde2 	bl	801a190 <tcp_write>
 80135cc:	4603      	mov	r3, r0
 80135ce:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80135d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d12c      	bne.n	8013632 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6a1b      	ldr	r3, [r3, #32]
 80135dc:	6999      	ldr	r1, [r3, #24]
 80135de:	8bba      	ldrh	r2, [r7, #28]
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6a1b      	ldr	r3, [r3, #32]
 80135e4:	440a      	add	r2, r1
 80135e6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6a1b      	ldr	r3, [r3, #32]
 80135ec:	6919      	ldr	r1, [r3, #16]
 80135ee:	8bba      	ldrh	r2, [r7, #28]
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	6a1b      	ldr	r3, [r3, #32]
 80135f4:	440a      	add	r2, r1
 80135f6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6a1b      	ldr	r3, [r3, #32]
 80135fc:	691a      	ldr	r2, [r3, #16]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	6a1b      	ldr	r3, [r3, #32]
 8013602:	689b      	ldr	r3, [r3, #8]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	429a      	cmp	r2, r3
 8013608:	d113      	bne.n	8013632 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6a1b      	ldr	r3, [r3, #32]
 801360e:	899a      	ldrh	r2, [r3, #12]
 8013610:	3a01      	subs	r2, #1
 8013612:	b292      	uxth	r2, r2
 8013614:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6a1b      	ldr	r3, [r3, #32]
 801361a:	899b      	ldrh	r3, [r3, #12]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d008      	beq.n	8013632 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6a1b      	ldr	r3, [r3, #32]
 8013624:	689a      	ldr	r2, [r3, #8]
 8013626:	3208      	adds	r2, #8
 8013628:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6a1b      	ldr	r3, [r3, #32]
 801362e:	2200      	movs	r2, #0
 8013630:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8013632:	7e7b      	ldrb	r3, [r7, #25]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d004      	beq.n	8013642 <lwip_netconn_do_writemore+0x222>
 8013638:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801363c:	2b00      	cmp	r3, #0
 801363e:	f43f af50 	beq.w	80134e2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8013642:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d004      	beq.n	8013654 <lwip_netconn_do_writemore+0x234>
 801364a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801364e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013652:	d146      	bne.n	80136e2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8013654:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8013656:	7e3b      	ldrb	r3, [r7, #24]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d02b      	beq.n	80136b4 <lwip_netconn_do_writemore+0x294>
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6a1b      	ldr	r3, [r3, #32]
 8013660:	699a      	ldr	r2, [r3, #24]
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6a1b      	ldr	r3, [r3, #32]
 8013666:	695b      	ldr	r3, [r3, #20]
 8013668:	429a      	cmp	r2, r3
 801366a:	d223      	bcs.n	80136b4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013670:	2b00      	cmp	r3, #0
 8013672:	d005      	beq.n	8013680 <lwip_netconn_do_writemore+0x260>
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013678:	2200      	movs	r2, #0
 801367a:	2103      	movs	r1, #3
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	7f1b      	ldrb	r3, [r3, #28]
 8013684:	f043 0310 	orr.w	r3, r3, #16
 8013688:	b2da      	uxtb	r2, r3
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	771a      	strb	r2, [r3, #28]
 801368e:	e028      	b.n	80136e2 <lwip_netconn_do_writemore+0x2c2>
 8013690:	08029a48 	.word	0x08029a48
 8013694:	08029ba0 	.word	0x08029ba0
 8013698:	08029a8c 	.word	0x08029a8c
 801369c:	08029ea8 	.word	0x08029ea8
 80136a0:	08029bb0 	.word	0x08029bb0
 80136a4:	08029ec8 	.word	0x08029ec8
 80136a8:	08029ee0 	.word	0x08029ee0
 80136ac:	08029f20 	.word	0x08029f20
 80136b0:	08029f48 	.word	0x08029f48
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	685b      	ldr	r3, [r3, #4]
 80136b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80136bc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80136c0:	d305      	bcc.n	80136ce <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	685b      	ldr	r3, [r3, #4]
 80136c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80136ca:	2b04      	cmp	r3, #4
 80136cc:	d909      	bls.n	80136e2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d005      	beq.n	80136e2 <lwip_netconn_do_writemore+0x2c2>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136da:	2200      	movs	r2, #0
 80136dc:	2103      	movs	r1, #3
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80136e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d11d      	bne.n	8013726 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6a1b      	ldr	r3, [r3, #32]
 80136ee:	699a      	ldr	r2, [r3, #24]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6a1b      	ldr	r3, [r3, #32]
 80136f4:	695b      	ldr	r3, [r3, #20]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d002      	beq.n	8013700 <lwip_netconn_do_writemore+0x2e0>
 80136fa:	7e3b      	ldrb	r3, [r7, #24]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d001      	beq.n	8013704 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8013700:	2301      	movs	r3, #1
 8013702:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	4618      	mov	r0, r3
 801370a:	f007 fb2b 	bl	801ad64 <tcp_output>
 801370e:	4603      	mov	r3, r0
 8013710:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8013712:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8013716:	f113 0f04 	cmn.w	r3, #4
 801371a:	d12c      	bne.n	8013776 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801371c:	7b3b      	ldrb	r3, [r7, #12]
 801371e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013720:	2301      	movs	r3, #1
 8013722:	76fb      	strb	r3, [r7, #27]
 8013724:	e027      	b.n	8013776 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8013726:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801372a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801372e:	d120      	bne.n	8013772 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	4618      	mov	r0, r3
 8013736:	f007 fb15 	bl	801ad64 <tcp_output>
 801373a:	4603      	mov	r3, r0
 801373c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801373e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8013742:	f113 0f04 	cmn.w	r3, #4
 8013746:	d104      	bne.n	8013752 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8013748:	7b7b      	ldrb	r3, [r7, #13]
 801374a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801374c:	2301      	movs	r3, #1
 801374e:	76fb      	strb	r3, [r7, #27]
 8013750:	e011      	b.n	8013776 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8013752:	7e3b      	ldrb	r3, [r7, #24]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d00e      	beq.n	8013776 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6a1b      	ldr	r3, [r3, #32]
 801375c:	699b      	ldr	r3, [r3, #24]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d102      	bne.n	8013768 <lwip_netconn_do_writemore+0x348>
 8013762:	f06f 0306 	mvn.w	r3, #6
 8013766:	e000      	b.n	801376a <lwip_netconn_do_writemore+0x34a>
 8013768:	2300      	movs	r3, #0
 801376a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801376c:	2301      	movs	r3, #1
 801376e:	76fb      	strb	r3, [r7, #27]
 8013770:	e001      	b.n	8013776 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8013772:	2301      	movs	r3, #1
 8013774:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8013776:	7efb      	ldrb	r3, [r7, #27]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d015      	beq.n	80137a8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	6a1b      	ldr	r3, [r3, #32]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	330c      	adds	r3, #12
 8013784:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6a1b      	ldr	r3, [r3, #32]
 801378a:	7ffa      	ldrb	r2, [r7, #31]
 801378c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	2200      	movs	r2, #0
 8013792:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2200      	movs	r2, #0
 8013798:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801379a:	78fb      	ldrb	r3, [r7, #3]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d006      	beq.n	80137ae <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80137a0:	68b8      	ldr	r0, [r7, #8]
 80137a2:	f00b fa97 	bl	801ecd4 <sys_sem_signal>
 80137a6:	e002      	b.n	80137ae <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80137a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137ac:	e000      	b.n	80137b0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80137ae:	2300      	movs	r3, #0
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3720      	adds	r7, #32
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b084      	sub	sp, #16
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7fe fd1c 	bl	8012206 <netconn_err>
 80137ce:	4603      	mov	r3, r0
 80137d0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80137d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d166      	bne.n	80138a8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80137e4:	2b10      	cmp	r3, #16
 80137e6:	d15d      	bne.n	80138a4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	785b      	ldrb	r3, [r3, #1]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d002      	beq.n	80137f8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80137f2:	23fb      	movs	r3, #251	; 0xfb
 80137f4:	73fb      	strb	r3, [r7, #15]
 80137f6:	e057      	b.n	80138a8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	685b      	ldr	r3, [r3, #4]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d04d      	beq.n	801389e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	2201      	movs	r2, #1
 8013808:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	6a1b      	ldr	r3, [r3, #32]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d006      	beq.n	8013822 <lwip_netconn_do_write+0x6a>
 8013814:	4b28      	ldr	r3, [pc, #160]	; (80138b8 <lwip_netconn_do_write+0x100>)
 8013816:	f240 7223 	movw	r2, #1827	; 0x723
 801381a:	4928      	ldr	r1, [pc, #160]	; (80138bc <lwip_netconn_do_write+0x104>)
 801381c:	4828      	ldr	r0, [pc, #160]	; (80138c0 <lwip_netconn_do_write+0x108>)
 801381e:	f010 fff7 	bl	8024810 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	695b      	ldr	r3, [r3, #20]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d106      	bne.n	8013838 <lwip_netconn_do_write+0x80>
 801382a:	4b23      	ldr	r3, [pc, #140]	; (80138b8 <lwip_netconn_do_write+0x100>)
 801382c:	f240 7224 	movw	r2, #1828	; 0x724
 8013830:	4924      	ldr	r1, [pc, #144]	; (80138c4 <lwip_netconn_do_write+0x10c>)
 8013832:	4823      	ldr	r0, [pc, #140]	; (80138c0 <lwip_netconn_do_write+0x108>)
 8013834:	f010 ffec 	bl	8024810 <iprintf>
        msg->conn->current_msg = msg;
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	68ba      	ldr	r2, [r7, #8]
 801383e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8013840:	68bb      	ldr	r3, [r7, #8]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	2100      	movs	r1, #0
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff fdea 	bl	8013420 <lwip_netconn_do_writemore>
 801384c:	4603      	mov	r3, r0
 801384e:	2b00      	cmp	r3, #0
 8013850:	d02e      	beq.n	80138b0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	785b      	ldrb	r3, [r3, #1]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d006      	beq.n	801386a <lwip_netconn_do_write+0xb2>
 801385c:	4b16      	ldr	r3, [pc, #88]	; (80138b8 <lwip_netconn_do_write+0x100>)
 801385e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013862:	4919      	ldr	r1, [pc, #100]	; (80138c8 <lwip_netconn_do_write+0x110>)
 8013864:	4816      	ldr	r0, [pc, #88]	; (80138c0 <lwip_netconn_do_write+0x108>)
 8013866:	f010 ffd3 	bl	8024810 <iprintf>
          UNLOCK_TCPIP_CORE();
 801386a:	4818      	ldr	r0, [pc, #96]	; (80138cc <lwip_netconn_do_write+0x114>)
 801386c:	f00b fa9b 	bl	801eda6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013870:	68bb      	ldr	r3, [r7, #8]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	330c      	adds	r3, #12
 8013876:	2100      	movs	r1, #0
 8013878:	4618      	mov	r0, r3
 801387a:	f00b f9fa 	bl	801ec72 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 801387e:	4813      	ldr	r0, [pc, #76]	; (80138cc <lwip_netconn_do_write+0x114>)
 8013880:	f00b fa82 	bl	801ed88 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	785b      	ldrb	r3, [r3, #1]
 801388a:	2b01      	cmp	r3, #1
 801388c:	d110      	bne.n	80138b0 <lwip_netconn_do_write+0xf8>
 801388e:	4b0a      	ldr	r3, [pc, #40]	; (80138b8 <lwip_netconn_do_write+0x100>)
 8013890:	f240 722c 	movw	r2, #1836	; 0x72c
 8013894:	490c      	ldr	r1, [pc, #48]	; (80138c8 <lwip_netconn_do_write+0x110>)
 8013896:	480a      	ldr	r0, [pc, #40]	; (80138c0 <lwip_netconn_do_write+0x108>)
 8013898:	f010 ffba 	bl	8024810 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 801389c:	e008      	b.n	80138b0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 801389e:	23f5      	movs	r3, #245	; 0xf5
 80138a0:	73fb      	strb	r3, [r7, #15]
 80138a2:	e001      	b.n	80138a8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80138a4:	23fa      	movs	r3, #250	; 0xfa
 80138a6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	7bfa      	ldrb	r2, [r7, #15]
 80138ac:	711a      	strb	r2, [r3, #4]
 80138ae:	e000      	b.n	80138b2 <lwip_netconn_do_write+0xfa>
        return;
 80138b0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80138b2:	3710      	adds	r7, #16
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}
 80138b8:	08029a48 	.word	0x08029a48
 80138bc:	08029dec 	.word	0x08029dec
 80138c0:	08029a8c 	.word	0x08029a8c
 80138c4:	08029f74 	.word	0x08029f74
 80138c8:	08029e08 	.word	0x08029e08
 80138cc:	20016f40 	.word	0x20016f40

080138d0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b084      	sub	sp, #16
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	785b      	ldrb	r3, [r3, #1]
 80138e2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d069      	beq.n	80139c2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80138f8:	2b10      	cmp	r3, #16
 80138fa:	d162      	bne.n	80139c2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013900:	2b03      	cmp	r3, #3
 8013902:	d002      	beq.n	801390a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013904:	7afb      	ldrb	r3, [r7, #11]
 8013906:	2b02      	cmp	r3, #2
 8013908:	d05b      	beq.n	80139c2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801390a:	7afb      	ldrb	r3, [r7, #11]
 801390c:	2b03      	cmp	r3, #3
 801390e:	d103      	bne.n	8013918 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	22f5      	movs	r2, #245	; 0xf5
 8013914:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8013916:	e059      	b.n	80139cc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8013918:	7afb      	ldrb	r3, [r7, #11]
 801391a:	2b01      	cmp	r3, #1
 801391c:	d103      	bne.n	8013926 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	22fb      	movs	r2, #251	; 0xfb
 8013922:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8013924:	e052      	b.n	80139cc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	7a1b      	ldrb	r3, [r3, #8]
 801392a:	f003 0301 	and.w	r3, r3, #1
 801392e:	2b00      	cmp	r3, #0
 8013930:	d004      	beq.n	801393c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	4618      	mov	r0, r3
 8013938:	f7ff f99e 	bl	8012c78 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	6a1b      	ldr	r3, [r3, #32]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d006      	beq.n	8013954 <lwip_netconn_do_close+0x84>
 8013946:	4b23      	ldr	r3, [pc, #140]	; (80139d4 <lwip_netconn_do_close+0x104>)
 8013948:	f240 72bd 	movw	r2, #1981	; 0x7bd
 801394c:	4922      	ldr	r1, [pc, #136]	; (80139d8 <lwip_netconn_do_close+0x108>)
 801394e:	4823      	ldr	r0, [pc, #140]	; (80139dc <lwip_netconn_do_close+0x10c>)
 8013950:	f010 ff5e 	bl	8024810 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	2204      	movs	r2, #4
 801395a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	68fa      	ldr	r2, [r7, #12]
 8013962:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	2100      	movs	r1, #0
 801396a:	4618      	mov	r0, r3
 801396c:	f7ff fa02 	bl	8012d74 <lwip_netconn_do_close_internal>
 8013970:	4603      	mov	r3, r0
 8013972:	2b00      	cmp	r3, #0
 8013974:	d029      	beq.n	80139ca <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	785b      	ldrb	r3, [r3, #1]
 801397c:	2b04      	cmp	r3, #4
 801397e:	d006      	beq.n	801398e <lwip_netconn_do_close+0xbe>
 8013980:	4b14      	ldr	r3, [pc, #80]	; (80139d4 <lwip_netconn_do_close+0x104>)
 8013982:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8013986:	4916      	ldr	r1, [pc, #88]	; (80139e0 <lwip_netconn_do_close+0x110>)
 8013988:	4814      	ldr	r0, [pc, #80]	; (80139dc <lwip_netconn_do_close+0x10c>)
 801398a:	f010 ff41 	bl	8024810 <iprintf>
        UNLOCK_TCPIP_CORE();
 801398e:	4815      	ldr	r0, [pc, #84]	; (80139e4 <lwip_netconn_do_close+0x114>)
 8013990:	f00b fa09 	bl	801eda6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	330c      	adds	r3, #12
 801399a:	2100      	movs	r1, #0
 801399c:	4618      	mov	r0, r3
 801399e:	f00b f968 	bl	801ec72 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80139a2:	4810      	ldr	r0, [pc, #64]	; (80139e4 <lwip_netconn_do_close+0x114>)
 80139a4:	f00b f9f0 	bl	801ed88 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	785b      	ldrb	r3, [r3, #1]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d00b      	beq.n	80139ca <lwip_netconn_do_close+0xfa>
 80139b2:	4b08      	ldr	r3, [pc, #32]	; (80139d4 <lwip_netconn_do_close+0x104>)
 80139b4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80139b8:	4909      	ldr	r1, [pc, #36]	; (80139e0 <lwip_netconn_do_close+0x110>)
 80139ba:	4808      	ldr	r0, [pc, #32]	; (80139dc <lwip_netconn_do_close+0x10c>)
 80139bc:	f010 ff28 	bl	8024810 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80139c0:	e003      	b.n	80139ca <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	22f5      	movs	r2, #245	; 0xf5
 80139c6:	711a      	strb	r2, [r3, #4]
 80139c8:	e000      	b.n	80139cc <lwip_netconn_do_close+0xfc>
      return;
 80139ca:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80139cc:	3710      	adds	r7, #16
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop
 80139d4:	08029a48 	.word	0x08029a48
 80139d8:	08029dec 	.word	0x08029dec
 80139dc:	08029a8c 	.word	0x08029a8c
 80139e0:	08029e08 	.word	0x08029e08
 80139e4:	20016f40 	.word	0x20016f40

080139e8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d013      	beq.n	8013a1e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d00b      	beq.n	8013a16 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	4618      	mov	r0, r3
 8013a04:	f001 fe04 	bl	8015610 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	605a      	str	r2, [r3, #4]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	685a      	ldr	r2, [r3, #4]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8013a16:	6879      	ldr	r1, [r7, #4]
 8013a18:	2006      	movs	r0, #6
 8013a1a:	f000 ff55 	bl	80148c8 <memp_free>
  }
}
 8013a1e:	bf00      	nop
 8013a20:	3708      	adds	r7, #8
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}
	...

08013a28 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b084      	sub	sp, #16
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	60f8      	str	r0, [r7, #12]
 8013a30:	60b9      	str	r1, [r7, #8]
 8013a32:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d108      	bne.n	8013a4c <netbuf_data+0x24>
 8013a3a:	4b1b      	ldr	r3, [pc, #108]	; (8013aa8 <netbuf_data+0x80>)
 8013a3c:	22c6      	movs	r2, #198	; 0xc6
 8013a3e:	491b      	ldr	r1, [pc, #108]	; (8013aac <netbuf_data+0x84>)
 8013a40:	481b      	ldr	r0, [pc, #108]	; (8013ab0 <netbuf_data+0x88>)
 8013a42:	f010 fee5 	bl	8024810 <iprintf>
 8013a46:	f06f 030f 	mvn.w	r3, #15
 8013a4a:	e029      	b.n	8013aa0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d108      	bne.n	8013a64 <netbuf_data+0x3c>
 8013a52:	4b15      	ldr	r3, [pc, #84]	; (8013aa8 <netbuf_data+0x80>)
 8013a54:	22c7      	movs	r2, #199	; 0xc7
 8013a56:	4917      	ldr	r1, [pc, #92]	; (8013ab4 <netbuf_data+0x8c>)
 8013a58:	4815      	ldr	r0, [pc, #84]	; (8013ab0 <netbuf_data+0x88>)
 8013a5a:	f010 fed9 	bl	8024810 <iprintf>
 8013a5e:	f06f 030f 	mvn.w	r3, #15
 8013a62:	e01d      	b.n	8013aa0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d108      	bne.n	8013a7c <netbuf_data+0x54>
 8013a6a:	4b0f      	ldr	r3, [pc, #60]	; (8013aa8 <netbuf_data+0x80>)
 8013a6c:	22c8      	movs	r2, #200	; 0xc8
 8013a6e:	4912      	ldr	r1, [pc, #72]	; (8013ab8 <netbuf_data+0x90>)
 8013a70:	480f      	ldr	r0, [pc, #60]	; (8013ab0 <netbuf_data+0x88>)
 8013a72:	f010 fecd 	bl	8024810 <iprintf>
 8013a76:	f06f 030f 	mvn.w	r3, #15
 8013a7a:	e011      	b.n	8013aa0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d102      	bne.n	8013a8a <netbuf_data+0x62>
    return ERR_BUF;
 8013a84:	f06f 0301 	mvn.w	r3, #1
 8013a88:	e00a      	b.n	8013aa0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	685a      	ldr	r2, [r3, #4]
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	895a      	ldrh	r2, [r3, #10]
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8013a9e:	2300      	movs	r3, #0
}
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	3710      	adds	r7, #16
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	08029fa0 	.word	0x08029fa0
 8013aac:	0802a0a8 	.word	0x0802a0a8
 8013ab0:	08029ff0 	.word	0x08029ff0
 8013ab4:	0802a0c4 	.word	0x0802a0c4
 8013ab8:	0802a0e4 	.word	0x0802a0e4

08013abc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b084      	sub	sp, #16
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8013ac6:	f008 fa05 	bl	801bed4 <sys_timeouts_sleeptime>
 8013aca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ad2:	d10b      	bne.n	8013aec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8013ad4:	4813      	ldr	r0, [pc, #76]	; (8013b24 <tcpip_timeouts_mbox_fetch+0x68>)
 8013ad6:	f00b f966 	bl	801eda6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8013ada:	2200      	movs	r2, #0
 8013adc:	6839      	ldr	r1, [r7, #0]
 8013ade:	6878      	ldr	r0, [r7, #4]
 8013ae0:	f00b f83c 	bl	801eb5c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8013ae4:	480f      	ldr	r0, [pc, #60]	; (8013b24 <tcpip_timeouts_mbox_fetch+0x68>)
 8013ae6:	f00b f94f 	bl	801ed88 <sys_mutex_lock>
    return;
 8013aea:	e018      	b.n	8013b1e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d102      	bne.n	8013af8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8013af2:	f008 f9b5 	bl	801be60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013af6:	e7e6      	b.n	8013ac6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8013af8:	480a      	ldr	r0, [pc, #40]	; (8013b24 <tcpip_timeouts_mbox_fetch+0x68>)
 8013afa:	f00b f954 	bl	801eda6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8013afe:	68fa      	ldr	r2, [r7, #12]
 8013b00:	6839      	ldr	r1, [r7, #0]
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f00b f82a 	bl	801eb5c <sys_arch_mbox_fetch>
 8013b08:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8013b0a:	4806      	ldr	r0, [pc, #24]	; (8013b24 <tcpip_timeouts_mbox_fetch+0x68>)
 8013b0c:	f00b f93c 	bl	801ed88 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b16:	d102      	bne.n	8013b1e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013b18:	f008 f9a2 	bl	801be60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013b1c:	e7d3      	b.n	8013ac6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8013b1e:	3710      	adds	r7, #16
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	20016f40 	.word	0x20016f40

08013b28 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b084      	sub	sp, #16
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8013b30:	4810      	ldr	r0, [pc, #64]	; (8013b74 <tcpip_thread+0x4c>)
 8013b32:	f00b f929 	bl	801ed88 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8013b36:	4b10      	ldr	r3, [pc, #64]	; (8013b78 <tcpip_thread+0x50>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d005      	beq.n	8013b4a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8013b3e:	4b0e      	ldr	r3, [pc, #56]	; (8013b78 <tcpip_thread+0x50>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	4a0e      	ldr	r2, [pc, #56]	; (8013b7c <tcpip_thread+0x54>)
 8013b44:	6812      	ldr	r2, [r2, #0]
 8013b46:	4610      	mov	r0, r2
 8013b48:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013b4a:	f107 030c 	add.w	r3, r7, #12
 8013b4e:	4619      	mov	r1, r3
 8013b50:	480b      	ldr	r0, [pc, #44]	; (8013b80 <tcpip_thread+0x58>)
 8013b52:	f7ff ffb3 	bl	8013abc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d106      	bne.n	8013b6a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013b5c:	4b09      	ldr	r3, [pc, #36]	; (8013b84 <tcpip_thread+0x5c>)
 8013b5e:	2291      	movs	r2, #145	; 0x91
 8013b60:	4909      	ldr	r1, [pc, #36]	; (8013b88 <tcpip_thread+0x60>)
 8013b62:	480a      	ldr	r0, [pc, #40]	; (8013b8c <tcpip_thread+0x64>)
 8013b64:	f010 fe54 	bl	8024810 <iprintf>
      continue;
 8013b68:	e003      	b.n	8013b72 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f000 f80f 	bl	8013b90 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013b72:	e7ea      	b.n	8013b4a <tcpip_thread+0x22>
 8013b74:	20016f40 	.word	0x20016f40
 8013b78:	20016f34 	.word	0x20016f34
 8013b7c:	20016f38 	.word	0x20016f38
 8013b80:	20016f3c 	.word	0x20016f3c
 8013b84:	0802a138 	.word	0x0802a138
 8013b88:	0802a168 	.word	0x0802a168
 8013b8c:	0802a188 	.word	0x0802a188

08013b90 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b082      	sub	sp, #8
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	2b02      	cmp	r3, #2
 8013b9e:	d026      	beq.n	8013bee <tcpip_thread_handle_msg+0x5e>
 8013ba0:	2b02      	cmp	r3, #2
 8013ba2:	dc2b      	bgt.n	8013bfc <tcpip_thread_handle_msg+0x6c>
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d002      	beq.n	8013bae <tcpip_thread_handle_msg+0x1e>
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d015      	beq.n	8013bd8 <tcpip_thread_handle_msg+0x48>
 8013bac:	e026      	b.n	8013bfc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	68db      	ldr	r3, [r3, #12]
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	6850      	ldr	r0, [r2, #4]
 8013bb6:	687a      	ldr	r2, [r7, #4]
 8013bb8:	6892      	ldr	r2, [r2, #8]
 8013bba:	4611      	mov	r1, r2
 8013bbc:	4798      	blx	r3
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d004      	beq.n	8013bce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f001 fd21 	bl	8015610 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013bce:	6879      	ldr	r1, [r7, #4]
 8013bd0:	2009      	movs	r0, #9
 8013bd2:	f000 fe79 	bl	80148c8 <memp_free>
      break;
 8013bd6:	e018      	b.n	8013c0a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	685b      	ldr	r3, [r3, #4]
 8013bdc:	687a      	ldr	r2, [r7, #4]
 8013bde:	6892      	ldr	r2, [r2, #8]
 8013be0:	4610      	mov	r0, r2
 8013be2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013be4:	6879      	ldr	r1, [r7, #4]
 8013be6:	2008      	movs	r0, #8
 8013be8:	f000 fe6e 	bl	80148c8 <memp_free>
      break;
 8013bec:	e00d      	b.n	8013c0a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	685b      	ldr	r3, [r3, #4]
 8013bf2:	687a      	ldr	r2, [r7, #4]
 8013bf4:	6892      	ldr	r2, [r2, #8]
 8013bf6:	4610      	mov	r0, r2
 8013bf8:	4798      	blx	r3
      break;
 8013bfa:	e006      	b.n	8013c0a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013bfc:	4b05      	ldr	r3, [pc, #20]	; (8013c14 <tcpip_thread_handle_msg+0x84>)
 8013bfe:	22cf      	movs	r2, #207	; 0xcf
 8013c00:	4905      	ldr	r1, [pc, #20]	; (8013c18 <tcpip_thread_handle_msg+0x88>)
 8013c02:	4806      	ldr	r0, [pc, #24]	; (8013c1c <tcpip_thread_handle_msg+0x8c>)
 8013c04:	f010 fe04 	bl	8024810 <iprintf>
      break;
 8013c08:	bf00      	nop
  }
}
 8013c0a:	bf00      	nop
 8013c0c:	3708      	adds	r7, #8
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}
 8013c12:	bf00      	nop
 8013c14:	0802a138 	.word	0x0802a138
 8013c18:	0802a168 	.word	0x0802a168
 8013c1c:	0802a188 	.word	0x0802a188

08013c20 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b086      	sub	sp, #24
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	60f8      	str	r0, [r7, #12]
 8013c28:	60b9      	str	r1, [r7, #8]
 8013c2a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013c2c:	481a      	ldr	r0, [pc, #104]	; (8013c98 <tcpip_inpkt+0x78>)
 8013c2e:	f00a ffdd 	bl	801ebec <sys_mbox_valid>
 8013c32:	4603      	mov	r3, r0
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d105      	bne.n	8013c44 <tcpip_inpkt+0x24>
 8013c38:	4b18      	ldr	r3, [pc, #96]	; (8013c9c <tcpip_inpkt+0x7c>)
 8013c3a:	22fc      	movs	r2, #252	; 0xfc
 8013c3c:	4918      	ldr	r1, [pc, #96]	; (8013ca0 <tcpip_inpkt+0x80>)
 8013c3e:	4819      	ldr	r0, [pc, #100]	; (8013ca4 <tcpip_inpkt+0x84>)
 8013c40:	f010 fde6 	bl	8024810 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8013c44:	2009      	movs	r0, #9
 8013c46:	f000 fdc9 	bl	80147dc <memp_malloc>
 8013c4a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d102      	bne.n	8013c58 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8013c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c56:	e01a      	b.n	8013c8e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	68fa      	ldr	r2, [r7, #12]
 8013c62:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	68ba      	ldr	r2, [r7, #8]
 8013c68:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	687a      	ldr	r2, [r7, #4]
 8013c6e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013c70:	6979      	ldr	r1, [r7, #20]
 8013c72:	4809      	ldr	r0, [pc, #36]	; (8013c98 <tcpip_inpkt+0x78>)
 8013c74:	f00a ff58 	bl	801eb28 <sys_mbox_trypost>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d006      	beq.n	8013c8c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013c7e:	6979      	ldr	r1, [r7, #20]
 8013c80:	2009      	movs	r0, #9
 8013c82:	f000 fe21 	bl	80148c8 <memp_free>
    return ERR_MEM;
 8013c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c8a:	e000      	b.n	8013c8e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8013c8c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3718      	adds	r7, #24
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bd80      	pop	{r7, pc}
 8013c96:	bf00      	nop
 8013c98:	20016f3c 	.word	0x20016f3c
 8013c9c:	0802a138 	.word	0x0802a138
 8013ca0:	0802a1b0 	.word	0x0802a1b0
 8013ca4:	0802a188 	.word	0x0802a188

08013ca8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013cb8:	f003 0318 	and.w	r3, r3, #24
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d006      	beq.n	8013cce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8013cc0:	4a08      	ldr	r2, [pc, #32]	; (8013ce4 <tcpip_input+0x3c>)
 8013cc2:	6839      	ldr	r1, [r7, #0]
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f7ff ffab 	bl	8013c20 <tcpip_inpkt>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	e005      	b.n	8013cda <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8013cce:	4a06      	ldr	r2, [pc, #24]	; (8013ce8 <tcpip_input+0x40>)
 8013cd0:	6839      	ldr	r1, [r7, #0]
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f7ff ffa4 	bl	8013c20 <tcpip_inpkt>
 8013cd8:	4603      	mov	r3, r0
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3708      	adds	r7, #8
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	0801e925 	.word	0x0801e925
 8013ce8:	0801d82d 	.word	0x0801d82d

08013cec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013cf6:	4819      	ldr	r0, [pc, #100]	; (8013d5c <tcpip_try_callback+0x70>)
 8013cf8:	f00a ff78 	bl	801ebec <sys_mbox_valid>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d106      	bne.n	8013d10 <tcpip_try_callback+0x24>
 8013d02:	4b17      	ldr	r3, [pc, #92]	; (8013d60 <tcpip_try_callback+0x74>)
 8013d04:	f240 125d 	movw	r2, #349	; 0x15d
 8013d08:	4916      	ldr	r1, [pc, #88]	; (8013d64 <tcpip_try_callback+0x78>)
 8013d0a:	4817      	ldr	r0, [pc, #92]	; (8013d68 <tcpip_try_callback+0x7c>)
 8013d0c:	f010 fd80 	bl	8024810 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8013d10:	2008      	movs	r0, #8
 8013d12:	f000 fd63 	bl	80147dc <memp_malloc>
 8013d16:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d102      	bne.n	8013d24 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8013d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d22:	e017      	b.n	8013d54 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	2201      	movs	r2, #1
 8013d28:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	687a      	ldr	r2, [r7, #4]
 8013d2e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	683a      	ldr	r2, [r7, #0]
 8013d34:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013d36:	68f9      	ldr	r1, [r7, #12]
 8013d38:	4808      	ldr	r0, [pc, #32]	; (8013d5c <tcpip_try_callback+0x70>)
 8013d3a:	f00a fef5 	bl	801eb28 <sys_mbox_trypost>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d006      	beq.n	8013d52 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8013d44:	68f9      	ldr	r1, [r7, #12]
 8013d46:	2008      	movs	r0, #8
 8013d48:	f000 fdbe 	bl	80148c8 <memp_free>
    return ERR_MEM;
 8013d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d50:	e000      	b.n	8013d54 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8013d52:	2300      	movs	r3, #0
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3710      	adds	r7, #16
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	20016f3c 	.word	0x20016f3c
 8013d60:	0802a138 	.word	0x0802a138
 8013d64:	0802a1b0 	.word	0x0802a1b0
 8013d68:	0802a188 	.word	0x0802a188

08013d6c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	60b9      	str	r1, [r7, #8]
 8013d76:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8013d78:	4806      	ldr	r0, [pc, #24]	; (8013d94 <tcpip_send_msg_wait_sem+0x28>)
 8013d7a:	f00b f805 	bl	801ed88 <sys_mutex_lock>
  fn(apimsg);
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	68b8      	ldr	r0, [r7, #8]
 8013d82:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8013d84:	4803      	ldr	r0, [pc, #12]	; (8013d94 <tcpip_send_msg_wait_sem+0x28>)
 8013d86:	f00b f80e 	bl	801eda6 <sys_mutex_unlock>
  return ERR_OK;
 8013d8a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3710      	adds	r7, #16
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}
 8013d94:	20016f40 	.word	0x20016f40

08013d98 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af02      	add	r7, sp, #8
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	6039      	str	r1, [r7, #0]
  lwip_init();
 8013da2:	f000 f871 	bl	8013e88 <lwip_init>

  tcpip_init_done = initfunc;
 8013da6:	4a17      	ldr	r2, [pc, #92]	; (8013e04 <tcpip_init+0x6c>)
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013dac:	4a16      	ldr	r2, [pc, #88]	; (8013e08 <tcpip_init+0x70>)
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013db2:	2106      	movs	r1, #6
 8013db4:	4815      	ldr	r0, [pc, #84]	; (8013e0c <tcpip_init+0x74>)
 8013db6:	f00a fe8b 	bl	801ead0 <sys_mbox_new>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d006      	beq.n	8013dce <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013dc0:	4b13      	ldr	r3, [pc, #76]	; (8013e10 <tcpip_init+0x78>)
 8013dc2:	f240 2261 	movw	r2, #609	; 0x261
 8013dc6:	4913      	ldr	r1, [pc, #76]	; (8013e14 <tcpip_init+0x7c>)
 8013dc8:	4813      	ldr	r0, [pc, #76]	; (8013e18 <tcpip_init+0x80>)
 8013dca:	f010 fd21 	bl	8024810 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8013dce:	4813      	ldr	r0, [pc, #76]	; (8013e1c <tcpip_init+0x84>)
 8013dd0:	f00a ffc4 	bl	801ed5c <sys_mutex_new>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d006      	beq.n	8013de8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8013dda:	4b0d      	ldr	r3, [pc, #52]	; (8013e10 <tcpip_init+0x78>)
 8013ddc:	f240 2265 	movw	r2, #613	; 0x265
 8013de0:	490f      	ldr	r1, [pc, #60]	; (8013e20 <tcpip_init+0x88>)
 8013de2:	480d      	ldr	r0, [pc, #52]	; (8013e18 <tcpip_init+0x80>)
 8013de4:	f010 fd14 	bl	8024810 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013de8:	2318      	movs	r3, #24
 8013dea:	9300      	str	r3, [sp, #0]
 8013dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013df0:	2200      	movs	r2, #0
 8013df2:	490c      	ldr	r1, [pc, #48]	; (8013e24 <tcpip_init+0x8c>)
 8013df4:	480c      	ldr	r0, [pc, #48]	; (8013e28 <tcpip_init+0x90>)
 8013df6:	f00a ffe3 	bl	801edc0 <sys_thread_new>
}
 8013dfa:	bf00      	nop
 8013dfc:	3708      	adds	r7, #8
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	20016f34 	.word	0x20016f34
 8013e08:	20016f38 	.word	0x20016f38
 8013e0c:	20016f3c 	.word	0x20016f3c
 8013e10:	0802a138 	.word	0x0802a138
 8013e14:	0802a1c0 	.word	0x0802a1c0
 8013e18:	0802a188 	.word	0x0802a188
 8013e1c:	20016f40 	.word	0x20016f40
 8013e20:	0802a1e4 	.word	0x0802a1e4
 8013e24:	08013b29 	.word	0x08013b29
 8013e28:	0802a208 	.word	0x0802a208

08013e2c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b083      	sub	sp, #12
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	4603      	mov	r3, r0
 8013e34:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013e36:	88fb      	ldrh	r3, [r7, #6]
 8013e38:	021b      	lsls	r3, r3, #8
 8013e3a:	b21a      	sxth	r2, r3
 8013e3c:	88fb      	ldrh	r3, [r7, #6]
 8013e3e:	0a1b      	lsrs	r3, r3, #8
 8013e40:	b29b      	uxth	r3, r3
 8013e42:	b21b      	sxth	r3, r3
 8013e44:	4313      	orrs	r3, r2
 8013e46:	b21b      	sxth	r3, r3
 8013e48:	b29b      	uxth	r3, r3
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	370c      	adds	r7, #12
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e54:	4770      	bx	lr

08013e56 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013e56:	b480      	push	{r7}
 8013e58:	b083      	sub	sp, #12
 8013e5a:	af00      	add	r7, sp, #0
 8013e5c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	061a      	lsls	r2, r3, #24
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	021b      	lsls	r3, r3, #8
 8013e66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013e6a:	431a      	orrs	r2, r3
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	0a1b      	lsrs	r3, r3, #8
 8013e70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013e74:	431a      	orrs	r2, r3
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	0e1b      	lsrs	r3, r3, #24
 8013e7a:	4313      	orrs	r3, r2
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	370c      	adds	r7, #12
 8013e80:	46bd      	mov	sp, r7
 8013e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e86:	4770      	bx	lr

08013e88 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8013e92:	f00a ff57 	bl	801ed44 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013e96:	f000 f8d5 	bl	8014044 <mem_init>
  memp_init();
 8013e9a:	f000 fc31 	bl	8014700 <memp_init>
  pbuf_init();
  netif_init();
 8013e9e:	f000 fd3d 	bl	801491c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013ea2:	f008 f84f 	bl	801bf44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013ea6:	f001 fe4d 	bl	8015b44 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013eaa:	f007 ff91 	bl	801bdd0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013eae:	bf00      	nop
 8013eb0:	3708      	adds	r7, #8
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
	...

08013eb8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b083      	sub	sp, #12
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8013ec2:	4b05      	ldr	r3, [pc, #20]	; (8013ed8 <ptr_to_mem+0x20>)
 8013ec4:	681a      	ldr	r2, [r3, #0]
 8013ec6:	88fb      	ldrh	r3, [r7, #6]
 8013ec8:	4413      	add	r3, r2
}
 8013eca:	4618      	mov	r0, r3
 8013ecc:	370c      	adds	r7, #12
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop
 8013ed8:	20017bf0 	.word	0x20017bf0

08013edc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013edc:	b480      	push	{r7}
 8013ede:	b083      	sub	sp, #12
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8013ee4:	4b05      	ldr	r3, [pc, #20]	; (8013efc <mem_to_ptr+0x20>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	687a      	ldr	r2, [r7, #4]
 8013eea:	1ad3      	subs	r3, r2, r3
 8013eec:	b29b      	uxth	r3, r3
}
 8013eee:	4618      	mov	r0, r3
 8013ef0:	370c      	adds	r7, #12
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr
 8013efa:	bf00      	nop
 8013efc:	20017bf0 	.word	0x20017bf0

08013f00 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8013f00:	b590      	push	{r4, r7, lr}
 8013f02:	b085      	sub	sp, #20
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013f08:	4b45      	ldr	r3, [pc, #276]	; (8014020 <plug_holes+0x120>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d206      	bcs.n	8013f20 <plug_holes+0x20>
 8013f12:	4b44      	ldr	r3, [pc, #272]	; (8014024 <plug_holes+0x124>)
 8013f14:	f240 12df 	movw	r2, #479	; 0x1df
 8013f18:	4943      	ldr	r1, [pc, #268]	; (8014028 <plug_holes+0x128>)
 8013f1a:	4844      	ldr	r0, [pc, #272]	; (801402c <plug_holes+0x12c>)
 8013f1c:	f010 fc78 	bl	8024810 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013f20:	4b43      	ldr	r3, [pc, #268]	; (8014030 <plug_holes+0x130>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	687a      	ldr	r2, [r7, #4]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d306      	bcc.n	8013f38 <plug_holes+0x38>
 8013f2a:	4b3e      	ldr	r3, [pc, #248]	; (8014024 <plug_holes+0x124>)
 8013f2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013f30:	4940      	ldr	r1, [pc, #256]	; (8014034 <plug_holes+0x134>)
 8013f32:	483e      	ldr	r0, [pc, #248]	; (801402c <plug_holes+0x12c>)
 8013f34:	f010 fc6c 	bl	8024810 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	791b      	ldrb	r3, [r3, #4]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d006      	beq.n	8013f4e <plug_holes+0x4e>
 8013f40:	4b38      	ldr	r3, [pc, #224]	; (8014024 <plug_holes+0x124>)
 8013f42:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013f46:	493c      	ldr	r1, [pc, #240]	; (8014038 <plug_holes+0x138>)
 8013f48:	4838      	ldr	r0, [pc, #224]	; (801402c <plug_holes+0x12c>)
 8013f4a:	f010 fc61 	bl	8024810 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	881b      	ldrh	r3, [r3, #0]
 8013f52:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8013f56:	d906      	bls.n	8013f66 <plug_holes+0x66>
 8013f58:	4b32      	ldr	r3, [pc, #200]	; (8014024 <plug_holes+0x124>)
 8013f5a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8013f5e:	4937      	ldr	r1, [pc, #220]	; (801403c <plug_holes+0x13c>)
 8013f60:	4832      	ldr	r0, [pc, #200]	; (801402c <plug_holes+0x12c>)
 8013f62:	f010 fc55 	bl	8024810 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	881b      	ldrh	r3, [r3, #0]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7ff ffa4 	bl	8013eb8 <ptr_to_mem>
 8013f70:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d024      	beq.n	8013fc4 <plug_holes+0xc4>
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	791b      	ldrb	r3, [r3, #4]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d120      	bne.n	8013fc4 <plug_holes+0xc4>
 8013f82:	4b2b      	ldr	r3, [pc, #172]	; (8014030 <plug_holes+0x130>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	68fa      	ldr	r2, [r7, #12]
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	d01b      	beq.n	8013fc4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013f8c:	4b2c      	ldr	r3, [pc, #176]	; (8014040 <plug_holes+0x140>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	68fa      	ldr	r2, [r7, #12]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d102      	bne.n	8013f9c <plug_holes+0x9c>
      lfree = mem;
 8013f96:	4a2a      	ldr	r2, [pc, #168]	; (8014040 <plug_holes+0x140>)
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	881a      	ldrh	r2, [r3, #0]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	881b      	ldrh	r3, [r3, #0]
 8013fa8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8013fac:	d00a      	beq.n	8013fc4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	881b      	ldrh	r3, [r3, #0]
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7ff ff80 	bl	8013eb8 <ptr_to_mem>
 8013fb8:	4604      	mov	r4, r0
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f7ff ff8e 	bl	8013edc <mem_to_ptr>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	885b      	ldrh	r3, [r3, #2]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7ff ff75 	bl	8013eb8 <ptr_to_mem>
 8013fce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013fd0:	68ba      	ldr	r2, [r7, #8]
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d01f      	beq.n	8014018 <plug_holes+0x118>
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	791b      	ldrb	r3, [r3, #4]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d11b      	bne.n	8014018 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013fe0:	4b17      	ldr	r3, [pc, #92]	; (8014040 <plug_holes+0x140>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	687a      	ldr	r2, [r7, #4]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d102      	bne.n	8013ff0 <plug_holes+0xf0>
      lfree = pmem;
 8013fea:	4a15      	ldr	r2, [pc, #84]	; (8014040 <plug_holes+0x140>)
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	881a      	ldrh	r2, [r3, #0]
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	881b      	ldrh	r3, [r3, #0]
 8013ffc:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8014000:	d00a      	beq.n	8014018 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	881b      	ldrh	r3, [r3, #0]
 8014006:	4618      	mov	r0, r3
 8014008:	f7ff ff56 	bl	8013eb8 <ptr_to_mem>
 801400c:	4604      	mov	r4, r0
 801400e:	68b8      	ldr	r0, [r7, #8]
 8014010:	f7ff ff64 	bl	8013edc <mem_to_ptr>
 8014014:	4603      	mov	r3, r0
 8014016:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8014018:	bf00      	nop
 801401a:	3714      	adds	r7, #20
 801401c:	46bd      	mov	sp, r7
 801401e:	bd90      	pop	{r4, r7, pc}
 8014020:	20017bf0 	.word	0x20017bf0
 8014024:	0802a218 	.word	0x0802a218
 8014028:	0802a248 	.word	0x0802a248
 801402c:	0802a260 	.word	0x0802a260
 8014030:	20017bf4 	.word	0x20017bf4
 8014034:	0802a288 	.word	0x0802a288
 8014038:	0802a2a4 	.word	0x0802a2a4
 801403c:	0802a2c0 	.word	0x0802a2c0
 8014040:	20017bfc 	.word	0x20017bfc

08014044 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801404a:	4b1f      	ldr	r3, [pc, #124]	; (80140c8 <mem_init+0x84>)
 801404c:	3303      	adds	r3, #3
 801404e:	f023 0303 	bic.w	r3, r3, #3
 8014052:	461a      	mov	r2, r3
 8014054:	4b1d      	ldr	r3, [pc, #116]	; (80140cc <mem_init+0x88>)
 8014056:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014058:	4b1c      	ldr	r3, [pc, #112]	; (80140cc <mem_init+0x88>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8014064:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2200      	movs	r2, #0
 801406a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	2200      	movs	r2, #0
 8014070:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8014072:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 8014076:	f7ff ff1f 	bl	8013eb8 <ptr_to_mem>
 801407a:	4603      	mov	r3, r0
 801407c:	4a14      	ldr	r2, [pc, #80]	; (80140d0 <mem_init+0x8c>)
 801407e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8014080:	4b13      	ldr	r3, [pc, #76]	; (80140d0 <mem_init+0x8c>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	2201      	movs	r2, #1
 8014086:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014088:	4b11      	ldr	r3, [pc, #68]	; (80140d0 <mem_init+0x8c>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8014090:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8014092:	4b0f      	ldr	r3, [pc, #60]	; (80140d0 <mem_init+0x8c>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 801409a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801409c:	4b0b      	ldr	r3, [pc, #44]	; (80140cc <mem_init+0x88>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	4a0c      	ldr	r2, [pc, #48]	; (80140d4 <mem_init+0x90>)
 80140a2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80140a4:	480c      	ldr	r0, [pc, #48]	; (80140d8 <mem_init+0x94>)
 80140a6:	f00a fe59 	bl	801ed5c <sys_mutex_new>
 80140aa:	4603      	mov	r3, r0
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d006      	beq.n	80140be <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80140b0:	4b0a      	ldr	r3, [pc, #40]	; (80140dc <mem_init+0x98>)
 80140b2:	f240 221f 	movw	r2, #543	; 0x21f
 80140b6:	490a      	ldr	r1, [pc, #40]	; (80140e0 <mem_init+0x9c>)
 80140b8:	480a      	ldr	r0, [pc, #40]	; (80140e4 <mem_init+0xa0>)
 80140ba:	f010 fba9 	bl	8024810 <iprintf>
  }
}
 80140be:	bf00      	nop
 80140c0:	3708      	adds	r7, #8
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	20016f5c 	.word	0x20016f5c
 80140cc:	20017bf0 	.word	0x20017bf0
 80140d0:	20017bf4 	.word	0x20017bf4
 80140d4:	20017bfc 	.word	0x20017bfc
 80140d8:	20017bf8 	.word	0x20017bf8
 80140dc:	0802a218 	.word	0x0802a218
 80140e0:	0802a2ec 	.word	0x0802a2ec
 80140e4:	0802a260 	.word	0x0802a260

080140e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b086      	sub	sp, #24
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f7ff fef3 	bl	8013edc <mem_to_ptr>
 80140f6:	4603      	mov	r3, r0
 80140f8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	881b      	ldrh	r3, [r3, #0]
 80140fe:	4618      	mov	r0, r3
 8014100:	f7ff feda 	bl	8013eb8 <ptr_to_mem>
 8014104:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	885b      	ldrh	r3, [r3, #2]
 801410a:	4618      	mov	r0, r3
 801410c:	f7ff fed4 	bl	8013eb8 <ptr_to_mem>
 8014110:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	881b      	ldrh	r3, [r3, #0]
 8014116:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 801411a:	d818      	bhi.n	801414e <mem_link_valid+0x66>
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	885b      	ldrh	r3, [r3, #2]
 8014120:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8014124:	d813      	bhi.n	801414e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801412a:	8afa      	ldrh	r2, [r7, #22]
 801412c:	429a      	cmp	r2, r3
 801412e:	d004      	beq.n	801413a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	881b      	ldrh	r3, [r3, #0]
 8014134:	8afa      	ldrh	r2, [r7, #22]
 8014136:	429a      	cmp	r2, r3
 8014138:	d109      	bne.n	801414e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801413a:	4b08      	ldr	r3, [pc, #32]	; (801415c <mem_link_valid+0x74>)
 801413c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801413e:	693a      	ldr	r2, [r7, #16]
 8014140:	429a      	cmp	r2, r3
 8014142:	d006      	beq.n	8014152 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	885b      	ldrh	r3, [r3, #2]
 8014148:	8afa      	ldrh	r2, [r7, #22]
 801414a:	429a      	cmp	r2, r3
 801414c:	d001      	beq.n	8014152 <mem_link_valid+0x6a>
    return 0;
 801414e:	2300      	movs	r3, #0
 8014150:	e000      	b.n	8014154 <mem_link_valid+0x6c>
  }
  return 1;
 8014152:	2301      	movs	r3, #1
}
 8014154:	4618      	mov	r0, r3
 8014156:	3718      	adds	r7, #24
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}
 801415c:	20017bf4 	.word	0x20017bf4

08014160 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b088      	sub	sp, #32
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d070      	beq.n	8014250 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f003 0303 	and.w	r3, r3, #3
 8014174:	2b00      	cmp	r3, #0
 8014176:	d00d      	beq.n	8014194 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014178:	4b37      	ldr	r3, [pc, #220]	; (8014258 <mem_free+0xf8>)
 801417a:	f240 2273 	movw	r2, #627	; 0x273
 801417e:	4937      	ldr	r1, [pc, #220]	; (801425c <mem_free+0xfc>)
 8014180:	4837      	ldr	r0, [pc, #220]	; (8014260 <mem_free+0x100>)
 8014182:	f010 fb45 	bl	8024810 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014186:	f00a fe3b 	bl	801ee00 <sys_arch_protect>
 801418a:	60f8      	str	r0, [r7, #12]
 801418c:	68f8      	ldr	r0, [r7, #12]
 801418e:	f00a fe45 	bl	801ee1c <sys_arch_unprotect>
    return;
 8014192:	e05e      	b.n	8014252 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	3b08      	subs	r3, #8
 8014198:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801419a:	4b32      	ldr	r3, [pc, #200]	; (8014264 <mem_free+0x104>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	69fa      	ldr	r2, [r7, #28]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d306      	bcc.n	80141b2 <mem_free+0x52>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f103 020c 	add.w	r2, r3, #12
 80141aa:	4b2f      	ldr	r3, [pc, #188]	; (8014268 <mem_free+0x108>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	d90d      	bls.n	80141ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80141b2:	4b29      	ldr	r3, [pc, #164]	; (8014258 <mem_free+0xf8>)
 80141b4:	f240 227f 	movw	r2, #639	; 0x27f
 80141b8:	492c      	ldr	r1, [pc, #176]	; (801426c <mem_free+0x10c>)
 80141ba:	4829      	ldr	r0, [pc, #164]	; (8014260 <mem_free+0x100>)
 80141bc:	f010 fb28 	bl	8024810 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80141c0:	f00a fe1e 	bl	801ee00 <sys_arch_protect>
 80141c4:	6138      	str	r0, [r7, #16]
 80141c6:	6938      	ldr	r0, [r7, #16]
 80141c8:	f00a fe28 	bl	801ee1c <sys_arch_unprotect>
    return;
 80141cc:	e041      	b.n	8014252 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80141ce:	4828      	ldr	r0, [pc, #160]	; (8014270 <mem_free+0x110>)
 80141d0:	f00a fdda 	bl	801ed88 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80141d4:	69fb      	ldr	r3, [r7, #28]
 80141d6:	791b      	ldrb	r3, [r3, #4]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d110      	bne.n	80141fe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80141dc:	4b1e      	ldr	r3, [pc, #120]	; (8014258 <mem_free+0xf8>)
 80141de:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80141e2:	4924      	ldr	r1, [pc, #144]	; (8014274 <mem_free+0x114>)
 80141e4:	481e      	ldr	r0, [pc, #120]	; (8014260 <mem_free+0x100>)
 80141e6:	f010 fb13 	bl	8024810 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80141ea:	4821      	ldr	r0, [pc, #132]	; (8014270 <mem_free+0x110>)
 80141ec:	f00a fddb 	bl	801eda6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80141f0:	f00a fe06 	bl	801ee00 <sys_arch_protect>
 80141f4:	6178      	str	r0, [r7, #20]
 80141f6:	6978      	ldr	r0, [r7, #20]
 80141f8:	f00a fe10 	bl	801ee1c <sys_arch_unprotect>
    return;
 80141fc:	e029      	b.n	8014252 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80141fe:	69f8      	ldr	r0, [r7, #28]
 8014200:	f7ff ff72 	bl	80140e8 <mem_link_valid>
 8014204:	4603      	mov	r3, r0
 8014206:	2b00      	cmp	r3, #0
 8014208:	d110      	bne.n	801422c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801420a:	4b13      	ldr	r3, [pc, #76]	; (8014258 <mem_free+0xf8>)
 801420c:	f240 2295 	movw	r2, #661	; 0x295
 8014210:	4919      	ldr	r1, [pc, #100]	; (8014278 <mem_free+0x118>)
 8014212:	4813      	ldr	r0, [pc, #76]	; (8014260 <mem_free+0x100>)
 8014214:	f010 fafc 	bl	8024810 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014218:	4815      	ldr	r0, [pc, #84]	; (8014270 <mem_free+0x110>)
 801421a:	f00a fdc4 	bl	801eda6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801421e:	f00a fdef 	bl	801ee00 <sys_arch_protect>
 8014222:	61b8      	str	r0, [r7, #24]
 8014224:	69b8      	ldr	r0, [r7, #24]
 8014226:	f00a fdf9 	bl	801ee1c <sys_arch_unprotect>
    return;
 801422a:	e012      	b.n	8014252 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801422c:	69fb      	ldr	r3, [r7, #28]
 801422e:	2200      	movs	r2, #0
 8014230:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014232:	4b12      	ldr	r3, [pc, #72]	; (801427c <mem_free+0x11c>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	69fa      	ldr	r2, [r7, #28]
 8014238:	429a      	cmp	r2, r3
 801423a:	d202      	bcs.n	8014242 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801423c:	4a0f      	ldr	r2, [pc, #60]	; (801427c <mem_free+0x11c>)
 801423e:	69fb      	ldr	r3, [r7, #28]
 8014240:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014242:	69f8      	ldr	r0, [r7, #28]
 8014244:	f7ff fe5c 	bl	8013f00 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014248:	4809      	ldr	r0, [pc, #36]	; (8014270 <mem_free+0x110>)
 801424a:	f00a fdac 	bl	801eda6 <sys_mutex_unlock>
 801424e:	e000      	b.n	8014252 <mem_free+0xf2>
    return;
 8014250:	bf00      	nop
}
 8014252:	3720      	adds	r7, #32
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}
 8014258:	0802a218 	.word	0x0802a218
 801425c:	0802a308 	.word	0x0802a308
 8014260:	0802a260 	.word	0x0802a260
 8014264:	20017bf0 	.word	0x20017bf0
 8014268:	20017bf4 	.word	0x20017bf4
 801426c:	0802a32c 	.word	0x0802a32c
 8014270:	20017bf8 	.word	0x20017bf8
 8014274:	0802a348 	.word	0x0802a348
 8014278:	0802a370 	.word	0x0802a370
 801427c:	20017bfc 	.word	0x20017bfc

08014280 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b088      	sub	sp, #32
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	460b      	mov	r3, r1
 801428a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801428c:	887b      	ldrh	r3, [r7, #2]
 801428e:	3303      	adds	r3, #3
 8014290:	b29b      	uxth	r3, r3
 8014292:	f023 0303 	bic.w	r3, r3, #3
 8014296:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014298:	8bfb      	ldrh	r3, [r7, #30]
 801429a:	2b0b      	cmp	r3, #11
 801429c:	d801      	bhi.n	80142a2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801429e:	230c      	movs	r3, #12
 80142a0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80142a2:	8bfb      	ldrh	r3, [r7, #30]
 80142a4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 80142a8:	d803      	bhi.n	80142b2 <mem_trim+0x32>
 80142aa:	8bfa      	ldrh	r2, [r7, #30]
 80142ac:	887b      	ldrh	r3, [r7, #2]
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d201      	bcs.n	80142b6 <mem_trim+0x36>
    return NULL;
 80142b2:	2300      	movs	r3, #0
 80142b4:	e0d8      	b.n	8014468 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80142b6:	4b6e      	ldr	r3, [pc, #440]	; (8014470 <mem_trim+0x1f0>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	687a      	ldr	r2, [r7, #4]
 80142bc:	429a      	cmp	r2, r3
 80142be:	d304      	bcc.n	80142ca <mem_trim+0x4a>
 80142c0:	4b6c      	ldr	r3, [pc, #432]	; (8014474 <mem_trim+0x1f4>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	687a      	ldr	r2, [r7, #4]
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d306      	bcc.n	80142d8 <mem_trim+0x58>
 80142ca:	4b6b      	ldr	r3, [pc, #428]	; (8014478 <mem_trim+0x1f8>)
 80142cc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80142d0:	496a      	ldr	r1, [pc, #424]	; (801447c <mem_trim+0x1fc>)
 80142d2:	486b      	ldr	r0, [pc, #428]	; (8014480 <mem_trim+0x200>)
 80142d4:	f010 fa9c 	bl	8024810 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80142d8:	4b65      	ldr	r3, [pc, #404]	; (8014470 <mem_trim+0x1f0>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	429a      	cmp	r2, r3
 80142e0:	d304      	bcc.n	80142ec <mem_trim+0x6c>
 80142e2:	4b64      	ldr	r3, [pc, #400]	; (8014474 <mem_trim+0x1f4>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d307      	bcc.n	80142fc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80142ec:	f00a fd88 	bl	801ee00 <sys_arch_protect>
 80142f0:	60b8      	str	r0, [r7, #8]
 80142f2:	68b8      	ldr	r0, [r7, #8]
 80142f4:	f00a fd92 	bl	801ee1c <sys_arch_unprotect>
    return rmem;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	e0b5      	b.n	8014468 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	3b08      	subs	r3, #8
 8014300:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8014302:	69b8      	ldr	r0, [r7, #24]
 8014304:	f7ff fdea 	bl	8013edc <mem_to_ptr>
 8014308:	4603      	mov	r3, r0
 801430a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	881a      	ldrh	r2, [r3, #0]
 8014310:	8afb      	ldrh	r3, [r7, #22]
 8014312:	1ad3      	subs	r3, r2, r3
 8014314:	b29b      	uxth	r3, r3
 8014316:	3b08      	subs	r3, #8
 8014318:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801431a:	8bfa      	ldrh	r2, [r7, #30]
 801431c:	8abb      	ldrh	r3, [r7, #20]
 801431e:	429a      	cmp	r2, r3
 8014320:	d906      	bls.n	8014330 <mem_trim+0xb0>
 8014322:	4b55      	ldr	r3, [pc, #340]	; (8014478 <mem_trim+0x1f8>)
 8014324:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014328:	4956      	ldr	r1, [pc, #344]	; (8014484 <mem_trim+0x204>)
 801432a:	4855      	ldr	r0, [pc, #340]	; (8014480 <mem_trim+0x200>)
 801432c:	f010 fa70 	bl	8024810 <iprintf>
  if (newsize > size) {
 8014330:	8bfa      	ldrh	r2, [r7, #30]
 8014332:	8abb      	ldrh	r3, [r7, #20]
 8014334:	429a      	cmp	r2, r3
 8014336:	d901      	bls.n	801433c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8014338:	2300      	movs	r3, #0
 801433a:	e095      	b.n	8014468 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801433c:	8bfa      	ldrh	r2, [r7, #30]
 801433e:	8abb      	ldrh	r3, [r7, #20]
 8014340:	429a      	cmp	r2, r3
 8014342:	d101      	bne.n	8014348 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	e08f      	b.n	8014468 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014348:	484f      	ldr	r0, [pc, #316]	; (8014488 <mem_trim+0x208>)
 801434a:	f00a fd1d 	bl	801ed88 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801434e:	69bb      	ldr	r3, [r7, #24]
 8014350:	881b      	ldrh	r3, [r3, #0]
 8014352:	4618      	mov	r0, r3
 8014354:	f7ff fdb0 	bl	8013eb8 <ptr_to_mem>
 8014358:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	791b      	ldrb	r3, [r3, #4]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d13f      	bne.n	80143e2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014362:	69bb      	ldr	r3, [r7, #24]
 8014364:	881b      	ldrh	r3, [r3, #0]
 8014366:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 801436a:	d106      	bne.n	801437a <mem_trim+0xfa>
 801436c:	4b42      	ldr	r3, [pc, #264]	; (8014478 <mem_trim+0x1f8>)
 801436e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014372:	4946      	ldr	r1, [pc, #280]	; (801448c <mem_trim+0x20c>)
 8014374:	4842      	ldr	r0, [pc, #264]	; (8014480 <mem_trim+0x200>)
 8014376:	f010 fa4b 	bl	8024810 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	881b      	ldrh	r3, [r3, #0]
 801437e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014380:	8afa      	ldrh	r2, [r7, #22]
 8014382:	8bfb      	ldrh	r3, [r7, #30]
 8014384:	4413      	add	r3, r2
 8014386:	b29b      	uxth	r3, r3
 8014388:	3308      	adds	r3, #8
 801438a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801438c:	4b40      	ldr	r3, [pc, #256]	; (8014490 <mem_trim+0x210>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	693a      	ldr	r2, [r7, #16]
 8014392:	429a      	cmp	r2, r3
 8014394:	d106      	bne.n	80143a4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8014396:	89fb      	ldrh	r3, [r7, #14]
 8014398:	4618      	mov	r0, r3
 801439a:	f7ff fd8d 	bl	8013eb8 <ptr_to_mem>
 801439e:	4603      	mov	r3, r0
 80143a0:	4a3b      	ldr	r2, [pc, #236]	; (8014490 <mem_trim+0x210>)
 80143a2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80143a4:	89fb      	ldrh	r3, [r7, #14]
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7ff fd86 	bl	8013eb8 <ptr_to_mem>
 80143ac:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80143ae:	693b      	ldr	r3, [r7, #16]
 80143b0:	2200      	movs	r2, #0
 80143b2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	89ba      	ldrh	r2, [r7, #12]
 80143b8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	8afa      	ldrh	r2, [r7, #22]
 80143be:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80143c0:	69bb      	ldr	r3, [r7, #24]
 80143c2:	89fa      	ldrh	r2, [r7, #14]
 80143c4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	881b      	ldrh	r3, [r3, #0]
 80143ca:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 80143ce:	d047      	beq.n	8014460 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	881b      	ldrh	r3, [r3, #0]
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7ff fd6f 	bl	8013eb8 <ptr_to_mem>
 80143da:	4602      	mov	r2, r0
 80143dc:	89fb      	ldrh	r3, [r7, #14]
 80143de:	8053      	strh	r3, [r2, #2]
 80143e0:	e03e      	b.n	8014460 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80143e2:	8bfb      	ldrh	r3, [r7, #30]
 80143e4:	f103 0214 	add.w	r2, r3, #20
 80143e8:	8abb      	ldrh	r3, [r7, #20]
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d838      	bhi.n	8014460 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80143ee:	8afa      	ldrh	r2, [r7, #22]
 80143f0:	8bfb      	ldrh	r3, [r7, #30]
 80143f2:	4413      	add	r3, r2
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	3308      	adds	r3, #8
 80143f8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80143fa:	69bb      	ldr	r3, [r7, #24]
 80143fc:	881b      	ldrh	r3, [r3, #0]
 80143fe:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8014402:	d106      	bne.n	8014412 <mem_trim+0x192>
 8014404:	4b1c      	ldr	r3, [pc, #112]	; (8014478 <mem_trim+0x1f8>)
 8014406:	f240 3216 	movw	r2, #790	; 0x316
 801440a:	4920      	ldr	r1, [pc, #128]	; (801448c <mem_trim+0x20c>)
 801440c:	481c      	ldr	r0, [pc, #112]	; (8014480 <mem_trim+0x200>)
 801440e:	f010 f9ff 	bl	8024810 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8014412:	89fb      	ldrh	r3, [r7, #14]
 8014414:	4618      	mov	r0, r3
 8014416:	f7ff fd4f 	bl	8013eb8 <ptr_to_mem>
 801441a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801441c:	4b1c      	ldr	r3, [pc, #112]	; (8014490 <mem_trim+0x210>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	693a      	ldr	r2, [r7, #16]
 8014422:	429a      	cmp	r2, r3
 8014424:	d202      	bcs.n	801442c <mem_trim+0x1ac>
      lfree = mem2;
 8014426:	4a1a      	ldr	r2, [pc, #104]	; (8014490 <mem_trim+0x210>)
 8014428:	693b      	ldr	r3, [r7, #16]
 801442a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	2200      	movs	r2, #0
 8014430:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014432:	69bb      	ldr	r3, [r7, #24]
 8014434:	881a      	ldrh	r2, [r3, #0]
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	8afa      	ldrh	r2, [r7, #22]
 801443e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	89fa      	ldrh	r2, [r7, #14]
 8014444:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	881b      	ldrh	r3, [r3, #0]
 801444a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 801444e:	d007      	beq.n	8014460 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	881b      	ldrh	r3, [r3, #0]
 8014454:	4618      	mov	r0, r3
 8014456:	f7ff fd2f 	bl	8013eb8 <ptr_to_mem>
 801445a:	4602      	mov	r2, r0
 801445c:	89fb      	ldrh	r3, [r7, #14]
 801445e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014460:	4809      	ldr	r0, [pc, #36]	; (8014488 <mem_trim+0x208>)
 8014462:	f00a fca0 	bl	801eda6 <sys_mutex_unlock>
  return rmem;
 8014466:	687b      	ldr	r3, [r7, #4]
}
 8014468:	4618      	mov	r0, r3
 801446a:	3720      	adds	r7, #32
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	20017bf0 	.word	0x20017bf0
 8014474:	20017bf4 	.word	0x20017bf4
 8014478:	0802a218 	.word	0x0802a218
 801447c:	0802a3a4 	.word	0x0802a3a4
 8014480:	0802a260 	.word	0x0802a260
 8014484:	0802a3bc 	.word	0x0802a3bc
 8014488:	20017bf8 	.word	0x20017bf8
 801448c:	0802a3dc 	.word	0x0802a3dc
 8014490:	20017bfc 	.word	0x20017bfc

08014494 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b088      	sub	sp, #32
 8014498:	af00      	add	r7, sp, #0
 801449a:	4603      	mov	r3, r0
 801449c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801449e:	88fb      	ldrh	r3, [r7, #6]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d101      	bne.n	80144a8 <mem_malloc+0x14>
    return NULL;
 80144a4:	2300      	movs	r3, #0
 80144a6:	e0e2      	b.n	801466e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80144a8:	88fb      	ldrh	r3, [r7, #6]
 80144aa:	3303      	adds	r3, #3
 80144ac:	b29b      	uxth	r3, r3
 80144ae:	f023 0303 	bic.w	r3, r3, #3
 80144b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80144b4:	8bbb      	ldrh	r3, [r7, #28]
 80144b6:	2b0b      	cmp	r3, #11
 80144b8:	d801      	bhi.n	80144be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80144ba:	230c      	movs	r3, #12
 80144bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80144be:	8bbb      	ldrh	r3, [r7, #28]
 80144c0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 80144c4:	d803      	bhi.n	80144ce <mem_malloc+0x3a>
 80144c6:	8bba      	ldrh	r2, [r7, #28]
 80144c8:	88fb      	ldrh	r3, [r7, #6]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d201      	bcs.n	80144d2 <mem_malloc+0x3e>
    return NULL;
 80144ce:	2300      	movs	r3, #0
 80144d0:	e0cd      	b.n	801466e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80144d2:	4869      	ldr	r0, [pc, #420]	; (8014678 <mem_malloc+0x1e4>)
 80144d4:	f00a fc58 	bl	801ed88 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80144d8:	4b68      	ldr	r3, [pc, #416]	; (801467c <mem_malloc+0x1e8>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	4618      	mov	r0, r3
 80144de:	f7ff fcfd 	bl	8013edc <mem_to_ptr>
 80144e2:	4603      	mov	r3, r0
 80144e4:	83fb      	strh	r3, [r7, #30]
 80144e6:	e0b7      	b.n	8014658 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80144e8:	8bfb      	ldrh	r3, [r7, #30]
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7ff fce4 	bl	8013eb8 <ptr_to_mem>
 80144f0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	791b      	ldrb	r3, [r3, #4]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	f040 80a7 	bne.w	801464a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	881b      	ldrh	r3, [r3, #0]
 8014500:	461a      	mov	r2, r3
 8014502:	8bfb      	ldrh	r3, [r7, #30]
 8014504:	1ad3      	subs	r3, r2, r3
 8014506:	f1a3 0208 	sub.w	r2, r3, #8
 801450a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801450c:	429a      	cmp	r2, r3
 801450e:	f0c0 809c 	bcc.w	801464a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	881b      	ldrh	r3, [r3, #0]
 8014516:	461a      	mov	r2, r3
 8014518:	8bfb      	ldrh	r3, [r7, #30]
 801451a:	1ad3      	subs	r3, r2, r3
 801451c:	f1a3 0208 	sub.w	r2, r3, #8
 8014520:	8bbb      	ldrh	r3, [r7, #28]
 8014522:	3314      	adds	r3, #20
 8014524:	429a      	cmp	r2, r3
 8014526:	d333      	bcc.n	8014590 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014528:	8bfa      	ldrh	r2, [r7, #30]
 801452a:	8bbb      	ldrh	r3, [r7, #28]
 801452c:	4413      	add	r3, r2
 801452e:	b29b      	uxth	r3, r3
 8014530:	3308      	adds	r3, #8
 8014532:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014534:	8a7b      	ldrh	r3, [r7, #18]
 8014536:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 801453a:	d106      	bne.n	801454a <mem_malloc+0xb6>
 801453c:	4b50      	ldr	r3, [pc, #320]	; (8014680 <mem_malloc+0x1ec>)
 801453e:	f240 3287 	movw	r2, #903	; 0x387
 8014542:	4950      	ldr	r1, [pc, #320]	; (8014684 <mem_malloc+0x1f0>)
 8014544:	4850      	ldr	r0, [pc, #320]	; (8014688 <mem_malloc+0x1f4>)
 8014546:	f010 f963 	bl	8024810 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801454a:	8a7b      	ldrh	r3, [r7, #18]
 801454c:	4618      	mov	r0, r3
 801454e:	f7ff fcb3 	bl	8013eb8 <ptr_to_mem>
 8014552:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	2200      	movs	r2, #0
 8014558:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	881a      	ldrh	r2, [r3, #0]
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	8bfa      	ldrh	r2, [r7, #30]
 8014566:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	8a7a      	ldrh	r2, [r7, #18]
 801456c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	2201      	movs	r2, #1
 8014572:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	881b      	ldrh	r3, [r3, #0]
 8014578:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 801457c:	d00b      	beq.n	8014596 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	881b      	ldrh	r3, [r3, #0]
 8014582:	4618      	mov	r0, r3
 8014584:	f7ff fc98 	bl	8013eb8 <ptr_to_mem>
 8014588:	4602      	mov	r2, r0
 801458a:	8a7b      	ldrh	r3, [r7, #18]
 801458c:	8053      	strh	r3, [r2, #2]
 801458e:	e002      	b.n	8014596 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	2201      	movs	r2, #1
 8014594:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014596:	4b39      	ldr	r3, [pc, #228]	; (801467c <mem_malloc+0x1e8>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	697a      	ldr	r2, [r7, #20]
 801459c:	429a      	cmp	r2, r3
 801459e:	d127      	bne.n	80145f0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80145a0:	4b36      	ldr	r3, [pc, #216]	; (801467c <mem_malloc+0x1e8>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80145a6:	e005      	b.n	80145b4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80145a8:	69bb      	ldr	r3, [r7, #24]
 80145aa:	881b      	ldrh	r3, [r3, #0]
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7ff fc83 	bl	8013eb8 <ptr_to_mem>
 80145b2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	791b      	ldrb	r3, [r3, #4]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d004      	beq.n	80145c6 <mem_malloc+0x132>
 80145bc:	4b33      	ldr	r3, [pc, #204]	; (801468c <mem_malloc+0x1f8>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	69ba      	ldr	r2, [r7, #24]
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d1f0      	bne.n	80145a8 <mem_malloc+0x114>
          }
          lfree = cur;
 80145c6:	4a2d      	ldr	r2, [pc, #180]	; (801467c <mem_malloc+0x1e8>)
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80145cc:	4b2b      	ldr	r3, [pc, #172]	; (801467c <mem_malloc+0x1e8>)
 80145ce:	681a      	ldr	r2, [r3, #0]
 80145d0:	4b2e      	ldr	r3, [pc, #184]	; (801468c <mem_malloc+0x1f8>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d00b      	beq.n	80145f0 <mem_malloc+0x15c>
 80145d8:	4b28      	ldr	r3, [pc, #160]	; (801467c <mem_malloc+0x1e8>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	791b      	ldrb	r3, [r3, #4]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d006      	beq.n	80145f0 <mem_malloc+0x15c>
 80145e2:	4b27      	ldr	r3, [pc, #156]	; (8014680 <mem_malloc+0x1ec>)
 80145e4:	f240 32b5 	movw	r2, #949	; 0x3b5
 80145e8:	4929      	ldr	r1, [pc, #164]	; (8014690 <mem_malloc+0x1fc>)
 80145ea:	4827      	ldr	r0, [pc, #156]	; (8014688 <mem_malloc+0x1f4>)
 80145ec:	f010 f910 	bl	8024810 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80145f0:	4821      	ldr	r0, [pc, #132]	; (8014678 <mem_malloc+0x1e4>)
 80145f2:	f00a fbd8 	bl	801eda6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80145f6:	8bba      	ldrh	r2, [r7, #28]
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	4413      	add	r3, r2
 80145fc:	3308      	adds	r3, #8
 80145fe:	4a23      	ldr	r2, [pc, #140]	; (801468c <mem_malloc+0x1f8>)
 8014600:	6812      	ldr	r2, [r2, #0]
 8014602:	4293      	cmp	r3, r2
 8014604:	d906      	bls.n	8014614 <mem_malloc+0x180>
 8014606:	4b1e      	ldr	r3, [pc, #120]	; (8014680 <mem_malloc+0x1ec>)
 8014608:	f240 32b9 	movw	r2, #953	; 0x3b9
 801460c:	4921      	ldr	r1, [pc, #132]	; (8014694 <mem_malloc+0x200>)
 801460e:	481e      	ldr	r0, [pc, #120]	; (8014688 <mem_malloc+0x1f4>)
 8014610:	f010 f8fe 	bl	8024810 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014614:	697b      	ldr	r3, [r7, #20]
 8014616:	f003 0303 	and.w	r3, r3, #3
 801461a:	2b00      	cmp	r3, #0
 801461c:	d006      	beq.n	801462c <mem_malloc+0x198>
 801461e:	4b18      	ldr	r3, [pc, #96]	; (8014680 <mem_malloc+0x1ec>)
 8014620:	f240 32bb 	movw	r2, #955	; 0x3bb
 8014624:	491c      	ldr	r1, [pc, #112]	; (8014698 <mem_malloc+0x204>)
 8014626:	4818      	ldr	r0, [pc, #96]	; (8014688 <mem_malloc+0x1f4>)
 8014628:	f010 f8f2 	bl	8024810 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	f003 0303 	and.w	r3, r3, #3
 8014632:	2b00      	cmp	r3, #0
 8014634:	d006      	beq.n	8014644 <mem_malloc+0x1b0>
 8014636:	4b12      	ldr	r3, [pc, #72]	; (8014680 <mem_malloc+0x1ec>)
 8014638:	f240 32bd 	movw	r2, #957	; 0x3bd
 801463c:	4917      	ldr	r1, [pc, #92]	; (801469c <mem_malloc+0x208>)
 801463e:	4812      	ldr	r0, [pc, #72]	; (8014688 <mem_malloc+0x1f4>)
 8014640:	f010 f8e6 	bl	8024810 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	3308      	adds	r3, #8
 8014648:	e011      	b.n	801466e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801464a:	8bfb      	ldrh	r3, [r7, #30]
 801464c:	4618      	mov	r0, r3
 801464e:	f7ff fc33 	bl	8013eb8 <ptr_to_mem>
 8014652:	4603      	mov	r3, r0
 8014654:	881b      	ldrh	r3, [r3, #0]
 8014656:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014658:	8bfa      	ldrh	r2, [r7, #30]
 801465a:	8bbb      	ldrh	r3, [r7, #28]
 801465c:	f5c3 6348 	rsb	r3, r3, #3200	; 0xc80
 8014660:	429a      	cmp	r2, r3
 8014662:	f4ff af41 	bcc.w	80144e8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014666:	4804      	ldr	r0, [pc, #16]	; (8014678 <mem_malloc+0x1e4>)
 8014668:	f00a fb9d 	bl	801eda6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801466c:	2300      	movs	r3, #0
}
 801466e:	4618      	mov	r0, r3
 8014670:	3720      	adds	r7, #32
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	20017bf8 	.word	0x20017bf8
 801467c:	20017bfc 	.word	0x20017bfc
 8014680:	0802a218 	.word	0x0802a218
 8014684:	0802a3dc 	.word	0x0802a3dc
 8014688:	0802a260 	.word	0x0802a260
 801468c:	20017bf4 	.word	0x20017bf4
 8014690:	0802a3f0 	.word	0x0802a3f0
 8014694:	0802a40c 	.word	0x0802a40c
 8014698:	0802a43c 	.word	0x0802a43c
 801469c:	0802a46c 	.word	0x0802a46c

080146a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80146a0:	b480      	push	{r7}
 80146a2:	b085      	sub	sp, #20
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	689b      	ldr	r3, [r3, #8]
 80146ac:	2200      	movs	r2, #0
 80146ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	685b      	ldr	r3, [r3, #4]
 80146b4:	3303      	adds	r3, #3
 80146b6:	f023 0303 	bic.w	r3, r3, #3
 80146ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80146bc:	2300      	movs	r3, #0
 80146be:	60fb      	str	r3, [r7, #12]
 80146c0:	e011      	b.n	80146e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	689b      	ldr	r3, [r3, #8]
 80146c6:	681a      	ldr	r2, [r3, #0]
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	689b      	ldr	r3, [r3, #8]
 80146d0:	68ba      	ldr	r2, [r7, #8]
 80146d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	881b      	ldrh	r3, [r3, #0]
 80146d8:	461a      	mov	r2, r3
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	4413      	add	r3, r2
 80146de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	3301      	adds	r3, #1
 80146e4:	60fb      	str	r3, [r7, #12]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	885b      	ldrh	r3, [r3, #2]
 80146ea:	461a      	mov	r2, r3
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	4293      	cmp	r3, r2
 80146f0:	dbe7      	blt.n	80146c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80146f2:	bf00      	nop
 80146f4:	bf00      	nop
 80146f6:	3714      	adds	r7, #20
 80146f8:	46bd      	mov	sp, r7
 80146fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fe:	4770      	bx	lr

08014700 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014706:	2300      	movs	r3, #0
 8014708:	80fb      	strh	r3, [r7, #6]
 801470a:	e009      	b.n	8014720 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801470c:	88fb      	ldrh	r3, [r7, #6]
 801470e:	4a08      	ldr	r2, [pc, #32]	; (8014730 <memp_init+0x30>)
 8014710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014714:	4618      	mov	r0, r3
 8014716:	f7ff ffc3 	bl	80146a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801471a:	88fb      	ldrh	r3, [r7, #6]
 801471c:	3301      	adds	r3, #1
 801471e:	80fb      	strh	r3, [r7, #6]
 8014720:	88fb      	ldrh	r3, [r7, #6]
 8014722:	2b0c      	cmp	r3, #12
 8014724:	d9f2      	bls.n	801470c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014726:	bf00      	nop
 8014728:	bf00      	nop
 801472a:	3708      	adds	r7, #8
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	0802d4a0 	.word	0x0802d4a0

08014734 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b084      	sub	sp, #16
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801473c:	f00a fb60 	bl	801ee00 <sys_arch_protect>
 8014740:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	689b      	ldr	r3, [r3, #8]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d015      	beq.n	801477c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	689b      	ldr	r3, [r3, #8]
 8014754:	68ba      	ldr	r2, [r7, #8]
 8014756:	6812      	ldr	r2, [r2, #0]
 8014758:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	f003 0303 	and.w	r3, r3, #3
 8014760:	2b00      	cmp	r3, #0
 8014762:	d006      	beq.n	8014772 <do_memp_malloc_pool+0x3e>
 8014764:	4b09      	ldr	r3, [pc, #36]	; (801478c <do_memp_malloc_pool+0x58>)
 8014766:	f44f 728c 	mov.w	r2, #280	; 0x118
 801476a:	4909      	ldr	r1, [pc, #36]	; (8014790 <do_memp_malloc_pool+0x5c>)
 801476c:	4809      	ldr	r0, [pc, #36]	; (8014794 <do_memp_malloc_pool+0x60>)
 801476e:	f010 f84f 	bl	8024810 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014772:	68f8      	ldr	r0, [r7, #12]
 8014774:	f00a fb52 	bl	801ee1c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	e003      	b.n	8014784 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801477c:	68f8      	ldr	r0, [r7, #12]
 801477e:	f00a fb4d 	bl	801ee1c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8014782:	2300      	movs	r3, #0
}
 8014784:	4618      	mov	r0, r3
 8014786:	3710      	adds	r7, #16
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	0802a490 	.word	0x0802a490
 8014790:	0802a4c0 	.word	0x0802a4c0
 8014794:	0802a4e4 	.word	0x0802a4e4

08014798 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b082      	sub	sp, #8
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d106      	bne.n	80147b4 <memp_malloc_pool+0x1c>
 80147a6:	4b0a      	ldr	r3, [pc, #40]	; (80147d0 <memp_malloc_pool+0x38>)
 80147a8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80147ac:	4909      	ldr	r1, [pc, #36]	; (80147d4 <memp_malloc_pool+0x3c>)
 80147ae:	480a      	ldr	r0, [pc, #40]	; (80147d8 <memp_malloc_pool+0x40>)
 80147b0:	f010 f82e 	bl	8024810 <iprintf>
  if (desc == NULL) {
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d101      	bne.n	80147be <memp_malloc_pool+0x26>
    return NULL;
 80147ba:	2300      	movs	r3, #0
 80147bc:	e003      	b.n	80147c6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f7ff ffb8 	bl	8014734 <do_memp_malloc_pool>
 80147c4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3708      	adds	r7, #8
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	0802a490 	.word	0x0802a490
 80147d4:	0802a50c 	.word	0x0802a50c
 80147d8:	0802a4e4 	.word	0x0802a4e4

080147dc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	4603      	mov	r3, r0
 80147e4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80147e6:	79fb      	ldrb	r3, [r7, #7]
 80147e8:	2b0c      	cmp	r3, #12
 80147ea:	d908      	bls.n	80147fe <memp_malloc+0x22>
 80147ec:	4b0a      	ldr	r3, [pc, #40]	; (8014818 <memp_malloc+0x3c>)
 80147ee:	f240 1257 	movw	r2, #343	; 0x157
 80147f2:	490a      	ldr	r1, [pc, #40]	; (801481c <memp_malloc+0x40>)
 80147f4:	480a      	ldr	r0, [pc, #40]	; (8014820 <memp_malloc+0x44>)
 80147f6:	f010 f80b 	bl	8024810 <iprintf>
 80147fa:	2300      	movs	r3, #0
 80147fc:	e008      	b.n	8014810 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80147fe:	79fb      	ldrb	r3, [r7, #7]
 8014800:	4a08      	ldr	r2, [pc, #32]	; (8014824 <memp_malloc+0x48>)
 8014802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014806:	4618      	mov	r0, r3
 8014808:	f7ff ff94 	bl	8014734 <do_memp_malloc_pool>
 801480c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801480e:	68fb      	ldr	r3, [r7, #12]
}
 8014810:	4618      	mov	r0, r3
 8014812:	3710      	adds	r7, #16
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}
 8014818:	0802a490 	.word	0x0802a490
 801481c:	0802a520 	.word	0x0802a520
 8014820:	0802a4e4 	.word	0x0802a4e4
 8014824:	0802d4a0 	.word	0x0802d4a0

08014828 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b084      	sub	sp, #16
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	f003 0303 	and.w	r3, r3, #3
 8014838:	2b00      	cmp	r3, #0
 801483a:	d006      	beq.n	801484a <do_memp_free_pool+0x22>
 801483c:	4b0d      	ldr	r3, [pc, #52]	; (8014874 <do_memp_free_pool+0x4c>)
 801483e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8014842:	490d      	ldr	r1, [pc, #52]	; (8014878 <do_memp_free_pool+0x50>)
 8014844:	480d      	ldr	r0, [pc, #52]	; (801487c <do_memp_free_pool+0x54>)
 8014846:	f00f ffe3 	bl	8024810 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801484e:	f00a fad7 	bl	801ee00 <sys_arch_protect>
 8014852:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	689b      	ldr	r3, [r3, #8]
 8014858:	681a      	ldr	r2, [r3, #0]
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	689b      	ldr	r3, [r3, #8]
 8014862:	68fa      	ldr	r2, [r7, #12]
 8014864:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8014866:	68b8      	ldr	r0, [r7, #8]
 8014868:	f00a fad8 	bl	801ee1c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801486c:	bf00      	nop
 801486e:	3710      	adds	r7, #16
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	0802a490 	.word	0x0802a490
 8014878:	0802a540 	.word	0x0802a540
 801487c:	0802a4e4 	.word	0x0802a4e4

08014880 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b082      	sub	sp, #8
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
 8014888:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d106      	bne.n	801489e <memp_free_pool+0x1e>
 8014890:	4b0a      	ldr	r3, [pc, #40]	; (80148bc <memp_free_pool+0x3c>)
 8014892:	f240 1295 	movw	r2, #405	; 0x195
 8014896:	490a      	ldr	r1, [pc, #40]	; (80148c0 <memp_free_pool+0x40>)
 8014898:	480a      	ldr	r0, [pc, #40]	; (80148c4 <memp_free_pool+0x44>)
 801489a:	f00f ffb9 	bl	8024810 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d007      	beq.n	80148b4 <memp_free_pool+0x34>
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d004      	beq.n	80148b4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80148aa:	6839      	ldr	r1, [r7, #0]
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f7ff ffbb 	bl	8014828 <do_memp_free_pool>
 80148b2:	e000      	b.n	80148b6 <memp_free_pool+0x36>
    return;
 80148b4:	bf00      	nop
}
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}
 80148bc:	0802a490 	.word	0x0802a490
 80148c0:	0802a50c 	.word	0x0802a50c
 80148c4:	0802a4e4 	.word	0x0802a4e4

080148c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b082      	sub	sp, #8
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	4603      	mov	r3, r0
 80148d0:	6039      	str	r1, [r7, #0]
 80148d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80148d4:	79fb      	ldrb	r3, [r7, #7]
 80148d6:	2b0c      	cmp	r3, #12
 80148d8:	d907      	bls.n	80148ea <memp_free+0x22>
 80148da:	4b0c      	ldr	r3, [pc, #48]	; (801490c <memp_free+0x44>)
 80148dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80148e0:	490b      	ldr	r1, [pc, #44]	; (8014910 <memp_free+0x48>)
 80148e2:	480c      	ldr	r0, [pc, #48]	; (8014914 <memp_free+0x4c>)
 80148e4:	f00f ff94 	bl	8024810 <iprintf>
 80148e8:	e00c      	b.n	8014904 <memp_free+0x3c>

  if (mem == NULL) {
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d008      	beq.n	8014902 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80148f0:	79fb      	ldrb	r3, [r7, #7]
 80148f2:	4a09      	ldr	r2, [pc, #36]	; (8014918 <memp_free+0x50>)
 80148f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80148f8:	6839      	ldr	r1, [r7, #0]
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7ff ff94 	bl	8014828 <do_memp_free_pool>
 8014900:	e000      	b.n	8014904 <memp_free+0x3c>
    return;
 8014902:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014904:	3708      	adds	r7, #8
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}
 801490a:	bf00      	nop
 801490c:	0802a490 	.word	0x0802a490
 8014910:	0802a560 	.word	0x0802a560
 8014914:	0802a4e4 	.word	0x0802a4e4
 8014918:	0802d4a0 	.word	0x0802d4a0

0801491c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801491c:	b480      	push	{r7}
 801491e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014920:	bf00      	nop
 8014922:	46bd      	mov	sp, r7
 8014924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014928:	4770      	bx	lr
	...

0801492c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b086      	sub	sp, #24
 8014930:	af00      	add	r7, sp, #0
 8014932:	60f8      	str	r0, [r7, #12]
 8014934:	60b9      	str	r1, [r7, #8]
 8014936:	607a      	str	r2, [r7, #4]
 8014938:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d108      	bne.n	8014952 <netif_add+0x26>
 8014940:	4b57      	ldr	r3, [pc, #348]	; (8014aa0 <netif_add+0x174>)
 8014942:	f240 1227 	movw	r2, #295	; 0x127
 8014946:	4957      	ldr	r1, [pc, #348]	; (8014aa4 <netif_add+0x178>)
 8014948:	4857      	ldr	r0, [pc, #348]	; (8014aa8 <netif_add+0x17c>)
 801494a:	f00f ff61 	bl	8024810 <iprintf>
 801494e:	2300      	movs	r3, #0
 8014950:	e0a2      	b.n	8014a98 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014954:	2b00      	cmp	r3, #0
 8014956:	d108      	bne.n	801496a <netif_add+0x3e>
 8014958:	4b51      	ldr	r3, [pc, #324]	; (8014aa0 <netif_add+0x174>)
 801495a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801495e:	4953      	ldr	r1, [pc, #332]	; (8014aac <netif_add+0x180>)
 8014960:	4851      	ldr	r0, [pc, #324]	; (8014aa8 <netif_add+0x17c>)
 8014962:	f00f ff55 	bl	8024810 <iprintf>
 8014966:	2300      	movs	r3, #0
 8014968:	e096      	b.n	8014a98 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d101      	bne.n	8014974 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8014970:	4b4f      	ldr	r3, [pc, #316]	; (8014ab0 <netif_add+0x184>)
 8014972:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d101      	bne.n	801497e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801497a:	4b4d      	ldr	r3, [pc, #308]	; (8014ab0 <netif_add+0x184>)
 801497c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d101      	bne.n	8014988 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014984:	4b4a      	ldr	r3, [pc, #296]	; (8014ab0 <netif_add+0x184>)
 8014986:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	2200      	movs	r2, #0
 801498c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	2200      	movs	r2, #0
 8014992:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	2200      	movs	r2, #0
 8014998:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	4a45      	ldr	r2, [pc, #276]	; (8014ab4 <netif_add+0x188>)
 801499e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	2200      	movs	r2, #0
 80149a4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	2200      	movs	r2, #0
 80149aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2200      	movs	r2, #0
 80149b2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	6a3a      	ldr	r2, [r7, #32]
 80149b8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80149ba:	4b3f      	ldr	r3, [pc, #252]	; (8014ab8 <netif_add+0x18c>)
 80149bc:	781a      	ldrb	r2, [r3, #0]
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149c8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	68b9      	ldr	r1, [r7, #8]
 80149d0:	68f8      	ldr	r0, [r7, #12]
 80149d2:	f000 f913 	bl	8014bfc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80149d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d8:	68f8      	ldr	r0, [r7, #12]
 80149da:	4798      	blx	r3
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d001      	beq.n	80149e6 <netif_add+0xba>
    return NULL;
 80149e2:	2300      	movs	r3, #0
 80149e4:	e058      	b.n	8014a98 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80149ec:	2bff      	cmp	r3, #255	; 0xff
 80149ee:	d103      	bne.n	80149f8 <netif_add+0xcc>
        netif->num = 0;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	2200      	movs	r2, #0
 80149f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80149f8:	2300      	movs	r3, #0
 80149fa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80149fc:	4b2f      	ldr	r3, [pc, #188]	; (8014abc <netif_add+0x190>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	617b      	str	r3, [r7, #20]
 8014a02:	e02b      	b.n	8014a5c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014a04:	697a      	ldr	r2, [r7, #20]
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d106      	bne.n	8014a1a <netif_add+0xee>
 8014a0c:	4b24      	ldr	r3, [pc, #144]	; (8014aa0 <netif_add+0x174>)
 8014a0e:	f240 128b 	movw	r2, #395	; 0x18b
 8014a12:	492b      	ldr	r1, [pc, #172]	; (8014ac0 <netif_add+0x194>)
 8014a14:	4824      	ldr	r0, [pc, #144]	; (8014aa8 <netif_add+0x17c>)
 8014a16:	f00f fefb 	bl	8024810 <iprintf>
        num_netifs++;
 8014a1a:	693b      	ldr	r3, [r7, #16]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014a20:	693b      	ldr	r3, [r7, #16]
 8014a22:	2bff      	cmp	r3, #255	; 0xff
 8014a24:	dd06      	ble.n	8014a34 <netif_add+0x108>
 8014a26:	4b1e      	ldr	r3, [pc, #120]	; (8014aa0 <netif_add+0x174>)
 8014a28:	f240 128d 	movw	r2, #397	; 0x18d
 8014a2c:	4925      	ldr	r1, [pc, #148]	; (8014ac4 <netif_add+0x198>)
 8014a2e:	481e      	ldr	r0, [pc, #120]	; (8014aa8 <netif_add+0x17c>)
 8014a30:	f00f feee 	bl	8024810 <iprintf>
        if (netif2->num == netif->num) {
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d108      	bne.n	8014a56 <netif_add+0x12a>
          netif->num++;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	b2da      	uxtb	r2, r3
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8014a54:	e005      	b.n	8014a62 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	617b      	str	r3, [r7, #20]
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d1d0      	bne.n	8014a04 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8014a62:	697b      	ldr	r3, [r7, #20]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d1be      	bne.n	80149e6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a6e:	2bfe      	cmp	r3, #254	; 0xfe
 8014a70:	d103      	bne.n	8014a7a <netif_add+0x14e>
    netif_num = 0;
 8014a72:	4b11      	ldr	r3, [pc, #68]	; (8014ab8 <netif_add+0x18c>)
 8014a74:	2200      	movs	r2, #0
 8014a76:	701a      	strb	r2, [r3, #0]
 8014a78:	e006      	b.n	8014a88 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a80:	3301      	adds	r3, #1
 8014a82:	b2da      	uxtb	r2, r3
 8014a84:	4b0c      	ldr	r3, [pc, #48]	; (8014ab8 <netif_add+0x18c>)
 8014a86:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014a88:	4b0c      	ldr	r3, [pc, #48]	; (8014abc <netif_add+0x190>)
 8014a8a:	681a      	ldr	r2, [r3, #0]
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8014a90:	4a0a      	ldr	r2, [pc, #40]	; (8014abc <netif_add+0x190>)
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8014a96:	68fb      	ldr	r3, [r7, #12]
}
 8014a98:	4618      	mov	r0, r3
 8014a9a:	3718      	adds	r7, #24
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}
 8014aa0:	0802a57c 	.word	0x0802a57c
 8014aa4:	0802a610 	.word	0x0802a610
 8014aa8:	0802a5cc 	.word	0x0802a5cc
 8014aac:	0802a62c 	.word	0x0802a62c
 8014ab0:	0802d514 	.word	0x0802d514
 8014ab4:	08014ed7 	.word	0x08014ed7
 8014ab8:	2001acd4 	.word	0x2001acd4
 8014abc:	2001accc 	.word	0x2001accc
 8014ac0:	0802a650 	.word	0x0802a650
 8014ac4:	0802a664 	.word	0x0802a664

08014ac8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8014ad2:	6839      	ldr	r1, [r7, #0]
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f002 fe4f 	bl	8017778 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8014ada:	6839      	ldr	r1, [r7, #0]
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f007 fd01 	bl	801c4e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8014ae2:	bf00      	nop
 8014ae4:	3708      	adds	r7, #8
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
	...

08014aec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b086      	sub	sp, #24
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d106      	bne.n	8014b0c <netif_do_set_ipaddr+0x20>
 8014afe:	4b1d      	ldr	r3, [pc, #116]	; (8014b74 <netif_do_set_ipaddr+0x88>)
 8014b00:	f240 12cb 	movw	r2, #459	; 0x1cb
 8014b04:	491c      	ldr	r1, [pc, #112]	; (8014b78 <netif_do_set_ipaddr+0x8c>)
 8014b06:	481d      	ldr	r0, [pc, #116]	; (8014b7c <netif_do_set_ipaddr+0x90>)
 8014b08:	f00f fe82 	bl	8024810 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d106      	bne.n	8014b20 <netif_do_set_ipaddr+0x34>
 8014b12:	4b18      	ldr	r3, [pc, #96]	; (8014b74 <netif_do_set_ipaddr+0x88>)
 8014b14:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8014b18:	4917      	ldr	r1, [pc, #92]	; (8014b78 <netif_do_set_ipaddr+0x8c>)
 8014b1a:	4818      	ldr	r0, [pc, #96]	; (8014b7c <netif_do_set_ipaddr+0x90>)
 8014b1c:	f00f fe78 	bl	8024810 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	3304      	adds	r3, #4
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d01c      	beq.n	8014b68 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	3304      	adds	r3, #4
 8014b38:	681a      	ldr	r2, [r3, #0]
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014b3e:	f107 0314 	add.w	r3, r7, #20
 8014b42:	4619      	mov	r1, r3
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f7ff ffbf 	bl	8014ac8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014b4a:	68bb      	ldr	r3, [r7, #8]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d002      	beq.n	8014b56 <netif_do_set_ipaddr+0x6a>
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	e000      	b.n	8014b58 <netif_do_set_ipaddr+0x6c>
 8014b56:	2300      	movs	r3, #0
 8014b58:	68fa      	ldr	r2, [r7, #12]
 8014b5a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014b5c:	2101      	movs	r1, #1
 8014b5e:	68f8      	ldr	r0, [r7, #12]
 8014b60:	f000 f8d2 	bl	8014d08 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8014b64:	2301      	movs	r3, #1
 8014b66:	e000      	b.n	8014b6a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8014b68:	2300      	movs	r3, #0
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	3718      	adds	r7, #24
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
 8014b72:	bf00      	nop
 8014b74:	0802a57c 	.word	0x0802a57c
 8014b78:	0802a694 	.word	0x0802a694
 8014b7c:	0802a5cc 	.word	0x0802a5cc

08014b80 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014b80:	b480      	push	{r7}
 8014b82:	b085      	sub	sp, #20
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	60f8      	str	r0, [r7, #12]
 8014b88:	60b9      	str	r1, [r7, #8]
 8014b8a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	681a      	ldr	r2, [r3, #0]
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	3308      	adds	r3, #8
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d00a      	beq.n	8014bb0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d002      	beq.n	8014ba6 <netif_do_set_netmask+0x26>
 8014ba0:	68bb      	ldr	r3, [r7, #8]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	e000      	b.n	8014ba8 <netif_do_set_netmask+0x28>
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	68fa      	ldr	r2, [r7, #12]
 8014baa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8014bac:	2301      	movs	r3, #1
 8014bae:	e000      	b.n	8014bb2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8014bb0:	2300      	movs	r3, #0
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3714      	adds	r7, #20
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbc:	4770      	bx	lr

08014bbe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8014bbe:	b480      	push	{r7}
 8014bc0:	b085      	sub	sp, #20
 8014bc2:	af00      	add	r7, sp, #0
 8014bc4:	60f8      	str	r0, [r7, #12]
 8014bc6:	60b9      	str	r1, [r7, #8]
 8014bc8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	681a      	ldr	r2, [r3, #0]
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	330c      	adds	r3, #12
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d00a      	beq.n	8014bee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d002      	beq.n	8014be4 <netif_do_set_gw+0x26>
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	e000      	b.n	8014be6 <netif_do_set_gw+0x28>
 8014be4:	2300      	movs	r3, #0
 8014be6:	68fa      	ldr	r2, [r7, #12]
 8014be8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8014bea:	2301      	movs	r3, #1
 8014bec:	e000      	b.n	8014bf0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8014bee:	2300      	movs	r3, #0
}
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	3714      	adds	r7, #20
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfa:	4770      	bx	lr

08014bfc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b088      	sub	sp, #32
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	60f8      	str	r0, [r7, #12]
 8014c04:	60b9      	str	r1, [r7, #8]
 8014c06:	607a      	str	r2, [r7, #4]
 8014c08:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d101      	bne.n	8014c1c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8014c18:	4b1c      	ldr	r3, [pc, #112]	; (8014c8c <netif_set_addr+0x90>)
 8014c1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d101      	bne.n	8014c26 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8014c22:	4b1a      	ldr	r3, [pc, #104]	; (8014c8c <netif_set_addr+0x90>)
 8014c24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d101      	bne.n	8014c30 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8014c2c:	4b17      	ldr	r3, [pc, #92]	; (8014c8c <netif_set_addr+0x90>)
 8014c2e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d003      	beq.n	8014c3e <netif_set_addr+0x42>
 8014c36:	68bb      	ldr	r3, [r7, #8]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d101      	bne.n	8014c42 <netif_set_addr+0x46>
 8014c3e:	2301      	movs	r3, #1
 8014c40:	e000      	b.n	8014c44 <netif_set_addr+0x48>
 8014c42:	2300      	movs	r3, #0
 8014c44:	617b      	str	r3, [r7, #20]
  if (remove) {
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d006      	beq.n	8014c5a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014c4c:	f107 0310 	add.w	r3, r7, #16
 8014c50:	461a      	mov	r2, r3
 8014c52:	68b9      	ldr	r1, [r7, #8]
 8014c54:	68f8      	ldr	r0, [r7, #12]
 8014c56:	f7ff ff49 	bl	8014aec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8014c5a:	69fa      	ldr	r2, [r7, #28]
 8014c5c:	6879      	ldr	r1, [r7, #4]
 8014c5e:	68f8      	ldr	r0, [r7, #12]
 8014c60:	f7ff ff8e 	bl	8014b80 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014c64:	69ba      	ldr	r2, [r7, #24]
 8014c66:	6839      	ldr	r1, [r7, #0]
 8014c68:	68f8      	ldr	r0, [r7, #12]
 8014c6a:	f7ff ffa8 	bl	8014bbe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d106      	bne.n	8014c82 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014c74:	f107 0310 	add.w	r3, r7, #16
 8014c78:	461a      	mov	r2, r3
 8014c7a:	68b9      	ldr	r1, [r7, #8]
 8014c7c:	68f8      	ldr	r0, [r7, #12]
 8014c7e:	f7ff ff35 	bl	8014aec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8014c82:	bf00      	nop
 8014c84:	3720      	adds	r7, #32
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}
 8014c8a:	bf00      	nop
 8014c8c:	0802d514 	.word	0x0802d514

08014c90 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014c90:	b480      	push	{r7}
 8014c92:	b083      	sub	sp, #12
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014c98:	4a04      	ldr	r2, [pc, #16]	; (8014cac <netif_set_default+0x1c>)
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8014c9e:	bf00      	nop
 8014ca0:	370c      	adds	r7, #12
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca8:	4770      	bx	lr
 8014caa:	bf00      	nop
 8014cac:	2001acd0 	.word	0x2001acd0

08014cb0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d107      	bne.n	8014cce <netif_set_up+0x1e>
 8014cbe:	4b0f      	ldr	r3, [pc, #60]	; (8014cfc <netif_set_up+0x4c>)
 8014cc0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8014cc4:	490e      	ldr	r1, [pc, #56]	; (8014d00 <netif_set_up+0x50>)
 8014cc6:	480f      	ldr	r0, [pc, #60]	; (8014d04 <netif_set_up+0x54>)
 8014cc8:	f00f fda2 	bl	8024810 <iprintf>
 8014ccc:	e013      	b.n	8014cf6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cd4:	f003 0301 	and.w	r3, r3, #1
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d10c      	bne.n	8014cf6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014ce2:	f043 0301 	orr.w	r3, r3, #1
 8014ce6:	b2da      	uxtb	r2, r3
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014cee:	2103      	movs	r1, #3
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f000 f809 	bl	8014d08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8014cf6:	3708      	adds	r7, #8
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	0802a57c 	.word	0x0802a57c
 8014d00:	0802a704 	.word	0x0802a704
 8014d04:	0802a5cc 	.word	0x0802a5cc

08014d08 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	460b      	mov	r3, r1
 8014d12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d106      	bne.n	8014d28 <netif_issue_reports+0x20>
 8014d1a:	4b18      	ldr	r3, [pc, #96]	; (8014d7c <netif_issue_reports+0x74>)
 8014d1c:	f240 326d 	movw	r2, #877	; 0x36d
 8014d20:	4917      	ldr	r1, [pc, #92]	; (8014d80 <netif_issue_reports+0x78>)
 8014d22:	4818      	ldr	r0, [pc, #96]	; (8014d84 <netif_issue_reports+0x7c>)
 8014d24:	f00f fd74 	bl	8024810 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d2e:	f003 0304 	and.w	r3, r3, #4
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d01e      	beq.n	8014d74 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d3c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d017      	beq.n	8014d74 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014d44:	78fb      	ldrb	r3, [r7, #3]
 8014d46:	f003 0301 	and.w	r3, r3, #1
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d013      	beq.n	8014d76 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	3304      	adds	r3, #4
 8014d52:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d00e      	beq.n	8014d76 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d5e:	f003 0308 	and.w	r3, r3, #8
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d007      	beq.n	8014d76 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	3304      	adds	r3, #4
 8014d6a:	4619      	mov	r1, r3
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f008 fb23 	bl	801d3b8 <etharp_request>
 8014d72:	e000      	b.n	8014d76 <netif_issue_reports+0x6e>
    return;
 8014d74:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8014d76:	3708      	adds	r7, #8
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}
 8014d7c:	0802a57c 	.word	0x0802a57c
 8014d80:	0802a720 	.word	0x0802a720
 8014d84:	0802a5cc 	.word	0x0802a5cc

08014d88 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b082      	sub	sp, #8
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d107      	bne.n	8014da6 <netif_set_down+0x1e>
 8014d96:	4b12      	ldr	r3, [pc, #72]	; (8014de0 <netif_set_down+0x58>)
 8014d98:	f240 329b 	movw	r2, #923	; 0x39b
 8014d9c:	4911      	ldr	r1, [pc, #68]	; (8014de4 <netif_set_down+0x5c>)
 8014d9e:	4812      	ldr	r0, [pc, #72]	; (8014de8 <netif_set_down+0x60>)
 8014da0:	f00f fd36 	bl	8024810 <iprintf>
 8014da4:	e019      	b.n	8014dda <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014dac:	f003 0301 	and.w	r3, r3, #1
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d012      	beq.n	8014dda <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014dba:	f023 0301 	bic.w	r3, r3, #1
 8014dbe:	b2da      	uxtb	r2, r3
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014dcc:	f003 0308 	and.w	r3, r3, #8
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d002      	beq.n	8014dda <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f007 fead 	bl	801cb34 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8014dda:	3708      	adds	r7, #8
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}
 8014de0:	0802a57c 	.word	0x0802a57c
 8014de4:	0802a744 	.word	0x0802a744
 8014de8:	0802a5cc 	.word	0x0802a5cc

08014dec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d107      	bne.n	8014e0a <netif_set_link_up+0x1e>
 8014dfa:	4b13      	ldr	r3, [pc, #76]	; (8014e48 <netif_set_link_up+0x5c>)
 8014dfc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8014e00:	4912      	ldr	r1, [pc, #72]	; (8014e4c <netif_set_link_up+0x60>)
 8014e02:	4813      	ldr	r0, [pc, #76]	; (8014e50 <netif_set_link_up+0x64>)
 8014e04:	f00f fd04 	bl	8024810 <iprintf>
 8014e08:	e01b      	b.n	8014e42 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e10:	f003 0304 	and.w	r3, r3, #4
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d114      	bne.n	8014e42 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e1e:	f043 0304 	orr.w	r3, r3, #4
 8014e22:	b2da      	uxtb	r2, r3
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014e2a:	2103      	movs	r1, #3
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f7ff ff6b 	bl	8014d08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	69db      	ldr	r3, [r3, #28]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d003      	beq.n	8014e42 <netif_set_link_up+0x56>
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	69db      	ldr	r3, [r3, #28]
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}
 8014e48:	0802a57c 	.word	0x0802a57c
 8014e4c:	0802a764 	.word	0x0802a764
 8014e50:	0802a5cc 	.word	0x0802a5cc

08014e54 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d107      	bne.n	8014e72 <netif_set_link_down+0x1e>
 8014e62:	4b11      	ldr	r3, [pc, #68]	; (8014ea8 <netif_set_link_down+0x54>)
 8014e64:	f240 4206 	movw	r2, #1030	; 0x406
 8014e68:	4910      	ldr	r1, [pc, #64]	; (8014eac <netif_set_link_down+0x58>)
 8014e6a:	4811      	ldr	r0, [pc, #68]	; (8014eb0 <netif_set_link_down+0x5c>)
 8014e6c:	f00f fcd0 	bl	8024810 <iprintf>
 8014e70:	e017      	b.n	8014ea2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e78:	f003 0304 	and.w	r3, r3, #4
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d010      	beq.n	8014ea2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e86:	f023 0304 	bic.w	r3, r3, #4
 8014e8a:	b2da      	uxtb	r2, r3
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	69db      	ldr	r3, [r3, #28]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d003      	beq.n	8014ea2 <netif_set_link_down+0x4e>
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	69db      	ldr	r3, [r3, #28]
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014ea2:	3708      	adds	r7, #8
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	0802a57c 	.word	0x0802a57c
 8014eac:	0802a788 	.word	0x0802a788
 8014eb0:	0802a5cc 	.word	0x0802a5cc

08014eb4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b083      	sub	sp, #12
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d002      	beq.n	8014eca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	683a      	ldr	r2, [r7, #0]
 8014ec8:	61da      	str	r2, [r3, #28]
  }
}
 8014eca:	bf00      	nop
 8014ecc:	370c      	adds	r7, #12
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed4:	4770      	bx	lr

08014ed6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8014ed6:	b480      	push	{r7}
 8014ed8:	b085      	sub	sp, #20
 8014eda:	af00      	add	r7, sp, #0
 8014edc:	60f8      	str	r0, [r7, #12]
 8014ede:	60b9      	str	r1, [r7, #8]
 8014ee0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8014ee2:	f06f 030b 	mvn.w	r3, #11
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3714      	adds	r7, #20
 8014eea:	46bd      	mov	sp, r7
 8014eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef0:	4770      	bx	lr
	...

08014ef4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8014ef4:	b480      	push	{r7}
 8014ef6:	b085      	sub	sp, #20
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	4603      	mov	r3, r0
 8014efc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014efe:	79fb      	ldrb	r3, [r7, #7]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d013      	beq.n	8014f2c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8014f04:	4b0d      	ldr	r3, [pc, #52]	; (8014f3c <netif_get_by_index+0x48>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	60fb      	str	r3, [r7, #12]
 8014f0a:	e00c      	b.n	8014f26 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f12:	3301      	adds	r3, #1
 8014f14:	b2db      	uxtb	r3, r3
 8014f16:	79fa      	ldrb	r2, [r7, #7]
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d101      	bne.n	8014f20 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	e006      	b.n	8014f2e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	60fb      	str	r3, [r7, #12]
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d1ef      	bne.n	8014f0c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014f2c:	2300      	movs	r3, #0
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3714      	adds	r7, #20
 8014f32:	46bd      	mov	sp, r7
 8014f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	2001accc 	.word	0x2001accc

08014f40 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8014f46:	f009 ff5b 	bl	801ee00 <sys_arch_protect>
 8014f4a:	6038      	str	r0, [r7, #0]
 8014f4c:	4b0d      	ldr	r3, [pc, #52]	; (8014f84 <pbuf_free_ooseq+0x44>)
 8014f4e:	2200      	movs	r2, #0
 8014f50:	701a      	strb	r2, [r3, #0]
 8014f52:	6838      	ldr	r0, [r7, #0]
 8014f54:	f009 ff62 	bl	801ee1c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014f58:	4b0b      	ldr	r3, [pc, #44]	; (8014f88 <pbuf_free_ooseq+0x48>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	607b      	str	r3, [r7, #4]
 8014f5e:	e00a      	b.n	8014f76 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d003      	beq.n	8014f70 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f002 fc43 	bl	80177f4 <tcp_free_ooseq>
      return;
 8014f6e:	e005      	b.n	8014f7c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	68db      	ldr	r3, [r3, #12]
 8014f74:	607b      	str	r3, [r7, #4]
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d1f1      	bne.n	8014f60 <pbuf_free_ooseq+0x20>
    }
  }
}
 8014f7c:	3708      	adds	r7, #8
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}
 8014f82:	bf00      	nop
 8014f84:	2001acd5 	.word	0x2001acd5
 8014f88:	2001ace4 	.word	0x2001ace4

08014f8c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b082      	sub	sp, #8
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8014f94:	f7ff ffd4 	bl	8014f40 <pbuf_free_ooseq>
}
 8014f98:	bf00      	nop
 8014f9a:	3708      	adds	r7, #8
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8014fa6:	f009 ff2b 	bl	801ee00 <sys_arch_protect>
 8014faa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014fac:	4b0f      	ldr	r3, [pc, #60]	; (8014fec <pbuf_pool_is_empty+0x4c>)
 8014fae:	781b      	ldrb	r3, [r3, #0]
 8014fb0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8014fb2:	4b0e      	ldr	r3, [pc, #56]	; (8014fec <pbuf_pool_is_empty+0x4c>)
 8014fb4:	2201      	movs	r2, #1
 8014fb6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f009 ff2f 	bl	801ee1c <sys_arch_unprotect>

  if (!queued) {
 8014fbe:	78fb      	ldrb	r3, [r7, #3]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d10f      	bne.n	8014fe4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8014fc4:	2100      	movs	r1, #0
 8014fc6:	480a      	ldr	r0, [pc, #40]	; (8014ff0 <pbuf_pool_is_empty+0x50>)
 8014fc8:	f7fe fe90 	bl	8013cec <tcpip_try_callback>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d008      	beq.n	8014fe4 <pbuf_pool_is_empty+0x44>
 8014fd2:	f009 ff15 	bl	801ee00 <sys_arch_protect>
 8014fd6:	6078      	str	r0, [r7, #4]
 8014fd8:	4b04      	ldr	r3, [pc, #16]	; (8014fec <pbuf_pool_is_empty+0x4c>)
 8014fda:	2200      	movs	r2, #0
 8014fdc:	701a      	strb	r2, [r3, #0]
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f009 ff1c 	bl	801ee1c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014fe4:	bf00      	nop
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	2001acd5 	.word	0x2001acd5
 8014ff0:	08014f8d 	.word	0x08014f8d

08014ff4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	b085      	sub	sp, #20
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	60b9      	str	r1, [r7, #8]
 8014ffe:	4611      	mov	r1, r2
 8015000:	461a      	mov	r2, r3
 8015002:	460b      	mov	r3, r1
 8015004:	80fb      	strh	r3, [r7, #6]
 8015006:	4613      	mov	r3, r2
 8015008:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	2200      	movs	r2, #0
 801500e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	68ba      	ldr	r2, [r7, #8]
 8015014:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	88fa      	ldrh	r2, [r7, #6]
 801501a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	88ba      	ldrh	r2, [r7, #4]
 8015020:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8015022:	8b3b      	ldrh	r3, [r7, #24]
 8015024:	b2da      	uxtb	r2, r3
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	7f3a      	ldrb	r2, [r7, #28]
 801502e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2201      	movs	r2, #1
 8015034:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	2200      	movs	r2, #0
 801503a:	73da      	strb	r2, [r3, #15]
}
 801503c:	bf00      	nop
 801503e:	3714      	adds	r7, #20
 8015040:	46bd      	mov	sp, r7
 8015042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015046:	4770      	bx	lr

08015048 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b08c      	sub	sp, #48	; 0x30
 801504c:	af02      	add	r7, sp, #8
 801504e:	4603      	mov	r3, r0
 8015050:	71fb      	strb	r3, [r7, #7]
 8015052:	460b      	mov	r3, r1
 8015054:	80bb      	strh	r3, [r7, #4]
 8015056:	4613      	mov	r3, r2
 8015058:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801505a:	79fb      	ldrb	r3, [r7, #7]
 801505c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801505e:	887b      	ldrh	r3, [r7, #2]
 8015060:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8015064:	d07f      	beq.n	8015166 <pbuf_alloc+0x11e>
 8015066:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801506a:	f300 80c8 	bgt.w	80151fe <pbuf_alloc+0x1b6>
 801506e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015072:	d010      	beq.n	8015096 <pbuf_alloc+0x4e>
 8015074:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015078:	f300 80c1 	bgt.w	80151fe <pbuf_alloc+0x1b6>
 801507c:	2b01      	cmp	r3, #1
 801507e:	d002      	beq.n	8015086 <pbuf_alloc+0x3e>
 8015080:	2b41      	cmp	r3, #65	; 0x41
 8015082:	f040 80bc 	bne.w	80151fe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8015086:	887a      	ldrh	r2, [r7, #2]
 8015088:	88bb      	ldrh	r3, [r7, #4]
 801508a:	4619      	mov	r1, r3
 801508c:	2000      	movs	r0, #0
 801508e:	f000 f8d1 	bl	8015234 <pbuf_alloc_reference>
 8015092:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8015094:	e0bd      	b.n	8015212 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8015096:	2300      	movs	r3, #0
 8015098:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801509a:	2300      	movs	r3, #0
 801509c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801509e:	88bb      	ldrh	r3, [r7, #4]
 80150a0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80150a2:	200c      	movs	r0, #12
 80150a4:	f7ff fb9a 	bl	80147dc <memp_malloc>
 80150a8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d109      	bne.n	80150c4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80150b0:	f7ff ff76 	bl	8014fa0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80150b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d002      	beq.n	80150c0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80150ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150bc:	f000 faa8 	bl	8015610 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80150c0:	2300      	movs	r3, #0
 80150c2:	e0a7      	b.n	8015214 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80150c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150c6:	3303      	adds	r3, #3
 80150c8:	b29b      	uxth	r3, r3
 80150ca:	f023 0303 	bic.w	r3, r3, #3
 80150ce:	b29b      	uxth	r3, r3
 80150d0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80150d4:	b29b      	uxth	r3, r3
 80150d6:	8b7a      	ldrh	r2, [r7, #26]
 80150d8:	4293      	cmp	r3, r2
 80150da:	bf28      	it	cs
 80150dc:	4613      	movcs	r3, r2
 80150de:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80150e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150e2:	3310      	adds	r3, #16
 80150e4:	693a      	ldr	r2, [r7, #16]
 80150e6:	4413      	add	r3, r2
 80150e8:	3303      	adds	r3, #3
 80150ea:	f023 0303 	bic.w	r3, r3, #3
 80150ee:	4618      	mov	r0, r3
 80150f0:	89f9      	ldrh	r1, [r7, #14]
 80150f2:	8b7a      	ldrh	r2, [r7, #26]
 80150f4:	2300      	movs	r3, #0
 80150f6:	9301      	str	r3, [sp, #4]
 80150f8:	887b      	ldrh	r3, [r7, #2]
 80150fa:	9300      	str	r3, [sp, #0]
 80150fc:	460b      	mov	r3, r1
 80150fe:	4601      	mov	r1, r0
 8015100:	6938      	ldr	r0, [r7, #16]
 8015102:	f7ff ff77 	bl	8014ff4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	685b      	ldr	r3, [r3, #4]
 801510a:	f003 0303 	and.w	r3, r3, #3
 801510e:	2b00      	cmp	r3, #0
 8015110:	d006      	beq.n	8015120 <pbuf_alloc+0xd8>
 8015112:	4b42      	ldr	r3, [pc, #264]	; (801521c <pbuf_alloc+0x1d4>)
 8015114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015118:	4941      	ldr	r1, [pc, #260]	; (8015220 <pbuf_alloc+0x1d8>)
 801511a:	4842      	ldr	r0, [pc, #264]	; (8015224 <pbuf_alloc+0x1dc>)
 801511c:	f00f fb78 	bl	8024810 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015120:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015122:	3303      	adds	r3, #3
 8015124:	f023 0303 	bic.w	r3, r3, #3
 8015128:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801512c:	d106      	bne.n	801513c <pbuf_alloc+0xf4>
 801512e:	4b3b      	ldr	r3, [pc, #236]	; (801521c <pbuf_alloc+0x1d4>)
 8015130:	f44f 7281 	mov.w	r2, #258	; 0x102
 8015134:	493c      	ldr	r1, [pc, #240]	; (8015228 <pbuf_alloc+0x1e0>)
 8015136:	483b      	ldr	r0, [pc, #236]	; (8015224 <pbuf_alloc+0x1dc>)
 8015138:	f00f fb6a 	bl	8024810 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801513e:	2b00      	cmp	r3, #0
 8015140:	d102      	bne.n	8015148 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	627b      	str	r3, [r7, #36]	; 0x24
 8015146:	e002      	b.n	801514e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015148:	69fb      	ldr	r3, [r7, #28]
 801514a:	693a      	ldr	r2, [r7, #16]
 801514c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8015152:	8b7a      	ldrh	r2, [r7, #26]
 8015154:	89fb      	ldrh	r3, [r7, #14]
 8015156:	1ad3      	subs	r3, r2, r3
 8015158:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801515a:	2300      	movs	r3, #0
 801515c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801515e:	8b7b      	ldrh	r3, [r7, #26]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d19e      	bne.n	80150a2 <pbuf_alloc+0x5a>
      break;
 8015164:	e055      	b.n	8015212 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8015166:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015168:	3303      	adds	r3, #3
 801516a:	b29b      	uxth	r3, r3
 801516c:	f023 0303 	bic.w	r3, r3, #3
 8015170:	b29a      	uxth	r2, r3
 8015172:	88bb      	ldrh	r3, [r7, #4]
 8015174:	3303      	adds	r3, #3
 8015176:	b29b      	uxth	r3, r3
 8015178:	f023 0303 	bic.w	r3, r3, #3
 801517c:	b29b      	uxth	r3, r3
 801517e:	4413      	add	r3, r2
 8015180:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8015182:	8b3b      	ldrh	r3, [r7, #24]
 8015184:	3310      	adds	r3, #16
 8015186:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015188:	8b3a      	ldrh	r2, [r7, #24]
 801518a:	88bb      	ldrh	r3, [r7, #4]
 801518c:	3303      	adds	r3, #3
 801518e:	f023 0303 	bic.w	r3, r3, #3
 8015192:	429a      	cmp	r2, r3
 8015194:	d306      	bcc.n	80151a4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8015196:	8afa      	ldrh	r2, [r7, #22]
 8015198:	88bb      	ldrh	r3, [r7, #4]
 801519a:	3303      	adds	r3, #3
 801519c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d201      	bcs.n	80151a8 <pbuf_alloc+0x160>
        return NULL;
 80151a4:	2300      	movs	r3, #0
 80151a6:	e035      	b.n	8015214 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80151a8:	8afb      	ldrh	r3, [r7, #22]
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7ff f972 	bl	8014494 <mem_malloc>
 80151b0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80151b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d101      	bne.n	80151bc <pbuf_alloc+0x174>
        return NULL;
 80151b8:	2300      	movs	r3, #0
 80151ba:	e02b      	b.n	8015214 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80151bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151be:	3310      	adds	r3, #16
 80151c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151c2:	4413      	add	r3, r2
 80151c4:	3303      	adds	r3, #3
 80151c6:	f023 0303 	bic.w	r3, r3, #3
 80151ca:	4618      	mov	r0, r3
 80151cc:	88b9      	ldrh	r1, [r7, #4]
 80151ce:	88ba      	ldrh	r2, [r7, #4]
 80151d0:	2300      	movs	r3, #0
 80151d2:	9301      	str	r3, [sp, #4]
 80151d4:	887b      	ldrh	r3, [r7, #2]
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	460b      	mov	r3, r1
 80151da:	4601      	mov	r1, r0
 80151dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151de:	f7ff ff09 	bl	8014ff4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80151e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e4:	685b      	ldr	r3, [r3, #4]
 80151e6:	f003 0303 	and.w	r3, r3, #3
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d010      	beq.n	8015210 <pbuf_alloc+0x1c8>
 80151ee:	4b0b      	ldr	r3, [pc, #44]	; (801521c <pbuf_alloc+0x1d4>)
 80151f0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80151f4:	490d      	ldr	r1, [pc, #52]	; (801522c <pbuf_alloc+0x1e4>)
 80151f6:	480b      	ldr	r0, [pc, #44]	; (8015224 <pbuf_alloc+0x1dc>)
 80151f8:	f00f fb0a 	bl	8024810 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80151fc:	e008      	b.n	8015210 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80151fe:	4b07      	ldr	r3, [pc, #28]	; (801521c <pbuf_alloc+0x1d4>)
 8015200:	f240 1227 	movw	r2, #295	; 0x127
 8015204:	490a      	ldr	r1, [pc, #40]	; (8015230 <pbuf_alloc+0x1e8>)
 8015206:	4807      	ldr	r0, [pc, #28]	; (8015224 <pbuf_alloc+0x1dc>)
 8015208:	f00f fb02 	bl	8024810 <iprintf>
      return NULL;
 801520c:	2300      	movs	r3, #0
 801520e:	e001      	b.n	8015214 <pbuf_alloc+0x1cc>
      break;
 8015210:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015214:	4618      	mov	r0, r3
 8015216:	3728      	adds	r7, #40	; 0x28
 8015218:	46bd      	mov	sp, r7
 801521a:	bd80      	pop	{r7, pc}
 801521c:	0802a7ac 	.word	0x0802a7ac
 8015220:	0802a7dc 	.word	0x0802a7dc
 8015224:	0802a80c 	.word	0x0802a80c
 8015228:	0802a834 	.word	0x0802a834
 801522c:	0802a868 	.word	0x0802a868
 8015230:	0802a894 	.word	0x0802a894

08015234 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b086      	sub	sp, #24
 8015238:	af02      	add	r7, sp, #8
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	460b      	mov	r3, r1
 801523e:	807b      	strh	r3, [r7, #2]
 8015240:	4613      	mov	r3, r2
 8015242:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015244:	883b      	ldrh	r3, [r7, #0]
 8015246:	2b41      	cmp	r3, #65	; 0x41
 8015248:	d009      	beq.n	801525e <pbuf_alloc_reference+0x2a>
 801524a:	883b      	ldrh	r3, [r7, #0]
 801524c:	2b01      	cmp	r3, #1
 801524e:	d006      	beq.n	801525e <pbuf_alloc_reference+0x2a>
 8015250:	4b0f      	ldr	r3, [pc, #60]	; (8015290 <pbuf_alloc_reference+0x5c>)
 8015252:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8015256:	490f      	ldr	r1, [pc, #60]	; (8015294 <pbuf_alloc_reference+0x60>)
 8015258:	480f      	ldr	r0, [pc, #60]	; (8015298 <pbuf_alloc_reference+0x64>)
 801525a:	f00f fad9 	bl	8024810 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801525e:	200b      	movs	r0, #11
 8015260:	f7ff fabc 	bl	80147dc <memp_malloc>
 8015264:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d101      	bne.n	8015270 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801526c:	2300      	movs	r3, #0
 801526e:	e00b      	b.n	8015288 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015270:	8879      	ldrh	r1, [r7, #2]
 8015272:	887a      	ldrh	r2, [r7, #2]
 8015274:	2300      	movs	r3, #0
 8015276:	9301      	str	r3, [sp, #4]
 8015278:	883b      	ldrh	r3, [r7, #0]
 801527a:	9300      	str	r3, [sp, #0]
 801527c:	460b      	mov	r3, r1
 801527e:	6879      	ldr	r1, [r7, #4]
 8015280:	68f8      	ldr	r0, [r7, #12]
 8015282:	f7ff feb7 	bl	8014ff4 <pbuf_init_alloced_pbuf>
  return p;
 8015286:	68fb      	ldr	r3, [r7, #12]
}
 8015288:	4618      	mov	r0, r3
 801528a:	3710      	adds	r7, #16
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}
 8015290:	0802a7ac 	.word	0x0802a7ac
 8015294:	0802a8b0 	.word	0x0802a8b0
 8015298:	0802a80c 	.word	0x0802a80c

0801529c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b088      	sub	sp, #32
 80152a0:	af02      	add	r7, sp, #8
 80152a2:	607b      	str	r3, [r7, #4]
 80152a4:	4603      	mov	r3, r0
 80152a6:	73fb      	strb	r3, [r7, #15]
 80152a8:	460b      	mov	r3, r1
 80152aa:	81bb      	strh	r3, [r7, #12]
 80152ac:	4613      	mov	r3, r2
 80152ae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80152b0:	7bfb      	ldrb	r3, [r7, #15]
 80152b2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80152b4:	8a7b      	ldrh	r3, [r7, #18]
 80152b6:	3303      	adds	r3, #3
 80152b8:	f023 0203 	bic.w	r2, r3, #3
 80152bc:	89bb      	ldrh	r3, [r7, #12]
 80152be:	441a      	add	r2, r3
 80152c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d901      	bls.n	80152ca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80152c6:	2300      	movs	r3, #0
 80152c8:	e018      	b.n	80152fc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80152ca:	6a3b      	ldr	r3, [r7, #32]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d007      	beq.n	80152e0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80152d0:	8a7b      	ldrh	r3, [r7, #18]
 80152d2:	3303      	adds	r3, #3
 80152d4:	f023 0303 	bic.w	r3, r3, #3
 80152d8:	6a3a      	ldr	r2, [r7, #32]
 80152da:	4413      	add	r3, r2
 80152dc:	617b      	str	r3, [r7, #20]
 80152de:	e001      	b.n	80152e4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80152e0:	2300      	movs	r3, #0
 80152e2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	89b9      	ldrh	r1, [r7, #12]
 80152e8:	89ba      	ldrh	r2, [r7, #12]
 80152ea:	2302      	movs	r3, #2
 80152ec:	9301      	str	r3, [sp, #4]
 80152ee:	897b      	ldrh	r3, [r7, #10]
 80152f0:	9300      	str	r3, [sp, #0]
 80152f2:	460b      	mov	r3, r1
 80152f4:	6979      	ldr	r1, [r7, #20]
 80152f6:	f7ff fe7d 	bl	8014ff4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80152fa:	687b      	ldr	r3, [r7, #4]
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	3718      	adds	r7, #24
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}

08015304 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b084      	sub	sp, #16
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
 801530c:	460b      	mov	r3, r1
 801530e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d106      	bne.n	8015324 <pbuf_realloc+0x20>
 8015316:	4b3a      	ldr	r3, [pc, #232]	; (8015400 <pbuf_realloc+0xfc>)
 8015318:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801531c:	4939      	ldr	r1, [pc, #228]	; (8015404 <pbuf_realloc+0x100>)
 801531e:	483a      	ldr	r0, [pc, #232]	; (8015408 <pbuf_realloc+0x104>)
 8015320:	f00f fa76 	bl	8024810 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	891b      	ldrh	r3, [r3, #8]
 8015328:	887a      	ldrh	r2, [r7, #2]
 801532a:	429a      	cmp	r2, r3
 801532c:	d263      	bcs.n	80153f6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	891a      	ldrh	r2, [r3, #8]
 8015332:	887b      	ldrh	r3, [r7, #2]
 8015334:	1ad3      	subs	r3, r2, r3
 8015336:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015338:	887b      	ldrh	r3, [r7, #2]
 801533a:	817b      	strh	r3, [r7, #10]
  q = p;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015340:	e018      	b.n	8015374 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	895b      	ldrh	r3, [r3, #10]
 8015346:	897a      	ldrh	r2, [r7, #10]
 8015348:	1ad3      	subs	r3, r2, r3
 801534a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	891a      	ldrh	r2, [r3, #8]
 8015350:	893b      	ldrh	r3, [r7, #8]
 8015352:	1ad3      	subs	r3, r2, r3
 8015354:	b29a      	uxth	r2, r3
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d106      	bne.n	8015374 <pbuf_realloc+0x70>
 8015366:	4b26      	ldr	r3, [pc, #152]	; (8015400 <pbuf_realloc+0xfc>)
 8015368:	f240 12af 	movw	r2, #431	; 0x1af
 801536c:	4927      	ldr	r1, [pc, #156]	; (801540c <pbuf_realloc+0x108>)
 801536e:	4826      	ldr	r0, [pc, #152]	; (8015408 <pbuf_realloc+0x104>)
 8015370:	f00f fa4e 	bl	8024810 <iprintf>
  while (rem_len > q->len) {
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	895b      	ldrh	r3, [r3, #10]
 8015378:	897a      	ldrh	r2, [r7, #10]
 801537a:	429a      	cmp	r2, r3
 801537c:	d8e1      	bhi.n	8015342 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	7b1b      	ldrb	r3, [r3, #12]
 8015382:	f003 030f 	and.w	r3, r3, #15
 8015386:	2b00      	cmp	r3, #0
 8015388:	d121      	bne.n	80153ce <pbuf_realloc+0xca>
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	895b      	ldrh	r3, [r3, #10]
 801538e:	897a      	ldrh	r2, [r7, #10]
 8015390:	429a      	cmp	r2, r3
 8015392:	d01c      	beq.n	80153ce <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	7b5b      	ldrb	r3, [r3, #13]
 8015398:	f003 0302 	and.w	r3, r3, #2
 801539c:	2b00      	cmp	r3, #0
 801539e:	d116      	bne.n	80153ce <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	685a      	ldr	r2, [r3, #4]
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	1ad3      	subs	r3, r2, r3
 80153a8:	b29a      	uxth	r2, r3
 80153aa:	897b      	ldrh	r3, [r7, #10]
 80153ac:	4413      	add	r3, r2
 80153ae:	b29b      	uxth	r3, r3
 80153b0:	4619      	mov	r1, r3
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	f7fe ff64 	bl	8014280 <mem_trim>
 80153b8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d106      	bne.n	80153ce <pbuf_realloc+0xca>
 80153c0:	4b0f      	ldr	r3, [pc, #60]	; (8015400 <pbuf_realloc+0xfc>)
 80153c2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80153c6:	4912      	ldr	r1, [pc, #72]	; (8015410 <pbuf_realloc+0x10c>)
 80153c8:	480f      	ldr	r0, [pc, #60]	; (8015408 <pbuf_realloc+0x104>)
 80153ca:	f00f fa21 	bl	8024810 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	897a      	ldrh	r2, [r7, #10]
 80153d2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	895a      	ldrh	r2, [r3, #10]
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d004      	beq.n	80153ee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	4618      	mov	r0, r3
 80153ea:	f000 f911 	bl	8015610 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	2200      	movs	r2, #0
 80153f2:	601a      	str	r2, [r3, #0]
 80153f4:	e000      	b.n	80153f8 <pbuf_realloc+0xf4>
    return;
 80153f6:	bf00      	nop

}
 80153f8:	3710      	adds	r7, #16
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}
 80153fe:	bf00      	nop
 8015400:	0802a7ac 	.word	0x0802a7ac
 8015404:	0802a8c4 	.word	0x0802a8c4
 8015408:	0802a80c 	.word	0x0802a80c
 801540c:	0802a8dc 	.word	0x0802a8dc
 8015410:	0802a8f4 	.word	0x0802a8f4

08015414 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b086      	sub	sp, #24
 8015418:	af00      	add	r7, sp, #0
 801541a:	60f8      	str	r0, [r7, #12]
 801541c:	60b9      	str	r1, [r7, #8]
 801541e:	4613      	mov	r3, r2
 8015420:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d106      	bne.n	8015436 <pbuf_add_header_impl+0x22>
 8015428:	4b2b      	ldr	r3, [pc, #172]	; (80154d8 <pbuf_add_header_impl+0xc4>)
 801542a:	f240 12df 	movw	r2, #479	; 0x1df
 801542e:	492b      	ldr	r1, [pc, #172]	; (80154dc <pbuf_add_header_impl+0xc8>)
 8015430:	482b      	ldr	r0, [pc, #172]	; (80154e0 <pbuf_add_header_impl+0xcc>)
 8015432:	f00f f9ed 	bl	8024810 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d003      	beq.n	8015444 <pbuf_add_header_impl+0x30>
 801543c:	68bb      	ldr	r3, [r7, #8]
 801543e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015442:	d301      	bcc.n	8015448 <pbuf_add_header_impl+0x34>
    return 1;
 8015444:	2301      	movs	r3, #1
 8015446:	e043      	b.n	80154d0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d101      	bne.n	8015452 <pbuf_add_header_impl+0x3e>
    return 0;
 801544e:	2300      	movs	r3, #0
 8015450:	e03e      	b.n	80154d0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	891a      	ldrh	r2, [r3, #8]
 801545a:	8a7b      	ldrh	r3, [r7, #18]
 801545c:	4413      	add	r3, r2
 801545e:	b29b      	uxth	r3, r3
 8015460:	8a7a      	ldrh	r2, [r7, #18]
 8015462:	429a      	cmp	r2, r3
 8015464:	d901      	bls.n	801546a <pbuf_add_header_impl+0x56>
    return 1;
 8015466:	2301      	movs	r3, #1
 8015468:	e032      	b.n	80154d0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	7b1b      	ldrb	r3, [r3, #12]
 801546e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015470:	8a3b      	ldrh	r3, [r7, #16]
 8015472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015476:	2b00      	cmp	r3, #0
 8015478:	d00c      	beq.n	8015494 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	685a      	ldr	r2, [r3, #4]
 801547e:	68bb      	ldr	r3, [r7, #8]
 8015480:	425b      	negs	r3, r3
 8015482:	4413      	add	r3, r2
 8015484:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	3310      	adds	r3, #16
 801548a:	697a      	ldr	r2, [r7, #20]
 801548c:	429a      	cmp	r2, r3
 801548e:	d20d      	bcs.n	80154ac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015490:	2301      	movs	r3, #1
 8015492:	e01d      	b.n	80154d0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015494:	79fb      	ldrb	r3, [r7, #7]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d006      	beq.n	80154a8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	685a      	ldr	r2, [r3, #4]
 801549e:	68bb      	ldr	r3, [r7, #8]
 80154a0:	425b      	negs	r3, r3
 80154a2:	4413      	add	r3, r2
 80154a4:	617b      	str	r3, [r7, #20]
 80154a6:	e001      	b.n	80154ac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80154a8:	2301      	movs	r3, #1
 80154aa:	e011      	b.n	80154d0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	697a      	ldr	r2, [r7, #20]
 80154b0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	895a      	ldrh	r2, [r3, #10]
 80154b6:	8a7b      	ldrh	r3, [r7, #18]
 80154b8:	4413      	add	r3, r2
 80154ba:	b29a      	uxth	r2, r3
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	891a      	ldrh	r2, [r3, #8]
 80154c4:	8a7b      	ldrh	r3, [r7, #18]
 80154c6:	4413      	add	r3, r2
 80154c8:	b29a      	uxth	r2, r3
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	811a      	strh	r2, [r3, #8]


  return 0;
 80154ce:	2300      	movs	r3, #0
}
 80154d0:	4618      	mov	r0, r3
 80154d2:	3718      	adds	r7, #24
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	0802a7ac 	.word	0x0802a7ac
 80154dc:	0802a910 	.word	0x0802a910
 80154e0:	0802a80c 	.word	0x0802a80c

080154e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b082      	sub	sp, #8
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
 80154ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80154ee:	2200      	movs	r2, #0
 80154f0:	6839      	ldr	r1, [r7, #0]
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f7ff ff8e 	bl	8015414 <pbuf_add_header_impl>
 80154f8:	4603      	mov	r3, r0
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3708      	adds	r7, #8
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}
	...

08015504 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b084      	sub	sp, #16
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
 801550c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d106      	bne.n	8015522 <pbuf_remove_header+0x1e>
 8015514:	4b20      	ldr	r3, [pc, #128]	; (8015598 <pbuf_remove_header+0x94>)
 8015516:	f240 224b 	movw	r2, #587	; 0x24b
 801551a:	4920      	ldr	r1, [pc, #128]	; (801559c <pbuf_remove_header+0x98>)
 801551c:	4820      	ldr	r0, [pc, #128]	; (80155a0 <pbuf_remove_header+0x9c>)
 801551e:	f00f f977 	bl	8024810 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d003      	beq.n	8015530 <pbuf_remove_header+0x2c>
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801552e:	d301      	bcc.n	8015534 <pbuf_remove_header+0x30>
    return 1;
 8015530:	2301      	movs	r3, #1
 8015532:	e02c      	b.n	801558e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015534:	683b      	ldr	r3, [r7, #0]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d101      	bne.n	801553e <pbuf_remove_header+0x3a>
    return 0;
 801553a:	2300      	movs	r3, #0
 801553c:	e027      	b.n	801558e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	895b      	ldrh	r3, [r3, #10]
 8015546:	89fa      	ldrh	r2, [r7, #14]
 8015548:	429a      	cmp	r2, r3
 801554a:	d908      	bls.n	801555e <pbuf_remove_header+0x5a>
 801554c:	4b12      	ldr	r3, [pc, #72]	; (8015598 <pbuf_remove_header+0x94>)
 801554e:	f240 2255 	movw	r2, #597	; 0x255
 8015552:	4914      	ldr	r1, [pc, #80]	; (80155a4 <pbuf_remove_header+0xa0>)
 8015554:	4812      	ldr	r0, [pc, #72]	; (80155a0 <pbuf_remove_header+0x9c>)
 8015556:	f00f f95b 	bl	8024810 <iprintf>
 801555a:	2301      	movs	r3, #1
 801555c:	e017      	b.n	801558e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	685a      	ldr	r2, [r3, #4]
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	441a      	add	r2, r3
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	895a      	ldrh	r2, [r3, #10]
 8015574:	89fb      	ldrh	r3, [r7, #14]
 8015576:	1ad3      	subs	r3, r2, r3
 8015578:	b29a      	uxth	r2, r3
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	891a      	ldrh	r2, [r3, #8]
 8015582:	89fb      	ldrh	r3, [r7, #14]
 8015584:	1ad3      	subs	r3, r2, r3
 8015586:	b29a      	uxth	r2, r3
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801558c:	2300      	movs	r3, #0
}
 801558e:	4618      	mov	r0, r3
 8015590:	3710      	adds	r7, #16
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	0802a7ac 	.word	0x0802a7ac
 801559c:	0802a910 	.word	0x0802a910
 80155a0:	0802a80c 	.word	0x0802a80c
 80155a4:	0802a91c 	.word	0x0802a91c

080155a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	460b      	mov	r3, r1
 80155b2:	807b      	strh	r3, [r7, #2]
 80155b4:	4613      	mov	r3, r2
 80155b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80155b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	da08      	bge.n	80155d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80155c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80155c4:	425b      	negs	r3, r3
 80155c6:	4619      	mov	r1, r3
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f7ff ff9b 	bl	8015504 <pbuf_remove_header>
 80155ce:	4603      	mov	r3, r0
 80155d0:	e007      	b.n	80155e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80155d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80155d6:	787a      	ldrb	r2, [r7, #1]
 80155d8:	4619      	mov	r1, r3
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f7ff ff1a 	bl	8015414 <pbuf_add_header_impl>
 80155e0:	4603      	mov	r3, r0
  }
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3708      	adds	r7, #8
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}

080155ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80155ea:	b580      	push	{r7, lr}
 80155ec:	b082      	sub	sp, #8
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	6078      	str	r0, [r7, #4]
 80155f2:	460b      	mov	r3, r1
 80155f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80155f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80155fa:	2201      	movs	r2, #1
 80155fc:	4619      	mov	r1, r3
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f7ff ffd2 	bl	80155a8 <pbuf_header_impl>
 8015604:	4603      	mov	r3, r0
}
 8015606:	4618      	mov	r0, r3
 8015608:	3708      	adds	r7, #8
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
	...

08015610 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b088      	sub	sp, #32
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d10b      	bne.n	8015636 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d106      	bne.n	8015632 <pbuf_free+0x22>
 8015624:	4b3b      	ldr	r3, [pc, #236]	; (8015714 <pbuf_free+0x104>)
 8015626:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801562a:	493b      	ldr	r1, [pc, #236]	; (8015718 <pbuf_free+0x108>)
 801562c:	483b      	ldr	r0, [pc, #236]	; (801571c <pbuf_free+0x10c>)
 801562e:	f00f f8ef 	bl	8024810 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015632:	2300      	movs	r3, #0
 8015634:	e069      	b.n	801570a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015636:	2300      	movs	r3, #0
 8015638:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801563a:	e062      	b.n	8015702 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801563c:	f009 fbe0 	bl	801ee00 <sys_arch_protect>
 8015640:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	7b9b      	ldrb	r3, [r3, #14]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d106      	bne.n	8015658 <pbuf_free+0x48>
 801564a:	4b32      	ldr	r3, [pc, #200]	; (8015714 <pbuf_free+0x104>)
 801564c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015650:	4933      	ldr	r1, [pc, #204]	; (8015720 <pbuf_free+0x110>)
 8015652:	4832      	ldr	r0, [pc, #200]	; (801571c <pbuf_free+0x10c>)
 8015654:	f00f f8dc 	bl	8024810 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	7b9b      	ldrb	r3, [r3, #14]
 801565c:	3b01      	subs	r3, #1
 801565e:	b2da      	uxtb	r2, r3
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	739a      	strb	r2, [r3, #14]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	7b9b      	ldrb	r3, [r3, #14]
 8015668:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801566a:	69b8      	ldr	r0, [r7, #24]
 801566c:	f009 fbd6 	bl	801ee1c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015670:	7dfb      	ldrb	r3, [r7, #23]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d143      	bne.n	80156fe <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	7b1b      	ldrb	r3, [r3, #12]
 8015680:	f003 030f 	and.w	r3, r3, #15
 8015684:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	7b5b      	ldrb	r3, [r3, #13]
 801568a:	f003 0302 	and.w	r3, r3, #2
 801568e:	2b00      	cmp	r3, #0
 8015690:	d011      	beq.n	80156b6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	691b      	ldr	r3, [r3, #16]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d106      	bne.n	80156ac <pbuf_free+0x9c>
 801569e:	4b1d      	ldr	r3, [pc, #116]	; (8015714 <pbuf_free+0x104>)
 80156a0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80156a4:	491f      	ldr	r1, [pc, #124]	; (8015724 <pbuf_free+0x114>)
 80156a6:	481d      	ldr	r0, [pc, #116]	; (801571c <pbuf_free+0x10c>)
 80156a8:	f00f f8b2 	bl	8024810 <iprintf>
        pc->custom_free_function(p);
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	691b      	ldr	r3, [r3, #16]
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	4798      	blx	r3
 80156b4:	e01d      	b.n	80156f2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80156b6:	7bfb      	ldrb	r3, [r7, #15]
 80156b8:	2b02      	cmp	r3, #2
 80156ba:	d104      	bne.n	80156c6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80156bc:	6879      	ldr	r1, [r7, #4]
 80156be:	200c      	movs	r0, #12
 80156c0:	f7ff f902 	bl	80148c8 <memp_free>
 80156c4:	e015      	b.n	80156f2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80156c6:	7bfb      	ldrb	r3, [r7, #15]
 80156c8:	2b01      	cmp	r3, #1
 80156ca:	d104      	bne.n	80156d6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80156cc:	6879      	ldr	r1, [r7, #4]
 80156ce:	200b      	movs	r0, #11
 80156d0:	f7ff f8fa 	bl	80148c8 <memp_free>
 80156d4:	e00d      	b.n	80156f2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80156d6:	7bfb      	ldrb	r3, [r7, #15]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d103      	bne.n	80156e4 <pbuf_free+0xd4>
          mem_free(p);
 80156dc:	6878      	ldr	r0, [r7, #4]
 80156de:	f7fe fd3f 	bl	8014160 <mem_free>
 80156e2:	e006      	b.n	80156f2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80156e4:	4b0b      	ldr	r3, [pc, #44]	; (8015714 <pbuf_free+0x104>)
 80156e6:	f240 320f 	movw	r2, #783	; 0x30f
 80156ea:	490f      	ldr	r1, [pc, #60]	; (8015728 <pbuf_free+0x118>)
 80156ec:	480b      	ldr	r0, [pc, #44]	; (801571c <pbuf_free+0x10c>)
 80156ee:	f00f f88f 	bl	8024810 <iprintf>
        }
      }
      count++;
 80156f2:	7ffb      	ldrb	r3, [r7, #31]
 80156f4:	3301      	adds	r3, #1
 80156f6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	607b      	str	r3, [r7, #4]
 80156fc:	e001      	b.n	8015702 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80156fe:	2300      	movs	r3, #0
 8015700:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d199      	bne.n	801563c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015708:	7ffb      	ldrb	r3, [r7, #31]
}
 801570a:	4618      	mov	r0, r3
 801570c:	3720      	adds	r7, #32
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}
 8015712:	bf00      	nop
 8015714:	0802a7ac 	.word	0x0802a7ac
 8015718:	0802a910 	.word	0x0802a910
 801571c:	0802a80c 	.word	0x0802a80c
 8015720:	0802a93c 	.word	0x0802a93c
 8015724:	0802a954 	.word	0x0802a954
 8015728:	0802a978 	.word	0x0802a978

0801572c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801572c:	b480      	push	{r7}
 801572e:	b085      	sub	sp, #20
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015734:	2300      	movs	r3, #0
 8015736:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015738:	e005      	b.n	8015746 <pbuf_clen+0x1a>
    ++len;
 801573a:	89fb      	ldrh	r3, [r7, #14]
 801573c:	3301      	adds	r3, #1
 801573e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d1f6      	bne.n	801573a <pbuf_clen+0xe>
  }
  return len;
 801574c:	89fb      	ldrh	r3, [r7, #14]
}
 801574e:	4618      	mov	r0, r3
 8015750:	3714      	adds	r7, #20
 8015752:	46bd      	mov	sp, r7
 8015754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015758:	4770      	bx	lr
	...

0801575c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b084      	sub	sp, #16
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d016      	beq.n	8015798 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801576a:	f009 fb49 	bl	801ee00 <sys_arch_protect>
 801576e:	60f8      	str	r0, [r7, #12]
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	7b9b      	ldrb	r3, [r3, #14]
 8015774:	3301      	adds	r3, #1
 8015776:	b2da      	uxtb	r2, r3
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	739a      	strb	r2, [r3, #14]
 801577c:	68f8      	ldr	r0, [r7, #12]
 801577e:	f009 fb4d 	bl	801ee1c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	7b9b      	ldrb	r3, [r3, #14]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d106      	bne.n	8015798 <pbuf_ref+0x3c>
 801578a:	4b05      	ldr	r3, [pc, #20]	; (80157a0 <pbuf_ref+0x44>)
 801578c:	f240 3242 	movw	r2, #834	; 0x342
 8015790:	4904      	ldr	r1, [pc, #16]	; (80157a4 <pbuf_ref+0x48>)
 8015792:	4805      	ldr	r0, [pc, #20]	; (80157a8 <pbuf_ref+0x4c>)
 8015794:	f00f f83c 	bl	8024810 <iprintf>
  }
}
 8015798:	bf00      	nop
 801579a:	3710      	adds	r7, #16
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	0802a7ac 	.word	0x0802a7ac
 80157a4:	0802a98c 	.word	0x0802a98c
 80157a8:	0802a80c 	.word	0x0802a80c

080157ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b084      	sub	sp, #16
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
 80157b4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d002      	beq.n	80157c2 <pbuf_cat+0x16>
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d107      	bne.n	80157d2 <pbuf_cat+0x26>
 80157c2:	4b20      	ldr	r3, [pc, #128]	; (8015844 <pbuf_cat+0x98>)
 80157c4:	f240 3259 	movw	r2, #857	; 0x359
 80157c8:	491f      	ldr	r1, [pc, #124]	; (8015848 <pbuf_cat+0x9c>)
 80157ca:	4820      	ldr	r0, [pc, #128]	; (801584c <pbuf_cat+0xa0>)
 80157cc:	f00f f820 	bl	8024810 <iprintf>
 80157d0:	e034      	b.n	801583c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	60fb      	str	r3, [r7, #12]
 80157d6:	e00a      	b.n	80157ee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	891a      	ldrh	r2, [r3, #8]
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	891b      	ldrh	r3, [r3, #8]
 80157e0:	4413      	add	r3, r2
 80157e2:	b29a      	uxth	r2, r3
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	60fb      	str	r3, [r7, #12]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d1f0      	bne.n	80157d8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	891a      	ldrh	r2, [r3, #8]
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	895b      	ldrh	r3, [r3, #10]
 80157fe:	429a      	cmp	r2, r3
 8015800:	d006      	beq.n	8015810 <pbuf_cat+0x64>
 8015802:	4b10      	ldr	r3, [pc, #64]	; (8015844 <pbuf_cat+0x98>)
 8015804:	f240 3262 	movw	r2, #866	; 0x362
 8015808:	4911      	ldr	r1, [pc, #68]	; (8015850 <pbuf_cat+0xa4>)
 801580a:	4810      	ldr	r0, [pc, #64]	; (801584c <pbuf_cat+0xa0>)
 801580c:	f00f f800 	bl	8024810 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d006      	beq.n	8015826 <pbuf_cat+0x7a>
 8015818:	4b0a      	ldr	r3, [pc, #40]	; (8015844 <pbuf_cat+0x98>)
 801581a:	f240 3263 	movw	r2, #867	; 0x363
 801581e:	490d      	ldr	r1, [pc, #52]	; (8015854 <pbuf_cat+0xa8>)
 8015820:	480a      	ldr	r0, [pc, #40]	; (801584c <pbuf_cat+0xa0>)
 8015822:	f00e fff5 	bl	8024810 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	891a      	ldrh	r2, [r3, #8]
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	891b      	ldrh	r3, [r3, #8]
 801582e:	4413      	add	r3, r2
 8015830:	b29a      	uxth	r2, r3
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	683a      	ldr	r2, [r7, #0]
 801583a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801583c:	3710      	adds	r7, #16
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}
 8015842:	bf00      	nop
 8015844:	0802a7ac 	.word	0x0802a7ac
 8015848:	0802a9a0 	.word	0x0802a9a0
 801584c:	0802a80c 	.word	0x0802a80c
 8015850:	0802a9d8 	.word	0x0802a9d8
 8015854:	0802aa08 	.word	0x0802aa08

08015858 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b086      	sub	sp, #24
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015862:	2300      	movs	r3, #0
 8015864:	617b      	str	r3, [r7, #20]
 8015866:	2300      	movs	r3, #0
 8015868:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d008      	beq.n	8015882 <pbuf_copy+0x2a>
 8015870:	683b      	ldr	r3, [r7, #0]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d005      	beq.n	8015882 <pbuf_copy+0x2a>
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	891a      	ldrh	r2, [r3, #8]
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	891b      	ldrh	r3, [r3, #8]
 801587e:	429a      	cmp	r2, r3
 8015880:	d209      	bcs.n	8015896 <pbuf_copy+0x3e>
 8015882:	4b57      	ldr	r3, [pc, #348]	; (80159e0 <pbuf_copy+0x188>)
 8015884:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015888:	4956      	ldr	r1, [pc, #344]	; (80159e4 <pbuf_copy+0x18c>)
 801588a:	4857      	ldr	r0, [pc, #348]	; (80159e8 <pbuf_copy+0x190>)
 801588c:	f00e ffc0 	bl	8024810 <iprintf>
 8015890:	f06f 030f 	mvn.w	r3, #15
 8015894:	e09f      	b.n	80159d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	895b      	ldrh	r3, [r3, #10]
 801589a:	461a      	mov	r2, r3
 801589c:	697b      	ldr	r3, [r7, #20]
 801589e:	1ad2      	subs	r2, r2, r3
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	895b      	ldrh	r3, [r3, #10]
 80158a4:	4619      	mov	r1, r3
 80158a6:	693b      	ldr	r3, [r7, #16]
 80158a8:	1acb      	subs	r3, r1, r3
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d306      	bcc.n	80158bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	895b      	ldrh	r3, [r3, #10]
 80158b2:	461a      	mov	r2, r3
 80158b4:	693b      	ldr	r3, [r7, #16]
 80158b6:	1ad3      	subs	r3, r2, r3
 80158b8:	60fb      	str	r3, [r7, #12]
 80158ba:	e005      	b.n	80158c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	895b      	ldrh	r3, [r3, #10]
 80158c0:	461a      	mov	r2, r3
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	1ad3      	subs	r3, r2, r3
 80158c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	685a      	ldr	r2, [r3, #4]
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	18d0      	adds	r0, r2, r3
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	685a      	ldr	r2, [r3, #4]
 80158d4:	693b      	ldr	r3, [r7, #16]
 80158d6:	4413      	add	r3, r2
 80158d8:	68fa      	ldr	r2, [r7, #12]
 80158da:	4619      	mov	r1, r3
 80158dc:	f00e f859 	bl	8023992 <memcpy>
    offset_to += len;
 80158e0:	697a      	ldr	r2, [r7, #20]
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	4413      	add	r3, r2
 80158e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80158e8:	693a      	ldr	r2, [r7, #16]
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	4413      	add	r3, r2
 80158ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	895b      	ldrh	r3, [r3, #10]
 80158f4:	461a      	mov	r2, r3
 80158f6:	697b      	ldr	r3, [r7, #20]
 80158f8:	4293      	cmp	r3, r2
 80158fa:	d906      	bls.n	801590a <pbuf_copy+0xb2>
 80158fc:	4b38      	ldr	r3, [pc, #224]	; (80159e0 <pbuf_copy+0x188>)
 80158fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8015902:	493a      	ldr	r1, [pc, #232]	; (80159ec <pbuf_copy+0x194>)
 8015904:	4838      	ldr	r0, [pc, #224]	; (80159e8 <pbuf_copy+0x190>)
 8015906:	f00e ff83 	bl	8024810 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	895b      	ldrh	r3, [r3, #10]
 801590e:	461a      	mov	r2, r3
 8015910:	693b      	ldr	r3, [r7, #16]
 8015912:	4293      	cmp	r3, r2
 8015914:	d906      	bls.n	8015924 <pbuf_copy+0xcc>
 8015916:	4b32      	ldr	r3, [pc, #200]	; (80159e0 <pbuf_copy+0x188>)
 8015918:	f240 32da 	movw	r2, #986	; 0x3da
 801591c:	4934      	ldr	r1, [pc, #208]	; (80159f0 <pbuf_copy+0x198>)
 801591e:	4832      	ldr	r0, [pc, #200]	; (80159e8 <pbuf_copy+0x190>)
 8015920:	f00e ff76 	bl	8024810 <iprintf>
    if (offset_from >= p_from->len) {
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	895b      	ldrh	r3, [r3, #10]
 8015928:	461a      	mov	r2, r3
 801592a:	693b      	ldr	r3, [r7, #16]
 801592c:	4293      	cmp	r3, r2
 801592e:	d304      	bcc.n	801593a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015930:	2300      	movs	r3, #0
 8015932:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015934:	683b      	ldr	r3, [r7, #0]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	895b      	ldrh	r3, [r3, #10]
 801593e:	461a      	mov	r2, r3
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	4293      	cmp	r3, r2
 8015944:	d114      	bne.n	8015970 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015946:	2300      	movs	r3, #0
 8015948:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d10c      	bne.n	8015970 <pbuf_copy+0x118>
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d009      	beq.n	8015970 <pbuf_copy+0x118>
 801595c:	4b20      	ldr	r3, [pc, #128]	; (80159e0 <pbuf_copy+0x188>)
 801595e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8015962:	4924      	ldr	r1, [pc, #144]	; (80159f4 <pbuf_copy+0x19c>)
 8015964:	4820      	ldr	r0, [pc, #128]	; (80159e8 <pbuf_copy+0x190>)
 8015966:	f00e ff53 	bl	8024810 <iprintf>
 801596a:	f06f 030f 	mvn.w	r3, #15
 801596e:	e032      	b.n	80159d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d013      	beq.n	801599e <pbuf_copy+0x146>
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	895a      	ldrh	r2, [r3, #10]
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	891b      	ldrh	r3, [r3, #8]
 801597e:	429a      	cmp	r2, r3
 8015980:	d10d      	bne.n	801599e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d009      	beq.n	801599e <pbuf_copy+0x146>
 801598a:	4b15      	ldr	r3, [pc, #84]	; (80159e0 <pbuf_copy+0x188>)
 801598c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8015990:	4919      	ldr	r1, [pc, #100]	; (80159f8 <pbuf_copy+0x1a0>)
 8015992:	4815      	ldr	r0, [pc, #84]	; (80159e8 <pbuf_copy+0x190>)
 8015994:	f00e ff3c 	bl	8024810 <iprintf>
 8015998:	f06f 0305 	mvn.w	r3, #5
 801599c:	e01b      	b.n	80159d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d013      	beq.n	80159cc <pbuf_copy+0x174>
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	895a      	ldrh	r2, [r3, #10]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	891b      	ldrh	r3, [r3, #8]
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d10d      	bne.n	80159cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d009      	beq.n	80159cc <pbuf_copy+0x174>
 80159b8:	4b09      	ldr	r3, [pc, #36]	; (80159e0 <pbuf_copy+0x188>)
 80159ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80159be:	490e      	ldr	r1, [pc, #56]	; (80159f8 <pbuf_copy+0x1a0>)
 80159c0:	4809      	ldr	r0, [pc, #36]	; (80159e8 <pbuf_copy+0x190>)
 80159c2:	f00e ff25 	bl	8024810 <iprintf>
 80159c6:	f06f 0305 	mvn.w	r3, #5
 80159ca:	e004      	b.n	80159d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	f47f af61 	bne.w	8015896 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80159d4:	2300      	movs	r3, #0
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	3718      	adds	r7, #24
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}
 80159de:	bf00      	nop
 80159e0:	0802a7ac 	.word	0x0802a7ac
 80159e4:	0802aa54 	.word	0x0802aa54
 80159e8:	0802a80c 	.word	0x0802a80c
 80159ec:	0802aa84 	.word	0x0802aa84
 80159f0:	0802aa9c 	.word	0x0802aa9c
 80159f4:	0802aab8 	.word	0x0802aab8
 80159f8:	0802aac8 	.word	0x0802aac8

080159fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b088      	sub	sp, #32
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	60f8      	str	r0, [r7, #12]
 8015a04:	60b9      	str	r1, [r7, #8]
 8015a06:	4611      	mov	r1, r2
 8015a08:	461a      	mov	r2, r3
 8015a0a:	460b      	mov	r3, r1
 8015a0c:	80fb      	strh	r3, [r7, #6]
 8015a0e:	4613      	mov	r3, r2
 8015a10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8015a12:	2300      	movs	r3, #0
 8015a14:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015a16:	2300      	movs	r3, #0
 8015a18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d108      	bne.n	8015a32 <pbuf_copy_partial+0x36>
 8015a20:	4b2b      	ldr	r3, [pc, #172]	; (8015ad0 <pbuf_copy_partial+0xd4>)
 8015a22:	f240 420a 	movw	r2, #1034	; 0x40a
 8015a26:	492b      	ldr	r1, [pc, #172]	; (8015ad4 <pbuf_copy_partial+0xd8>)
 8015a28:	482b      	ldr	r0, [pc, #172]	; (8015ad8 <pbuf_copy_partial+0xdc>)
 8015a2a:	f00e fef1 	bl	8024810 <iprintf>
 8015a2e:	2300      	movs	r3, #0
 8015a30:	e04a      	b.n	8015ac8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d108      	bne.n	8015a4a <pbuf_copy_partial+0x4e>
 8015a38:	4b25      	ldr	r3, [pc, #148]	; (8015ad0 <pbuf_copy_partial+0xd4>)
 8015a3a:	f240 420b 	movw	r2, #1035	; 0x40b
 8015a3e:	4927      	ldr	r1, [pc, #156]	; (8015adc <pbuf_copy_partial+0xe0>)
 8015a40:	4825      	ldr	r0, [pc, #148]	; (8015ad8 <pbuf_copy_partial+0xdc>)
 8015a42:	f00e fee5 	bl	8024810 <iprintf>
 8015a46:	2300      	movs	r3, #0
 8015a48:	e03e      	b.n	8015ac8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	61fb      	str	r3, [r7, #28]
 8015a4e:	e034      	b.n	8015aba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8015a50:	88bb      	ldrh	r3, [r7, #4]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d00a      	beq.n	8015a6c <pbuf_copy_partial+0x70>
 8015a56:	69fb      	ldr	r3, [r7, #28]
 8015a58:	895b      	ldrh	r3, [r3, #10]
 8015a5a:	88ba      	ldrh	r2, [r7, #4]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d305      	bcc.n	8015a6c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8015a60:	69fb      	ldr	r3, [r7, #28]
 8015a62:	895b      	ldrh	r3, [r3, #10]
 8015a64:	88ba      	ldrh	r2, [r7, #4]
 8015a66:	1ad3      	subs	r3, r2, r3
 8015a68:	80bb      	strh	r3, [r7, #4]
 8015a6a:	e023      	b.n	8015ab4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015a6c:	69fb      	ldr	r3, [r7, #28]
 8015a6e:	895a      	ldrh	r2, [r3, #10]
 8015a70:	88bb      	ldrh	r3, [r7, #4]
 8015a72:	1ad3      	subs	r3, r2, r3
 8015a74:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015a76:	8b3a      	ldrh	r2, [r7, #24]
 8015a78:	88fb      	ldrh	r3, [r7, #6]
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d901      	bls.n	8015a82 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8015a7e:	88fb      	ldrh	r3, [r7, #6]
 8015a80:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8015a82:	8b7b      	ldrh	r3, [r7, #26]
 8015a84:	68ba      	ldr	r2, [r7, #8]
 8015a86:	18d0      	adds	r0, r2, r3
 8015a88:	69fb      	ldr	r3, [r7, #28]
 8015a8a:	685a      	ldr	r2, [r3, #4]
 8015a8c:	88bb      	ldrh	r3, [r7, #4]
 8015a8e:	4413      	add	r3, r2
 8015a90:	8b3a      	ldrh	r2, [r7, #24]
 8015a92:	4619      	mov	r1, r3
 8015a94:	f00d ff7d 	bl	8023992 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015a98:	8afa      	ldrh	r2, [r7, #22]
 8015a9a:	8b3b      	ldrh	r3, [r7, #24]
 8015a9c:	4413      	add	r3, r2
 8015a9e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8015aa0:	8b7a      	ldrh	r2, [r7, #26]
 8015aa2:	8b3b      	ldrh	r3, [r7, #24]
 8015aa4:	4413      	add	r3, r2
 8015aa6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015aa8:	88fa      	ldrh	r2, [r7, #6]
 8015aaa:	8b3b      	ldrh	r3, [r7, #24]
 8015aac:	1ad3      	subs	r3, r2, r3
 8015aae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015ab4:	69fb      	ldr	r3, [r7, #28]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	61fb      	str	r3, [r7, #28]
 8015aba:	88fb      	ldrh	r3, [r7, #6]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d002      	beq.n	8015ac6 <pbuf_copy_partial+0xca>
 8015ac0:	69fb      	ldr	r3, [r7, #28]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d1c4      	bne.n	8015a50 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015ac6:	8afb      	ldrh	r3, [r7, #22]
}
 8015ac8:	4618      	mov	r0, r3
 8015aca:	3720      	adds	r7, #32
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	0802a7ac 	.word	0x0802a7ac
 8015ad4:	0802aaf4 	.word	0x0802aaf4
 8015ad8:	0802a80c 	.word	0x0802a80c
 8015adc:	0802ab14 	.word	0x0802ab14

08015ae0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b084      	sub	sp, #16
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	603a      	str	r2, [r7, #0]
 8015aea:	71fb      	strb	r3, [r7, #7]
 8015aec:	460b      	mov	r3, r1
 8015aee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	8919      	ldrh	r1, [r3, #8]
 8015af4:	88ba      	ldrh	r2, [r7, #4]
 8015af6:	79fb      	ldrb	r3, [r7, #7]
 8015af8:	4618      	mov	r0, r3
 8015afa:	f7ff faa5 	bl	8015048 <pbuf_alloc>
 8015afe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d101      	bne.n	8015b0a <pbuf_clone+0x2a>
    return NULL;
 8015b06:	2300      	movs	r3, #0
 8015b08:	e011      	b.n	8015b2e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015b0a:	6839      	ldr	r1, [r7, #0]
 8015b0c:	68f8      	ldr	r0, [r7, #12]
 8015b0e:	f7ff fea3 	bl	8015858 <pbuf_copy>
 8015b12:	4603      	mov	r3, r0
 8015b14:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8015b16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d006      	beq.n	8015b2c <pbuf_clone+0x4c>
 8015b1e:	4b06      	ldr	r3, [pc, #24]	; (8015b38 <pbuf_clone+0x58>)
 8015b20:	f240 5224 	movw	r2, #1316	; 0x524
 8015b24:	4905      	ldr	r1, [pc, #20]	; (8015b3c <pbuf_clone+0x5c>)
 8015b26:	4806      	ldr	r0, [pc, #24]	; (8015b40 <pbuf_clone+0x60>)
 8015b28:	f00e fe72 	bl	8024810 <iprintf>
  return q;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	0802a7ac 	.word	0x0802a7ac
 8015b3c:	0802ac20 	.word	0x0802ac20
 8015b40:	0802a80c 	.word	0x0802a80c

08015b44 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015b48:	f00e fe7a 	bl	8024840 <rand>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	b29b      	uxth	r3, r3
 8015b50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015b54:	b29b      	uxth	r3, r3
 8015b56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015b5a:	b29a      	uxth	r2, r3
 8015b5c:	4b01      	ldr	r3, [pc, #4]	; (8015b64 <tcp_init+0x20>)
 8015b5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015b60:	bf00      	nop
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	200000f0 	.word	0x200000f0

08015b68 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	7d1b      	ldrb	r3, [r3, #20]
 8015b74:	2b01      	cmp	r3, #1
 8015b76:	d105      	bne.n	8015b84 <tcp_free+0x1c>
 8015b78:	4b06      	ldr	r3, [pc, #24]	; (8015b94 <tcp_free+0x2c>)
 8015b7a:	22d4      	movs	r2, #212	; 0xd4
 8015b7c:	4906      	ldr	r1, [pc, #24]	; (8015b98 <tcp_free+0x30>)
 8015b7e:	4807      	ldr	r0, [pc, #28]	; (8015b9c <tcp_free+0x34>)
 8015b80:	f00e fe46 	bl	8024810 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8015b84:	6879      	ldr	r1, [r7, #4]
 8015b86:	2001      	movs	r0, #1
 8015b88:	f7fe fe9e 	bl	80148c8 <memp_free>
}
 8015b8c:	bf00      	nop
 8015b8e:	3708      	adds	r7, #8
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}
 8015b94:	0802acac 	.word	0x0802acac
 8015b98:	0802acdc 	.word	0x0802acdc
 8015b9c:	0802acf0 	.word	0x0802acf0

08015ba0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	7d1b      	ldrb	r3, [r3, #20]
 8015bac:	2b01      	cmp	r3, #1
 8015bae:	d105      	bne.n	8015bbc <tcp_free_listen+0x1c>
 8015bb0:	4b06      	ldr	r3, [pc, #24]	; (8015bcc <tcp_free_listen+0x2c>)
 8015bb2:	22df      	movs	r2, #223	; 0xdf
 8015bb4:	4906      	ldr	r1, [pc, #24]	; (8015bd0 <tcp_free_listen+0x30>)
 8015bb6:	4807      	ldr	r0, [pc, #28]	; (8015bd4 <tcp_free_listen+0x34>)
 8015bb8:	f00e fe2a 	bl	8024810 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015bbc:	6879      	ldr	r1, [r7, #4]
 8015bbe:	2002      	movs	r0, #2
 8015bc0:	f7fe fe82 	bl	80148c8 <memp_free>
}
 8015bc4:	bf00      	nop
 8015bc6:	3708      	adds	r7, #8
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}
 8015bcc:	0802acac 	.word	0x0802acac
 8015bd0:	0802ad18 	.word	0x0802ad18
 8015bd4:	0802acf0 	.word	0x0802acf0

08015bd8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015bdc:	f001 f8a6 	bl	8016d2c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015be0:	4b07      	ldr	r3, [pc, #28]	; (8015c00 <tcp_tmr+0x28>)
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	3301      	adds	r3, #1
 8015be6:	b2da      	uxtb	r2, r3
 8015be8:	4b05      	ldr	r3, [pc, #20]	; (8015c00 <tcp_tmr+0x28>)
 8015bea:	701a      	strb	r2, [r3, #0]
 8015bec:	4b04      	ldr	r3, [pc, #16]	; (8015c00 <tcp_tmr+0x28>)
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	f003 0301 	and.w	r3, r3, #1
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d001      	beq.n	8015bfc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015bf8:	f000 fd58 	bl	80166ac <tcp_slowtmr>
  }
}
 8015bfc:	bf00      	nop
 8015bfe:	bd80      	pop	{r7, pc}
 8015c00:	2001aced 	.word	0x2001aced

08015c04 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b084      	sub	sp, #16
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d105      	bne.n	8015c20 <tcp_remove_listener+0x1c>
 8015c14:	4b0d      	ldr	r3, [pc, #52]	; (8015c4c <tcp_remove_listener+0x48>)
 8015c16:	22ff      	movs	r2, #255	; 0xff
 8015c18:	490d      	ldr	r1, [pc, #52]	; (8015c50 <tcp_remove_listener+0x4c>)
 8015c1a:	480e      	ldr	r0, [pc, #56]	; (8015c54 <tcp_remove_listener+0x50>)
 8015c1c:	f00e fdf8 	bl	8024810 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	60fb      	str	r3, [r7, #12]
 8015c24:	e00a      	b.n	8015c3c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015c2a:	683a      	ldr	r2, [r7, #0]
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	d102      	bne.n	8015c36 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2200      	movs	r2, #0
 8015c34:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	68db      	ldr	r3, [r3, #12]
 8015c3a:	60fb      	str	r3, [r7, #12]
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d1f1      	bne.n	8015c26 <tcp_remove_listener+0x22>
    }
  }
}
 8015c42:	bf00      	nop
 8015c44:	bf00      	nop
 8015c46:	3710      	adds	r7, #16
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}
 8015c4c:	0802acac 	.word	0x0802acac
 8015c50:	0802ad34 	.word	0x0802ad34
 8015c54:	0802acf0 	.word	0x0802acf0

08015c58 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b084      	sub	sp, #16
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d106      	bne.n	8015c74 <tcp_listen_closed+0x1c>
 8015c66:	4b14      	ldr	r3, [pc, #80]	; (8015cb8 <tcp_listen_closed+0x60>)
 8015c68:	f240 1211 	movw	r2, #273	; 0x111
 8015c6c:	4913      	ldr	r1, [pc, #76]	; (8015cbc <tcp_listen_closed+0x64>)
 8015c6e:	4814      	ldr	r0, [pc, #80]	; (8015cc0 <tcp_listen_closed+0x68>)
 8015c70:	f00e fdce 	bl	8024810 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	7d1b      	ldrb	r3, [r3, #20]
 8015c78:	2b01      	cmp	r3, #1
 8015c7a:	d006      	beq.n	8015c8a <tcp_listen_closed+0x32>
 8015c7c:	4b0e      	ldr	r3, [pc, #56]	; (8015cb8 <tcp_listen_closed+0x60>)
 8015c7e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015c82:	4910      	ldr	r1, [pc, #64]	; (8015cc4 <tcp_listen_closed+0x6c>)
 8015c84:	480e      	ldr	r0, [pc, #56]	; (8015cc0 <tcp_listen_closed+0x68>)
 8015c86:	f00e fdc3 	bl	8024810 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015c8a:	2301      	movs	r3, #1
 8015c8c:	60fb      	str	r3, [r7, #12]
 8015c8e:	e00b      	b.n	8015ca8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015c90:	4a0d      	ldr	r2, [pc, #52]	; (8015cc8 <tcp_listen_closed+0x70>)
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	6879      	ldr	r1, [r7, #4]
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7ff ffb1 	bl	8015c04 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	3301      	adds	r3, #1
 8015ca6:	60fb      	str	r3, [r7, #12]
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	2b03      	cmp	r3, #3
 8015cac:	d9f0      	bls.n	8015c90 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015cae:	bf00      	nop
 8015cb0:	bf00      	nop
 8015cb2:	3710      	adds	r7, #16
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	0802acac 	.word	0x0802acac
 8015cbc:	0802ad5c 	.word	0x0802ad5c
 8015cc0:	0802acf0 	.word	0x0802acf0
 8015cc4:	0802ad68 	.word	0x0802ad68
 8015cc8:	0802d4ec 	.word	0x0802d4ec

08015ccc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015ccc:	b5b0      	push	{r4, r5, r7, lr}
 8015cce:	b088      	sub	sp, #32
 8015cd0:	af04      	add	r7, sp, #16
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	460b      	mov	r3, r1
 8015cd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d106      	bne.n	8015cec <tcp_close_shutdown+0x20>
 8015cde:	4b63      	ldr	r3, [pc, #396]	; (8015e6c <tcp_close_shutdown+0x1a0>)
 8015ce0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8015ce4:	4962      	ldr	r1, [pc, #392]	; (8015e70 <tcp_close_shutdown+0x1a4>)
 8015ce6:	4863      	ldr	r0, [pc, #396]	; (8015e74 <tcp_close_shutdown+0x1a8>)
 8015ce8:	f00e fd92 	bl	8024810 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015cec:	78fb      	ldrb	r3, [r7, #3]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d066      	beq.n	8015dc0 <tcp_close_shutdown+0xf4>
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	7d1b      	ldrb	r3, [r3, #20]
 8015cf6:	2b04      	cmp	r3, #4
 8015cf8:	d003      	beq.n	8015d02 <tcp_close_shutdown+0x36>
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	7d1b      	ldrb	r3, [r3, #20]
 8015cfe:	2b07      	cmp	r3, #7
 8015d00:	d15e      	bne.n	8015dc0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d104      	bne.n	8015d14 <tcp_close_shutdown+0x48>
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d0e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015d12:	d055      	beq.n	8015dc0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	8b5b      	ldrh	r3, [r3, #26]
 8015d18:	f003 0310 	and.w	r3, r3, #16
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d106      	bne.n	8015d2e <tcp_close_shutdown+0x62>
 8015d20:	4b52      	ldr	r3, [pc, #328]	; (8015e6c <tcp_close_shutdown+0x1a0>)
 8015d22:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8015d26:	4954      	ldr	r1, [pc, #336]	; (8015e78 <tcp_close_shutdown+0x1ac>)
 8015d28:	4852      	ldr	r0, [pc, #328]	; (8015e74 <tcp_close_shutdown+0x1a8>)
 8015d2a:	f00e fd71 	bl	8024810 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015d36:	687d      	ldr	r5, [r7, #4]
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	3304      	adds	r3, #4
 8015d3c:	687a      	ldr	r2, [r7, #4]
 8015d3e:	8ad2      	ldrh	r2, [r2, #22]
 8015d40:	6879      	ldr	r1, [r7, #4]
 8015d42:	8b09      	ldrh	r1, [r1, #24]
 8015d44:	9102      	str	r1, [sp, #8]
 8015d46:	9201      	str	r2, [sp, #4]
 8015d48:	9300      	str	r3, [sp, #0]
 8015d4a:	462b      	mov	r3, r5
 8015d4c:	4622      	mov	r2, r4
 8015d4e:	4601      	mov	r1, r0
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f005 fdbb 	bl	801b8cc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8015d56:	6878      	ldr	r0, [r7, #4]
 8015d58:	f001 fb98 	bl	801748c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015d5c:	4b47      	ldr	r3, [pc, #284]	; (8015e7c <tcp_close_shutdown+0x1b0>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	687a      	ldr	r2, [r7, #4]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d105      	bne.n	8015d72 <tcp_close_shutdown+0xa6>
 8015d66:	4b45      	ldr	r3, [pc, #276]	; (8015e7c <tcp_close_shutdown+0x1b0>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	68db      	ldr	r3, [r3, #12]
 8015d6c:	4a43      	ldr	r2, [pc, #268]	; (8015e7c <tcp_close_shutdown+0x1b0>)
 8015d6e:	6013      	str	r3, [r2, #0]
 8015d70:	e013      	b.n	8015d9a <tcp_close_shutdown+0xce>
 8015d72:	4b42      	ldr	r3, [pc, #264]	; (8015e7c <tcp_close_shutdown+0x1b0>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	60fb      	str	r3, [r7, #12]
 8015d78:	e00c      	b.n	8015d94 <tcp_close_shutdown+0xc8>
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	687a      	ldr	r2, [r7, #4]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d104      	bne.n	8015d8e <tcp_close_shutdown+0xc2>
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	68da      	ldr	r2, [r3, #12]
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	60da      	str	r2, [r3, #12]
 8015d8c:	e005      	b.n	8015d9a <tcp_close_shutdown+0xce>
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	68db      	ldr	r3, [r3, #12]
 8015d92:	60fb      	str	r3, [r7, #12]
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d1ef      	bne.n	8015d7a <tcp_close_shutdown+0xae>
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	60da      	str	r2, [r3, #12]
 8015da0:	4b37      	ldr	r3, [pc, #220]	; (8015e80 <tcp_close_shutdown+0x1b4>)
 8015da2:	2201      	movs	r2, #1
 8015da4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8015da6:	4b37      	ldr	r3, [pc, #220]	; (8015e84 <tcp_close_shutdown+0x1b8>)
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	687a      	ldr	r2, [r7, #4]
 8015dac:	429a      	cmp	r2, r3
 8015dae:	d102      	bne.n	8015db6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015db0:	f004 f830 	bl	8019e14 <tcp_trigger_input_pcb_close>
 8015db4:	e002      	b.n	8015dbc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f7ff fed6 	bl	8015b68 <tcp_free>
      }
      return ERR_OK;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	e050      	b.n	8015e62 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	7d1b      	ldrb	r3, [r3, #20]
 8015dc4:	2b02      	cmp	r3, #2
 8015dc6:	d03b      	beq.n	8015e40 <tcp_close_shutdown+0x174>
 8015dc8:	2b02      	cmp	r3, #2
 8015dca:	dc44      	bgt.n	8015e56 <tcp_close_shutdown+0x18a>
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d002      	beq.n	8015dd6 <tcp_close_shutdown+0x10a>
 8015dd0:	2b01      	cmp	r3, #1
 8015dd2:	d02a      	beq.n	8015e2a <tcp_close_shutdown+0x15e>
 8015dd4:	e03f      	b.n	8015e56 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	8adb      	ldrh	r3, [r3, #22]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d021      	beq.n	8015e22 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015dde:	4b2a      	ldr	r3, [pc, #168]	; (8015e88 <tcp_close_shutdown+0x1bc>)
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	687a      	ldr	r2, [r7, #4]
 8015de4:	429a      	cmp	r2, r3
 8015de6:	d105      	bne.n	8015df4 <tcp_close_shutdown+0x128>
 8015de8:	4b27      	ldr	r3, [pc, #156]	; (8015e88 <tcp_close_shutdown+0x1bc>)
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	68db      	ldr	r3, [r3, #12]
 8015dee:	4a26      	ldr	r2, [pc, #152]	; (8015e88 <tcp_close_shutdown+0x1bc>)
 8015df0:	6013      	str	r3, [r2, #0]
 8015df2:	e013      	b.n	8015e1c <tcp_close_shutdown+0x150>
 8015df4:	4b24      	ldr	r3, [pc, #144]	; (8015e88 <tcp_close_shutdown+0x1bc>)
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	60bb      	str	r3, [r7, #8]
 8015dfa:	e00c      	b.n	8015e16 <tcp_close_shutdown+0x14a>
 8015dfc:	68bb      	ldr	r3, [r7, #8]
 8015dfe:	68db      	ldr	r3, [r3, #12]
 8015e00:	687a      	ldr	r2, [r7, #4]
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d104      	bne.n	8015e10 <tcp_close_shutdown+0x144>
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	68da      	ldr	r2, [r3, #12]
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	60da      	str	r2, [r3, #12]
 8015e0e:	e005      	b.n	8015e1c <tcp_close_shutdown+0x150>
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	68db      	ldr	r3, [r3, #12]
 8015e14:	60bb      	str	r3, [r7, #8]
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d1ef      	bne.n	8015dfc <tcp_close_shutdown+0x130>
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2200      	movs	r2, #0
 8015e20:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f7ff fea0 	bl	8015b68 <tcp_free>
      break;
 8015e28:	e01a      	b.n	8015e60 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f7ff ff14 	bl	8015c58 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015e30:	6879      	ldr	r1, [r7, #4]
 8015e32:	4816      	ldr	r0, [pc, #88]	; (8015e8c <tcp_close_shutdown+0x1c0>)
 8015e34:	f001 fb7a 	bl	801752c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f7ff feb1 	bl	8015ba0 <tcp_free_listen>
      break;
 8015e3e:	e00f      	b.n	8015e60 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015e40:	6879      	ldr	r1, [r7, #4]
 8015e42:	480e      	ldr	r0, [pc, #56]	; (8015e7c <tcp_close_shutdown+0x1b0>)
 8015e44:	f001 fb72 	bl	801752c <tcp_pcb_remove>
 8015e48:	4b0d      	ldr	r3, [pc, #52]	; (8015e80 <tcp_close_shutdown+0x1b4>)
 8015e4a:	2201      	movs	r2, #1
 8015e4c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f7ff fe8a 	bl	8015b68 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015e54:	e004      	b.n	8015e60 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f000 f81a 	bl	8015e90 <tcp_close_shutdown_fin>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	e000      	b.n	8015e62 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8015e60:	2300      	movs	r3, #0
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3710      	adds	r7, #16
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bdb0      	pop	{r4, r5, r7, pc}
 8015e6a:	bf00      	nop
 8015e6c:	0802acac 	.word	0x0802acac
 8015e70:	0802ad80 	.word	0x0802ad80
 8015e74:	0802acf0 	.word	0x0802acf0
 8015e78:	0802ada0 	.word	0x0802ada0
 8015e7c:	2001ace4 	.word	0x2001ace4
 8015e80:	2001acec 	.word	0x2001acec
 8015e84:	2001ad24 	.word	0x2001ad24
 8015e88:	2001acdc 	.word	0x2001acdc
 8015e8c:	2001ace0 	.word	0x2001ace0

08015e90 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b084      	sub	sp, #16
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d106      	bne.n	8015eac <tcp_close_shutdown_fin+0x1c>
 8015e9e:	4b2e      	ldr	r3, [pc, #184]	; (8015f58 <tcp_close_shutdown_fin+0xc8>)
 8015ea0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8015ea4:	492d      	ldr	r1, [pc, #180]	; (8015f5c <tcp_close_shutdown_fin+0xcc>)
 8015ea6:	482e      	ldr	r0, [pc, #184]	; (8015f60 <tcp_close_shutdown_fin+0xd0>)
 8015ea8:	f00e fcb2 	bl	8024810 <iprintf>

  switch (pcb->state) {
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	7d1b      	ldrb	r3, [r3, #20]
 8015eb0:	2b07      	cmp	r3, #7
 8015eb2:	d020      	beq.n	8015ef6 <tcp_close_shutdown_fin+0x66>
 8015eb4:	2b07      	cmp	r3, #7
 8015eb6:	dc2b      	bgt.n	8015f10 <tcp_close_shutdown_fin+0x80>
 8015eb8:	2b03      	cmp	r3, #3
 8015eba:	d002      	beq.n	8015ec2 <tcp_close_shutdown_fin+0x32>
 8015ebc:	2b04      	cmp	r3, #4
 8015ebe:	d00d      	beq.n	8015edc <tcp_close_shutdown_fin+0x4c>
 8015ec0:	e026      	b.n	8015f10 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f004 fe10 	bl	801aae8 <tcp_send_fin>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d11f      	bne.n	8015f14 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2205      	movs	r2, #5
 8015ed8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015eda:	e01b      	b.n	8015f14 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015edc:	6878      	ldr	r0, [r7, #4]
 8015ede:	f004 fe03 	bl	801aae8 <tcp_send_fin>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d114      	bne.n	8015f18 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	2205      	movs	r2, #5
 8015ef2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015ef4:	e010      	b.n	8015f18 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f004 fdf6 	bl	801aae8 <tcp_send_fin>
 8015efc:	4603      	mov	r3, r0
 8015efe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d109      	bne.n	8015f1c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2209      	movs	r2, #9
 8015f0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015f0e:	e005      	b.n	8015f1c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015f10:	2300      	movs	r3, #0
 8015f12:	e01c      	b.n	8015f4e <tcp_close_shutdown_fin+0xbe>
      break;
 8015f14:	bf00      	nop
 8015f16:	e002      	b.n	8015f1e <tcp_close_shutdown_fin+0x8e>
      break;
 8015f18:	bf00      	nop
 8015f1a:	e000      	b.n	8015f1e <tcp_close_shutdown_fin+0x8e>
      break;
 8015f1c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d103      	bne.n	8015f2e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8015f26:	6878      	ldr	r0, [r7, #4]
 8015f28:	f004 ff1c 	bl	801ad64 <tcp_output>
 8015f2c:	e00d      	b.n	8015f4a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f36:	d108      	bne.n	8015f4a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	8b5b      	ldrh	r3, [r3, #26]
 8015f3c:	f043 0308 	orr.w	r3, r3, #8
 8015f40:	b29a      	uxth	r2, r3
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015f46:	2300      	movs	r3, #0
 8015f48:	e001      	b.n	8015f4e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8015f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f4e:	4618      	mov	r0, r3
 8015f50:	3710      	adds	r7, #16
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}
 8015f56:	bf00      	nop
 8015f58:	0802acac 	.word	0x0802acac
 8015f5c:	0802ad5c 	.word	0x0802ad5c
 8015f60:	0802acf0 	.word	0x0802acf0

08015f64 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d109      	bne.n	8015f86 <tcp_close+0x22>
 8015f72:	4b0f      	ldr	r3, [pc, #60]	; (8015fb0 <tcp_close+0x4c>)
 8015f74:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8015f78:	490e      	ldr	r1, [pc, #56]	; (8015fb4 <tcp_close+0x50>)
 8015f7a:	480f      	ldr	r0, [pc, #60]	; (8015fb8 <tcp_close+0x54>)
 8015f7c:	f00e fc48 	bl	8024810 <iprintf>
 8015f80:	f06f 030f 	mvn.w	r3, #15
 8015f84:	e00f      	b.n	8015fa6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	7d1b      	ldrb	r3, [r3, #20]
 8015f8a:	2b01      	cmp	r3, #1
 8015f8c:	d006      	beq.n	8015f9c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	8b5b      	ldrh	r3, [r3, #26]
 8015f92:	f043 0310 	orr.w	r3, r3, #16
 8015f96:	b29a      	uxth	r2, r3
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015f9c:	2101      	movs	r1, #1
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	f7ff fe94 	bl	8015ccc <tcp_close_shutdown>
 8015fa4:	4603      	mov	r3, r0
}
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	3708      	adds	r7, #8
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}
 8015fae:	bf00      	nop
 8015fb0:	0802acac 	.word	0x0802acac
 8015fb4:	0802adbc 	.word	0x0802adbc
 8015fb8:	0802acf0 	.word	0x0802acf0

08015fbc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b084      	sub	sp, #16
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d109      	bne.n	8015fe2 <tcp_shutdown+0x26>
 8015fce:	4b26      	ldr	r3, [pc, #152]	; (8016068 <tcp_shutdown+0xac>)
 8015fd0:	f240 2207 	movw	r2, #519	; 0x207
 8015fd4:	4925      	ldr	r1, [pc, #148]	; (801606c <tcp_shutdown+0xb0>)
 8015fd6:	4826      	ldr	r0, [pc, #152]	; (8016070 <tcp_shutdown+0xb4>)
 8015fd8:	f00e fc1a 	bl	8024810 <iprintf>
 8015fdc:	f06f 030f 	mvn.w	r3, #15
 8015fe0:	e03d      	b.n	801605e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	7d1b      	ldrb	r3, [r3, #20]
 8015fe6:	2b01      	cmp	r3, #1
 8015fe8:	d102      	bne.n	8015ff0 <tcp_shutdown+0x34>
    return ERR_CONN;
 8015fea:	f06f 030a 	mvn.w	r3, #10
 8015fee:	e036      	b.n	801605e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015ff0:	68bb      	ldr	r3, [r7, #8]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d01b      	beq.n	801602e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	8b5b      	ldrh	r3, [r3, #26]
 8015ffa:	f043 0310 	orr.w	r3, r3, #16
 8015ffe:	b29a      	uxth	r2, r3
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d005      	beq.n	8016016 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801600a:	2101      	movs	r1, #1
 801600c:	68f8      	ldr	r0, [r7, #12]
 801600e:	f7ff fe5d 	bl	8015ccc <tcp_close_shutdown>
 8016012:	4603      	mov	r3, r0
 8016014:	e023      	b.n	801605e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801601a:	2b00      	cmp	r3, #0
 801601c:	d007      	beq.n	801602e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016022:	4618      	mov	r0, r3
 8016024:	f7ff faf4 	bl	8015610 <pbuf_free>
      pcb->refused_data = NULL;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	2200      	movs	r2, #0
 801602c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d013      	beq.n	801605c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	7d1b      	ldrb	r3, [r3, #20]
 8016038:	2b04      	cmp	r3, #4
 801603a:	dc02      	bgt.n	8016042 <tcp_shutdown+0x86>
 801603c:	2b03      	cmp	r3, #3
 801603e:	da02      	bge.n	8016046 <tcp_shutdown+0x8a>
 8016040:	e009      	b.n	8016056 <tcp_shutdown+0x9a>
 8016042:	2b07      	cmp	r3, #7
 8016044:	d107      	bne.n	8016056 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8016046:	68bb      	ldr	r3, [r7, #8]
 8016048:	b2db      	uxtb	r3, r3
 801604a:	4619      	mov	r1, r3
 801604c:	68f8      	ldr	r0, [r7, #12]
 801604e:	f7ff fe3d 	bl	8015ccc <tcp_close_shutdown>
 8016052:	4603      	mov	r3, r0
 8016054:	e003      	b.n	801605e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8016056:	f06f 030a 	mvn.w	r3, #10
 801605a:	e000      	b.n	801605e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801605c:	2300      	movs	r3, #0
}
 801605e:	4618      	mov	r0, r3
 8016060:	3710      	adds	r7, #16
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}
 8016066:	bf00      	nop
 8016068:	0802acac 	.word	0x0802acac
 801606c:	0802add4 	.word	0x0802add4
 8016070:	0802acf0 	.word	0x0802acf0

08016074 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b08e      	sub	sp, #56	; 0x38
 8016078:	af04      	add	r7, sp, #16
 801607a:	6078      	str	r0, [r7, #4]
 801607c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d107      	bne.n	8016094 <tcp_abandon+0x20>
 8016084:	4b52      	ldr	r3, [pc, #328]	; (80161d0 <tcp_abandon+0x15c>)
 8016086:	f240 223d 	movw	r2, #573	; 0x23d
 801608a:	4952      	ldr	r1, [pc, #328]	; (80161d4 <tcp_abandon+0x160>)
 801608c:	4852      	ldr	r0, [pc, #328]	; (80161d8 <tcp_abandon+0x164>)
 801608e:	f00e fbbf 	bl	8024810 <iprintf>
 8016092:	e099      	b.n	80161c8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	7d1b      	ldrb	r3, [r3, #20]
 8016098:	2b01      	cmp	r3, #1
 801609a:	d106      	bne.n	80160aa <tcp_abandon+0x36>
 801609c:	4b4c      	ldr	r3, [pc, #304]	; (80161d0 <tcp_abandon+0x15c>)
 801609e:	f44f 7210 	mov.w	r2, #576	; 0x240
 80160a2:	494e      	ldr	r1, [pc, #312]	; (80161dc <tcp_abandon+0x168>)
 80160a4:	484c      	ldr	r0, [pc, #304]	; (80161d8 <tcp_abandon+0x164>)
 80160a6:	f00e fbb3 	bl	8024810 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	7d1b      	ldrb	r3, [r3, #20]
 80160ae:	2b0a      	cmp	r3, #10
 80160b0:	d107      	bne.n	80160c2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80160b2:	6879      	ldr	r1, [r7, #4]
 80160b4:	484a      	ldr	r0, [pc, #296]	; (80161e0 <tcp_abandon+0x16c>)
 80160b6:	f001 fa39 	bl	801752c <tcp_pcb_remove>
    tcp_free(pcb);
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f7ff fd54 	bl	8015b68 <tcp_free>
 80160c0:	e082      	b.n	80161c8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80160c2:	2300      	movs	r3, #0
 80160c4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80160c6:	2300      	movs	r3, #0
 80160c8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160ce:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160d4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80160dc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	691b      	ldr	r3, [r3, #16]
 80160e2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	7d1b      	ldrb	r3, [r3, #20]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d126      	bne.n	801613a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	8adb      	ldrh	r3, [r3, #22]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d02e      	beq.n	8016152 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80160f4:	4b3b      	ldr	r3, [pc, #236]	; (80161e4 <tcp_abandon+0x170>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	687a      	ldr	r2, [r7, #4]
 80160fa:	429a      	cmp	r2, r3
 80160fc:	d105      	bne.n	801610a <tcp_abandon+0x96>
 80160fe:	4b39      	ldr	r3, [pc, #228]	; (80161e4 <tcp_abandon+0x170>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	68db      	ldr	r3, [r3, #12]
 8016104:	4a37      	ldr	r2, [pc, #220]	; (80161e4 <tcp_abandon+0x170>)
 8016106:	6013      	str	r3, [r2, #0]
 8016108:	e013      	b.n	8016132 <tcp_abandon+0xbe>
 801610a:	4b36      	ldr	r3, [pc, #216]	; (80161e4 <tcp_abandon+0x170>)
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	61fb      	str	r3, [r7, #28]
 8016110:	e00c      	b.n	801612c <tcp_abandon+0xb8>
 8016112:	69fb      	ldr	r3, [r7, #28]
 8016114:	68db      	ldr	r3, [r3, #12]
 8016116:	687a      	ldr	r2, [r7, #4]
 8016118:	429a      	cmp	r2, r3
 801611a:	d104      	bne.n	8016126 <tcp_abandon+0xb2>
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	68da      	ldr	r2, [r3, #12]
 8016120:	69fb      	ldr	r3, [r7, #28]
 8016122:	60da      	str	r2, [r3, #12]
 8016124:	e005      	b.n	8016132 <tcp_abandon+0xbe>
 8016126:	69fb      	ldr	r3, [r7, #28]
 8016128:	68db      	ldr	r3, [r3, #12]
 801612a:	61fb      	str	r3, [r7, #28]
 801612c:	69fb      	ldr	r3, [r7, #28]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d1ef      	bne.n	8016112 <tcp_abandon+0x9e>
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	2200      	movs	r2, #0
 8016136:	60da      	str	r2, [r3, #12]
 8016138:	e00b      	b.n	8016152 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	8adb      	ldrh	r3, [r3, #22]
 8016142:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016144:	6879      	ldr	r1, [r7, #4]
 8016146:	4828      	ldr	r0, [pc, #160]	; (80161e8 <tcp_abandon+0x174>)
 8016148:	f001 f9f0 	bl	801752c <tcp_pcb_remove>
 801614c:	4b27      	ldr	r3, [pc, #156]	; (80161ec <tcp_abandon+0x178>)
 801614e:	2201      	movs	r2, #1
 8016150:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016156:	2b00      	cmp	r3, #0
 8016158:	d004      	beq.n	8016164 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801615e:	4618      	mov	r0, r3
 8016160:	f000 fec4 	bl	8016eec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016168:	2b00      	cmp	r3, #0
 801616a:	d004      	beq.n	8016176 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016170:	4618      	mov	r0, r3
 8016172:	f000 febb 	bl	8016eec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801617a:	2b00      	cmp	r3, #0
 801617c:	d004      	beq.n	8016188 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016182:	4618      	mov	r0, r3
 8016184:	f000 feb2 	bl	8016eec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8016188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801618a:	2b00      	cmp	r3, #0
 801618c:	d00e      	beq.n	80161ac <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801618e:	6879      	ldr	r1, [r7, #4]
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	3304      	adds	r3, #4
 8016194:	687a      	ldr	r2, [r7, #4]
 8016196:	8b12      	ldrh	r2, [r2, #24]
 8016198:	9202      	str	r2, [sp, #8]
 801619a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801619c:	9201      	str	r2, [sp, #4]
 801619e:	9300      	str	r3, [sp, #0]
 80161a0:	460b      	mov	r3, r1
 80161a2:	697a      	ldr	r2, [r7, #20]
 80161a4:	69b9      	ldr	r1, [r7, #24]
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f005 fb90 	bl	801b8cc <tcp_rst>
    }
    last_state = pcb->state;
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	7d1b      	ldrb	r3, [r3, #20]
 80161b0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f7ff fcd8 	bl	8015b68 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80161b8:	693b      	ldr	r3, [r7, #16]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d004      	beq.n	80161c8 <tcp_abandon+0x154>
 80161be:	693b      	ldr	r3, [r7, #16]
 80161c0:	f06f 010c 	mvn.w	r1, #12
 80161c4:	68f8      	ldr	r0, [r7, #12]
 80161c6:	4798      	blx	r3
  }
}
 80161c8:	3728      	adds	r7, #40	; 0x28
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}
 80161ce:	bf00      	nop
 80161d0:	0802acac 	.word	0x0802acac
 80161d4:	0802adf0 	.word	0x0802adf0
 80161d8:	0802acf0 	.word	0x0802acf0
 80161dc:	0802ae0c 	.word	0x0802ae0c
 80161e0:	2001ace8 	.word	0x2001ace8
 80161e4:	2001acdc 	.word	0x2001acdc
 80161e8:	2001ace4 	.word	0x2001ace4
 80161ec:	2001acec 	.word	0x2001acec

080161f0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b082      	sub	sp, #8
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80161f8:	2101      	movs	r1, #1
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f7ff ff3a 	bl	8016074 <tcp_abandon>
}
 8016200:	bf00      	nop
 8016202:	3708      	adds	r7, #8
 8016204:	46bd      	mov	sp, r7
 8016206:	bd80      	pop	{r7, pc}

08016208 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b088      	sub	sp, #32
 801620c:	af00      	add	r7, sp, #0
 801620e:	60f8      	str	r0, [r7, #12]
 8016210:	60b9      	str	r1, [r7, #8]
 8016212:	4613      	mov	r3, r2
 8016214:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8016216:	2304      	movs	r3, #4
 8016218:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801621a:	68bb      	ldr	r3, [r7, #8]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d101      	bne.n	8016224 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016220:	4b3e      	ldr	r3, [pc, #248]	; (801631c <tcp_bind+0x114>)
 8016222:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d109      	bne.n	801623e <tcp_bind+0x36>
 801622a:	4b3d      	ldr	r3, [pc, #244]	; (8016320 <tcp_bind+0x118>)
 801622c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8016230:	493c      	ldr	r1, [pc, #240]	; (8016324 <tcp_bind+0x11c>)
 8016232:	483d      	ldr	r0, [pc, #244]	; (8016328 <tcp_bind+0x120>)
 8016234:	f00e faec 	bl	8024810 <iprintf>
 8016238:	f06f 030f 	mvn.w	r3, #15
 801623c:	e06a      	b.n	8016314 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	7d1b      	ldrb	r3, [r3, #20]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d009      	beq.n	801625a <tcp_bind+0x52>
 8016246:	4b36      	ldr	r3, [pc, #216]	; (8016320 <tcp_bind+0x118>)
 8016248:	f240 22ab 	movw	r2, #683	; 0x2ab
 801624c:	4937      	ldr	r1, [pc, #220]	; (801632c <tcp_bind+0x124>)
 801624e:	4836      	ldr	r0, [pc, #216]	; (8016328 <tcp_bind+0x120>)
 8016250:	f00e fade 	bl	8024810 <iprintf>
 8016254:	f06f 0305 	mvn.w	r3, #5
 8016258:	e05c      	b.n	8016314 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801625a:	88fb      	ldrh	r3, [r7, #6]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d109      	bne.n	8016274 <tcp_bind+0x6c>
    port = tcp_new_port();
 8016260:	f000 f9de 	bl	8016620 <tcp_new_port>
 8016264:	4603      	mov	r3, r0
 8016266:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016268:	88fb      	ldrh	r3, [r7, #6]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d135      	bne.n	80162da <tcp_bind+0xd2>
      return ERR_BUF;
 801626e:	f06f 0301 	mvn.w	r3, #1
 8016272:	e04f      	b.n	8016314 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8016274:	2300      	movs	r3, #0
 8016276:	61fb      	str	r3, [r7, #28]
 8016278:	e02b      	b.n	80162d2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801627a:	4a2d      	ldr	r2, [pc, #180]	; (8016330 <tcp_bind+0x128>)
 801627c:	69fb      	ldr	r3, [r7, #28]
 801627e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	61bb      	str	r3, [r7, #24]
 8016286:	e01e      	b.n	80162c6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8016288:	69bb      	ldr	r3, [r7, #24]
 801628a:	8adb      	ldrh	r3, [r3, #22]
 801628c:	88fa      	ldrh	r2, [r7, #6]
 801628e:	429a      	cmp	r2, r3
 8016290:	d116      	bne.n	80162c0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8016292:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016294:	2b00      	cmp	r3, #0
 8016296:	d010      	beq.n	80162ba <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016298:	69bb      	ldr	r3, [r7, #24]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d00c      	beq.n	80162ba <tcp_bind+0xb2>
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d009      	beq.n	80162ba <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80162a6:	68bb      	ldr	r3, [r7, #8]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d005      	beq.n	80162ba <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80162ae:	69bb      	ldr	r3, [r7, #24]
 80162b0:	681a      	ldr	r2, [r3, #0]
 80162b2:	68bb      	ldr	r3, [r7, #8]
 80162b4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80162b6:	429a      	cmp	r2, r3
 80162b8:	d102      	bne.n	80162c0 <tcp_bind+0xb8>
              return ERR_USE;
 80162ba:	f06f 0307 	mvn.w	r3, #7
 80162be:	e029      	b.n	8016314 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80162c0:	69bb      	ldr	r3, [r7, #24]
 80162c2:	68db      	ldr	r3, [r3, #12]
 80162c4:	61bb      	str	r3, [r7, #24]
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d1dd      	bne.n	8016288 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80162cc:	69fb      	ldr	r3, [r7, #28]
 80162ce:	3301      	adds	r3, #1
 80162d0:	61fb      	str	r3, [r7, #28]
 80162d2:	69fa      	ldr	r2, [r7, #28]
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	429a      	cmp	r2, r3
 80162d8:	dbcf      	blt.n	801627a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d00c      	beq.n	80162fa <tcp_bind+0xf2>
 80162e0:	68bb      	ldr	r3, [r7, #8]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d008      	beq.n	80162fa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d002      	beq.n	80162f4 <tcp_bind+0xec>
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	e000      	b.n	80162f6 <tcp_bind+0xee>
 80162f4:	2300      	movs	r3, #0
 80162f6:	68fa      	ldr	r2, [r7, #12]
 80162f8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	88fa      	ldrh	r2, [r7, #6]
 80162fe:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016300:	4b0c      	ldr	r3, [pc, #48]	; (8016334 <tcp_bind+0x12c>)
 8016302:	681a      	ldr	r2, [r3, #0]
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	60da      	str	r2, [r3, #12]
 8016308:	4a0a      	ldr	r2, [pc, #40]	; (8016334 <tcp_bind+0x12c>)
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	6013      	str	r3, [r2, #0]
 801630e:	f005 fc9f 	bl	801bc50 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016312:	2300      	movs	r3, #0
}
 8016314:	4618      	mov	r0, r3
 8016316:	3720      	adds	r7, #32
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}
 801631c:	0802d514 	.word	0x0802d514
 8016320:	0802acac 	.word	0x0802acac
 8016324:	0802ae40 	.word	0x0802ae40
 8016328:	0802acf0 	.word	0x0802acf0
 801632c:	0802ae58 	.word	0x0802ae58
 8016330:	0802d4ec 	.word	0x0802d4ec
 8016334:	2001acdc 	.word	0x2001acdc

08016338 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b084      	sub	sp, #16
 801633c:	af00      	add	r7, sp, #0
 801633e:	60f8      	str	r0, [r7, #12]
 8016340:	60b9      	str	r1, [r7, #8]
 8016342:	4613      	mov	r3, r2
 8016344:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8016346:	68bb      	ldr	r3, [r7, #8]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d106      	bne.n	801635a <tcp_accept_null+0x22>
 801634c:	4b07      	ldr	r3, [pc, #28]	; (801636c <tcp_accept_null+0x34>)
 801634e:	f240 320f 	movw	r2, #783	; 0x30f
 8016352:	4907      	ldr	r1, [pc, #28]	; (8016370 <tcp_accept_null+0x38>)
 8016354:	4807      	ldr	r0, [pc, #28]	; (8016374 <tcp_accept_null+0x3c>)
 8016356:	f00e fa5b 	bl	8024810 <iprintf>

  tcp_abort(pcb);
 801635a:	68b8      	ldr	r0, [r7, #8]
 801635c:	f7ff ff48 	bl	80161f0 <tcp_abort>

  return ERR_ABRT;
 8016360:	f06f 030c 	mvn.w	r3, #12
}
 8016364:	4618      	mov	r0, r3
 8016366:	3710      	adds	r7, #16
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	0802acac 	.word	0x0802acac
 8016370:	0802ae80 	.word	0x0802ae80
 8016374:	0802acf0 	.word	0x0802acf0

08016378 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b088      	sub	sp, #32
 801637c:	af00      	add	r7, sp, #0
 801637e:	60f8      	str	r0, [r7, #12]
 8016380:	460b      	mov	r3, r1
 8016382:	607a      	str	r2, [r7, #4]
 8016384:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8016386:	2300      	movs	r3, #0
 8016388:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d109      	bne.n	80163a4 <tcp_listen_with_backlog_and_err+0x2c>
 8016390:	4b47      	ldr	r3, [pc, #284]	; (80164b0 <tcp_listen_with_backlog_and_err+0x138>)
 8016392:	f240 3259 	movw	r2, #857	; 0x359
 8016396:	4947      	ldr	r1, [pc, #284]	; (80164b4 <tcp_listen_with_backlog_and_err+0x13c>)
 8016398:	4847      	ldr	r0, [pc, #284]	; (80164b8 <tcp_listen_with_backlog_and_err+0x140>)
 801639a:	f00e fa39 	bl	8024810 <iprintf>
 801639e:	23f0      	movs	r3, #240	; 0xf0
 80163a0:	76fb      	strb	r3, [r7, #27]
 80163a2:	e079      	b.n	8016498 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	7d1b      	ldrb	r3, [r3, #20]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d009      	beq.n	80163c0 <tcp_listen_with_backlog_and_err+0x48>
 80163ac:	4b40      	ldr	r3, [pc, #256]	; (80164b0 <tcp_listen_with_backlog_and_err+0x138>)
 80163ae:	f240 325a 	movw	r2, #858	; 0x35a
 80163b2:	4942      	ldr	r1, [pc, #264]	; (80164bc <tcp_listen_with_backlog_and_err+0x144>)
 80163b4:	4840      	ldr	r0, [pc, #256]	; (80164b8 <tcp_listen_with_backlog_and_err+0x140>)
 80163b6:	f00e fa2b 	bl	8024810 <iprintf>
 80163ba:	23f1      	movs	r3, #241	; 0xf1
 80163bc:	76fb      	strb	r3, [r7, #27]
 80163be:	e06b      	b.n	8016498 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	7d1b      	ldrb	r3, [r3, #20]
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d104      	bne.n	80163d2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80163cc:	23f7      	movs	r3, #247	; 0xf7
 80163ce:	76fb      	strb	r3, [r7, #27]
    goto done;
 80163d0:	e062      	b.n	8016498 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80163d2:	2002      	movs	r0, #2
 80163d4:	f7fe fa02 	bl	80147dc <memp_malloc>
 80163d8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80163da:	69fb      	ldr	r3, [r7, #28]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d102      	bne.n	80163e6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80163e0:	23ff      	movs	r3, #255	; 0xff
 80163e2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80163e4:	e058      	b.n	8016498 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	691a      	ldr	r2, [r3, #16]
 80163ea:	69fb      	ldr	r3, [r7, #28]
 80163ec:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	8ada      	ldrh	r2, [r3, #22]
 80163f2:	69fb      	ldr	r3, [r7, #28]
 80163f4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80163f6:	69fb      	ldr	r3, [r7, #28]
 80163f8:	2201      	movs	r2, #1
 80163fa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	7d5a      	ldrb	r2, [r3, #21]
 8016400:	69fb      	ldr	r3, [r7, #28]
 8016402:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	7a5a      	ldrb	r2, [r3, #9]
 8016408:	69fb      	ldr	r3, [r7, #28]
 801640a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801640c:	69fb      	ldr	r3, [r7, #28]
 801640e:	2200      	movs	r2, #0
 8016410:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	7ada      	ldrb	r2, [r3, #11]
 8016416:	69fb      	ldr	r3, [r7, #28]
 8016418:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	7a9a      	ldrb	r2, [r3, #10]
 801641e:	69fb      	ldr	r3, [r7, #28]
 8016420:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	681a      	ldr	r2, [r3, #0]
 8016426:	69fb      	ldr	r3, [r7, #28]
 8016428:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	8adb      	ldrh	r3, [r3, #22]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d021      	beq.n	8016476 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016432:	4b23      	ldr	r3, [pc, #140]	; (80164c0 <tcp_listen_with_backlog_and_err+0x148>)
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	68fa      	ldr	r2, [r7, #12]
 8016438:	429a      	cmp	r2, r3
 801643a:	d105      	bne.n	8016448 <tcp_listen_with_backlog_and_err+0xd0>
 801643c:	4b20      	ldr	r3, [pc, #128]	; (80164c0 <tcp_listen_with_backlog_and_err+0x148>)
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	68db      	ldr	r3, [r3, #12]
 8016442:	4a1f      	ldr	r2, [pc, #124]	; (80164c0 <tcp_listen_with_backlog_and_err+0x148>)
 8016444:	6013      	str	r3, [r2, #0]
 8016446:	e013      	b.n	8016470 <tcp_listen_with_backlog_and_err+0xf8>
 8016448:	4b1d      	ldr	r3, [pc, #116]	; (80164c0 <tcp_listen_with_backlog_and_err+0x148>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	617b      	str	r3, [r7, #20]
 801644e:	e00c      	b.n	801646a <tcp_listen_with_backlog_and_err+0xf2>
 8016450:	697b      	ldr	r3, [r7, #20]
 8016452:	68db      	ldr	r3, [r3, #12]
 8016454:	68fa      	ldr	r2, [r7, #12]
 8016456:	429a      	cmp	r2, r3
 8016458:	d104      	bne.n	8016464 <tcp_listen_with_backlog_and_err+0xec>
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	68da      	ldr	r2, [r3, #12]
 801645e:	697b      	ldr	r3, [r7, #20]
 8016460:	60da      	str	r2, [r3, #12]
 8016462:	e005      	b.n	8016470 <tcp_listen_with_backlog_and_err+0xf8>
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	68db      	ldr	r3, [r3, #12]
 8016468:	617b      	str	r3, [r7, #20]
 801646a:	697b      	ldr	r3, [r7, #20]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d1ef      	bne.n	8016450 <tcp_listen_with_backlog_and_err+0xd8>
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	2200      	movs	r2, #0
 8016474:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	f7ff fb76 	bl	8015b68 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801647c:	69fb      	ldr	r3, [r7, #28]
 801647e:	4a11      	ldr	r2, [pc, #68]	; (80164c4 <tcp_listen_with_backlog_and_err+0x14c>)
 8016480:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016482:	4b11      	ldr	r3, [pc, #68]	; (80164c8 <tcp_listen_with_backlog_and_err+0x150>)
 8016484:	681a      	ldr	r2, [r3, #0]
 8016486:	69fb      	ldr	r3, [r7, #28]
 8016488:	60da      	str	r2, [r3, #12]
 801648a:	4a0f      	ldr	r2, [pc, #60]	; (80164c8 <tcp_listen_with_backlog_and_err+0x150>)
 801648c:	69fb      	ldr	r3, [r7, #28]
 801648e:	6013      	str	r3, [r2, #0]
 8016490:	f005 fbde 	bl	801bc50 <tcp_timer_needed>
  res = ERR_OK;
 8016494:	2300      	movs	r3, #0
 8016496:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d002      	beq.n	80164a4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	7efa      	ldrb	r2, [r7, #27]
 80164a2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80164a4:	69fb      	ldr	r3, [r7, #28]
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	3720      	adds	r7, #32
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}
 80164ae:	bf00      	nop
 80164b0:	0802acac 	.word	0x0802acac
 80164b4:	0802aea0 	.word	0x0802aea0
 80164b8:	0802acf0 	.word	0x0802acf0
 80164bc:	0802aed0 	.word	0x0802aed0
 80164c0:	2001acdc 	.word	0x2001acdc
 80164c4:	08016339 	.word	0x08016339
 80164c8:	2001ace0 	.word	0x2001ace0

080164cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b084      	sub	sp, #16
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d106      	bne.n	80164e8 <tcp_update_rcv_ann_wnd+0x1c>
 80164da:	4b25      	ldr	r3, [pc, #148]	; (8016570 <tcp_update_rcv_ann_wnd+0xa4>)
 80164dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80164e0:	4924      	ldr	r1, [pc, #144]	; (8016574 <tcp_update_rcv_ann_wnd+0xa8>)
 80164e2:	4825      	ldr	r0, [pc, #148]	; (8016578 <tcp_update_rcv_ann_wnd+0xac>)
 80164e4:	f00e f994 	bl	8024810 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ec:	687a      	ldr	r2, [r7, #4]
 80164ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80164f0:	4413      	add	r3, r2
 80164f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164f8:	687a      	ldr	r2, [r7, #4]
 80164fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80164fc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016500:	bf28      	it	cs
 8016502:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016506:	b292      	uxth	r2, r2
 8016508:	4413      	add	r3, r2
 801650a:	68fa      	ldr	r2, [r7, #12]
 801650c:	1ad3      	subs	r3, r2, r3
 801650e:	2b00      	cmp	r3, #0
 8016510:	db08      	blt.n	8016524 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801651e:	68fa      	ldr	r2, [r7, #12]
 8016520:	1ad3      	subs	r3, r2, r3
 8016522:	e020      	b.n	8016566 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801652c:	1ad3      	subs	r3, r2, r3
 801652e:	2b00      	cmp	r3, #0
 8016530:	dd03      	ble.n	801653a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	2200      	movs	r2, #0
 8016536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016538:	e014      	b.n	8016564 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016542:	1ad3      	subs	r3, r2, r3
 8016544:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016546:	68bb      	ldr	r3, [r7, #8]
 8016548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801654c:	d306      	bcc.n	801655c <tcp_update_rcv_ann_wnd+0x90>
 801654e:	4b08      	ldr	r3, [pc, #32]	; (8016570 <tcp_update_rcv_ann_wnd+0xa4>)
 8016550:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016554:	4909      	ldr	r1, [pc, #36]	; (801657c <tcp_update_rcv_ann_wnd+0xb0>)
 8016556:	4808      	ldr	r0, [pc, #32]	; (8016578 <tcp_update_rcv_ann_wnd+0xac>)
 8016558:	f00e f95a 	bl	8024810 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801655c:	68bb      	ldr	r3, [r7, #8]
 801655e:	b29a      	uxth	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016564:	2300      	movs	r3, #0
  }
}
 8016566:	4618      	mov	r0, r3
 8016568:	3710      	adds	r7, #16
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}
 801656e:	bf00      	nop
 8016570:	0802acac 	.word	0x0802acac
 8016574:	0802af08 	.word	0x0802af08
 8016578:	0802acf0 	.word	0x0802acf0
 801657c:	0802af2c 	.word	0x0802af2c

08016580 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b084      	sub	sp, #16
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	460b      	mov	r3, r1
 801658a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d107      	bne.n	80165a2 <tcp_recved+0x22>
 8016592:	4b1f      	ldr	r3, [pc, #124]	; (8016610 <tcp_recved+0x90>)
 8016594:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016598:	491e      	ldr	r1, [pc, #120]	; (8016614 <tcp_recved+0x94>)
 801659a:	481f      	ldr	r0, [pc, #124]	; (8016618 <tcp_recved+0x98>)
 801659c:	f00e f938 	bl	8024810 <iprintf>
 80165a0:	e032      	b.n	8016608 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	7d1b      	ldrb	r3, [r3, #20]
 80165a6:	2b01      	cmp	r3, #1
 80165a8:	d106      	bne.n	80165b8 <tcp_recved+0x38>
 80165aa:	4b19      	ldr	r3, [pc, #100]	; (8016610 <tcp_recved+0x90>)
 80165ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 80165b0:	491a      	ldr	r1, [pc, #104]	; (801661c <tcp_recved+0x9c>)
 80165b2:	4819      	ldr	r0, [pc, #100]	; (8016618 <tcp_recved+0x98>)
 80165b4:	f00e f92c 	bl	8024810 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80165bc:	887b      	ldrh	r3, [r7, #2]
 80165be:	4413      	add	r3, r2
 80165c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80165c2:	89fb      	ldrh	r3, [r7, #14]
 80165c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80165c8:	d804      	bhi.n	80165d4 <tcp_recved+0x54>
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165ce:	89fa      	ldrh	r2, [r7, #14]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d204      	bcs.n	80165de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80165da:	851a      	strh	r2, [r3, #40]	; 0x28
 80165dc:	e002      	b.n	80165e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	89fa      	ldrh	r2, [r7, #14]
 80165e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f7ff ff71 	bl	80164cc <tcp_update_rcv_ann_wnd>
 80165ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80165ec:	68bb      	ldr	r3, [r7, #8]
 80165ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80165f2:	d309      	bcc.n	8016608 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	8b5b      	ldrh	r3, [r3, #26]
 80165f8:	f043 0302 	orr.w	r3, r3, #2
 80165fc:	b29a      	uxth	r2, r3
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f004 fbae 	bl	801ad64 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016608:	3710      	adds	r7, #16
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	0802acac 	.word	0x0802acac
 8016614:	0802af48 	.word	0x0802af48
 8016618:	0802acf0 	.word	0x0802acf0
 801661c:	0802af60 	.word	0x0802af60

08016620 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016620:	b480      	push	{r7}
 8016622:	b083      	sub	sp, #12
 8016624:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016626:	2300      	movs	r3, #0
 8016628:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801662a:	4b1e      	ldr	r3, [pc, #120]	; (80166a4 <tcp_new_port+0x84>)
 801662c:	881b      	ldrh	r3, [r3, #0]
 801662e:	3301      	adds	r3, #1
 8016630:	b29a      	uxth	r2, r3
 8016632:	4b1c      	ldr	r3, [pc, #112]	; (80166a4 <tcp_new_port+0x84>)
 8016634:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016636:	4b1b      	ldr	r3, [pc, #108]	; (80166a4 <tcp_new_port+0x84>)
 8016638:	881b      	ldrh	r3, [r3, #0]
 801663a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801663e:	4293      	cmp	r3, r2
 8016640:	d103      	bne.n	801664a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016642:	4b18      	ldr	r3, [pc, #96]	; (80166a4 <tcp_new_port+0x84>)
 8016644:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016648:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801664a:	2300      	movs	r3, #0
 801664c:	71fb      	strb	r3, [r7, #7]
 801664e:	e01e      	b.n	801668e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016650:	79fb      	ldrb	r3, [r7, #7]
 8016652:	4a15      	ldr	r2, [pc, #84]	; (80166a8 <tcp_new_port+0x88>)
 8016654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	603b      	str	r3, [r7, #0]
 801665c:	e011      	b.n	8016682 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	8ada      	ldrh	r2, [r3, #22]
 8016662:	4b10      	ldr	r3, [pc, #64]	; (80166a4 <tcp_new_port+0x84>)
 8016664:	881b      	ldrh	r3, [r3, #0]
 8016666:	429a      	cmp	r2, r3
 8016668:	d108      	bne.n	801667c <tcp_new_port+0x5c>
        n++;
 801666a:	88bb      	ldrh	r3, [r7, #4]
 801666c:	3301      	adds	r3, #1
 801666e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016670:	88bb      	ldrh	r3, [r7, #4]
 8016672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016676:	d3d8      	bcc.n	801662a <tcp_new_port+0xa>
          return 0;
 8016678:	2300      	movs	r3, #0
 801667a:	e00d      	b.n	8016698 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	68db      	ldr	r3, [r3, #12]
 8016680:	603b      	str	r3, [r7, #0]
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d1ea      	bne.n	801665e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016688:	79fb      	ldrb	r3, [r7, #7]
 801668a:	3301      	adds	r3, #1
 801668c:	71fb      	strb	r3, [r7, #7]
 801668e:	79fb      	ldrb	r3, [r7, #7]
 8016690:	2b03      	cmp	r3, #3
 8016692:	d9dd      	bls.n	8016650 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016694:	4b03      	ldr	r3, [pc, #12]	; (80166a4 <tcp_new_port+0x84>)
 8016696:	881b      	ldrh	r3, [r3, #0]
}
 8016698:	4618      	mov	r0, r3
 801669a:	370c      	adds	r7, #12
 801669c:	46bd      	mov	sp, r7
 801669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a2:	4770      	bx	lr
 80166a4:	200000f0 	.word	0x200000f0
 80166a8:	0802d4ec 	.word	0x0802d4ec

080166ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80166ac:	b5b0      	push	{r4, r5, r7, lr}
 80166ae:	b090      	sub	sp, #64	; 0x40
 80166b0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80166b2:	2300      	movs	r3, #0
 80166b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80166b8:	4b94      	ldr	r3, [pc, #592]	; (801690c <tcp_slowtmr+0x260>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	3301      	adds	r3, #1
 80166be:	4a93      	ldr	r2, [pc, #588]	; (801690c <tcp_slowtmr+0x260>)
 80166c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80166c2:	4b93      	ldr	r3, [pc, #588]	; (8016910 <tcp_slowtmr+0x264>)
 80166c4:	781b      	ldrb	r3, [r3, #0]
 80166c6:	3301      	adds	r3, #1
 80166c8:	b2da      	uxtb	r2, r3
 80166ca:	4b91      	ldr	r3, [pc, #580]	; (8016910 <tcp_slowtmr+0x264>)
 80166cc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80166ce:	2300      	movs	r3, #0
 80166d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80166d2:	4b90      	ldr	r3, [pc, #576]	; (8016914 <tcp_slowtmr+0x268>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80166d8:	e29d      	b.n	8016c16 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80166da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166dc:	7d1b      	ldrb	r3, [r3, #20]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d106      	bne.n	80166f0 <tcp_slowtmr+0x44>
 80166e2:	4b8d      	ldr	r3, [pc, #564]	; (8016918 <tcp_slowtmr+0x26c>)
 80166e4:	f240 42be 	movw	r2, #1214	; 0x4be
 80166e8:	498c      	ldr	r1, [pc, #560]	; (801691c <tcp_slowtmr+0x270>)
 80166ea:	488d      	ldr	r0, [pc, #564]	; (8016920 <tcp_slowtmr+0x274>)
 80166ec:	f00e f890 	bl	8024810 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80166f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f2:	7d1b      	ldrb	r3, [r3, #20]
 80166f4:	2b01      	cmp	r3, #1
 80166f6:	d106      	bne.n	8016706 <tcp_slowtmr+0x5a>
 80166f8:	4b87      	ldr	r3, [pc, #540]	; (8016918 <tcp_slowtmr+0x26c>)
 80166fa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80166fe:	4989      	ldr	r1, [pc, #548]	; (8016924 <tcp_slowtmr+0x278>)
 8016700:	4887      	ldr	r0, [pc, #540]	; (8016920 <tcp_slowtmr+0x274>)
 8016702:	f00e f885 	bl	8024810 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016708:	7d1b      	ldrb	r3, [r3, #20]
 801670a:	2b0a      	cmp	r3, #10
 801670c:	d106      	bne.n	801671c <tcp_slowtmr+0x70>
 801670e:	4b82      	ldr	r3, [pc, #520]	; (8016918 <tcp_slowtmr+0x26c>)
 8016710:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8016714:	4984      	ldr	r1, [pc, #528]	; (8016928 <tcp_slowtmr+0x27c>)
 8016716:	4882      	ldr	r0, [pc, #520]	; (8016920 <tcp_slowtmr+0x274>)
 8016718:	f00e f87a 	bl	8024810 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801671e:	7f9a      	ldrb	r2, [r3, #30]
 8016720:	4b7b      	ldr	r3, [pc, #492]	; (8016910 <tcp_slowtmr+0x264>)
 8016722:	781b      	ldrb	r3, [r3, #0]
 8016724:	429a      	cmp	r2, r3
 8016726:	d105      	bne.n	8016734 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8016728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801672a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801672e:	68db      	ldr	r3, [r3, #12]
 8016730:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8016732:	e270      	b.n	8016c16 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8016734:	4b76      	ldr	r3, [pc, #472]	; (8016910 <tcp_slowtmr+0x264>)
 8016736:	781a      	ldrb	r2, [r3, #0]
 8016738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801673a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801673c:	2300      	movs	r3, #0
 801673e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8016742:	2300      	movs	r3, #0
 8016744:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801674a:	7d1b      	ldrb	r3, [r3, #20]
 801674c:	2b02      	cmp	r3, #2
 801674e:	d10a      	bne.n	8016766 <tcp_slowtmr+0xba>
 8016750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016756:	2b05      	cmp	r3, #5
 8016758:	d905      	bls.n	8016766 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801675a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801675e:	3301      	adds	r3, #1
 8016760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016764:	e11e      	b.n	80169a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8016766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016768:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801676c:	2b0b      	cmp	r3, #11
 801676e:	d905      	bls.n	801677c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8016770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016774:	3301      	adds	r3, #1
 8016776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801677a:	e113      	b.n	80169a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801677e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016782:	2b00      	cmp	r3, #0
 8016784:	d075      	beq.n	8016872 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8016786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801678a:	2b00      	cmp	r3, #0
 801678c:	d006      	beq.n	801679c <tcp_slowtmr+0xf0>
 801678e:	4b62      	ldr	r3, [pc, #392]	; (8016918 <tcp_slowtmr+0x26c>)
 8016790:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8016794:	4965      	ldr	r1, [pc, #404]	; (801692c <tcp_slowtmr+0x280>)
 8016796:	4862      	ldr	r0, [pc, #392]	; (8016920 <tcp_slowtmr+0x274>)
 8016798:	f00e f83a 	bl	8024810 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801679e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d106      	bne.n	80167b2 <tcp_slowtmr+0x106>
 80167a4:	4b5c      	ldr	r3, [pc, #368]	; (8016918 <tcp_slowtmr+0x26c>)
 80167a6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80167aa:	4961      	ldr	r1, [pc, #388]	; (8016930 <tcp_slowtmr+0x284>)
 80167ac:	485c      	ldr	r0, [pc, #368]	; (8016920 <tcp_slowtmr+0x274>)
 80167ae:	f00e f82f 	bl	8024810 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80167b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80167b8:	2b0b      	cmp	r3, #11
 80167ba:	d905      	bls.n	80167c8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80167bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167c0:	3301      	adds	r3, #1
 80167c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80167c6:	e0ed      	b.n	80169a4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80167c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80167ce:	3b01      	subs	r3, #1
 80167d0:	4a58      	ldr	r2, [pc, #352]	; (8016934 <tcp_slowtmr+0x288>)
 80167d2:	5cd3      	ldrb	r3, [r2, r3]
 80167d4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80167d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80167dc:	7c7a      	ldrb	r2, [r7, #17]
 80167de:	429a      	cmp	r2, r3
 80167e0:	d907      	bls.n	80167f2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80167e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80167e8:	3301      	adds	r3, #1
 80167ea:	b2da      	uxtb	r2, r3
 80167ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80167f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80167f8:	7c7a      	ldrb	r2, [r7, #17]
 80167fa:	429a      	cmp	r2, r3
 80167fc:	f200 80d2 	bhi.w	80169a4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8016800:	2301      	movs	r3, #1
 8016802:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8016804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801680a:	2b00      	cmp	r3, #0
 801680c:	d108      	bne.n	8016820 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801680e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016810:	f005 f950 	bl	801bab4 <tcp_zero_window_probe>
 8016814:	4603      	mov	r3, r0
 8016816:	2b00      	cmp	r3, #0
 8016818:	d014      	beq.n	8016844 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801681a:	2300      	movs	r3, #0
 801681c:	623b      	str	r3, [r7, #32]
 801681e:	e011      	b.n	8016844 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016826:	4619      	mov	r1, r3
 8016828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801682a:	f004 f815 	bl	801a858 <tcp_split_unsent_seg>
 801682e:	4603      	mov	r3, r0
 8016830:	2b00      	cmp	r3, #0
 8016832:	d107      	bne.n	8016844 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8016834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016836:	f004 fa95 	bl	801ad64 <tcp_output>
 801683a:	4603      	mov	r3, r0
 801683c:	2b00      	cmp	r3, #0
 801683e:	d101      	bne.n	8016844 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8016840:	2300      	movs	r3, #0
 8016842:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8016844:	6a3b      	ldr	r3, [r7, #32]
 8016846:	2b00      	cmp	r3, #0
 8016848:	f000 80ac 	beq.w	80169a4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801684e:	2200      	movs	r2, #0
 8016850:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016856:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801685a:	2b06      	cmp	r3, #6
 801685c:	f200 80a2 	bhi.w	80169a4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8016860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016862:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016866:	3301      	adds	r3, #1
 8016868:	b2da      	uxtb	r2, r3
 801686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801686c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8016870:	e098      	b.n	80169a4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8016872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016874:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016878:	2b00      	cmp	r3, #0
 801687a:	db0f      	blt.n	801689c <tcp_slowtmr+0x1f0>
 801687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801687e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016882:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016886:	4293      	cmp	r3, r2
 8016888:	d008      	beq.n	801689c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801688c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016890:	b29b      	uxth	r3, r3
 8016892:	3301      	adds	r3, #1
 8016894:	b29b      	uxth	r3, r3
 8016896:	b21a      	sxth	r2, r3
 8016898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801689a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801689e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80168a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168a4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80168a8:	429a      	cmp	r2, r3
 80168aa:	db7b      	blt.n	80169a4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80168ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80168ae:	f004 fd4b 	bl	801b348 <tcp_rexmit_rto_prepare>
 80168b2:	4603      	mov	r3, r0
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d007      	beq.n	80168c8 <tcp_slowtmr+0x21c>
 80168b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d171      	bne.n	80169a4 <tcp_slowtmr+0x2f8>
 80168c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d06d      	beq.n	80169a4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80168c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ca:	7d1b      	ldrb	r3, [r3, #20]
 80168cc:	2b02      	cmp	r3, #2
 80168ce:	d03a      	beq.n	8016946 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80168d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80168d6:	2b0c      	cmp	r3, #12
 80168d8:	bf28      	it	cs
 80168da:	230c      	movcs	r3, #12
 80168dc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80168de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80168e4:	10db      	asrs	r3, r3, #3
 80168e6:	b21b      	sxth	r3, r3
 80168e8:	461a      	mov	r2, r3
 80168ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80168f0:	4413      	add	r3, r2
 80168f2:	7efa      	ldrb	r2, [r7, #27]
 80168f4:	4910      	ldr	r1, [pc, #64]	; (8016938 <tcp_slowtmr+0x28c>)
 80168f6:	5c8a      	ldrb	r2, [r1, r2]
 80168f8:	4093      	lsls	r3, r2
 80168fa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8016902:	4293      	cmp	r3, r2
 8016904:	dc1a      	bgt.n	801693c <tcp_slowtmr+0x290>
 8016906:	697b      	ldr	r3, [r7, #20]
 8016908:	b21a      	sxth	r2, r3
 801690a:	e019      	b.n	8016940 <tcp_slowtmr+0x294>
 801690c:	2001acd8 	.word	0x2001acd8
 8016910:	2001acee 	.word	0x2001acee
 8016914:	2001ace4 	.word	0x2001ace4
 8016918:	0802acac 	.word	0x0802acac
 801691c:	0802aff0 	.word	0x0802aff0
 8016920:	0802acf0 	.word	0x0802acf0
 8016924:	0802b01c 	.word	0x0802b01c
 8016928:	0802b048 	.word	0x0802b048
 801692c:	0802b078 	.word	0x0802b078
 8016930:	0802b0ac 	.word	0x0802b0ac
 8016934:	0802d4e4 	.word	0x0802d4e4
 8016938:	0802d4d4 	.word	0x0802d4d4
 801693c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016942:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8016946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016948:	2200      	movs	r2, #0
 801694a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801694e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016954:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016958:	4293      	cmp	r3, r2
 801695a:	bf28      	it	cs
 801695c:	4613      	movcs	r3, r2
 801695e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8016960:	8a7b      	ldrh	r3, [r7, #18]
 8016962:	085b      	lsrs	r3, r3, #1
 8016964:	b29a      	uxth	r2, r3
 8016966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016968:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801696e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016976:	005b      	lsls	r3, r3, #1
 8016978:	b29b      	uxth	r3, r3
 801697a:	429a      	cmp	r2, r3
 801697c:	d206      	bcs.n	801698c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016982:	005b      	lsls	r3, r3, #1
 8016984:	b29a      	uxth	r2, r3
 8016986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016988:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801698e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8016990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016992:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8016996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016998:	2200      	movs	r2, #0
 801699a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801699e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80169a0:	f004 fd42 	bl	801b428 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80169a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169a6:	7d1b      	ldrb	r3, [r3, #20]
 80169a8:	2b06      	cmp	r3, #6
 80169aa:	d111      	bne.n	80169d0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80169ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ae:	8b5b      	ldrh	r3, [r3, #26]
 80169b0:	f003 0310 	and.w	r3, r3, #16
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d00b      	beq.n	80169d0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80169b8:	4b9c      	ldr	r3, [pc, #624]	; (8016c2c <tcp_slowtmr+0x580>)
 80169ba:	681a      	ldr	r2, [r3, #0]
 80169bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169be:	6a1b      	ldr	r3, [r3, #32]
 80169c0:	1ad3      	subs	r3, r2, r3
 80169c2:	2b28      	cmp	r3, #40	; 0x28
 80169c4:	d904      	bls.n	80169d0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80169c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169ca:	3301      	adds	r3, #1
 80169cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80169d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d2:	7a5b      	ldrb	r3, [r3, #9]
 80169d4:	f003 0308 	and.w	r3, r3, #8
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d04a      	beq.n	8016a72 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80169dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169de:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80169e0:	2b04      	cmp	r3, #4
 80169e2:	d003      	beq.n	80169ec <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80169e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169e6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80169e8:	2b07      	cmp	r3, #7
 80169ea:	d142      	bne.n	8016a72 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80169ec:	4b8f      	ldr	r3, [pc, #572]	; (8016c2c <tcp_slowtmr+0x580>)
 80169ee:	681a      	ldr	r2, [r3, #0]
 80169f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f2:	6a1b      	ldr	r3, [r3, #32]
 80169f4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80169f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80169fc:	4b8c      	ldr	r3, [pc, #560]	; (8016c30 <tcp_slowtmr+0x584>)
 80169fe:	440b      	add	r3, r1
 8016a00:	498c      	ldr	r1, [pc, #560]	; (8016c34 <tcp_slowtmr+0x588>)
 8016a02:	fba1 1303 	umull	r1, r3, r1, r3
 8016a06:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d90a      	bls.n	8016a22 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8016a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a10:	3301      	adds	r3, #1
 8016a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8016a16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a1a:	3301      	adds	r3, #1
 8016a1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016a20:	e027      	b.n	8016a72 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016a22:	4b82      	ldr	r3, [pc, #520]	; (8016c2c <tcp_slowtmr+0x580>)
 8016a24:	681a      	ldr	r2, [r3, #0]
 8016a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a28:	6a1b      	ldr	r3, [r3, #32]
 8016a2a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a2e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016a38:	4618      	mov	r0, r3
 8016a3a:	4b7f      	ldr	r3, [pc, #508]	; (8016c38 <tcp_slowtmr+0x58c>)
 8016a3c:	fb00 f303 	mul.w	r3, r0, r3
 8016a40:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016a42:	497c      	ldr	r1, [pc, #496]	; (8016c34 <tcp_slowtmr+0x588>)
 8016a44:	fba1 1303 	umull	r1, r3, r1, r3
 8016a48:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	d911      	bls.n	8016a72 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8016a4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a50:	f004 fff0 	bl	801ba34 <tcp_keepalive>
 8016a54:	4603      	mov	r3, r0
 8016a56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8016a5a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d107      	bne.n	8016a72 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8016a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8016a68:	3301      	adds	r3, #1
 8016a6a:	b2da      	uxtb	r2, r3
 8016a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a6e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8016a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d011      	beq.n	8016a9e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016a7a:	4b6c      	ldr	r3, [pc, #432]	; (8016c2c <tcp_slowtmr+0x580>)
 8016a7c:	681a      	ldr	r2, [r3, #0]
 8016a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a80:	6a1b      	ldr	r3, [r3, #32]
 8016a82:	1ad2      	subs	r2, r2, r3
 8016a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	460b      	mov	r3, r1
 8016a8e:	005b      	lsls	r3, r3, #1
 8016a90:	440b      	add	r3, r1
 8016a92:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8016a94:	429a      	cmp	r2, r3
 8016a96:	d302      	bcc.n	8016a9e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8016a98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a9a:	f000 feab 	bl	80177f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8016a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aa0:	7d1b      	ldrb	r3, [r3, #20]
 8016aa2:	2b03      	cmp	r3, #3
 8016aa4:	d10b      	bne.n	8016abe <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016aa6:	4b61      	ldr	r3, [pc, #388]	; (8016c2c <tcp_slowtmr+0x580>)
 8016aa8:	681a      	ldr	r2, [r3, #0]
 8016aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aac:	6a1b      	ldr	r3, [r3, #32]
 8016aae:	1ad3      	subs	r3, r2, r3
 8016ab0:	2b28      	cmp	r3, #40	; 0x28
 8016ab2:	d904      	bls.n	8016abe <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8016ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ab8:	3301      	adds	r3, #1
 8016aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8016abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac0:	7d1b      	ldrb	r3, [r3, #20]
 8016ac2:	2b09      	cmp	r3, #9
 8016ac4:	d10b      	bne.n	8016ade <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016ac6:	4b59      	ldr	r3, [pc, #356]	; (8016c2c <tcp_slowtmr+0x580>)
 8016ac8:	681a      	ldr	r2, [r3, #0]
 8016aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016acc:	6a1b      	ldr	r3, [r3, #32]
 8016ace:	1ad3      	subs	r3, r2, r3
 8016ad0:	2bf0      	cmp	r3, #240	; 0xf0
 8016ad2:	d904      	bls.n	8016ade <tcp_slowtmr+0x432>
        ++pcb_remove;
 8016ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ad8:	3301      	adds	r3, #1
 8016ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d060      	beq.n	8016ba8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8016ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016aec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8016aee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016af0:	f000 fccc 	bl	801748c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8016af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d010      	beq.n	8016b1c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016afa:	4b50      	ldr	r3, [pc, #320]	; (8016c3c <tcp_slowtmr+0x590>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b00:	429a      	cmp	r2, r3
 8016b02:	d106      	bne.n	8016b12 <tcp_slowtmr+0x466>
 8016b04:	4b4e      	ldr	r3, [pc, #312]	; (8016c40 <tcp_slowtmr+0x594>)
 8016b06:	f240 526d 	movw	r2, #1389	; 0x56d
 8016b0a:	494e      	ldr	r1, [pc, #312]	; (8016c44 <tcp_slowtmr+0x598>)
 8016b0c:	484e      	ldr	r0, [pc, #312]	; (8016c48 <tcp_slowtmr+0x59c>)
 8016b0e:	f00d fe7f 	bl	8024810 <iprintf>
        prev->next = pcb->next;
 8016b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b14:	68da      	ldr	r2, [r3, #12]
 8016b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b18:	60da      	str	r2, [r3, #12]
 8016b1a:	e00f      	b.n	8016b3c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016b1c:	4b47      	ldr	r3, [pc, #284]	; (8016c3c <tcp_slowtmr+0x590>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d006      	beq.n	8016b34 <tcp_slowtmr+0x488>
 8016b26:	4b46      	ldr	r3, [pc, #280]	; (8016c40 <tcp_slowtmr+0x594>)
 8016b28:	f240 5271 	movw	r2, #1393	; 0x571
 8016b2c:	4947      	ldr	r1, [pc, #284]	; (8016c4c <tcp_slowtmr+0x5a0>)
 8016b2e:	4846      	ldr	r0, [pc, #280]	; (8016c48 <tcp_slowtmr+0x59c>)
 8016b30:	f00d fe6e 	bl	8024810 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b36:	68db      	ldr	r3, [r3, #12]
 8016b38:	4a40      	ldr	r2, [pc, #256]	; (8016c3c <tcp_slowtmr+0x590>)
 8016b3a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8016b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d013      	beq.n	8016b6c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b46:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b4a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016b4c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8016b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b50:	3304      	adds	r3, #4
 8016b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b54:	8ad2      	ldrh	r2, [r2, #22]
 8016b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016b58:	8b09      	ldrh	r1, [r1, #24]
 8016b5a:	9102      	str	r1, [sp, #8]
 8016b5c:	9201      	str	r2, [sp, #4]
 8016b5e:	9300      	str	r3, [sp, #0]
 8016b60:	462b      	mov	r3, r5
 8016b62:	4622      	mov	r2, r4
 8016b64:	4601      	mov	r1, r0
 8016b66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016b68:	f004 feb0 	bl	801b8cc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8016b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b6e:	691b      	ldr	r3, [r3, #16]
 8016b70:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8016b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b74:	7d1b      	ldrb	r3, [r3, #20]
 8016b76:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016b82:	6838      	ldr	r0, [r7, #0]
 8016b84:	f7fe fff0 	bl	8015b68 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8016b88:	4b31      	ldr	r3, [pc, #196]	; (8016c50 <tcp_slowtmr+0x5a4>)
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d004      	beq.n	8016b9e <tcp_slowtmr+0x4f2>
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	f06f 010c 	mvn.w	r1, #12
 8016b9a:	68b8      	ldr	r0, [r7, #8]
 8016b9c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016b9e:	4b2c      	ldr	r3, [pc, #176]	; (8016c50 <tcp_slowtmr+0x5a4>)
 8016ba0:	781b      	ldrb	r3, [r3, #0]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d037      	beq.n	8016c16 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8016ba6:	e592      	b.n	80166ce <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8016ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016baa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bae:	68db      	ldr	r3, [r3, #12]
 8016bb0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8016bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bb4:	7f1b      	ldrb	r3, [r3, #28]
 8016bb6:	3301      	adds	r3, #1
 8016bb8:	b2da      	uxtb	r2, r3
 8016bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bbc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc0:	7f1a      	ldrb	r2, [r3, #28]
 8016bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc4:	7f5b      	ldrb	r3, [r3, #29]
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d325      	bcc.n	8016c16 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8016bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bcc:	2200      	movs	r2, #0
 8016bce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8016bd0:	4b1f      	ldr	r3, [pc, #124]	; (8016c50 <tcp_slowtmr+0x5a4>)
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8016bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d00b      	beq.n	8016bf8 <tcp_slowtmr+0x54c>
 8016be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016be8:	6912      	ldr	r2, [r2, #16]
 8016bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016bec:	4610      	mov	r0, r2
 8016bee:	4798      	blx	r3
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8016bf6:	e002      	b.n	8016bfe <tcp_slowtmr+0x552>
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8016bfe:	4b14      	ldr	r3, [pc, #80]	; (8016c50 <tcp_slowtmr+0x5a4>)
 8016c00:	781b      	ldrb	r3, [r3, #0]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d000      	beq.n	8016c08 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8016c06:	e562      	b.n	80166ce <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016c08:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d102      	bne.n	8016c16 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8016c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c12:	f004 f8a7 	bl	801ad64 <tcp_output>
  while (pcb != NULL) {
 8016c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	f47f ad5e 	bne.w	80166da <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8016c22:	4b0c      	ldr	r3, [pc, #48]	; (8016c54 <tcp_slowtmr+0x5a8>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016c28:	e069      	b.n	8016cfe <tcp_slowtmr+0x652>
 8016c2a:	bf00      	nop
 8016c2c:	2001acd8 	.word	0x2001acd8
 8016c30:	000a4cb8 	.word	0x000a4cb8
 8016c34:	10624dd3 	.word	0x10624dd3
 8016c38:	000124f8 	.word	0x000124f8
 8016c3c:	2001ace4 	.word	0x2001ace4
 8016c40:	0802acac 	.word	0x0802acac
 8016c44:	0802b0e4 	.word	0x0802b0e4
 8016c48:	0802acf0 	.word	0x0802acf0
 8016c4c:	0802b110 	.word	0x0802b110
 8016c50:	2001acec 	.word	0x2001acec
 8016c54:	2001ace8 	.word	0x2001ace8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c5a:	7d1b      	ldrb	r3, [r3, #20]
 8016c5c:	2b0a      	cmp	r3, #10
 8016c5e:	d006      	beq.n	8016c6e <tcp_slowtmr+0x5c2>
 8016c60:	4b2b      	ldr	r3, [pc, #172]	; (8016d10 <tcp_slowtmr+0x664>)
 8016c62:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8016c66:	492b      	ldr	r1, [pc, #172]	; (8016d14 <tcp_slowtmr+0x668>)
 8016c68:	482b      	ldr	r0, [pc, #172]	; (8016d18 <tcp_slowtmr+0x66c>)
 8016c6a:	f00d fdd1 	bl	8024810 <iprintf>
    pcb_remove = 0;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8016c74:	4b29      	ldr	r3, [pc, #164]	; (8016d1c <tcp_slowtmr+0x670>)
 8016c76:	681a      	ldr	r2, [r3, #0]
 8016c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c7a:	6a1b      	ldr	r3, [r3, #32]
 8016c7c:	1ad3      	subs	r3, r2, r3
 8016c7e:	2bf0      	cmp	r3, #240	; 0xf0
 8016c80:	d904      	bls.n	8016c8c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8016c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c86:	3301      	adds	r3, #1
 8016c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d02f      	beq.n	8016cf4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8016c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c96:	f000 fbf9 	bl	801748c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d010      	beq.n	8016cc2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016ca0:	4b1f      	ldr	r3, [pc, #124]	; (8016d20 <tcp_slowtmr+0x674>)
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	d106      	bne.n	8016cb8 <tcp_slowtmr+0x60c>
 8016caa:	4b19      	ldr	r3, [pc, #100]	; (8016d10 <tcp_slowtmr+0x664>)
 8016cac:	f240 52af 	movw	r2, #1455	; 0x5af
 8016cb0:	491c      	ldr	r1, [pc, #112]	; (8016d24 <tcp_slowtmr+0x678>)
 8016cb2:	4819      	ldr	r0, [pc, #100]	; (8016d18 <tcp_slowtmr+0x66c>)
 8016cb4:	f00d fdac 	bl	8024810 <iprintf>
        prev->next = pcb->next;
 8016cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cba:	68da      	ldr	r2, [r3, #12]
 8016cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cbe:	60da      	str	r2, [r3, #12]
 8016cc0:	e00f      	b.n	8016ce2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016cc2:	4b17      	ldr	r3, [pc, #92]	; (8016d20 <tcp_slowtmr+0x674>)
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	d006      	beq.n	8016cda <tcp_slowtmr+0x62e>
 8016ccc:	4b10      	ldr	r3, [pc, #64]	; (8016d10 <tcp_slowtmr+0x664>)
 8016cce:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8016cd2:	4915      	ldr	r1, [pc, #84]	; (8016d28 <tcp_slowtmr+0x67c>)
 8016cd4:	4810      	ldr	r0, [pc, #64]	; (8016d18 <tcp_slowtmr+0x66c>)
 8016cd6:	f00d fd9b 	bl	8024810 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8016cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cdc:	68db      	ldr	r3, [r3, #12]
 8016cde:	4a10      	ldr	r2, [pc, #64]	; (8016d20 <tcp_slowtmr+0x674>)
 8016ce0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8016ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce8:	68db      	ldr	r3, [r3, #12]
 8016cea:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016cec:	69f8      	ldr	r0, [r7, #28]
 8016cee:	f7fe ff3b 	bl	8015b68 <tcp_free>
 8016cf2:	e004      	b.n	8016cfe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8016cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8016cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cfa:	68db      	ldr	r3, [r3, #12]
 8016cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d1a9      	bne.n	8016c58 <tcp_slowtmr+0x5ac>
    }
  }
}
 8016d04:	bf00      	nop
 8016d06:	bf00      	nop
 8016d08:	3730      	adds	r7, #48	; 0x30
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8016d0e:	bf00      	nop
 8016d10:	0802acac 	.word	0x0802acac
 8016d14:	0802b13c 	.word	0x0802b13c
 8016d18:	0802acf0 	.word	0x0802acf0
 8016d1c:	2001acd8 	.word	0x2001acd8
 8016d20:	2001ace8 	.word	0x2001ace8
 8016d24:	0802b16c 	.word	0x0802b16c
 8016d28:	0802b194 	.word	0x0802b194

08016d2c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8016d32:	4b2d      	ldr	r3, [pc, #180]	; (8016de8 <tcp_fasttmr+0xbc>)
 8016d34:	781b      	ldrb	r3, [r3, #0]
 8016d36:	3301      	adds	r3, #1
 8016d38:	b2da      	uxtb	r2, r3
 8016d3a:	4b2b      	ldr	r3, [pc, #172]	; (8016de8 <tcp_fasttmr+0xbc>)
 8016d3c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016d3e:	4b2b      	ldr	r3, [pc, #172]	; (8016dec <tcp_fasttmr+0xc0>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016d44:	e048      	b.n	8016dd8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	7f9a      	ldrb	r2, [r3, #30]
 8016d4a:	4b27      	ldr	r3, [pc, #156]	; (8016de8 <tcp_fasttmr+0xbc>)
 8016d4c:	781b      	ldrb	r3, [r3, #0]
 8016d4e:	429a      	cmp	r2, r3
 8016d50:	d03f      	beq.n	8016dd2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016d52:	4b25      	ldr	r3, [pc, #148]	; (8016de8 <tcp_fasttmr+0xbc>)
 8016d54:	781a      	ldrb	r2, [r3, #0]
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	8b5b      	ldrh	r3, [r3, #26]
 8016d5e:	f003 0301 	and.w	r3, r3, #1
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d010      	beq.n	8016d88 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	8b5b      	ldrh	r3, [r3, #26]
 8016d6a:	f043 0302 	orr.w	r3, r3, #2
 8016d6e:	b29a      	uxth	r2, r3
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f003 fff5 	bl	801ad64 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	8b5b      	ldrh	r3, [r3, #26]
 8016d7e:	f023 0303 	bic.w	r3, r3, #3
 8016d82:	b29a      	uxth	r2, r3
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	8b5b      	ldrh	r3, [r3, #26]
 8016d8c:	f003 0308 	and.w	r3, r3, #8
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d009      	beq.n	8016da8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	8b5b      	ldrh	r3, [r3, #26]
 8016d98:	f023 0308 	bic.w	r3, r3, #8
 8016d9c:	b29a      	uxth	r2, r3
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016da2:	6878      	ldr	r0, [r7, #4]
 8016da4:	f7ff f874 	bl	8015e90 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	68db      	ldr	r3, [r3, #12]
 8016dac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d00a      	beq.n	8016dcc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016db6:	4b0e      	ldr	r3, [pc, #56]	; (8016df0 <tcp_fasttmr+0xc4>)
 8016db8:	2200      	movs	r2, #0
 8016dba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f000 f819 	bl	8016df4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016dc2:	4b0b      	ldr	r3, [pc, #44]	; (8016df0 <tcp_fasttmr+0xc4>)
 8016dc4:	781b      	ldrb	r3, [r3, #0]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d000      	beq.n	8016dcc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8016dca:	e7b8      	b.n	8016d3e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016dcc:	683b      	ldr	r3, [r7, #0]
 8016dce:	607b      	str	r3, [r7, #4]
 8016dd0:	e002      	b.n	8016dd8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	68db      	ldr	r3, [r3, #12]
 8016dd6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d1b3      	bne.n	8016d46 <tcp_fasttmr+0x1a>
    }
  }
}
 8016dde:	bf00      	nop
 8016de0:	bf00      	nop
 8016de2:	3708      	adds	r7, #8
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}
 8016de8:	2001acee 	.word	0x2001acee
 8016dec:	2001ace4 	.word	0x2001ace4
 8016df0:	2001acec 	.word	0x2001acec

08016df4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016df4:	b590      	push	{r4, r7, lr}
 8016df6:	b085      	sub	sp, #20
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d109      	bne.n	8016e16 <tcp_process_refused_data+0x22>
 8016e02:	4b37      	ldr	r3, [pc, #220]	; (8016ee0 <tcp_process_refused_data+0xec>)
 8016e04:	f240 6209 	movw	r2, #1545	; 0x609
 8016e08:	4936      	ldr	r1, [pc, #216]	; (8016ee4 <tcp_process_refused_data+0xf0>)
 8016e0a:	4837      	ldr	r0, [pc, #220]	; (8016ee8 <tcp_process_refused_data+0xf4>)
 8016e0c:	f00d fd00 	bl	8024810 <iprintf>
 8016e10:	f06f 030f 	mvn.w	r3, #15
 8016e14:	e060      	b.n	8016ed8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e1a:	7b5b      	ldrb	r3, [r3, #13]
 8016e1c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e22:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	2200      	movs	r2, #0
 8016e28:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d00b      	beq.n	8016e4c <tcp_process_refused_data+0x58>
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	6918      	ldr	r0, [r3, #16]
 8016e3e:	2300      	movs	r3, #0
 8016e40:	68ba      	ldr	r2, [r7, #8]
 8016e42:	6879      	ldr	r1, [r7, #4]
 8016e44:	47a0      	blx	r4
 8016e46:	4603      	mov	r3, r0
 8016e48:	73fb      	strb	r3, [r7, #15]
 8016e4a:	e007      	b.n	8016e5c <tcp_process_refused_data+0x68>
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	68ba      	ldr	r2, [r7, #8]
 8016e50:	6879      	ldr	r1, [r7, #4]
 8016e52:	2000      	movs	r0, #0
 8016e54:	f000 f8a4 	bl	8016fa0 <tcp_recv_null>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d12a      	bne.n	8016eba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016e64:	7bbb      	ldrb	r3, [r7, #14]
 8016e66:	f003 0320 	and.w	r3, r3, #32
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d033      	beq.n	8016ed6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016e76:	d005      	beq.n	8016e84 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e7c:	3301      	adds	r3, #1
 8016e7e:	b29a      	uxth	r2, r3
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d00b      	beq.n	8016ea6 <tcp_process_refused_data+0xb2>
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	6918      	ldr	r0, [r3, #16]
 8016e98:	2300      	movs	r3, #0
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	6879      	ldr	r1, [r7, #4]
 8016e9e:	47a0      	blx	r4
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	73fb      	strb	r3, [r7, #15]
 8016ea4:	e001      	b.n	8016eaa <tcp_process_refused_data+0xb6>
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016eae:	f113 0f0d 	cmn.w	r3, #13
 8016eb2:	d110      	bne.n	8016ed6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016eb4:	f06f 030c 	mvn.w	r3, #12
 8016eb8:	e00e      	b.n	8016ed8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8016eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ebe:	f113 0f0d 	cmn.w	r3, #13
 8016ec2:	d102      	bne.n	8016eca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016ec4:	f06f 030c 	mvn.w	r3, #12
 8016ec8:	e006      	b.n	8016ed8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	68ba      	ldr	r2, [r7, #8]
 8016ece:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8016ed0:	f06f 0304 	mvn.w	r3, #4
 8016ed4:	e000      	b.n	8016ed8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8016ed6:	2300      	movs	r3, #0
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	3714      	adds	r7, #20
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd90      	pop	{r4, r7, pc}
 8016ee0:	0802acac 	.word	0x0802acac
 8016ee4:	0802b1bc 	.word	0x0802b1bc
 8016ee8:	0802acf0 	.word	0x0802acf0

08016eec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b084      	sub	sp, #16
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016ef4:	e007      	b.n	8016f06 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f000 f80a 	bl	8016f16 <tcp_seg_free>
    seg = next;
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d1f4      	bne.n	8016ef6 <tcp_segs_free+0xa>
  }
}
 8016f0c:	bf00      	nop
 8016f0e:	bf00      	nop
 8016f10:	3710      	adds	r7, #16
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}

08016f16 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016f16:	b580      	push	{r7, lr}
 8016f18:	b082      	sub	sp, #8
 8016f1a:	af00      	add	r7, sp, #0
 8016f1c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d00c      	beq.n	8016f3e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	685b      	ldr	r3, [r3, #4]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d004      	beq.n	8016f36 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7fe fb6d 	bl	8015610 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016f36:	6879      	ldr	r1, [r7, #4]
 8016f38:	2003      	movs	r0, #3
 8016f3a:	f7fd fcc5 	bl	80148c8 <memp_free>
  }
}
 8016f3e:	bf00      	nop
 8016f40:	3708      	adds	r7, #8
 8016f42:	46bd      	mov	sp, r7
 8016f44:	bd80      	pop	{r7, pc}
	...

08016f48 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b084      	sub	sp, #16
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d106      	bne.n	8016f64 <tcp_seg_copy+0x1c>
 8016f56:	4b0f      	ldr	r3, [pc, #60]	; (8016f94 <tcp_seg_copy+0x4c>)
 8016f58:	f240 6282 	movw	r2, #1666	; 0x682
 8016f5c:	490e      	ldr	r1, [pc, #56]	; (8016f98 <tcp_seg_copy+0x50>)
 8016f5e:	480f      	ldr	r0, [pc, #60]	; (8016f9c <tcp_seg_copy+0x54>)
 8016f60:	f00d fc56 	bl	8024810 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016f64:	2003      	movs	r0, #3
 8016f66:	f7fd fc39 	bl	80147dc <memp_malloc>
 8016f6a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d101      	bne.n	8016f76 <tcp_seg_copy+0x2e>
    return NULL;
 8016f72:	2300      	movs	r3, #0
 8016f74:	e00a      	b.n	8016f8c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016f76:	2210      	movs	r2, #16
 8016f78:	6879      	ldr	r1, [r7, #4]
 8016f7a:	68f8      	ldr	r0, [r7, #12]
 8016f7c:	f00c fd09 	bl	8023992 <memcpy>
  pbuf_ref(cseg->p);
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	685b      	ldr	r3, [r3, #4]
 8016f84:	4618      	mov	r0, r3
 8016f86:	f7fe fbe9 	bl	801575c <pbuf_ref>
  return cseg;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
}
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	3710      	adds	r7, #16
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bd80      	pop	{r7, pc}
 8016f94:	0802acac 	.word	0x0802acac
 8016f98:	0802b200 	.word	0x0802b200
 8016f9c:	0802acf0 	.word	0x0802acf0

08016fa0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b084      	sub	sp, #16
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]
 8016fac:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d109      	bne.n	8016fc8 <tcp_recv_null+0x28>
 8016fb4:	4b12      	ldr	r3, [pc, #72]	; (8017000 <tcp_recv_null+0x60>)
 8016fb6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016fba:	4912      	ldr	r1, [pc, #72]	; (8017004 <tcp_recv_null+0x64>)
 8016fbc:	4812      	ldr	r0, [pc, #72]	; (8017008 <tcp_recv_null+0x68>)
 8016fbe:	f00d fc27 	bl	8024810 <iprintf>
 8016fc2:	f06f 030f 	mvn.w	r3, #15
 8016fc6:	e016      	b.n	8016ff6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d009      	beq.n	8016fe2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	891b      	ldrh	r3, [r3, #8]
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	68b8      	ldr	r0, [r7, #8]
 8016fd6:	f7ff fad3 	bl	8016580 <tcp_recved>
    pbuf_free(p);
 8016fda:	6878      	ldr	r0, [r7, #4]
 8016fdc:	f7fe fb18 	bl	8015610 <pbuf_free>
 8016fe0:	e008      	b.n	8016ff4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d104      	bne.n	8016ff4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8016fea:	68b8      	ldr	r0, [r7, #8]
 8016fec:	f7fe ffba 	bl	8015f64 <tcp_close>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	e000      	b.n	8016ff6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016ff4:	2300      	movs	r3, #0
}
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	3710      	adds	r7, #16
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}
 8016ffe:	bf00      	nop
 8017000:	0802acac 	.word	0x0802acac
 8017004:	0802b21c 	.word	0x0802b21c
 8017008:	0802acf0 	.word	0x0802acf0

0801700c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b086      	sub	sp, #24
 8017010:	af00      	add	r7, sp, #0
 8017012:	4603      	mov	r3, r0
 8017014:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801701a:	2b00      	cmp	r3, #0
 801701c:	db01      	blt.n	8017022 <tcp_kill_prio+0x16>
 801701e:	79fb      	ldrb	r3, [r7, #7]
 8017020:	e000      	b.n	8017024 <tcp_kill_prio+0x18>
 8017022:	237f      	movs	r3, #127	; 0x7f
 8017024:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017026:	7afb      	ldrb	r3, [r7, #11]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d034      	beq.n	8017096 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801702c:	7afb      	ldrb	r3, [r7, #11]
 801702e:	3b01      	subs	r3, #1
 8017030:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8017032:	2300      	movs	r3, #0
 8017034:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017036:	2300      	movs	r3, #0
 8017038:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801703a:	4b19      	ldr	r3, [pc, #100]	; (80170a0 <tcp_kill_prio+0x94>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	617b      	str	r3, [r7, #20]
 8017040:	e01f      	b.n	8017082 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8017042:	697b      	ldr	r3, [r7, #20]
 8017044:	7d5b      	ldrb	r3, [r3, #21]
 8017046:	7afa      	ldrb	r2, [r7, #11]
 8017048:	429a      	cmp	r2, r3
 801704a:	d80c      	bhi.n	8017066 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801704c:	697b      	ldr	r3, [r7, #20]
 801704e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017050:	7afa      	ldrb	r2, [r7, #11]
 8017052:	429a      	cmp	r2, r3
 8017054:	d112      	bne.n	801707c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017056:	4b13      	ldr	r3, [pc, #76]	; (80170a4 <tcp_kill_prio+0x98>)
 8017058:	681a      	ldr	r2, [r3, #0]
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	6a1b      	ldr	r3, [r3, #32]
 801705e:	1ad3      	subs	r3, r2, r3
 8017060:	68fa      	ldr	r2, [r7, #12]
 8017062:	429a      	cmp	r2, r3
 8017064:	d80a      	bhi.n	801707c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8017066:	4b0f      	ldr	r3, [pc, #60]	; (80170a4 <tcp_kill_prio+0x98>)
 8017068:	681a      	ldr	r2, [r3, #0]
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	6a1b      	ldr	r3, [r3, #32]
 801706e:	1ad3      	subs	r3, r2, r3
 8017070:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8017072:	697b      	ldr	r3, [r7, #20]
 8017074:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8017076:	697b      	ldr	r3, [r7, #20]
 8017078:	7d5b      	ldrb	r3, [r3, #21]
 801707a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801707c:	697b      	ldr	r3, [r7, #20]
 801707e:	68db      	ldr	r3, [r3, #12]
 8017080:	617b      	str	r3, [r7, #20]
 8017082:	697b      	ldr	r3, [r7, #20]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d1dc      	bne.n	8017042 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8017088:	693b      	ldr	r3, [r7, #16]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d004      	beq.n	8017098 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801708e:	6938      	ldr	r0, [r7, #16]
 8017090:	f7ff f8ae 	bl	80161f0 <tcp_abort>
 8017094:	e000      	b.n	8017098 <tcp_kill_prio+0x8c>
    return;
 8017096:	bf00      	nop
  }
}
 8017098:	3718      	adds	r7, #24
 801709a:	46bd      	mov	sp, r7
 801709c:	bd80      	pop	{r7, pc}
 801709e:	bf00      	nop
 80170a0:	2001ace4 	.word	0x2001ace4
 80170a4:	2001acd8 	.word	0x2001acd8

080170a8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b086      	sub	sp, #24
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	4603      	mov	r3, r0
 80170b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80170b2:	79fb      	ldrb	r3, [r7, #7]
 80170b4:	2b08      	cmp	r3, #8
 80170b6:	d009      	beq.n	80170cc <tcp_kill_state+0x24>
 80170b8:	79fb      	ldrb	r3, [r7, #7]
 80170ba:	2b09      	cmp	r3, #9
 80170bc:	d006      	beq.n	80170cc <tcp_kill_state+0x24>
 80170be:	4b1a      	ldr	r3, [pc, #104]	; (8017128 <tcp_kill_state+0x80>)
 80170c0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80170c4:	4919      	ldr	r1, [pc, #100]	; (801712c <tcp_kill_state+0x84>)
 80170c6:	481a      	ldr	r0, [pc, #104]	; (8017130 <tcp_kill_state+0x88>)
 80170c8:	f00d fba2 	bl	8024810 <iprintf>

  inactivity = 0;
 80170cc:	2300      	movs	r3, #0
 80170ce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80170d0:	2300      	movs	r3, #0
 80170d2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80170d4:	4b17      	ldr	r3, [pc, #92]	; (8017134 <tcp_kill_state+0x8c>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	617b      	str	r3, [r7, #20]
 80170da:	e017      	b.n	801710c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80170dc:	697b      	ldr	r3, [r7, #20]
 80170de:	7d1b      	ldrb	r3, [r3, #20]
 80170e0:	79fa      	ldrb	r2, [r7, #7]
 80170e2:	429a      	cmp	r2, r3
 80170e4:	d10f      	bne.n	8017106 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80170e6:	4b14      	ldr	r3, [pc, #80]	; (8017138 <tcp_kill_state+0x90>)
 80170e8:	681a      	ldr	r2, [r3, #0]
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	6a1b      	ldr	r3, [r3, #32]
 80170ee:	1ad3      	subs	r3, r2, r3
 80170f0:	68fa      	ldr	r2, [r7, #12]
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d807      	bhi.n	8017106 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80170f6:	4b10      	ldr	r3, [pc, #64]	; (8017138 <tcp_kill_state+0x90>)
 80170f8:	681a      	ldr	r2, [r3, #0]
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	6a1b      	ldr	r3, [r3, #32]
 80170fe:	1ad3      	subs	r3, r2, r3
 8017100:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017106:	697b      	ldr	r3, [r7, #20]
 8017108:	68db      	ldr	r3, [r3, #12]
 801710a:	617b      	str	r3, [r7, #20]
 801710c:	697b      	ldr	r3, [r7, #20]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d1e4      	bne.n	80170dc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017112:	693b      	ldr	r3, [r7, #16]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d003      	beq.n	8017120 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017118:	2100      	movs	r1, #0
 801711a:	6938      	ldr	r0, [r7, #16]
 801711c:	f7fe ffaa 	bl	8016074 <tcp_abandon>
  }
}
 8017120:	bf00      	nop
 8017122:	3718      	adds	r7, #24
 8017124:	46bd      	mov	sp, r7
 8017126:	bd80      	pop	{r7, pc}
 8017128:	0802acac 	.word	0x0802acac
 801712c:	0802b238 	.word	0x0802b238
 8017130:	0802acf0 	.word	0x0802acf0
 8017134:	2001ace4 	.word	0x2001ace4
 8017138:	2001acd8 	.word	0x2001acd8

0801713c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b084      	sub	sp, #16
 8017140:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017142:	2300      	movs	r3, #0
 8017144:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017146:	2300      	movs	r3, #0
 8017148:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801714a:	4b12      	ldr	r3, [pc, #72]	; (8017194 <tcp_kill_timewait+0x58>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	60fb      	str	r3, [r7, #12]
 8017150:	e012      	b.n	8017178 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017152:	4b11      	ldr	r3, [pc, #68]	; (8017198 <tcp_kill_timewait+0x5c>)
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	6a1b      	ldr	r3, [r3, #32]
 801715a:	1ad3      	subs	r3, r2, r3
 801715c:	687a      	ldr	r2, [r7, #4]
 801715e:	429a      	cmp	r2, r3
 8017160:	d807      	bhi.n	8017172 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017162:	4b0d      	ldr	r3, [pc, #52]	; (8017198 <tcp_kill_timewait+0x5c>)
 8017164:	681a      	ldr	r2, [r3, #0]
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	6a1b      	ldr	r3, [r3, #32]
 801716a:	1ad3      	subs	r3, r2, r3
 801716c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	68db      	ldr	r3, [r3, #12]
 8017176:	60fb      	str	r3, [r7, #12]
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d1e9      	bne.n	8017152 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801717e:	68bb      	ldr	r3, [r7, #8]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d002      	beq.n	801718a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017184:	68b8      	ldr	r0, [r7, #8]
 8017186:	f7ff f833 	bl	80161f0 <tcp_abort>
  }
}
 801718a:	bf00      	nop
 801718c:	3710      	adds	r7, #16
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}
 8017192:	bf00      	nop
 8017194:	2001ace8 	.word	0x2001ace8
 8017198:	2001acd8 	.word	0x2001acd8

0801719c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b082      	sub	sp, #8
 80171a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80171a2:	4b10      	ldr	r3, [pc, #64]	; (80171e4 <tcp_handle_closepend+0x48>)
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80171a8:	e014      	b.n	80171d4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	68db      	ldr	r3, [r3, #12]
 80171ae:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	8b5b      	ldrh	r3, [r3, #26]
 80171b4:	f003 0308 	and.w	r3, r3, #8
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d009      	beq.n	80171d0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	8b5b      	ldrh	r3, [r3, #26]
 80171c0:	f023 0308 	bic.w	r3, r3, #8
 80171c4:	b29a      	uxth	r2, r3
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f7fe fe60 	bl	8015e90 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d1e7      	bne.n	80171aa <tcp_handle_closepend+0xe>
  }
}
 80171da:	bf00      	nop
 80171dc:	bf00      	nop
 80171de:	3708      	adds	r7, #8
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	2001ace4 	.word	0x2001ace4

080171e8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b084      	sub	sp, #16
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	4603      	mov	r3, r0
 80171f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80171f2:	2001      	movs	r0, #1
 80171f4:	f7fd faf2 	bl	80147dc <memp_malloc>
 80171f8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d126      	bne.n	801724e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017200:	f7ff ffcc 	bl	801719c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017204:	f7ff ff9a 	bl	801713c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017208:	2001      	movs	r0, #1
 801720a:	f7fd fae7 	bl	80147dc <memp_malloc>
 801720e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d11b      	bne.n	801724e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017216:	2009      	movs	r0, #9
 8017218:	f7ff ff46 	bl	80170a8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801721c:	2001      	movs	r0, #1
 801721e:	f7fd fadd 	bl	80147dc <memp_malloc>
 8017222:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d111      	bne.n	801724e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801722a:	2008      	movs	r0, #8
 801722c:	f7ff ff3c 	bl	80170a8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017230:	2001      	movs	r0, #1
 8017232:	f7fd fad3 	bl	80147dc <memp_malloc>
 8017236:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d107      	bne.n	801724e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801723e:	79fb      	ldrb	r3, [r7, #7]
 8017240:	4618      	mov	r0, r3
 8017242:	f7ff fee3 	bl	801700c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017246:	2001      	movs	r0, #1
 8017248:	f7fd fac8 	bl	80147dc <memp_malloc>
 801724c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d03f      	beq.n	80172d4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017254:	229c      	movs	r2, #156	; 0x9c
 8017256:	2100      	movs	r1, #0
 8017258:	68f8      	ldr	r0, [r7, #12]
 801725a:	f00c fbc2 	bl	80239e2 <memset>
    pcb->prio = prio;
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	79fa      	ldrb	r2, [r7, #7]
 8017262:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801726a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017274:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	22ff      	movs	r2, #255	; 0xff
 8017282:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	f44f 7206 	mov.w	r2, #536	; 0x218
 801728a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	2206      	movs	r2, #6
 8017290:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	2206      	movs	r2, #6
 8017298:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80172a0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	2201      	movs	r2, #1
 80172a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80172aa:	4b0d      	ldr	r3, [pc, #52]	; (80172e0 <tcp_alloc+0xf8>)
 80172ac:	681a      	ldr	r2, [r3, #0]
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80172b2:	4b0c      	ldr	r3, [pc, #48]	; (80172e4 <tcp_alloc+0xfc>)
 80172b4:	781a      	ldrb	r2, [r3, #0]
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80172c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	4a08      	ldr	r2, [pc, #32]	; (80172e8 <tcp_alloc+0x100>)
 80172c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	4a07      	ldr	r2, [pc, #28]	; (80172ec <tcp_alloc+0x104>)
 80172d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80172d4:	68fb      	ldr	r3, [r7, #12]
}
 80172d6:	4618      	mov	r0, r3
 80172d8:	3710      	adds	r7, #16
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}
 80172de:	bf00      	nop
 80172e0:	2001acd8 	.word	0x2001acd8
 80172e4:	2001acee 	.word	0x2001acee
 80172e8:	08016fa1 	.word	0x08016fa1
 80172ec:	006ddd00 	.word	0x006ddd00

080172f0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b084      	sub	sp, #16
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	4603      	mov	r3, r0
 80172f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80172fa:	2040      	movs	r0, #64	; 0x40
 80172fc:	f7ff ff74 	bl	80171e8 <tcp_alloc>
 8017300:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017302:	68fb      	ldr	r3, [r7, #12]
}
 8017304:	4618      	mov	r0, r3
 8017306:	3710      	adds	r7, #16
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}

0801730c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801730c:	b480      	push	{r7}
 801730e:	b083      	sub	sp, #12
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
 8017314:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d002      	beq.n	8017322 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	683a      	ldr	r2, [r7, #0]
 8017320:	611a      	str	r2, [r3, #16]
  }
}
 8017322:	bf00      	nop
 8017324:	370c      	adds	r7, #12
 8017326:	46bd      	mov	sp, r7
 8017328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732c:	4770      	bx	lr
	...

08017330 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b082      	sub	sp, #8
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d00e      	beq.n	801735e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	7d1b      	ldrb	r3, [r3, #20]
 8017344:	2b01      	cmp	r3, #1
 8017346:	d106      	bne.n	8017356 <tcp_recv+0x26>
 8017348:	4b07      	ldr	r3, [pc, #28]	; (8017368 <tcp_recv+0x38>)
 801734a:	f240 72df 	movw	r2, #2015	; 0x7df
 801734e:	4907      	ldr	r1, [pc, #28]	; (801736c <tcp_recv+0x3c>)
 8017350:	4807      	ldr	r0, [pc, #28]	; (8017370 <tcp_recv+0x40>)
 8017352:	f00d fa5d 	bl	8024810 <iprintf>
    pcb->recv = recv;
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	683a      	ldr	r2, [r7, #0]
 801735a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801735e:	bf00      	nop
 8017360:	3708      	adds	r7, #8
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}
 8017366:	bf00      	nop
 8017368:	0802acac 	.word	0x0802acac
 801736c:	0802b248 	.word	0x0802b248
 8017370:	0802acf0 	.word	0x0802acf0

08017374 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b082      	sub	sp, #8
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
 801737c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d00e      	beq.n	80173a2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	7d1b      	ldrb	r3, [r3, #20]
 8017388:	2b01      	cmp	r3, #1
 801738a:	d106      	bne.n	801739a <tcp_sent+0x26>
 801738c:	4b07      	ldr	r3, [pc, #28]	; (80173ac <tcp_sent+0x38>)
 801738e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8017392:	4907      	ldr	r1, [pc, #28]	; (80173b0 <tcp_sent+0x3c>)
 8017394:	4807      	ldr	r0, [pc, #28]	; (80173b4 <tcp_sent+0x40>)
 8017396:	f00d fa3b 	bl	8024810 <iprintf>
    pcb->sent = sent;
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	683a      	ldr	r2, [r7, #0]
 801739e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80173a2:	bf00      	nop
 80173a4:	3708      	adds	r7, #8
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
 80173aa:	bf00      	nop
 80173ac:	0802acac 	.word	0x0802acac
 80173b0:	0802b270 	.word	0x0802b270
 80173b4:	0802acf0 	.word	0x0802acf0

080173b8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b082      	sub	sp, #8
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
 80173c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d00e      	beq.n	80173e6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	7d1b      	ldrb	r3, [r3, #20]
 80173cc:	2b01      	cmp	r3, #1
 80173ce:	d106      	bne.n	80173de <tcp_err+0x26>
 80173d0:	4b07      	ldr	r3, [pc, #28]	; (80173f0 <tcp_err+0x38>)
 80173d2:	f640 020d 	movw	r2, #2061	; 0x80d
 80173d6:	4907      	ldr	r1, [pc, #28]	; (80173f4 <tcp_err+0x3c>)
 80173d8:	4807      	ldr	r0, [pc, #28]	; (80173f8 <tcp_err+0x40>)
 80173da:	f00d fa19 	bl	8024810 <iprintf>
    pcb->errf = err;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	683a      	ldr	r2, [r7, #0]
 80173e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80173e6:	bf00      	nop
 80173e8:	3708      	adds	r7, #8
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd80      	pop	{r7, pc}
 80173ee:	bf00      	nop
 80173f0:	0802acac 	.word	0x0802acac
 80173f4:	0802b298 	.word	0x0802b298
 80173f8:	0802acf0 	.word	0x0802acf0

080173fc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80173fc:	b480      	push	{r7}
 80173fe:	b085      	sub	sp, #20
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
 8017404:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d008      	beq.n	801741e <tcp_accept+0x22>
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	7d1b      	ldrb	r3, [r3, #20]
 8017410:	2b01      	cmp	r3, #1
 8017412:	d104      	bne.n	801741e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	683a      	ldr	r2, [r7, #0]
 801741c:	619a      	str	r2, [r3, #24]
  }
}
 801741e:	bf00      	nop
 8017420:	3714      	adds	r7, #20
 8017422:	46bd      	mov	sp, r7
 8017424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017428:	4770      	bx	lr
	...

0801742c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b084      	sub	sp, #16
 8017430:	af00      	add	r7, sp, #0
 8017432:	60f8      	str	r0, [r7, #12]
 8017434:	60b9      	str	r1, [r7, #8]
 8017436:	4613      	mov	r3, r2
 8017438:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d107      	bne.n	8017450 <tcp_poll+0x24>
 8017440:	4b0e      	ldr	r3, [pc, #56]	; (801747c <tcp_poll+0x50>)
 8017442:	f640 023d 	movw	r2, #2109	; 0x83d
 8017446:	490e      	ldr	r1, [pc, #56]	; (8017480 <tcp_poll+0x54>)
 8017448:	480e      	ldr	r0, [pc, #56]	; (8017484 <tcp_poll+0x58>)
 801744a:	f00d f9e1 	bl	8024810 <iprintf>
 801744e:	e011      	b.n	8017474 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	7d1b      	ldrb	r3, [r3, #20]
 8017454:	2b01      	cmp	r3, #1
 8017456:	d106      	bne.n	8017466 <tcp_poll+0x3a>
 8017458:	4b08      	ldr	r3, [pc, #32]	; (801747c <tcp_poll+0x50>)
 801745a:	f640 023e 	movw	r2, #2110	; 0x83e
 801745e:	490a      	ldr	r1, [pc, #40]	; (8017488 <tcp_poll+0x5c>)
 8017460:	4808      	ldr	r0, [pc, #32]	; (8017484 <tcp_poll+0x58>)
 8017462:	f00d f9d5 	bl	8024810 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	68ba      	ldr	r2, [r7, #8]
 801746a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	79fa      	ldrb	r2, [r7, #7]
 8017472:	775a      	strb	r2, [r3, #29]
}
 8017474:	3710      	adds	r7, #16
 8017476:	46bd      	mov	sp, r7
 8017478:	bd80      	pop	{r7, pc}
 801747a:	bf00      	nop
 801747c:	0802acac 	.word	0x0802acac
 8017480:	0802b2c0 	.word	0x0802b2c0
 8017484:	0802acf0 	.word	0x0802acf0
 8017488:	0802b2d8 	.word	0x0802b2d8

0801748c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b082      	sub	sp, #8
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d107      	bne.n	80174aa <tcp_pcb_purge+0x1e>
 801749a:	4b21      	ldr	r3, [pc, #132]	; (8017520 <tcp_pcb_purge+0x94>)
 801749c:	f640 0251 	movw	r2, #2129	; 0x851
 80174a0:	4920      	ldr	r1, [pc, #128]	; (8017524 <tcp_pcb_purge+0x98>)
 80174a2:	4821      	ldr	r0, [pc, #132]	; (8017528 <tcp_pcb_purge+0x9c>)
 80174a4:	f00d f9b4 	bl	8024810 <iprintf>
 80174a8:	e037      	b.n	801751a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	7d1b      	ldrb	r3, [r3, #20]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d033      	beq.n	801751a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80174b6:	2b0a      	cmp	r3, #10
 80174b8:	d02f      	beq.n	801751a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80174be:	2b01      	cmp	r3, #1
 80174c0:	d02b      	beq.n	801751a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d007      	beq.n	80174da <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7fe f89e 	bl	8015610 <pbuf_free>
      pcb->refused_data = NULL;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2200      	movs	r2, #0
 80174d8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d002      	beq.n	80174e8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	f000 f986 	bl	80177f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80174ee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174f4:	4618      	mov	r0, r3
 80174f6:	f7ff fcf9 	bl	8016eec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174fe:	4618      	mov	r0, r3
 8017500:	f7ff fcf4 	bl	8016eec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	2200      	movs	r2, #0
 8017508:	66da      	str	r2, [r3, #108]	; 0x6c
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	2200      	movs	r2, #0
 8017516:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801751a:	3708      	adds	r7, #8
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}
 8017520:	0802acac 	.word	0x0802acac
 8017524:	0802b2f8 	.word	0x0802b2f8
 8017528:	0802acf0 	.word	0x0802acf0

0801752c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b084      	sub	sp, #16
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017536:	683b      	ldr	r3, [r7, #0]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d106      	bne.n	801754a <tcp_pcb_remove+0x1e>
 801753c:	4b3e      	ldr	r3, [pc, #248]	; (8017638 <tcp_pcb_remove+0x10c>)
 801753e:	f640 0283 	movw	r2, #2179	; 0x883
 8017542:	493e      	ldr	r1, [pc, #248]	; (801763c <tcp_pcb_remove+0x110>)
 8017544:	483e      	ldr	r0, [pc, #248]	; (8017640 <tcp_pcb_remove+0x114>)
 8017546:	f00d f963 	bl	8024810 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d106      	bne.n	801755e <tcp_pcb_remove+0x32>
 8017550:	4b39      	ldr	r3, [pc, #228]	; (8017638 <tcp_pcb_remove+0x10c>)
 8017552:	f640 0284 	movw	r2, #2180	; 0x884
 8017556:	493b      	ldr	r1, [pc, #236]	; (8017644 <tcp_pcb_remove+0x118>)
 8017558:	4839      	ldr	r0, [pc, #228]	; (8017640 <tcp_pcb_remove+0x114>)
 801755a:	f00d f959 	bl	8024810 <iprintf>

  TCP_RMV(pcblist, pcb);
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	683a      	ldr	r2, [r7, #0]
 8017564:	429a      	cmp	r2, r3
 8017566:	d105      	bne.n	8017574 <tcp_pcb_remove+0x48>
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	68da      	ldr	r2, [r3, #12]
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	601a      	str	r2, [r3, #0]
 8017572:	e013      	b.n	801759c <tcp_pcb_remove+0x70>
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	60fb      	str	r3, [r7, #12]
 801757a:	e00c      	b.n	8017596 <tcp_pcb_remove+0x6a>
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	68db      	ldr	r3, [r3, #12]
 8017580:	683a      	ldr	r2, [r7, #0]
 8017582:	429a      	cmp	r2, r3
 8017584:	d104      	bne.n	8017590 <tcp_pcb_remove+0x64>
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	68da      	ldr	r2, [r3, #12]
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	60da      	str	r2, [r3, #12]
 801758e:	e005      	b.n	801759c <tcp_pcb_remove+0x70>
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	68db      	ldr	r3, [r3, #12]
 8017594:	60fb      	str	r3, [r7, #12]
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d1ef      	bne.n	801757c <tcp_pcb_remove+0x50>
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	2200      	movs	r2, #0
 80175a0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80175a2:	6838      	ldr	r0, [r7, #0]
 80175a4:	f7ff ff72 	bl	801748c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	7d1b      	ldrb	r3, [r3, #20]
 80175ac:	2b0a      	cmp	r3, #10
 80175ae:	d013      	beq.n	80175d8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80175b4:	2b01      	cmp	r3, #1
 80175b6:	d00f      	beq.n	80175d8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80175b8:	683b      	ldr	r3, [r7, #0]
 80175ba:	8b5b      	ldrh	r3, [r3, #26]
 80175bc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d009      	beq.n	80175d8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	8b5b      	ldrh	r3, [r3, #26]
 80175c8:	f043 0302 	orr.w	r3, r3, #2
 80175cc:	b29a      	uxth	r2, r3
 80175ce:	683b      	ldr	r3, [r7, #0]
 80175d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80175d2:	6838      	ldr	r0, [r7, #0]
 80175d4:	f003 fbc6 	bl	801ad64 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80175d8:	683b      	ldr	r3, [r7, #0]
 80175da:	7d1b      	ldrb	r3, [r3, #20]
 80175dc:	2b01      	cmp	r3, #1
 80175de:	d020      	beq.n	8017622 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80175e0:	683b      	ldr	r3, [r7, #0]
 80175e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d006      	beq.n	80175f6 <tcp_pcb_remove+0xca>
 80175e8:	4b13      	ldr	r3, [pc, #76]	; (8017638 <tcp_pcb_remove+0x10c>)
 80175ea:	f640 0293 	movw	r2, #2195	; 0x893
 80175ee:	4916      	ldr	r1, [pc, #88]	; (8017648 <tcp_pcb_remove+0x11c>)
 80175f0:	4813      	ldr	r0, [pc, #76]	; (8017640 <tcp_pcb_remove+0x114>)
 80175f2:	f00d f90d 	bl	8024810 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d006      	beq.n	801760c <tcp_pcb_remove+0xe0>
 80175fe:	4b0e      	ldr	r3, [pc, #56]	; (8017638 <tcp_pcb_remove+0x10c>)
 8017600:	f640 0294 	movw	r2, #2196	; 0x894
 8017604:	4911      	ldr	r1, [pc, #68]	; (801764c <tcp_pcb_remove+0x120>)
 8017606:	480e      	ldr	r0, [pc, #56]	; (8017640 <tcp_pcb_remove+0x114>)
 8017608:	f00d f902 	bl	8024810 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017610:	2b00      	cmp	r3, #0
 8017612:	d006      	beq.n	8017622 <tcp_pcb_remove+0xf6>
 8017614:	4b08      	ldr	r3, [pc, #32]	; (8017638 <tcp_pcb_remove+0x10c>)
 8017616:	f640 0296 	movw	r2, #2198	; 0x896
 801761a:	490d      	ldr	r1, [pc, #52]	; (8017650 <tcp_pcb_remove+0x124>)
 801761c:	4808      	ldr	r0, [pc, #32]	; (8017640 <tcp_pcb_remove+0x114>)
 801761e:	f00d f8f7 	bl	8024810 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	2200      	movs	r2, #0
 8017626:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017628:	683b      	ldr	r3, [r7, #0]
 801762a:	2200      	movs	r2, #0
 801762c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801762e:	bf00      	nop
 8017630:	3710      	adds	r7, #16
 8017632:	46bd      	mov	sp, r7
 8017634:	bd80      	pop	{r7, pc}
 8017636:	bf00      	nop
 8017638:	0802acac 	.word	0x0802acac
 801763c:	0802b314 	.word	0x0802b314
 8017640:	0802acf0 	.word	0x0802acf0
 8017644:	0802b330 	.word	0x0802b330
 8017648:	0802b350 	.word	0x0802b350
 801764c:	0802b368 	.word	0x0802b368
 8017650:	0802b384 	.word	0x0802b384

08017654 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b082      	sub	sp, #8
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d106      	bne.n	8017670 <tcp_next_iss+0x1c>
 8017662:	4b0a      	ldr	r3, [pc, #40]	; (801768c <tcp_next_iss+0x38>)
 8017664:	f640 02af 	movw	r2, #2223	; 0x8af
 8017668:	4909      	ldr	r1, [pc, #36]	; (8017690 <tcp_next_iss+0x3c>)
 801766a:	480a      	ldr	r0, [pc, #40]	; (8017694 <tcp_next_iss+0x40>)
 801766c:	f00d f8d0 	bl	8024810 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017670:	4b09      	ldr	r3, [pc, #36]	; (8017698 <tcp_next_iss+0x44>)
 8017672:	681a      	ldr	r2, [r3, #0]
 8017674:	4b09      	ldr	r3, [pc, #36]	; (801769c <tcp_next_iss+0x48>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	4413      	add	r3, r2
 801767a:	4a07      	ldr	r2, [pc, #28]	; (8017698 <tcp_next_iss+0x44>)
 801767c:	6013      	str	r3, [r2, #0]
  return iss;
 801767e:	4b06      	ldr	r3, [pc, #24]	; (8017698 <tcp_next_iss+0x44>)
 8017680:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017682:	4618      	mov	r0, r3
 8017684:	3708      	adds	r7, #8
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}
 801768a:	bf00      	nop
 801768c:	0802acac 	.word	0x0802acac
 8017690:	0802b39c 	.word	0x0802b39c
 8017694:	0802acf0 	.word	0x0802acf0
 8017698:	200000f4 	.word	0x200000f4
 801769c:	2001acd8 	.word	0x2001acd8

080176a0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b086      	sub	sp, #24
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	4603      	mov	r3, r0
 80176a8:	60b9      	str	r1, [r7, #8]
 80176aa:	607a      	str	r2, [r7, #4]
 80176ac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d106      	bne.n	80176c2 <tcp_eff_send_mss_netif+0x22>
 80176b4:	4b14      	ldr	r3, [pc, #80]	; (8017708 <tcp_eff_send_mss_netif+0x68>)
 80176b6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80176ba:	4914      	ldr	r1, [pc, #80]	; (801770c <tcp_eff_send_mss_netif+0x6c>)
 80176bc:	4814      	ldr	r0, [pc, #80]	; (8017710 <tcp_eff_send_mss_netif+0x70>)
 80176be:	f00d f8a7 	bl	8024810 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80176c2:	68bb      	ldr	r3, [r7, #8]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d101      	bne.n	80176cc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80176c8:	89fb      	ldrh	r3, [r7, #14]
 80176ca:	e019      	b.n	8017700 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80176d0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80176d2:	8afb      	ldrh	r3, [r7, #22]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d012      	beq.n	80176fe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80176d8:	2328      	movs	r3, #40	; 0x28
 80176da:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80176dc:	8afa      	ldrh	r2, [r7, #22]
 80176de:	8abb      	ldrh	r3, [r7, #20]
 80176e0:	429a      	cmp	r2, r3
 80176e2:	d904      	bls.n	80176ee <tcp_eff_send_mss_netif+0x4e>
 80176e4:	8afa      	ldrh	r2, [r7, #22]
 80176e6:	8abb      	ldrh	r3, [r7, #20]
 80176e8:	1ad3      	subs	r3, r2, r3
 80176ea:	b29b      	uxth	r3, r3
 80176ec:	e000      	b.n	80176f0 <tcp_eff_send_mss_netif+0x50>
 80176ee:	2300      	movs	r3, #0
 80176f0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80176f2:	8a7a      	ldrh	r2, [r7, #18]
 80176f4:	89fb      	ldrh	r3, [r7, #14]
 80176f6:	4293      	cmp	r3, r2
 80176f8:	bf28      	it	cs
 80176fa:	4613      	movcs	r3, r2
 80176fc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80176fe:	89fb      	ldrh	r3, [r7, #14]
}
 8017700:	4618      	mov	r0, r3
 8017702:	3718      	adds	r7, #24
 8017704:	46bd      	mov	sp, r7
 8017706:	bd80      	pop	{r7, pc}
 8017708:	0802acac 	.word	0x0802acac
 801770c:	0802b3b8 	.word	0x0802b3b8
 8017710:	0802acf0 	.word	0x0802acf0

08017714 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b084      	sub	sp, #16
 8017718:	af00      	add	r7, sp, #0
 801771a:	6078      	str	r0, [r7, #4]
 801771c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801771e:	683b      	ldr	r3, [r7, #0]
 8017720:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d119      	bne.n	801775c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8017728:	4b10      	ldr	r3, [pc, #64]	; (801776c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801772a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801772e:	4910      	ldr	r1, [pc, #64]	; (8017770 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8017730:	4810      	ldr	r0, [pc, #64]	; (8017774 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8017732:	f00d f86d 	bl	8024810 <iprintf>

  while (pcb != NULL) {
 8017736:	e011      	b.n	801775c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	681a      	ldr	r2, [r3, #0]
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	429a      	cmp	r2, r3
 8017742:	d108      	bne.n	8017756 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	68db      	ldr	r3, [r3, #12]
 8017748:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801774a:	68f8      	ldr	r0, [r7, #12]
 801774c:	f7fe fd50 	bl	80161f0 <tcp_abort>
      pcb = next;
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	60fb      	str	r3, [r7, #12]
 8017754:	e002      	b.n	801775c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	68db      	ldr	r3, [r3, #12]
 801775a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d1ea      	bne.n	8017738 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017762:	bf00      	nop
 8017764:	bf00      	nop
 8017766:	3710      	adds	r7, #16
 8017768:	46bd      	mov	sp, r7
 801776a:	bd80      	pop	{r7, pc}
 801776c:	0802acac 	.word	0x0802acac
 8017770:	0802b3e0 	.word	0x0802b3e0
 8017774:	0802acf0 	.word	0x0802acf0

08017778 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b084      	sub	sp, #16
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
 8017780:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d02a      	beq.n	80177de <tcp_netif_ip_addr_changed+0x66>
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d026      	beq.n	80177de <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017790:	4b15      	ldr	r3, [pc, #84]	; (80177e8 <tcp_netif_ip_addr_changed+0x70>)
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	4619      	mov	r1, r3
 8017796:	6878      	ldr	r0, [r7, #4]
 8017798:	f7ff ffbc 	bl	8017714 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801779c:	4b13      	ldr	r3, [pc, #76]	; (80177ec <tcp_netif_ip_addr_changed+0x74>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	4619      	mov	r1, r3
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f7ff ffb6 	bl	8017714 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d017      	beq.n	80177de <tcp_netif_ip_addr_changed+0x66>
 80177ae:	683b      	ldr	r3, [r7, #0]
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d013      	beq.n	80177de <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80177b6:	4b0e      	ldr	r3, [pc, #56]	; (80177f0 <tcp_netif_ip_addr_changed+0x78>)
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	60fb      	str	r3, [r7, #12]
 80177bc:	e00c      	b.n	80177d8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	681a      	ldr	r2, [r3, #0]
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d103      	bne.n	80177d2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	681a      	ldr	r2, [r3, #0]
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	68db      	ldr	r3, [r3, #12]
 80177d6:	60fb      	str	r3, [r7, #12]
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d1ef      	bne.n	80177be <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80177de:	bf00      	nop
 80177e0:	3710      	adds	r7, #16
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}
 80177e6:	bf00      	nop
 80177e8:	2001ace4 	.word	0x2001ace4
 80177ec:	2001acdc 	.word	0x2001acdc
 80177f0:	2001ace0 	.word	0x2001ace0

080177f4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b082      	sub	sp, #8
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017800:	2b00      	cmp	r3, #0
 8017802:	d007      	beq.n	8017814 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017808:	4618      	mov	r0, r3
 801780a:	f7ff fb6f 	bl	8016eec <tcp_segs_free>
    pcb->ooseq = NULL;
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	2200      	movs	r2, #0
 8017812:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8017814:	bf00      	nop
 8017816:	3708      	adds	r7, #8
 8017818:	46bd      	mov	sp, r7
 801781a:	bd80      	pop	{r7, pc}

0801781c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801781c:	b590      	push	{r4, r7, lr}
 801781e:	b08d      	sub	sp, #52	; 0x34
 8017820:	af04      	add	r7, sp, #16
 8017822:	6078      	str	r0, [r7, #4]
 8017824:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d105      	bne.n	8017838 <tcp_input+0x1c>
 801782c:	4b9b      	ldr	r3, [pc, #620]	; (8017a9c <tcp_input+0x280>)
 801782e:	2283      	movs	r2, #131	; 0x83
 8017830:	499b      	ldr	r1, [pc, #620]	; (8017aa0 <tcp_input+0x284>)
 8017832:	489c      	ldr	r0, [pc, #624]	; (8017aa4 <tcp_input+0x288>)
 8017834:	f00c ffec 	bl	8024810 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	685b      	ldr	r3, [r3, #4]
 801783c:	4a9a      	ldr	r2, [pc, #616]	; (8017aa8 <tcp_input+0x28c>)
 801783e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	895b      	ldrh	r3, [r3, #10]
 8017844:	2b13      	cmp	r3, #19
 8017846:	f240 83d1 	bls.w	8017fec <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801784a:	4b98      	ldr	r3, [pc, #608]	; (8017aac <tcp_input+0x290>)
 801784c:	695b      	ldr	r3, [r3, #20]
 801784e:	4a97      	ldr	r2, [pc, #604]	; (8017aac <tcp_input+0x290>)
 8017850:	6812      	ldr	r2, [r2, #0]
 8017852:	4611      	mov	r1, r2
 8017854:	4618      	mov	r0, r3
 8017856:	f006 f9e5 	bl	801dc24 <ip4_addr_isbroadcast_u32>
 801785a:	4603      	mov	r3, r0
 801785c:	2b00      	cmp	r3, #0
 801785e:	f040 83c7 	bne.w	8017ff0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017862:	4b92      	ldr	r3, [pc, #584]	; (8017aac <tcp_input+0x290>)
 8017864:	695b      	ldr	r3, [r3, #20]
 8017866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801786a:	2be0      	cmp	r3, #224	; 0xe0
 801786c:	f000 83c0 	beq.w	8017ff0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8017870:	4b8d      	ldr	r3, [pc, #564]	; (8017aa8 <tcp_input+0x28c>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	899b      	ldrh	r3, [r3, #12]
 8017876:	b29b      	uxth	r3, r3
 8017878:	4618      	mov	r0, r3
 801787a:	f7fc fad7 	bl	8013e2c <lwip_htons>
 801787e:	4603      	mov	r3, r0
 8017880:	0b1b      	lsrs	r3, r3, #12
 8017882:	b29b      	uxth	r3, r3
 8017884:	b2db      	uxtb	r3, r3
 8017886:	009b      	lsls	r3, r3, #2
 8017888:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801788a:	7cbb      	ldrb	r3, [r7, #18]
 801788c:	2b13      	cmp	r3, #19
 801788e:	f240 83b1 	bls.w	8017ff4 <tcp_input+0x7d8>
 8017892:	7cbb      	ldrb	r3, [r7, #18]
 8017894:	b29a      	uxth	r2, r3
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	891b      	ldrh	r3, [r3, #8]
 801789a:	429a      	cmp	r2, r3
 801789c:	f200 83aa 	bhi.w	8017ff4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80178a0:	7cbb      	ldrb	r3, [r7, #18]
 80178a2:	b29b      	uxth	r3, r3
 80178a4:	3b14      	subs	r3, #20
 80178a6:	b29a      	uxth	r2, r3
 80178a8:	4b81      	ldr	r3, [pc, #516]	; (8017ab0 <tcp_input+0x294>)
 80178aa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80178ac:	4b81      	ldr	r3, [pc, #516]	; (8017ab4 <tcp_input+0x298>)
 80178ae:	2200      	movs	r2, #0
 80178b0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	895a      	ldrh	r2, [r3, #10]
 80178b6:	7cbb      	ldrb	r3, [r7, #18]
 80178b8:	b29b      	uxth	r3, r3
 80178ba:	429a      	cmp	r2, r3
 80178bc:	d309      	bcc.n	80178d2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80178be:	4b7c      	ldr	r3, [pc, #496]	; (8017ab0 <tcp_input+0x294>)
 80178c0:	881a      	ldrh	r2, [r3, #0]
 80178c2:	4b7d      	ldr	r3, [pc, #500]	; (8017ab8 <tcp_input+0x29c>)
 80178c4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80178c6:	7cbb      	ldrb	r3, [r7, #18]
 80178c8:	4619      	mov	r1, r3
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	f7fd fe1a 	bl	8015504 <pbuf_remove_header>
 80178d0:	e04e      	b.n	8017970 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d105      	bne.n	80178e6 <tcp_input+0xca>
 80178da:	4b70      	ldr	r3, [pc, #448]	; (8017a9c <tcp_input+0x280>)
 80178dc:	22c2      	movs	r2, #194	; 0xc2
 80178de:	4977      	ldr	r1, [pc, #476]	; (8017abc <tcp_input+0x2a0>)
 80178e0:	4870      	ldr	r0, [pc, #448]	; (8017aa4 <tcp_input+0x288>)
 80178e2:	f00c ff95 	bl	8024810 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80178e6:	2114      	movs	r1, #20
 80178e8:	6878      	ldr	r0, [r7, #4]
 80178ea:	f7fd fe0b 	bl	8015504 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	895a      	ldrh	r2, [r3, #10]
 80178f2:	4b71      	ldr	r3, [pc, #452]	; (8017ab8 <tcp_input+0x29c>)
 80178f4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80178f6:	4b6e      	ldr	r3, [pc, #440]	; (8017ab0 <tcp_input+0x294>)
 80178f8:	881a      	ldrh	r2, [r3, #0]
 80178fa:	4b6f      	ldr	r3, [pc, #444]	; (8017ab8 <tcp_input+0x29c>)
 80178fc:	881b      	ldrh	r3, [r3, #0]
 80178fe:	1ad3      	subs	r3, r2, r3
 8017900:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8017902:	4b6d      	ldr	r3, [pc, #436]	; (8017ab8 <tcp_input+0x29c>)
 8017904:	881b      	ldrh	r3, [r3, #0]
 8017906:	4619      	mov	r1, r3
 8017908:	6878      	ldr	r0, [r7, #4]
 801790a:	f7fd fdfb 	bl	8015504 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	895b      	ldrh	r3, [r3, #10]
 8017914:	8a3a      	ldrh	r2, [r7, #16]
 8017916:	429a      	cmp	r2, r3
 8017918:	f200 836e 	bhi.w	8017ff8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	685b      	ldr	r3, [r3, #4]
 8017922:	4a64      	ldr	r2, [pc, #400]	; (8017ab4 <tcp_input+0x298>)
 8017924:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	8a3a      	ldrh	r2, [r7, #16]
 801792c:	4611      	mov	r1, r2
 801792e:	4618      	mov	r0, r3
 8017930:	f7fd fde8 	bl	8015504 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	891a      	ldrh	r2, [r3, #8]
 8017938:	8a3b      	ldrh	r3, [r7, #16]
 801793a:	1ad3      	subs	r3, r2, r3
 801793c:	b29a      	uxth	r2, r3
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	895b      	ldrh	r3, [r3, #10]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d005      	beq.n	8017956 <tcp_input+0x13a>
 801794a:	4b54      	ldr	r3, [pc, #336]	; (8017a9c <tcp_input+0x280>)
 801794c:	22df      	movs	r2, #223	; 0xdf
 801794e:	495c      	ldr	r1, [pc, #368]	; (8017ac0 <tcp_input+0x2a4>)
 8017950:	4854      	ldr	r0, [pc, #336]	; (8017aa4 <tcp_input+0x288>)
 8017952:	f00c ff5d 	bl	8024810 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	891a      	ldrh	r2, [r3, #8]
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	891b      	ldrh	r3, [r3, #8]
 8017960:	429a      	cmp	r2, r3
 8017962:	d005      	beq.n	8017970 <tcp_input+0x154>
 8017964:	4b4d      	ldr	r3, [pc, #308]	; (8017a9c <tcp_input+0x280>)
 8017966:	22e0      	movs	r2, #224	; 0xe0
 8017968:	4956      	ldr	r1, [pc, #344]	; (8017ac4 <tcp_input+0x2a8>)
 801796a:	484e      	ldr	r0, [pc, #312]	; (8017aa4 <tcp_input+0x288>)
 801796c:	f00c ff50 	bl	8024810 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017970:	4b4d      	ldr	r3, [pc, #308]	; (8017aa8 <tcp_input+0x28c>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	881b      	ldrh	r3, [r3, #0]
 8017976:	b29b      	uxth	r3, r3
 8017978:	4a4b      	ldr	r2, [pc, #300]	; (8017aa8 <tcp_input+0x28c>)
 801797a:	6814      	ldr	r4, [r2, #0]
 801797c:	4618      	mov	r0, r3
 801797e:	f7fc fa55 	bl	8013e2c <lwip_htons>
 8017982:	4603      	mov	r3, r0
 8017984:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017986:	4b48      	ldr	r3, [pc, #288]	; (8017aa8 <tcp_input+0x28c>)
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	885b      	ldrh	r3, [r3, #2]
 801798c:	b29b      	uxth	r3, r3
 801798e:	4a46      	ldr	r2, [pc, #280]	; (8017aa8 <tcp_input+0x28c>)
 8017990:	6814      	ldr	r4, [r2, #0]
 8017992:	4618      	mov	r0, r3
 8017994:	f7fc fa4a 	bl	8013e2c <lwip_htons>
 8017998:	4603      	mov	r3, r0
 801799a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801799c:	4b42      	ldr	r3, [pc, #264]	; (8017aa8 <tcp_input+0x28c>)
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	685b      	ldr	r3, [r3, #4]
 80179a2:	4a41      	ldr	r2, [pc, #260]	; (8017aa8 <tcp_input+0x28c>)
 80179a4:	6814      	ldr	r4, [r2, #0]
 80179a6:	4618      	mov	r0, r3
 80179a8:	f7fc fa55 	bl	8013e56 <lwip_htonl>
 80179ac:	4603      	mov	r3, r0
 80179ae:	6063      	str	r3, [r4, #4]
 80179b0:	6863      	ldr	r3, [r4, #4]
 80179b2:	4a45      	ldr	r2, [pc, #276]	; (8017ac8 <tcp_input+0x2ac>)
 80179b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80179b6:	4b3c      	ldr	r3, [pc, #240]	; (8017aa8 <tcp_input+0x28c>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	689b      	ldr	r3, [r3, #8]
 80179bc:	4a3a      	ldr	r2, [pc, #232]	; (8017aa8 <tcp_input+0x28c>)
 80179be:	6814      	ldr	r4, [r2, #0]
 80179c0:	4618      	mov	r0, r3
 80179c2:	f7fc fa48 	bl	8013e56 <lwip_htonl>
 80179c6:	4603      	mov	r3, r0
 80179c8:	60a3      	str	r3, [r4, #8]
 80179ca:	68a3      	ldr	r3, [r4, #8]
 80179cc:	4a3f      	ldr	r2, [pc, #252]	; (8017acc <tcp_input+0x2b0>)
 80179ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80179d0:	4b35      	ldr	r3, [pc, #212]	; (8017aa8 <tcp_input+0x28c>)
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	89db      	ldrh	r3, [r3, #14]
 80179d6:	b29b      	uxth	r3, r3
 80179d8:	4a33      	ldr	r2, [pc, #204]	; (8017aa8 <tcp_input+0x28c>)
 80179da:	6814      	ldr	r4, [r2, #0]
 80179dc:	4618      	mov	r0, r3
 80179de:	f7fc fa25 	bl	8013e2c <lwip_htons>
 80179e2:	4603      	mov	r3, r0
 80179e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80179e6:	4b30      	ldr	r3, [pc, #192]	; (8017aa8 <tcp_input+0x28c>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	899b      	ldrh	r3, [r3, #12]
 80179ec:	b29b      	uxth	r3, r3
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7fc fa1c 	bl	8013e2c <lwip_htons>
 80179f4:	4603      	mov	r3, r0
 80179f6:	b2db      	uxtb	r3, r3
 80179f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80179fc:	b2da      	uxtb	r2, r3
 80179fe:	4b34      	ldr	r3, [pc, #208]	; (8017ad0 <tcp_input+0x2b4>)
 8017a00:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	891a      	ldrh	r2, [r3, #8]
 8017a06:	4b33      	ldr	r3, [pc, #204]	; (8017ad4 <tcp_input+0x2b8>)
 8017a08:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017a0a:	4b31      	ldr	r3, [pc, #196]	; (8017ad0 <tcp_input+0x2b4>)
 8017a0c:	781b      	ldrb	r3, [r3, #0]
 8017a0e:	f003 0303 	and.w	r3, r3, #3
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d00c      	beq.n	8017a30 <tcp_input+0x214>
    tcplen++;
 8017a16:	4b2f      	ldr	r3, [pc, #188]	; (8017ad4 <tcp_input+0x2b8>)
 8017a18:	881b      	ldrh	r3, [r3, #0]
 8017a1a:	3301      	adds	r3, #1
 8017a1c:	b29a      	uxth	r2, r3
 8017a1e:	4b2d      	ldr	r3, [pc, #180]	; (8017ad4 <tcp_input+0x2b8>)
 8017a20:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	891a      	ldrh	r2, [r3, #8]
 8017a26:	4b2b      	ldr	r3, [pc, #172]	; (8017ad4 <tcp_input+0x2b8>)
 8017a28:	881b      	ldrh	r3, [r3, #0]
 8017a2a:	429a      	cmp	r2, r3
 8017a2c:	f200 82e6 	bhi.w	8017ffc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017a30:	2300      	movs	r3, #0
 8017a32:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a34:	4b28      	ldr	r3, [pc, #160]	; (8017ad8 <tcp_input+0x2bc>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	61fb      	str	r3, [r7, #28]
 8017a3a:	e09d      	b.n	8017b78 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017a3c:	69fb      	ldr	r3, [r7, #28]
 8017a3e:	7d1b      	ldrb	r3, [r3, #20]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d105      	bne.n	8017a50 <tcp_input+0x234>
 8017a44:	4b15      	ldr	r3, [pc, #84]	; (8017a9c <tcp_input+0x280>)
 8017a46:	22fb      	movs	r2, #251	; 0xfb
 8017a48:	4924      	ldr	r1, [pc, #144]	; (8017adc <tcp_input+0x2c0>)
 8017a4a:	4816      	ldr	r0, [pc, #88]	; (8017aa4 <tcp_input+0x288>)
 8017a4c:	f00c fee0 	bl	8024810 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017a50:	69fb      	ldr	r3, [r7, #28]
 8017a52:	7d1b      	ldrb	r3, [r3, #20]
 8017a54:	2b0a      	cmp	r3, #10
 8017a56:	d105      	bne.n	8017a64 <tcp_input+0x248>
 8017a58:	4b10      	ldr	r3, [pc, #64]	; (8017a9c <tcp_input+0x280>)
 8017a5a:	22fc      	movs	r2, #252	; 0xfc
 8017a5c:	4920      	ldr	r1, [pc, #128]	; (8017ae0 <tcp_input+0x2c4>)
 8017a5e:	4811      	ldr	r0, [pc, #68]	; (8017aa4 <tcp_input+0x288>)
 8017a60:	f00c fed6 	bl	8024810 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017a64:	69fb      	ldr	r3, [r7, #28]
 8017a66:	7d1b      	ldrb	r3, [r3, #20]
 8017a68:	2b01      	cmp	r3, #1
 8017a6a:	d105      	bne.n	8017a78 <tcp_input+0x25c>
 8017a6c:	4b0b      	ldr	r3, [pc, #44]	; (8017a9c <tcp_input+0x280>)
 8017a6e:	22fd      	movs	r2, #253	; 0xfd
 8017a70:	491c      	ldr	r1, [pc, #112]	; (8017ae4 <tcp_input+0x2c8>)
 8017a72:	480c      	ldr	r0, [pc, #48]	; (8017aa4 <tcp_input+0x288>)
 8017a74:	f00c fecc 	bl	8024810 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017a78:	69fb      	ldr	r3, [r7, #28]
 8017a7a:	7a1b      	ldrb	r3, [r3, #8]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d033      	beq.n	8017ae8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017a80:	69fb      	ldr	r3, [r7, #28]
 8017a82:	7a1a      	ldrb	r2, [r3, #8]
 8017a84:	4b09      	ldr	r3, [pc, #36]	; (8017aac <tcp_input+0x290>)
 8017a86:	685b      	ldr	r3, [r3, #4]
 8017a88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017a8c:	3301      	adds	r3, #1
 8017a8e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017a90:	429a      	cmp	r2, r3
 8017a92:	d029      	beq.n	8017ae8 <tcp_input+0x2cc>
      prev = pcb;
 8017a94:	69fb      	ldr	r3, [r7, #28]
 8017a96:	61bb      	str	r3, [r7, #24]
      continue;
 8017a98:	e06b      	b.n	8017b72 <tcp_input+0x356>
 8017a9a:	bf00      	nop
 8017a9c:	0802b414 	.word	0x0802b414
 8017aa0:	0802b448 	.word	0x0802b448
 8017aa4:	0802b460 	.word	0x0802b460
 8017aa8:	2001ad00 	.word	0x2001ad00
 8017aac:	20016f44 	.word	0x20016f44
 8017ab0:	2001ad04 	.word	0x2001ad04
 8017ab4:	2001ad08 	.word	0x2001ad08
 8017ab8:	2001ad06 	.word	0x2001ad06
 8017abc:	0802b488 	.word	0x0802b488
 8017ac0:	0802b498 	.word	0x0802b498
 8017ac4:	0802b4a4 	.word	0x0802b4a4
 8017ac8:	2001ad10 	.word	0x2001ad10
 8017acc:	2001ad14 	.word	0x2001ad14
 8017ad0:	2001ad1c 	.word	0x2001ad1c
 8017ad4:	2001ad1a 	.word	0x2001ad1a
 8017ad8:	2001ace4 	.word	0x2001ace4
 8017adc:	0802b4c4 	.word	0x0802b4c4
 8017ae0:	0802b4ec 	.word	0x0802b4ec
 8017ae4:	0802b518 	.word	0x0802b518
    }

    if (pcb->remote_port == tcphdr->src &&
 8017ae8:	69fb      	ldr	r3, [r7, #28]
 8017aea:	8b1a      	ldrh	r2, [r3, #24]
 8017aec:	4b72      	ldr	r3, [pc, #456]	; (8017cb8 <tcp_input+0x49c>)
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	881b      	ldrh	r3, [r3, #0]
 8017af2:	b29b      	uxth	r3, r3
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d13a      	bne.n	8017b6e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8017af8:	69fb      	ldr	r3, [r7, #28]
 8017afa:	8ada      	ldrh	r2, [r3, #22]
 8017afc:	4b6e      	ldr	r3, [pc, #440]	; (8017cb8 <tcp_input+0x49c>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	885b      	ldrh	r3, [r3, #2]
 8017b02:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d132      	bne.n	8017b6e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017b08:	69fb      	ldr	r3, [r7, #28]
 8017b0a:	685a      	ldr	r2, [r3, #4]
 8017b0c:	4b6b      	ldr	r3, [pc, #428]	; (8017cbc <tcp_input+0x4a0>)
 8017b0e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017b10:	429a      	cmp	r2, r3
 8017b12:	d12c      	bne.n	8017b6e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017b14:	69fb      	ldr	r3, [r7, #28]
 8017b16:	681a      	ldr	r2, [r3, #0]
 8017b18:	4b68      	ldr	r3, [pc, #416]	; (8017cbc <tcp_input+0x4a0>)
 8017b1a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017b1c:	429a      	cmp	r2, r3
 8017b1e:	d126      	bne.n	8017b6e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017b20:	69fb      	ldr	r3, [r7, #28]
 8017b22:	68db      	ldr	r3, [r3, #12]
 8017b24:	69fa      	ldr	r2, [r7, #28]
 8017b26:	429a      	cmp	r2, r3
 8017b28:	d106      	bne.n	8017b38 <tcp_input+0x31c>
 8017b2a:	4b65      	ldr	r3, [pc, #404]	; (8017cc0 <tcp_input+0x4a4>)
 8017b2c:	f240 120d 	movw	r2, #269	; 0x10d
 8017b30:	4964      	ldr	r1, [pc, #400]	; (8017cc4 <tcp_input+0x4a8>)
 8017b32:	4865      	ldr	r0, [pc, #404]	; (8017cc8 <tcp_input+0x4ac>)
 8017b34:	f00c fe6c 	bl	8024810 <iprintf>
      if (prev != NULL) {
 8017b38:	69bb      	ldr	r3, [r7, #24]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d00a      	beq.n	8017b54 <tcp_input+0x338>
        prev->next = pcb->next;
 8017b3e:	69fb      	ldr	r3, [r7, #28]
 8017b40:	68da      	ldr	r2, [r3, #12]
 8017b42:	69bb      	ldr	r3, [r7, #24]
 8017b44:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017b46:	4b61      	ldr	r3, [pc, #388]	; (8017ccc <tcp_input+0x4b0>)
 8017b48:	681a      	ldr	r2, [r3, #0]
 8017b4a:	69fb      	ldr	r3, [r7, #28]
 8017b4c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017b4e:	4a5f      	ldr	r2, [pc, #380]	; (8017ccc <tcp_input+0x4b0>)
 8017b50:	69fb      	ldr	r3, [r7, #28]
 8017b52:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017b54:	69fb      	ldr	r3, [r7, #28]
 8017b56:	68db      	ldr	r3, [r3, #12]
 8017b58:	69fa      	ldr	r2, [r7, #28]
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	d111      	bne.n	8017b82 <tcp_input+0x366>
 8017b5e:	4b58      	ldr	r3, [pc, #352]	; (8017cc0 <tcp_input+0x4a4>)
 8017b60:	f240 1215 	movw	r2, #277	; 0x115
 8017b64:	495a      	ldr	r1, [pc, #360]	; (8017cd0 <tcp_input+0x4b4>)
 8017b66:	4858      	ldr	r0, [pc, #352]	; (8017cc8 <tcp_input+0x4ac>)
 8017b68:	f00c fe52 	bl	8024810 <iprintf>
      break;
 8017b6c:	e009      	b.n	8017b82 <tcp_input+0x366>
    }
    prev = pcb;
 8017b6e:	69fb      	ldr	r3, [r7, #28]
 8017b70:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b72:	69fb      	ldr	r3, [r7, #28]
 8017b74:	68db      	ldr	r3, [r3, #12]
 8017b76:	61fb      	str	r3, [r7, #28]
 8017b78:	69fb      	ldr	r3, [r7, #28]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f47f af5e 	bne.w	8017a3c <tcp_input+0x220>
 8017b80:	e000      	b.n	8017b84 <tcp_input+0x368>
      break;
 8017b82:	bf00      	nop
  }

  if (pcb == NULL) {
 8017b84:	69fb      	ldr	r3, [r7, #28]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	f040 80aa 	bne.w	8017ce0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b8c:	4b51      	ldr	r3, [pc, #324]	; (8017cd4 <tcp_input+0x4b8>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	61fb      	str	r3, [r7, #28]
 8017b92:	e03f      	b.n	8017c14 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017b94:	69fb      	ldr	r3, [r7, #28]
 8017b96:	7d1b      	ldrb	r3, [r3, #20]
 8017b98:	2b0a      	cmp	r3, #10
 8017b9a:	d006      	beq.n	8017baa <tcp_input+0x38e>
 8017b9c:	4b48      	ldr	r3, [pc, #288]	; (8017cc0 <tcp_input+0x4a4>)
 8017b9e:	f240 121f 	movw	r2, #287	; 0x11f
 8017ba2:	494d      	ldr	r1, [pc, #308]	; (8017cd8 <tcp_input+0x4bc>)
 8017ba4:	4848      	ldr	r0, [pc, #288]	; (8017cc8 <tcp_input+0x4ac>)
 8017ba6:	f00c fe33 	bl	8024810 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017baa:	69fb      	ldr	r3, [r7, #28]
 8017bac:	7a1b      	ldrb	r3, [r3, #8]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d009      	beq.n	8017bc6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017bb2:	69fb      	ldr	r3, [r7, #28]
 8017bb4:	7a1a      	ldrb	r2, [r3, #8]
 8017bb6:	4b41      	ldr	r3, [pc, #260]	; (8017cbc <tcp_input+0x4a0>)
 8017bb8:	685b      	ldr	r3, [r3, #4]
 8017bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017bbe:	3301      	adds	r3, #1
 8017bc0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017bc2:	429a      	cmp	r2, r3
 8017bc4:	d122      	bne.n	8017c0c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8017bc6:	69fb      	ldr	r3, [r7, #28]
 8017bc8:	8b1a      	ldrh	r2, [r3, #24]
 8017bca:	4b3b      	ldr	r3, [pc, #236]	; (8017cb8 <tcp_input+0x49c>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	881b      	ldrh	r3, [r3, #0]
 8017bd0:	b29b      	uxth	r3, r3
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d11b      	bne.n	8017c0e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8017bd6:	69fb      	ldr	r3, [r7, #28]
 8017bd8:	8ada      	ldrh	r2, [r3, #22]
 8017bda:	4b37      	ldr	r3, [pc, #220]	; (8017cb8 <tcp_input+0x49c>)
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	885b      	ldrh	r3, [r3, #2]
 8017be0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d113      	bne.n	8017c0e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017be6:	69fb      	ldr	r3, [r7, #28]
 8017be8:	685a      	ldr	r2, [r3, #4]
 8017bea:	4b34      	ldr	r3, [pc, #208]	; (8017cbc <tcp_input+0x4a0>)
 8017bec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017bee:	429a      	cmp	r2, r3
 8017bf0:	d10d      	bne.n	8017c0e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017bf2:	69fb      	ldr	r3, [r7, #28]
 8017bf4:	681a      	ldr	r2, [r3, #0]
 8017bf6:	4b31      	ldr	r3, [pc, #196]	; (8017cbc <tcp_input+0x4a0>)
 8017bf8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017bfa:	429a      	cmp	r2, r3
 8017bfc:	d107      	bne.n	8017c0e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017bfe:	69f8      	ldr	r0, [r7, #28]
 8017c00:	f000 fb56 	bl	80182b0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017c04:	6878      	ldr	r0, [r7, #4]
 8017c06:	f7fd fd03 	bl	8015610 <pbuf_free>
        return;
 8017c0a:	e1fd      	b.n	8018008 <tcp_input+0x7ec>
        continue;
 8017c0c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c0e:	69fb      	ldr	r3, [r7, #28]
 8017c10:	68db      	ldr	r3, [r3, #12]
 8017c12:	61fb      	str	r3, [r7, #28]
 8017c14:	69fb      	ldr	r3, [r7, #28]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d1bc      	bne.n	8017b94 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017c1e:	4b2f      	ldr	r3, [pc, #188]	; (8017cdc <tcp_input+0x4c0>)
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	617b      	str	r3, [r7, #20]
 8017c24:	e02a      	b.n	8017c7c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017c26:	697b      	ldr	r3, [r7, #20]
 8017c28:	7a1b      	ldrb	r3, [r3, #8]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d00c      	beq.n	8017c48 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017c2e:	697b      	ldr	r3, [r7, #20]
 8017c30:	7a1a      	ldrb	r2, [r3, #8]
 8017c32:	4b22      	ldr	r3, [pc, #136]	; (8017cbc <tcp_input+0x4a0>)
 8017c34:	685b      	ldr	r3, [r3, #4]
 8017c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c3a:	3301      	adds	r3, #1
 8017c3c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017c3e:	429a      	cmp	r2, r3
 8017c40:	d002      	beq.n	8017c48 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8017c42:	697b      	ldr	r3, [r7, #20]
 8017c44:	61bb      	str	r3, [r7, #24]
        continue;
 8017c46:	e016      	b.n	8017c76 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017c48:	697b      	ldr	r3, [r7, #20]
 8017c4a:	8ada      	ldrh	r2, [r3, #22]
 8017c4c:	4b1a      	ldr	r3, [pc, #104]	; (8017cb8 <tcp_input+0x49c>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	885b      	ldrh	r3, [r3, #2]
 8017c52:	b29b      	uxth	r3, r3
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d10c      	bne.n	8017c72 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017c58:	697b      	ldr	r3, [r7, #20]
 8017c5a:	681a      	ldr	r2, [r3, #0]
 8017c5c:	4b17      	ldr	r3, [pc, #92]	; (8017cbc <tcp_input+0x4a0>)
 8017c5e:	695b      	ldr	r3, [r3, #20]
 8017c60:	429a      	cmp	r2, r3
 8017c62:	d00f      	beq.n	8017c84 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017c64:	697b      	ldr	r3, [r7, #20]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d00d      	beq.n	8017c86 <tcp_input+0x46a>
 8017c6a:	697b      	ldr	r3, [r7, #20]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d009      	beq.n	8017c86 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017c76:	697b      	ldr	r3, [r7, #20]
 8017c78:	68db      	ldr	r3, [r3, #12]
 8017c7a:	617b      	str	r3, [r7, #20]
 8017c7c:	697b      	ldr	r3, [r7, #20]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d1d1      	bne.n	8017c26 <tcp_input+0x40a>
 8017c82:	e000      	b.n	8017c86 <tcp_input+0x46a>
            break;
 8017c84:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8017c86:	697b      	ldr	r3, [r7, #20]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d029      	beq.n	8017ce0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017c8c:	69bb      	ldr	r3, [r7, #24]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d00a      	beq.n	8017ca8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017c92:	697b      	ldr	r3, [r7, #20]
 8017c94:	68da      	ldr	r2, [r3, #12]
 8017c96:	69bb      	ldr	r3, [r7, #24]
 8017c98:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017c9a:	4b10      	ldr	r3, [pc, #64]	; (8017cdc <tcp_input+0x4c0>)
 8017c9c:	681a      	ldr	r2, [r3, #0]
 8017c9e:	697b      	ldr	r3, [r7, #20]
 8017ca0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8017ca2:	4a0e      	ldr	r2, [pc, #56]	; (8017cdc <tcp_input+0x4c0>)
 8017ca4:	697b      	ldr	r3, [r7, #20]
 8017ca6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017ca8:	6978      	ldr	r0, [r7, #20]
 8017caa:	f000 fa03 	bl	80180b4 <tcp_listen_input>
      }
      pbuf_free(p);
 8017cae:	6878      	ldr	r0, [r7, #4]
 8017cb0:	f7fd fcae 	bl	8015610 <pbuf_free>
      return;
 8017cb4:	e1a8      	b.n	8018008 <tcp_input+0x7ec>
 8017cb6:	bf00      	nop
 8017cb8:	2001ad00 	.word	0x2001ad00
 8017cbc:	20016f44 	.word	0x20016f44
 8017cc0:	0802b414 	.word	0x0802b414
 8017cc4:	0802b540 	.word	0x0802b540
 8017cc8:	0802b460 	.word	0x0802b460
 8017ccc:	2001ace4 	.word	0x2001ace4
 8017cd0:	0802b56c 	.word	0x0802b56c
 8017cd4:	2001ace8 	.word	0x2001ace8
 8017cd8:	0802b598 	.word	0x0802b598
 8017cdc:	2001ace0 	.word	0x2001ace0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017ce0:	69fb      	ldr	r3, [r7, #28]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	f000 8158 	beq.w	8017f98 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017ce8:	4b95      	ldr	r3, [pc, #596]	; (8017f40 <tcp_input+0x724>)
 8017cea:	2200      	movs	r2, #0
 8017cec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	891a      	ldrh	r2, [r3, #8]
 8017cf2:	4b93      	ldr	r3, [pc, #588]	; (8017f40 <tcp_input+0x724>)
 8017cf4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017cf6:	4a92      	ldr	r2, [pc, #584]	; (8017f40 <tcp_input+0x724>)
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017cfc:	4b91      	ldr	r3, [pc, #580]	; (8017f44 <tcp_input+0x728>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	4a8f      	ldr	r2, [pc, #572]	; (8017f40 <tcp_input+0x724>)
 8017d02:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8017d04:	4b90      	ldr	r3, [pc, #576]	; (8017f48 <tcp_input+0x72c>)
 8017d06:	2200      	movs	r2, #0
 8017d08:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017d0a:	4b90      	ldr	r3, [pc, #576]	; (8017f4c <tcp_input+0x730>)
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017d10:	4b8f      	ldr	r3, [pc, #572]	; (8017f50 <tcp_input+0x734>)
 8017d12:	2200      	movs	r2, #0
 8017d14:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017d16:	4b8f      	ldr	r3, [pc, #572]	; (8017f54 <tcp_input+0x738>)
 8017d18:	781b      	ldrb	r3, [r3, #0]
 8017d1a:	f003 0308 	and.w	r3, r3, #8
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d006      	beq.n	8017d30 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	7b5b      	ldrb	r3, [r3, #13]
 8017d26:	f043 0301 	orr.w	r3, r3, #1
 8017d2a:	b2da      	uxtb	r2, r3
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017d30:	69fb      	ldr	r3, [r7, #28]
 8017d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d017      	beq.n	8017d68 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017d38:	69f8      	ldr	r0, [r7, #28]
 8017d3a:	f7ff f85b 	bl	8016df4 <tcp_process_refused_data>
 8017d3e:	4603      	mov	r3, r0
 8017d40:	f113 0f0d 	cmn.w	r3, #13
 8017d44:	d007      	beq.n	8017d56 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017d46:	69fb      	ldr	r3, [r7, #28]
 8017d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d00c      	beq.n	8017d68 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017d4e:	4b82      	ldr	r3, [pc, #520]	; (8017f58 <tcp_input+0x73c>)
 8017d50:	881b      	ldrh	r3, [r3, #0]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d008      	beq.n	8017d68 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017d56:	69fb      	ldr	r3, [r7, #28]
 8017d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	f040 80e3 	bne.w	8017f26 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017d60:	69f8      	ldr	r0, [r7, #28]
 8017d62:	f003 fe05 	bl	801b970 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017d66:	e0de      	b.n	8017f26 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8017d68:	4a7c      	ldr	r2, [pc, #496]	; (8017f5c <tcp_input+0x740>)
 8017d6a:	69fb      	ldr	r3, [r7, #28]
 8017d6c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017d6e:	69f8      	ldr	r0, [r7, #28]
 8017d70:	f000 fb18 	bl	80183a4 <tcp_process>
 8017d74:	4603      	mov	r3, r0
 8017d76:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017d78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017d7c:	f113 0f0d 	cmn.w	r3, #13
 8017d80:	f000 80d3 	beq.w	8017f2a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8017d84:	4b71      	ldr	r3, [pc, #452]	; (8017f4c <tcp_input+0x730>)
 8017d86:	781b      	ldrb	r3, [r3, #0]
 8017d88:	f003 0308 	and.w	r3, r3, #8
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d015      	beq.n	8017dbc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017d90:	69fb      	ldr	r3, [r7, #28]
 8017d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d008      	beq.n	8017dac <tcp_input+0x590>
 8017d9a:	69fb      	ldr	r3, [r7, #28]
 8017d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017da0:	69fa      	ldr	r2, [r7, #28]
 8017da2:	6912      	ldr	r2, [r2, #16]
 8017da4:	f06f 010d 	mvn.w	r1, #13
 8017da8:	4610      	mov	r0, r2
 8017daa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017dac:	69f9      	ldr	r1, [r7, #28]
 8017dae:	486c      	ldr	r0, [pc, #432]	; (8017f60 <tcp_input+0x744>)
 8017db0:	f7ff fbbc 	bl	801752c <tcp_pcb_remove>
        tcp_free(pcb);
 8017db4:	69f8      	ldr	r0, [r7, #28]
 8017db6:	f7fd fed7 	bl	8015b68 <tcp_free>
 8017dba:	e0da      	b.n	8017f72 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017dc0:	4b63      	ldr	r3, [pc, #396]	; (8017f50 <tcp_input+0x734>)
 8017dc2:	881b      	ldrh	r3, [r3, #0]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d01d      	beq.n	8017e04 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017dc8:	4b61      	ldr	r3, [pc, #388]	; (8017f50 <tcp_input+0x734>)
 8017dca:	881b      	ldrh	r3, [r3, #0]
 8017dcc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017dce:	69fb      	ldr	r3, [r7, #28]
 8017dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d00a      	beq.n	8017dee <tcp_input+0x5d2>
 8017dd8:	69fb      	ldr	r3, [r7, #28]
 8017dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017dde:	69fa      	ldr	r2, [r7, #28]
 8017de0:	6910      	ldr	r0, [r2, #16]
 8017de2:	89fa      	ldrh	r2, [r7, #14]
 8017de4:	69f9      	ldr	r1, [r7, #28]
 8017de6:	4798      	blx	r3
 8017de8:	4603      	mov	r3, r0
 8017dea:	74fb      	strb	r3, [r7, #19]
 8017dec:	e001      	b.n	8017df2 <tcp_input+0x5d6>
 8017dee:	2300      	movs	r3, #0
 8017df0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017df2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017df6:	f113 0f0d 	cmn.w	r3, #13
 8017dfa:	f000 8098 	beq.w	8017f2e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017dfe:	4b54      	ldr	r3, [pc, #336]	; (8017f50 <tcp_input+0x734>)
 8017e00:	2200      	movs	r2, #0
 8017e02:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017e04:	69f8      	ldr	r0, [r7, #28]
 8017e06:	f000 f915 	bl	8018034 <tcp_input_delayed_close>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	f040 8090 	bne.w	8017f32 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017e12:	4b4d      	ldr	r3, [pc, #308]	; (8017f48 <tcp_input+0x72c>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d041      	beq.n	8017e9e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017e1a:	69fb      	ldr	r3, [r7, #28]
 8017e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d006      	beq.n	8017e30 <tcp_input+0x614>
 8017e22:	4b50      	ldr	r3, [pc, #320]	; (8017f64 <tcp_input+0x748>)
 8017e24:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017e28:	494f      	ldr	r1, [pc, #316]	; (8017f68 <tcp_input+0x74c>)
 8017e2a:	4850      	ldr	r0, [pc, #320]	; (8017f6c <tcp_input+0x750>)
 8017e2c:	f00c fcf0 	bl	8024810 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017e30:	69fb      	ldr	r3, [r7, #28]
 8017e32:	8b5b      	ldrh	r3, [r3, #26]
 8017e34:	f003 0310 	and.w	r3, r3, #16
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d008      	beq.n	8017e4e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017e3c:	4b42      	ldr	r3, [pc, #264]	; (8017f48 <tcp_input+0x72c>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	4618      	mov	r0, r3
 8017e42:	f7fd fbe5 	bl	8015610 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017e46:	69f8      	ldr	r0, [r7, #28]
 8017e48:	f7fe f9d2 	bl	80161f0 <tcp_abort>
            goto aborted;
 8017e4c:	e091      	b.n	8017f72 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017e4e:	69fb      	ldr	r3, [r7, #28]
 8017e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d00c      	beq.n	8017e72 <tcp_input+0x656>
 8017e58:	69fb      	ldr	r3, [r7, #28]
 8017e5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017e5e:	69fb      	ldr	r3, [r7, #28]
 8017e60:	6918      	ldr	r0, [r3, #16]
 8017e62:	4b39      	ldr	r3, [pc, #228]	; (8017f48 <tcp_input+0x72c>)
 8017e64:	681a      	ldr	r2, [r3, #0]
 8017e66:	2300      	movs	r3, #0
 8017e68:	69f9      	ldr	r1, [r7, #28]
 8017e6a:	47a0      	blx	r4
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	74fb      	strb	r3, [r7, #19]
 8017e70:	e008      	b.n	8017e84 <tcp_input+0x668>
 8017e72:	4b35      	ldr	r3, [pc, #212]	; (8017f48 <tcp_input+0x72c>)
 8017e74:	681a      	ldr	r2, [r3, #0]
 8017e76:	2300      	movs	r3, #0
 8017e78:	69f9      	ldr	r1, [r7, #28]
 8017e7a:	2000      	movs	r0, #0
 8017e7c:	f7ff f890 	bl	8016fa0 <tcp_recv_null>
 8017e80:	4603      	mov	r3, r0
 8017e82:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017e84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e88:	f113 0f0d 	cmn.w	r3, #13
 8017e8c:	d053      	beq.n	8017f36 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017e8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d003      	beq.n	8017e9e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017e96:	4b2c      	ldr	r3, [pc, #176]	; (8017f48 <tcp_input+0x72c>)
 8017e98:	681a      	ldr	r2, [r3, #0]
 8017e9a:	69fb      	ldr	r3, [r7, #28]
 8017e9c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017e9e:	4b2b      	ldr	r3, [pc, #172]	; (8017f4c <tcp_input+0x730>)
 8017ea0:	781b      	ldrb	r3, [r3, #0]
 8017ea2:	f003 0320 	and.w	r3, r3, #32
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d030      	beq.n	8017f0c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8017eaa:	69fb      	ldr	r3, [r7, #28]
 8017eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d009      	beq.n	8017ec6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017eb6:	7b5a      	ldrb	r2, [r3, #13]
 8017eb8:	69fb      	ldr	r3, [r7, #28]
 8017eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017ebc:	f042 0220 	orr.w	r2, r2, #32
 8017ec0:	b2d2      	uxtb	r2, r2
 8017ec2:	735a      	strb	r2, [r3, #13]
 8017ec4:	e022      	b.n	8017f0c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017ec6:	69fb      	ldr	r3, [r7, #28]
 8017ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017eca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017ece:	d005      	beq.n	8017edc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8017ed0:	69fb      	ldr	r3, [r7, #28]
 8017ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ed4:	3301      	adds	r3, #1
 8017ed6:	b29a      	uxth	r2, r3
 8017ed8:	69fb      	ldr	r3, [r7, #28]
 8017eda:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017edc:	69fb      	ldr	r3, [r7, #28]
 8017ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d00b      	beq.n	8017efe <tcp_input+0x6e2>
 8017ee6:	69fb      	ldr	r3, [r7, #28]
 8017ee8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017eec:	69fb      	ldr	r3, [r7, #28]
 8017eee:	6918      	ldr	r0, [r3, #16]
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	69f9      	ldr	r1, [r7, #28]
 8017ef6:	47a0      	blx	r4
 8017ef8:	4603      	mov	r3, r0
 8017efa:	74fb      	strb	r3, [r7, #19]
 8017efc:	e001      	b.n	8017f02 <tcp_input+0x6e6>
 8017efe:	2300      	movs	r3, #0
 8017f00:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017f02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017f06:	f113 0f0d 	cmn.w	r3, #13
 8017f0a:	d016      	beq.n	8017f3a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017f0c:	4b13      	ldr	r3, [pc, #76]	; (8017f5c <tcp_input+0x740>)
 8017f0e:	2200      	movs	r2, #0
 8017f10:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017f12:	69f8      	ldr	r0, [r7, #28]
 8017f14:	f000 f88e 	bl	8018034 <tcp_input_delayed_close>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d128      	bne.n	8017f70 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017f1e:	69f8      	ldr	r0, [r7, #28]
 8017f20:	f002 ff20 	bl	801ad64 <tcp_output>
 8017f24:	e025      	b.n	8017f72 <tcp_input+0x756>
        goto aborted;
 8017f26:	bf00      	nop
 8017f28:	e023      	b.n	8017f72 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017f2a:	bf00      	nop
 8017f2c:	e021      	b.n	8017f72 <tcp_input+0x756>
              goto aborted;
 8017f2e:	bf00      	nop
 8017f30:	e01f      	b.n	8017f72 <tcp_input+0x756>
          goto aborted;
 8017f32:	bf00      	nop
 8017f34:	e01d      	b.n	8017f72 <tcp_input+0x756>
            goto aborted;
 8017f36:	bf00      	nop
 8017f38:	e01b      	b.n	8017f72 <tcp_input+0x756>
              goto aborted;
 8017f3a:	bf00      	nop
 8017f3c:	e019      	b.n	8017f72 <tcp_input+0x756>
 8017f3e:	bf00      	nop
 8017f40:	2001acf0 	.word	0x2001acf0
 8017f44:	2001ad00 	.word	0x2001ad00
 8017f48:	2001ad20 	.word	0x2001ad20
 8017f4c:	2001ad1d 	.word	0x2001ad1d
 8017f50:	2001ad18 	.word	0x2001ad18
 8017f54:	2001ad1c 	.word	0x2001ad1c
 8017f58:	2001ad1a 	.word	0x2001ad1a
 8017f5c:	2001ad24 	.word	0x2001ad24
 8017f60:	2001ace4 	.word	0x2001ace4
 8017f64:	0802b414 	.word	0x0802b414
 8017f68:	0802b5c8 	.word	0x0802b5c8
 8017f6c:	0802b460 	.word	0x0802b460
          goto aborted;
 8017f70:	bf00      	nop
    tcp_input_pcb = NULL;
 8017f72:	4b27      	ldr	r3, [pc, #156]	; (8018010 <tcp_input+0x7f4>)
 8017f74:	2200      	movs	r2, #0
 8017f76:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017f78:	4b26      	ldr	r3, [pc, #152]	; (8018014 <tcp_input+0x7f8>)
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017f7e:	4b26      	ldr	r3, [pc, #152]	; (8018018 <tcp_input+0x7fc>)
 8017f80:	685b      	ldr	r3, [r3, #4]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d03f      	beq.n	8018006 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8017f86:	4b24      	ldr	r3, [pc, #144]	; (8018018 <tcp_input+0x7fc>)
 8017f88:	685b      	ldr	r3, [r3, #4]
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f7fd fb40 	bl	8015610 <pbuf_free>
      inseg.p = NULL;
 8017f90:	4b21      	ldr	r3, [pc, #132]	; (8018018 <tcp_input+0x7fc>)
 8017f92:	2200      	movs	r2, #0
 8017f94:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017f96:	e036      	b.n	8018006 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017f98:	4b20      	ldr	r3, [pc, #128]	; (801801c <tcp_input+0x800>)
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	899b      	ldrh	r3, [r3, #12]
 8017f9e:	b29b      	uxth	r3, r3
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7fb ff43 	bl	8013e2c <lwip_htons>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	b2db      	uxtb	r3, r3
 8017faa:	f003 0304 	and.w	r3, r3, #4
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d118      	bne.n	8017fe4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017fb2:	4b1b      	ldr	r3, [pc, #108]	; (8018020 <tcp_input+0x804>)
 8017fb4:	6819      	ldr	r1, [r3, #0]
 8017fb6:	4b1b      	ldr	r3, [pc, #108]	; (8018024 <tcp_input+0x808>)
 8017fb8:	881b      	ldrh	r3, [r3, #0]
 8017fba:	461a      	mov	r2, r3
 8017fbc:	4b1a      	ldr	r3, [pc, #104]	; (8018028 <tcp_input+0x80c>)
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017fc2:	4b16      	ldr	r3, [pc, #88]	; (801801c <tcp_input+0x800>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017fc6:	885b      	ldrh	r3, [r3, #2]
 8017fc8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017fca:	4a14      	ldr	r2, [pc, #80]	; (801801c <tcp_input+0x800>)
 8017fcc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017fce:	8812      	ldrh	r2, [r2, #0]
 8017fd0:	b292      	uxth	r2, r2
 8017fd2:	9202      	str	r2, [sp, #8]
 8017fd4:	9301      	str	r3, [sp, #4]
 8017fd6:	4b15      	ldr	r3, [pc, #84]	; (801802c <tcp_input+0x810>)
 8017fd8:	9300      	str	r3, [sp, #0]
 8017fda:	4b15      	ldr	r3, [pc, #84]	; (8018030 <tcp_input+0x814>)
 8017fdc:	4602      	mov	r2, r0
 8017fde:	2000      	movs	r0, #0
 8017fe0:	f003 fc74 	bl	801b8cc <tcp_rst>
    pbuf_free(p);
 8017fe4:	6878      	ldr	r0, [r7, #4]
 8017fe6:	f7fd fb13 	bl	8015610 <pbuf_free>
  return;
 8017fea:	e00c      	b.n	8018006 <tcp_input+0x7ea>
    goto dropped;
 8017fec:	bf00      	nop
 8017fee:	e006      	b.n	8017ffe <tcp_input+0x7e2>
    goto dropped;
 8017ff0:	bf00      	nop
 8017ff2:	e004      	b.n	8017ffe <tcp_input+0x7e2>
    goto dropped;
 8017ff4:	bf00      	nop
 8017ff6:	e002      	b.n	8017ffe <tcp_input+0x7e2>
      goto dropped;
 8017ff8:	bf00      	nop
 8017ffa:	e000      	b.n	8017ffe <tcp_input+0x7e2>
      goto dropped;
 8017ffc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017ffe:	6878      	ldr	r0, [r7, #4]
 8018000:	f7fd fb06 	bl	8015610 <pbuf_free>
 8018004:	e000      	b.n	8018008 <tcp_input+0x7ec>
  return;
 8018006:	bf00      	nop
}
 8018008:	3724      	adds	r7, #36	; 0x24
 801800a:	46bd      	mov	sp, r7
 801800c:	bd90      	pop	{r4, r7, pc}
 801800e:	bf00      	nop
 8018010:	2001ad24 	.word	0x2001ad24
 8018014:	2001ad20 	.word	0x2001ad20
 8018018:	2001acf0 	.word	0x2001acf0
 801801c:	2001ad00 	.word	0x2001ad00
 8018020:	2001ad14 	.word	0x2001ad14
 8018024:	2001ad1a 	.word	0x2001ad1a
 8018028:	2001ad10 	.word	0x2001ad10
 801802c:	20016f54 	.word	0x20016f54
 8018030:	20016f58 	.word	0x20016f58

08018034 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b082      	sub	sp, #8
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d106      	bne.n	8018050 <tcp_input_delayed_close+0x1c>
 8018042:	4b17      	ldr	r3, [pc, #92]	; (80180a0 <tcp_input_delayed_close+0x6c>)
 8018044:	f240 225a 	movw	r2, #602	; 0x25a
 8018048:	4916      	ldr	r1, [pc, #88]	; (80180a4 <tcp_input_delayed_close+0x70>)
 801804a:	4817      	ldr	r0, [pc, #92]	; (80180a8 <tcp_input_delayed_close+0x74>)
 801804c:	f00c fbe0 	bl	8024810 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018050:	4b16      	ldr	r3, [pc, #88]	; (80180ac <tcp_input_delayed_close+0x78>)
 8018052:	781b      	ldrb	r3, [r3, #0]
 8018054:	f003 0310 	and.w	r3, r3, #16
 8018058:	2b00      	cmp	r3, #0
 801805a:	d01c      	beq.n	8018096 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	8b5b      	ldrh	r3, [r3, #26]
 8018060:	f003 0310 	and.w	r3, r3, #16
 8018064:	2b00      	cmp	r3, #0
 8018066:	d10d      	bne.n	8018084 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801806e:	2b00      	cmp	r3, #0
 8018070:	d008      	beq.n	8018084 <tcp_input_delayed_close+0x50>
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018078:	687a      	ldr	r2, [r7, #4]
 801807a:	6912      	ldr	r2, [r2, #16]
 801807c:	f06f 010e 	mvn.w	r1, #14
 8018080:	4610      	mov	r0, r2
 8018082:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018084:	6879      	ldr	r1, [r7, #4]
 8018086:	480a      	ldr	r0, [pc, #40]	; (80180b0 <tcp_input_delayed_close+0x7c>)
 8018088:	f7ff fa50 	bl	801752c <tcp_pcb_remove>
    tcp_free(pcb);
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f7fd fd6b 	bl	8015b68 <tcp_free>
    return 1;
 8018092:	2301      	movs	r3, #1
 8018094:	e000      	b.n	8018098 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8018096:	2300      	movs	r3, #0
}
 8018098:	4618      	mov	r0, r3
 801809a:	3708      	adds	r7, #8
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}
 80180a0:	0802b414 	.word	0x0802b414
 80180a4:	0802b5e4 	.word	0x0802b5e4
 80180a8:	0802b460 	.word	0x0802b460
 80180ac:	2001ad1d 	.word	0x2001ad1d
 80180b0:	2001ace4 	.word	0x2001ace4

080180b4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80180b4:	b590      	push	{r4, r7, lr}
 80180b6:	b08b      	sub	sp, #44	; 0x2c
 80180b8:	af04      	add	r7, sp, #16
 80180ba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80180bc:	4b6f      	ldr	r3, [pc, #444]	; (801827c <tcp_listen_input+0x1c8>)
 80180be:	781b      	ldrb	r3, [r3, #0]
 80180c0:	f003 0304 	and.w	r3, r3, #4
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	f040 80d2 	bne.w	801826e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d106      	bne.n	80180de <tcp_listen_input+0x2a>
 80180d0:	4b6b      	ldr	r3, [pc, #428]	; (8018280 <tcp_listen_input+0x1cc>)
 80180d2:	f240 2281 	movw	r2, #641	; 0x281
 80180d6:	496b      	ldr	r1, [pc, #428]	; (8018284 <tcp_listen_input+0x1d0>)
 80180d8:	486b      	ldr	r0, [pc, #428]	; (8018288 <tcp_listen_input+0x1d4>)
 80180da:	f00c fb99 	bl	8024810 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80180de:	4b67      	ldr	r3, [pc, #412]	; (801827c <tcp_listen_input+0x1c8>)
 80180e0:	781b      	ldrb	r3, [r3, #0]
 80180e2:	f003 0310 	and.w	r3, r3, #16
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d019      	beq.n	801811e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80180ea:	4b68      	ldr	r3, [pc, #416]	; (801828c <tcp_listen_input+0x1d8>)
 80180ec:	6819      	ldr	r1, [r3, #0]
 80180ee:	4b68      	ldr	r3, [pc, #416]	; (8018290 <tcp_listen_input+0x1dc>)
 80180f0:	881b      	ldrh	r3, [r3, #0]
 80180f2:	461a      	mov	r2, r3
 80180f4:	4b67      	ldr	r3, [pc, #412]	; (8018294 <tcp_listen_input+0x1e0>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80180fa:	4b67      	ldr	r3, [pc, #412]	; (8018298 <tcp_listen_input+0x1e4>)
 80180fc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80180fe:	885b      	ldrh	r3, [r3, #2]
 8018100:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018102:	4a65      	ldr	r2, [pc, #404]	; (8018298 <tcp_listen_input+0x1e4>)
 8018104:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018106:	8812      	ldrh	r2, [r2, #0]
 8018108:	b292      	uxth	r2, r2
 801810a:	9202      	str	r2, [sp, #8]
 801810c:	9301      	str	r3, [sp, #4]
 801810e:	4b63      	ldr	r3, [pc, #396]	; (801829c <tcp_listen_input+0x1e8>)
 8018110:	9300      	str	r3, [sp, #0]
 8018112:	4b63      	ldr	r3, [pc, #396]	; (80182a0 <tcp_listen_input+0x1ec>)
 8018114:	4602      	mov	r2, r0
 8018116:	6878      	ldr	r0, [r7, #4]
 8018118:	f003 fbd8 	bl	801b8cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801811c:	e0a9      	b.n	8018272 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801811e:	4b57      	ldr	r3, [pc, #348]	; (801827c <tcp_listen_input+0x1c8>)
 8018120:	781b      	ldrb	r3, [r3, #0]
 8018122:	f003 0302 	and.w	r3, r3, #2
 8018126:	2b00      	cmp	r3, #0
 8018128:	f000 80a3 	beq.w	8018272 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	7d5b      	ldrb	r3, [r3, #21]
 8018130:	4618      	mov	r0, r3
 8018132:	f7ff f859 	bl	80171e8 <tcp_alloc>
 8018136:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018138:	697b      	ldr	r3, [r7, #20]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d111      	bne.n	8018162 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	699b      	ldr	r3, [r3, #24]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d00a      	beq.n	801815c <tcp_listen_input+0xa8>
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	699b      	ldr	r3, [r3, #24]
 801814a:	687a      	ldr	r2, [r7, #4]
 801814c:	6910      	ldr	r0, [r2, #16]
 801814e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018152:	2100      	movs	r1, #0
 8018154:	4798      	blx	r3
 8018156:	4603      	mov	r3, r0
 8018158:	73bb      	strb	r3, [r7, #14]
      return;
 801815a:	e08b      	b.n	8018274 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801815c:	23f0      	movs	r3, #240	; 0xf0
 801815e:	73bb      	strb	r3, [r7, #14]
      return;
 8018160:	e088      	b.n	8018274 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018162:	4b50      	ldr	r3, [pc, #320]	; (80182a4 <tcp_listen_input+0x1f0>)
 8018164:	695a      	ldr	r2, [r3, #20]
 8018166:	697b      	ldr	r3, [r7, #20]
 8018168:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801816a:	4b4e      	ldr	r3, [pc, #312]	; (80182a4 <tcp_listen_input+0x1f0>)
 801816c:	691a      	ldr	r2, [r3, #16]
 801816e:	697b      	ldr	r3, [r7, #20]
 8018170:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	8ada      	ldrh	r2, [r3, #22]
 8018176:	697b      	ldr	r3, [r7, #20]
 8018178:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801817a:	4b47      	ldr	r3, [pc, #284]	; (8018298 <tcp_listen_input+0x1e4>)
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	881b      	ldrh	r3, [r3, #0]
 8018180:	b29a      	uxth	r2, r3
 8018182:	697b      	ldr	r3, [r7, #20]
 8018184:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018186:	697b      	ldr	r3, [r7, #20]
 8018188:	2203      	movs	r2, #3
 801818a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801818c:	4b41      	ldr	r3, [pc, #260]	; (8018294 <tcp_listen_input+0x1e0>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	1c5a      	adds	r2, r3, #1
 8018192:	697b      	ldr	r3, [r7, #20]
 8018194:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018196:	697b      	ldr	r3, [r7, #20]
 8018198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801819a:	697b      	ldr	r3, [r7, #20]
 801819c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801819e:	6978      	ldr	r0, [r7, #20]
 80181a0:	f7ff fa58 	bl	8017654 <tcp_next_iss>
 80181a4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80181a6:	697b      	ldr	r3, [r7, #20]
 80181a8:	693a      	ldr	r2, [r7, #16]
 80181aa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80181ac:	697b      	ldr	r3, [r7, #20]
 80181ae:	693a      	ldr	r2, [r7, #16]
 80181b0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80181b2:	697b      	ldr	r3, [r7, #20]
 80181b4:	693a      	ldr	r2, [r7, #16]
 80181b6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80181b8:	697b      	ldr	r3, [r7, #20]
 80181ba:	693a      	ldr	r2, [r7, #16]
 80181bc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80181be:	4b35      	ldr	r3, [pc, #212]	; (8018294 <tcp_listen_input+0x1e0>)
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	1e5a      	subs	r2, r3, #1
 80181c4:	697b      	ldr	r3, [r7, #20]
 80181c6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	691a      	ldr	r2, [r3, #16]
 80181cc:	697b      	ldr	r3, [r7, #20]
 80181ce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80181d0:	697b      	ldr	r3, [r7, #20]
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	7a5b      	ldrb	r3, [r3, #9]
 80181da:	f003 030c 	and.w	r3, r3, #12
 80181de:	b2da      	uxtb	r2, r3
 80181e0:	697b      	ldr	r3, [r7, #20]
 80181e2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	7a1a      	ldrb	r2, [r3, #8]
 80181e8:	697b      	ldr	r3, [r7, #20]
 80181ea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80181ec:	4b2e      	ldr	r3, [pc, #184]	; (80182a8 <tcp_listen_input+0x1f4>)
 80181ee:	681a      	ldr	r2, [r3, #0]
 80181f0:	697b      	ldr	r3, [r7, #20]
 80181f2:	60da      	str	r2, [r3, #12]
 80181f4:	4a2c      	ldr	r2, [pc, #176]	; (80182a8 <tcp_listen_input+0x1f4>)
 80181f6:	697b      	ldr	r3, [r7, #20]
 80181f8:	6013      	str	r3, [r2, #0]
 80181fa:	f003 fd29 	bl	801bc50 <tcp_timer_needed>
 80181fe:	4b2b      	ldr	r3, [pc, #172]	; (80182ac <tcp_listen_input+0x1f8>)
 8018200:	2201      	movs	r2, #1
 8018202:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018204:	6978      	ldr	r0, [r7, #20]
 8018206:	f001 fd8f 	bl	8019d28 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801820a:	4b23      	ldr	r3, [pc, #140]	; (8018298 <tcp_listen_input+0x1e4>)
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	89db      	ldrh	r3, [r3, #14]
 8018210:	b29a      	uxth	r2, r3
 8018212:	697b      	ldr	r3, [r7, #20]
 8018214:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018218:	697b      	ldr	r3, [r7, #20]
 801821a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801821e:	697b      	ldr	r3, [r7, #20]
 8018220:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018224:	697b      	ldr	r3, [r7, #20]
 8018226:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018228:	697b      	ldr	r3, [r7, #20]
 801822a:	3304      	adds	r3, #4
 801822c:	4618      	mov	r0, r3
 801822e:	f005 fa63 	bl	801d6f8 <ip4_route>
 8018232:	4601      	mov	r1, r0
 8018234:	697b      	ldr	r3, [r7, #20]
 8018236:	3304      	adds	r3, #4
 8018238:	461a      	mov	r2, r3
 801823a:	4620      	mov	r0, r4
 801823c:	f7ff fa30 	bl	80176a0 <tcp_eff_send_mss_netif>
 8018240:	4603      	mov	r3, r0
 8018242:	461a      	mov	r2, r3
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018248:	2112      	movs	r1, #18
 801824a:	6978      	ldr	r0, [r7, #20]
 801824c:	f002 fc9c 	bl	801ab88 <tcp_enqueue_flags>
 8018250:	4603      	mov	r3, r0
 8018252:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d004      	beq.n	8018266 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801825c:	2100      	movs	r1, #0
 801825e:	6978      	ldr	r0, [r7, #20]
 8018260:	f7fd ff08 	bl	8016074 <tcp_abandon>
      return;
 8018264:	e006      	b.n	8018274 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8018266:	6978      	ldr	r0, [r7, #20]
 8018268:	f002 fd7c 	bl	801ad64 <tcp_output>
  return;
 801826c:	e001      	b.n	8018272 <tcp_listen_input+0x1be>
    return;
 801826e:	bf00      	nop
 8018270:	e000      	b.n	8018274 <tcp_listen_input+0x1c0>
  return;
 8018272:	bf00      	nop
}
 8018274:	371c      	adds	r7, #28
 8018276:	46bd      	mov	sp, r7
 8018278:	bd90      	pop	{r4, r7, pc}
 801827a:	bf00      	nop
 801827c:	2001ad1c 	.word	0x2001ad1c
 8018280:	0802b414 	.word	0x0802b414
 8018284:	0802b60c 	.word	0x0802b60c
 8018288:	0802b460 	.word	0x0802b460
 801828c:	2001ad14 	.word	0x2001ad14
 8018290:	2001ad1a 	.word	0x2001ad1a
 8018294:	2001ad10 	.word	0x2001ad10
 8018298:	2001ad00 	.word	0x2001ad00
 801829c:	20016f54 	.word	0x20016f54
 80182a0:	20016f58 	.word	0x20016f58
 80182a4:	20016f44 	.word	0x20016f44
 80182a8:	2001ace4 	.word	0x2001ace4
 80182ac:	2001acec 	.word	0x2001acec

080182b0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b086      	sub	sp, #24
 80182b4:	af04      	add	r7, sp, #16
 80182b6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80182b8:	4b2f      	ldr	r3, [pc, #188]	; (8018378 <tcp_timewait_input+0xc8>)
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	f003 0304 	and.w	r3, r3, #4
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d153      	bne.n	801836c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d106      	bne.n	80182d8 <tcp_timewait_input+0x28>
 80182ca:	4b2c      	ldr	r3, [pc, #176]	; (801837c <tcp_timewait_input+0xcc>)
 80182cc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80182d0:	492b      	ldr	r1, [pc, #172]	; (8018380 <tcp_timewait_input+0xd0>)
 80182d2:	482c      	ldr	r0, [pc, #176]	; (8018384 <tcp_timewait_input+0xd4>)
 80182d4:	f00c fa9c 	bl	8024810 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80182d8:	4b27      	ldr	r3, [pc, #156]	; (8018378 <tcp_timewait_input+0xc8>)
 80182da:	781b      	ldrb	r3, [r3, #0]
 80182dc:	f003 0302 	and.w	r3, r3, #2
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d02a      	beq.n	801833a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80182e4:	4b28      	ldr	r3, [pc, #160]	; (8018388 <tcp_timewait_input+0xd8>)
 80182e6:	681a      	ldr	r2, [r3, #0]
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182ec:	1ad3      	subs	r3, r2, r3
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	db2d      	blt.n	801834e <tcp_timewait_input+0x9e>
 80182f2:	4b25      	ldr	r3, [pc, #148]	; (8018388 <tcp_timewait_input+0xd8>)
 80182f4:	681a      	ldr	r2, [r3, #0]
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182fa:	6879      	ldr	r1, [r7, #4]
 80182fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80182fe:	440b      	add	r3, r1
 8018300:	1ad3      	subs	r3, r2, r3
 8018302:	2b00      	cmp	r3, #0
 8018304:	dc23      	bgt.n	801834e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018306:	4b21      	ldr	r3, [pc, #132]	; (801838c <tcp_timewait_input+0xdc>)
 8018308:	6819      	ldr	r1, [r3, #0]
 801830a:	4b21      	ldr	r3, [pc, #132]	; (8018390 <tcp_timewait_input+0xe0>)
 801830c:	881b      	ldrh	r3, [r3, #0]
 801830e:	461a      	mov	r2, r3
 8018310:	4b1d      	ldr	r3, [pc, #116]	; (8018388 <tcp_timewait_input+0xd8>)
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018316:	4b1f      	ldr	r3, [pc, #124]	; (8018394 <tcp_timewait_input+0xe4>)
 8018318:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801831a:	885b      	ldrh	r3, [r3, #2]
 801831c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801831e:	4a1d      	ldr	r2, [pc, #116]	; (8018394 <tcp_timewait_input+0xe4>)
 8018320:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018322:	8812      	ldrh	r2, [r2, #0]
 8018324:	b292      	uxth	r2, r2
 8018326:	9202      	str	r2, [sp, #8]
 8018328:	9301      	str	r3, [sp, #4]
 801832a:	4b1b      	ldr	r3, [pc, #108]	; (8018398 <tcp_timewait_input+0xe8>)
 801832c:	9300      	str	r3, [sp, #0]
 801832e:	4b1b      	ldr	r3, [pc, #108]	; (801839c <tcp_timewait_input+0xec>)
 8018330:	4602      	mov	r2, r0
 8018332:	6878      	ldr	r0, [r7, #4]
 8018334:	f003 faca 	bl	801b8cc <tcp_rst>
      return;
 8018338:	e01b      	b.n	8018372 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801833a:	4b0f      	ldr	r3, [pc, #60]	; (8018378 <tcp_timewait_input+0xc8>)
 801833c:	781b      	ldrb	r3, [r3, #0]
 801833e:	f003 0301 	and.w	r3, r3, #1
 8018342:	2b00      	cmp	r3, #0
 8018344:	d003      	beq.n	801834e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018346:	4b16      	ldr	r3, [pc, #88]	; (80183a0 <tcp_timewait_input+0xf0>)
 8018348:	681a      	ldr	r2, [r3, #0]
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801834e:	4b10      	ldr	r3, [pc, #64]	; (8018390 <tcp_timewait_input+0xe0>)
 8018350:	881b      	ldrh	r3, [r3, #0]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d00c      	beq.n	8018370 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	8b5b      	ldrh	r3, [r3, #26]
 801835a:	f043 0302 	orr.w	r3, r3, #2
 801835e:	b29a      	uxth	r2, r3
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018364:	6878      	ldr	r0, [r7, #4]
 8018366:	f002 fcfd 	bl	801ad64 <tcp_output>
  }
  return;
 801836a:	e001      	b.n	8018370 <tcp_timewait_input+0xc0>
    return;
 801836c:	bf00      	nop
 801836e:	e000      	b.n	8018372 <tcp_timewait_input+0xc2>
  return;
 8018370:	bf00      	nop
}
 8018372:	3708      	adds	r7, #8
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}
 8018378:	2001ad1c 	.word	0x2001ad1c
 801837c:	0802b414 	.word	0x0802b414
 8018380:	0802b62c 	.word	0x0802b62c
 8018384:	0802b460 	.word	0x0802b460
 8018388:	2001ad10 	.word	0x2001ad10
 801838c:	2001ad14 	.word	0x2001ad14
 8018390:	2001ad1a 	.word	0x2001ad1a
 8018394:	2001ad00 	.word	0x2001ad00
 8018398:	20016f54 	.word	0x20016f54
 801839c:	20016f58 	.word	0x20016f58
 80183a0:	2001acd8 	.word	0x2001acd8

080183a4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80183a4:	b590      	push	{r4, r7, lr}
 80183a6:	b08d      	sub	sp, #52	; 0x34
 80183a8:	af04      	add	r7, sp, #16
 80183aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80183ac:	2300      	movs	r3, #0
 80183ae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80183b0:	2300      	movs	r3, #0
 80183b2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d106      	bne.n	80183c8 <tcp_process+0x24>
 80183ba:	4b9d      	ldr	r3, [pc, #628]	; (8018630 <tcp_process+0x28c>)
 80183bc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80183c0:	499c      	ldr	r1, [pc, #624]	; (8018634 <tcp_process+0x290>)
 80183c2:	489d      	ldr	r0, [pc, #628]	; (8018638 <tcp_process+0x294>)
 80183c4:	f00c fa24 	bl	8024810 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80183c8:	4b9c      	ldr	r3, [pc, #624]	; (801863c <tcp_process+0x298>)
 80183ca:	781b      	ldrb	r3, [r3, #0]
 80183cc:	f003 0304 	and.w	r3, r3, #4
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d04e      	beq.n	8018472 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	7d1b      	ldrb	r3, [r3, #20]
 80183d8:	2b02      	cmp	r3, #2
 80183da:	d108      	bne.n	80183ee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80183e0:	4b97      	ldr	r3, [pc, #604]	; (8018640 <tcp_process+0x29c>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	429a      	cmp	r2, r3
 80183e6:	d123      	bne.n	8018430 <tcp_process+0x8c>
        acceptable = 1;
 80183e8:	2301      	movs	r3, #1
 80183ea:	76fb      	strb	r3, [r7, #27]
 80183ec:	e020      	b.n	8018430 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80183f2:	4b94      	ldr	r3, [pc, #592]	; (8018644 <tcp_process+0x2a0>)
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	d102      	bne.n	8018400 <tcp_process+0x5c>
        acceptable = 1;
 80183fa:	2301      	movs	r3, #1
 80183fc:	76fb      	strb	r3, [r7, #27]
 80183fe:	e017      	b.n	8018430 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018400:	4b90      	ldr	r3, [pc, #576]	; (8018644 <tcp_process+0x2a0>)
 8018402:	681a      	ldr	r2, [r3, #0]
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018408:	1ad3      	subs	r3, r2, r3
 801840a:	2b00      	cmp	r3, #0
 801840c:	db10      	blt.n	8018430 <tcp_process+0x8c>
 801840e:	4b8d      	ldr	r3, [pc, #564]	; (8018644 <tcp_process+0x2a0>)
 8018410:	681a      	ldr	r2, [r3, #0]
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018416:	6879      	ldr	r1, [r7, #4]
 8018418:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801841a:	440b      	add	r3, r1
 801841c:	1ad3      	subs	r3, r2, r3
 801841e:	2b00      	cmp	r3, #0
 8018420:	dc06      	bgt.n	8018430 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	8b5b      	ldrh	r3, [r3, #26]
 8018426:	f043 0302 	orr.w	r3, r3, #2
 801842a:	b29a      	uxth	r2, r3
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018430:	7efb      	ldrb	r3, [r7, #27]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d01b      	beq.n	801846e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	7d1b      	ldrb	r3, [r3, #20]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d106      	bne.n	801844c <tcp_process+0xa8>
 801843e:	4b7c      	ldr	r3, [pc, #496]	; (8018630 <tcp_process+0x28c>)
 8018440:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018444:	4980      	ldr	r1, [pc, #512]	; (8018648 <tcp_process+0x2a4>)
 8018446:	487c      	ldr	r0, [pc, #496]	; (8018638 <tcp_process+0x294>)
 8018448:	f00c f9e2 	bl	8024810 <iprintf>
      recv_flags |= TF_RESET;
 801844c:	4b7f      	ldr	r3, [pc, #508]	; (801864c <tcp_process+0x2a8>)
 801844e:	781b      	ldrb	r3, [r3, #0]
 8018450:	f043 0308 	orr.w	r3, r3, #8
 8018454:	b2da      	uxtb	r2, r3
 8018456:	4b7d      	ldr	r3, [pc, #500]	; (801864c <tcp_process+0x2a8>)
 8018458:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	8b5b      	ldrh	r3, [r3, #26]
 801845e:	f023 0301 	bic.w	r3, r3, #1
 8018462:	b29a      	uxth	r2, r3
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018468:	f06f 030d 	mvn.w	r3, #13
 801846c:	e37a      	b.n	8018b64 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801846e:	2300      	movs	r3, #0
 8018470:	e378      	b.n	8018b64 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018472:	4b72      	ldr	r3, [pc, #456]	; (801863c <tcp_process+0x298>)
 8018474:	781b      	ldrb	r3, [r3, #0]
 8018476:	f003 0302 	and.w	r3, r3, #2
 801847a:	2b00      	cmp	r3, #0
 801847c:	d010      	beq.n	80184a0 <tcp_process+0xfc>
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	7d1b      	ldrb	r3, [r3, #20]
 8018482:	2b02      	cmp	r3, #2
 8018484:	d00c      	beq.n	80184a0 <tcp_process+0xfc>
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	7d1b      	ldrb	r3, [r3, #20]
 801848a:	2b03      	cmp	r3, #3
 801848c:	d008      	beq.n	80184a0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	8b5b      	ldrh	r3, [r3, #26]
 8018492:	f043 0302 	orr.w	r3, r3, #2
 8018496:	b29a      	uxth	r2, r3
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801849c:	2300      	movs	r3, #0
 801849e:	e361      	b.n	8018b64 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	8b5b      	ldrh	r3, [r3, #26]
 80184a4:	f003 0310 	and.w	r3, r3, #16
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d103      	bne.n	80184b4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80184ac:	4b68      	ldr	r3, [pc, #416]	; (8018650 <tcp_process+0x2ac>)
 80184ae:	681a      	ldr	r2, [r3, #0]
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	2200      	movs	r2, #0
 80184b8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	2200      	movs	r2, #0
 80184c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80184c4:	6878      	ldr	r0, [r7, #4]
 80184c6:	f001 fc2f 	bl	8019d28 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	7d1b      	ldrb	r3, [r3, #20]
 80184ce:	3b02      	subs	r3, #2
 80184d0:	2b07      	cmp	r3, #7
 80184d2:	f200 8337 	bhi.w	8018b44 <tcp_process+0x7a0>
 80184d6:	a201      	add	r2, pc, #4	; (adr r2, 80184dc <tcp_process+0x138>)
 80184d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184dc:	080184fd 	.word	0x080184fd
 80184e0:	0801872d 	.word	0x0801872d
 80184e4:	080188a5 	.word	0x080188a5
 80184e8:	080188cf 	.word	0x080188cf
 80184ec:	080189f3 	.word	0x080189f3
 80184f0:	080188a5 	.word	0x080188a5
 80184f4:	08018a7f 	.word	0x08018a7f
 80184f8:	08018b0f 	.word	0x08018b0f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80184fc:	4b4f      	ldr	r3, [pc, #316]	; (801863c <tcp_process+0x298>)
 80184fe:	781b      	ldrb	r3, [r3, #0]
 8018500:	f003 0310 	and.w	r3, r3, #16
 8018504:	2b00      	cmp	r3, #0
 8018506:	f000 80e4 	beq.w	80186d2 <tcp_process+0x32e>
 801850a:	4b4c      	ldr	r3, [pc, #304]	; (801863c <tcp_process+0x298>)
 801850c:	781b      	ldrb	r3, [r3, #0]
 801850e:	f003 0302 	and.w	r3, r3, #2
 8018512:	2b00      	cmp	r3, #0
 8018514:	f000 80dd 	beq.w	80186d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801851c:	1c5a      	adds	r2, r3, #1
 801851e:	4b48      	ldr	r3, [pc, #288]	; (8018640 <tcp_process+0x29c>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	429a      	cmp	r2, r3
 8018524:	f040 80d5 	bne.w	80186d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018528:	4b46      	ldr	r3, [pc, #280]	; (8018644 <tcp_process+0x2a0>)
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	1c5a      	adds	r2, r3, #1
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801853a:	4b41      	ldr	r3, [pc, #260]	; (8018640 <tcp_process+0x29c>)
 801853c:	681a      	ldr	r2, [r3, #0]
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018542:	4b44      	ldr	r3, [pc, #272]	; (8018654 <tcp_process+0x2b0>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	89db      	ldrh	r3, [r3, #14]
 8018548:	b29a      	uxth	r2, r3
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801855c:	4b39      	ldr	r3, [pc, #228]	; (8018644 <tcp_process+0x2a0>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	1e5a      	subs	r2, r3, #1
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	2204      	movs	r2, #4
 801856a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	3304      	adds	r3, #4
 8018574:	4618      	mov	r0, r3
 8018576:	f005 f8bf 	bl	801d6f8 <ip4_route>
 801857a:	4601      	mov	r1, r0
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	3304      	adds	r3, #4
 8018580:	461a      	mov	r2, r3
 8018582:	4620      	mov	r0, r4
 8018584:	f7ff f88c 	bl	80176a0 <tcp_eff_send_mss_netif>
 8018588:	4603      	mov	r3, r0
 801858a:	461a      	mov	r2, r3
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018594:	009a      	lsls	r2, r3, #2
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801859a:	005b      	lsls	r3, r3, #1
 801859c:	f241 111c 	movw	r1, #4380	; 0x111c
 80185a0:	428b      	cmp	r3, r1
 80185a2:	bf38      	it	cc
 80185a4:	460b      	movcc	r3, r1
 80185a6:	429a      	cmp	r2, r3
 80185a8:	d204      	bcs.n	80185b4 <tcp_process+0x210>
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80185ae:	009b      	lsls	r3, r3, #2
 80185b0:	b29b      	uxth	r3, r3
 80185b2:	e00d      	b.n	80185d0 <tcp_process+0x22c>
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80185b8:	005b      	lsls	r3, r3, #1
 80185ba:	f241 121c 	movw	r2, #4380	; 0x111c
 80185be:	4293      	cmp	r3, r2
 80185c0:	d904      	bls.n	80185cc <tcp_process+0x228>
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80185c6:	005b      	lsls	r3, r3, #1
 80185c8:	b29b      	uxth	r3, r3
 80185ca:	e001      	b.n	80185d0 <tcp_process+0x22c>
 80185cc:	f241 131c 	movw	r3, #4380	; 0x111c
 80185d0:	687a      	ldr	r2, [r7, #4]
 80185d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d106      	bne.n	80185ee <tcp_process+0x24a>
 80185e0:	4b13      	ldr	r3, [pc, #76]	; (8018630 <tcp_process+0x28c>)
 80185e2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80185e6:	491c      	ldr	r1, [pc, #112]	; (8018658 <tcp_process+0x2b4>)
 80185e8:	4813      	ldr	r0, [pc, #76]	; (8018638 <tcp_process+0x294>)
 80185ea:	f00c f911 	bl	8024810 <iprintf>
        --pcb->snd_queuelen;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80185f4:	3b01      	subs	r3, #1
 80185f6:	b29a      	uxth	r2, r3
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018602:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018604:	69fb      	ldr	r3, [r7, #28]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d12a      	bne.n	8018660 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801860e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018610:	69fb      	ldr	r3, [r7, #28]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d106      	bne.n	8018624 <tcp_process+0x280>
 8018616:	4b06      	ldr	r3, [pc, #24]	; (8018630 <tcp_process+0x28c>)
 8018618:	f44f 725d 	mov.w	r2, #884	; 0x374
 801861c:	490f      	ldr	r1, [pc, #60]	; (801865c <tcp_process+0x2b8>)
 801861e:	4806      	ldr	r0, [pc, #24]	; (8018638 <tcp_process+0x294>)
 8018620:	f00c f8f6 	bl	8024810 <iprintf>
          pcb->unsent = rseg->next;
 8018624:	69fb      	ldr	r3, [r7, #28]
 8018626:	681a      	ldr	r2, [r3, #0]
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	66da      	str	r2, [r3, #108]	; 0x6c
 801862c:	e01c      	b.n	8018668 <tcp_process+0x2c4>
 801862e:	bf00      	nop
 8018630:	0802b414 	.word	0x0802b414
 8018634:	0802b64c 	.word	0x0802b64c
 8018638:	0802b460 	.word	0x0802b460
 801863c:	2001ad1c 	.word	0x2001ad1c
 8018640:	2001ad14 	.word	0x2001ad14
 8018644:	2001ad10 	.word	0x2001ad10
 8018648:	0802b668 	.word	0x0802b668
 801864c:	2001ad1d 	.word	0x2001ad1d
 8018650:	2001acd8 	.word	0x2001acd8
 8018654:	2001ad00 	.word	0x2001ad00
 8018658:	0802b688 	.word	0x0802b688
 801865c:	0802b6a0 	.word	0x0802b6a0
        } else {
          pcb->unacked = rseg->next;
 8018660:	69fb      	ldr	r3, [r7, #28]
 8018662:	681a      	ldr	r2, [r3, #0]
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018668:	69f8      	ldr	r0, [r7, #28]
 801866a:	f7fe fc54 	bl	8016f16 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018672:	2b00      	cmp	r3, #0
 8018674:	d104      	bne.n	8018680 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801867c:	861a      	strh	r2, [r3, #48]	; 0x30
 801867e:	e006      	b.n	801868e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	2200      	movs	r2, #0
 8018684:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	2200      	movs	r2, #0
 801868a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018694:	2b00      	cmp	r3, #0
 8018696:	d00a      	beq.n	80186ae <tcp_process+0x30a>
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801869e:	687a      	ldr	r2, [r7, #4]
 80186a0:	6910      	ldr	r0, [r2, #16]
 80186a2:	2200      	movs	r2, #0
 80186a4:	6879      	ldr	r1, [r7, #4]
 80186a6:	4798      	blx	r3
 80186a8:	4603      	mov	r3, r0
 80186aa:	76bb      	strb	r3, [r7, #26]
 80186ac:	e001      	b.n	80186b2 <tcp_process+0x30e>
 80186ae:	2300      	movs	r3, #0
 80186b0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80186b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80186b6:	f113 0f0d 	cmn.w	r3, #13
 80186ba:	d102      	bne.n	80186c2 <tcp_process+0x31e>
          return ERR_ABRT;
 80186bc:	f06f 030c 	mvn.w	r3, #12
 80186c0:	e250      	b.n	8018b64 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	8b5b      	ldrh	r3, [r3, #26]
 80186c6:	f043 0302 	orr.w	r3, r3, #2
 80186ca:	b29a      	uxth	r2, r3
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80186d0:	e23a      	b.n	8018b48 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80186d2:	4b98      	ldr	r3, [pc, #608]	; (8018934 <tcp_process+0x590>)
 80186d4:	781b      	ldrb	r3, [r3, #0]
 80186d6:	f003 0310 	and.w	r3, r3, #16
 80186da:	2b00      	cmp	r3, #0
 80186dc:	f000 8234 	beq.w	8018b48 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80186e0:	4b95      	ldr	r3, [pc, #596]	; (8018938 <tcp_process+0x594>)
 80186e2:	6819      	ldr	r1, [r3, #0]
 80186e4:	4b95      	ldr	r3, [pc, #596]	; (801893c <tcp_process+0x598>)
 80186e6:	881b      	ldrh	r3, [r3, #0]
 80186e8:	461a      	mov	r2, r3
 80186ea:	4b95      	ldr	r3, [pc, #596]	; (8018940 <tcp_process+0x59c>)
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80186f0:	4b94      	ldr	r3, [pc, #592]	; (8018944 <tcp_process+0x5a0>)
 80186f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80186f4:	885b      	ldrh	r3, [r3, #2]
 80186f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80186f8:	4a92      	ldr	r2, [pc, #584]	; (8018944 <tcp_process+0x5a0>)
 80186fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80186fc:	8812      	ldrh	r2, [r2, #0]
 80186fe:	b292      	uxth	r2, r2
 8018700:	9202      	str	r2, [sp, #8]
 8018702:	9301      	str	r3, [sp, #4]
 8018704:	4b90      	ldr	r3, [pc, #576]	; (8018948 <tcp_process+0x5a4>)
 8018706:	9300      	str	r3, [sp, #0]
 8018708:	4b90      	ldr	r3, [pc, #576]	; (801894c <tcp_process+0x5a8>)
 801870a:	4602      	mov	r2, r0
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f003 f8dd 	bl	801b8cc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018718:	2b05      	cmp	r3, #5
 801871a:	f200 8215 	bhi.w	8018b48 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	2200      	movs	r2, #0
 8018722:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8018724:	6878      	ldr	r0, [r7, #4]
 8018726:	f002 fea7 	bl	801b478 <tcp_rexmit_rto>
      break;
 801872a:	e20d      	b.n	8018b48 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801872c:	4b81      	ldr	r3, [pc, #516]	; (8018934 <tcp_process+0x590>)
 801872e:	781b      	ldrb	r3, [r3, #0]
 8018730:	f003 0310 	and.w	r3, r3, #16
 8018734:	2b00      	cmp	r3, #0
 8018736:	f000 80a1 	beq.w	801887c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801873a:	4b7f      	ldr	r3, [pc, #508]	; (8018938 <tcp_process+0x594>)
 801873c:	681a      	ldr	r2, [r3, #0]
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018742:	1ad3      	subs	r3, r2, r3
 8018744:	3b01      	subs	r3, #1
 8018746:	2b00      	cmp	r3, #0
 8018748:	db7e      	blt.n	8018848 <tcp_process+0x4a4>
 801874a:	4b7b      	ldr	r3, [pc, #492]	; (8018938 <tcp_process+0x594>)
 801874c:	681a      	ldr	r2, [r3, #0]
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018752:	1ad3      	subs	r3, r2, r3
 8018754:	2b00      	cmp	r3, #0
 8018756:	dc77      	bgt.n	8018848 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	2204      	movs	r2, #4
 801875c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018762:	2b00      	cmp	r3, #0
 8018764:	d102      	bne.n	801876c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8018766:	23fa      	movs	r3, #250	; 0xfa
 8018768:	76bb      	strb	r3, [r7, #26]
 801876a:	e01d      	b.n	80187a8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018770:	699b      	ldr	r3, [r3, #24]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d106      	bne.n	8018784 <tcp_process+0x3e0>
 8018776:	4b76      	ldr	r3, [pc, #472]	; (8018950 <tcp_process+0x5ac>)
 8018778:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801877c:	4975      	ldr	r1, [pc, #468]	; (8018954 <tcp_process+0x5b0>)
 801877e:	4876      	ldr	r0, [pc, #472]	; (8018958 <tcp_process+0x5b4>)
 8018780:	f00c f846 	bl	8024810 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018788:	699b      	ldr	r3, [r3, #24]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d00a      	beq.n	80187a4 <tcp_process+0x400>
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018792:	699b      	ldr	r3, [r3, #24]
 8018794:	687a      	ldr	r2, [r7, #4]
 8018796:	6910      	ldr	r0, [r2, #16]
 8018798:	2200      	movs	r2, #0
 801879a:	6879      	ldr	r1, [r7, #4]
 801879c:	4798      	blx	r3
 801879e:	4603      	mov	r3, r0
 80187a0:	76bb      	strb	r3, [r7, #26]
 80187a2:	e001      	b.n	80187a8 <tcp_process+0x404>
 80187a4:	23f0      	movs	r3, #240	; 0xf0
 80187a6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80187a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d00a      	beq.n	80187c6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80187b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80187b4:	f113 0f0d 	cmn.w	r3, #13
 80187b8:	d002      	beq.n	80187c0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80187ba:	6878      	ldr	r0, [r7, #4]
 80187bc:	f7fd fd18 	bl	80161f0 <tcp_abort>
            }
            return ERR_ABRT;
 80187c0:	f06f 030c 	mvn.w	r3, #12
 80187c4:	e1ce      	b.n	8018b64 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80187c6:	6878      	ldr	r0, [r7, #4]
 80187c8:	f000 fae0 	bl	8018d8c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80187cc:	4b63      	ldr	r3, [pc, #396]	; (801895c <tcp_process+0x5b8>)
 80187ce:	881b      	ldrh	r3, [r3, #0]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d005      	beq.n	80187e0 <tcp_process+0x43c>
            recv_acked--;
 80187d4:	4b61      	ldr	r3, [pc, #388]	; (801895c <tcp_process+0x5b8>)
 80187d6:	881b      	ldrh	r3, [r3, #0]
 80187d8:	3b01      	subs	r3, #1
 80187da:	b29a      	uxth	r2, r3
 80187dc:	4b5f      	ldr	r3, [pc, #380]	; (801895c <tcp_process+0x5b8>)
 80187de:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80187e4:	009a      	lsls	r2, r3, #2
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80187ea:	005b      	lsls	r3, r3, #1
 80187ec:	f241 111c 	movw	r1, #4380	; 0x111c
 80187f0:	428b      	cmp	r3, r1
 80187f2:	bf38      	it	cc
 80187f4:	460b      	movcc	r3, r1
 80187f6:	429a      	cmp	r2, r3
 80187f8:	d204      	bcs.n	8018804 <tcp_process+0x460>
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80187fe:	009b      	lsls	r3, r3, #2
 8018800:	b29b      	uxth	r3, r3
 8018802:	e00d      	b.n	8018820 <tcp_process+0x47c>
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018808:	005b      	lsls	r3, r3, #1
 801880a:	f241 121c 	movw	r2, #4380	; 0x111c
 801880e:	4293      	cmp	r3, r2
 8018810:	d904      	bls.n	801881c <tcp_process+0x478>
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018816:	005b      	lsls	r3, r3, #1
 8018818:	b29b      	uxth	r3, r3
 801881a:	e001      	b.n	8018820 <tcp_process+0x47c>
 801881c:	f241 131c 	movw	r3, #4380	; 0x111c
 8018820:	687a      	ldr	r2, [r7, #4]
 8018822:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8018826:	4b4e      	ldr	r3, [pc, #312]	; (8018960 <tcp_process+0x5bc>)
 8018828:	781b      	ldrb	r3, [r3, #0]
 801882a:	f003 0320 	and.w	r3, r3, #32
 801882e:	2b00      	cmp	r3, #0
 8018830:	d037      	beq.n	80188a2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	8b5b      	ldrh	r3, [r3, #26]
 8018836:	f043 0302 	orr.w	r3, r3, #2
 801883a:	b29a      	uxth	r2, r3
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	2207      	movs	r2, #7
 8018844:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8018846:	e02c      	b.n	80188a2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018848:	4b3b      	ldr	r3, [pc, #236]	; (8018938 <tcp_process+0x594>)
 801884a:	6819      	ldr	r1, [r3, #0]
 801884c:	4b3b      	ldr	r3, [pc, #236]	; (801893c <tcp_process+0x598>)
 801884e:	881b      	ldrh	r3, [r3, #0]
 8018850:	461a      	mov	r2, r3
 8018852:	4b3b      	ldr	r3, [pc, #236]	; (8018940 <tcp_process+0x59c>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018858:	4b3a      	ldr	r3, [pc, #232]	; (8018944 <tcp_process+0x5a0>)
 801885a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801885c:	885b      	ldrh	r3, [r3, #2]
 801885e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018860:	4a38      	ldr	r2, [pc, #224]	; (8018944 <tcp_process+0x5a0>)
 8018862:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018864:	8812      	ldrh	r2, [r2, #0]
 8018866:	b292      	uxth	r2, r2
 8018868:	9202      	str	r2, [sp, #8]
 801886a:	9301      	str	r3, [sp, #4]
 801886c:	4b36      	ldr	r3, [pc, #216]	; (8018948 <tcp_process+0x5a4>)
 801886e:	9300      	str	r3, [sp, #0]
 8018870:	4b36      	ldr	r3, [pc, #216]	; (801894c <tcp_process+0x5a8>)
 8018872:	4602      	mov	r2, r0
 8018874:	6878      	ldr	r0, [r7, #4]
 8018876:	f003 f829 	bl	801b8cc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801887a:	e167      	b.n	8018b4c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801887c:	4b2d      	ldr	r3, [pc, #180]	; (8018934 <tcp_process+0x590>)
 801887e:	781b      	ldrb	r3, [r3, #0]
 8018880:	f003 0302 	and.w	r3, r3, #2
 8018884:	2b00      	cmp	r3, #0
 8018886:	f000 8161 	beq.w	8018b4c <tcp_process+0x7a8>
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801888e:	1e5a      	subs	r2, r3, #1
 8018890:	4b2b      	ldr	r3, [pc, #172]	; (8018940 <tcp_process+0x59c>)
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	429a      	cmp	r2, r3
 8018896:	f040 8159 	bne.w	8018b4c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801889a:	6878      	ldr	r0, [r7, #4]
 801889c:	f002 fe0e 	bl	801b4bc <tcp_rexmit>
      break;
 80188a0:	e154      	b.n	8018b4c <tcp_process+0x7a8>
 80188a2:	e153      	b.n	8018b4c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80188a4:	6878      	ldr	r0, [r7, #4]
 80188a6:	f000 fa71 	bl	8018d8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80188aa:	4b2d      	ldr	r3, [pc, #180]	; (8018960 <tcp_process+0x5bc>)
 80188ac:	781b      	ldrb	r3, [r3, #0]
 80188ae:	f003 0320 	and.w	r3, r3, #32
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	f000 814c 	beq.w	8018b50 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	8b5b      	ldrh	r3, [r3, #26]
 80188bc:	f043 0302 	orr.w	r3, r3, #2
 80188c0:	b29a      	uxth	r2, r3
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	2207      	movs	r2, #7
 80188ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80188cc:	e140      	b.n	8018b50 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80188ce:	6878      	ldr	r0, [r7, #4]
 80188d0:	f000 fa5c 	bl	8018d8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80188d4:	4b22      	ldr	r3, [pc, #136]	; (8018960 <tcp_process+0x5bc>)
 80188d6:	781b      	ldrb	r3, [r3, #0]
 80188d8:	f003 0320 	and.w	r3, r3, #32
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d071      	beq.n	80189c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80188e0:	4b14      	ldr	r3, [pc, #80]	; (8018934 <tcp_process+0x590>)
 80188e2:	781b      	ldrb	r3, [r3, #0]
 80188e4:	f003 0310 	and.w	r3, r3, #16
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d060      	beq.n	80189ae <tcp_process+0x60a>
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80188f0:	4b11      	ldr	r3, [pc, #68]	; (8018938 <tcp_process+0x594>)
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	429a      	cmp	r2, r3
 80188f6:	d15a      	bne.n	80189ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d156      	bne.n	80189ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	8b5b      	ldrh	r3, [r3, #26]
 8018904:	f043 0302 	orr.w	r3, r3, #2
 8018908:	b29a      	uxth	r2, r3
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801890e:	6878      	ldr	r0, [r7, #4]
 8018910:	f7fe fdbc 	bl	801748c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8018914:	4b13      	ldr	r3, [pc, #76]	; (8018964 <tcp_process+0x5c0>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	687a      	ldr	r2, [r7, #4]
 801891a:	429a      	cmp	r2, r3
 801891c:	d105      	bne.n	801892a <tcp_process+0x586>
 801891e:	4b11      	ldr	r3, [pc, #68]	; (8018964 <tcp_process+0x5c0>)
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	68db      	ldr	r3, [r3, #12]
 8018924:	4a0f      	ldr	r2, [pc, #60]	; (8018964 <tcp_process+0x5c0>)
 8018926:	6013      	str	r3, [r2, #0]
 8018928:	e02e      	b.n	8018988 <tcp_process+0x5e4>
 801892a:	4b0e      	ldr	r3, [pc, #56]	; (8018964 <tcp_process+0x5c0>)
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	617b      	str	r3, [r7, #20]
 8018930:	e027      	b.n	8018982 <tcp_process+0x5de>
 8018932:	bf00      	nop
 8018934:	2001ad1c 	.word	0x2001ad1c
 8018938:	2001ad14 	.word	0x2001ad14
 801893c:	2001ad1a 	.word	0x2001ad1a
 8018940:	2001ad10 	.word	0x2001ad10
 8018944:	2001ad00 	.word	0x2001ad00
 8018948:	20016f54 	.word	0x20016f54
 801894c:	20016f58 	.word	0x20016f58
 8018950:	0802b414 	.word	0x0802b414
 8018954:	0802b6b4 	.word	0x0802b6b4
 8018958:	0802b460 	.word	0x0802b460
 801895c:	2001ad18 	.word	0x2001ad18
 8018960:	2001ad1d 	.word	0x2001ad1d
 8018964:	2001ace4 	.word	0x2001ace4
 8018968:	697b      	ldr	r3, [r7, #20]
 801896a:	68db      	ldr	r3, [r3, #12]
 801896c:	687a      	ldr	r2, [r7, #4]
 801896e:	429a      	cmp	r2, r3
 8018970:	d104      	bne.n	801897c <tcp_process+0x5d8>
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	68da      	ldr	r2, [r3, #12]
 8018976:	697b      	ldr	r3, [r7, #20]
 8018978:	60da      	str	r2, [r3, #12]
 801897a:	e005      	b.n	8018988 <tcp_process+0x5e4>
 801897c:	697b      	ldr	r3, [r7, #20]
 801897e:	68db      	ldr	r3, [r3, #12]
 8018980:	617b      	str	r3, [r7, #20]
 8018982:	697b      	ldr	r3, [r7, #20]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d1ef      	bne.n	8018968 <tcp_process+0x5c4>
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	2200      	movs	r2, #0
 801898c:	60da      	str	r2, [r3, #12]
 801898e:	4b77      	ldr	r3, [pc, #476]	; (8018b6c <tcp_process+0x7c8>)
 8018990:	2201      	movs	r2, #1
 8018992:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	220a      	movs	r2, #10
 8018998:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801899a:	4b75      	ldr	r3, [pc, #468]	; (8018b70 <tcp_process+0x7cc>)
 801899c:	681a      	ldr	r2, [r3, #0]
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	60da      	str	r2, [r3, #12]
 80189a2:	4a73      	ldr	r2, [pc, #460]	; (8018b70 <tcp_process+0x7cc>)
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	6013      	str	r3, [r2, #0]
 80189a8:	f003 f952 	bl	801bc50 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80189ac:	e0d2      	b.n	8018b54 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	8b5b      	ldrh	r3, [r3, #26]
 80189b2:	f043 0302 	orr.w	r3, r3, #2
 80189b6:	b29a      	uxth	r2, r3
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	2208      	movs	r2, #8
 80189c0:	751a      	strb	r2, [r3, #20]
      break;
 80189c2:	e0c7      	b.n	8018b54 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80189c4:	4b6b      	ldr	r3, [pc, #428]	; (8018b74 <tcp_process+0x7d0>)
 80189c6:	781b      	ldrb	r3, [r3, #0]
 80189c8:	f003 0310 	and.w	r3, r3, #16
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	f000 80c1 	beq.w	8018b54 <tcp_process+0x7b0>
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80189d6:	4b68      	ldr	r3, [pc, #416]	; (8018b78 <tcp_process+0x7d4>)
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	429a      	cmp	r2, r3
 80189dc:	f040 80ba 	bne.w	8018b54 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	f040 80b5 	bne.w	8018b54 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	2206      	movs	r2, #6
 80189ee:	751a      	strb	r2, [r3, #20]
      break;
 80189f0:	e0b0      	b.n	8018b54 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80189f2:	6878      	ldr	r0, [r7, #4]
 80189f4:	f000 f9ca 	bl	8018d8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80189f8:	4b60      	ldr	r3, [pc, #384]	; (8018b7c <tcp_process+0x7d8>)
 80189fa:	781b      	ldrb	r3, [r3, #0]
 80189fc:	f003 0320 	and.w	r3, r3, #32
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	f000 80a9 	beq.w	8018b58 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	8b5b      	ldrh	r3, [r3, #26]
 8018a0a:	f043 0302 	orr.w	r3, r3, #2
 8018a0e:	b29a      	uxth	r2, r3
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018a14:	6878      	ldr	r0, [r7, #4]
 8018a16:	f7fe fd39 	bl	801748c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018a1a:	4b59      	ldr	r3, [pc, #356]	; (8018b80 <tcp_process+0x7dc>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	687a      	ldr	r2, [r7, #4]
 8018a20:	429a      	cmp	r2, r3
 8018a22:	d105      	bne.n	8018a30 <tcp_process+0x68c>
 8018a24:	4b56      	ldr	r3, [pc, #344]	; (8018b80 <tcp_process+0x7dc>)
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	68db      	ldr	r3, [r3, #12]
 8018a2a:	4a55      	ldr	r2, [pc, #340]	; (8018b80 <tcp_process+0x7dc>)
 8018a2c:	6013      	str	r3, [r2, #0]
 8018a2e:	e013      	b.n	8018a58 <tcp_process+0x6b4>
 8018a30:	4b53      	ldr	r3, [pc, #332]	; (8018b80 <tcp_process+0x7dc>)
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	613b      	str	r3, [r7, #16]
 8018a36:	e00c      	b.n	8018a52 <tcp_process+0x6ae>
 8018a38:	693b      	ldr	r3, [r7, #16]
 8018a3a:	68db      	ldr	r3, [r3, #12]
 8018a3c:	687a      	ldr	r2, [r7, #4]
 8018a3e:	429a      	cmp	r2, r3
 8018a40:	d104      	bne.n	8018a4c <tcp_process+0x6a8>
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	68da      	ldr	r2, [r3, #12]
 8018a46:	693b      	ldr	r3, [r7, #16]
 8018a48:	60da      	str	r2, [r3, #12]
 8018a4a:	e005      	b.n	8018a58 <tcp_process+0x6b4>
 8018a4c:	693b      	ldr	r3, [r7, #16]
 8018a4e:	68db      	ldr	r3, [r3, #12]
 8018a50:	613b      	str	r3, [r7, #16]
 8018a52:	693b      	ldr	r3, [r7, #16]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d1ef      	bne.n	8018a38 <tcp_process+0x694>
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	60da      	str	r2, [r3, #12]
 8018a5e:	4b43      	ldr	r3, [pc, #268]	; (8018b6c <tcp_process+0x7c8>)
 8018a60:	2201      	movs	r2, #1
 8018a62:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	220a      	movs	r2, #10
 8018a68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018a6a:	4b41      	ldr	r3, [pc, #260]	; (8018b70 <tcp_process+0x7cc>)
 8018a6c:	681a      	ldr	r2, [r3, #0]
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	60da      	str	r2, [r3, #12]
 8018a72:	4a3f      	ldr	r2, [pc, #252]	; (8018b70 <tcp_process+0x7cc>)
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	6013      	str	r3, [r2, #0]
 8018a78:	f003 f8ea 	bl	801bc50 <tcp_timer_needed>
      }
      break;
 8018a7c:	e06c      	b.n	8018b58 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018a7e:	6878      	ldr	r0, [r7, #4]
 8018a80:	f000 f984 	bl	8018d8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018a84:	4b3b      	ldr	r3, [pc, #236]	; (8018b74 <tcp_process+0x7d0>)
 8018a86:	781b      	ldrb	r3, [r3, #0]
 8018a88:	f003 0310 	and.w	r3, r3, #16
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d065      	beq.n	8018b5c <tcp_process+0x7b8>
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018a94:	4b38      	ldr	r3, [pc, #224]	; (8018b78 <tcp_process+0x7d4>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	429a      	cmp	r2, r3
 8018a9a:	d15f      	bne.n	8018b5c <tcp_process+0x7b8>
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d15b      	bne.n	8018b5c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018aa4:	6878      	ldr	r0, [r7, #4]
 8018aa6:	f7fe fcf1 	bl	801748c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018aaa:	4b35      	ldr	r3, [pc, #212]	; (8018b80 <tcp_process+0x7dc>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	687a      	ldr	r2, [r7, #4]
 8018ab0:	429a      	cmp	r2, r3
 8018ab2:	d105      	bne.n	8018ac0 <tcp_process+0x71c>
 8018ab4:	4b32      	ldr	r3, [pc, #200]	; (8018b80 <tcp_process+0x7dc>)
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	68db      	ldr	r3, [r3, #12]
 8018aba:	4a31      	ldr	r2, [pc, #196]	; (8018b80 <tcp_process+0x7dc>)
 8018abc:	6013      	str	r3, [r2, #0]
 8018abe:	e013      	b.n	8018ae8 <tcp_process+0x744>
 8018ac0:	4b2f      	ldr	r3, [pc, #188]	; (8018b80 <tcp_process+0x7dc>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	60fb      	str	r3, [r7, #12]
 8018ac6:	e00c      	b.n	8018ae2 <tcp_process+0x73e>
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	68db      	ldr	r3, [r3, #12]
 8018acc:	687a      	ldr	r2, [r7, #4]
 8018ace:	429a      	cmp	r2, r3
 8018ad0:	d104      	bne.n	8018adc <tcp_process+0x738>
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	68da      	ldr	r2, [r3, #12]
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	60da      	str	r2, [r3, #12]
 8018ada:	e005      	b.n	8018ae8 <tcp_process+0x744>
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	68db      	ldr	r3, [r3, #12]
 8018ae0:	60fb      	str	r3, [r7, #12]
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d1ef      	bne.n	8018ac8 <tcp_process+0x724>
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	2200      	movs	r2, #0
 8018aec:	60da      	str	r2, [r3, #12]
 8018aee:	4b1f      	ldr	r3, [pc, #124]	; (8018b6c <tcp_process+0x7c8>)
 8018af0:	2201      	movs	r2, #1
 8018af2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	220a      	movs	r2, #10
 8018af8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018afa:	4b1d      	ldr	r3, [pc, #116]	; (8018b70 <tcp_process+0x7cc>)
 8018afc:	681a      	ldr	r2, [r3, #0]
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	60da      	str	r2, [r3, #12]
 8018b02:	4a1b      	ldr	r2, [pc, #108]	; (8018b70 <tcp_process+0x7cc>)
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6013      	str	r3, [r2, #0]
 8018b08:	f003 f8a2 	bl	801bc50 <tcp_timer_needed>
      }
      break;
 8018b0c:	e026      	b.n	8018b5c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018b0e:	6878      	ldr	r0, [r7, #4]
 8018b10:	f000 f93c 	bl	8018d8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018b14:	4b17      	ldr	r3, [pc, #92]	; (8018b74 <tcp_process+0x7d0>)
 8018b16:	781b      	ldrb	r3, [r3, #0]
 8018b18:	f003 0310 	and.w	r3, r3, #16
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d01f      	beq.n	8018b60 <tcp_process+0x7bc>
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018b24:	4b14      	ldr	r3, [pc, #80]	; (8018b78 <tcp_process+0x7d4>)
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	429a      	cmp	r2, r3
 8018b2a:	d119      	bne.n	8018b60 <tcp_process+0x7bc>
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d115      	bne.n	8018b60 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8018b34:	4b11      	ldr	r3, [pc, #68]	; (8018b7c <tcp_process+0x7d8>)
 8018b36:	781b      	ldrb	r3, [r3, #0]
 8018b38:	f043 0310 	orr.w	r3, r3, #16
 8018b3c:	b2da      	uxtb	r2, r3
 8018b3e:	4b0f      	ldr	r3, [pc, #60]	; (8018b7c <tcp_process+0x7d8>)
 8018b40:	701a      	strb	r2, [r3, #0]
      }
      break;
 8018b42:	e00d      	b.n	8018b60 <tcp_process+0x7bc>
    default:
      break;
 8018b44:	bf00      	nop
 8018b46:	e00c      	b.n	8018b62 <tcp_process+0x7be>
      break;
 8018b48:	bf00      	nop
 8018b4a:	e00a      	b.n	8018b62 <tcp_process+0x7be>
      break;
 8018b4c:	bf00      	nop
 8018b4e:	e008      	b.n	8018b62 <tcp_process+0x7be>
      break;
 8018b50:	bf00      	nop
 8018b52:	e006      	b.n	8018b62 <tcp_process+0x7be>
      break;
 8018b54:	bf00      	nop
 8018b56:	e004      	b.n	8018b62 <tcp_process+0x7be>
      break;
 8018b58:	bf00      	nop
 8018b5a:	e002      	b.n	8018b62 <tcp_process+0x7be>
      break;
 8018b5c:	bf00      	nop
 8018b5e:	e000      	b.n	8018b62 <tcp_process+0x7be>
      break;
 8018b60:	bf00      	nop
  }
  return ERR_OK;
 8018b62:	2300      	movs	r3, #0
}
 8018b64:	4618      	mov	r0, r3
 8018b66:	3724      	adds	r7, #36	; 0x24
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	bd90      	pop	{r4, r7, pc}
 8018b6c:	2001acec 	.word	0x2001acec
 8018b70:	2001ace8 	.word	0x2001ace8
 8018b74:	2001ad1c 	.word	0x2001ad1c
 8018b78:	2001ad14 	.word	0x2001ad14
 8018b7c:	2001ad1d 	.word	0x2001ad1d
 8018b80:	2001ace4 	.word	0x2001ace4

08018b84 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018b84:	b590      	push	{r4, r7, lr}
 8018b86:	b085      	sub	sp, #20
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d106      	bne.n	8018ba2 <tcp_oos_insert_segment+0x1e>
 8018b94:	4b3b      	ldr	r3, [pc, #236]	; (8018c84 <tcp_oos_insert_segment+0x100>)
 8018b96:	f240 421f 	movw	r2, #1055	; 0x41f
 8018b9a:	493b      	ldr	r1, [pc, #236]	; (8018c88 <tcp_oos_insert_segment+0x104>)
 8018b9c:	483b      	ldr	r0, [pc, #236]	; (8018c8c <tcp_oos_insert_segment+0x108>)
 8018b9e:	f00b fe37 	bl	8024810 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	68db      	ldr	r3, [r3, #12]
 8018ba6:	899b      	ldrh	r3, [r3, #12]
 8018ba8:	b29b      	uxth	r3, r3
 8018baa:	4618      	mov	r0, r3
 8018bac:	f7fb f93e 	bl	8013e2c <lwip_htons>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	b2db      	uxtb	r3, r3
 8018bb4:	f003 0301 	and.w	r3, r3, #1
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d028      	beq.n	8018c0e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018bbc:	6838      	ldr	r0, [r7, #0]
 8018bbe:	f7fe f995 	bl	8016eec <tcp_segs_free>
    next = NULL;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	603b      	str	r3, [r7, #0]
 8018bc6:	e056      	b.n	8018c76 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018bc8:	683b      	ldr	r3, [r7, #0]
 8018bca:	68db      	ldr	r3, [r3, #12]
 8018bcc:	899b      	ldrh	r3, [r3, #12]
 8018bce:	b29b      	uxth	r3, r3
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	f7fb f92b 	bl	8013e2c <lwip_htons>
 8018bd6:	4603      	mov	r3, r0
 8018bd8:	b2db      	uxtb	r3, r3
 8018bda:	f003 0301 	and.w	r3, r3, #1
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d00d      	beq.n	8018bfe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	68db      	ldr	r3, [r3, #12]
 8018be6:	899b      	ldrh	r3, [r3, #12]
 8018be8:	b29c      	uxth	r4, r3
 8018bea:	2001      	movs	r0, #1
 8018bec:	f7fb f91e 	bl	8013e2c <lwip_htons>
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	461a      	mov	r2, r3
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	68db      	ldr	r3, [r3, #12]
 8018bf8:	4322      	orrs	r2, r4
 8018bfa:	b292      	uxth	r2, r2
 8018bfc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018bfe:	683b      	ldr	r3, [r7, #0]
 8018c00:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018c02:	683b      	ldr	r3, [r7, #0]
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018c08:	68f8      	ldr	r0, [r7, #12]
 8018c0a:	f7fe f984 	bl	8016f16 <tcp_seg_free>
    while (next &&
 8018c0e:	683b      	ldr	r3, [r7, #0]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d00e      	beq.n	8018c32 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	891b      	ldrh	r3, [r3, #8]
 8018c18:	461a      	mov	r2, r3
 8018c1a:	4b1d      	ldr	r3, [pc, #116]	; (8018c90 <tcp_oos_insert_segment+0x10c>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	441a      	add	r2, r3
 8018c20:	683b      	ldr	r3, [r7, #0]
 8018c22:	68db      	ldr	r3, [r3, #12]
 8018c24:	685b      	ldr	r3, [r3, #4]
 8018c26:	6839      	ldr	r1, [r7, #0]
 8018c28:	8909      	ldrh	r1, [r1, #8]
 8018c2a:	440b      	add	r3, r1
 8018c2c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	daca      	bge.n	8018bc8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8018c32:	683b      	ldr	r3, [r7, #0]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d01e      	beq.n	8018c76 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	891b      	ldrh	r3, [r3, #8]
 8018c3c:	461a      	mov	r2, r3
 8018c3e:	4b14      	ldr	r3, [pc, #80]	; (8018c90 <tcp_oos_insert_segment+0x10c>)
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	441a      	add	r2, r3
 8018c44:	683b      	ldr	r3, [r7, #0]
 8018c46:	68db      	ldr	r3, [r3, #12]
 8018c48:	685b      	ldr	r3, [r3, #4]
 8018c4a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	dd12      	ble.n	8018c76 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018c50:	683b      	ldr	r3, [r7, #0]
 8018c52:	68db      	ldr	r3, [r3, #12]
 8018c54:	685b      	ldr	r3, [r3, #4]
 8018c56:	b29a      	uxth	r2, r3
 8018c58:	4b0d      	ldr	r3, [pc, #52]	; (8018c90 <tcp_oos_insert_segment+0x10c>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	b29b      	uxth	r3, r3
 8018c5e:	1ad3      	subs	r3, r2, r3
 8018c60:	b29a      	uxth	r2, r3
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	685a      	ldr	r2, [r3, #4]
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	891b      	ldrh	r3, [r3, #8]
 8018c6e:	4619      	mov	r1, r3
 8018c70:	4610      	mov	r0, r2
 8018c72:	f7fc fb47 	bl	8015304 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	683a      	ldr	r2, [r7, #0]
 8018c7a:	601a      	str	r2, [r3, #0]
}
 8018c7c:	bf00      	nop
 8018c7e:	3714      	adds	r7, #20
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd90      	pop	{r4, r7, pc}
 8018c84:	0802b414 	.word	0x0802b414
 8018c88:	0802b6d4 	.word	0x0802b6d4
 8018c8c:	0802b460 	.word	0x0802b460
 8018c90:	2001ad10 	.word	0x2001ad10

08018c94 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018c94:	b5b0      	push	{r4, r5, r7, lr}
 8018c96:	b086      	sub	sp, #24
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	60f8      	str	r0, [r7, #12]
 8018c9c:	60b9      	str	r1, [r7, #8]
 8018c9e:	607a      	str	r2, [r7, #4]
 8018ca0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8018ca2:	e03e      	b.n	8018d22 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8018ca4:	68bb      	ldr	r3, [r7, #8]
 8018ca6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018ca8:	68bb      	ldr	r3, [r7, #8]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8018cae:	697b      	ldr	r3, [r7, #20]
 8018cb0:	685b      	ldr	r3, [r3, #4]
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	f7fc fd3a 	bl	801572c <pbuf_clen>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018cc2:	8a7a      	ldrh	r2, [r7, #18]
 8018cc4:	429a      	cmp	r2, r3
 8018cc6:	d906      	bls.n	8018cd6 <tcp_free_acked_segments+0x42>
 8018cc8:	4b2a      	ldr	r3, [pc, #168]	; (8018d74 <tcp_free_acked_segments+0xe0>)
 8018cca:	f240 4257 	movw	r2, #1111	; 0x457
 8018cce:	492a      	ldr	r1, [pc, #168]	; (8018d78 <tcp_free_acked_segments+0xe4>)
 8018cd0:	482a      	ldr	r0, [pc, #168]	; (8018d7c <tcp_free_acked_segments+0xe8>)
 8018cd2:	f00b fd9d 	bl	8024810 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8018cdc:	8a7b      	ldrh	r3, [r7, #18]
 8018cde:	1ad3      	subs	r3, r2, r3
 8018ce0:	b29a      	uxth	r2, r3
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018ce8:	697b      	ldr	r3, [r7, #20]
 8018cea:	891a      	ldrh	r2, [r3, #8]
 8018cec:	4b24      	ldr	r3, [pc, #144]	; (8018d80 <tcp_free_acked_segments+0xec>)
 8018cee:	881b      	ldrh	r3, [r3, #0]
 8018cf0:	4413      	add	r3, r2
 8018cf2:	b29a      	uxth	r2, r3
 8018cf4:	4b22      	ldr	r3, [pc, #136]	; (8018d80 <tcp_free_acked_segments+0xec>)
 8018cf6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018cf8:	6978      	ldr	r0, [r7, #20]
 8018cfa:	f7fe f90c 	bl	8016f16 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d00c      	beq.n	8018d22 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018d08:	68bb      	ldr	r3, [r7, #8]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d109      	bne.n	8018d22 <tcp_free_acked_segments+0x8e>
 8018d0e:	683b      	ldr	r3, [r7, #0]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d106      	bne.n	8018d22 <tcp_free_acked_segments+0x8e>
 8018d14:	4b17      	ldr	r3, [pc, #92]	; (8018d74 <tcp_free_acked_segments+0xe0>)
 8018d16:	f240 4261 	movw	r2, #1121	; 0x461
 8018d1a:	491a      	ldr	r1, [pc, #104]	; (8018d84 <tcp_free_acked_segments+0xf0>)
 8018d1c:	4817      	ldr	r0, [pc, #92]	; (8018d7c <tcp_free_acked_segments+0xe8>)
 8018d1e:	f00b fd77 	bl	8024810 <iprintf>
  while (seg_list != NULL &&
 8018d22:	68bb      	ldr	r3, [r7, #8]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d020      	beq.n	8018d6a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018d28:	68bb      	ldr	r3, [r7, #8]
 8018d2a:	68db      	ldr	r3, [r3, #12]
 8018d2c:	685b      	ldr	r3, [r3, #4]
 8018d2e:	4618      	mov	r0, r3
 8018d30:	f7fb f891 	bl	8013e56 <lwip_htonl>
 8018d34:	4604      	mov	r4, r0
 8018d36:	68bb      	ldr	r3, [r7, #8]
 8018d38:	891b      	ldrh	r3, [r3, #8]
 8018d3a:	461d      	mov	r5, r3
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	68db      	ldr	r3, [r3, #12]
 8018d40:	899b      	ldrh	r3, [r3, #12]
 8018d42:	b29b      	uxth	r3, r3
 8018d44:	4618      	mov	r0, r3
 8018d46:	f7fb f871 	bl	8013e2c <lwip_htons>
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	b2db      	uxtb	r3, r3
 8018d4e:	f003 0303 	and.w	r3, r3, #3
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d001      	beq.n	8018d5a <tcp_free_acked_segments+0xc6>
 8018d56:	2301      	movs	r3, #1
 8018d58:	e000      	b.n	8018d5c <tcp_free_acked_segments+0xc8>
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	442b      	add	r3, r5
 8018d5e:	18e2      	adds	r2, r4, r3
 8018d60:	4b09      	ldr	r3, [pc, #36]	; (8018d88 <tcp_free_acked_segments+0xf4>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	dd9c      	ble.n	8018ca4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018d6a:	68bb      	ldr	r3, [r7, #8]
}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	3718      	adds	r7, #24
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bdb0      	pop	{r4, r5, r7, pc}
 8018d74:	0802b414 	.word	0x0802b414
 8018d78:	0802b6fc 	.word	0x0802b6fc
 8018d7c:	0802b460 	.word	0x0802b460
 8018d80:	2001ad18 	.word	0x2001ad18
 8018d84:	0802b724 	.word	0x0802b724
 8018d88:	2001ad14 	.word	0x2001ad14

08018d8c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018d8c:	b5b0      	push	{r4, r5, r7, lr}
 8018d8e:	b094      	sub	sp, #80	; 0x50
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018d94:	2300      	movs	r3, #0
 8018d96:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d106      	bne.n	8018dac <tcp_receive+0x20>
 8018d9e:	4b91      	ldr	r3, [pc, #580]	; (8018fe4 <tcp_receive+0x258>)
 8018da0:	f240 427b 	movw	r2, #1147	; 0x47b
 8018da4:	4990      	ldr	r1, [pc, #576]	; (8018fe8 <tcp_receive+0x25c>)
 8018da6:	4891      	ldr	r0, [pc, #580]	; (8018fec <tcp_receive+0x260>)
 8018da8:	f00b fd32 	bl	8024810 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	7d1b      	ldrb	r3, [r3, #20]
 8018db0:	2b03      	cmp	r3, #3
 8018db2:	d806      	bhi.n	8018dc2 <tcp_receive+0x36>
 8018db4:	4b8b      	ldr	r3, [pc, #556]	; (8018fe4 <tcp_receive+0x258>)
 8018db6:	f240 427c 	movw	r2, #1148	; 0x47c
 8018dba:	498d      	ldr	r1, [pc, #564]	; (8018ff0 <tcp_receive+0x264>)
 8018dbc:	488b      	ldr	r0, [pc, #556]	; (8018fec <tcp_receive+0x260>)
 8018dbe:	f00b fd27 	bl	8024810 <iprintf>

  if (flags & TCP_ACK) {
 8018dc2:	4b8c      	ldr	r3, [pc, #560]	; (8018ff4 <tcp_receive+0x268>)
 8018dc4:	781b      	ldrb	r3, [r3, #0]
 8018dc6:	f003 0310 	and.w	r3, r3, #16
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	f000 8264 	beq.w	8019298 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018dd6:	461a      	mov	r2, r3
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018ddc:	4413      	add	r3, r2
 8018dde:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018de4:	4b84      	ldr	r3, [pc, #528]	; (8018ff8 <tcp_receive+0x26c>)
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	1ad3      	subs	r3, r2, r3
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	db1b      	blt.n	8018e26 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8018df2:	4b81      	ldr	r3, [pc, #516]	; (8018ff8 <tcp_receive+0x26c>)
 8018df4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018df6:	429a      	cmp	r2, r3
 8018df8:	d106      	bne.n	8018e08 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018dfe:	4b7f      	ldr	r3, [pc, #508]	; (8018ffc <tcp_receive+0x270>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	1ad3      	subs	r3, r2, r3
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	db0e      	blt.n	8018e26 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8018e0c:	4b7b      	ldr	r3, [pc, #492]	; (8018ffc <tcp_receive+0x270>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018e10:	429a      	cmp	r2, r3
 8018e12:	d125      	bne.n	8018e60 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018e14:	4b7a      	ldr	r3, [pc, #488]	; (8019000 <tcp_receive+0x274>)
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	89db      	ldrh	r3, [r3, #14]
 8018e1a:	b29a      	uxth	r2, r3
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018e22:	429a      	cmp	r2, r3
 8018e24:	d91c      	bls.n	8018e60 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018e26:	4b76      	ldr	r3, [pc, #472]	; (8019000 <tcp_receive+0x274>)
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	89db      	ldrh	r3, [r3, #14]
 8018e2c:	b29a      	uxth	r2, r3
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018e40:	429a      	cmp	r2, r3
 8018e42:	d205      	bcs.n	8018e50 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8018e50:	4b69      	ldr	r3, [pc, #420]	; (8018ff8 <tcp_receive+0x26c>)
 8018e52:	681a      	ldr	r2, [r3, #0]
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8018e58:	4b68      	ldr	r3, [pc, #416]	; (8018ffc <tcp_receive+0x270>)
 8018e5a:	681a      	ldr	r2, [r3, #0]
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018e60:	4b66      	ldr	r3, [pc, #408]	; (8018ffc <tcp_receive+0x270>)
 8018e62:	681a      	ldr	r2, [r3, #0]
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e68:	1ad3      	subs	r3, r2, r3
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	dc58      	bgt.n	8018f20 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018e6e:	4b65      	ldr	r3, [pc, #404]	; (8019004 <tcp_receive+0x278>)
 8018e70:	881b      	ldrh	r3, [r3, #0]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d14b      	bne.n	8018f0e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e7a:	687a      	ldr	r2, [r7, #4]
 8018e7c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8018e80:	4413      	add	r3, r2
 8018e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e84:	429a      	cmp	r2, r3
 8018e86:	d142      	bne.n	8018f0e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	db3d      	blt.n	8018f0e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018e96:	4b59      	ldr	r3, [pc, #356]	; (8018ffc <tcp_receive+0x270>)
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	429a      	cmp	r2, r3
 8018e9c:	d137      	bne.n	8018f0e <tcp_receive+0x182>
              found_dupack = 1;
 8018e9e:	2301      	movs	r3, #1
 8018ea0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018ea8:	2bff      	cmp	r3, #255	; 0xff
 8018eaa:	d007      	beq.n	8018ebc <tcp_receive+0x130>
                ++pcb->dupacks;
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018eb2:	3301      	adds	r3, #1
 8018eb4:	b2da      	uxtb	r2, r3
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018ec2:	2b03      	cmp	r3, #3
 8018ec4:	d91b      	bls.n	8018efe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018ed0:	4413      	add	r3, r2
 8018ed2:	b29a      	uxth	r2, r3
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018eda:	429a      	cmp	r2, r3
 8018edc:	d30a      	bcc.n	8018ef4 <tcp_receive+0x168>
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018ee8:	4413      	add	r3, r2
 8018eea:	b29a      	uxth	r2, r3
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018ef2:	e004      	b.n	8018efe <tcp_receive+0x172>
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018efa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018f04:	2b02      	cmp	r3, #2
 8018f06:	d902      	bls.n	8018f0e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	f002 fb43 	bl	801b594 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	f040 8161 	bne.w	80191d8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	2200      	movs	r2, #0
 8018f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018f1e:	e15b      	b.n	80191d8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018f20:	4b36      	ldr	r3, [pc, #216]	; (8018ffc <tcp_receive+0x270>)
 8018f22:	681a      	ldr	r2, [r3, #0]
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f28:	1ad3      	subs	r3, r2, r3
 8018f2a:	3b01      	subs	r3, #1
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	f2c0 814e 	blt.w	80191ce <tcp_receive+0x442>
 8018f32:	4b32      	ldr	r3, [pc, #200]	; (8018ffc <tcp_receive+0x270>)
 8018f34:	681a      	ldr	r2, [r3, #0]
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f3a:	1ad3      	subs	r3, r2, r3
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	f300 8146 	bgt.w	80191ce <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	8b5b      	ldrh	r3, [r3, #26]
 8018f46:	f003 0304 	and.w	r3, r3, #4
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d010      	beq.n	8018f70 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	8b5b      	ldrh	r3, [r3, #26]
 8018f52:	f023 0304 	bic.w	r3, r3, #4
 8018f56:	b29a      	uxth	r2, r3
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	2200      	movs	r2, #0
 8018f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	2200      	movs	r2, #0
 8018f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018f7e:	10db      	asrs	r3, r3, #3
 8018f80:	b21b      	sxth	r3, r3
 8018f82:	b29a      	uxth	r2, r3
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018f8a:	b29b      	uxth	r3, r3
 8018f8c:	4413      	add	r3, r2
 8018f8e:	b29b      	uxth	r3, r3
 8018f90:	b21a      	sxth	r2, r3
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018f98:	4b18      	ldr	r3, [pc, #96]	; (8018ffc <tcp_receive+0x270>)
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	b29a      	uxth	r2, r3
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fa2:	b29b      	uxth	r3, r3
 8018fa4:	1ad3      	subs	r3, r2, r3
 8018fa6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	2200      	movs	r2, #0
 8018fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8018fb0:	4b12      	ldr	r3, [pc, #72]	; (8018ffc <tcp_receive+0x270>)
 8018fb2:	681a      	ldr	r2, [r3, #0]
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	7d1b      	ldrb	r3, [r3, #20]
 8018fbc:	2b03      	cmp	r3, #3
 8018fbe:	f240 8097 	bls.w	80190f0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018fce:	429a      	cmp	r2, r3
 8018fd0:	d245      	bcs.n	801905e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	8b5b      	ldrh	r3, [r3, #26]
 8018fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d014      	beq.n	8019008 <tcp_receive+0x27c>
 8018fde:	2301      	movs	r3, #1
 8018fe0:	e013      	b.n	801900a <tcp_receive+0x27e>
 8018fe2:	bf00      	nop
 8018fe4:	0802b414 	.word	0x0802b414
 8018fe8:	0802b744 	.word	0x0802b744
 8018fec:	0802b460 	.word	0x0802b460
 8018ff0:	0802b760 	.word	0x0802b760
 8018ff4:	2001ad1c 	.word	0x2001ad1c
 8018ff8:	2001ad10 	.word	0x2001ad10
 8018ffc:	2001ad14 	.word	0x2001ad14
 8019000:	2001ad00 	.word	0x2001ad00
 8019004:	2001ad1a 	.word	0x2001ad1a
 8019008:	2302      	movs	r3, #2
 801900a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801900e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8019012:	b29a      	uxth	r2, r3
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019018:	fb12 f303 	smulbb	r3, r2, r3
 801901c:	b29b      	uxth	r3, r3
 801901e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019020:	4293      	cmp	r3, r2
 8019022:	bf28      	it	cs
 8019024:	4613      	movcs	r3, r2
 8019026:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801902e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019030:	4413      	add	r3, r2
 8019032:	b29a      	uxth	r2, r3
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801903a:	429a      	cmp	r2, r3
 801903c:	d309      	bcc.n	8019052 <tcp_receive+0x2c6>
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019044:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019046:	4413      	add	r3, r2
 8019048:	b29a      	uxth	r2, r3
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019050:	e04e      	b.n	80190f0 <tcp_receive+0x364>
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019058:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801905c:	e048      	b.n	80190f0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019064:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019066:	4413      	add	r3, r2
 8019068:	b29a      	uxth	r2, r3
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8019070:	429a      	cmp	r2, r3
 8019072:	d309      	bcc.n	8019088 <tcp_receive+0x2fc>
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801907a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801907c:	4413      	add	r3, r2
 801907e:	b29a      	uxth	r2, r3
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019086:	e004      	b.n	8019092 <tcp_receive+0x306>
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801908e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801909e:	429a      	cmp	r2, r3
 80190a0:	d326      	bcc.n	80190f0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80190ae:	1ad3      	subs	r3, r2, r3
 80190b0:	b29a      	uxth	r2, r3
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190c2:	4413      	add	r3, r2
 80190c4:	b29a      	uxth	r2, r3
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80190cc:	429a      	cmp	r2, r3
 80190ce:	d30a      	bcc.n	80190e6 <tcp_receive+0x35a>
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80190da:	4413      	add	r3, r2
 80190dc:	b29a      	uxth	r2, r3
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80190e4:	e004      	b.n	80190f0 <tcp_receive+0x364>
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80190ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190f8:	4a98      	ldr	r2, [pc, #608]	; (801935c <tcp_receive+0x5d0>)
 80190fa:	6878      	ldr	r0, [r7, #4]
 80190fc:	f7ff fdca 	bl	8018c94 <tcp_free_acked_segments>
 8019100:	4602      	mov	r2, r0
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801910e:	4a94      	ldr	r2, [pc, #592]	; (8019360 <tcp_receive+0x5d4>)
 8019110:	6878      	ldr	r0, [r7, #4]
 8019112:	f7ff fdbf 	bl	8018c94 <tcp_free_acked_segments>
 8019116:	4602      	mov	r2, r0
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019120:	2b00      	cmp	r3, #0
 8019122:	d104      	bne.n	801912e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801912a:	861a      	strh	r2, [r3, #48]	; 0x30
 801912c:	e002      	b.n	8019134 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	2200      	movs	r2, #0
 8019132:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	2200      	movs	r2, #0
 8019138:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801913e:	2b00      	cmp	r3, #0
 8019140:	d103      	bne.n	801914a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	2200      	movs	r2, #0
 8019146:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019150:	4b84      	ldr	r3, [pc, #528]	; (8019364 <tcp_receive+0x5d8>)
 8019152:	881b      	ldrh	r3, [r3, #0]
 8019154:	4413      	add	r3, r2
 8019156:	b29a      	uxth	r2, r3
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	8b5b      	ldrh	r3, [r3, #26]
 8019162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019166:	2b00      	cmp	r3, #0
 8019168:	d035      	beq.n	80191d6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801916e:	2b00      	cmp	r3, #0
 8019170:	d118      	bne.n	80191a4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019176:	2b00      	cmp	r3, #0
 8019178:	d00c      	beq.n	8019194 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019182:	68db      	ldr	r3, [r3, #12]
 8019184:	685b      	ldr	r3, [r3, #4]
 8019186:	4618      	mov	r0, r3
 8019188:	f7fa fe65 	bl	8013e56 <lwip_htonl>
 801918c:	4603      	mov	r3, r0
 801918e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8019190:	2b00      	cmp	r3, #0
 8019192:	dc20      	bgt.n	80191d6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	8b5b      	ldrh	r3, [r3, #26]
 8019198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801919c:	b29a      	uxth	r2, r3
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80191a2:	e018      	b.n	80191d6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80191ac:	68db      	ldr	r3, [r3, #12]
 80191ae:	685b      	ldr	r3, [r3, #4]
 80191b0:	4618      	mov	r0, r3
 80191b2:	f7fa fe50 	bl	8013e56 <lwip_htonl>
 80191b6:	4603      	mov	r3, r0
 80191b8:	1ae3      	subs	r3, r4, r3
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	dc0b      	bgt.n	80191d6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	8b5b      	ldrh	r3, [r3, #26]
 80191c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80191c6:	b29a      	uxth	r2, r3
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80191cc:	e003      	b.n	80191d6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80191ce:	6878      	ldr	r0, [r7, #4]
 80191d0:	f002 fbce 	bl	801b970 <tcp_send_empty_ack>
 80191d4:	e000      	b.n	80191d8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80191d6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d05b      	beq.n	8019298 <tcp_receive+0x50c>
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80191e4:	4b60      	ldr	r3, [pc, #384]	; (8019368 <tcp_receive+0x5dc>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	1ad3      	subs	r3, r2, r3
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	da54      	bge.n	8019298 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80191ee:	4b5f      	ldr	r3, [pc, #380]	; (801936c <tcp_receive+0x5e0>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	b29a      	uxth	r2, r3
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80191f8:	b29b      	uxth	r3, r3
 80191fa:	1ad3      	subs	r3, r2, r3
 80191fc:	b29b      	uxth	r3, r3
 80191fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019202:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801920c:	10db      	asrs	r3, r3, #3
 801920e:	b21b      	sxth	r3, r3
 8019210:	b29b      	uxth	r3, r3
 8019212:	1ad3      	subs	r3, r2, r3
 8019214:	b29b      	uxth	r3, r3
 8019216:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019220:	b29a      	uxth	r2, r3
 8019222:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019226:	4413      	add	r3, r2
 8019228:	b29b      	uxth	r3, r3
 801922a:	b21a      	sxth	r2, r3
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8019230:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019234:	2b00      	cmp	r3, #0
 8019236:	da05      	bge.n	8019244 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8019238:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801923c:	425b      	negs	r3, r3
 801923e:	b29b      	uxth	r3, r3
 8019240:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019244:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801924e:	109b      	asrs	r3, r3, #2
 8019250:	b21b      	sxth	r3, r3
 8019252:	b29b      	uxth	r3, r3
 8019254:	1ad3      	subs	r3, r2, r3
 8019256:	b29b      	uxth	r3, r3
 8019258:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019262:	b29a      	uxth	r2, r3
 8019264:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019268:	4413      	add	r3, r2
 801926a:	b29b      	uxth	r3, r3
 801926c:	b21a      	sxth	r2, r3
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019278:	10db      	asrs	r3, r3, #3
 801927a:	b21b      	sxth	r3, r3
 801927c:	b29a      	uxth	r2, r3
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019284:	b29b      	uxth	r3, r3
 8019286:	4413      	add	r3, r2
 8019288:	b29b      	uxth	r3, r3
 801928a:	b21a      	sxth	r2, r3
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	2200      	movs	r2, #0
 8019296:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019298:	4b35      	ldr	r3, [pc, #212]	; (8019370 <tcp_receive+0x5e4>)
 801929a:	881b      	ldrh	r3, [r3, #0]
 801929c:	2b00      	cmp	r3, #0
 801929e:	f000 84e2 	beq.w	8019c66 <tcp_receive+0xeda>
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	7d1b      	ldrb	r3, [r3, #20]
 80192a6:	2b06      	cmp	r3, #6
 80192a8:	f200 84dd 	bhi.w	8019c66 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80192b0:	4b30      	ldr	r3, [pc, #192]	; (8019374 <tcp_receive+0x5e8>)
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	1ad3      	subs	r3, r2, r3
 80192b6:	3b01      	subs	r3, #1
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	f2c0 808f 	blt.w	80193dc <tcp_receive+0x650>
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80192c2:	4b2b      	ldr	r3, [pc, #172]	; (8019370 <tcp_receive+0x5e4>)
 80192c4:	881b      	ldrh	r3, [r3, #0]
 80192c6:	4619      	mov	r1, r3
 80192c8:	4b2a      	ldr	r3, [pc, #168]	; (8019374 <tcp_receive+0x5e8>)
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	440b      	add	r3, r1
 80192ce:	1ad3      	subs	r3, r2, r3
 80192d0:	3301      	adds	r3, #1
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	f300 8082 	bgt.w	80193dc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80192d8:	4b27      	ldr	r3, [pc, #156]	; (8019378 <tcp_receive+0x5ec>)
 80192da:	685b      	ldr	r3, [r3, #4]
 80192dc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80192e2:	4b24      	ldr	r3, [pc, #144]	; (8019374 <tcp_receive+0x5e8>)
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	1ad3      	subs	r3, r2, r3
 80192e8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80192ea:	4b23      	ldr	r3, [pc, #140]	; (8019378 <tcp_receive+0x5ec>)
 80192ec:	685b      	ldr	r3, [r3, #4]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d106      	bne.n	8019300 <tcp_receive+0x574>
 80192f2:	4b22      	ldr	r3, [pc, #136]	; (801937c <tcp_receive+0x5f0>)
 80192f4:	f240 5294 	movw	r2, #1428	; 0x594
 80192f8:	4921      	ldr	r1, [pc, #132]	; (8019380 <tcp_receive+0x5f4>)
 80192fa:	4822      	ldr	r0, [pc, #136]	; (8019384 <tcp_receive+0x5f8>)
 80192fc:	f00b fa88 	bl	8024810 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019302:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019306:	4293      	cmp	r3, r2
 8019308:	d906      	bls.n	8019318 <tcp_receive+0x58c>
 801930a:	4b1c      	ldr	r3, [pc, #112]	; (801937c <tcp_receive+0x5f0>)
 801930c:	f240 5295 	movw	r2, #1429	; 0x595
 8019310:	491d      	ldr	r1, [pc, #116]	; (8019388 <tcp_receive+0x5fc>)
 8019312:	481c      	ldr	r0, [pc, #112]	; (8019384 <tcp_receive+0x5f8>)
 8019314:	f00b fa7c 	bl	8024810 <iprintf>
      off = (u16_t)off32;
 8019318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801931a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801931e:	4b16      	ldr	r3, [pc, #88]	; (8019378 <tcp_receive+0x5ec>)
 8019320:	685b      	ldr	r3, [r3, #4]
 8019322:	891b      	ldrh	r3, [r3, #8]
 8019324:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019328:	429a      	cmp	r2, r3
 801932a:	d906      	bls.n	801933a <tcp_receive+0x5ae>
 801932c:	4b13      	ldr	r3, [pc, #76]	; (801937c <tcp_receive+0x5f0>)
 801932e:	f240 5297 	movw	r2, #1431	; 0x597
 8019332:	4916      	ldr	r1, [pc, #88]	; (801938c <tcp_receive+0x600>)
 8019334:	4813      	ldr	r0, [pc, #76]	; (8019384 <tcp_receive+0x5f8>)
 8019336:	f00b fa6b 	bl	8024810 <iprintf>
      inseg.len -= off;
 801933a:	4b0f      	ldr	r3, [pc, #60]	; (8019378 <tcp_receive+0x5ec>)
 801933c:	891a      	ldrh	r2, [r3, #8]
 801933e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019342:	1ad3      	subs	r3, r2, r3
 8019344:	b29a      	uxth	r2, r3
 8019346:	4b0c      	ldr	r3, [pc, #48]	; (8019378 <tcp_receive+0x5ec>)
 8019348:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801934a:	4b0b      	ldr	r3, [pc, #44]	; (8019378 <tcp_receive+0x5ec>)
 801934c:	685b      	ldr	r3, [r3, #4]
 801934e:	891a      	ldrh	r2, [r3, #8]
 8019350:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019354:	1ad3      	subs	r3, r2, r3
 8019356:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019358:	e02a      	b.n	80193b0 <tcp_receive+0x624>
 801935a:	bf00      	nop
 801935c:	0802b77c 	.word	0x0802b77c
 8019360:	0802b784 	.word	0x0802b784
 8019364:	2001ad18 	.word	0x2001ad18
 8019368:	2001ad14 	.word	0x2001ad14
 801936c:	2001acd8 	.word	0x2001acd8
 8019370:	2001ad1a 	.word	0x2001ad1a
 8019374:	2001ad10 	.word	0x2001ad10
 8019378:	2001acf0 	.word	0x2001acf0
 801937c:	0802b414 	.word	0x0802b414
 8019380:	0802b78c 	.word	0x0802b78c
 8019384:	0802b460 	.word	0x0802b460
 8019388:	0802b79c 	.word	0x0802b79c
 801938c:	0802b7ac 	.word	0x0802b7ac
        off -= p->len;
 8019390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019392:	895b      	ldrh	r3, [r3, #10]
 8019394:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019398:	1ad3      	subs	r3, r2, r3
 801939a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801939e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80193a2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80193a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193a6:	2200      	movs	r2, #0
 80193a8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80193aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80193b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193b2:	895b      	ldrh	r3, [r3, #10]
 80193b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80193b8:	429a      	cmp	r2, r3
 80193ba:	d8e9      	bhi.n	8019390 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80193bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193c0:	4619      	mov	r1, r3
 80193c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80193c4:	f7fc f89e 	bl	8015504 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193cc:	4a91      	ldr	r2, [pc, #580]	; (8019614 <tcp_receive+0x888>)
 80193ce:	6013      	str	r3, [r2, #0]
 80193d0:	4b91      	ldr	r3, [pc, #580]	; (8019618 <tcp_receive+0x88c>)
 80193d2:	68db      	ldr	r3, [r3, #12]
 80193d4:	4a8f      	ldr	r2, [pc, #572]	; (8019614 <tcp_receive+0x888>)
 80193d6:	6812      	ldr	r2, [r2, #0]
 80193d8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80193da:	e00d      	b.n	80193f8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80193dc:	4b8d      	ldr	r3, [pc, #564]	; (8019614 <tcp_receive+0x888>)
 80193de:	681a      	ldr	r2, [r3, #0]
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193e4:	1ad3      	subs	r3, r2, r3
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	da06      	bge.n	80193f8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	8b5b      	ldrh	r3, [r3, #26]
 80193ee:	f043 0302 	orr.w	r3, r3, #2
 80193f2:	b29a      	uxth	r2, r3
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80193f8:	4b86      	ldr	r3, [pc, #536]	; (8019614 <tcp_receive+0x888>)
 80193fa:	681a      	ldr	r2, [r3, #0]
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019400:	1ad3      	subs	r3, r2, r3
 8019402:	2b00      	cmp	r3, #0
 8019404:	f2c0 842a 	blt.w	8019c5c <tcp_receive+0xed0>
 8019408:	4b82      	ldr	r3, [pc, #520]	; (8019614 <tcp_receive+0x888>)
 801940a:	681a      	ldr	r2, [r3, #0]
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019410:	6879      	ldr	r1, [r7, #4]
 8019412:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019414:	440b      	add	r3, r1
 8019416:	1ad3      	subs	r3, r2, r3
 8019418:	3301      	adds	r3, #1
 801941a:	2b00      	cmp	r3, #0
 801941c:	f300 841e 	bgt.w	8019c5c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019424:	4b7b      	ldr	r3, [pc, #492]	; (8019614 <tcp_receive+0x888>)
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	429a      	cmp	r2, r3
 801942a:	f040 829a 	bne.w	8019962 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801942e:	4b7a      	ldr	r3, [pc, #488]	; (8019618 <tcp_receive+0x88c>)
 8019430:	891c      	ldrh	r4, [r3, #8]
 8019432:	4b79      	ldr	r3, [pc, #484]	; (8019618 <tcp_receive+0x88c>)
 8019434:	68db      	ldr	r3, [r3, #12]
 8019436:	899b      	ldrh	r3, [r3, #12]
 8019438:	b29b      	uxth	r3, r3
 801943a:	4618      	mov	r0, r3
 801943c:	f7fa fcf6 	bl	8013e2c <lwip_htons>
 8019440:	4603      	mov	r3, r0
 8019442:	b2db      	uxtb	r3, r3
 8019444:	f003 0303 	and.w	r3, r3, #3
 8019448:	2b00      	cmp	r3, #0
 801944a:	d001      	beq.n	8019450 <tcp_receive+0x6c4>
 801944c:	2301      	movs	r3, #1
 801944e:	e000      	b.n	8019452 <tcp_receive+0x6c6>
 8019450:	2300      	movs	r3, #0
 8019452:	4423      	add	r3, r4
 8019454:	b29a      	uxth	r2, r3
 8019456:	4b71      	ldr	r3, [pc, #452]	; (801961c <tcp_receive+0x890>)
 8019458:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801945e:	4b6f      	ldr	r3, [pc, #444]	; (801961c <tcp_receive+0x890>)
 8019460:	881b      	ldrh	r3, [r3, #0]
 8019462:	429a      	cmp	r2, r3
 8019464:	d275      	bcs.n	8019552 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019466:	4b6c      	ldr	r3, [pc, #432]	; (8019618 <tcp_receive+0x88c>)
 8019468:	68db      	ldr	r3, [r3, #12]
 801946a:	899b      	ldrh	r3, [r3, #12]
 801946c:	b29b      	uxth	r3, r3
 801946e:	4618      	mov	r0, r3
 8019470:	f7fa fcdc 	bl	8013e2c <lwip_htons>
 8019474:	4603      	mov	r3, r0
 8019476:	b2db      	uxtb	r3, r3
 8019478:	f003 0301 	and.w	r3, r3, #1
 801947c:	2b00      	cmp	r3, #0
 801947e:	d01f      	beq.n	80194c0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019480:	4b65      	ldr	r3, [pc, #404]	; (8019618 <tcp_receive+0x88c>)
 8019482:	68db      	ldr	r3, [r3, #12]
 8019484:	899b      	ldrh	r3, [r3, #12]
 8019486:	b29b      	uxth	r3, r3
 8019488:	b21b      	sxth	r3, r3
 801948a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801948e:	b21c      	sxth	r4, r3
 8019490:	4b61      	ldr	r3, [pc, #388]	; (8019618 <tcp_receive+0x88c>)
 8019492:	68db      	ldr	r3, [r3, #12]
 8019494:	899b      	ldrh	r3, [r3, #12]
 8019496:	b29b      	uxth	r3, r3
 8019498:	4618      	mov	r0, r3
 801949a:	f7fa fcc7 	bl	8013e2c <lwip_htons>
 801949e:	4603      	mov	r3, r0
 80194a0:	b2db      	uxtb	r3, r3
 80194a2:	b29b      	uxth	r3, r3
 80194a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	4618      	mov	r0, r3
 80194ac:	f7fa fcbe 	bl	8013e2c <lwip_htons>
 80194b0:	4603      	mov	r3, r0
 80194b2:	b21b      	sxth	r3, r3
 80194b4:	4323      	orrs	r3, r4
 80194b6:	b21a      	sxth	r2, r3
 80194b8:	4b57      	ldr	r3, [pc, #348]	; (8019618 <tcp_receive+0x88c>)
 80194ba:	68db      	ldr	r3, [r3, #12]
 80194bc:	b292      	uxth	r2, r2
 80194be:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80194c4:	4b54      	ldr	r3, [pc, #336]	; (8019618 <tcp_receive+0x88c>)
 80194c6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80194c8:	4b53      	ldr	r3, [pc, #332]	; (8019618 <tcp_receive+0x88c>)
 80194ca:	68db      	ldr	r3, [r3, #12]
 80194cc:	899b      	ldrh	r3, [r3, #12]
 80194ce:	b29b      	uxth	r3, r3
 80194d0:	4618      	mov	r0, r3
 80194d2:	f7fa fcab 	bl	8013e2c <lwip_htons>
 80194d6:	4603      	mov	r3, r0
 80194d8:	b2db      	uxtb	r3, r3
 80194da:	f003 0302 	and.w	r3, r3, #2
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d005      	beq.n	80194ee <tcp_receive+0x762>
            inseg.len -= 1;
 80194e2:	4b4d      	ldr	r3, [pc, #308]	; (8019618 <tcp_receive+0x88c>)
 80194e4:	891b      	ldrh	r3, [r3, #8]
 80194e6:	3b01      	subs	r3, #1
 80194e8:	b29a      	uxth	r2, r3
 80194ea:	4b4b      	ldr	r3, [pc, #300]	; (8019618 <tcp_receive+0x88c>)
 80194ec:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80194ee:	4b4a      	ldr	r3, [pc, #296]	; (8019618 <tcp_receive+0x88c>)
 80194f0:	685b      	ldr	r3, [r3, #4]
 80194f2:	4a49      	ldr	r2, [pc, #292]	; (8019618 <tcp_receive+0x88c>)
 80194f4:	8912      	ldrh	r2, [r2, #8]
 80194f6:	4611      	mov	r1, r2
 80194f8:	4618      	mov	r0, r3
 80194fa:	f7fb ff03 	bl	8015304 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80194fe:	4b46      	ldr	r3, [pc, #280]	; (8019618 <tcp_receive+0x88c>)
 8019500:	891c      	ldrh	r4, [r3, #8]
 8019502:	4b45      	ldr	r3, [pc, #276]	; (8019618 <tcp_receive+0x88c>)
 8019504:	68db      	ldr	r3, [r3, #12]
 8019506:	899b      	ldrh	r3, [r3, #12]
 8019508:	b29b      	uxth	r3, r3
 801950a:	4618      	mov	r0, r3
 801950c:	f7fa fc8e 	bl	8013e2c <lwip_htons>
 8019510:	4603      	mov	r3, r0
 8019512:	b2db      	uxtb	r3, r3
 8019514:	f003 0303 	and.w	r3, r3, #3
 8019518:	2b00      	cmp	r3, #0
 801951a:	d001      	beq.n	8019520 <tcp_receive+0x794>
 801951c:	2301      	movs	r3, #1
 801951e:	e000      	b.n	8019522 <tcp_receive+0x796>
 8019520:	2300      	movs	r3, #0
 8019522:	4423      	add	r3, r4
 8019524:	b29a      	uxth	r2, r3
 8019526:	4b3d      	ldr	r3, [pc, #244]	; (801961c <tcp_receive+0x890>)
 8019528:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801952a:	4b3c      	ldr	r3, [pc, #240]	; (801961c <tcp_receive+0x890>)
 801952c:	881b      	ldrh	r3, [r3, #0]
 801952e:	461a      	mov	r2, r3
 8019530:	4b38      	ldr	r3, [pc, #224]	; (8019614 <tcp_receive+0x888>)
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	441a      	add	r2, r3
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801953a:	6879      	ldr	r1, [r7, #4]
 801953c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801953e:	440b      	add	r3, r1
 8019540:	429a      	cmp	r2, r3
 8019542:	d006      	beq.n	8019552 <tcp_receive+0x7c6>
 8019544:	4b36      	ldr	r3, [pc, #216]	; (8019620 <tcp_receive+0x894>)
 8019546:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801954a:	4936      	ldr	r1, [pc, #216]	; (8019624 <tcp_receive+0x898>)
 801954c:	4836      	ldr	r0, [pc, #216]	; (8019628 <tcp_receive+0x89c>)
 801954e:	f00b f95f 	bl	8024810 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019556:	2b00      	cmp	r3, #0
 8019558:	f000 80e7 	beq.w	801972a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801955c:	4b2e      	ldr	r3, [pc, #184]	; (8019618 <tcp_receive+0x88c>)
 801955e:	68db      	ldr	r3, [r3, #12]
 8019560:	899b      	ldrh	r3, [r3, #12]
 8019562:	b29b      	uxth	r3, r3
 8019564:	4618      	mov	r0, r3
 8019566:	f7fa fc61 	bl	8013e2c <lwip_htons>
 801956a:	4603      	mov	r3, r0
 801956c:	b2db      	uxtb	r3, r3
 801956e:	f003 0301 	and.w	r3, r3, #1
 8019572:	2b00      	cmp	r3, #0
 8019574:	d010      	beq.n	8019598 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019576:	e00a      	b.n	801958e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801957c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019582:	681a      	ldr	r2, [r3, #0]
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019588:	68f8      	ldr	r0, [r7, #12]
 801958a:	f7fd fcc4 	bl	8016f16 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019592:	2b00      	cmp	r3, #0
 8019594:	d1f0      	bne.n	8019578 <tcp_receive+0x7ec>
 8019596:	e0c8      	b.n	801972a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801959c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801959e:	e052      	b.n	8019646 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80195a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195a2:	68db      	ldr	r3, [r3, #12]
 80195a4:	899b      	ldrh	r3, [r3, #12]
 80195a6:	b29b      	uxth	r3, r3
 80195a8:	4618      	mov	r0, r3
 80195aa:	f7fa fc3f 	bl	8013e2c <lwip_htons>
 80195ae:	4603      	mov	r3, r0
 80195b0:	b2db      	uxtb	r3, r3
 80195b2:	f003 0301 	and.w	r3, r3, #1
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d03d      	beq.n	8019636 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80195ba:	4b17      	ldr	r3, [pc, #92]	; (8019618 <tcp_receive+0x88c>)
 80195bc:	68db      	ldr	r3, [r3, #12]
 80195be:	899b      	ldrh	r3, [r3, #12]
 80195c0:	b29b      	uxth	r3, r3
 80195c2:	4618      	mov	r0, r3
 80195c4:	f7fa fc32 	bl	8013e2c <lwip_htons>
 80195c8:	4603      	mov	r3, r0
 80195ca:	b2db      	uxtb	r3, r3
 80195cc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d130      	bne.n	8019636 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80195d4:	4b10      	ldr	r3, [pc, #64]	; (8019618 <tcp_receive+0x88c>)
 80195d6:	68db      	ldr	r3, [r3, #12]
 80195d8:	899b      	ldrh	r3, [r3, #12]
 80195da:	b29c      	uxth	r4, r3
 80195dc:	2001      	movs	r0, #1
 80195de:	f7fa fc25 	bl	8013e2c <lwip_htons>
 80195e2:	4603      	mov	r3, r0
 80195e4:	461a      	mov	r2, r3
 80195e6:	4b0c      	ldr	r3, [pc, #48]	; (8019618 <tcp_receive+0x88c>)
 80195e8:	68db      	ldr	r3, [r3, #12]
 80195ea:	4322      	orrs	r2, r4
 80195ec:	b292      	uxth	r2, r2
 80195ee:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80195f0:	4b09      	ldr	r3, [pc, #36]	; (8019618 <tcp_receive+0x88c>)
 80195f2:	891c      	ldrh	r4, [r3, #8]
 80195f4:	4b08      	ldr	r3, [pc, #32]	; (8019618 <tcp_receive+0x88c>)
 80195f6:	68db      	ldr	r3, [r3, #12]
 80195f8:	899b      	ldrh	r3, [r3, #12]
 80195fa:	b29b      	uxth	r3, r3
 80195fc:	4618      	mov	r0, r3
 80195fe:	f7fa fc15 	bl	8013e2c <lwip_htons>
 8019602:	4603      	mov	r3, r0
 8019604:	b2db      	uxtb	r3, r3
 8019606:	f003 0303 	and.w	r3, r3, #3
 801960a:	2b00      	cmp	r3, #0
 801960c:	d00e      	beq.n	801962c <tcp_receive+0x8a0>
 801960e:	2301      	movs	r3, #1
 8019610:	e00d      	b.n	801962e <tcp_receive+0x8a2>
 8019612:	bf00      	nop
 8019614:	2001ad10 	.word	0x2001ad10
 8019618:	2001acf0 	.word	0x2001acf0
 801961c:	2001ad1a 	.word	0x2001ad1a
 8019620:	0802b414 	.word	0x0802b414
 8019624:	0802b7bc 	.word	0x0802b7bc
 8019628:	0802b460 	.word	0x0802b460
 801962c:	2300      	movs	r3, #0
 801962e:	4423      	add	r3, r4
 8019630:	b29a      	uxth	r2, r3
 8019632:	4b98      	ldr	r3, [pc, #608]	; (8019894 <tcp_receive+0xb08>)
 8019634:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019638:	613b      	str	r3, [r7, #16]
              next = next->next;
 801963a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019640:	6938      	ldr	r0, [r7, #16]
 8019642:	f7fd fc68 	bl	8016f16 <tcp_seg_free>
            while (next &&
 8019646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019648:	2b00      	cmp	r3, #0
 801964a:	d00e      	beq.n	801966a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801964c:	4b91      	ldr	r3, [pc, #580]	; (8019894 <tcp_receive+0xb08>)
 801964e:	881b      	ldrh	r3, [r3, #0]
 8019650:	461a      	mov	r2, r3
 8019652:	4b91      	ldr	r3, [pc, #580]	; (8019898 <tcp_receive+0xb0c>)
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	441a      	add	r2, r3
 8019658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801965a:	68db      	ldr	r3, [r3, #12]
 801965c:	685b      	ldr	r3, [r3, #4]
 801965e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019660:	8909      	ldrh	r1, [r1, #8]
 8019662:	440b      	add	r3, r1
 8019664:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019666:	2b00      	cmp	r3, #0
 8019668:	da9a      	bge.n	80195a0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801966a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801966c:	2b00      	cmp	r3, #0
 801966e:	d059      	beq.n	8019724 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8019670:	4b88      	ldr	r3, [pc, #544]	; (8019894 <tcp_receive+0xb08>)
 8019672:	881b      	ldrh	r3, [r3, #0]
 8019674:	461a      	mov	r2, r3
 8019676:	4b88      	ldr	r3, [pc, #544]	; (8019898 <tcp_receive+0xb0c>)
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	441a      	add	r2, r3
 801967c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801967e:	68db      	ldr	r3, [r3, #12]
 8019680:	685b      	ldr	r3, [r3, #4]
 8019682:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019684:	2b00      	cmp	r3, #0
 8019686:	dd4d      	ble.n	8019724 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801968a:	68db      	ldr	r3, [r3, #12]
 801968c:	685b      	ldr	r3, [r3, #4]
 801968e:	b29a      	uxth	r2, r3
 8019690:	4b81      	ldr	r3, [pc, #516]	; (8019898 <tcp_receive+0xb0c>)
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	b29b      	uxth	r3, r3
 8019696:	1ad3      	subs	r3, r2, r3
 8019698:	b29a      	uxth	r2, r3
 801969a:	4b80      	ldr	r3, [pc, #512]	; (801989c <tcp_receive+0xb10>)
 801969c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801969e:	4b7f      	ldr	r3, [pc, #508]	; (801989c <tcp_receive+0xb10>)
 80196a0:	68db      	ldr	r3, [r3, #12]
 80196a2:	899b      	ldrh	r3, [r3, #12]
 80196a4:	b29b      	uxth	r3, r3
 80196a6:	4618      	mov	r0, r3
 80196a8:	f7fa fbc0 	bl	8013e2c <lwip_htons>
 80196ac:	4603      	mov	r3, r0
 80196ae:	b2db      	uxtb	r3, r3
 80196b0:	f003 0302 	and.w	r3, r3, #2
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d005      	beq.n	80196c4 <tcp_receive+0x938>
                inseg.len -= 1;
 80196b8:	4b78      	ldr	r3, [pc, #480]	; (801989c <tcp_receive+0xb10>)
 80196ba:	891b      	ldrh	r3, [r3, #8]
 80196bc:	3b01      	subs	r3, #1
 80196be:	b29a      	uxth	r2, r3
 80196c0:	4b76      	ldr	r3, [pc, #472]	; (801989c <tcp_receive+0xb10>)
 80196c2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80196c4:	4b75      	ldr	r3, [pc, #468]	; (801989c <tcp_receive+0xb10>)
 80196c6:	685b      	ldr	r3, [r3, #4]
 80196c8:	4a74      	ldr	r2, [pc, #464]	; (801989c <tcp_receive+0xb10>)
 80196ca:	8912      	ldrh	r2, [r2, #8]
 80196cc:	4611      	mov	r1, r2
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7fb fe18 	bl	8015304 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80196d4:	4b71      	ldr	r3, [pc, #452]	; (801989c <tcp_receive+0xb10>)
 80196d6:	891c      	ldrh	r4, [r3, #8]
 80196d8:	4b70      	ldr	r3, [pc, #448]	; (801989c <tcp_receive+0xb10>)
 80196da:	68db      	ldr	r3, [r3, #12]
 80196dc:	899b      	ldrh	r3, [r3, #12]
 80196de:	b29b      	uxth	r3, r3
 80196e0:	4618      	mov	r0, r3
 80196e2:	f7fa fba3 	bl	8013e2c <lwip_htons>
 80196e6:	4603      	mov	r3, r0
 80196e8:	b2db      	uxtb	r3, r3
 80196ea:	f003 0303 	and.w	r3, r3, #3
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d001      	beq.n	80196f6 <tcp_receive+0x96a>
 80196f2:	2301      	movs	r3, #1
 80196f4:	e000      	b.n	80196f8 <tcp_receive+0x96c>
 80196f6:	2300      	movs	r3, #0
 80196f8:	4423      	add	r3, r4
 80196fa:	b29a      	uxth	r2, r3
 80196fc:	4b65      	ldr	r3, [pc, #404]	; (8019894 <tcp_receive+0xb08>)
 80196fe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019700:	4b64      	ldr	r3, [pc, #400]	; (8019894 <tcp_receive+0xb08>)
 8019702:	881b      	ldrh	r3, [r3, #0]
 8019704:	461a      	mov	r2, r3
 8019706:	4b64      	ldr	r3, [pc, #400]	; (8019898 <tcp_receive+0xb0c>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	441a      	add	r2, r3
 801970c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801970e:	68db      	ldr	r3, [r3, #12]
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	429a      	cmp	r2, r3
 8019714:	d006      	beq.n	8019724 <tcp_receive+0x998>
 8019716:	4b62      	ldr	r3, [pc, #392]	; (80198a0 <tcp_receive+0xb14>)
 8019718:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801971c:	4961      	ldr	r1, [pc, #388]	; (80198a4 <tcp_receive+0xb18>)
 801971e:	4862      	ldr	r0, [pc, #392]	; (80198a8 <tcp_receive+0xb1c>)
 8019720:	f00b f876 	bl	8024810 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019728:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801972a:	4b5a      	ldr	r3, [pc, #360]	; (8019894 <tcp_receive+0xb08>)
 801972c:	881b      	ldrh	r3, [r3, #0]
 801972e:	461a      	mov	r2, r3
 8019730:	4b59      	ldr	r3, [pc, #356]	; (8019898 <tcp_receive+0xb0c>)
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	441a      	add	r2, r3
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801973e:	4b55      	ldr	r3, [pc, #340]	; (8019894 <tcp_receive+0xb08>)
 8019740:	881b      	ldrh	r3, [r3, #0]
 8019742:	429a      	cmp	r2, r3
 8019744:	d206      	bcs.n	8019754 <tcp_receive+0x9c8>
 8019746:	4b56      	ldr	r3, [pc, #344]	; (80198a0 <tcp_receive+0xb14>)
 8019748:	f240 6207 	movw	r2, #1543	; 0x607
 801974c:	4957      	ldr	r1, [pc, #348]	; (80198ac <tcp_receive+0xb20>)
 801974e:	4856      	ldr	r0, [pc, #344]	; (80198a8 <tcp_receive+0xb1c>)
 8019750:	f00b f85e 	bl	8024810 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019758:	4b4e      	ldr	r3, [pc, #312]	; (8019894 <tcp_receive+0xb08>)
 801975a:	881b      	ldrh	r3, [r3, #0]
 801975c:	1ad3      	subs	r3, r2, r3
 801975e:	b29a      	uxth	r2, r3
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019764:	6878      	ldr	r0, [r7, #4]
 8019766:	f7fc feb1 	bl	80164cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801976a:	4b4c      	ldr	r3, [pc, #304]	; (801989c <tcp_receive+0xb10>)
 801976c:	685b      	ldr	r3, [r3, #4]
 801976e:	891b      	ldrh	r3, [r3, #8]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d006      	beq.n	8019782 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8019774:	4b49      	ldr	r3, [pc, #292]	; (801989c <tcp_receive+0xb10>)
 8019776:	685b      	ldr	r3, [r3, #4]
 8019778:	4a4d      	ldr	r2, [pc, #308]	; (80198b0 <tcp_receive+0xb24>)
 801977a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801977c:	4b47      	ldr	r3, [pc, #284]	; (801989c <tcp_receive+0xb10>)
 801977e:	2200      	movs	r2, #0
 8019780:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019782:	4b46      	ldr	r3, [pc, #280]	; (801989c <tcp_receive+0xb10>)
 8019784:	68db      	ldr	r3, [r3, #12]
 8019786:	899b      	ldrh	r3, [r3, #12]
 8019788:	b29b      	uxth	r3, r3
 801978a:	4618      	mov	r0, r3
 801978c:	f7fa fb4e 	bl	8013e2c <lwip_htons>
 8019790:	4603      	mov	r3, r0
 8019792:	b2db      	uxtb	r3, r3
 8019794:	f003 0301 	and.w	r3, r3, #1
 8019798:	2b00      	cmp	r3, #0
 801979a:	f000 80b8 	beq.w	801990e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801979e:	4b45      	ldr	r3, [pc, #276]	; (80198b4 <tcp_receive+0xb28>)
 80197a0:	781b      	ldrb	r3, [r3, #0]
 80197a2:	f043 0320 	orr.w	r3, r3, #32
 80197a6:	b2da      	uxtb	r2, r3
 80197a8:	4b42      	ldr	r3, [pc, #264]	; (80198b4 <tcp_receive+0xb28>)
 80197aa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80197ac:	e0af      	b.n	801990e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80197b2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80197b8:	68db      	ldr	r3, [r3, #12]
 80197ba:	685b      	ldr	r3, [r3, #4]
 80197bc:	4a36      	ldr	r2, [pc, #216]	; (8019898 <tcp_receive+0xb0c>)
 80197be:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80197c0:	68bb      	ldr	r3, [r7, #8]
 80197c2:	891b      	ldrh	r3, [r3, #8]
 80197c4:	461c      	mov	r4, r3
 80197c6:	68bb      	ldr	r3, [r7, #8]
 80197c8:	68db      	ldr	r3, [r3, #12]
 80197ca:	899b      	ldrh	r3, [r3, #12]
 80197cc:	b29b      	uxth	r3, r3
 80197ce:	4618      	mov	r0, r3
 80197d0:	f7fa fb2c 	bl	8013e2c <lwip_htons>
 80197d4:	4603      	mov	r3, r0
 80197d6:	b2db      	uxtb	r3, r3
 80197d8:	f003 0303 	and.w	r3, r3, #3
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d001      	beq.n	80197e4 <tcp_receive+0xa58>
 80197e0:	2301      	movs	r3, #1
 80197e2:	e000      	b.n	80197e6 <tcp_receive+0xa5a>
 80197e4:	2300      	movs	r3, #0
 80197e6:	191a      	adds	r2, r3, r4
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197ec:	441a      	add	r2, r3
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80197f6:	461c      	mov	r4, r3
 80197f8:	68bb      	ldr	r3, [r7, #8]
 80197fa:	891b      	ldrh	r3, [r3, #8]
 80197fc:	461d      	mov	r5, r3
 80197fe:	68bb      	ldr	r3, [r7, #8]
 8019800:	68db      	ldr	r3, [r3, #12]
 8019802:	899b      	ldrh	r3, [r3, #12]
 8019804:	b29b      	uxth	r3, r3
 8019806:	4618      	mov	r0, r3
 8019808:	f7fa fb10 	bl	8013e2c <lwip_htons>
 801980c:	4603      	mov	r3, r0
 801980e:	b2db      	uxtb	r3, r3
 8019810:	f003 0303 	and.w	r3, r3, #3
 8019814:	2b00      	cmp	r3, #0
 8019816:	d001      	beq.n	801981c <tcp_receive+0xa90>
 8019818:	2301      	movs	r3, #1
 801981a:	e000      	b.n	801981e <tcp_receive+0xa92>
 801981c:	2300      	movs	r3, #0
 801981e:	442b      	add	r3, r5
 8019820:	429c      	cmp	r4, r3
 8019822:	d206      	bcs.n	8019832 <tcp_receive+0xaa6>
 8019824:	4b1e      	ldr	r3, [pc, #120]	; (80198a0 <tcp_receive+0xb14>)
 8019826:	f240 622b 	movw	r2, #1579	; 0x62b
 801982a:	4923      	ldr	r1, [pc, #140]	; (80198b8 <tcp_receive+0xb2c>)
 801982c:	481e      	ldr	r0, [pc, #120]	; (80198a8 <tcp_receive+0xb1c>)
 801982e:	f00a ffef 	bl	8024810 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019832:	68bb      	ldr	r3, [r7, #8]
 8019834:	891b      	ldrh	r3, [r3, #8]
 8019836:	461c      	mov	r4, r3
 8019838:	68bb      	ldr	r3, [r7, #8]
 801983a:	68db      	ldr	r3, [r3, #12]
 801983c:	899b      	ldrh	r3, [r3, #12]
 801983e:	b29b      	uxth	r3, r3
 8019840:	4618      	mov	r0, r3
 8019842:	f7fa faf3 	bl	8013e2c <lwip_htons>
 8019846:	4603      	mov	r3, r0
 8019848:	b2db      	uxtb	r3, r3
 801984a:	f003 0303 	and.w	r3, r3, #3
 801984e:	2b00      	cmp	r3, #0
 8019850:	d001      	beq.n	8019856 <tcp_receive+0xaca>
 8019852:	2301      	movs	r3, #1
 8019854:	e000      	b.n	8019858 <tcp_receive+0xacc>
 8019856:	2300      	movs	r3, #0
 8019858:	1919      	adds	r1, r3, r4
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801985e:	b28b      	uxth	r3, r1
 8019860:	1ad3      	subs	r3, r2, r3
 8019862:	b29a      	uxth	r2, r3
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019868:	6878      	ldr	r0, [r7, #4]
 801986a:	f7fc fe2f 	bl	80164cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801986e:	68bb      	ldr	r3, [r7, #8]
 8019870:	685b      	ldr	r3, [r3, #4]
 8019872:	891b      	ldrh	r3, [r3, #8]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d028      	beq.n	80198ca <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019878:	4b0d      	ldr	r3, [pc, #52]	; (80198b0 <tcp_receive+0xb24>)
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	2b00      	cmp	r3, #0
 801987e:	d01d      	beq.n	80198bc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8019880:	4b0b      	ldr	r3, [pc, #44]	; (80198b0 <tcp_receive+0xb24>)
 8019882:	681a      	ldr	r2, [r3, #0]
 8019884:	68bb      	ldr	r3, [r7, #8]
 8019886:	685b      	ldr	r3, [r3, #4]
 8019888:	4619      	mov	r1, r3
 801988a:	4610      	mov	r0, r2
 801988c:	f7fb ff8e 	bl	80157ac <pbuf_cat>
 8019890:	e018      	b.n	80198c4 <tcp_receive+0xb38>
 8019892:	bf00      	nop
 8019894:	2001ad1a 	.word	0x2001ad1a
 8019898:	2001ad10 	.word	0x2001ad10
 801989c:	2001acf0 	.word	0x2001acf0
 80198a0:	0802b414 	.word	0x0802b414
 80198a4:	0802b7f4 	.word	0x0802b7f4
 80198a8:	0802b460 	.word	0x0802b460
 80198ac:	0802b830 	.word	0x0802b830
 80198b0:	2001ad20 	.word	0x2001ad20
 80198b4:	2001ad1d 	.word	0x2001ad1d
 80198b8:	0802b850 	.word	0x0802b850
            } else {
              recv_data = cseg->p;
 80198bc:	68bb      	ldr	r3, [r7, #8]
 80198be:	685b      	ldr	r3, [r3, #4]
 80198c0:	4a70      	ldr	r2, [pc, #448]	; (8019a84 <tcp_receive+0xcf8>)
 80198c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80198c4:	68bb      	ldr	r3, [r7, #8]
 80198c6:	2200      	movs	r2, #0
 80198c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80198ca:	68bb      	ldr	r3, [r7, #8]
 80198cc:	68db      	ldr	r3, [r3, #12]
 80198ce:	899b      	ldrh	r3, [r3, #12]
 80198d0:	b29b      	uxth	r3, r3
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7fa faaa 	bl	8013e2c <lwip_htons>
 80198d8:	4603      	mov	r3, r0
 80198da:	b2db      	uxtb	r3, r3
 80198dc:	f003 0301 	and.w	r3, r3, #1
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d00d      	beq.n	8019900 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80198e4:	4b68      	ldr	r3, [pc, #416]	; (8019a88 <tcp_receive+0xcfc>)
 80198e6:	781b      	ldrb	r3, [r3, #0]
 80198e8:	f043 0320 	orr.w	r3, r3, #32
 80198ec:	b2da      	uxtb	r2, r3
 80198ee:	4b66      	ldr	r3, [pc, #408]	; (8019a88 <tcp_receive+0xcfc>)
 80198f0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	7d1b      	ldrb	r3, [r3, #20]
 80198f6:	2b04      	cmp	r3, #4
 80198f8:	d102      	bne.n	8019900 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	2207      	movs	r2, #7
 80198fe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019900:	68bb      	ldr	r3, [r7, #8]
 8019902:	681a      	ldr	r2, [r3, #0]
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8019908:	68b8      	ldr	r0, [r7, #8]
 801990a:	f7fd fb04 	bl	8016f16 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019912:	2b00      	cmp	r3, #0
 8019914:	d008      	beq.n	8019928 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801991a:	68db      	ldr	r3, [r3, #12]
 801991c:	685a      	ldr	r2, [r3, #4]
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8019922:	429a      	cmp	r2, r3
 8019924:	f43f af43 	beq.w	80197ae <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	8b5b      	ldrh	r3, [r3, #26]
 801992c:	f003 0301 	and.w	r3, r3, #1
 8019930:	2b00      	cmp	r3, #0
 8019932:	d00e      	beq.n	8019952 <tcp_receive+0xbc6>
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	8b5b      	ldrh	r3, [r3, #26]
 8019938:	f023 0301 	bic.w	r3, r3, #1
 801993c:	b29a      	uxth	r2, r3
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	835a      	strh	r2, [r3, #26]
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	8b5b      	ldrh	r3, [r3, #26]
 8019946:	f043 0302 	orr.w	r3, r3, #2
 801994a:	b29a      	uxth	r2, r3
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019950:	e188      	b.n	8019c64 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	8b5b      	ldrh	r3, [r3, #26]
 8019956:	f043 0301 	orr.w	r3, r3, #1
 801995a:	b29a      	uxth	r2, r3
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019960:	e180      	b.n	8019c64 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019966:	2b00      	cmp	r3, #0
 8019968:	d106      	bne.n	8019978 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801996a:	4848      	ldr	r0, [pc, #288]	; (8019a8c <tcp_receive+0xd00>)
 801996c:	f7fd faec 	bl	8016f48 <tcp_seg_copy>
 8019970:	4602      	mov	r2, r0
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	675a      	str	r2, [r3, #116]	; 0x74
 8019976:	e16d      	b.n	8019c54 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019978:	2300      	movs	r3, #0
 801997a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019980:	63bb      	str	r3, [r7, #56]	; 0x38
 8019982:	e157      	b.n	8019c34 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8019984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019986:	68db      	ldr	r3, [r3, #12]
 8019988:	685a      	ldr	r2, [r3, #4]
 801998a:	4b41      	ldr	r3, [pc, #260]	; (8019a90 <tcp_receive+0xd04>)
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	429a      	cmp	r2, r3
 8019990:	d11d      	bne.n	80199ce <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019992:	4b3e      	ldr	r3, [pc, #248]	; (8019a8c <tcp_receive+0xd00>)
 8019994:	891a      	ldrh	r2, [r3, #8]
 8019996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019998:	891b      	ldrh	r3, [r3, #8]
 801999a:	429a      	cmp	r2, r3
 801999c:	f240 814f 	bls.w	8019c3e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80199a0:	483a      	ldr	r0, [pc, #232]	; (8019a8c <tcp_receive+0xd00>)
 80199a2:	f7fd fad1 	bl	8016f48 <tcp_seg_copy>
 80199a6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80199a8:	697b      	ldr	r3, [r7, #20]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	f000 8149 	beq.w	8019c42 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80199b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d003      	beq.n	80199be <tcp_receive+0xc32>
                    prev->next = cseg;
 80199b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199b8:	697a      	ldr	r2, [r7, #20]
 80199ba:	601a      	str	r2, [r3, #0]
 80199bc:	e002      	b.n	80199c4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	697a      	ldr	r2, [r7, #20]
 80199c2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80199c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80199c6:	6978      	ldr	r0, [r7, #20]
 80199c8:	f7ff f8dc 	bl	8018b84 <tcp_oos_insert_segment>
                }
                break;
 80199cc:	e139      	b.n	8019c42 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80199ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d117      	bne.n	8019a04 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80199d4:	4b2e      	ldr	r3, [pc, #184]	; (8019a90 <tcp_receive+0xd04>)
 80199d6:	681a      	ldr	r2, [r3, #0]
 80199d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199da:	68db      	ldr	r3, [r3, #12]
 80199dc:	685b      	ldr	r3, [r3, #4]
 80199de:	1ad3      	subs	r3, r2, r3
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	da57      	bge.n	8019a94 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80199e4:	4829      	ldr	r0, [pc, #164]	; (8019a8c <tcp_receive+0xd00>)
 80199e6:	f7fd faaf 	bl	8016f48 <tcp_seg_copy>
 80199ea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80199ec:	69bb      	ldr	r3, [r7, #24]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	f000 8129 	beq.w	8019c46 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	69ba      	ldr	r2, [r7, #24]
 80199f8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80199fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80199fc:	69b8      	ldr	r0, [r7, #24]
 80199fe:	f7ff f8c1 	bl	8018b84 <tcp_oos_insert_segment>
                  }
                  break;
 8019a02:	e120      	b.n	8019c46 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019a04:	4b22      	ldr	r3, [pc, #136]	; (8019a90 <tcp_receive+0xd04>)
 8019a06:	681a      	ldr	r2, [r3, #0]
 8019a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a0a:	68db      	ldr	r3, [r3, #12]
 8019a0c:	685b      	ldr	r3, [r3, #4]
 8019a0e:	1ad3      	subs	r3, r2, r3
 8019a10:	3b01      	subs	r3, #1
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	db3e      	blt.n	8019a94 <tcp_receive+0xd08>
 8019a16:	4b1e      	ldr	r3, [pc, #120]	; (8019a90 <tcp_receive+0xd04>)
 8019a18:	681a      	ldr	r2, [r3, #0]
 8019a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a1c:	68db      	ldr	r3, [r3, #12]
 8019a1e:	685b      	ldr	r3, [r3, #4]
 8019a20:	1ad3      	subs	r3, r2, r3
 8019a22:	3301      	adds	r3, #1
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	dc35      	bgt.n	8019a94 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019a28:	4818      	ldr	r0, [pc, #96]	; (8019a8c <tcp_receive+0xd00>)
 8019a2a:	f7fd fa8d 	bl	8016f48 <tcp_seg_copy>
 8019a2e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019a30:	69fb      	ldr	r3, [r7, #28]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	f000 8109 	beq.w	8019c4a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a3a:	68db      	ldr	r3, [r3, #12]
 8019a3c:	685b      	ldr	r3, [r3, #4]
 8019a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019a40:	8912      	ldrh	r2, [r2, #8]
 8019a42:	441a      	add	r2, r3
 8019a44:	4b12      	ldr	r3, [pc, #72]	; (8019a90 <tcp_receive+0xd04>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	1ad3      	subs	r3, r2, r3
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	dd12      	ble.n	8019a74 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019a4e:	4b10      	ldr	r3, [pc, #64]	; (8019a90 <tcp_receive+0xd04>)
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	b29a      	uxth	r2, r3
 8019a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a56:	68db      	ldr	r3, [r3, #12]
 8019a58:	685b      	ldr	r3, [r3, #4]
 8019a5a:	b29b      	uxth	r3, r3
 8019a5c:	1ad3      	subs	r3, r2, r3
 8019a5e:	b29a      	uxth	r2, r3
 8019a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a62:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a66:	685a      	ldr	r2, [r3, #4]
 8019a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a6a:	891b      	ldrh	r3, [r3, #8]
 8019a6c:	4619      	mov	r1, r3
 8019a6e:	4610      	mov	r0, r2
 8019a70:	f7fb fc48 	bl	8015304 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a76:	69fa      	ldr	r2, [r7, #28]
 8019a78:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019a7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019a7c:	69f8      	ldr	r0, [r7, #28]
 8019a7e:	f7ff f881 	bl	8018b84 <tcp_oos_insert_segment>
                  }
                  break;
 8019a82:	e0e2      	b.n	8019c4a <tcp_receive+0xebe>
 8019a84:	2001ad20 	.word	0x2001ad20
 8019a88:	2001ad1d 	.word	0x2001ad1d
 8019a8c:	2001acf0 	.word	0x2001acf0
 8019a90:	2001ad10 	.word	0x2001ad10
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a96:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	f040 80c6 	bne.w	8019c2e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019aa2:	4b80      	ldr	r3, [pc, #512]	; (8019ca4 <tcp_receive+0xf18>)
 8019aa4:	681a      	ldr	r2, [r3, #0]
 8019aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019aa8:	68db      	ldr	r3, [r3, #12]
 8019aaa:	685b      	ldr	r3, [r3, #4]
 8019aac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	f340 80bd 	ble.w	8019c2e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ab6:	68db      	ldr	r3, [r3, #12]
 8019ab8:	899b      	ldrh	r3, [r3, #12]
 8019aba:	b29b      	uxth	r3, r3
 8019abc:	4618      	mov	r0, r3
 8019abe:	f7fa f9b5 	bl	8013e2c <lwip_htons>
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	b2db      	uxtb	r3, r3
 8019ac6:	f003 0301 	and.w	r3, r3, #1
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	f040 80bf 	bne.w	8019c4e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019ad0:	4875      	ldr	r0, [pc, #468]	; (8019ca8 <tcp_receive+0xf1c>)
 8019ad2:	f7fd fa39 	bl	8016f48 <tcp_seg_copy>
 8019ad6:	4602      	mov	r2, r0
 8019ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ada:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	f000 80b6 	beq.w	8019c52 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ae8:	68db      	ldr	r3, [r3, #12]
 8019aea:	685b      	ldr	r3, [r3, #4]
 8019aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019aee:	8912      	ldrh	r2, [r2, #8]
 8019af0:	441a      	add	r2, r3
 8019af2:	4b6c      	ldr	r3, [pc, #432]	; (8019ca4 <tcp_receive+0xf18>)
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	1ad3      	subs	r3, r2, r3
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	dd12      	ble.n	8019b22 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019afc:	4b69      	ldr	r3, [pc, #420]	; (8019ca4 <tcp_receive+0xf18>)
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	b29a      	uxth	r2, r3
 8019b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b04:	68db      	ldr	r3, [r3, #12]
 8019b06:	685b      	ldr	r3, [r3, #4]
 8019b08:	b29b      	uxth	r3, r3
 8019b0a:	1ad3      	subs	r3, r2, r3
 8019b0c:	b29a      	uxth	r2, r3
 8019b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b10:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b14:	685a      	ldr	r2, [r3, #4]
 8019b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b18:	891b      	ldrh	r3, [r3, #8]
 8019b1a:	4619      	mov	r1, r3
 8019b1c:	4610      	mov	r0, r2
 8019b1e:	f7fb fbf1 	bl	8015304 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019b22:	4b62      	ldr	r3, [pc, #392]	; (8019cac <tcp_receive+0xf20>)
 8019b24:	881b      	ldrh	r3, [r3, #0]
 8019b26:	461a      	mov	r2, r3
 8019b28:	4b5e      	ldr	r3, [pc, #376]	; (8019ca4 <tcp_receive+0xf18>)
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	441a      	add	r2, r3
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b32:	6879      	ldr	r1, [r7, #4]
 8019b34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019b36:	440b      	add	r3, r1
 8019b38:	1ad3      	subs	r3, r2, r3
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	f340 8089 	ble.w	8019c52 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	68db      	ldr	r3, [r3, #12]
 8019b46:	899b      	ldrh	r3, [r3, #12]
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	f7fa f96e 	bl	8013e2c <lwip_htons>
 8019b50:	4603      	mov	r3, r0
 8019b52:	b2db      	uxtb	r3, r3
 8019b54:	f003 0301 	and.w	r3, r3, #1
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d022      	beq.n	8019ba2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	68db      	ldr	r3, [r3, #12]
 8019b62:	899b      	ldrh	r3, [r3, #12]
 8019b64:	b29b      	uxth	r3, r3
 8019b66:	b21b      	sxth	r3, r3
 8019b68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019b6c:	b21c      	sxth	r4, r3
 8019b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	68db      	ldr	r3, [r3, #12]
 8019b74:	899b      	ldrh	r3, [r3, #12]
 8019b76:	b29b      	uxth	r3, r3
 8019b78:	4618      	mov	r0, r3
 8019b7a:	f7fa f957 	bl	8013e2c <lwip_htons>
 8019b7e:	4603      	mov	r3, r0
 8019b80:	b2db      	uxtb	r3, r3
 8019b82:	b29b      	uxth	r3, r3
 8019b84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019b88:	b29b      	uxth	r3, r3
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f7fa f94e 	bl	8013e2c <lwip_htons>
 8019b90:	4603      	mov	r3, r0
 8019b92:	b21b      	sxth	r3, r3
 8019b94:	4323      	orrs	r3, r4
 8019b96:	b21a      	sxth	r2, r3
 8019b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	68db      	ldr	r3, [r3, #12]
 8019b9e:	b292      	uxth	r2, r2
 8019ba0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ba6:	b29a      	uxth	r2, r3
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019bac:	4413      	add	r3, r2
 8019bae:	b299      	uxth	r1, r3
 8019bb0:	4b3c      	ldr	r3, [pc, #240]	; (8019ca4 <tcp_receive+0xf18>)
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	b29a      	uxth	r2, r3
 8019bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	1a8a      	subs	r2, r1, r2
 8019bbc:	b292      	uxth	r2, r2
 8019bbe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	685a      	ldr	r2, [r3, #4]
 8019bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	891b      	ldrh	r3, [r3, #8]
 8019bcc:	4619      	mov	r1, r3
 8019bce:	4610      	mov	r0, r2
 8019bd0:	f7fb fb98 	bl	8015304 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	891c      	ldrh	r4, [r3, #8]
 8019bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	68db      	ldr	r3, [r3, #12]
 8019be0:	899b      	ldrh	r3, [r3, #12]
 8019be2:	b29b      	uxth	r3, r3
 8019be4:	4618      	mov	r0, r3
 8019be6:	f7fa f921 	bl	8013e2c <lwip_htons>
 8019bea:	4603      	mov	r3, r0
 8019bec:	b2db      	uxtb	r3, r3
 8019bee:	f003 0303 	and.w	r3, r3, #3
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d001      	beq.n	8019bfa <tcp_receive+0xe6e>
 8019bf6:	2301      	movs	r3, #1
 8019bf8:	e000      	b.n	8019bfc <tcp_receive+0xe70>
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	4423      	add	r3, r4
 8019bfe:	b29a      	uxth	r2, r3
 8019c00:	4b2a      	ldr	r3, [pc, #168]	; (8019cac <tcp_receive+0xf20>)
 8019c02:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019c04:	4b29      	ldr	r3, [pc, #164]	; (8019cac <tcp_receive+0xf20>)
 8019c06:	881b      	ldrh	r3, [r3, #0]
 8019c08:	461a      	mov	r2, r3
 8019c0a:	4b26      	ldr	r3, [pc, #152]	; (8019ca4 <tcp_receive+0xf18>)
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	441a      	add	r2, r3
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c14:	6879      	ldr	r1, [r7, #4]
 8019c16:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019c18:	440b      	add	r3, r1
 8019c1a:	429a      	cmp	r2, r3
 8019c1c:	d019      	beq.n	8019c52 <tcp_receive+0xec6>
 8019c1e:	4b24      	ldr	r3, [pc, #144]	; (8019cb0 <tcp_receive+0xf24>)
 8019c20:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8019c24:	4923      	ldr	r1, [pc, #140]	; (8019cb4 <tcp_receive+0xf28>)
 8019c26:	4824      	ldr	r0, [pc, #144]	; (8019cb8 <tcp_receive+0xf2c>)
 8019c28:	f00a fdf2 	bl	8024810 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019c2c:	e011      	b.n	8019c52 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8019c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	f47f aea4 	bne.w	8019984 <tcp_receive+0xbf8>
 8019c3c:	e00a      	b.n	8019c54 <tcp_receive+0xec8>
                break;
 8019c3e:	bf00      	nop
 8019c40:	e008      	b.n	8019c54 <tcp_receive+0xec8>
                break;
 8019c42:	bf00      	nop
 8019c44:	e006      	b.n	8019c54 <tcp_receive+0xec8>
                  break;
 8019c46:	bf00      	nop
 8019c48:	e004      	b.n	8019c54 <tcp_receive+0xec8>
                  break;
 8019c4a:	bf00      	nop
 8019c4c:	e002      	b.n	8019c54 <tcp_receive+0xec8>
                  break;
 8019c4e:	bf00      	nop
 8019c50:	e000      	b.n	8019c54 <tcp_receive+0xec8>
                break;
 8019c52:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019c54:	6878      	ldr	r0, [r7, #4]
 8019c56:	f001 fe8b 	bl	801b970 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8019c5a:	e003      	b.n	8019c64 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019c5c:	6878      	ldr	r0, [r7, #4]
 8019c5e:	f001 fe87 	bl	801b970 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019c62:	e01a      	b.n	8019c9a <tcp_receive+0xf0e>
 8019c64:	e019      	b.n	8019c9a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019c66:	4b0f      	ldr	r3, [pc, #60]	; (8019ca4 <tcp_receive+0xf18>)
 8019c68:	681a      	ldr	r2, [r3, #0]
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c6e:	1ad3      	subs	r3, r2, r3
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	db0a      	blt.n	8019c8a <tcp_receive+0xefe>
 8019c74:	4b0b      	ldr	r3, [pc, #44]	; (8019ca4 <tcp_receive+0xf18>)
 8019c76:	681a      	ldr	r2, [r3, #0]
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c7c:	6879      	ldr	r1, [r7, #4]
 8019c7e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019c80:	440b      	add	r3, r1
 8019c82:	1ad3      	subs	r3, r2, r3
 8019c84:	3301      	adds	r3, #1
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	dd07      	ble.n	8019c9a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	8b5b      	ldrh	r3, [r3, #26]
 8019c8e:	f043 0302 	orr.w	r3, r3, #2
 8019c92:	b29a      	uxth	r2, r3
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019c98:	e7ff      	b.n	8019c9a <tcp_receive+0xf0e>
 8019c9a:	bf00      	nop
 8019c9c:	3750      	adds	r7, #80	; 0x50
 8019c9e:	46bd      	mov	sp, r7
 8019ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8019ca2:	bf00      	nop
 8019ca4:	2001ad10 	.word	0x2001ad10
 8019ca8:	2001acf0 	.word	0x2001acf0
 8019cac:	2001ad1a 	.word	0x2001ad1a
 8019cb0:	0802b414 	.word	0x0802b414
 8019cb4:	0802b7bc 	.word	0x0802b7bc
 8019cb8:	0802b460 	.word	0x0802b460

08019cbc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8019cbc:	b480      	push	{r7}
 8019cbe:	b083      	sub	sp, #12
 8019cc0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8019cc2:	4b15      	ldr	r3, [pc, #84]	; (8019d18 <tcp_get_next_optbyte+0x5c>)
 8019cc4:	881b      	ldrh	r3, [r3, #0]
 8019cc6:	1c5a      	adds	r2, r3, #1
 8019cc8:	b291      	uxth	r1, r2
 8019cca:	4a13      	ldr	r2, [pc, #76]	; (8019d18 <tcp_get_next_optbyte+0x5c>)
 8019ccc:	8011      	strh	r1, [r2, #0]
 8019cce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019cd0:	4b12      	ldr	r3, [pc, #72]	; (8019d1c <tcp_get_next_optbyte+0x60>)
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d004      	beq.n	8019ce2 <tcp_get_next_optbyte+0x26>
 8019cd8:	4b11      	ldr	r3, [pc, #68]	; (8019d20 <tcp_get_next_optbyte+0x64>)
 8019cda:	881b      	ldrh	r3, [r3, #0]
 8019cdc:	88fa      	ldrh	r2, [r7, #6]
 8019cde:	429a      	cmp	r2, r3
 8019ce0:	d208      	bcs.n	8019cf4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8019ce2:	4b10      	ldr	r3, [pc, #64]	; (8019d24 <tcp_get_next_optbyte+0x68>)
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	3314      	adds	r3, #20
 8019ce8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019cea:	88fb      	ldrh	r3, [r7, #6]
 8019cec:	683a      	ldr	r2, [r7, #0]
 8019cee:	4413      	add	r3, r2
 8019cf0:	781b      	ldrb	r3, [r3, #0]
 8019cf2:	e00b      	b.n	8019d0c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019cf4:	88fb      	ldrh	r3, [r7, #6]
 8019cf6:	b2da      	uxtb	r2, r3
 8019cf8:	4b09      	ldr	r3, [pc, #36]	; (8019d20 <tcp_get_next_optbyte+0x64>)
 8019cfa:	881b      	ldrh	r3, [r3, #0]
 8019cfc:	b2db      	uxtb	r3, r3
 8019cfe:	1ad3      	subs	r3, r2, r3
 8019d00:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8019d02:	4b06      	ldr	r3, [pc, #24]	; (8019d1c <tcp_get_next_optbyte+0x60>)
 8019d04:	681a      	ldr	r2, [r3, #0]
 8019d06:	797b      	ldrb	r3, [r7, #5]
 8019d08:	4413      	add	r3, r2
 8019d0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	370c      	adds	r7, #12
 8019d10:	46bd      	mov	sp, r7
 8019d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d16:	4770      	bx	lr
 8019d18:	2001ad0c 	.word	0x2001ad0c
 8019d1c:	2001ad08 	.word	0x2001ad08
 8019d20:	2001ad06 	.word	0x2001ad06
 8019d24:	2001ad00 	.word	0x2001ad00

08019d28 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b084      	sub	sp, #16
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d106      	bne.n	8019d44 <tcp_parseopt+0x1c>
 8019d36:	4b32      	ldr	r3, [pc, #200]	; (8019e00 <tcp_parseopt+0xd8>)
 8019d38:	f240 727d 	movw	r2, #1917	; 0x77d
 8019d3c:	4931      	ldr	r1, [pc, #196]	; (8019e04 <tcp_parseopt+0xdc>)
 8019d3e:	4832      	ldr	r0, [pc, #200]	; (8019e08 <tcp_parseopt+0xe0>)
 8019d40:	f00a fd66 	bl	8024810 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019d44:	4b31      	ldr	r3, [pc, #196]	; (8019e0c <tcp_parseopt+0xe4>)
 8019d46:	881b      	ldrh	r3, [r3, #0]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d055      	beq.n	8019df8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019d4c:	4b30      	ldr	r3, [pc, #192]	; (8019e10 <tcp_parseopt+0xe8>)
 8019d4e:	2200      	movs	r2, #0
 8019d50:	801a      	strh	r2, [r3, #0]
 8019d52:	e045      	b.n	8019de0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8019d54:	f7ff ffb2 	bl	8019cbc <tcp_get_next_optbyte>
 8019d58:	4603      	mov	r3, r0
 8019d5a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019d5c:	7bfb      	ldrb	r3, [r7, #15]
 8019d5e:	2b02      	cmp	r3, #2
 8019d60:	d006      	beq.n	8019d70 <tcp_parseopt+0x48>
 8019d62:	2b02      	cmp	r3, #2
 8019d64:	dc2b      	bgt.n	8019dbe <tcp_parseopt+0x96>
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d041      	beq.n	8019dee <tcp_parseopt+0xc6>
 8019d6a:	2b01      	cmp	r3, #1
 8019d6c:	d127      	bne.n	8019dbe <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8019d6e:	e037      	b.n	8019de0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019d70:	f7ff ffa4 	bl	8019cbc <tcp_get_next_optbyte>
 8019d74:	4603      	mov	r3, r0
 8019d76:	2b04      	cmp	r3, #4
 8019d78:	d13b      	bne.n	8019df2 <tcp_parseopt+0xca>
 8019d7a:	4b25      	ldr	r3, [pc, #148]	; (8019e10 <tcp_parseopt+0xe8>)
 8019d7c:	881b      	ldrh	r3, [r3, #0]
 8019d7e:	3301      	adds	r3, #1
 8019d80:	4a22      	ldr	r2, [pc, #136]	; (8019e0c <tcp_parseopt+0xe4>)
 8019d82:	8812      	ldrh	r2, [r2, #0]
 8019d84:	4293      	cmp	r3, r2
 8019d86:	da34      	bge.n	8019df2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019d88:	f7ff ff98 	bl	8019cbc <tcp_get_next_optbyte>
 8019d8c:	4603      	mov	r3, r0
 8019d8e:	b29b      	uxth	r3, r3
 8019d90:	021b      	lsls	r3, r3, #8
 8019d92:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019d94:	f7ff ff92 	bl	8019cbc <tcp_get_next_optbyte>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	b29a      	uxth	r2, r3
 8019d9c:	89bb      	ldrh	r3, [r7, #12]
 8019d9e:	4313      	orrs	r3, r2
 8019da0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019da2:	89bb      	ldrh	r3, [r7, #12]
 8019da4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019da8:	d804      	bhi.n	8019db4 <tcp_parseopt+0x8c>
 8019daa:	89bb      	ldrh	r3, [r7, #12]
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d001      	beq.n	8019db4 <tcp_parseopt+0x8c>
 8019db0:	89ba      	ldrh	r2, [r7, #12]
 8019db2:	e001      	b.n	8019db8 <tcp_parseopt+0x90>
 8019db4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8019dbc:	e010      	b.n	8019de0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8019dbe:	f7ff ff7d 	bl	8019cbc <tcp_get_next_optbyte>
 8019dc2:	4603      	mov	r3, r0
 8019dc4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019dc6:	7afb      	ldrb	r3, [r7, #11]
 8019dc8:	2b01      	cmp	r3, #1
 8019dca:	d914      	bls.n	8019df6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019dcc:	7afb      	ldrb	r3, [r7, #11]
 8019dce:	b29a      	uxth	r2, r3
 8019dd0:	4b0f      	ldr	r3, [pc, #60]	; (8019e10 <tcp_parseopt+0xe8>)
 8019dd2:	881b      	ldrh	r3, [r3, #0]
 8019dd4:	4413      	add	r3, r2
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	3b02      	subs	r3, #2
 8019dda:	b29a      	uxth	r2, r3
 8019ddc:	4b0c      	ldr	r3, [pc, #48]	; (8019e10 <tcp_parseopt+0xe8>)
 8019dde:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019de0:	4b0b      	ldr	r3, [pc, #44]	; (8019e10 <tcp_parseopt+0xe8>)
 8019de2:	881a      	ldrh	r2, [r3, #0]
 8019de4:	4b09      	ldr	r3, [pc, #36]	; (8019e0c <tcp_parseopt+0xe4>)
 8019de6:	881b      	ldrh	r3, [r3, #0]
 8019de8:	429a      	cmp	r2, r3
 8019dea:	d3b3      	bcc.n	8019d54 <tcp_parseopt+0x2c>
 8019dec:	e004      	b.n	8019df8 <tcp_parseopt+0xd0>
          return;
 8019dee:	bf00      	nop
 8019df0:	e002      	b.n	8019df8 <tcp_parseopt+0xd0>
            return;
 8019df2:	bf00      	nop
 8019df4:	e000      	b.n	8019df8 <tcp_parseopt+0xd0>
            return;
 8019df6:	bf00      	nop
      }
    }
  }
}
 8019df8:	3710      	adds	r7, #16
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}
 8019dfe:	bf00      	nop
 8019e00:	0802b414 	.word	0x0802b414
 8019e04:	0802b878 	.word	0x0802b878
 8019e08:	0802b460 	.word	0x0802b460
 8019e0c:	2001ad04 	.word	0x2001ad04
 8019e10:	2001ad0c 	.word	0x2001ad0c

08019e14 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019e14:	b480      	push	{r7}
 8019e16:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019e18:	4b05      	ldr	r3, [pc, #20]	; (8019e30 <tcp_trigger_input_pcb_close+0x1c>)
 8019e1a:	781b      	ldrb	r3, [r3, #0]
 8019e1c:	f043 0310 	orr.w	r3, r3, #16
 8019e20:	b2da      	uxtb	r2, r3
 8019e22:	4b03      	ldr	r3, [pc, #12]	; (8019e30 <tcp_trigger_input_pcb_close+0x1c>)
 8019e24:	701a      	strb	r2, [r3, #0]
}
 8019e26:	bf00      	nop
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e2e:	4770      	bx	lr
 8019e30:	2001ad1d 	.word	0x2001ad1d

08019e34 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019e34:	b580      	push	{r7, lr}
 8019e36:	b084      	sub	sp, #16
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	60f8      	str	r0, [r7, #12]
 8019e3c:	60b9      	str	r1, [r7, #8]
 8019e3e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d00a      	beq.n	8019e5c <tcp_route+0x28>
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	7a1b      	ldrb	r3, [r3, #8]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d006      	beq.n	8019e5c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	7a1b      	ldrb	r3, [r3, #8]
 8019e52:	4618      	mov	r0, r3
 8019e54:	f7fb f84e 	bl	8014ef4 <netif_get_by_index>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	e003      	b.n	8019e64 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019e5c:	6878      	ldr	r0, [r7, #4]
 8019e5e:	f003 fc4b 	bl	801d6f8 <ip4_route>
 8019e62:	4603      	mov	r3, r0
  }
}
 8019e64:	4618      	mov	r0, r3
 8019e66:	3710      	adds	r7, #16
 8019e68:	46bd      	mov	sp, r7
 8019e6a:	bd80      	pop	{r7, pc}

08019e6c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019e6c:	b590      	push	{r4, r7, lr}
 8019e6e:	b087      	sub	sp, #28
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	60f8      	str	r0, [r7, #12]
 8019e74:	60b9      	str	r1, [r7, #8]
 8019e76:	603b      	str	r3, [r7, #0]
 8019e78:	4613      	mov	r3, r2
 8019e7a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d105      	bne.n	8019e8e <tcp_create_segment+0x22>
 8019e82:	4b44      	ldr	r3, [pc, #272]	; (8019f94 <tcp_create_segment+0x128>)
 8019e84:	22a3      	movs	r2, #163	; 0xa3
 8019e86:	4944      	ldr	r1, [pc, #272]	; (8019f98 <tcp_create_segment+0x12c>)
 8019e88:	4844      	ldr	r0, [pc, #272]	; (8019f9c <tcp_create_segment+0x130>)
 8019e8a:	f00a fcc1 	bl	8024810 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019e8e:	68bb      	ldr	r3, [r7, #8]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d105      	bne.n	8019ea0 <tcp_create_segment+0x34>
 8019e94:	4b3f      	ldr	r3, [pc, #252]	; (8019f94 <tcp_create_segment+0x128>)
 8019e96:	22a4      	movs	r2, #164	; 0xa4
 8019e98:	4941      	ldr	r1, [pc, #260]	; (8019fa0 <tcp_create_segment+0x134>)
 8019e9a:	4840      	ldr	r0, [pc, #256]	; (8019f9c <tcp_create_segment+0x130>)
 8019e9c:	f00a fcb8 	bl	8024810 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019ea0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019ea4:	009b      	lsls	r3, r3, #2
 8019ea6:	b2db      	uxtb	r3, r3
 8019ea8:	f003 0304 	and.w	r3, r3, #4
 8019eac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019eae:	2003      	movs	r0, #3
 8019eb0:	f7fa fc94 	bl	80147dc <memp_malloc>
 8019eb4:	6138      	str	r0, [r7, #16]
 8019eb6:	693b      	ldr	r3, [r7, #16]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d104      	bne.n	8019ec6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019ebc:	68b8      	ldr	r0, [r7, #8]
 8019ebe:	f7fb fba7 	bl	8015610 <pbuf_free>
    return NULL;
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	e061      	b.n	8019f8a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8019ec6:	693b      	ldr	r3, [r7, #16]
 8019ec8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019ecc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8019ece:	693b      	ldr	r3, [r7, #16]
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019ed4:	693b      	ldr	r3, [r7, #16]
 8019ed6:	68ba      	ldr	r2, [r7, #8]
 8019ed8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	891a      	ldrh	r2, [r3, #8]
 8019ede:	7dfb      	ldrb	r3, [r7, #23]
 8019ee0:	b29b      	uxth	r3, r3
 8019ee2:	429a      	cmp	r2, r3
 8019ee4:	d205      	bcs.n	8019ef2 <tcp_create_segment+0x86>
 8019ee6:	4b2b      	ldr	r3, [pc, #172]	; (8019f94 <tcp_create_segment+0x128>)
 8019ee8:	22b0      	movs	r2, #176	; 0xb0
 8019eea:	492e      	ldr	r1, [pc, #184]	; (8019fa4 <tcp_create_segment+0x138>)
 8019eec:	482b      	ldr	r0, [pc, #172]	; (8019f9c <tcp_create_segment+0x130>)
 8019eee:	f00a fc8f 	bl	8024810 <iprintf>
  seg->len = p->tot_len - optlen;
 8019ef2:	68bb      	ldr	r3, [r7, #8]
 8019ef4:	891a      	ldrh	r2, [r3, #8]
 8019ef6:	7dfb      	ldrb	r3, [r7, #23]
 8019ef8:	b29b      	uxth	r3, r3
 8019efa:	1ad3      	subs	r3, r2, r3
 8019efc:	b29a      	uxth	r2, r3
 8019efe:	693b      	ldr	r3, [r7, #16]
 8019f00:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019f02:	2114      	movs	r1, #20
 8019f04:	68b8      	ldr	r0, [r7, #8]
 8019f06:	f7fb faed 	bl	80154e4 <pbuf_add_header>
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d004      	beq.n	8019f1a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8019f10:	6938      	ldr	r0, [r7, #16]
 8019f12:	f7fd f800 	bl	8016f16 <tcp_seg_free>
    return NULL;
 8019f16:	2300      	movs	r3, #0
 8019f18:	e037      	b.n	8019f8a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019f1a:	693b      	ldr	r3, [r7, #16]
 8019f1c:	685b      	ldr	r3, [r3, #4]
 8019f1e:	685a      	ldr	r2, [r3, #4]
 8019f20:	693b      	ldr	r3, [r7, #16]
 8019f22:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	8ada      	ldrh	r2, [r3, #22]
 8019f28:	693b      	ldr	r3, [r7, #16]
 8019f2a:	68dc      	ldr	r4, [r3, #12]
 8019f2c:	4610      	mov	r0, r2
 8019f2e:	f7f9 ff7d 	bl	8013e2c <lwip_htons>
 8019f32:	4603      	mov	r3, r0
 8019f34:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	8b1a      	ldrh	r2, [r3, #24]
 8019f3a:	693b      	ldr	r3, [r7, #16]
 8019f3c:	68dc      	ldr	r4, [r3, #12]
 8019f3e:	4610      	mov	r0, r2
 8019f40:	f7f9 ff74 	bl	8013e2c <lwip_htons>
 8019f44:	4603      	mov	r3, r0
 8019f46:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019f48:	693b      	ldr	r3, [r7, #16]
 8019f4a:	68dc      	ldr	r4, [r3, #12]
 8019f4c:	6838      	ldr	r0, [r7, #0]
 8019f4e:	f7f9 ff82 	bl	8013e56 <lwip_htonl>
 8019f52:	4603      	mov	r3, r0
 8019f54:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019f56:	7dfb      	ldrb	r3, [r7, #23]
 8019f58:	089b      	lsrs	r3, r3, #2
 8019f5a:	b2db      	uxtb	r3, r3
 8019f5c:	b29b      	uxth	r3, r3
 8019f5e:	3305      	adds	r3, #5
 8019f60:	b29b      	uxth	r3, r3
 8019f62:	031b      	lsls	r3, r3, #12
 8019f64:	b29a      	uxth	r2, r3
 8019f66:	79fb      	ldrb	r3, [r7, #7]
 8019f68:	b29b      	uxth	r3, r3
 8019f6a:	4313      	orrs	r3, r2
 8019f6c:	b29a      	uxth	r2, r3
 8019f6e:	693b      	ldr	r3, [r7, #16]
 8019f70:	68dc      	ldr	r4, [r3, #12]
 8019f72:	4610      	mov	r0, r2
 8019f74:	f7f9 ff5a 	bl	8013e2c <lwip_htons>
 8019f78:	4603      	mov	r3, r0
 8019f7a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019f7c:	693b      	ldr	r3, [r7, #16]
 8019f7e:	68db      	ldr	r3, [r3, #12]
 8019f80:	2200      	movs	r2, #0
 8019f82:	749a      	strb	r2, [r3, #18]
 8019f84:	2200      	movs	r2, #0
 8019f86:	74da      	strb	r2, [r3, #19]
  return seg;
 8019f88:	693b      	ldr	r3, [r7, #16]
}
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	371c      	adds	r7, #28
 8019f8e:	46bd      	mov	sp, r7
 8019f90:	bd90      	pop	{r4, r7, pc}
 8019f92:	bf00      	nop
 8019f94:	0802b894 	.word	0x0802b894
 8019f98:	0802b8c8 	.word	0x0802b8c8
 8019f9c:	0802b8e8 	.word	0x0802b8e8
 8019fa0:	0802b910 	.word	0x0802b910
 8019fa4:	0802b934 	.word	0x0802b934

08019fa8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b086      	sub	sp, #24
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	607b      	str	r3, [r7, #4]
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	73fb      	strb	r3, [r7, #15]
 8019fb4:	460b      	mov	r3, r1
 8019fb6:	81bb      	strh	r3, [r7, #12]
 8019fb8:	4613      	mov	r3, r2
 8019fba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019fbc:	89bb      	ldrh	r3, [r7, #12]
 8019fbe:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d105      	bne.n	8019fd2 <tcp_pbuf_prealloc+0x2a>
 8019fc6:	4b30      	ldr	r3, [pc, #192]	; (801a088 <tcp_pbuf_prealloc+0xe0>)
 8019fc8:	22e8      	movs	r2, #232	; 0xe8
 8019fca:	4930      	ldr	r1, [pc, #192]	; (801a08c <tcp_pbuf_prealloc+0xe4>)
 8019fcc:	4830      	ldr	r0, [pc, #192]	; (801a090 <tcp_pbuf_prealloc+0xe8>)
 8019fce:	f00a fc1f 	bl	8024810 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019fd2:	6a3b      	ldr	r3, [r7, #32]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d105      	bne.n	8019fe4 <tcp_pbuf_prealloc+0x3c>
 8019fd8:	4b2b      	ldr	r3, [pc, #172]	; (801a088 <tcp_pbuf_prealloc+0xe0>)
 8019fda:	22e9      	movs	r2, #233	; 0xe9
 8019fdc:	492d      	ldr	r1, [pc, #180]	; (801a094 <tcp_pbuf_prealloc+0xec>)
 8019fde:	482c      	ldr	r0, [pc, #176]	; (801a090 <tcp_pbuf_prealloc+0xe8>)
 8019fe0:	f00a fc16 	bl	8024810 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019fe4:	89ba      	ldrh	r2, [r7, #12]
 8019fe6:	897b      	ldrh	r3, [r7, #10]
 8019fe8:	429a      	cmp	r2, r3
 8019fea:	d221      	bcs.n	801a030 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019fec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019ff0:	f003 0302 	and.w	r3, r3, #2
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	d111      	bne.n	801a01c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019ff8:	6a3b      	ldr	r3, [r7, #32]
 8019ffa:	8b5b      	ldrh	r3, [r3, #26]
 8019ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a000:	2b00      	cmp	r3, #0
 801a002:	d115      	bne.n	801a030 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a004:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d007      	beq.n	801a01c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a00c:	6a3b      	ldr	r3, [r7, #32]
 801a00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a010:	2b00      	cmp	r3, #0
 801a012:	d103      	bne.n	801a01c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a014:	6a3b      	ldr	r3, [r7, #32]
 801a016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d009      	beq.n	801a030 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a01c:	89bb      	ldrh	r3, [r7, #12]
 801a01e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a022:	f023 0203 	bic.w	r2, r3, #3
 801a026:	897b      	ldrh	r3, [r7, #10]
 801a028:	4293      	cmp	r3, r2
 801a02a:	bf28      	it	cs
 801a02c:	4613      	movcs	r3, r2
 801a02e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a030:	8af9      	ldrh	r1, [r7, #22]
 801a032:	7bfb      	ldrb	r3, [r7, #15]
 801a034:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a038:	4618      	mov	r0, r3
 801a03a:	f7fb f805 	bl	8015048 <pbuf_alloc>
 801a03e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a040:	693b      	ldr	r3, [r7, #16]
 801a042:	2b00      	cmp	r3, #0
 801a044:	d101      	bne.n	801a04a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a046:	2300      	movs	r3, #0
 801a048:	e019      	b.n	801a07e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a04a:	693b      	ldr	r3, [r7, #16]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d006      	beq.n	801a060 <tcp_pbuf_prealloc+0xb8>
 801a052:	4b0d      	ldr	r3, [pc, #52]	; (801a088 <tcp_pbuf_prealloc+0xe0>)
 801a054:	f240 120b 	movw	r2, #267	; 0x10b
 801a058:	490f      	ldr	r1, [pc, #60]	; (801a098 <tcp_pbuf_prealloc+0xf0>)
 801a05a:	480d      	ldr	r0, [pc, #52]	; (801a090 <tcp_pbuf_prealloc+0xe8>)
 801a05c:	f00a fbd8 	bl	8024810 <iprintf>
  *oversize = p->len - length;
 801a060:	693b      	ldr	r3, [r7, #16]
 801a062:	895a      	ldrh	r2, [r3, #10]
 801a064:	89bb      	ldrh	r3, [r7, #12]
 801a066:	1ad3      	subs	r3, r2, r3
 801a068:	b29a      	uxth	r2, r3
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a06e:	693b      	ldr	r3, [r7, #16]
 801a070:	89ba      	ldrh	r2, [r7, #12]
 801a072:	811a      	strh	r2, [r3, #8]
 801a074:	693b      	ldr	r3, [r7, #16]
 801a076:	891a      	ldrh	r2, [r3, #8]
 801a078:	693b      	ldr	r3, [r7, #16]
 801a07a:	815a      	strh	r2, [r3, #10]
  return p;
 801a07c:	693b      	ldr	r3, [r7, #16]
}
 801a07e:	4618      	mov	r0, r3
 801a080:	3718      	adds	r7, #24
 801a082:	46bd      	mov	sp, r7
 801a084:	bd80      	pop	{r7, pc}
 801a086:	bf00      	nop
 801a088:	0802b894 	.word	0x0802b894
 801a08c:	0802b94c 	.word	0x0802b94c
 801a090:	0802b8e8 	.word	0x0802b8e8
 801a094:	0802b970 	.word	0x0802b970
 801a098:	0802b990 	.word	0x0802b990

0801a09c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b082      	sub	sp, #8
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	6078      	str	r0, [r7, #4]
 801a0a4:	460b      	mov	r3, r1
 801a0a6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d106      	bne.n	801a0bc <tcp_write_checks+0x20>
 801a0ae:	4b33      	ldr	r3, [pc, #204]	; (801a17c <tcp_write_checks+0xe0>)
 801a0b0:	f240 1233 	movw	r2, #307	; 0x133
 801a0b4:	4932      	ldr	r1, [pc, #200]	; (801a180 <tcp_write_checks+0xe4>)
 801a0b6:	4833      	ldr	r0, [pc, #204]	; (801a184 <tcp_write_checks+0xe8>)
 801a0b8:	f00a fbaa 	bl	8024810 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	7d1b      	ldrb	r3, [r3, #20]
 801a0c0:	2b04      	cmp	r3, #4
 801a0c2:	d00e      	beq.n	801a0e2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a0c8:	2b07      	cmp	r3, #7
 801a0ca:	d00a      	beq.n	801a0e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a0d0:	2b02      	cmp	r3, #2
 801a0d2:	d006      	beq.n	801a0e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a0d8:	2b03      	cmp	r3, #3
 801a0da:	d002      	beq.n	801a0e2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a0dc:	f06f 030a 	mvn.w	r3, #10
 801a0e0:	e048      	b.n	801a174 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801a0e2:	887b      	ldrh	r3, [r7, #2]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d101      	bne.n	801a0ec <tcp_write_checks+0x50>
    return ERR_OK;
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	e043      	b.n	801a174 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801a0f2:	887a      	ldrh	r2, [r7, #2]
 801a0f4:	429a      	cmp	r2, r3
 801a0f6:	d909      	bls.n	801a10c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	8b5b      	ldrh	r3, [r3, #26]
 801a0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a100:	b29a      	uxth	r2, r3
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a10a:	e033      	b.n	801a174 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a112:	2b08      	cmp	r3, #8
 801a114:	d909      	bls.n	801a12a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	8b5b      	ldrh	r3, [r3, #26]
 801a11a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a11e:	b29a      	uxth	r2, r3
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801a124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a128:	e024      	b.n	801a174 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a130:	2b00      	cmp	r3, #0
 801a132:	d00f      	beq.n	801a154 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d11a      	bne.n	801a172 <tcp_write_checks+0xd6>
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a140:	2b00      	cmp	r3, #0
 801a142:	d116      	bne.n	801a172 <tcp_write_checks+0xd6>
 801a144:	4b0d      	ldr	r3, [pc, #52]	; (801a17c <tcp_write_checks+0xe0>)
 801a146:	f240 1255 	movw	r2, #341	; 0x155
 801a14a:	490f      	ldr	r1, [pc, #60]	; (801a188 <tcp_write_checks+0xec>)
 801a14c:	480d      	ldr	r0, [pc, #52]	; (801a184 <tcp_write_checks+0xe8>)
 801a14e:	f00a fb5f 	bl	8024810 <iprintf>
 801a152:	e00e      	b.n	801a172 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d103      	bne.n	801a164 <tcp_write_checks+0xc8>
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a160:	2b00      	cmp	r3, #0
 801a162:	d006      	beq.n	801a172 <tcp_write_checks+0xd6>
 801a164:	4b05      	ldr	r3, [pc, #20]	; (801a17c <tcp_write_checks+0xe0>)
 801a166:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801a16a:	4908      	ldr	r1, [pc, #32]	; (801a18c <tcp_write_checks+0xf0>)
 801a16c:	4805      	ldr	r0, [pc, #20]	; (801a184 <tcp_write_checks+0xe8>)
 801a16e:	f00a fb4f 	bl	8024810 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a172:	2300      	movs	r3, #0
}
 801a174:	4618      	mov	r0, r3
 801a176:	3708      	adds	r7, #8
 801a178:	46bd      	mov	sp, r7
 801a17a:	bd80      	pop	{r7, pc}
 801a17c:	0802b894 	.word	0x0802b894
 801a180:	0802b9a4 	.word	0x0802b9a4
 801a184:	0802b8e8 	.word	0x0802b8e8
 801a188:	0802b9c4 	.word	0x0802b9c4
 801a18c:	0802ba00 	.word	0x0802ba00

0801a190 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a190:	b590      	push	{r4, r7, lr}
 801a192:	b09b      	sub	sp, #108	; 0x6c
 801a194:	af04      	add	r7, sp, #16
 801a196:	60f8      	str	r0, [r7, #12]
 801a198:	60b9      	str	r1, [r7, #8]
 801a19a:	4611      	mov	r1, r2
 801a19c:	461a      	mov	r2, r3
 801a19e:	460b      	mov	r3, r1
 801a1a0:	80fb      	strh	r3, [r7, #6]
 801a1a2:	4613      	mov	r3, r2
 801a1a4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	653b      	str	r3, [r7, #80]	; 0x50
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	64bb      	str	r3, [r7, #72]	; 0x48
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801a1c0:	2300      	movs	r3, #0
 801a1c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d109      	bne.n	801a1ec <tcp_write+0x5c>
 801a1d8:	4ba4      	ldr	r3, [pc, #656]	; (801a46c <tcp_write+0x2dc>)
 801a1da:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801a1de:	49a4      	ldr	r1, [pc, #656]	; (801a470 <tcp_write+0x2e0>)
 801a1e0:	48a4      	ldr	r0, [pc, #656]	; (801a474 <tcp_write+0x2e4>)
 801a1e2:	f00a fb15 	bl	8024810 <iprintf>
 801a1e6:	f06f 030f 	mvn.w	r3, #15
 801a1ea:	e32a      	b.n	801a842 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801a1f2:	085b      	lsrs	r3, r3, #1
 801a1f4:	b29a      	uxth	r2, r3
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1fa:	4293      	cmp	r3, r2
 801a1fc:	bf28      	it	cs
 801a1fe:	4613      	movcs	r3, r2
 801a200:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801a202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a204:	2b00      	cmp	r3, #0
 801a206:	d102      	bne.n	801a20e <tcp_write+0x7e>
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a20c:	e000      	b.n	801a210 <tcp_write+0x80>
 801a20e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a210:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a212:	68bb      	ldr	r3, [r7, #8]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d109      	bne.n	801a22c <tcp_write+0x9c>
 801a218:	4b94      	ldr	r3, [pc, #592]	; (801a46c <tcp_write+0x2dc>)
 801a21a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801a21e:	4996      	ldr	r1, [pc, #600]	; (801a478 <tcp_write+0x2e8>)
 801a220:	4894      	ldr	r0, [pc, #592]	; (801a474 <tcp_write+0x2e4>)
 801a222:	f00a faf5 	bl	8024810 <iprintf>
 801a226:	f06f 030f 	mvn.w	r3, #15
 801a22a:	e30a      	b.n	801a842 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801a22c:	88fb      	ldrh	r3, [r7, #6]
 801a22e:	4619      	mov	r1, r3
 801a230:	68f8      	ldr	r0, [r7, #12]
 801a232:	f7ff ff33 	bl	801a09c <tcp_write_checks>
 801a236:	4603      	mov	r3, r0
 801a238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801a23c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a240:	2b00      	cmp	r3, #0
 801a242:	d002      	beq.n	801a24a <tcp_write+0xba>
    return err;
 801a244:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801a248:	e2fb      	b.n	801a842 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a250:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a254:	2300      	movs	r3, #0
 801a256:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a25e:	2b00      	cmp	r3, #0
 801a260:	f000 80f6 	beq.w	801a450 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a268:	653b      	str	r3, [r7, #80]	; 0x50
 801a26a:	e002      	b.n	801a272 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801a26c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d1f8      	bne.n	801a26c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a27c:	7a9b      	ldrb	r3, [r3, #10]
 801a27e:	009b      	lsls	r3, r3, #2
 801a280:	b29b      	uxth	r3, r3
 801a282:	f003 0304 	and.w	r3, r3, #4
 801a286:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a288:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a28c:	891b      	ldrh	r3, [r3, #8]
 801a28e:	4619      	mov	r1, r3
 801a290:	8c3b      	ldrh	r3, [r7, #32]
 801a292:	440b      	add	r3, r1
 801a294:	429a      	cmp	r2, r3
 801a296:	da06      	bge.n	801a2a6 <tcp_write+0x116>
 801a298:	4b74      	ldr	r3, [pc, #464]	; (801a46c <tcp_write+0x2dc>)
 801a29a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a29e:	4977      	ldr	r1, [pc, #476]	; (801a47c <tcp_write+0x2ec>)
 801a2a0:	4874      	ldr	r0, [pc, #464]	; (801a474 <tcp_write+0x2e4>)
 801a2a2:	f00a fab5 	bl	8024810 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a2a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2a8:	891a      	ldrh	r2, [r3, #8]
 801a2aa:	8c3b      	ldrh	r3, [r7, #32]
 801a2ac:	4413      	add	r3, r2
 801a2ae:	b29b      	uxth	r3, r3
 801a2b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a2b2:	1ad3      	subs	r3, r2, r3
 801a2b4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a2bc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801a2be:	8a7b      	ldrh	r3, [r7, #18]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d026      	beq.n	801a312 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a2c4:	8a7b      	ldrh	r3, [r7, #18]
 801a2c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a2c8:	429a      	cmp	r2, r3
 801a2ca:	d206      	bcs.n	801a2da <tcp_write+0x14a>
 801a2cc:	4b67      	ldr	r3, [pc, #412]	; (801a46c <tcp_write+0x2dc>)
 801a2ce:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801a2d2:	496b      	ldr	r1, [pc, #428]	; (801a480 <tcp_write+0x2f0>)
 801a2d4:	4867      	ldr	r0, [pc, #412]	; (801a474 <tcp_write+0x2e4>)
 801a2d6:	f00a fa9b 	bl	8024810 <iprintf>
      seg = last_unsent;
 801a2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2dc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a2de:	8a7b      	ldrh	r3, [r7, #18]
 801a2e0:	88fa      	ldrh	r2, [r7, #6]
 801a2e2:	4293      	cmp	r3, r2
 801a2e4:	bf28      	it	cs
 801a2e6:	4613      	movcs	r3, r2
 801a2e8:	b29b      	uxth	r3, r3
 801a2ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a2ec:	4293      	cmp	r3, r2
 801a2ee:	bf28      	it	cs
 801a2f0:	4613      	movcs	r3, r2
 801a2f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801a2f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a2f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a2fa:	4413      	add	r3, r2
 801a2fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801a300:	8a7a      	ldrh	r2, [r7, #18]
 801a302:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a304:	1ad3      	subs	r3, r2, r3
 801a306:	b29b      	uxth	r3, r3
 801a308:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801a30a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a30c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a30e:	1ad3      	subs	r3, r2, r3
 801a310:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a312:	8a7b      	ldrh	r3, [r7, #18]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d00b      	beq.n	801a330 <tcp_write+0x1a0>
 801a318:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a31c:	88fb      	ldrh	r3, [r7, #6]
 801a31e:	429a      	cmp	r2, r3
 801a320:	d006      	beq.n	801a330 <tcp_write+0x1a0>
 801a322:	4b52      	ldr	r3, [pc, #328]	; (801a46c <tcp_write+0x2dc>)
 801a324:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a328:	4956      	ldr	r1, [pc, #344]	; (801a484 <tcp_write+0x2f4>)
 801a32a:	4852      	ldr	r0, [pc, #328]	; (801a474 <tcp_write+0x2e4>)
 801a32c:	f00a fa70 	bl	8024810 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a330:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a334:	88fb      	ldrh	r3, [r7, #6]
 801a336:	429a      	cmp	r2, r3
 801a338:	f080 8167 	bcs.w	801a60a <tcp_write+0x47a>
 801a33c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a33e:	2b00      	cmp	r3, #0
 801a340:	f000 8163 	beq.w	801a60a <tcp_write+0x47a>
 801a344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a346:	891b      	ldrh	r3, [r3, #8]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	f000 815e 	beq.w	801a60a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a34e:	88fa      	ldrh	r2, [r7, #6]
 801a350:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a354:	1ad2      	subs	r2, r2, r3
 801a356:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a358:	4293      	cmp	r3, r2
 801a35a:	bfa8      	it	ge
 801a35c:	4613      	movge	r3, r2
 801a35e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801a360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a362:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a364:	797b      	ldrb	r3, [r7, #5]
 801a366:	f003 0301 	and.w	r3, r3, #1
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d027      	beq.n	801a3be <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a36e:	f107 0012 	add.w	r0, r7, #18
 801a372:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a374:	8bf9      	ldrh	r1, [r7, #30]
 801a376:	2301      	movs	r3, #1
 801a378:	9302      	str	r3, [sp, #8]
 801a37a:	797b      	ldrb	r3, [r7, #5]
 801a37c:	9301      	str	r3, [sp, #4]
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	9300      	str	r3, [sp, #0]
 801a382:	4603      	mov	r3, r0
 801a384:	2000      	movs	r0, #0
 801a386:	f7ff fe0f 	bl	8019fa8 <tcp_pbuf_prealloc>
 801a38a:	6578      	str	r0, [r7, #84]	; 0x54
 801a38c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a38e:	2b00      	cmp	r3, #0
 801a390:	f000 8225 	beq.w	801a7de <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a396:	6858      	ldr	r0, [r3, #4]
 801a398:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a39c:	68ba      	ldr	r2, [r7, #8]
 801a39e:	4413      	add	r3, r2
 801a3a0:	8bfa      	ldrh	r2, [r7, #30]
 801a3a2:	4619      	mov	r1, r3
 801a3a4:	f009 faf5 	bl	8023992 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a3a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a3aa:	f7fb f9bf 	bl	801572c <pbuf_clen>
 801a3ae:	4603      	mov	r3, r0
 801a3b0:	461a      	mov	r2, r3
 801a3b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a3b6:	4413      	add	r3, r2
 801a3b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801a3bc:	e041      	b.n	801a442 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3c0:	685b      	ldr	r3, [r3, #4]
 801a3c2:	637b      	str	r3, [r7, #52]	; 0x34
 801a3c4:	e002      	b.n	801a3cc <tcp_write+0x23c>
 801a3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	637b      	str	r3, [r7, #52]	; 0x34
 801a3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d1f8      	bne.n	801a3c6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3d6:	7b1b      	ldrb	r3, [r3, #12]
 801a3d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d115      	bne.n	801a40c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3e2:	685b      	ldr	r3, [r3, #4]
 801a3e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a3e6:	8952      	ldrh	r2, [r2, #10]
 801a3e8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a3ea:	68ba      	ldr	r2, [r7, #8]
 801a3ec:	429a      	cmp	r2, r3
 801a3ee:	d10d      	bne.n	801a40c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a3f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d006      	beq.n	801a406 <tcp_write+0x276>
 801a3f8:	4b1c      	ldr	r3, [pc, #112]	; (801a46c <tcp_write+0x2dc>)
 801a3fa:	f240 2231 	movw	r2, #561	; 0x231
 801a3fe:	4922      	ldr	r1, [pc, #136]	; (801a488 <tcp_write+0x2f8>)
 801a400:	481c      	ldr	r0, [pc, #112]	; (801a474 <tcp_write+0x2e4>)
 801a402:	f00a fa05 	bl	8024810 <iprintf>
          extendlen = seglen;
 801a406:	8bfb      	ldrh	r3, [r7, #30]
 801a408:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801a40a:	e01a      	b.n	801a442 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a40c:	8bfb      	ldrh	r3, [r7, #30]
 801a40e:	2201      	movs	r2, #1
 801a410:	4619      	mov	r1, r3
 801a412:	2000      	movs	r0, #0
 801a414:	f7fa fe18 	bl	8015048 <pbuf_alloc>
 801a418:	6578      	str	r0, [r7, #84]	; 0x54
 801a41a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	f000 81e0 	beq.w	801a7e2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a422:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a426:	68ba      	ldr	r2, [r7, #8]
 801a428:	441a      	add	r2, r3
 801a42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a42c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a42e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a430:	f7fb f97c 	bl	801572c <pbuf_clen>
 801a434:	4603      	mov	r3, r0
 801a436:	461a      	mov	r2, r3
 801a438:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a43c:	4413      	add	r3, r2
 801a43e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a442:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a446:	8bfb      	ldrh	r3, [r7, #30]
 801a448:	4413      	add	r3, r2
 801a44a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801a44e:	e0dc      	b.n	801a60a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801a456:	2b00      	cmp	r3, #0
 801a458:	f000 80d7 	beq.w	801a60a <tcp_write+0x47a>
 801a45c:	4b03      	ldr	r3, [pc, #12]	; (801a46c <tcp_write+0x2dc>)
 801a45e:	f240 224a 	movw	r2, #586	; 0x24a
 801a462:	490a      	ldr	r1, [pc, #40]	; (801a48c <tcp_write+0x2fc>)
 801a464:	4803      	ldr	r0, [pc, #12]	; (801a474 <tcp_write+0x2e4>)
 801a466:	f00a f9d3 	bl	8024810 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a46a:	e0ce      	b.n	801a60a <tcp_write+0x47a>
 801a46c:	0802b894 	.word	0x0802b894
 801a470:	0802ba34 	.word	0x0802ba34
 801a474:	0802b8e8 	.word	0x0802b8e8
 801a478:	0802ba4c 	.word	0x0802ba4c
 801a47c:	0802ba80 	.word	0x0802ba80
 801a480:	0802ba98 	.word	0x0802ba98
 801a484:	0802bab8 	.word	0x0802bab8
 801a488:	0802bad8 	.word	0x0802bad8
 801a48c:	0802bb04 	.word	0x0802bb04
    struct pbuf *p;
    u16_t left = len - pos;
 801a490:	88fa      	ldrh	r2, [r7, #6]
 801a492:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a496:	1ad3      	subs	r3, r2, r3
 801a498:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801a49a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a4a2:	1ad3      	subs	r3, r2, r3
 801a4a4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a4a6:	8b7a      	ldrh	r2, [r7, #26]
 801a4a8:	8bbb      	ldrh	r3, [r7, #28]
 801a4aa:	4293      	cmp	r3, r2
 801a4ac:	bf28      	it	cs
 801a4ae:	4613      	movcs	r3, r2
 801a4b0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a4b2:	797b      	ldrb	r3, [r7, #5]
 801a4b4:	f003 0301 	and.w	r3, r3, #1
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d036      	beq.n	801a52a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a4bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a4c0:	b29a      	uxth	r2, r3
 801a4c2:	8b3b      	ldrh	r3, [r7, #24]
 801a4c4:	4413      	add	r3, r2
 801a4c6:	b299      	uxth	r1, r3
 801a4c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	bf0c      	ite	eq
 801a4ce:	2301      	moveq	r3, #1
 801a4d0:	2300      	movne	r3, #0
 801a4d2:	b2db      	uxtb	r3, r3
 801a4d4:	f107 0012 	add.w	r0, r7, #18
 801a4d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a4da:	9302      	str	r3, [sp, #8]
 801a4dc:	797b      	ldrb	r3, [r7, #5]
 801a4de:	9301      	str	r3, [sp, #4]
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	9300      	str	r3, [sp, #0]
 801a4e4:	4603      	mov	r3, r0
 801a4e6:	2036      	movs	r0, #54	; 0x36
 801a4e8:	f7ff fd5e 	bl	8019fa8 <tcp_pbuf_prealloc>
 801a4ec:	6338      	str	r0, [r7, #48]	; 0x30
 801a4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	f000 8178 	beq.w	801a7e6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4f8:	895b      	ldrh	r3, [r3, #10]
 801a4fa:	8b3a      	ldrh	r2, [r7, #24]
 801a4fc:	429a      	cmp	r2, r3
 801a4fe:	d906      	bls.n	801a50e <tcp_write+0x37e>
 801a500:	4b8c      	ldr	r3, [pc, #560]	; (801a734 <tcp_write+0x5a4>)
 801a502:	f240 2266 	movw	r2, #614	; 0x266
 801a506:	498c      	ldr	r1, [pc, #560]	; (801a738 <tcp_write+0x5a8>)
 801a508:	488c      	ldr	r0, [pc, #560]	; (801a73c <tcp_write+0x5ac>)
 801a50a:	f00a f981 	bl	8024810 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a510:	685a      	ldr	r2, [r3, #4]
 801a512:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a516:	18d0      	adds	r0, r2, r3
 801a518:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a51c:	68ba      	ldr	r2, [r7, #8]
 801a51e:	4413      	add	r3, r2
 801a520:	8b3a      	ldrh	r2, [r7, #24]
 801a522:	4619      	mov	r1, r3
 801a524:	f009 fa35 	bl	8023992 <memcpy>
 801a528:	e02f      	b.n	801a58a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a52a:	8a7b      	ldrh	r3, [r7, #18]
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d006      	beq.n	801a53e <tcp_write+0x3ae>
 801a530:	4b80      	ldr	r3, [pc, #512]	; (801a734 <tcp_write+0x5a4>)
 801a532:	f240 2271 	movw	r2, #625	; 0x271
 801a536:	4982      	ldr	r1, [pc, #520]	; (801a740 <tcp_write+0x5b0>)
 801a538:	4880      	ldr	r0, [pc, #512]	; (801a73c <tcp_write+0x5ac>)
 801a53a:	f00a f969 	bl	8024810 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a53e:	8b3b      	ldrh	r3, [r7, #24]
 801a540:	2201      	movs	r2, #1
 801a542:	4619      	mov	r1, r3
 801a544:	2036      	movs	r0, #54	; 0x36
 801a546:	f7fa fd7f 	bl	8015048 <pbuf_alloc>
 801a54a:	6178      	str	r0, [r7, #20]
 801a54c:	697b      	ldr	r3, [r7, #20]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	f000 814b 	beq.w	801a7ea <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a554:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a558:	68ba      	ldr	r2, [r7, #8]
 801a55a:	441a      	add	r2, r3
 801a55c:	697b      	ldr	r3, [r7, #20]
 801a55e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a560:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a564:	b29b      	uxth	r3, r3
 801a566:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a56a:	4619      	mov	r1, r3
 801a56c:	2036      	movs	r0, #54	; 0x36
 801a56e:	f7fa fd6b 	bl	8015048 <pbuf_alloc>
 801a572:	6338      	str	r0, [r7, #48]	; 0x30
 801a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a576:	2b00      	cmp	r3, #0
 801a578:	d103      	bne.n	801a582 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a57a:	6978      	ldr	r0, [r7, #20]
 801a57c:	f7fb f848 	bl	8015610 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a580:	e136      	b.n	801a7f0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a582:	6979      	ldr	r1, [r7, #20]
 801a584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a586:	f7fb f911 	bl	80157ac <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a58a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a58c:	f7fb f8ce 	bl	801572c <pbuf_clen>
 801a590:	4603      	mov	r3, r0
 801a592:	461a      	mov	r2, r3
 801a594:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a598:	4413      	add	r3, r2
 801a59a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a59e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a5a2:	2b09      	cmp	r3, #9
 801a5a4:	d903      	bls.n	801a5ae <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a5a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5a8:	f7fb f832 	bl	8015610 <pbuf_free>
      goto memerr;
 801a5ac:	e120      	b.n	801a7f0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a5b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a5b6:	441a      	add	r2, r3
 801a5b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5bc:	9300      	str	r3, [sp, #0]
 801a5be:	4613      	mov	r3, r2
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a5c4:	68f8      	ldr	r0, [r7, #12]
 801a5c6:	f7ff fc51 	bl	8019e6c <tcp_create_segment>
 801a5ca:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	f000 810d 	beq.w	801a7ee <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a5d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d102      	bne.n	801a5e0 <tcp_write+0x450>
      queue = seg;
 801a5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5dc:	647b      	str	r3, [r7, #68]	; 0x44
 801a5de:	e00c      	b.n	801a5fa <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a5e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d106      	bne.n	801a5f4 <tcp_write+0x464>
 801a5e6:	4b53      	ldr	r3, [pc, #332]	; (801a734 <tcp_write+0x5a4>)
 801a5e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a5ec:	4955      	ldr	r1, [pc, #340]	; (801a744 <tcp_write+0x5b4>)
 801a5ee:	4853      	ldr	r0, [pc, #332]	; (801a73c <tcp_write+0x5ac>)
 801a5f0:	f00a f90e 	bl	8024810 <iprintf>
      prev_seg->next = seg;
 801a5f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a5f8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801a5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5fc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801a5fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a602:	8b3b      	ldrh	r3, [r7, #24]
 801a604:	4413      	add	r3, r2
 801a606:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801a60a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a60e:	88fb      	ldrh	r3, [r7, #6]
 801a610:	429a      	cmp	r2, r3
 801a612:	f4ff af3d 	bcc.w	801a490 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801a616:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d02c      	beq.n	801a676 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801a61c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a61e:	685b      	ldr	r3, [r3, #4]
 801a620:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a622:	e01e      	b.n	801a662 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a626:	891a      	ldrh	r2, [r3, #8]
 801a628:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a62a:	4413      	add	r3, r2
 801a62c:	b29a      	uxth	r2, r3
 801a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a630:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d110      	bne.n	801a65c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a63c:	685b      	ldr	r3, [r3, #4]
 801a63e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a640:	8952      	ldrh	r2, [r2, #10]
 801a642:	4413      	add	r3, r2
 801a644:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a646:	68b9      	ldr	r1, [r7, #8]
 801a648:	4618      	mov	r0, r3
 801a64a:	f009 f9a2 	bl	8023992 <memcpy>
        p->len += oversize_used;
 801a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a650:	895a      	ldrh	r2, [r3, #10]
 801a652:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a654:	4413      	add	r3, r2
 801a656:	b29a      	uxth	r2, r3
 801a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a65a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a664:	2b00      	cmp	r3, #0
 801a666:	d1dd      	bne.n	801a624 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801a668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a66a:	891a      	ldrh	r2, [r3, #8]
 801a66c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a66e:	4413      	add	r3, r2
 801a670:	b29a      	uxth	r2, r3
 801a672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a674:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a676:	8a7a      	ldrh	r2, [r7, #18]
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a680:	2b00      	cmp	r3, #0
 801a682:	d018      	beq.n	801a6b6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a686:	2b00      	cmp	r3, #0
 801a688:	d106      	bne.n	801a698 <tcp_write+0x508>
 801a68a:	4b2a      	ldr	r3, [pc, #168]	; (801a734 <tcp_write+0x5a4>)
 801a68c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801a690:	492d      	ldr	r1, [pc, #180]	; (801a748 <tcp_write+0x5b8>)
 801a692:	482a      	ldr	r0, [pc, #168]	; (801a73c <tcp_write+0x5ac>)
 801a694:	f00a f8bc 	bl	8024810 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a69a:	685b      	ldr	r3, [r3, #4]
 801a69c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f7fb f884 	bl	80157ac <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6a6:	891a      	ldrh	r2, [r3, #8]
 801a6a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a6aa:	891b      	ldrh	r3, [r3, #8]
 801a6ac:	4413      	add	r3, r2
 801a6ae:	b29a      	uxth	r2, r3
 801a6b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6b2:	811a      	strh	r2, [r3, #8]
 801a6b4:	e037      	b.n	801a726 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801a6b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d034      	beq.n	801a726 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a6bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d003      	beq.n	801a6ca <tcp_write+0x53a>
 801a6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6c4:	685b      	ldr	r3, [r3, #4]
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d106      	bne.n	801a6d8 <tcp_write+0x548>
 801a6ca:	4b1a      	ldr	r3, [pc, #104]	; (801a734 <tcp_write+0x5a4>)
 801a6cc:	f240 22e6 	movw	r2, #742	; 0x2e6
 801a6d0:	491e      	ldr	r1, [pc, #120]	; (801a74c <tcp_write+0x5bc>)
 801a6d2:	481a      	ldr	r0, [pc, #104]	; (801a73c <tcp_write+0x5ac>)
 801a6d4:	f00a f89c 	bl	8024810 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a6d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6da:	685b      	ldr	r3, [r3, #4]
 801a6dc:	62bb      	str	r3, [r7, #40]	; 0x28
 801a6de:	e009      	b.n	801a6f4 <tcp_write+0x564>
      p->tot_len += extendlen;
 801a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6e2:	891a      	ldrh	r2, [r3, #8]
 801a6e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a6e6:	4413      	add	r3, r2
 801a6e8:	b29a      	uxth	r2, r3
 801a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6ec:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	62bb      	str	r3, [r7, #40]	; 0x28
 801a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d1f1      	bne.n	801a6e0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6fe:	891a      	ldrh	r2, [r3, #8]
 801a700:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a702:	4413      	add	r3, r2
 801a704:	b29a      	uxth	r2, r3
 801a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a708:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a70c:	895a      	ldrh	r2, [r3, #10]
 801a70e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a710:	4413      	add	r3, r2
 801a712:	b29a      	uxth	r2, r3
 801a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a716:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a71a:	891a      	ldrh	r2, [r3, #8]
 801a71c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a71e:	4413      	add	r3, r2
 801a720:	b29a      	uxth	r2, r3
 801a722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a724:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d111      	bne.n	801a750 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801a72c:	68fb      	ldr	r3, [r7, #12]
 801a72e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a730:	66da      	str	r2, [r3, #108]	; 0x6c
 801a732:	e010      	b.n	801a756 <tcp_write+0x5c6>
 801a734:	0802b894 	.word	0x0802b894
 801a738:	0802bb34 	.word	0x0802bb34
 801a73c:	0802b8e8 	.word	0x0802b8e8
 801a740:	0802bb74 	.word	0x0802bb74
 801a744:	0802bb84 	.word	0x0802bb84
 801a748:	0802bb98 	.word	0x0802bb98
 801a74c:	0802bbd0 	.word	0x0802bbd0
  } else {
    last_unsent->next = queue;
 801a750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a754:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a75a:	88fb      	ldrh	r3, [r7, #6]
 801a75c:	441a      	add	r2, r3
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a768:	88fb      	ldrh	r3, [r7, #6]
 801a76a:	1ad3      	subs	r3, r2, r3
 801a76c:	b29a      	uxth	r2, r3
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a77a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a77e:	68fb      	ldr	r3, [r7, #12]
 801a780:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a784:	2b00      	cmp	r3, #0
 801a786:	d00e      	beq.n	801a7a6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d10a      	bne.n	801a7a6 <tcp_write+0x616>
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a794:	2b00      	cmp	r3, #0
 801a796:	d106      	bne.n	801a7a6 <tcp_write+0x616>
 801a798:	4b2c      	ldr	r3, [pc, #176]	; (801a84c <tcp_write+0x6bc>)
 801a79a:	f240 3212 	movw	r2, #786	; 0x312
 801a79e:	492c      	ldr	r1, [pc, #176]	; (801a850 <tcp_write+0x6c0>)
 801a7a0:	482c      	ldr	r0, [pc, #176]	; (801a854 <tcp_write+0x6c4>)
 801a7a2:	f00a f835 	bl	8024810 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d016      	beq.n	801a7da <tcp_write+0x64a>
 801a7ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7ae:	68db      	ldr	r3, [r3, #12]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d012      	beq.n	801a7da <tcp_write+0x64a>
 801a7b4:	797b      	ldrb	r3, [r7, #5]
 801a7b6:	f003 0302 	and.w	r3, r3, #2
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d10d      	bne.n	801a7da <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a7be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7c0:	68db      	ldr	r3, [r3, #12]
 801a7c2:	899b      	ldrh	r3, [r3, #12]
 801a7c4:	b29c      	uxth	r4, r3
 801a7c6:	2008      	movs	r0, #8
 801a7c8:	f7f9 fb30 	bl	8013e2c <lwip_htons>
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	461a      	mov	r2, r3
 801a7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7d2:	68db      	ldr	r3, [r3, #12]
 801a7d4:	4322      	orrs	r2, r4
 801a7d6:	b292      	uxth	r2, r2
 801a7d8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a7da:	2300      	movs	r3, #0
 801a7dc:	e031      	b.n	801a842 <tcp_write+0x6b2>
          goto memerr;
 801a7de:	bf00      	nop
 801a7e0:	e006      	b.n	801a7f0 <tcp_write+0x660>
            goto memerr;
 801a7e2:	bf00      	nop
 801a7e4:	e004      	b.n	801a7f0 <tcp_write+0x660>
        goto memerr;
 801a7e6:	bf00      	nop
 801a7e8:	e002      	b.n	801a7f0 <tcp_write+0x660>
        goto memerr;
 801a7ea:	bf00      	nop
 801a7ec:	e000      	b.n	801a7f0 <tcp_write+0x660>
      goto memerr;
 801a7ee:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	8b5b      	ldrh	r3, [r3, #26]
 801a7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a7f8:	b29a      	uxth	r2, r3
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801a7fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a800:	2b00      	cmp	r3, #0
 801a802:	d002      	beq.n	801a80a <tcp_write+0x67a>
    pbuf_free(concat_p);
 801a804:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801a806:	f7fa ff03 	bl	8015610 <pbuf_free>
  }
  if (queue != NULL) {
 801a80a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d002      	beq.n	801a816 <tcp_write+0x686>
    tcp_segs_free(queue);
 801a810:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a812:	f7fc fb6b 	bl	8016eec <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d00e      	beq.n	801a83e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a824:	2b00      	cmp	r3, #0
 801a826:	d10a      	bne.n	801a83e <tcp_write+0x6ae>
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d106      	bne.n	801a83e <tcp_write+0x6ae>
 801a830:	4b06      	ldr	r3, [pc, #24]	; (801a84c <tcp_write+0x6bc>)
 801a832:	f240 3227 	movw	r2, #807	; 0x327
 801a836:	4906      	ldr	r1, [pc, #24]	; (801a850 <tcp_write+0x6c0>)
 801a838:	4806      	ldr	r0, [pc, #24]	; (801a854 <tcp_write+0x6c4>)
 801a83a:	f009 ffe9 	bl	8024810 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a83e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a842:	4618      	mov	r0, r3
 801a844:	375c      	adds	r7, #92	; 0x5c
 801a846:	46bd      	mov	sp, r7
 801a848:	bd90      	pop	{r4, r7, pc}
 801a84a:	bf00      	nop
 801a84c:	0802b894 	.word	0x0802b894
 801a850:	0802bc08 	.word	0x0802bc08
 801a854:	0802b8e8 	.word	0x0802b8e8

0801a858 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a858:	b590      	push	{r4, r7, lr}
 801a85a:	b08b      	sub	sp, #44	; 0x2c
 801a85c:	af02      	add	r7, sp, #8
 801a85e:	6078      	str	r0, [r7, #4]
 801a860:	460b      	mov	r3, r1
 801a862:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a864:	2300      	movs	r3, #0
 801a866:	61fb      	str	r3, [r7, #28]
 801a868:	2300      	movs	r3, #0
 801a86a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a86c:	2300      	movs	r3, #0
 801a86e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d106      	bne.n	801a884 <tcp_split_unsent_seg+0x2c>
 801a876:	4b95      	ldr	r3, [pc, #596]	; (801aacc <tcp_split_unsent_seg+0x274>)
 801a878:	f240 324b 	movw	r2, #843	; 0x34b
 801a87c:	4994      	ldr	r1, [pc, #592]	; (801aad0 <tcp_split_unsent_seg+0x278>)
 801a87e:	4895      	ldr	r0, [pc, #596]	; (801aad4 <tcp_split_unsent_seg+0x27c>)
 801a880:	f009 ffc6 	bl	8024810 <iprintf>

  useg = pcb->unsent;
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a888:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a88a:	697b      	ldr	r3, [r7, #20]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d102      	bne.n	801a896 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a894:	e116      	b.n	801aac4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a896:	887b      	ldrh	r3, [r7, #2]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d109      	bne.n	801a8b0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a89c:	4b8b      	ldr	r3, [pc, #556]	; (801aacc <tcp_split_unsent_seg+0x274>)
 801a89e:	f240 3253 	movw	r2, #851	; 0x353
 801a8a2:	498d      	ldr	r1, [pc, #564]	; (801aad8 <tcp_split_unsent_seg+0x280>)
 801a8a4:	488b      	ldr	r0, [pc, #556]	; (801aad4 <tcp_split_unsent_seg+0x27c>)
 801a8a6:	f009 ffb3 	bl	8024810 <iprintf>
    return ERR_VAL;
 801a8aa:	f06f 0305 	mvn.w	r3, #5
 801a8ae:	e109      	b.n	801aac4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a8b0:	697b      	ldr	r3, [r7, #20]
 801a8b2:	891b      	ldrh	r3, [r3, #8]
 801a8b4:	887a      	ldrh	r2, [r7, #2]
 801a8b6:	429a      	cmp	r2, r3
 801a8b8:	d301      	bcc.n	801a8be <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a8ba:	2300      	movs	r3, #0
 801a8bc:	e102      	b.n	801aac4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a8c2:	887a      	ldrh	r2, [r7, #2]
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d906      	bls.n	801a8d6 <tcp_split_unsent_seg+0x7e>
 801a8c8:	4b80      	ldr	r3, [pc, #512]	; (801aacc <tcp_split_unsent_seg+0x274>)
 801a8ca:	f240 325b 	movw	r2, #859	; 0x35b
 801a8ce:	4983      	ldr	r1, [pc, #524]	; (801aadc <tcp_split_unsent_seg+0x284>)
 801a8d0:	4880      	ldr	r0, [pc, #512]	; (801aad4 <tcp_split_unsent_seg+0x27c>)
 801a8d2:	f009 ff9d 	bl	8024810 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a8d6:	697b      	ldr	r3, [r7, #20]
 801a8d8:	891b      	ldrh	r3, [r3, #8]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d106      	bne.n	801a8ec <tcp_split_unsent_seg+0x94>
 801a8de:	4b7b      	ldr	r3, [pc, #492]	; (801aacc <tcp_split_unsent_seg+0x274>)
 801a8e0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801a8e4:	497e      	ldr	r1, [pc, #504]	; (801aae0 <tcp_split_unsent_seg+0x288>)
 801a8e6:	487b      	ldr	r0, [pc, #492]	; (801aad4 <tcp_split_unsent_seg+0x27c>)
 801a8e8:	f009 ff92 	bl	8024810 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a8ec:	697b      	ldr	r3, [r7, #20]
 801a8ee:	7a9b      	ldrb	r3, [r3, #10]
 801a8f0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a8f2:	7bfb      	ldrb	r3, [r7, #15]
 801a8f4:	009b      	lsls	r3, r3, #2
 801a8f6:	b2db      	uxtb	r3, r3
 801a8f8:	f003 0304 	and.w	r3, r3, #4
 801a8fc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a8fe:	697b      	ldr	r3, [r7, #20]
 801a900:	891a      	ldrh	r2, [r3, #8]
 801a902:	887b      	ldrh	r3, [r7, #2]
 801a904:	1ad3      	subs	r3, r2, r3
 801a906:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a908:	7bbb      	ldrb	r3, [r7, #14]
 801a90a:	b29a      	uxth	r2, r3
 801a90c:	89bb      	ldrh	r3, [r7, #12]
 801a90e:	4413      	add	r3, r2
 801a910:	b29b      	uxth	r3, r3
 801a912:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a916:	4619      	mov	r1, r3
 801a918:	2036      	movs	r0, #54	; 0x36
 801a91a:	f7fa fb95 	bl	8015048 <pbuf_alloc>
 801a91e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	2b00      	cmp	r3, #0
 801a924:	f000 80b7 	beq.w	801aa96 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a928:	697b      	ldr	r3, [r7, #20]
 801a92a:	685b      	ldr	r3, [r3, #4]
 801a92c:	891a      	ldrh	r2, [r3, #8]
 801a92e:	697b      	ldr	r3, [r7, #20]
 801a930:	891b      	ldrh	r3, [r3, #8]
 801a932:	1ad3      	subs	r3, r2, r3
 801a934:	b29a      	uxth	r2, r3
 801a936:	887b      	ldrh	r3, [r7, #2]
 801a938:	4413      	add	r3, r2
 801a93a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a93c:	697b      	ldr	r3, [r7, #20]
 801a93e:	6858      	ldr	r0, [r3, #4]
 801a940:	693b      	ldr	r3, [r7, #16]
 801a942:	685a      	ldr	r2, [r3, #4]
 801a944:	7bbb      	ldrb	r3, [r7, #14]
 801a946:	18d1      	adds	r1, r2, r3
 801a948:	897b      	ldrh	r3, [r7, #10]
 801a94a:	89ba      	ldrh	r2, [r7, #12]
 801a94c:	f7fb f856 	bl	80159fc <pbuf_copy_partial>
 801a950:	4603      	mov	r3, r0
 801a952:	461a      	mov	r2, r3
 801a954:	89bb      	ldrh	r3, [r7, #12]
 801a956:	4293      	cmp	r3, r2
 801a958:	f040 809f 	bne.w	801aa9a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a95c:	697b      	ldr	r3, [r7, #20]
 801a95e:	68db      	ldr	r3, [r3, #12]
 801a960:	899b      	ldrh	r3, [r3, #12]
 801a962:	b29b      	uxth	r3, r3
 801a964:	4618      	mov	r0, r3
 801a966:	f7f9 fa61 	bl	8013e2c <lwip_htons>
 801a96a:	4603      	mov	r3, r0
 801a96c:	b2db      	uxtb	r3, r3
 801a96e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a972:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a974:	2300      	movs	r3, #0
 801a976:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a978:	7efb      	ldrb	r3, [r7, #27]
 801a97a:	f003 0308 	and.w	r3, r3, #8
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d007      	beq.n	801a992 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a982:	7efb      	ldrb	r3, [r7, #27]
 801a984:	f023 0308 	bic.w	r3, r3, #8
 801a988:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a98a:	7ebb      	ldrb	r3, [r7, #26]
 801a98c:	f043 0308 	orr.w	r3, r3, #8
 801a990:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a992:	7efb      	ldrb	r3, [r7, #27]
 801a994:	f003 0301 	and.w	r3, r3, #1
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d007      	beq.n	801a9ac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a99c:	7efb      	ldrb	r3, [r7, #27]
 801a99e:	f023 0301 	bic.w	r3, r3, #1
 801a9a2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a9a4:	7ebb      	ldrb	r3, [r7, #26]
 801a9a6:	f043 0301 	orr.w	r3, r3, #1
 801a9aa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a9ac:	697b      	ldr	r3, [r7, #20]
 801a9ae:	68db      	ldr	r3, [r3, #12]
 801a9b0:	685b      	ldr	r3, [r3, #4]
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f7f9 fa4f 	bl	8013e56 <lwip_htonl>
 801a9b8:	4602      	mov	r2, r0
 801a9ba:	887b      	ldrh	r3, [r7, #2]
 801a9bc:	18d1      	adds	r1, r2, r3
 801a9be:	7eba      	ldrb	r2, [r7, #26]
 801a9c0:	7bfb      	ldrb	r3, [r7, #15]
 801a9c2:	9300      	str	r3, [sp, #0]
 801a9c4:	460b      	mov	r3, r1
 801a9c6:	6939      	ldr	r1, [r7, #16]
 801a9c8:	6878      	ldr	r0, [r7, #4]
 801a9ca:	f7ff fa4f 	bl	8019e6c <tcp_create_segment>
 801a9ce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a9d0:	69fb      	ldr	r3, [r7, #28]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d063      	beq.n	801aa9e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a9d6:	697b      	ldr	r3, [r7, #20]
 801a9d8:	685b      	ldr	r3, [r3, #4]
 801a9da:	4618      	mov	r0, r3
 801a9dc:	f7fa fea6 	bl	801572c <pbuf_clen>
 801a9e0:	4603      	mov	r3, r0
 801a9e2:	461a      	mov	r2, r3
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a9ea:	1a9b      	subs	r3, r3, r2
 801a9ec:	b29a      	uxth	r2, r3
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a9f4:	697b      	ldr	r3, [r7, #20]
 801a9f6:	6858      	ldr	r0, [r3, #4]
 801a9f8:	697b      	ldr	r3, [r7, #20]
 801a9fa:	685b      	ldr	r3, [r3, #4]
 801a9fc:	891a      	ldrh	r2, [r3, #8]
 801a9fe:	89bb      	ldrh	r3, [r7, #12]
 801aa00:	1ad3      	subs	r3, r2, r3
 801aa02:	b29b      	uxth	r3, r3
 801aa04:	4619      	mov	r1, r3
 801aa06:	f7fa fc7d 	bl	8015304 <pbuf_realloc>
  useg->len -= remainder;
 801aa0a:	697b      	ldr	r3, [r7, #20]
 801aa0c:	891a      	ldrh	r2, [r3, #8]
 801aa0e:	89bb      	ldrh	r3, [r7, #12]
 801aa10:	1ad3      	subs	r3, r2, r3
 801aa12:	b29a      	uxth	r2, r3
 801aa14:	697b      	ldr	r3, [r7, #20]
 801aa16:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801aa18:	697b      	ldr	r3, [r7, #20]
 801aa1a:	68db      	ldr	r3, [r3, #12]
 801aa1c:	899b      	ldrh	r3, [r3, #12]
 801aa1e:	b29c      	uxth	r4, r3
 801aa20:	7efb      	ldrb	r3, [r7, #27]
 801aa22:	b29b      	uxth	r3, r3
 801aa24:	4618      	mov	r0, r3
 801aa26:	f7f9 fa01 	bl	8013e2c <lwip_htons>
 801aa2a:	4603      	mov	r3, r0
 801aa2c:	461a      	mov	r2, r3
 801aa2e:	697b      	ldr	r3, [r7, #20]
 801aa30:	68db      	ldr	r3, [r3, #12]
 801aa32:	4322      	orrs	r2, r4
 801aa34:	b292      	uxth	r2, r2
 801aa36:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801aa38:	697b      	ldr	r3, [r7, #20]
 801aa3a:	685b      	ldr	r3, [r3, #4]
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	f7fa fe75 	bl	801572c <pbuf_clen>
 801aa42:	4603      	mov	r3, r0
 801aa44:	461a      	mov	r2, r3
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa4c:	4413      	add	r3, r2
 801aa4e:	b29a      	uxth	r2, r3
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aa56:	69fb      	ldr	r3, [r7, #28]
 801aa58:	685b      	ldr	r3, [r3, #4]
 801aa5a:	4618      	mov	r0, r3
 801aa5c:	f7fa fe66 	bl	801572c <pbuf_clen>
 801aa60:	4603      	mov	r3, r0
 801aa62:	461a      	mov	r2, r3
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa6a:	4413      	add	r3, r2
 801aa6c:	b29a      	uxth	r2, r3
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801aa74:	697b      	ldr	r3, [r7, #20]
 801aa76:	681a      	ldr	r2, [r3, #0]
 801aa78:	69fb      	ldr	r3, [r7, #28]
 801aa7a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801aa7c:	697b      	ldr	r3, [r7, #20]
 801aa7e:	69fa      	ldr	r2, [r7, #28]
 801aa80:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801aa82:	69fb      	ldr	r3, [r7, #28]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d103      	bne.n	801aa92 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	2200      	movs	r2, #0
 801aa8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801aa92:	2300      	movs	r3, #0
 801aa94:	e016      	b.n	801aac4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801aa96:	bf00      	nop
 801aa98:	e002      	b.n	801aaa0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801aa9a:	bf00      	nop
 801aa9c:	e000      	b.n	801aaa0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801aa9e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801aaa0:	69fb      	ldr	r3, [r7, #28]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d006      	beq.n	801aab4 <tcp_split_unsent_seg+0x25c>
 801aaa6:	4b09      	ldr	r3, [pc, #36]	; (801aacc <tcp_split_unsent_seg+0x274>)
 801aaa8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801aaac:	490d      	ldr	r1, [pc, #52]	; (801aae4 <tcp_split_unsent_seg+0x28c>)
 801aaae:	4809      	ldr	r0, [pc, #36]	; (801aad4 <tcp_split_unsent_seg+0x27c>)
 801aab0:	f009 feae 	bl	8024810 <iprintf>
  if (p != NULL) {
 801aab4:	693b      	ldr	r3, [r7, #16]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d002      	beq.n	801aac0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801aaba:	6938      	ldr	r0, [r7, #16]
 801aabc:	f7fa fda8 	bl	8015610 <pbuf_free>
  }

  return ERR_MEM;
 801aac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801aac4:	4618      	mov	r0, r3
 801aac6:	3724      	adds	r7, #36	; 0x24
 801aac8:	46bd      	mov	sp, r7
 801aaca:	bd90      	pop	{r4, r7, pc}
 801aacc:	0802b894 	.word	0x0802b894
 801aad0:	0802bc28 	.word	0x0802bc28
 801aad4:	0802b8e8 	.word	0x0802b8e8
 801aad8:	0802bc4c 	.word	0x0802bc4c
 801aadc:	0802bc70 	.word	0x0802bc70
 801aae0:	0802bc80 	.word	0x0802bc80
 801aae4:	0802bc90 	.word	0x0802bc90

0801aae8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801aae8:	b590      	push	{r4, r7, lr}
 801aaea:	b085      	sub	sp, #20
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d106      	bne.n	801ab04 <tcp_send_fin+0x1c>
 801aaf6:	4b21      	ldr	r3, [pc, #132]	; (801ab7c <tcp_send_fin+0x94>)
 801aaf8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801aafc:	4920      	ldr	r1, [pc, #128]	; (801ab80 <tcp_send_fin+0x98>)
 801aafe:	4821      	ldr	r0, [pc, #132]	; (801ab84 <tcp_send_fin+0x9c>)
 801ab00:	f009 fe86 	bl	8024810 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d02e      	beq.n	801ab6a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab10:	60fb      	str	r3, [r7, #12]
 801ab12:	e002      	b.n	801ab1a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d1f8      	bne.n	801ab14 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	68db      	ldr	r3, [r3, #12]
 801ab26:	899b      	ldrh	r3, [r3, #12]
 801ab28:	b29b      	uxth	r3, r3
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	f7f9 f97e 	bl	8013e2c <lwip_htons>
 801ab30:	4603      	mov	r3, r0
 801ab32:	b2db      	uxtb	r3, r3
 801ab34:	f003 0307 	and.w	r3, r3, #7
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d116      	bne.n	801ab6a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	68db      	ldr	r3, [r3, #12]
 801ab40:	899b      	ldrh	r3, [r3, #12]
 801ab42:	b29c      	uxth	r4, r3
 801ab44:	2001      	movs	r0, #1
 801ab46:	f7f9 f971 	bl	8013e2c <lwip_htons>
 801ab4a:	4603      	mov	r3, r0
 801ab4c:	461a      	mov	r2, r3
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	68db      	ldr	r3, [r3, #12]
 801ab52:	4322      	orrs	r2, r4
 801ab54:	b292      	uxth	r2, r2
 801ab56:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	8b5b      	ldrh	r3, [r3, #26]
 801ab5c:	f043 0320 	orr.w	r3, r3, #32
 801ab60:	b29a      	uxth	r2, r3
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801ab66:	2300      	movs	r3, #0
 801ab68:	e004      	b.n	801ab74 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ab6a:	2101      	movs	r1, #1
 801ab6c:	6878      	ldr	r0, [r7, #4]
 801ab6e:	f000 f80b 	bl	801ab88 <tcp_enqueue_flags>
 801ab72:	4603      	mov	r3, r0
}
 801ab74:	4618      	mov	r0, r3
 801ab76:	3714      	adds	r7, #20
 801ab78:	46bd      	mov	sp, r7
 801ab7a:	bd90      	pop	{r4, r7, pc}
 801ab7c:	0802b894 	.word	0x0802b894
 801ab80:	0802bc9c 	.word	0x0802bc9c
 801ab84:	0802b8e8 	.word	0x0802b8e8

0801ab88 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801ab88:	b580      	push	{r7, lr}
 801ab8a:	b08a      	sub	sp, #40	; 0x28
 801ab8c:	af02      	add	r7, sp, #8
 801ab8e:	6078      	str	r0, [r7, #4]
 801ab90:	460b      	mov	r3, r1
 801ab92:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801ab94:	2300      	movs	r3, #0
 801ab96:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801ab98:	2300      	movs	r3, #0
 801ab9a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ab9c:	78fb      	ldrb	r3, [r7, #3]
 801ab9e:	f003 0303 	and.w	r3, r3, #3
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d106      	bne.n	801abb4 <tcp_enqueue_flags+0x2c>
 801aba6:	4b67      	ldr	r3, [pc, #412]	; (801ad44 <tcp_enqueue_flags+0x1bc>)
 801aba8:	f240 4211 	movw	r2, #1041	; 0x411
 801abac:	4966      	ldr	r1, [pc, #408]	; (801ad48 <tcp_enqueue_flags+0x1c0>)
 801abae:	4867      	ldr	r0, [pc, #412]	; (801ad4c <tcp_enqueue_flags+0x1c4>)
 801abb0:	f009 fe2e 	bl	8024810 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d106      	bne.n	801abc8 <tcp_enqueue_flags+0x40>
 801abba:	4b62      	ldr	r3, [pc, #392]	; (801ad44 <tcp_enqueue_flags+0x1bc>)
 801abbc:	f240 4213 	movw	r2, #1043	; 0x413
 801abc0:	4963      	ldr	r1, [pc, #396]	; (801ad50 <tcp_enqueue_flags+0x1c8>)
 801abc2:	4862      	ldr	r0, [pc, #392]	; (801ad4c <tcp_enqueue_flags+0x1c4>)
 801abc4:	f009 fe24 	bl	8024810 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801abc8:	78fb      	ldrb	r3, [r7, #3]
 801abca:	f003 0302 	and.w	r3, r3, #2
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d001      	beq.n	801abd6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801abd2:	2301      	movs	r3, #1
 801abd4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801abd6:	7ffb      	ldrb	r3, [r7, #31]
 801abd8:	009b      	lsls	r3, r3, #2
 801abda:	b2db      	uxtb	r3, r3
 801abdc:	f003 0304 	and.w	r3, r3, #4
 801abe0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801abe2:	7dfb      	ldrb	r3, [r7, #23]
 801abe4:	b29b      	uxth	r3, r3
 801abe6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801abea:	4619      	mov	r1, r3
 801abec:	2036      	movs	r0, #54	; 0x36
 801abee:	f7fa fa2b 	bl	8015048 <pbuf_alloc>
 801abf2:	6138      	str	r0, [r7, #16]
 801abf4:	693b      	ldr	r3, [r7, #16]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d109      	bne.n	801ac0e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	8b5b      	ldrh	r3, [r3, #26]
 801abfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac02:	b29a      	uxth	r2, r3
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ac08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac0c:	e095      	b.n	801ad3a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ac0e:	693b      	ldr	r3, [r7, #16]
 801ac10:	895a      	ldrh	r2, [r3, #10]
 801ac12:	7dfb      	ldrb	r3, [r7, #23]
 801ac14:	b29b      	uxth	r3, r3
 801ac16:	429a      	cmp	r2, r3
 801ac18:	d206      	bcs.n	801ac28 <tcp_enqueue_flags+0xa0>
 801ac1a:	4b4a      	ldr	r3, [pc, #296]	; (801ad44 <tcp_enqueue_flags+0x1bc>)
 801ac1c:	f240 4239 	movw	r2, #1081	; 0x439
 801ac20:	494c      	ldr	r1, [pc, #304]	; (801ad54 <tcp_enqueue_flags+0x1cc>)
 801ac22:	484a      	ldr	r0, [pc, #296]	; (801ad4c <tcp_enqueue_flags+0x1c4>)
 801ac24:	f009 fdf4 	bl	8024810 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ac2c:	78fa      	ldrb	r2, [r7, #3]
 801ac2e:	7ffb      	ldrb	r3, [r7, #31]
 801ac30:	9300      	str	r3, [sp, #0]
 801ac32:	460b      	mov	r3, r1
 801ac34:	6939      	ldr	r1, [r7, #16]
 801ac36:	6878      	ldr	r0, [r7, #4]
 801ac38:	f7ff f918 	bl	8019e6c <tcp_create_segment>
 801ac3c:	60f8      	str	r0, [r7, #12]
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d109      	bne.n	801ac58 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	8b5b      	ldrh	r3, [r3, #26]
 801ac48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac4c:	b29a      	uxth	r2, r3
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ac52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac56:	e070      	b.n	801ad3a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	68db      	ldr	r3, [r3, #12]
 801ac5c:	f003 0303 	and.w	r3, r3, #3
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d006      	beq.n	801ac72 <tcp_enqueue_flags+0xea>
 801ac64:	4b37      	ldr	r3, [pc, #220]	; (801ad44 <tcp_enqueue_flags+0x1bc>)
 801ac66:	f240 4242 	movw	r2, #1090	; 0x442
 801ac6a:	493b      	ldr	r1, [pc, #236]	; (801ad58 <tcp_enqueue_flags+0x1d0>)
 801ac6c:	4837      	ldr	r0, [pc, #220]	; (801ad4c <tcp_enqueue_flags+0x1c4>)
 801ac6e:	f009 fdcf 	bl	8024810 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	891b      	ldrh	r3, [r3, #8]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d006      	beq.n	801ac88 <tcp_enqueue_flags+0x100>
 801ac7a:	4b32      	ldr	r3, [pc, #200]	; (801ad44 <tcp_enqueue_flags+0x1bc>)
 801ac7c:	f240 4243 	movw	r2, #1091	; 0x443
 801ac80:	4936      	ldr	r1, [pc, #216]	; (801ad5c <tcp_enqueue_flags+0x1d4>)
 801ac82:	4832      	ldr	r0, [pc, #200]	; (801ad4c <tcp_enqueue_flags+0x1c4>)
 801ac84:	f009 fdc4 	bl	8024810 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d103      	bne.n	801ac98 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	68fa      	ldr	r2, [r7, #12]
 801ac94:	66da      	str	r2, [r3, #108]	; 0x6c
 801ac96:	e00d      	b.n	801acb4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac9c:	61bb      	str	r3, [r7, #24]
 801ac9e:	e002      	b.n	801aca6 <tcp_enqueue_flags+0x11e>
 801aca0:	69bb      	ldr	r3, [r7, #24]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	61bb      	str	r3, [r7, #24]
 801aca6:	69bb      	ldr	r3, [r7, #24]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d1f8      	bne.n	801aca0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801acae:	69bb      	ldr	r3, [r7, #24]
 801acb0:	68fa      	ldr	r2, [r7, #12]
 801acb2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	2200      	movs	r2, #0
 801acb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801acbc:	78fb      	ldrb	r3, [r7, #3]
 801acbe:	f003 0302 	and.w	r3, r3, #2
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d104      	bne.n	801acd0 <tcp_enqueue_flags+0x148>
 801acc6:	78fb      	ldrb	r3, [r7, #3]
 801acc8:	f003 0301 	and.w	r3, r3, #1
 801accc:	2b00      	cmp	r3, #0
 801acce:	d004      	beq.n	801acda <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801acd4:	1c5a      	adds	r2, r3, #1
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801acda:	78fb      	ldrb	r3, [r7, #3]
 801acdc:	f003 0301 	and.w	r3, r3, #1
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d006      	beq.n	801acf2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	8b5b      	ldrh	r3, [r3, #26]
 801ace8:	f043 0320 	orr.w	r3, r3, #32
 801acec:	b29a      	uxth	r2, r3
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	685b      	ldr	r3, [r3, #4]
 801acf6:	4618      	mov	r0, r3
 801acf8:	f7fa fd18 	bl	801572c <pbuf_clen>
 801acfc:	4603      	mov	r3, r0
 801acfe:	461a      	mov	r2, r3
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ad06:	4413      	add	r3, r2
 801ad08:	b29a      	uxth	r2, r3
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d00e      	beq.n	801ad38 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d10a      	bne.n	801ad38 <tcp_enqueue_flags+0x1b0>
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d106      	bne.n	801ad38 <tcp_enqueue_flags+0x1b0>
 801ad2a:	4b06      	ldr	r3, [pc, #24]	; (801ad44 <tcp_enqueue_flags+0x1bc>)
 801ad2c:	f240 4265 	movw	r2, #1125	; 0x465
 801ad30:	490b      	ldr	r1, [pc, #44]	; (801ad60 <tcp_enqueue_flags+0x1d8>)
 801ad32:	4806      	ldr	r0, [pc, #24]	; (801ad4c <tcp_enqueue_flags+0x1c4>)
 801ad34:	f009 fd6c 	bl	8024810 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801ad38:	2300      	movs	r3, #0
}
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	3720      	adds	r7, #32
 801ad3e:	46bd      	mov	sp, r7
 801ad40:	bd80      	pop	{r7, pc}
 801ad42:	bf00      	nop
 801ad44:	0802b894 	.word	0x0802b894
 801ad48:	0802bcb8 	.word	0x0802bcb8
 801ad4c:	0802b8e8 	.word	0x0802b8e8
 801ad50:	0802bd10 	.word	0x0802bd10
 801ad54:	0802bd30 	.word	0x0802bd30
 801ad58:	0802bd6c 	.word	0x0802bd6c
 801ad5c:	0802bd84 	.word	0x0802bd84
 801ad60:	0802bdb0 	.word	0x0802bdb0

0801ad64 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801ad64:	b5b0      	push	{r4, r5, r7, lr}
 801ad66:	b08a      	sub	sp, #40	; 0x28
 801ad68:	af00      	add	r7, sp, #0
 801ad6a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d106      	bne.n	801ad80 <tcp_output+0x1c>
 801ad72:	4b8a      	ldr	r3, [pc, #552]	; (801af9c <tcp_output+0x238>)
 801ad74:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801ad78:	4989      	ldr	r1, [pc, #548]	; (801afa0 <tcp_output+0x23c>)
 801ad7a:	488a      	ldr	r0, [pc, #552]	; (801afa4 <tcp_output+0x240>)
 801ad7c:	f009 fd48 	bl	8024810 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	7d1b      	ldrb	r3, [r3, #20]
 801ad84:	2b01      	cmp	r3, #1
 801ad86:	d106      	bne.n	801ad96 <tcp_output+0x32>
 801ad88:	4b84      	ldr	r3, [pc, #528]	; (801af9c <tcp_output+0x238>)
 801ad8a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801ad8e:	4986      	ldr	r1, [pc, #536]	; (801afa8 <tcp_output+0x244>)
 801ad90:	4884      	ldr	r0, [pc, #528]	; (801afa4 <tcp_output+0x240>)
 801ad92:	f009 fd3d 	bl	8024810 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801ad96:	4b85      	ldr	r3, [pc, #532]	; (801afac <tcp_output+0x248>)
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	687a      	ldr	r2, [r7, #4]
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	d101      	bne.n	801ada4 <tcp_output+0x40>
    return ERR_OK;
 801ada0:	2300      	movs	r3, #0
 801ada2:	e1ce      	b.n	801b142 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801adb0:	4293      	cmp	r3, r2
 801adb2:	bf28      	it	cs
 801adb4:	4613      	movcs	r3, r2
 801adb6:	b29b      	uxth	r3, r3
 801adb8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801adbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d10b      	bne.n	801adde <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	8b5b      	ldrh	r3, [r3, #26]
 801adca:	f003 0302 	and.w	r3, r3, #2
 801adce:	2b00      	cmp	r3, #0
 801add0:	f000 81aa 	beq.w	801b128 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801add4:	6878      	ldr	r0, [r7, #4]
 801add6:	f000 fdcb 	bl	801b970 <tcp_send_empty_ack>
 801adda:	4603      	mov	r3, r0
 801addc:	e1b1      	b.n	801b142 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801adde:	6879      	ldr	r1, [r7, #4]
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	3304      	adds	r3, #4
 801ade4:	461a      	mov	r2, r3
 801ade6:	6878      	ldr	r0, [r7, #4]
 801ade8:	f7ff f824 	bl	8019e34 <tcp_route>
 801adec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801adee:	697b      	ldr	r3, [r7, #20]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d102      	bne.n	801adfa <tcp_output+0x96>
    return ERR_RTE;
 801adf4:	f06f 0303 	mvn.w	r3, #3
 801adf8:	e1a3      	b.n	801b142 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d003      	beq.n	801ae08 <tcp_output+0xa4>
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d111      	bne.n	801ae2c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801ae08:	697b      	ldr	r3, [r7, #20]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d002      	beq.n	801ae14 <tcp_output+0xb0>
 801ae0e:	697b      	ldr	r3, [r7, #20]
 801ae10:	3304      	adds	r3, #4
 801ae12:	e000      	b.n	801ae16 <tcp_output+0xb2>
 801ae14:	2300      	movs	r3, #0
 801ae16:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801ae18:	693b      	ldr	r3, [r7, #16]
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d102      	bne.n	801ae24 <tcp_output+0xc0>
      return ERR_RTE;
 801ae1e:	f06f 0303 	mvn.w	r3, #3
 801ae22:	e18e      	b.n	801b142 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ae24:	693b      	ldr	r3, [r7, #16]
 801ae26:	681a      	ldr	r2, [r3, #0]
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae2e:	68db      	ldr	r3, [r3, #12]
 801ae30:	685b      	ldr	r3, [r3, #4]
 801ae32:	4618      	mov	r0, r3
 801ae34:	f7f9 f80f 	bl	8013e56 <lwip_htonl>
 801ae38:	4602      	mov	r2, r0
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae3e:	1ad3      	subs	r3, r2, r3
 801ae40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ae42:	8912      	ldrh	r2, [r2, #8]
 801ae44:	4413      	add	r3, r2
 801ae46:	69ba      	ldr	r2, [r7, #24]
 801ae48:	429a      	cmp	r2, r3
 801ae4a:	d227      	bcs.n	801ae9c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ae52:	461a      	mov	r2, r3
 801ae54:	69bb      	ldr	r3, [r7, #24]
 801ae56:	4293      	cmp	r3, r2
 801ae58:	d114      	bne.n	801ae84 <tcp_output+0x120>
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d110      	bne.n	801ae84 <tcp_output+0x120>
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d10b      	bne.n	801ae84 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	2200      	movs	r2, #0
 801ae70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	2201      	movs	r2, #1
 801ae78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	2200      	movs	r2, #0
 801ae80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	8b5b      	ldrh	r3, [r3, #26]
 801ae88:	f003 0302 	and.w	r3, r3, #2
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	f000 814d 	beq.w	801b12c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801ae92:	6878      	ldr	r0, [r7, #4]
 801ae94:	f000 fd6c 	bl	801b970 <tcp_send_empty_ack>
 801ae98:	4603      	mov	r3, r0
 801ae9a:	e152      	b.n	801b142 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	2200      	movs	r2, #0
 801aea0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aea8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801aeaa:	6a3b      	ldr	r3, [r7, #32]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	f000 811c 	beq.w	801b0ea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801aeb2:	e002      	b.n	801aeba <tcp_output+0x156>
 801aeb4:	6a3b      	ldr	r3, [r7, #32]
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	623b      	str	r3, [r7, #32]
 801aeba:	6a3b      	ldr	r3, [r7, #32]
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d1f8      	bne.n	801aeb4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801aec2:	e112      	b.n	801b0ea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aec6:	68db      	ldr	r3, [r3, #12]
 801aec8:	899b      	ldrh	r3, [r3, #12]
 801aeca:	b29b      	uxth	r3, r3
 801aecc:	4618      	mov	r0, r3
 801aece:	f7f8 ffad 	bl	8013e2c <lwip_htons>
 801aed2:	4603      	mov	r3, r0
 801aed4:	b2db      	uxtb	r3, r3
 801aed6:	f003 0304 	and.w	r3, r3, #4
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d006      	beq.n	801aeec <tcp_output+0x188>
 801aede:	4b2f      	ldr	r3, [pc, #188]	; (801af9c <tcp_output+0x238>)
 801aee0:	f240 5236 	movw	r2, #1334	; 0x536
 801aee4:	4932      	ldr	r1, [pc, #200]	; (801afb0 <tcp_output+0x24c>)
 801aee6:	482f      	ldr	r0, [pc, #188]	; (801afa4 <tcp_output+0x240>)
 801aee8:	f009 fc92 	bl	8024810 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d01f      	beq.n	801af34 <tcp_output+0x1d0>
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	8b5b      	ldrh	r3, [r3, #26]
 801aef8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d119      	bne.n	801af34 <tcp_output+0x1d0>
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af04:	2b00      	cmp	r3, #0
 801af06:	d00b      	beq.n	801af20 <tcp_output+0x1bc>
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d110      	bne.n	801af34 <tcp_output+0x1d0>
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af16:	891a      	ldrh	r2, [r3, #8]
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801af1c:	429a      	cmp	r2, r3
 801af1e:	d209      	bcs.n	801af34 <tcp_output+0x1d0>
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801af26:	2b00      	cmp	r3, #0
 801af28:	d004      	beq.n	801af34 <tcp_output+0x1d0>
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801af30:	2b08      	cmp	r3, #8
 801af32:	d901      	bls.n	801af38 <tcp_output+0x1d4>
 801af34:	2301      	movs	r3, #1
 801af36:	e000      	b.n	801af3a <tcp_output+0x1d6>
 801af38:	2300      	movs	r3, #0
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d106      	bne.n	801af4c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	8b5b      	ldrh	r3, [r3, #26]
 801af42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801af46:	2b00      	cmp	r3, #0
 801af48:	f000 80e4 	beq.w	801b114 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	7d1b      	ldrb	r3, [r3, #20]
 801af50:	2b02      	cmp	r3, #2
 801af52:	d00d      	beq.n	801af70 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af56:	68db      	ldr	r3, [r3, #12]
 801af58:	899b      	ldrh	r3, [r3, #12]
 801af5a:	b29c      	uxth	r4, r3
 801af5c:	2010      	movs	r0, #16
 801af5e:	f7f8 ff65 	bl	8013e2c <lwip_htons>
 801af62:	4603      	mov	r3, r0
 801af64:	461a      	mov	r2, r3
 801af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af68:	68db      	ldr	r3, [r3, #12]
 801af6a:	4322      	orrs	r2, r4
 801af6c:	b292      	uxth	r2, r2
 801af6e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801af70:	697a      	ldr	r2, [r7, #20]
 801af72:	6879      	ldr	r1, [r7, #4]
 801af74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801af76:	f000 f909 	bl	801b18c <tcp_output_segment>
 801af7a:	4603      	mov	r3, r0
 801af7c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801af7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af82:	2b00      	cmp	r3, #0
 801af84:	d016      	beq.n	801afb4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	8b5b      	ldrh	r3, [r3, #26]
 801af8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801af8e:	b29a      	uxth	r2, r3
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	835a      	strh	r2, [r3, #26]
      return err;
 801af94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af98:	e0d3      	b.n	801b142 <tcp_output+0x3de>
 801af9a:	bf00      	nop
 801af9c:	0802b894 	.word	0x0802b894
 801afa0:	0802bdd8 	.word	0x0802bdd8
 801afa4:	0802b8e8 	.word	0x0802b8e8
 801afa8:	0802bdf0 	.word	0x0802bdf0
 801afac:	2001ad24 	.word	0x2001ad24
 801afb0:	0802be18 	.word	0x0802be18
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afb6:	681a      	ldr	r2, [r3, #0]
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	7d1b      	ldrb	r3, [r3, #20]
 801afc0:	2b02      	cmp	r3, #2
 801afc2:	d006      	beq.n	801afd2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	8b5b      	ldrh	r3, [r3, #26]
 801afc8:	f023 0303 	bic.w	r3, r3, #3
 801afcc:	b29a      	uxth	r2, r3
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afd4:	68db      	ldr	r3, [r3, #12]
 801afd6:	685b      	ldr	r3, [r3, #4]
 801afd8:	4618      	mov	r0, r3
 801afda:	f7f8 ff3c 	bl	8013e56 <lwip_htonl>
 801afde:	4604      	mov	r4, r0
 801afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afe2:	891b      	ldrh	r3, [r3, #8]
 801afe4:	461d      	mov	r5, r3
 801afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afe8:	68db      	ldr	r3, [r3, #12]
 801afea:	899b      	ldrh	r3, [r3, #12]
 801afec:	b29b      	uxth	r3, r3
 801afee:	4618      	mov	r0, r3
 801aff0:	f7f8 ff1c 	bl	8013e2c <lwip_htons>
 801aff4:	4603      	mov	r3, r0
 801aff6:	b2db      	uxtb	r3, r3
 801aff8:	f003 0303 	and.w	r3, r3, #3
 801affc:	2b00      	cmp	r3, #0
 801affe:	d001      	beq.n	801b004 <tcp_output+0x2a0>
 801b000:	2301      	movs	r3, #1
 801b002:	e000      	b.n	801b006 <tcp_output+0x2a2>
 801b004:	2300      	movs	r3, #0
 801b006:	442b      	add	r3, r5
 801b008:	4423      	add	r3, r4
 801b00a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b010:	68bb      	ldr	r3, [r7, #8]
 801b012:	1ad3      	subs	r3, r2, r3
 801b014:	2b00      	cmp	r3, #0
 801b016:	da02      	bge.n	801b01e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	68ba      	ldr	r2, [r7, #8]
 801b01c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b020:	891b      	ldrh	r3, [r3, #8]
 801b022:	461c      	mov	r4, r3
 801b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b026:	68db      	ldr	r3, [r3, #12]
 801b028:	899b      	ldrh	r3, [r3, #12]
 801b02a:	b29b      	uxth	r3, r3
 801b02c:	4618      	mov	r0, r3
 801b02e:	f7f8 fefd 	bl	8013e2c <lwip_htons>
 801b032:	4603      	mov	r3, r0
 801b034:	b2db      	uxtb	r3, r3
 801b036:	f003 0303 	and.w	r3, r3, #3
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d001      	beq.n	801b042 <tcp_output+0x2de>
 801b03e:	2301      	movs	r3, #1
 801b040:	e000      	b.n	801b044 <tcp_output+0x2e0>
 801b042:	2300      	movs	r3, #0
 801b044:	4423      	add	r3, r4
 801b046:	2b00      	cmp	r3, #0
 801b048:	d049      	beq.n	801b0de <tcp_output+0x37a>
      seg->next = NULL;
 801b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b04c:	2200      	movs	r2, #0
 801b04e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b054:	2b00      	cmp	r3, #0
 801b056:	d105      	bne.n	801b064 <tcp_output+0x300>
        pcb->unacked = seg;
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b05c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b060:	623b      	str	r3, [r7, #32]
 801b062:	e03f      	b.n	801b0e4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b066:	68db      	ldr	r3, [r3, #12]
 801b068:	685b      	ldr	r3, [r3, #4]
 801b06a:	4618      	mov	r0, r3
 801b06c:	f7f8 fef3 	bl	8013e56 <lwip_htonl>
 801b070:	4604      	mov	r4, r0
 801b072:	6a3b      	ldr	r3, [r7, #32]
 801b074:	68db      	ldr	r3, [r3, #12]
 801b076:	685b      	ldr	r3, [r3, #4]
 801b078:	4618      	mov	r0, r3
 801b07a:	f7f8 feec 	bl	8013e56 <lwip_htonl>
 801b07e:	4603      	mov	r3, r0
 801b080:	1ae3      	subs	r3, r4, r3
 801b082:	2b00      	cmp	r3, #0
 801b084:	da24      	bge.n	801b0d0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	3370      	adds	r3, #112	; 0x70
 801b08a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b08c:	e002      	b.n	801b094 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b08e:	69fb      	ldr	r3, [r7, #28]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b094:	69fb      	ldr	r3, [r7, #28]
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d011      	beq.n	801b0c0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b09c:	69fb      	ldr	r3, [r7, #28]
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	68db      	ldr	r3, [r3, #12]
 801b0a2:	685b      	ldr	r3, [r3, #4]
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	f7f8 fed6 	bl	8013e56 <lwip_htonl>
 801b0aa:	4604      	mov	r4, r0
 801b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ae:	68db      	ldr	r3, [r3, #12]
 801b0b0:	685b      	ldr	r3, [r3, #4]
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	f7f8 fecf 	bl	8013e56 <lwip_htonl>
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	dbe6      	blt.n	801b08e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801b0c0:	69fb      	ldr	r3, [r7, #28]
 801b0c2:	681a      	ldr	r2, [r3, #0]
 801b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0c6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b0c8:	69fb      	ldr	r3, [r7, #28]
 801b0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0cc:	601a      	str	r2, [r3, #0]
 801b0ce:	e009      	b.n	801b0e4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b0d0:	6a3b      	ldr	r3, [r7, #32]
 801b0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0d4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b0d6:	6a3b      	ldr	r3, [r7, #32]
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	623b      	str	r3, [r7, #32]
 801b0dc:	e002      	b.n	801b0e4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b0de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b0e0:	f7fb ff19 	bl	8016f16 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d012      	beq.n	801b116 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f2:	68db      	ldr	r3, [r3, #12]
 801b0f4:	685b      	ldr	r3, [r3, #4]
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	f7f8 fead 	bl	8013e56 <lwip_htonl>
 801b0fc:	4602      	mov	r2, r0
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b102:	1ad3      	subs	r3, r2, r3
 801b104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b106:	8912      	ldrh	r2, [r2, #8]
 801b108:	4413      	add	r3, r2
  while (seg != NULL &&
 801b10a:	69ba      	ldr	r2, [r7, #24]
 801b10c:	429a      	cmp	r2, r3
 801b10e:	f4bf aed9 	bcs.w	801aec4 <tcp_output+0x160>
 801b112:	e000      	b.n	801b116 <tcp_output+0x3b2>
      break;
 801b114:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d108      	bne.n	801b130 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	2200      	movs	r2, #0
 801b122:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b126:	e004      	b.n	801b132 <tcp_output+0x3ce>
    goto output_done;
 801b128:	bf00      	nop
 801b12a:	e002      	b.n	801b132 <tcp_output+0x3ce>
    goto output_done;
 801b12c:	bf00      	nop
 801b12e:	e000      	b.n	801b132 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b130:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	8b5b      	ldrh	r3, [r3, #26]
 801b136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b13a:	b29a      	uxth	r2, r3
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b140:	2300      	movs	r3, #0
}
 801b142:	4618      	mov	r0, r3
 801b144:	3728      	adds	r7, #40	; 0x28
 801b146:	46bd      	mov	sp, r7
 801b148:	bdb0      	pop	{r4, r5, r7, pc}
 801b14a:	bf00      	nop

0801b14c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b14c:	b580      	push	{r7, lr}
 801b14e:	b082      	sub	sp, #8
 801b150:	af00      	add	r7, sp, #0
 801b152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d106      	bne.n	801b168 <tcp_output_segment_busy+0x1c>
 801b15a:	4b09      	ldr	r3, [pc, #36]	; (801b180 <tcp_output_segment_busy+0x34>)
 801b15c:	f240 529a 	movw	r2, #1434	; 0x59a
 801b160:	4908      	ldr	r1, [pc, #32]	; (801b184 <tcp_output_segment_busy+0x38>)
 801b162:	4809      	ldr	r0, [pc, #36]	; (801b188 <tcp_output_segment_busy+0x3c>)
 801b164:	f009 fb54 	bl	8024810 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	685b      	ldr	r3, [r3, #4]
 801b16c:	7b9b      	ldrb	r3, [r3, #14]
 801b16e:	2b01      	cmp	r3, #1
 801b170:	d001      	beq.n	801b176 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b172:	2301      	movs	r3, #1
 801b174:	e000      	b.n	801b178 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b176:	2300      	movs	r3, #0
}
 801b178:	4618      	mov	r0, r3
 801b17a:	3708      	adds	r7, #8
 801b17c:	46bd      	mov	sp, r7
 801b17e:	bd80      	pop	{r7, pc}
 801b180:	0802b894 	.word	0x0802b894
 801b184:	0802be30 	.word	0x0802be30
 801b188:	0802b8e8 	.word	0x0802b8e8

0801b18c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b18c:	b5b0      	push	{r4, r5, r7, lr}
 801b18e:	b08c      	sub	sp, #48	; 0x30
 801b190:	af04      	add	r7, sp, #16
 801b192:	60f8      	str	r0, [r7, #12]
 801b194:	60b9      	str	r1, [r7, #8]
 801b196:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d106      	bne.n	801b1ac <tcp_output_segment+0x20>
 801b19e:	4b63      	ldr	r3, [pc, #396]	; (801b32c <tcp_output_segment+0x1a0>)
 801b1a0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801b1a4:	4962      	ldr	r1, [pc, #392]	; (801b330 <tcp_output_segment+0x1a4>)
 801b1a6:	4863      	ldr	r0, [pc, #396]	; (801b334 <tcp_output_segment+0x1a8>)
 801b1a8:	f009 fb32 	bl	8024810 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b1ac:	68bb      	ldr	r3, [r7, #8]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d106      	bne.n	801b1c0 <tcp_output_segment+0x34>
 801b1b2:	4b5e      	ldr	r3, [pc, #376]	; (801b32c <tcp_output_segment+0x1a0>)
 801b1b4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801b1b8:	495f      	ldr	r1, [pc, #380]	; (801b338 <tcp_output_segment+0x1ac>)
 801b1ba:	485e      	ldr	r0, [pc, #376]	; (801b334 <tcp_output_segment+0x1a8>)
 801b1bc:	f009 fb28 	bl	8024810 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d106      	bne.n	801b1d4 <tcp_output_segment+0x48>
 801b1c6:	4b59      	ldr	r3, [pc, #356]	; (801b32c <tcp_output_segment+0x1a0>)
 801b1c8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801b1cc:	495b      	ldr	r1, [pc, #364]	; (801b33c <tcp_output_segment+0x1b0>)
 801b1ce:	4859      	ldr	r0, [pc, #356]	; (801b334 <tcp_output_segment+0x1a8>)
 801b1d0:	f009 fb1e 	bl	8024810 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b1d4:	68f8      	ldr	r0, [r7, #12]
 801b1d6:	f7ff ffb9 	bl	801b14c <tcp_output_segment_busy>
 801b1da:	4603      	mov	r3, r0
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d001      	beq.n	801b1e4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	e09f      	b.n	801b324 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b1e4:	68bb      	ldr	r3, [r7, #8]
 801b1e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b1e8:	68fb      	ldr	r3, [r7, #12]
 801b1ea:	68dc      	ldr	r4, [r3, #12]
 801b1ec:	4610      	mov	r0, r2
 801b1ee:	f7f8 fe32 	bl	8013e56 <lwip_htonl>
 801b1f2:	4603      	mov	r3, r0
 801b1f4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b1f6:	68bb      	ldr	r3, [r7, #8]
 801b1f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b1fa:	68fb      	ldr	r3, [r7, #12]
 801b1fc:	68dc      	ldr	r4, [r3, #12]
 801b1fe:	4610      	mov	r0, r2
 801b200:	f7f8 fe14 	bl	8013e2c <lwip_htons>
 801b204:	4603      	mov	r3, r0
 801b206:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b208:	68bb      	ldr	r3, [r7, #8]
 801b20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b20c:	68ba      	ldr	r2, [r7, #8]
 801b20e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b210:	441a      	add	r2, r3
 801b212:	68bb      	ldr	r3, [r7, #8]
 801b214:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b216:	68fb      	ldr	r3, [r7, #12]
 801b218:	68db      	ldr	r3, [r3, #12]
 801b21a:	3314      	adds	r3, #20
 801b21c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	7a9b      	ldrb	r3, [r3, #10]
 801b222:	f003 0301 	and.w	r3, r3, #1
 801b226:	2b00      	cmp	r3, #0
 801b228:	d015      	beq.n	801b256 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b22a:	68bb      	ldr	r3, [r7, #8]
 801b22c:	3304      	adds	r3, #4
 801b22e:	461a      	mov	r2, r3
 801b230:	6879      	ldr	r1, [r7, #4]
 801b232:	f44f 7006 	mov.w	r0, #536	; 0x218
 801b236:	f7fc fa33 	bl	80176a0 <tcp_eff_send_mss_netif>
 801b23a:	4603      	mov	r3, r0
 801b23c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b23e:	8b7b      	ldrh	r3, [r7, #26]
 801b240:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801b244:	4618      	mov	r0, r3
 801b246:	f7f8 fe06 	bl	8013e56 <lwip_htonl>
 801b24a:	4602      	mov	r2, r0
 801b24c:	69fb      	ldr	r3, [r7, #28]
 801b24e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b250:	69fb      	ldr	r3, [r7, #28]
 801b252:	3304      	adds	r3, #4
 801b254:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b256:	68bb      	ldr	r3, [r7, #8]
 801b258:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	da02      	bge.n	801b266 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b260:	68bb      	ldr	r3, [r7, #8]
 801b262:	2200      	movs	r2, #0
 801b264:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801b266:	68bb      	ldr	r3, [r7, #8]
 801b268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d10c      	bne.n	801b288 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b26e:	4b34      	ldr	r3, [pc, #208]	; (801b340 <tcp_output_segment+0x1b4>)
 801b270:	681a      	ldr	r2, [r3, #0]
 801b272:	68bb      	ldr	r3, [r7, #8]
 801b274:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	68db      	ldr	r3, [r3, #12]
 801b27a:	685b      	ldr	r3, [r3, #4]
 801b27c:	4618      	mov	r0, r3
 801b27e:	f7f8 fdea 	bl	8013e56 <lwip_htonl>
 801b282:	4602      	mov	r2, r0
 801b284:	68bb      	ldr	r3, [r7, #8]
 801b286:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	68da      	ldr	r2, [r3, #12]
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	685b      	ldr	r3, [r3, #4]
 801b290:	685b      	ldr	r3, [r3, #4]
 801b292:	1ad3      	subs	r3, r2, r3
 801b294:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	685b      	ldr	r3, [r3, #4]
 801b29a:	8959      	ldrh	r1, [r3, #10]
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	685b      	ldr	r3, [r3, #4]
 801b2a0:	8b3a      	ldrh	r2, [r7, #24]
 801b2a2:	1a8a      	subs	r2, r1, r2
 801b2a4:	b292      	uxth	r2, r2
 801b2a6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b2a8:	68fb      	ldr	r3, [r7, #12]
 801b2aa:	685b      	ldr	r3, [r3, #4]
 801b2ac:	8919      	ldrh	r1, [r3, #8]
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	685b      	ldr	r3, [r3, #4]
 801b2b2:	8b3a      	ldrh	r2, [r7, #24]
 801b2b4:	1a8a      	subs	r2, r1, r2
 801b2b6:	b292      	uxth	r2, r2
 801b2b8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	685b      	ldr	r3, [r3, #4]
 801b2be:	68fa      	ldr	r2, [r7, #12]
 801b2c0:	68d2      	ldr	r2, [r2, #12]
 801b2c2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	68db      	ldr	r3, [r3, #12]
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	741a      	strb	r2, [r3, #16]
 801b2cc:	2200      	movs	r2, #0
 801b2ce:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	68db      	ldr	r3, [r3, #12]
 801b2d4:	f103 0214 	add.w	r2, r3, #20
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	7a9b      	ldrb	r3, [r3, #10]
 801b2dc:	009b      	lsls	r3, r3, #2
 801b2de:	f003 0304 	and.w	r3, r3, #4
 801b2e2:	4413      	add	r3, r2
 801b2e4:	69fa      	ldr	r2, [r7, #28]
 801b2e6:	429a      	cmp	r2, r3
 801b2e8:	d006      	beq.n	801b2f8 <tcp_output_segment+0x16c>
 801b2ea:	4b10      	ldr	r3, [pc, #64]	; (801b32c <tcp_output_segment+0x1a0>)
 801b2ec:	f240 621c 	movw	r2, #1564	; 0x61c
 801b2f0:	4914      	ldr	r1, [pc, #80]	; (801b344 <tcp_output_segment+0x1b8>)
 801b2f2:	4810      	ldr	r0, [pc, #64]	; (801b334 <tcp_output_segment+0x1a8>)
 801b2f4:	f009 fa8c 	bl	8024810 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	6858      	ldr	r0, [r3, #4]
 801b2fc:	68b9      	ldr	r1, [r7, #8]
 801b2fe:	68bb      	ldr	r3, [r7, #8]
 801b300:	1d1c      	adds	r4, r3, #4
 801b302:	68bb      	ldr	r3, [r7, #8]
 801b304:	7add      	ldrb	r5, [r3, #11]
 801b306:	68bb      	ldr	r3, [r7, #8]
 801b308:	7a9b      	ldrb	r3, [r3, #10]
 801b30a:	687a      	ldr	r2, [r7, #4]
 801b30c:	9202      	str	r2, [sp, #8]
 801b30e:	2206      	movs	r2, #6
 801b310:	9201      	str	r2, [sp, #4]
 801b312:	9300      	str	r3, [sp, #0]
 801b314:	462b      	mov	r3, r5
 801b316:	4622      	mov	r2, r4
 801b318:	f002 fbac 	bl	801da74 <ip4_output_if>
 801b31c:	4603      	mov	r3, r0
 801b31e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b320:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b324:	4618      	mov	r0, r3
 801b326:	3720      	adds	r7, #32
 801b328:	46bd      	mov	sp, r7
 801b32a:	bdb0      	pop	{r4, r5, r7, pc}
 801b32c:	0802b894 	.word	0x0802b894
 801b330:	0802be58 	.word	0x0802be58
 801b334:	0802b8e8 	.word	0x0802b8e8
 801b338:	0802be78 	.word	0x0802be78
 801b33c:	0802be98 	.word	0x0802be98
 801b340:	2001acd8 	.word	0x2001acd8
 801b344:	0802bebc 	.word	0x0802bebc

0801b348 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b348:	b5b0      	push	{r4, r5, r7, lr}
 801b34a:	b084      	sub	sp, #16
 801b34c:	af00      	add	r7, sp, #0
 801b34e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d106      	bne.n	801b364 <tcp_rexmit_rto_prepare+0x1c>
 801b356:	4b31      	ldr	r3, [pc, #196]	; (801b41c <tcp_rexmit_rto_prepare+0xd4>)
 801b358:	f240 6263 	movw	r2, #1635	; 0x663
 801b35c:	4930      	ldr	r1, [pc, #192]	; (801b420 <tcp_rexmit_rto_prepare+0xd8>)
 801b35e:	4831      	ldr	r0, [pc, #196]	; (801b424 <tcp_rexmit_rto_prepare+0xdc>)
 801b360:	f009 fa56 	bl	8024810 <iprintf>

  if (pcb->unacked == NULL) {
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d102      	bne.n	801b372 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b36c:	f06f 0305 	mvn.w	r3, #5
 801b370:	e050      	b.n	801b414 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b376:	60fb      	str	r3, [r7, #12]
 801b378:	e00b      	b.n	801b392 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b37a:	68f8      	ldr	r0, [r7, #12]
 801b37c:	f7ff fee6 	bl	801b14c <tcp_output_segment_busy>
 801b380:	4603      	mov	r3, r0
 801b382:	2b00      	cmp	r3, #0
 801b384:	d002      	beq.n	801b38c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b386:	f06f 0305 	mvn.w	r3, #5
 801b38a:	e043      	b.n	801b414 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	60fb      	str	r3, [r7, #12]
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d1ef      	bne.n	801b37a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b39a:	68f8      	ldr	r0, [r7, #12]
 801b39c:	f7ff fed6 	bl	801b14c <tcp_output_segment_busy>
 801b3a0:	4603      	mov	r3, r0
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d002      	beq.n	801b3ac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b3a6:	f06f 0305 	mvn.w	r3, #5
 801b3aa:	e033      	b.n	801b414 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	2200      	movs	r2, #0
 801b3c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	8b5b      	ldrh	r3, [r3, #26]
 801b3c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b3ca:	b29a      	uxth	r2, r3
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	68db      	ldr	r3, [r3, #12]
 801b3d4:	685b      	ldr	r3, [r3, #4]
 801b3d6:	4618      	mov	r0, r3
 801b3d8:	f7f8 fd3d 	bl	8013e56 <lwip_htonl>
 801b3dc:	4604      	mov	r4, r0
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	891b      	ldrh	r3, [r3, #8]
 801b3e2:	461d      	mov	r5, r3
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	68db      	ldr	r3, [r3, #12]
 801b3e8:	899b      	ldrh	r3, [r3, #12]
 801b3ea:	b29b      	uxth	r3, r3
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	f7f8 fd1d 	bl	8013e2c <lwip_htons>
 801b3f2:	4603      	mov	r3, r0
 801b3f4:	b2db      	uxtb	r3, r3
 801b3f6:	f003 0303 	and.w	r3, r3, #3
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d001      	beq.n	801b402 <tcp_rexmit_rto_prepare+0xba>
 801b3fe:	2301      	movs	r3, #1
 801b400:	e000      	b.n	801b404 <tcp_rexmit_rto_prepare+0xbc>
 801b402:	2300      	movs	r3, #0
 801b404:	442b      	add	r3, r5
 801b406:	18e2      	adds	r2, r4, r3
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	2200      	movs	r2, #0
 801b410:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b412:	2300      	movs	r3, #0
}
 801b414:	4618      	mov	r0, r3
 801b416:	3710      	adds	r7, #16
 801b418:	46bd      	mov	sp, r7
 801b41a:	bdb0      	pop	{r4, r5, r7, pc}
 801b41c:	0802b894 	.word	0x0802b894
 801b420:	0802bed0 	.word	0x0802bed0
 801b424:	0802b8e8 	.word	0x0802b8e8

0801b428 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b082      	sub	sp, #8
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d106      	bne.n	801b444 <tcp_rexmit_rto_commit+0x1c>
 801b436:	4b0d      	ldr	r3, [pc, #52]	; (801b46c <tcp_rexmit_rto_commit+0x44>)
 801b438:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b43c:	490c      	ldr	r1, [pc, #48]	; (801b470 <tcp_rexmit_rto_commit+0x48>)
 801b43e:	480d      	ldr	r0, [pc, #52]	; (801b474 <tcp_rexmit_rto_commit+0x4c>)
 801b440:	f009 f9e6 	bl	8024810 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b44a:	2bff      	cmp	r3, #255	; 0xff
 801b44c:	d007      	beq.n	801b45e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b454:	3301      	adds	r3, #1
 801b456:	b2da      	uxtb	r2, r3
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b45e:	6878      	ldr	r0, [r7, #4]
 801b460:	f7ff fc80 	bl	801ad64 <tcp_output>
}
 801b464:	bf00      	nop
 801b466:	3708      	adds	r7, #8
 801b468:	46bd      	mov	sp, r7
 801b46a:	bd80      	pop	{r7, pc}
 801b46c:	0802b894 	.word	0x0802b894
 801b470:	0802bef4 	.word	0x0802bef4
 801b474:	0802b8e8 	.word	0x0802b8e8

0801b478 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b478:	b580      	push	{r7, lr}
 801b47a:	b082      	sub	sp, #8
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	2b00      	cmp	r3, #0
 801b484:	d106      	bne.n	801b494 <tcp_rexmit_rto+0x1c>
 801b486:	4b0a      	ldr	r3, [pc, #40]	; (801b4b0 <tcp_rexmit_rto+0x38>)
 801b488:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b48c:	4909      	ldr	r1, [pc, #36]	; (801b4b4 <tcp_rexmit_rto+0x3c>)
 801b48e:	480a      	ldr	r0, [pc, #40]	; (801b4b8 <tcp_rexmit_rto+0x40>)
 801b490:	f009 f9be 	bl	8024810 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b494:	6878      	ldr	r0, [r7, #4]
 801b496:	f7ff ff57 	bl	801b348 <tcp_rexmit_rto_prepare>
 801b49a:	4603      	mov	r3, r0
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d102      	bne.n	801b4a6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b4a0:	6878      	ldr	r0, [r7, #4]
 801b4a2:	f7ff ffc1 	bl	801b428 <tcp_rexmit_rto_commit>
  }
}
 801b4a6:	bf00      	nop
 801b4a8:	3708      	adds	r7, #8
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	bd80      	pop	{r7, pc}
 801b4ae:	bf00      	nop
 801b4b0:	0802b894 	.word	0x0802b894
 801b4b4:	0802bf18 	.word	0x0802bf18
 801b4b8:	0802b8e8 	.word	0x0802b8e8

0801b4bc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b4bc:	b590      	push	{r4, r7, lr}
 801b4be:	b085      	sub	sp, #20
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d106      	bne.n	801b4d8 <tcp_rexmit+0x1c>
 801b4ca:	4b2f      	ldr	r3, [pc, #188]	; (801b588 <tcp_rexmit+0xcc>)
 801b4cc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b4d0:	492e      	ldr	r1, [pc, #184]	; (801b58c <tcp_rexmit+0xd0>)
 801b4d2:	482f      	ldr	r0, [pc, #188]	; (801b590 <tcp_rexmit+0xd4>)
 801b4d4:	f009 f99c 	bl	8024810 <iprintf>

  if (pcb->unacked == NULL) {
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d102      	bne.n	801b4e6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b4e0:	f06f 0305 	mvn.w	r3, #5
 801b4e4:	e04c      	b.n	801b580 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4ea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b4ec:	68b8      	ldr	r0, [r7, #8]
 801b4ee:	f7ff fe2d 	bl	801b14c <tcp_output_segment_busy>
 801b4f2:	4603      	mov	r3, r0
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d002      	beq.n	801b4fe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b4f8:	f06f 0305 	mvn.w	r3, #5
 801b4fc:	e040      	b.n	801b580 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b4fe:	68bb      	ldr	r3, [r7, #8]
 801b500:	681a      	ldr	r2, [r3, #0]
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	336c      	adds	r3, #108	; 0x6c
 801b50a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b50c:	e002      	b.n	801b514 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b50e:	68fb      	ldr	r3, [r7, #12]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b514:	68fb      	ldr	r3, [r7, #12]
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d011      	beq.n	801b540 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	68db      	ldr	r3, [r3, #12]
 801b522:	685b      	ldr	r3, [r3, #4]
 801b524:	4618      	mov	r0, r3
 801b526:	f7f8 fc96 	bl	8013e56 <lwip_htonl>
 801b52a:	4604      	mov	r4, r0
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	68db      	ldr	r3, [r3, #12]
 801b530:	685b      	ldr	r3, [r3, #4]
 801b532:	4618      	mov	r0, r3
 801b534:	f7f8 fc8f 	bl	8013e56 <lwip_htonl>
 801b538:	4603      	mov	r3, r0
 801b53a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	dbe6      	blt.n	801b50e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	681a      	ldr	r2, [r3, #0]
 801b544:	68bb      	ldr	r3, [r7, #8]
 801b546:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	68ba      	ldr	r2, [r7, #8]
 801b54c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b54e:	68bb      	ldr	r3, [r7, #8]
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d103      	bne.n	801b55e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	2200      	movs	r2, #0
 801b55a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b564:	2bff      	cmp	r3, #255	; 0xff
 801b566:	d007      	beq.n	801b578 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b56e:	3301      	adds	r3, #1
 801b570:	b2da      	uxtb	r2, r3
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	2200      	movs	r2, #0
 801b57c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b57e:	2300      	movs	r3, #0
}
 801b580:	4618      	mov	r0, r3
 801b582:	3714      	adds	r7, #20
 801b584:	46bd      	mov	sp, r7
 801b586:	bd90      	pop	{r4, r7, pc}
 801b588:	0802b894 	.word	0x0802b894
 801b58c:	0802bf34 	.word	0x0802bf34
 801b590:	0802b8e8 	.word	0x0802b8e8

0801b594 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b594:	b580      	push	{r7, lr}
 801b596:	b082      	sub	sp, #8
 801b598:	af00      	add	r7, sp, #0
 801b59a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d106      	bne.n	801b5b0 <tcp_rexmit_fast+0x1c>
 801b5a2:	4b2a      	ldr	r3, [pc, #168]	; (801b64c <tcp_rexmit_fast+0xb8>)
 801b5a4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b5a8:	4929      	ldr	r1, [pc, #164]	; (801b650 <tcp_rexmit_fast+0xbc>)
 801b5aa:	482a      	ldr	r0, [pc, #168]	; (801b654 <tcp_rexmit_fast+0xc0>)
 801b5ac:	f009 f930 	bl	8024810 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d045      	beq.n	801b644 <tcp_rexmit_fast+0xb0>
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	8b5b      	ldrh	r3, [r3, #26]
 801b5bc:	f003 0304 	and.w	r3, r3, #4
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d13f      	bne.n	801b644 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b5c4:	6878      	ldr	r0, [r7, #4]
 801b5c6:	f7ff ff79 	bl	801b4bc <tcp_rexmit>
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d139      	bne.n	801b644 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	bf28      	it	cs
 801b5e0:	4613      	movcs	r3, r2
 801b5e2:	b29b      	uxth	r3, r3
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	da00      	bge.n	801b5ea <tcp_rexmit_fast+0x56>
 801b5e8:	3301      	adds	r3, #1
 801b5ea:	105b      	asrs	r3, r3, #1
 801b5ec:	b29a      	uxth	r2, r3
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b5fa:	461a      	mov	r2, r3
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b600:	005b      	lsls	r3, r3, #1
 801b602:	429a      	cmp	r2, r3
 801b604:	d206      	bcs.n	801b614 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b60a:	005b      	lsls	r3, r3, #1
 801b60c:	b29a      	uxth	r2, r3
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b61e:	4619      	mov	r1, r3
 801b620:	0049      	lsls	r1, r1, #1
 801b622:	440b      	add	r3, r1
 801b624:	b29b      	uxth	r3, r3
 801b626:	4413      	add	r3, r2
 801b628:	b29a      	uxth	r2, r3
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	8b5b      	ldrh	r3, [r3, #26]
 801b634:	f043 0304 	orr.w	r3, r3, #4
 801b638:	b29a      	uxth	r2, r3
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	2200      	movs	r2, #0
 801b642:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b644:	bf00      	nop
 801b646:	3708      	adds	r7, #8
 801b648:	46bd      	mov	sp, r7
 801b64a:	bd80      	pop	{r7, pc}
 801b64c:	0802b894 	.word	0x0802b894
 801b650:	0802bf4c 	.word	0x0802bf4c
 801b654:	0802b8e8 	.word	0x0802b8e8

0801b658 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b658:	b580      	push	{r7, lr}
 801b65a:	b086      	sub	sp, #24
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	60f8      	str	r0, [r7, #12]
 801b660:	607b      	str	r3, [r7, #4]
 801b662:	460b      	mov	r3, r1
 801b664:	817b      	strh	r3, [r7, #10]
 801b666:	4613      	mov	r3, r2
 801b668:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b66a:	897a      	ldrh	r2, [r7, #10]
 801b66c:	893b      	ldrh	r3, [r7, #8]
 801b66e:	4413      	add	r3, r2
 801b670:	b29b      	uxth	r3, r3
 801b672:	3314      	adds	r3, #20
 801b674:	b29b      	uxth	r3, r3
 801b676:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b67a:	4619      	mov	r1, r3
 801b67c:	2022      	movs	r0, #34	; 0x22
 801b67e:	f7f9 fce3 	bl	8015048 <pbuf_alloc>
 801b682:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b684:	697b      	ldr	r3, [r7, #20]
 801b686:	2b00      	cmp	r3, #0
 801b688:	d04d      	beq.n	801b726 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b68a:	897b      	ldrh	r3, [r7, #10]
 801b68c:	3313      	adds	r3, #19
 801b68e:	697a      	ldr	r2, [r7, #20]
 801b690:	8952      	ldrh	r2, [r2, #10]
 801b692:	4293      	cmp	r3, r2
 801b694:	db06      	blt.n	801b6a4 <tcp_output_alloc_header_common+0x4c>
 801b696:	4b26      	ldr	r3, [pc, #152]	; (801b730 <tcp_output_alloc_header_common+0xd8>)
 801b698:	f240 7223 	movw	r2, #1827	; 0x723
 801b69c:	4925      	ldr	r1, [pc, #148]	; (801b734 <tcp_output_alloc_header_common+0xdc>)
 801b69e:	4826      	ldr	r0, [pc, #152]	; (801b738 <tcp_output_alloc_header_common+0xe0>)
 801b6a0:	f009 f8b6 	bl	8024810 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b6a4:	697b      	ldr	r3, [r7, #20]
 801b6a6:	685b      	ldr	r3, [r3, #4]
 801b6a8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b6aa:	8c3b      	ldrh	r3, [r7, #32]
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	f7f8 fbbd 	bl	8013e2c <lwip_htons>
 801b6b2:	4603      	mov	r3, r0
 801b6b4:	461a      	mov	r2, r3
 801b6b6:	693b      	ldr	r3, [r7, #16]
 801b6b8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b6ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b6bc:	4618      	mov	r0, r3
 801b6be:	f7f8 fbb5 	bl	8013e2c <lwip_htons>
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	461a      	mov	r2, r3
 801b6c6:	693b      	ldr	r3, [r7, #16]
 801b6c8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b6ca:	693b      	ldr	r3, [r7, #16]
 801b6cc:	687a      	ldr	r2, [r7, #4]
 801b6ce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b6d0:	68f8      	ldr	r0, [r7, #12]
 801b6d2:	f7f8 fbc0 	bl	8013e56 <lwip_htonl>
 801b6d6:	4602      	mov	r2, r0
 801b6d8:	693b      	ldr	r3, [r7, #16]
 801b6da:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b6dc:	897b      	ldrh	r3, [r7, #10]
 801b6de:	089b      	lsrs	r3, r3, #2
 801b6e0:	b29b      	uxth	r3, r3
 801b6e2:	3305      	adds	r3, #5
 801b6e4:	b29b      	uxth	r3, r3
 801b6e6:	031b      	lsls	r3, r3, #12
 801b6e8:	b29a      	uxth	r2, r3
 801b6ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b6ee:	b29b      	uxth	r3, r3
 801b6f0:	4313      	orrs	r3, r2
 801b6f2:	b29b      	uxth	r3, r3
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	f7f8 fb99 	bl	8013e2c <lwip_htons>
 801b6fa:	4603      	mov	r3, r0
 801b6fc:	461a      	mov	r2, r3
 801b6fe:	693b      	ldr	r3, [r7, #16]
 801b700:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b702:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b704:	4618      	mov	r0, r3
 801b706:	f7f8 fb91 	bl	8013e2c <lwip_htons>
 801b70a:	4603      	mov	r3, r0
 801b70c:	461a      	mov	r2, r3
 801b70e:	693b      	ldr	r3, [r7, #16]
 801b710:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b712:	693b      	ldr	r3, [r7, #16]
 801b714:	2200      	movs	r2, #0
 801b716:	741a      	strb	r2, [r3, #16]
 801b718:	2200      	movs	r2, #0
 801b71a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b71c:	693b      	ldr	r3, [r7, #16]
 801b71e:	2200      	movs	r2, #0
 801b720:	749a      	strb	r2, [r3, #18]
 801b722:	2200      	movs	r2, #0
 801b724:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b726:	697b      	ldr	r3, [r7, #20]
}
 801b728:	4618      	mov	r0, r3
 801b72a:	3718      	adds	r7, #24
 801b72c:	46bd      	mov	sp, r7
 801b72e:	bd80      	pop	{r7, pc}
 801b730:	0802b894 	.word	0x0802b894
 801b734:	0802bf6c 	.word	0x0802bf6c
 801b738:	0802b8e8 	.word	0x0802b8e8

0801b73c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b73c:	b5b0      	push	{r4, r5, r7, lr}
 801b73e:	b08a      	sub	sp, #40	; 0x28
 801b740:	af04      	add	r7, sp, #16
 801b742:	60f8      	str	r0, [r7, #12]
 801b744:	607b      	str	r3, [r7, #4]
 801b746:	460b      	mov	r3, r1
 801b748:	817b      	strh	r3, [r7, #10]
 801b74a:	4613      	mov	r3, r2
 801b74c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b74e:	68fb      	ldr	r3, [r7, #12]
 801b750:	2b00      	cmp	r3, #0
 801b752:	d106      	bne.n	801b762 <tcp_output_alloc_header+0x26>
 801b754:	4b15      	ldr	r3, [pc, #84]	; (801b7ac <tcp_output_alloc_header+0x70>)
 801b756:	f240 7242 	movw	r2, #1858	; 0x742
 801b75a:	4915      	ldr	r1, [pc, #84]	; (801b7b0 <tcp_output_alloc_header+0x74>)
 801b75c:	4815      	ldr	r0, [pc, #84]	; (801b7b4 <tcp_output_alloc_header+0x78>)
 801b75e:	f009 f857 	bl	8024810 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	8adb      	ldrh	r3, [r3, #22]
 801b76a:	68fa      	ldr	r2, [r7, #12]
 801b76c:	8b12      	ldrh	r2, [r2, #24]
 801b76e:	68f9      	ldr	r1, [r7, #12]
 801b770:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b772:	893d      	ldrh	r5, [r7, #8]
 801b774:	897c      	ldrh	r4, [r7, #10]
 801b776:	9103      	str	r1, [sp, #12]
 801b778:	2110      	movs	r1, #16
 801b77a:	9102      	str	r1, [sp, #8]
 801b77c:	9201      	str	r2, [sp, #4]
 801b77e:	9300      	str	r3, [sp, #0]
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	462a      	mov	r2, r5
 801b784:	4621      	mov	r1, r4
 801b786:	f7ff ff67 	bl	801b658 <tcp_output_alloc_header_common>
 801b78a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b78c:	697b      	ldr	r3, [r7, #20]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d006      	beq.n	801b7a0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b796:	68fa      	ldr	r2, [r7, #12]
 801b798:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b79a:	441a      	add	r2, r3
 801b79c:	68fb      	ldr	r3, [r7, #12]
 801b79e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b7a0:	697b      	ldr	r3, [r7, #20]
}
 801b7a2:	4618      	mov	r0, r3
 801b7a4:	3718      	adds	r7, #24
 801b7a6:	46bd      	mov	sp, r7
 801b7a8:	bdb0      	pop	{r4, r5, r7, pc}
 801b7aa:	bf00      	nop
 801b7ac:	0802b894 	.word	0x0802b894
 801b7b0:	0802bf9c 	.word	0x0802bf9c
 801b7b4:	0802b8e8 	.word	0x0802b8e8

0801b7b8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b7b8:	b580      	push	{r7, lr}
 801b7ba:	b088      	sub	sp, #32
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	60f8      	str	r0, [r7, #12]
 801b7c0:	60b9      	str	r1, [r7, #8]
 801b7c2:	4611      	mov	r1, r2
 801b7c4:	461a      	mov	r2, r3
 801b7c6:	460b      	mov	r3, r1
 801b7c8:	71fb      	strb	r3, [r7, #7]
 801b7ca:	4613      	mov	r3, r2
 801b7cc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b7ce:	2300      	movs	r3, #0
 801b7d0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b7d2:	68bb      	ldr	r3, [r7, #8]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d106      	bne.n	801b7e6 <tcp_output_fill_options+0x2e>
 801b7d8:	4b13      	ldr	r3, [pc, #76]	; (801b828 <tcp_output_fill_options+0x70>)
 801b7da:	f240 7256 	movw	r2, #1878	; 0x756
 801b7de:	4913      	ldr	r1, [pc, #76]	; (801b82c <tcp_output_fill_options+0x74>)
 801b7e0:	4813      	ldr	r0, [pc, #76]	; (801b830 <tcp_output_fill_options+0x78>)
 801b7e2:	f009 f815 	bl	8024810 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b7e6:	68bb      	ldr	r3, [r7, #8]
 801b7e8:	685b      	ldr	r3, [r3, #4]
 801b7ea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b7ec:	69bb      	ldr	r3, [r7, #24]
 801b7ee:	3314      	adds	r3, #20
 801b7f0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b7f2:	69bb      	ldr	r3, [r7, #24]
 801b7f4:	f103 0214 	add.w	r2, r3, #20
 801b7f8:	8bfb      	ldrh	r3, [r7, #30]
 801b7fa:	009b      	lsls	r3, r3, #2
 801b7fc:	4619      	mov	r1, r3
 801b7fe:	79fb      	ldrb	r3, [r7, #7]
 801b800:	009b      	lsls	r3, r3, #2
 801b802:	f003 0304 	and.w	r3, r3, #4
 801b806:	440b      	add	r3, r1
 801b808:	4413      	add	r3, r2
 801b80a:	697a      	ldr	r2, [r7, #20]
 801b80c:	429a      	cmp	r2, r3
 801b80e:	d006      	beq.n	801b81e <tcp_output_fill_options+0x66>
 801b810:	4b05      	ldr	r3, [pc, #20]	; (801b828 <tcp_output_fill_options+0x70>)
 801b812:	f240 7275 	movw	r2, #1909	; 0x775
 801b816:	4907      	ldr	r1, [pc, #28]	; (801b834 <tcp_output_fill_options+0x7c>)
 801b818:	4805      	ldr	r0, [pc, #20]	; (801b830 <tcp_output_fill_options+0x78>)
 801b81a:	f008 fff9 	bl	8024810 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b81e:	bf00      	nop
 801b820:	3720      	adds	r7, #32
 801b822:	46bd      	mov	sp, r7
 801b824:	bd80      	pop	{r7, pc}
 801b826:	bf00      	nop
 801b828:	0802b894 	.word	0x0802b894
 801b82c:	0802bfc4 	.word	0x0802bfc4
 801b830:	0802b8e8 	.word	0x0802b8e8
 801b834:	0802bebc 	.word	0x0802bebc

0801b838 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b838:	b580      	push	{r7, lr}
 801b83a:	b08a      	sub	sp, #40	; 0x28
 801b83c:	af04      	add	r7, sp, #16
 801b83e:	60f8      	str	r0, [r7, #12]
 801b840:	60b9      	str	r1, [r7, #8]
 801b842:	607a      	str	r2, [r7, #4]
 801b844:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b846:	68bb      	ldr	r3, [r7, #8]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d106      	bne.n	801b85a <tcp_output_control_segment+0x22>
 801b84c:	4b1c      	ldr	r3, [pc, #112]	; (801b8c0 <tcp_output_control_segment+0x88>)
 801b84e:	f240 7287 	movw	r2, #1927	; 0x787
 801b852:	491c      	ldr	r1, [pc, #112]	; (801b8c4 <tcp_output_control_segment+0x8c>)
 801b854:	481c      	ldr	r0, [pc, #112]	; (801b8c8 <tcp_output_control_segment+0x90>)
 801b856:	f008 ffdb 	bl	8024810 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b85a:	683a      	ldr	r2, [r7, #0]
 801b85c:	6879      	ldr	r1, [r7, #4]
 801b85e:	68f8      	ldr	r0, [r7, #12]
 801b860:	f7fe fae8 	bl	8019e34 <tcp_route>
 801b864:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b866:	693b      	ldr	r3, [r7, #16]
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d102      	bne.n	801b872 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b86c:	23fc      	movs	r3, #252	; 0xfc
 801b86e:	75fb      	strb	r3, [r7, #23]
 801b870:	e01c      	b.n	801b8ac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	2b00      	cmp	r3, #0
 801b876:	d006      	beq.n	801b886 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	7adb      	ldrb	r3, [r3, #11]
 801b87c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	7a9b      	ldrb	r3, [r3, #10]
 801b882:	757b      	strb	r3, [r7, #21]
 801b884:	e003      	b.n	801b88e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b886:	23ff      	movs	r3, #255	; 0xff
 801b888:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b88a:	2300      	movs	r3, #0
 801b88c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b88e:	7dba      	ldrb	r2, [r7, #22]
 801b890:	693b      	ldr	r3, [r7, #16]
 801b892:	9302      	str	r3, [sp, #8]
 801b894:	2306      	movs	r3, #6
 801b896:	9301      	str	r3, [sp, #4]
 801b898:	7d7b      	ldrb	r3, [r7, #21]
 801b89a:	9300      	str	r3, [sp, #0]
 801b89c:	4613      	mov	r3, r2
 801b89e:	683a      	ldr	r2, [r7, #0]
 801b8a0:	6879      	ldr	r1, [r7, #4]
 801b8a2:	68b8      	ldr	r0, [r7, #8]
 801b8a4:	f002 f8e6 	bl	801da74 <ip4_output_if>
 801b8a8:	4603      	mov	r3, r0
 801b8aa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b8ac:	68b8      	ldr	r0, [r7, #8]
 801b8ae:	f7f9 feaf 	bl	8015610 <pbuf_free>
  return err;
 801b8b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	3718      	adds	r7, #24
 801b8ba:	46bd      	mov	sp, r7
 801b8bc:	bd80      	pop	{r7, pc}
 801b8be:	bf00      	nop
 801b8c0:	0802b894 	.word	0x0802b894
 801b8c4:	0802bfec 	.word	0x0802bfec
 801b8c8:	0802b8e8 	.word	0x0802b8e8

0801b8cc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b8cc:	b590      	push	{r4, r7, lr}
 801b8ce:	b08b      	sub	sp, #44	; 0x2c
 801b8d0:	af04      	add	r7, sp, #16
 801b8d2:	60f8      	str	r0, [r7, #12]
 801b8d4:	60b9      	str	r1, [r7, #8]
 801b8d6:	607a      	str	r2, [r7, #4]
 801b8d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d106      	bne.n	801b8ee <tcp_rst+0x22>
 801b8e0:	4b1f      	ldr	r3, [pc, #124]	; (801b960 <tcp_rst+0x94>)
 801b8e2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801b8e6:	491f      	ldr	r1, [pc, #124]	; (801b964 <tcp_rst+0x98>)
 801b8e8:	481f      	ldr	r0, [pc, #124]	; (801b968 <tcp_rst+0x9c>)
 801b8ea:	f008 ff91 	bl	8024810 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d106      	bne.n	801b902 <tcp_rst+0x36>
 801b8f4:	4b1a      	ldr	r3, [pc, #104]	; (801b960 <tcp_rst+0x94>)
 801b8f6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801b8fa:	491c      	ldr	r1, [pc, #112]	; (801b96c <tcp_rst+0xa0>)
 801b8fc:	481a      	ldr	r0, [pc, #104]	; (801b968 <tcp_rst+0x9c>)
 801b8fe:	f008 ff87 	bl	8024810 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b902:	2300      	movs	r3, #0
 801b904:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b906:	f246 0308 	movw	r3, #24584	; 0x6008
 801b90a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b90c:	7dfb      	ldrb	r3, [r7, #23]
 801b90e:	b29c      	uxth	r4, r3
 801b910:	68b8      	ldr	r0, [r7, #8]
 801b912:	f7f8 faa0 	bl	8013e56 <lwip_htonl>
 801b916:	4602      	mov	r2, r0
 801b918:	8abb      	ldrh	r3, [r7, #20]
 801b91a:	9303      	str	r3, [sp, #12]
 801b91c:	2314      	movs	r3, #20
 801b91e:	9302      	str	r3, [sp, #8]
 801b920:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b922:	9301      	str	r3, [sp, #4]
 801b924:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b926:	9300      	str	r3, [sp, #0]
 801b928:	4613      	mov	r3, r2
 801b92a:	2200      	movs	r2, #0
 801b92c:	4621      	mov	r1, r4
 801b92e:	6878      	ldr	r0, [r7, #4]
 801b930:	f7ff fe92 	bl	801b658 <tcp_output_alloc_header_common>
 801b934:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b936:	693b      	ldr	r3, [r7, #16]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d00c      	beq.n	801b956 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b93c:	7dfb      	ldrb	r3, [r7, #23]
 801b93e:	2200      	movs	r2, #0
 801b940:	6939      	ldr	r1, [r7, #16]
 801b942:	68f8      	ldr	r0, [r7, #12]
 801b944:	f7ff ff38 	bl	801b7b8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b94a:	683a      	ldr	r2, [r7, #0]
 801b94c:	6939      	ldr	r1, [r7, #16]
 801b94e:	68f8      	ldr	r0, [r7, #12]
 801b950:	f7ff ff72 	bl	801b838 <tcp_output_control_segment>
 801b954:	e000      	b.n	801b958 <tcp_rst+0x8c>
    return;
 801b956:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b958:	371c      	adds	r7, #28
 801b95a:	46bd      	mov	sp, r7
 801b95c:	bd90      	pop	{r4, r7, pc}
 801b95e:	bf00      	nop
 801b960:	0802b894 	.word	0x0802b894
 801b964:	0802c018 	.word	0x0802c018
 801b968:	0802b8e8 	.word	0x0802b8e8
 801b96c:	0802c034 	.word	0x0802c034

0801b970 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b970:	b590      	push	{r4, r7, lr}
 801b972:	b087      	sub	sp, #28
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b978:	2300      	movs	r3, #0
 801b97a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b97c:	2300      	movs	r3, #0
 801b97e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d106      	bne.n	801b994 <tcp_send_empty_ack+0x24>
 801b986:	4b28      	ldr	r3, [pc, #160]	; (801ba28 <tcp_send_empty_ack+0xb8>)
 801b988:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801b98c:	4927      	ldr	r1, [pc, #156]	; (801ba2c <tcp_send_empty_ack+0xbc>)
 801b98e:	4828      	ldr	r0, [pc, #160]	; (801ba30 <tcp_send_empty_ack+0xc0>)
 801b990:	f008 ff3e 	bl	8024810 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b994:	7dfb      	ldrb	r3, [r7, #23]
 801b996:	009b      	lsls	r3, r3, #2
 801b998:	b2db      	uxtb	r3, r3
 801b99a:	f003 0304 	and.w	r3, r3, #4
 801b99e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b9a0:	7d7b      	ldrb	r3, [r7, #21]
 801b9a2:	b29c      	uxth	r4, r3
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b9a8:	4618      	mov	r0, r3
 801b9aa:	f7f8 fa54 	bl	8013e56 <lwip_htonl>
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	2200      	movs	r2, #0
 801b9b2:	4621      	mov	r1, r4
 801b9b4:	6878      	ldr	r0, [r7, #4]
 801b9b6:	f7ff fec1 	bl	801b73c <tcp_output_alloc_header>
 801b9ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b9bc:	693b      	ldr	r3, [r7, #16]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d109      	bne.n	801b9d6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	8b5b      	ldrh	r3, [r3, #26]
 801b9c6:	f043 0303 	orr.w	r3, r3, #3
 801b9ca:	b29a      	uxth	r2, r3
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b9d0:	f06f 0301 	mvn.w	r3, #1
 801b9d4:	e023      	b.n	801ba1e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b9d6:	7dbb      	ldrb	r3, [r7, #22]
 801b9d8:	7dfa      	ldrb	r2, [r7, #23]
 801b9da:	6939      	ldr	r1, [r7, #16]
 801b9dc:	6878      	ldr	r0, [r7, #4]
 801b9de:	f7ff feeb 	bl	801b7b8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b9e2:	687a      	ldr	r2, [r7, #4]
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	3304      	adds	r3, #4
 801b9e8:	6939      	ldr	r1, [r7, #16]
 801b9ea:	6878      	ldr	r0, [r7, #4]
 801b9ec:	f7ff ff24 	bl	801b838 <tcp_output_control_segment>
 801b9f0:	4603      	mov	r3, r0
 801b9f2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b9f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d007      	beq.n	801ba0c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	8b5b      	ldrh	r3, [r3, #26]
 801ba00:	f043 0303 	orr.w	r3, r3, #3
 801ba04:	b29a      	uxth	r2, r3
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	835a      	strh	r2, [r3, #26]
 801ba0a:	e006      	b.n	801ba1a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	8b5b      	ldrh	r3, [r3, #26]
 801ba10:	f023 0303 	bic.w	r3, r3, #3
 801ba14:	b29a      	uxth	r2, r3
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801ba1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ba1e:	4618      	mov	r0, r3
 801ba20:	371c      	adds	r7, #28
 801ba22:	46bd      	mov	sp, r7
 801ba24:	bd90      	pop	{r4, r7, pc}
 801ba26:	bf00      	nop
 801ba28:	0802b894 	.word	0x0802b894
 801ba2c:	0802c050 	.word	0x0802c050
 801ba30:	0802b8e8 	.word	0x0802b8e8

0801ba34 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801ba34:	b590      	push	{r4, r7, lr}
 801ba36:	b087      	sub	sp, #28
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d106      	bne.n	801ba54 <tcp_keepalive+0x20>
 801ba46:	4b18      	ldr	r3, [pc, #96]	; (801baa8 <tcp_keepalive+0x74>)
 801ba48:	f640 0224 	movw	r2, #2084	; 0x824
 801ba4c:	4917      	ldr	r1, [pc, #92]	; (801baac <tcp_keepalive+0x78>)
 801ba4e:	4818      	ldr	r0, [pc, #96]	; (801bab0 <tcp_keepalive+0x7c>)
 801ba50:	f008 fede 	bl	8024810 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801ba54:	7dfb      	ldrb	r3, [r7, #23]
 801ba56:	b29c      	uxth	r4, r3
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba5c:	3b01      	subs	r3, #1
 801ba5e:	4618      	mov	r0, r3
 801ba60:	f7f8 f9f9 	bl	8013e56 <lwip_htonl>
 801ba64:	4603      	mov	r3, r0
 801ba66:	2200      	movs	r2, #0
 801ba68:	4621      	mov	r1, r4
 801ba6a:	6878      	ldr	r0, [r7, #4]
 801ba6c:	f7ff fe66 	bl	801b73c <tcp_output_alloc_header>
 801ba70:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ba72:	693b      	ldr	r3, [r7, #16]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d102      	bne.n	801ba7e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801ba78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ba7c:	e010      	b.n	801baa0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ba7e:	7dfb      	ldrb	r3, [r7, #23]
 801ba80:	2200      	movs	r2, #0
 801ba82:	6939      	ldr	r1, [r7, #16]
 801ba84:	6878      	ldr	r0, [r7, #4]
 801ba86:	f7ff fe97 	bl	801b7b8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ba8a:	687a      	ldr	r2, [r7, #4]
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	3304      	adds	r3, #4
 801ba90:	6939      	ldr	r1, [r7, #16]
 801ba92:	6878      	ldr	r0, [r7, #4]
 801ba94:	f7ff fed0 	bl	801b838 <tcp_output_control_segment>
 801ba98:	4603      	mov	r3, r0
 801ba9a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801ba9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801baa0:	4618      	mov	r0, r3
 801baa2:	371c      	adds	r7, #28
 801baa4:	46bd      	mov	sp, r7
 801baa6:	bd90      	pop	{r4, r7, pc}
 801baa8:	0802b894 	.word	0x0802b894
 801baac:	0802c070 	.word	0x0802c070
 801bab0:	0802b8e8 	.word	0x0802b8e8

0801bab4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801bab4:	b590      	push	{r4, r7, lr}
 801bab6:	b08b      	sub	sp, #44	; 0x2c
 801bab8:	af00      	add	r7, sp, #0
 801baba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801babc:	2300      	movs	r3, #0
 801babe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d106      	bne.n	801bad6 <tcp_zero_window_probe+0x22>
 801bac8:	4b4c      	ldr	r3, [pc, #304]	; (801bbfc <tcp_zero_window_probe+0x148>)
 801baca:	f640 024f 	movw	r2, #2127	; 0x84f
 801bace:	494c      	ldr	r1, [pc, #304]	; (801bc00 <tcp_zero_window_probe+0x14c>)
 801bad0:	484c      	ldr	r0, [pc, #304]	; (801bc04 <tcp_zero_window_probe+0x150>)
 801bad2:	f008 fe9d 	bl	8024810 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bada:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801badc:	6a3b      	ldr	r3, [r7, #32]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d101      	bne.n	801bae6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801bae2:	2300      	movs	r3, #0
 801bae4:	e086      	b.n	801bbf4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801baec:	2bff      	cmp	r3, #255	; 0xff
 801baee:	d007      	beq.n	801bb00 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801baf6:	3301      	adds	r3, #1
 801baf8:	b2da      	uxtb	r2, r3
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801bb00:	6a3b      	ldr	r3, [r7, #32]
 801bb02:	68db      	ldr	r3, [r3, #12]
 801bb04:	899b      	ldrh	r3, [r3, #12]
 801bb06:	b29b      	uxth	r3, r3
 801bb08:	4618      	mov	r0, r3
 801bb0a:	f7f8 f98f 	bl	8013e2c <lwip_htons>
 801bb0e:	4603      	mov	r3, r0
 801bb10:	b2db      	uxtb	r3, r3
 801bb12:	f003 0301 	and.w	r3, r3, #1
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d005      	beq.n	801bb26 <tcp_zero_window_probe+0x72>
 801bb1a:	6a3b      	ldr	r3, [r7, #32]
 801bb1c:	891b      	ldrh	r3, [r3, #8]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d101      	bne.n	801bb26 <tcp_zero_window_probe+0x72>
 801bb22:	2301      	movs	r3, #1
 801bb24:	e000      	b.n	801bb28 <tcp_zero_window_probe+0x74>
 801bb26:	2300      	movs	r3, #0
 801bb28:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801bb2a:	7ffb      	ldrb	r3, [r7, #31]
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	bf0c      	ite	eq
 801bb30:	2301      	moveq	r3, #1
 801bb32:	2300      	movne	r3, #0
 801bb34:	b2db      	uxtb	r3, r3
 801bb36:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801bb38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bb3c:	b299      	uxth	r1, r3
 801bb3e:	6a3b      	ldr	r3, [r7, #32]
 801bb40:	68db      	ldr	r3, [r3, #12]
 801bb42:	685b      	ldr	r3, [r3, #4]
 801bb44:	8bba      	ldrh	r2, [r7, #28]
 801bb46:	6878      	ldr	r0, [r7, #4]
 801bb48:	f7ff fdf8 	bl	801b73c <tcp_output_alloc_header>
 801bb4c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801bb4e:	69bb      	ldr	r3, [r7, #24]
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	d102      	bne.n	801bb5a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801bb54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb58:	e04c      	b.n	801bbf4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801bb5a:	69bb      	ldr	r3, [r7, #24]
 801bb5c:	685b      	ldr	r3, [r3, #4]
 801bb5e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801bb60:	7ffb      	ldrb	r3, [r7, #31]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d011      	beq.n	801bb8a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801bb66:	697b      	ldr	r3, [r7, #20]
 801bb68:	899b      	ldrh	r3, [r3, #12]
 801bb6a:	b29b      	uxth	r3, r3
 801bb6c:	b21b      	sxth	r3, r3
 801bb6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bb72:	b21c      	sxth	r4, r3
 801bb74:	2011      	movs	r0, #17
 801bb76:	f7f8 f959 	bl	8013e2c <lwip_htons>
 801bb7a:	4603      	mov	r3, r0
 801bb7c:	b21b      	sxth	r3, r3
 801bb7e:	4323      	orrs	r3, r4
 801bb80:	b21b      	sxth	r3, r3
 801bb82:	b29a      	uxth	r2, r3
 801bb84:	697b      	ldr	r3, [r7, #20]
 801bb86:	819a      	strh	r2, [r3, #12]
 801bb88:	e010      	b.n	801bbac <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801bb8a:	69bb      	ldr	r3, [r7, #24]
 801bb8c:	685b      	ldr	r3, [r3, #4]
 801bb8e:	3314      	adds	r3, #20
 801bb90:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801bb92:	6a3b      	ldr	r3, [r7, #32]
 801bb94:	6858      	ldr	r0, [r3, #4]
 801bb96:	6a3b      	ldr	r3, [r7, #32]
 801bb98:	685b      	ldr	r3, [r3, #4]
 801bb9a:	891a      	ldrh	r2, [r3, #8]
 801bb9c:	6a3b      	ldr	r3, [r7, #32]
 801bb9e:	891b      	ldrh	r3, [r3, #8]
 801bba0:	1ad3      	subs	r3, r2, r3
 801bba2:	b29b      	uxth	r3, r3
 801bba4:	2201      	movs	r2, #1
 801bba6:	6939      	ldr	r1, [r7, #16]
 801bba8:	f7f9 ff28 	bl	80159fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801bbac:	6a3b      	ldr	r3, [r7, #32]
 801bbae:	68db      	ldr	r3, [r3, #12]
 801bbb0:	685b      	ldr	r3, [r3, #4]
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	f7f8 f94f 	bl	8013e56 <lwip_htonl>
 801bbb8:	4603      	mov	r3, r0
 801bbba:	3301      	adds	r3, #1
 801bbbc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	1ad3      	subs	r3, r2, r3
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	da02      	bge.n	801bbd0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	68fa      	ldr	r2, [r7, #12]
 801bbce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	69b9      	ldr	r1, [r7, #24]
 801bbd8:	6878      	ldr	r0, [r7, #4]
 801bbda:	f7ff fded 	bl	801b7b8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bbde:	687a      	ldr	r2, [r7, #4]
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	3304      	adds	r3, #4
 801bbe4:	69b9      	ldr	r1, [r7, #24]
 801bbe6:	6878      	ldr	r0, [r7, #4]
 801bbe8:	f7ff fe26 	bl	801b838 <tcp_output_control_segment>
 801bbec:	4603      	mov	r3, r0
 801bbee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bbf0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	372c      	adds	r7, #44	; 0x2c
 801bbf8:	46bd      	mov	sp, r7
 801bbfa:	bd90      	pop	{r4, r7, pc}
 801bbfc:	0802b894 	.word	0x0802b894
 801bc00:	0802c08c 	.word	0x0802c08c
 801bc04:	0802b8e8 	.word	0x0802b8e8

0801bc08 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b082      	sub	sp, #8
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801bc10:	f7f9 ffe2 	bl	8015bd8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801bc14:	4b0a      	ldr	r3, [pc, #40]	; (801bc40 <tcpip_tcp_timer+0x38>)
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d103      	bne.n	801bc24 <tcpip_tcp_timer+0x1c>
 801bc1c:	4b09      	ldr	r3, [pc, #36]	; (801bc44 <tcpip_tcp_timer+0x3c>)
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	d005      	beq.n	801bc30 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bc24:	2200      	movs	r2, #0
 801bc26:	4908      	ldr	r1, [pc, #32]	; (801bc48 <tcpip_tcp_timer+0x40>)
 801bc28:	20fa      	movs	r0, #250	; 0xfa
 801bc2a:	f000 f8f3 	bl	801be14 <sys_timeout>
 801bc2e:	e003      	b.n	801bc38 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801bc30:	4b06      	ldr	r3, [pc, #24]	; (801bc4c <tcpip_tcp_timer+0x44>)
 801bc32:	2200      	movs	r2, #0
 801bc34:	601a      	str	r2, [r3, #0]
  }
}
 801bc36:	bf00      	nop
 801bc38:	bf00      	nop
 801bc3a:	3708      	adds	r7, #8
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	bd80      	pop	{r7, pc}
 801bc40:	2001ace4 	.word	0x2001ace4
 801bc44:	2001ace8 	.word	0x2001ace8
 801bc48:	0801bc09 	.word	0x0801bc09
 801bc4c:	2001ad30 	.word	0x2001ad30

0801bc50 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801bc50:	b580      	push	{r7, lr}
 801bc52:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801bc54:	4b0a      	ldr	r3, [pc, #40]	; (801bc80 <tcp_timer_needed+0x30>)
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d10f      	bne.n	801bc7c <tcp_timer_needed+0x2c>
 801bc5c:	4b09      	ldr	r3, [pc, #36]	; (801bc84 <tcp_timer_needed+0x34>)
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d103      	bne.n	801bc6c <tcp_timer_needed+0x1c>
 801bc64:	4b08      	ldr	r3, [pc, #32]	; (801bc88 <tcp_timer_needed+0x38>)
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d007      	beq.n	801bc7c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801bc6c:	4b04      	ldr	r3, [pc, #16]	; (801bc80 <tcp_timer_needed+0x30>)
 801bc6e:	2201      	movs	r2, #1
 801bc70:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bc72:	2200      	movs	r2, #0
 801bc74:	4905      	ldr	r1, [pc, #20]	; (801bc8c <tcp_timer_needed+0x3c>)
 801bc76:	20fa      	movs	r0, #250	; 0xfa
 801bc78:	f000 f8cc 	bl	801be14 <sys_timeout>
  }
}
 801bc7c:	bf00      	nop
 801bc7e:	bd80      	pop	{r7, pc}
 801bc80:	2001ad30 	.word	0x2001ad30
 801bc84:	2001ace4 	.word	0x2001ace4
 801bc88:	2001ace8 	.word	0x2001ace8
 801bc8c:	0801bc09 	.word	0x0801bc09

0801bc90 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801bc90:	b580      	push	{r7, lr}
 801bc92:	b086      	sub	sp, #24
 801bc94:	af00      	add	r7, sp, #0
 801bc96:	60f8      	str	r0, [r7, #12]
 801bc98:	60b9      	str	r1, [r7, #8]
 801bc9a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801bc9c:	200a      	movs	r0, #10
 801bc9e:	f7f8 fd9d 	bl	80147dc <memp_malloc>
 801bca2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801bca4:	693b      	ldr	r3, [r7, #16]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d109      	bne.n	801bcbe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801bcaa:	693b      	ldr	r3, [r7, #16]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d151      	bne.n	801bd54 <sys_timeout_abs+0xc4>
 801bcb0:	4b2a      	ldr	r3, [pc, #168]	; (801bd5c <sys_timeout_abs+0xcc>)
 801bcb2:	22be      	movs	r2, #190	; 0xbe
 801bcb4:	492a      	ldr	r1, [pc, #168]	; (801bd60 <sys_timeout_abs+0xd0>)
 801bcb6:	482b      	ldr	r0, [pc, #172]	; (801bd64 <sys_timeout_abs+0xd4>)
 801bcb8:	f008 fdaa 	bl	8024810 <iprintf>
    return;
 801bcbc:	e04a      	b.n	801bd54 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801bcbe:	693b      	ldr	r3, [r7, #16]
 801bcc0:	2200      	movs	r2, #0
 801bcc2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801bcc4:	693b      	ldr	r3, [r7, #16]
 801bcc6:	68ba      	ldr	r2, [r7, #8]
 801bcc8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801bcca:	693b      	ldr	r3, [r7, #16]
 801bccc:	687a      	ldr	r2, [r7, #4]
 801bcce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801bcd0:	693b      	ldr	r3, [r7, #16]
 801bcd2:	68fa      	ldr	r2, [r7, #12]
 801bcd4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801bcd6:	4b24      	ldr	r3, [pc, #144]	; (801bd68 <sys_timeout_abs+0xd8>)
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d103      	bne.n	801bce6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801bcde:	4a22      	ldr	r2, [pc, #136]	; (801bd68 <sys_timeout_abs+0xd8>)
 801bce0:	693b      	ldr	r3, [r7, #16]
 801bce2:	6013      	str	r3, [r2, #0]
    return;
 801bce4:	e037      	b.n	801bd56 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801bce6:	693b      	ldr	r3, [r7, #16]
 801bce8:	685a      	ldr	r2, [r3, #4]
 801bcea:	4b1f      	ldr	r3, [pc, #124]	; (801bd68 <sys_timeout_abs+0xd8>)
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	685b      	ldr	r3, [r3, #4]
 801bcf0:	1ad3      	subs	r3, r2, r3
 801bcf2:	0fdb      	lsrs	r3, r3, #31
 801bcf4:	f003 0301 	and.w	r3, r3, #1
 801bcf8:	b2db      	uxtb	r3, r3
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d007      	beq.n	801bd0e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801bcfe:	4b1a      	ldr	r3, [pc, #104]	; (801bd68 <sys_timeout_abs+0xd8>)
 801bd00:	681a      	ldr	r2, [r3, #0]
 801bd02:	693b      	ldr	r3, [r7, #16]
 801bd04:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801bd06:	4a18      	ldr	r2, [pc, #96]	; (801bd68 <sys_timeout_abs+0xd8>)
 801bd08:	693b      	ldr	r3, [r7, #16]
 801bd0a:	6013      	str	r3, [r2, #0]
 801bd0c:	e023      	b.n	801bd56 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801bd0e:	4b16      	ldr	r3, [pc, #88]	; (801bd68 <sys_timeout_abs+0xd8>)
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	617b      	str	r3, [r7, #20]
 801bd14:	e01a      	b.n	801bd4c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801bd16:	697b      	ldr	r3, [r7, #20]
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d00b      	beq.n	801bd36 <sys_timeout_abs+0xa6>
 801bd1e:	693b      	ldr	r3, [r7, #16]
 801bd20:	685a      	ldr	r2, [r3, #4]
 801bd22:	697b      	ldr	r3, [r7, #20]
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	685b      	ldr	r3, [r3, #4]
 801bd28:	1ad3      	subs	r3, r2, r3
 801bd2a:	0fdb      	lsrs	r3, r3, #31
 801bd2c:	f003 0301 	and.w	r3, r3, #1
 801bd30:	b2db      	uxtb	r3, r3
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d007      	beq.n	801bd46 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801bd36:	697b      	ldr	r3, [r7, #20]
 801bd38:	681a      	ldr	r2, [r3, #0]
 801bd3a:	693b      	ldr	r3, [r7, #16]
 801bd3c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801bd3e:	697b      	ldr	r3, [r7, #20]
 801bd40:	693a      	ldr	r2, [r7, #16]
 801bd42:	601a      	str	r2, [r3, #0]
        break;
 801bd44:	e007      	b.n	801bd56 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801bd46:	697b      	ldr	r3, [r7, #20]
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	617b      	str	r3, [r7, #20]
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d1e1      	bne.n	801bd16 <sys_timeout_abs+0x86>
 801bd52:	e000      	b.n	801bd56 <sys_timeout_abs+0xc6>
    return;
 801bd54:	bf00      	nop
      }
    }
  }
}
 801bd56:	3718      	adds	r7, #24
 801bd58:	46bd      	mov	sp, r7
 801bd5a:	bd80      	pop	{r7, pc}
 801bd5c:	0802c0b0 	.word	0x0802c0b0
 801bd60:	0802c0e4 	.word	0x0802c0e4
 801bd64:	0802c124 	.word	0x0802c124
 801bd68:	2001ad28 	.word	0x2001ad28

0801bd6c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801bd6c:	b580      	push	{r7, lr}
 801bd6e:	b086      	sub	sp, #24
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801bd78:	697b      	ldr	r3, [r7, #20]
 801bd7a:	685b      	ldr	r3, [r3, #4]
 801bd7c:	4798      	blx	r3

  now = sys_now();
 801bd7e:	f7ed fe0b 	bl	8009998 <sys_now>
 801bd82:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801bd84:	697b      	ldr	r3, [r7, #20]
 801bd86:	681a      	ldr	r2, [r3, #0]
 801bd88:	4b0f      	ldr	r3, [pc, #60]	; (801bdc8 <lwip_cyclic_timer+0x5c>)
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	4413      	add	r3, r2
 801bd8e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801bd90:	68fa      	ldr	r2, [r7, #12]
 801bd92:	693b      	ldr	r3, [r7, #16]
 801bd94:	1ad3      	subs	r3, r2, r3
 801bd96:	0fdb      	lsrs	r3, r3, #31
 801bd98:	f003 0301 	and.w	r3, r3, #1
 801bd9c:	b2db      	uxtb	r3, r3
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d009      	beq.n	801bdb6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801bda2:	697b      	ldr	r3, [r7, #20]
 801bda4:	681a      	ldr	r2, [r3, #0]
 801bda6:	693b      	ldr	r3, [r7, #16]
 801bda8:	4413      	add	r3, r2
 801bdaa:	687a      	ldr	r2, [r7, #4]
 801bdac:	4907      	ldr	r1, [pc, #28]	; (801bdcc <lwip_cyclic_timer+0x60>)
 801bdae:	4618      	mov	r0, r3
 801bdb0:	f7ff ff6e 	bl	801bc90 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801bdb4:	e004      	b.n	801bdc0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801bdb6:	687a      	ldr	r2, [r7, #4]
 801bdb8:	4904      	ldr	r1, [pc, #16]	; (801bdcc <lwip_cyclic_timer+0x60>)
 801bdba:	68f8      	ldr	r0, [r7, #12]
 801bdbc:	f7ff ff68 	bl	801bc90 <sys_timeout_abs>
}
 801bdc0:	bf00      	nop
 801bdc2:	3718      	adds	r7, #24
 801bdc4:	46bd      	mov	sp, r7
 801bdc6:	bd80      	pop	{r7, pc}
 801bdc8:	2001ad2c 	.word	0x2001ad2c
 801bdcc:	0801bd6d 	.word	0x0801bd6d

0801bdd0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b082      	sub	sp, #8
 801bdd4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bdd6:	2301      	movs	r3, #1
 801bdd8:	607b      	str	r3, [r7, #4]
 801bdda:	e00e      	b.n	801bdfa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801bddc:	4a0b      	ldr	r2, [pc, #44]	; (801be0c <sys_timeouts_init+0x3c>)
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	00db      	lsls	r3, r3, #3
 801bde8:	4a08      	ldr	r2, [pc, #32]	; (801be0c <sys_timeouts_init+0x3c>)
 801bdea:	4413      	add	r3, r2
 801bdec:	461a      	mov	r2, r3
 801bdee:	4908      	ldr	r1, [pc, #32]	; (801be10 <sys_timeouts_init+0x40>)
 801bdf0:	f000 f810 	bl	801be14 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	3301      	adds	r3, #1
 801bdf8:	607b      	str	r3, [r7, #4]
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	2b02      	cmp	r3, #2
 801bdfe:	d9ed      	bls.n	801bddc <sys_timeouts_init+0xc>
  }
}
 801be00:	bf00      	nop
 801be02:	bf00      	nop
 801be04:	3708      	adds	r7, #8
 801be06:	46bd      	mov	sp, r7
 801be08:	bd80      	pop	{r7, pc}
 801be0a:	bf00      	nop
 801be0c:	0802d4fc 	.word	0x0802d4fc
 801be10:	0801bd6d 	.word	0x0801bd6d

0801be14 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b086      	sub	sp, #24
 801be18:	af00      	add	r7, sp, #0
 801be1a:	60f8      	str	r0, [r7, #12]
 801be1c:	60b9      	str	r1, [r7, #8]
 801be1e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801be20:	68fb      	ldr	r3, [r7, #12]
 801be22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801be26:	d306      	bcc.n	801be36 <sys_timeout+0x22>
 801be28:	4b0a      	ldr	r3, [pc, #40]	; (801be54 <sys_timeout+0x40>)
 801be2a:	f240 1229 	movw	r2, #297	; 0x129
 801be2e:	490a      	ldr	r1, [pc, #40]	; (801be58 <sys_timeout+0x44>)
 801be30:	480a      	ldr	r0, [pc, #40]	; (801be5c <sys_timeout+0x48>)
 801be32:	f008 fced 	bl	8024810 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801be36:	f7ed fdaf 	bl	8009998 <sys_now>
 801be3a:	4602      	mov	r2, r0
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	4413      	add	r3, r2
 801be40:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801be42:	687a      	ldr	r2, [r7, #4]
 801be44:	68b9      	ldr	r1, [r7, #8]
 801be46:	6978      	ldr	r0, [r7, #20]
 801be48:	f7ff ff22 	bl	801bc90 <sys_timeout_abs>
#endif
}
 801be4c:	bf00      	nop
 801be4e:	3718      	adds	r7, #24
 801be50:	46bd      	mov	sp, r7
 801be52:	bd80      	pop	{r7, pc}
 801be54:	0802c0b0 	.word	0x0802c0b0
 801be58:	0802c14c 	.word	0x0802c14c
 801be5c:	0802c124 	.word	0x0802c124

0801be60 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801be60:	b580      	push	{r7, lr}
 801be62:	b084      	sub	sp, #16
 801be64:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801be66:	f7ed fd97 	bl	8009998 <sys_now>
 801be6a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801be6c:	4b17      	ldr	r3, [pc, #92]	; (801becc <sys_check_timeouts+0x6c>)
 801be6e:	681b      	ldr	r3, [r3, #0]
 801be70:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801be72:	68bb      	ldr	r3, [r7, #8]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d022      	beq.n	801bebe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801be78:	68bb      	ldr	r3, [r7, #8]
 801be7a:	685b      	ldr	r3, [r3, #4]
 801be7c:	68fa      	ldr	r2, [r7, #12]
 801be7e:	1ad3      	subs	r3, r2, r3
 801be80:	0fdb      	lsrs	r3, r3, #31
 801be82:	f003 0301 	and.w	r3, r3, #1
 801be86:	b2db      	uxtb	r3, r3
 801be88:	2b00      	cmp	r3, #0
 801be8a:	d11a      	bne.n	801bec2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801be8c:	68bb      	ldr	r3, [r7, #8]
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	4a0e      	ldr	r2, [pc, #56]	; (801becc <sys_check_timeouts+0x6c>)
 801be92:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801be94:	68bb      	ldr	r3, [r7, #8]
 801be96:	689b      	ldr	r3, [r3, #8]
 801be98:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801be9a:	68bb      	ldr	r3, [r7, #8]
 801be9c:	68db      	ldr	r3, [r3, #12]
 801be9e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801bea0:	68bb      	ldr	r3, [r7, #8]
 801bea2:	685b      	ldr	r3, [r3, #4]
 801bea4:	4a0a      	ldr	r2, [pc, #40]	; (801bed0 <sys_check_timeouts+0x70>)
 801bea6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801bea8:	68b9      	ldr	r1, [r7, #8]
 801beaa:	200a      	movs	r0, #10
 801beac:	f7f8 fd0c 	bl	80148c8 <memp_free>
    if (handler != NULL) {
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d0da      	beq.n	801be6c <sys_check_timeouts+0xc>
      handler(arg);
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	6838      	ldr	r0, [r7, #0]
 801beba:	4798      	blx	r3
  do {
 801bebc:	e7d6      	b.n	801be6c <sys_check_timeouts+0xc>
      return;
 801bebe:	bf00      	nop
 801bec0:	e000      	b.n	801bec4 <sys_check_timeouts+0x64>
      return;
 801bec2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801bec4:	3710      	adds	r7, #16
 801bec6:	46bd      	mov	sp, r7
 801bec8:	bd80      	pop	{r7, pc}
 801beca:	bf00      	nop
 801becc:	2001ad28 	.word	0x2001ad28
 801bed0:	2001ad2c 	.word	0x2001ad2c

0801bed4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b082      	sub	sp, #8
 801bed8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801beda:	4b16      	ldr	r3, [pc, #88]	; (801bf34 <sys_timeouts_sleeptime+0x60>)
 801bedc:	681b      	ldr	r3, [r3, #0]
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d102      	bne.n	801bee8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801bee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bee6:	e020      	b.n	801bf2a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801bee8:	f7ed fd56 	bl	8009998 <sys_now>
 801beec:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801beee:	4b11      	ldr	r3, [pc, #68]	; (801bf34 <sys_timeouts_sleeptime+0x60>)
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	685a      	ldr	r2, [r3, #4]
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	1ad3      	subs	r3, r2, r3
 801bef8:	0fdb      	lsrs	r3, r3, #31
 801befa:	f003 0301 	and.w	r3, r3, #1
 801befe:	b2db      	uxtb	r3, r3
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d001      	beq.n	801bf08 <sys_timeouts_sleeptime+0x34>
    return 0;
 801bf04:	2300      	movs	r3, #0
 801bf06:	e010      	b.n	801bf2a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801bf08:	4b0a      	ldr	r3, [pc, #40]	; (801bf34 <sys_timeouts_sleeptime+0x60>)
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	685a      	ldr	r2, [r3, #4]
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	1ad3      	subs	r3, r2, r3
 801bf12:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801bf14:	683b      	ldr	r3, [r7, #0]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	da06      	bge.n	801bf28 <sys_timeouts_sleeptime+0x54>
 801bf1a:	4b07      	ldr	r3, [pc, #28]	; (801bf38 <sys_timeouts_sleeptime+0x64>)
 801bf1c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801bf20:	4906      	ldr	r1, [pc, #24]	; (801bf3c <sys_timeouts_sleeptime+0x68>)
 801bf22:	4807      	ldr	r0, [pc, #28]	; (801bf40 <sys_timeouts_sleeptime+0x6c>)
 801bf24:	f008 fc74 	bl	8024810 <iprintf>
    return ret;
 801bf28:	683b      	ldr	r3, [r7, #0]
  }
}
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	3708      	adds	r7, #8
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	bd80      	pop	{r7, pc}
 801bf32:	bf00      	nop
 801bf34:	2001ad28 	.word	0x2001ad28
 801bf38:	0802c0b0 	.word	0x0802c0b0
 801bf3c:	0802c184 	.word	0x0802c184
 801bf40:	0802c124 	.word	0x0802c124

0801bf44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801bf44:	b580      	push	{r7, lr}
 801bf46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801bf48:	f008 fc7a 	bl	8024840 <rand>
 801bf4c:	4603      	mov	r3, r0
 801bf4e:	b29b      	uxth	r3, r3
 801bf50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801bf54:	b29b      	uxth	r3, r3
 801bf56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801bf5a:	b29a      	uxth	r2, r3
 801bf5c:	4b01      	ldr	r3, [pc, #4]	; (801bf64 <udp_init+0x20>)
 801bf5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801bf60:	bf00      	nop
 801bf62:	bd80      	pop	{r7, pc}
 801bf64:	200000f8 	.word	0x200000f8

0801bf68 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801bf68:	b480      	push	{r7}
 801bf6a:	b083      	sub	sp, #12
 801bf6c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801bf6e:	2300      	movs	r3, #0
 801bf70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801bf72:	4b17      	ldr	r3, [pc, #92]	; (801bfd0 <udp_new_port+0x68>)
 801bf74:	881b      	ldrh	r3, [r3, #0]
 801bf76:	1c5a      	adds	r2, r3, #1
 801bf78:	b291      	uxth	r1, r2
 801bf7a:	4a15      	ldr	r2, [pc, #84]	; (801bfd0 <udp_new_port+0x68>)
 801bf7c:	8011      	strh	r1, [r2, #0]
 801bf7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf82:	4293      	cmp	r3, r2
 801bf84:	d103      	bne.n	801bf8e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801bf86:	4b12      	ldr	r3, [pc, #72]	; (801bfd0 <udp_new_port+0x68>)
 801bf88:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801bf8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf8e:	4b11      	ldr	r3, [pc, #68]	; (801bfd4 <udp_new_port+0x6c>)
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	603b      	str	r3, [r7, #0]
 801bf94:	e011      	b.n	801bfba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801bf96:	683b      	ldr	r3, [r7, #0]
 801bf98:	8a5a      	ldrh	r2, [r3, #18]
 801bf9a:	4b0d      	ldr	r3, [pc, #52]	; (801bfd0 <udp_new_port+0x68>)
 801bf9c:	881b      	ldrh	r3, [r3, #0]
 801bf9e:	429a      	cmp	r2, r3
 801bfa0:	d108      	bne.n	801bfb4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801bfa2:	88fb      	ldrh	r3, [r7, #6]
 801bfa4:	3301      	adds	r3, #1
 801bfa6:	80fb      	strh	r3, [r7, #6]
 801bfa8:	88fb      	ldrh	r3, [r7, #6]
 801bfaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bfae:	d3e0      	bcc.n	801bf72 <udp_new_port+0xa>
        return 0;
 801bfb0:	2300      	movs	r3, #0
 801bfb2:	e007      	b.n	801bfc4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bfb4:	683b      	ldr	r3, [r7, #0]
 801bfb6:	68db      	ldr	r3, [r3, #12]
 801bfb8:	603b      	str	r3, [r7, #0]
 801bfba:	683b      	ldr	r3, [r7, #0]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d1ea      	bne.n	801bf96 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801bfc0:	4b03      	ldr	r3, [pc, #12]	; (801bfd0 <udp_new_port+0x68>)
 801bfc2:	881b      	ldrh	r3, [r3, #0]
}
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	370c      	adds	r7, #12
 801bfc8:	46bd      	mov	sp, r7
 801bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfce:	4770      	bx	lr
 801bfd0:	200000f8 	.word	0x200000f8
 801bfd4:	2001ad34 	.word	0x2001ad34

0801bfd8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	b084      	sub	sp, #16
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	60f8      	str	r0, [r7, #12]
 801bfe0:	60b9      	str	r1, [r7, #8]
 801bfe2:	4613      	mov	r3, r2
 801bfe4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d105      	bne.n	801bff8 <udp_input_local_match+0x20>
 801bfec:	4b27      	ldr	r3, [pc, #156]	; (801c08c <udp_input_local_match+0xb4>)
 801bfee:	2287      	movs	r2, #135	; 0x87
 801bff0:	4927      	ldr	r1, [pc, #156]	; (801c090 <udp_input_local_match+0xb8>)
 801bff2:	4828      	ldr	r0, [pc, #160]	; (801c094 <udp_input_local_match+0xbc>)
 801bff4:	f008 fc0c 	bl	8024810 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d105      	bne.n	801c00a <udp_input_local_match+0x32>
 801bffe:	4b23      	ldr	r3, [pc, #140]	; (801c08c <udp_input_local_match+0xb4>)
 801c000:	2288      	movs	r2, #136	; 0x88
 801c002:	4925      	ldr	r1, [pc, #148]	; (801c098 <udp_input_local_match+0xc0>)
 801c004:	4823      	ldr	r0, [pc, #140]	; (801c094 <udp_input_local_match+0xbc>)
 801c006:	f008 fc03 	bl	8024810 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	7a1b      	ldrb	r3, [r3, #8]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d00b      	beq.n	801c02a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	7a1a      	ldrb	r2, [r3, #8]
 801c016:	4b21      	ldr	r3, [pc, #132]	; (801c09c <udp_input_local_match+0xc4>)
 801c018:	685b      	ldr	r3, [r3, #4]
 801c01a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c01e:	3301      	adds	r3, #1
 801c020:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c022:	429a      	cmp	r2, r3
 801c024:	d001      	beq.n	801c02a <udp_input_local_match+0x52>
    return 0;
 801c026:	2300      	movs	r3, #0
 801c028:	e02b      	b.n	801c082 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c02a:	79fb      	ldrb	r3, [r7, #7]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d018      	beq.n	801c062 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d013      	beq.n	801c05e <udp_input_local_match+0x86>
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d00f      	beq.n	801c05e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c03e:	4b17      	ldr	r3, [pc, #92]	; (801c09c <udp_input_local_match+0xc4>)
 801c040:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c046:	d00a      	beq.n	801c05e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	681a      	ldr	r2, [r3, #0]
 801c04c:	4b13      	ldr	r3, [pc, #76]	; (801c09c <udp_input_local_match+0xc4>)
 801c04e:	695b      	ldr	r3, [r3, #20]
 801c050:	405a      	eors	r2, r3
 801c052:	68bb      	ldr	r3, [r7, #8]
 801c054:	3308      	adds	r3, #8
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d110      	bne.n	801c080 <udp_input_local_match+0xa8>
          return 1;
 801c05e:	2301      	movs	r3, #1
 801c060:	e00f      	b.n	801c082 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c062:	68fb      	ldr	r3, [r7, #12]
 801c064:	2b00      	cmp	r3, #0
 801c066:	d009      	beq.n	801c07c <udp_input_local_match+0xa4>
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d005      	beq.n	801c07c <udp_input_local_match+0xa4>
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	681a      	ldr	r2, [r3, #0]
 801c074:	4b09      	ldr	r3, [pc, #36]	; (801c09c <udp_input_local_match+0xc4>)
 801c076:	695b      	ldr	r3, [r3, #20]
 801c078:	429a      	cmp	r2, r3
 801c07a:	d101      	bne.n	801c080 <udp_input_local_match+0xa8>
        return 1;
 801c07c:	2301      	movs	r3, #1
 801c07e:	e000      	b.n	801c082 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c080:	2300      	movs	r3, #0
}
 801c082:	4618      	mov	r0, r3
 801c084:	3710      	adds	r7, #16
 801c086:	46bd      	mov	sp, r7
 801c088:	bd80      	pop	{r7, pc}
 801c08a:	bf00      	nop
 801c08c:	0802c198 	.word	0x0802c198
 801c090:	0802c1c8 	.word	0x0802c1c8
 801c094:	0802c1ec 	.word	0x0802c1ec
 801c098:	0802c214 	.word	0x0802c214
 801c09c:	20016f44 	.word	0x20016f44

0801c0a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c0a0:	b590      	push	{r4, r7, lr}
 801c0a2:	b08d      	sub	sp, #52	; 0x34
 801c0a4:	af02      	add	r7, sp, #8
 801c0a6:	6078      	str	r0, [r7, #4]
 801c0a8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d105      	bne.n	801c0c0 <udp_input+0x20>
 801c0b4:	4b7c      	ldr	r3, [pc, #496]	; (801c2a8 <udp_input+0x208>)
 801c0b6:	22cf      	movs	r2, #207	; 0xcf
 801c0b8:	497c      	ldr	r1, [pc, #496]	; (801c2ac <udp_input+0x20c>)
 801c0ba:	487d      	ldr	r0, [pc, #500]	; (801c2b0 <udp_input+0x210>)
 801c0bc:	f008 fba8 	bl	8024810 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c0c0:	683b      	ldr	r3, [r7, #0]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d105      	bne.n	801c0d2 <udp_input+0x32>
 801c0c6:	4b78      	ldr	r3, [pc, #480]	; (801c2a8 <udp_input+0x208>)
 801c0c8:	22d0      	movs	r2, #208	; 0xd0
 801c0ca:	497a      	ldr	r1, [pc, #488]	; (801c2b4 <udp_input+0x214>)
 801c0cc:	4878      	ldr	r0, [pc, #480]	; (801c2b0 <udp_input+0x210>)
 801c0ce:	f008 fb9f 	bl	8024810 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	895b      	ldrh	r3, [r3, #10]
 801c0d6:	2b07      	cmp	r3, #7
 801c0d8:	d803      	bhi.n	801c0e2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c0da:	6878      	ldr	r0, [r7, #4]
 801c0dc:	f7f9 fa98 	bl	8015610 <pbuf_free>
    goto end;
 801c0e0:	e0de      	b.n	801c2a0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	685b      	ldr	r3, [r3, #4]
 801c0e6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c0e8:	4b73      	ldr	r3, [pc, #460]	; (801c2b8 <udp_input+0x218>)
 801c0ea:	695b      	ldr	r3, [r3, #20]
 801c0ec:	4a72      	ldr	r2, [pc, #456]	; (801c2b8 <udp_input+0x218>)
 801c0ee:	6812      	ldr	r2, [r2, #0]
 801c0f0:	4611      	mov	r1, r2
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	f001 fd96 	bl	801dc24 <ip4_addr_isbroadcast_u32>
 801c0f8:	4603      	mov	r3, r0
 801c0fa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c0fc:	697b      	ldr	r3, [r7, #20]
 801c0fe:	881b      	ldrh	r3, [r3, #0]
 801c100:	b29b      	uxth	r3, r3
 801c102:	4618      	mov	r0, r3
 801c104:	f7f7 fe92 	bl	8013e2c <lwip_htons>
 801c108:	4603      	mov	r3, r0
 801c10a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c10c:	697b      	ldr	r3, [r7, #20]
 801c10e:	885b      	ldrh	r3, [r3, #2]
 801c110:	b29b      	uxth	r3, r3
 801c112:	4618      	mov	r0, r3
 801c114:	f7f7 fe8a 	bl	8013e2c <lwip_htons>
 801c118:	4603      	mov	r3, r0
 801c11a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c11c:	2300      	movs	r3, #0
 801c11e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c120:	2300      	movs	r3, #0
 801c122:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c124:	2300      	movs	r3, #0
 801c126:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c128:	4b64      	ldr	r3, [pc, #400]	; (801c2bc <udp_input+0x21c>)
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	627b      	str	r3, [r7, #36]	; 0x24
 801c12e:	e054      	b.n	801c1da <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c132:	8a5b      	ldrh	r3, [r3, #18]
 801c134:	89fa      	ldrh	r2, [r7, #14]
 801c136:	429a      	cmp	r2, r3
 801c138:	d14a      	bne.n	801c1d0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c13a:	7cfb      	ldrb	r3, [r7, #19]
 801c13c:	461a      	mov	r2, r3
 801c13e:	6839      	ldr	r1, [r7, #0]
 801c140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c142:	f7ff ff49 	bl	801bfd8 <udp_input_local_match>
 801c146:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d041      	beq.n	801c1d0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c14e:	7c1b      	ldrb	r3, [r3, #16]
 801c150:	f003 0304 	and.w	r3, r3, #4
 801c154:	2b00      	cmp	r3, #0
 801c156:	d11d      	bne.n	801c194 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c158:	69fb      	ldr	r3, [r7, #28]
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	d102      	bne.n	801c164 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c160:	61fb      	str	r3, [r7, #28]
 801c162:	e017      	b.n	801c194 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c164:	7cfb      	ldrb	r3, [r7, #19]
 801c166:	2b00      	cmp	r3, #0
 801c168:	d014      	beq.n	801c194 <udp_input+0xf4>
 801c16a:	4b53      	ldr	r3, [pc, #332]	; (801c2b8 <udp_input+0x218>)
 801c16c:	695b      	ldr	r3, [r3, #20]
 801c16e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c172:	d10f      	bne.n	801c194 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c174:	69fb      	ldr	r3, [r7, #28]
 801c176:	681a      	ldr	r2, [r3, #0]
 801c178:	683b      	ldr	r3, [r7, #0]
 801c17a:	3304      	adds	r3, #4
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	429a      	cmp	r2, r3
 801c180:	d008      	beq.n	801c194 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c184:	681a      	ldr	r2, [r3, #0]
 801c186:	683b      	ldr	r3, [r7, #0]
 801c188:	3304      	adds	r3, #4
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	429a      	cmp	r2, r3
 801c18e:	d101      	bne.n	801c194 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c192:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c196:	8a9b      	ldrh	r3, [r3, #20]
 801c198:	8a3a      	ldrh	r2, [r7, #16]
 801c19a:	429a      	cmp	r2, r3
 801c19c:	d118      	bne.n	801c1d0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1a0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d005      	beq.n	801c1b2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1a8:	685a      	ldr	r2, [r3, #4]
 801c1aa:	4b43      	ldr	r3, [pc, #268]	; (801c2b8 <udp_input+0x218>)
 801c1ac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c1ae:	429a      	cmp	r2, r3
 801c1b0:	d10e      	bne.n	801c1d0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c1b2:	6a3b      	ldr	r3, [r7, #32]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d014      	beq.n	801c1e2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1ba:	68da      	ldr	r2, [r3, #12]
 801c1bc:	6a3b      	ldr	r3, [r7, #32]
 801c1be:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c1c0:	4b3e      	ldr	r3, [pc, #248]	; (801c2bc <udp_input+0x21c>)
 801c1c2:	681a      	ldr	r2, [r3, #0]
 801c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1c6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c1c8:	4a3c      	ldr	r2, [pc, #240]	; (801c2bc <udp_input+0x21c>)
 801c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1cc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c1ce:	e008      	b.n	801c1e2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1d2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1d6:	68db      	ldr	r3, [r3, #12]
 801c1d8:	627b      	str	r3, [r7, #36]	; 0x24
 801c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d1a7      	bne.n	801c130 <udp_input+0x90>
 801c1e0:	e000      	b.n	801c1e4 <udp_input+0x144>
        break;
 801c1e2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d101      	bne.n	801c1ee <udp_input+0x14e>
    pcb = uncon_pcb;
 801c1ea:	69fb      	ldr	r3, [r7, #28]
 801c1ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d002      	beq.n	801c1fa <udp_input+0x15a>
    for_us = 1;
 801c1f4:	2301      	movs	r3, #1
 801c1f6:	76fb      	strb	r3, [r7, #27]
 801c1f8:	e00a      	b.n	801c210 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c1fa:	683b      	ldr	r3, [r7, #0]
 801c1fc:	3304      	adds	r3, #4
 801c1fe:	681a      	ldr	r2, [r3, #0]
 801c200:	4b2d      	ldr	r3, [pc, #180]	; (801c2b8 <udp_input+0x218>)
 801c202:	695b      	ldr	r3, [r3, #20]
 801c204:	429a      	cmp	r2, r3
 801c206:	bf0c      	ite	eq
 801c208:	2301      	moveq	r3, #1
 801c20a:	2300      	movne	r3, #0
 801c20c:	b2db      	uxtb	r3, r3
 801c20e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c210:	7efb      	ldrb	r3, [r7, #27]
 801c212:	2b00      	cmp	r3, #0
 801c214:	d041      	beq.n	801c29a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c216:	2108      	movs	r1, #8
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f7f9 f973 	bl	8015504 <pbuf_remove_header>
 801c21e:	4603      	mov	r3, r0
 801c220:	2b00      	cmp	r3, #0
 801c222:	d00a      	beq.n	801c23a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c224:	4b20      	ldr	r3, [pc, #128]	; (801c2a8 <udp_input+0x208>)
 801c226:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c22a:	4925      	ldr	r1, [pc, #148]	; (801c2c0 <udp_input+0x220>)
 801c22c:	4820      	ldr	r0, [pc, #128]	; (801c2b0 <udp_input+0x210>)
 801c22e:	f008 faef 	bl	8024810 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c232:	6878      	ldr	r0, [r7, #4]
 801c234:	f7f9 f9ec 	bl	8015610 <pbuf_free>
      goto end;
 801c238:	e032      	b.n	801c2a0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d012      	beq.n	801c266 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c242:	699b      	ldr	r3, [r3, #24]
 801c244:	2b00      	cmp	r3, #0
 801c246:	d00a      	beq.n	801c25e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c24a:	699c      	ldr	r4, [r3, #24]
 801c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c24e:	69d8      	ldr	r0, [r3, #28]
 801c250:	8a3b      	ldrh	r3, [r7, #16]
 801c252:	9300      	str	r3, [sp, #0]
 801c254:	4b1b      	ldr	r3, [pc, #108]	; (801c2c4 <udp_input+0x224>)
 801c256:	687a      	ldr	r2, [r7, #4]
 801c258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c25a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c25c:	e021      	b.n	801c2a2 <udp_input+0x202>
        pbuf_free(p);
 801c25e:	6878      	ldr	r0, [r7, #4]
 801c260:	f7f9 f9d6 	bl	8015610 <pbuf_free>
        goto end;
 801c264:	e01c      	b.n	801c2a0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c266:	7cfb      	ldrb	r3, [r7, #19]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d112      	bne.n	801c292 <udp_input+0x1f2>
 801c26c:	4b12      	ldr	r3, [pc, #72]	; (801c2b8 <udp_input+0x218>)
 801c26e:	695b      	ldr	r3, [r3, #20]
 801c270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c274:	2be0      	cmp	r3, #224	; 0xe0
 801c276:	d00c      	beq.n	801c292 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c278:	4b0f      	ldr	r3, [pc, #60]	; (801c2b8 <udp_input+0x218>)
 801c27a:	899b      	ldrh	r3, [r3, #12]
 801c27c:	3308      	adds	r3, #8
 801c27e:	b29b      	uxth	r3, r3
 801c280:	b21b      	sxth	r3, r3
 801c282:	4619      	mov	r1, r3
 801c284:	6878      	ldr	r0, [r7, #4]
 801c286:	f7f9 f9b0 	bl	80155ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c28a:	2103      	movs	r1, #3
 801c28c:	6878      	ldr	r0, [r7, #4]
 801c28e:	f001 f9a9 	bl	801d5e4 <icmp_dest_unreach>
      pbuf_free(p);
 801c292:	6878      	ldr	r0, [r7, #4]
 801c294:	f7f9 f9bc 	bl	8015610 <pbuf_free>
  return;
 801c298:	e003      	b.n	801c2a2 <udp_input+0x202>
    pbuf_free(p);
 801c29a:	6878      	ldr	r0, [r7, #4]
 801c29c:	f7f9 f9b8 	bl	8015610 <pbuf_free>
  return;
 801c2a0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c2a2:	372c      	adds	r7, #44	; 0x2c
 801c2a4:	46bd      	mov	sp, r7
 801c2a6:	bd90      	pop	{r4, r7, pc}
 801c2a8:	0802c198 	.word	0x0802c198
 801c2ac:	0802c23c 	.word	0x0802c23c
 801c2b0:	0802c1ec 	.word	0x0802c1ec
 801c2b4:	0802c254 	.word	0x0802c254
 801c2b8:	20016f44 	.word	0x20016f44
 801c2bc:	2001ad34 	.word	0x2001ad34
 801c2c0:	0802c270 	.word	0x0802c270
 801c2c4:	20016f54 	.word	0x20016f54

0801c2c8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c2c8:	b580      	push	{r7, lr}
 801c2ca:	b086      	sub	sp, #24
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	60f8      	str	r0, [r7, #12]
 801c2d0:	60b9      	str	r1, [r7, #8]
 801c2d2:	4613      	mov	r3, r2
 801c2d4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d101      	bne.n	801c2e0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c2dc:	4b39      	ldr	r3, [pc, #228]	; (801c3c4 <udp_bind+0xfc>)
 801c2de:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d109      	bne.n	801c2fa <udp_bind+0x32>
 801c2e6:	4b38      	ldr	r3, [pc, #224]	; (801c3c8 <udp_bind+0x100>)
 801c2e8:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c2ec:	4937      	ldr	r1, [pc, #220]	; (801c3cc <udp_bind+0x104>)
 801c2ee:	4838      	ldr	r0, [pc, #224]	; (801c3d0 <udp_bind+0x108>)
 801c2f0:	f008 fa8e 	bl	8024810 <iprintf>
 801c2f4:	f06f 030f 	mvn.w	r3, #15
 801c2f8:	e060      	b.n	801c3bc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c2fe:	4b35      	ldr	r3, [pc, #212]	; (801c3d4 <udp_bind+0x10c>)
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	617b      	str	r3, [r7, #20]
 801c304:	e009      	b.n	801c31a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c306:	68fa      	ldr	r2, [r7, #12]
 801c308:	697b      	ldr	r3, [r7, #20]
 801c30a:	429a      	cmp	r2, r3
 801c30c:	d102      	bne.n	801c314 <udp_bind+0x4c>
      rebind = 1;
 801c30e:	2301      	movs	r3, #1
 801c310:	74fb      	strb	r3, [r7, #19]
      break;
 801c312:	e005      	b.n	801c320 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c314:	697b      	ldr	r3, [r7, #20]
 801c316:	68db      	ldr	r3, [r3, #12]
 801c318:	617b      	str	r3, [r7, #20]
 801c31a:	697b      	ldr	r3, [r7, #20]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d1f2      	bne.n	801c306 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c320:	88fb      	ldrh	r3, [r7, #6]
 801c322:	2b00      	cmp	r3, #0
 801c324:	d109      	bne.n	801c33a <udp_bind+0x72>
    port = udp_new_port();
 801c326:	f7ff fe1f 	bl	801bf68 <udp_new_port>
 801c32a:	4603      	mov	r3, r0
 801c32c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c32e:	88fb      	ldrh	r3, [r7, #6]
 801c330:	2b00      	cmp	r3, #0
 801c332:	d12c      	bne.n	801c38e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c334:	f06f 0307 	mvn.w	r3, #7
 801c338:	e040      	b.n	801c3bc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c33a:	4b26      	ldr	r3, [pc, #152]	; (801c3d4 <udp_bind+0x10c>)
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	617b      	str	r3, [r7, #20]
 801c340:	e022      	b.n	801c388 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c342:	68fa      	ldr	r2, [r7, #12]
 801c344:	697b      	ldr	r3, [r7, #20]
 801c346:	429a      	cmp	r2, r3
 801c348:	d01b      	beq.n	801c382 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c34a:	697b      	ldr	r3, [r7, #20]
 801c34c:	8a5b      	ldrh	r3, [r3, #18]
 801c34e:	88fa      	ldrh	r2, [r7, #6]
 801c350:	429a      	cmp	r2, r3
 801c352:	d116      	bne.n	801c382 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c354:	697b      	ldr	r3, [r7, #20]
 801c356:	681a      	ldr	r2, [r3, #0]
 801c358:	68bb      	ldr	r3, [r7, #8]
 801c35a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c35c:	429a      	cmp	r2, r3
 801c35e:	d00d      	beq.n	801c37c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c360:	68bb      	ldr	r3, [r7, #8]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d00a      	beq.n	801c37c <udp_bind+0xb4>
 801c366:	68bb      	ldr	r3, [r7, #8]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d006      	beq.n	801c37c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c36e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c370:	2b00      	cmp	r3, #0
 801c372:	d003      	beq.n	801c37c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c374:	697b      	ldr	r3, [r7, #20]
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d102      	bne.n	801c382 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c37c:	f06f 0307 	mvn.w	r3, #7
 801c380:	e01c      	b.n	801c3bc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c382:	697b      	ldr	r3, [r7, #20]
 801c384:	68db      	ldr	r3, [r3, #12]
 801c386:	617b      	str	r3, [r7, #20]
 801c388:	697b      	ldr	r3, [r7, #20]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d1d9      	bne.n	801c342 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c38e:	68bb      	ldr	r3, [r7, #8]
 801c390:	2b00      	cmp	r3, #0
 801c392:	d002      	beq.n	801c39a <udp_bind+0xd2>
 801c394:	68bb      	ldr	r3, [r7, #8]
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	e000      	b.n	801c39c <udp_bind+0xd4>
 801c39a:	2300      	movs	r3, #0
 801c39c:	68fa      	ldr	r2, [r7, #12]
 801c39e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	88fa      	ldrh	r2, [r7, #6]
 801c3a4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c3a6:	7cfb      	ldrb	r3, [r7, #19]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d106      	bne.n	801c3ba <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c3ac:	4b09      	ldr	r3, [pc, #36]	; (801c3d4 <udp_bind+0x10c>)
 801c3ae:	681a      	ldr	r2, [r3, #0]
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c3b4:	4a07      	ldr	r2, [pc, #28]	; (801c3d4 <udp_bind+0x10c>)
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c3ba:	2300      	movs	r3, #0
}
 801c3bc:	4618      	mov	r0, r3
 801c3be:	3718      	adds	r7, #24
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	bd80      	pop	{r7, pc}
 801c3c4:	0802d514 	.word	0x0802d514
 801c3c8:	0802c198 	.word	0x0802c198
 801c3cc:	0802c460 	.word	0x0802c460
 801c3d0:	0802c1ec 	.word	0x0802c1ec
 801c3d4:	2001ad34 	.word	0x2001ad34

0801c3d8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c3d8:	b580      	push	{r7, lr}
 801c3da:	b084      	sub	sp, #16
 801c3dc:	af00      	add	r7, sp, #0
 801c3de:	60f8      	str	r0, [r7, #12]
 801c3e0:	60b9      	str	r1, [r7, #8]
 801c3e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d107      	bne.n	801c3fa <udp_recv+0x22>
 801c3ea:	4b08      	ldr	r3, [pc, #32]	; (801c40c <udp_recv+0x34>)
 801c3ec:	f240 428a 	movw	r2, #1162	; 0x48a
 801c3f0:	4907      	ldr	r1, [pc, #28]	; (801c410 <udp_recv+0x38>)
 801c3f2:	4808      	ldr	r0, [pc, #32]	; (801c414 <udp_recv+0x3c>)
 801c3f4:	f008 fa0c 	bl	8024810 <iprintf>
 801c3f8:	e005      	b.n	801c406 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	68ba      	ldr	r2, [r7, #8]
 801c3fe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	687a      	ldr	r2, [r7, #4]
 801c404:	61da      	str	r2, [r3, #28]
}
 801c406:	3710      	adds	r7, #16
 801c408:	46bd      	mov	sp, r7
 801c40a:	bd80      	pop	{r7, pc}
 801c40c:	0802c198 	.word	0x0802c198
 801c410:	0802c4cc 	.word	0x0802c4cc
 801c414:	0802c1ec 	.word	0x0802c1ec

0801c418 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c418:	b580      	push	{r7, lr}
 801c41a:	b084      	sub	sp, #16
 801c41c:	af00      	add	r7, sp, #0
 801c41e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	2b00      	cmp	r3, #0
 801c424:	d107      	bne.n	801c436 <udp_remove+0x1e>
 801c426:	4b19      	ldr	r3, [pc, #100]	; (801c48c <udp_remove+0x74>)
 801c428:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801c42c:	4918      	ldr	r1, [pc, #96]	; (801c490 <udp_remove+0x78>)
 801c42e:	4819      	ldr	r0, [pc, #100]	; (801c494 <udp_remove+0x7c>)
 801c430:	f008 f9ee 	bl	8024810 <iprintf>
 801c434:	e026      	b.n	801c484 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c436:	4b18      	ldr	r3, [pc, #96]	; (801c498 <udp_remove+0x80>)
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	687a      	ldr	r2, [r7, #4]
 801c43c:	429a      	cmp	r2, r3
 801c43e:	d105      	bne.n	801c44c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c440:	4b15      	ldr	r3, [pc, #84]	; (801c498 <udp_remove+0x80>)
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	68db      	ldr	r3, [r3, #12]
 801c446:	4a14      	ldr	r2, [pc, #80]	; (801c498 <udp_remove+0x80>)
 801c448:	6013      	str	r3, [r2, #0]
 801c44a:	e017      	b.n	801c47c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c44c:	4b12      	ldr	r3, [pc, #72]	; (801c498 <udp_remove+0x80>)
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	60fb      	str	r3, [r7, #12]
 801c452:	e010      	b.n	801c476 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	68db      	ldr	r3, [r3, #12]
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d009      	beq.n	801c470 <udp_remove+0x58>
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	68db      	ldr	r3, [r3, #12]
 801c460:	687a      	ldr	r2, [r7, #4]
 801c462:	429a      	cmp	r2, r3
 801c464:	d104      	bne.n	801c470 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	68da      	ldr	r2, [r3, #12]
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	60da      	str	r2, [r3, #12]
        break;
 801c46e:	e005      	b.n	801c47c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	68db      	ldr	r3, [r3, #12]
 801c474:	60fb      	str	r3, [r7, #12]
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d1eb      	bne.n	801c454 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c47c:	6879      	ldr	r1, [r7, #4]
 801c47e:	2000      	movs	r0, #0
 801c480:	f7f8 fa22 	bl	80148c8 <memp_free>
}
 801c484:	3710      	adds	r7, #16
 801c486:	46bd      	mov	sp, r7
 801c488:	bd80      	pop	{r7, pc}
 801c48a:	bf00      	nop
 801c48c:	0802c198 	.word	0x0802c198
 801c490:	0802c4e4 	.word	0x0802c4e4
 801c494:	0802c1ec 	.word	0x0802c1ec
 801c498:	2001ad34 	.word	0x2001ad34

0801c49c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c49c:	b580      	push	{r7, lr}
 801c49e:	b082      	sub	sp, #8
 801c4a0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c4a2:	2000      	movs	r0, #0
 801c4a4:	f7f8 f99a 	bl	80147dc <memp_malloc>
 801c4a8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d007      	beq.n	801c4c0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c4b0:	2220      	movs	r2, #32
 801c4b2:	2100      	movs	r1, #0
 801c4b4:	6878      	ldr	r0, [r7, #4]
 801c4b6:	f007 fa94 	bl	80239e2 <memset>
    pcb->ttl = UDP_TTL;
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	22ff      	movs	r2, #255	; 0xff
 801c4be:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c4c0:	687b      	ldr	r3, [r7, #4]
}
 801c4c2:	4618      	mov	r0, r3
 801c4c4:	3708      	adds	r7, #8
 801c4c6:	46bd      	mov	sp, r7
 801c4c8:	bd80      	pop	{r7, pc}

0801c4ca <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c4ca:	b580      	push	{r7, lr}
 801c4cc:	b084      	sub	sp, #16
 801c4ce:	af00      	add	r7, sp, #0
 801c4d0:	4603      	mov	r3, r0
 801c4d2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801c4d4:	f7ff ffe2 	bl	801c49c <udp_new>
 801c4d8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c4da:	68fb      	ldr	r3, [r7, #12]
}
 801c4dc:	4618      	mov	r0, r3
 801c4de:	3710      	adds	r7, #16
 801c4e0:	46bd      	mov	sp, r7
 801c4e2:	bd80      	pop	{r7, pc}

0801c4e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c4e4:	b480      	push	{r7}
 801c4e6:	b085      	sub	sp, #20
 801c4e8:	af00      	add	r7, sp, #0
 801c4ea:	6078      	str	r0, [r7, #4]
 801c4ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d01e      	beq.n	801c532 <udp_netif_ip_addr_changed+0x4e>
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d01a      	beq.n	801c532 <udp_netif_ip_addr_changed+0x4e>
 801c4fc:	683b      	ldr	r3, [r7, #0]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d017      	beq.n	801c532 <udp_netif_ip_addr_changed+0x4e>
 801c502:	683b      	ldr	r3, [r7, #0]
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	2b00      	cmp	r3, #0
 801c508:	d013      	beq.n	801c532 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c50a:	4b0d      	ldr	r3, [pc, #52]	; (801c540 <udp_netif_ip_addr_changed+0x5c>)
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	60fb      	str	r3, [r7, #12]
 801c510:	e00c      	b.n	801c52c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	681a      	ldr	r2, [r3, #0]
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	429a      	cmp	r2, r3
 801c51c:	d103      	bne.n	801c526 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c51e:	683b      	ldr	r3, [r7, #0]
 801c520:	681a      	ldr	r2, [r3, #0]
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	68db      	ldr	r3, [r3, #12]
 801c52a:	60fb      	str	r3, [r7, #12]
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d1ef      	bne.n	801c512 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c532:	bf00      	nop
 801c534:	3714      	adds	r7, #20
 801c536:	46bd      	mov	sp, r7
 801c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c53c:	4770      	bx	lr
 801c53e:	bf00      	nop
 801c540:	2001ad34 	.word	0x2001ad34

0801c544 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c544:	b580      	push	{r7, lr}
 801c546:	b082      	sub	sp, #8
 801c548:	af00      	add	r7, sp, #0
 801c54a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c54c:	4915      	ldr	r1, [pc, #84]	; (801c5a4 <etharp_free_entry+0x60>)
 801c54e:	687a      	ldr	r2, [r7, #4]
 801c550:	4613      	mov	r3, r2
 801c552:	005b      	lsls	r3, r3, #1
 801c554:	4413      	add	r3, r2
 801c556:	00db      	lsls	r3, r3, #3
 801c558:	440b      	add	r3, r1
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d013      	beq.n	801c588 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c560:	4910      	ldr	r1, [pc, #64]	; (801c5a4 <etharp_free_entry+0x60>)
 801c562:	687a      	ldr	r2, [r7, #4]
 801c564:	4613      	mov	r3, r2
 801c566:	005b      	lsls	r3, r3, #1
 801c568:	4413      	add	r3, r2
 801c56a:	00db      	lsls	r3, r3, #3
 801c56c:	440b      	add	r3, r1
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	4618      	mov	r0, r3
 801c572:	f7f9 f84d 	bl	8015610 <pbuf_free>
    arp_table[i].q = NULL;
 801c576:	490b      	ldr	r1, [pc, #44]	; (801c5a4 <etharp_free_entry+0x60>)
 801c578:	687a      	ldr	r2, [r7, #4]
 801c57a:	4613      	mov	r3, r2
 801c57c:	005b      	lsls	r3, r3, #1
 801c57e:	4413      	add	r3, r2
 801c580:	00db      	lsls	r3, r3, #3
 801c582:	440b      	add	r3, r1
 801c584:	2200      	movs	r2, #0
 801c586:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c588:	4906      	ldr	r1, [pc, #24]	; (801c5a4 <etharp_free_entry+0x60>)
 801c58a:	687a      	ldr	r2, [r7, #4]
 801c58c:	4613      	mov	r3, r2
 801c58e:	005b      	lsls	r3, r3, #1
 801c590:	4413      	add	r3, r2
 801c592:	00db      	lsls	r3, r3, #3
 801c594:	440b      	add	r3, r1
 801c596:	3314      	adds	r3, #20
 801c598:	2200      	movs	r2, #0
 801c59a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801c59c:	bf00      	nop
 801c59e:	3708      	adds	r7, #8
 801c5a0:	46bd      	mov	sp, r7
 801c5a2:	bd80      	pop	{r7, pc}
 801c5a4:	2001ad38 	.word	0x2001ad38

0801c5a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b082      	sub	sp, #8
 801c5ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c5ae:	2300      	movs	r3, #0
 801c5b0:	607b      	str	r3, [r7, #4]
 801c5b2:	e096      	b.n	801c6e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c5b4:	494f      	ldr	r1, [pc, #316]	; (801c6f4 <etharp_tmr+0x14c>)
 801c5b6:	687a      	ldr	r2, [r7, #4]
 801c5b8:	4613      	mov	r3, r2
 801c5ba:	005b      	lsls	r3, r3, #1
 801c5bc:	4413      	add	r3, r2
 801c5be:	00db      	lsls	r3, r3, #3
 801c5c0:	440b      	add	r3, r1
 801c5c2:	3314      	adds	r3, #20
 801c5c4:	781b      	ldrb	r3, [r3, #0]
 801c5c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c5c8:	78fb      	ldrb	r3, [r7, #3]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	f000 8086 	beq.w	801c6dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c5d0:	4948      	ldr	r1, [pc, #288]	; (801c6f4 <etharp_tmr+0x14c>)
 801c5d2:	687a      	ldr	r2, [r7, #4]
 801c5d4:	4613      	mov	r3, r2
 801c5d6:	005b      	lsls	r3, r3, #1
 801c5d8:	4413      	add	r3, r2
 801c5da:	00db      	lsls	r3, r3, #3
 801c5dc:	440b      	add	r3, r1
 801c5de:	3312      	adds	r3, #18
 801c5e0:	881b      	ldrh	r3, [r3, #0]
 801c5e2:	3301      	adds	r3, #1
 801c5e4:	b298      	uxth	r0, r3
 801c5e6:	4943      	ldr	r1, [pc, #268]	; (801c6f4 <etharp_tmr+0x14c>)
 801c5e8:	687a      	ldr	r2, [r7, #4]
 801c5ea:	4613      	mov	r3, r2
 801c5ec:	005b      	lsls	r3, r3, #1
 801c5ee:	4413      	add	r3, r2
 801c5f0:	00db      	lsls	r3, r3, #3
 801c5f2:	440b      	add	r3, r1
 801c5f4:	3312      	adds	r3, #18
 801c5f6:	4602      	mov	r2, r0
 801c5f8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c5fa:	493e      	ldr	r1, [pc, #248]	; (801c6f4 <etharp_tmr+0x14c>)
 801c5fc:	687a      	ldr	r2, [r7, #4]
 801c5fe:	4613      	mov	r3, r2
 801c600:	005b      	lsls	r3, r3, #1
 801c602:	4413      	add	r3, r2
 801c604:	00db      	lsls	r3, r3, #3
 801c606:	440b      	add	r3, r1
 801c608:	3312      	adds	r3, #18
 801c60a:	881b      	ldrh	r3, [r3, #0]
 801c60c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801c610:	d215      	bcs.n	801c63e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c612:	4938      	ldr	r1, [pc, #224]	; (801c6f4 <etharp_tmr+0x14c>)
 801c614:	687a      	ldr	r2, [r7, #4]
 801c616:	4613      	mov	r3, r2
 801c618:	005b      	lsls	r3, r3, #1
 801c61a:	4413      	add	r3, r2
 801c61c:	00db      	lsls	r3, r3, #3
 801c61e:	440b      	add	r3, r1
 801c620:	3314      	adds	r3, #20
 801c622:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c624:	2b01      	cmp	r3, #1
 801c626:	d10e      	bne.n	801c646 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c628:	4932      	ldr	r1, [pc, #200]	; (801c6f4 <etharp_tmr+0x14c>)
 801c62a:	687a      	ldr	r2, [r7, #4]
 801c62c:	4613      	mov	r3, r2
 801c62e:	005b      	lsls	r3, r3, #1
 801c630:	4413      	add	r3, r2
 801c632:	00db      	lsls	r3, r3, #3
 801c634:	440b      	add	r3, r1
 801c636:	3312      	adds	r3, #18
 801c638:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c63a:	2b04      	cmp	r3, #4
 801c63c:	d903      	bls.n	801c646 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c63e:	6878      	ldr	r0, [r7, #4]
 801c640:	f7ff ff80 	bl	801c544 <etharp_free_entry>
 801c644:	e04a      	b.n	801c6dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c646:	492b      	ldr	r1, [pc, #172]	; (801c6f4 <etharp_tmr+0x14c>)
 801c648:	687a      	ldr	r2, [r7, #4]
 801c64a:	4613      	mov	r3, r2
 801c64c:	005b      	lsls	r3, r3, #1
 801c64e:	4413      	add	r3, r2
 801c650:	00db      	lsls	r3, r3, #3
 801c652:	440b      	add	r3, r1
 801c654:	3314      	adds	r3, #20
 801c656:	781b      	ldrb	r3, [r3, #0]
 801c658:	2b03      	cmp	r3, #3
 801c65a:	d10a      	bne.n	801c672 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c65c:	4925      	ldr	r1, [pc, #148]	; (801c6f4 <etharp_tmr+0x14c>)
 801c65e:	687a      	ldr	r2, [r7, #4]
 801c660:	4613      	mov	r3, r2
 801c662:	005b      	lsls	r3, r3, #1
 801c664:	4413      	add	r3, r2
 801c666:	00db      	lsls	r3, r3, #3
 801c668:	440b      	add	r3, r1
 801c66a:	3314      	adds	r3, #20
 801c66c:	2204      	movs	r2, #4
 801c66e:	701a      	strb	r2, [r3, #0]
 801c670:	e034      	b.n	801c6dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c672:	4920      	ldr	r1, [pc, #128]	; (801c6f4 <etharp_tmr+0x14c>)
 801c674:	687a      	ldr	r2, [r7, #4]
 801c676:	4613      	mov	r3, r2
 801c678:	005b      	lsls	r3, r3, #1
 801c67a:	4413      	add	r3, r2
 801c67c:	00db      	lsls	r3, r3, #3
 801c67e:	440b      	add	r3, r1
 801c680:	3314      	adds	r3, #20
 801c682:	781b      	ldrb	r3, [r3, #0]
 801c684:	2b04      	cmp	r3, #4
 801c686:	d10a      	bne.n	801c69e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c688:	491a      	ldr	r1, [pc, #104]	; (801c6f4 <etharp_tmr+0x14c>)
 801c68a:	687a      	ldr	r2, [r7, #4]
 801c68c:	4613      	mov	r3, r2
 801c68e:	005b      	lsls	r3, r3, #1
 801c690:	4413      	add	r3, r2
 801c692:	00db      	lsls	r3, r3, #3
 801c694:	440b      	add	r3, r1
 801c696:	3314      	adds	r3, #20
 801c698:	2202      	movs	r2, #2
 801c69a:	701a      	strb	r2, [r3, #0]
 801c69c:	e01e      	b.n	801c6dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c69e:	4915      	ldr	r1, [pc, #84]	; (801c6f4 <etharp_tmr+0x14c>)
 801c6a0:	687a      	ldr	r2, [r7, #4]
 801c6a2:	4613      	mov	r3, r2
 801c6a4:	005b      	lsls	r3, r3, #1
 801c6a6:	4413      	add	r3, r2
 801c6a8:	00db      	lsls	r3, r3, #3
 801c6aa:	440b      	add	r3, r1
 801c6ac:	3314      	adds	r3, #20
 801c6ae:	781b      	ldrb	r3, [r3, #0]
 801c6b0:	2b01      	cmp	r3, #1
 801c6b2:	d113      	bne.n	801c6dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c6b4:	490f      	ldr	r1, [pc, #60]	; (801c6f4 <etharp_tmr+0x14c>)
 801c6b6:	687a      	ldr	r2, [r7, #4]
 801c6b8:	4613      	mov	r3, r2
 801c6ba:	005b      	lsls	r3, r3, #1
 801c6bc:	4413      	add	r3, r2
 801c6be:	00db      	lsls	r3, r3, #3
 801c6c0:	440b      	add	r3, r1
 801c6c2:	3308      	adds	r3, #8
 801c6c4:	6818      	ldr	r0, [r3, #0]
 801c6c6:	687a      	ldr	r2, [r7, #4]
 801c6c8:	4613      	mov	r3, r2
 801c6ca:	005b      	lsls	r3, r3, #1
 801c6cc:	4413      	add	r3, r2
 801c6ce:	00db      	lsls	r3, r3, #3
 801c6d0:	4a08      	ldr	r2, [pc, #32]	; (801c6f4 <etharp_tmr+0x14c>)
 801c6d2:	4413      	add	r3, r2
 801c6d4:	3304      	adds	r3, #4
 801c6d6:	4619      	mov	r1, r3
 801c6d8:	f000 fe6e 	bl	801d3b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	3301      	adds	r3, #1
 801c6e0:	607b      	str	r3, [r7, #4]
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	2b09      	cmp	r3, #9
 801c6e6:	f77f af65 	ble.w	801c5b4 <etharp_tmr+0xc>
      }
    }
  }
}
 801c6ea:	bf00      	nop
 801c6ec:	bf00      	nop
 801c6ee:	3708      	adds	r7, #8
 801c6f0:	46bd      	mov	sp, r7
 801c6f2:	bd80      	pop	{r7, pc}
 801c6f4:	2001ad38 	.word	0x2001ad38

0801c6f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c6f8:	b580      	push	{r7, lr}
 801c6fa:	b08a      	sub	sp, #40	; 0x28
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	60f8      	str	r0, [r7, #12]
 801c700:	460b      	mov	r3, r1
 801c702:	607a      	str	r2, [r7, #4]
 801c704:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c706:	230a      	movs	r3, #10
 801c708:	84fb      	strh	r3, [r7, #38]	; 0x26
 801c70a:	230a      	movs	r3, #10
 801c70c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801c70e:	230a      	movs	r3, #10
 801c710:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801c712:	2300      	movs	r3, #0
 801c714:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c716:	230a      	movs	r3, #10
 801c718:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c71a:	2300      	movs	r3, #0
 801c71c:	83bb      	strh	r3, [r7, #28]
 801c71e:	2300      	movs	r3, #0
 801c720:	837b      	strh	r3, [r7, #26]
 801c722:	2300      	movs	r3, #0
 801c724:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c726:	2300      	movs	r3, #0
 801c728:	843b      	strh	r3, [r7, #32]
 801c72a:	e0ae      	b.n	801c88a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c72c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c730:	49a6      	ldr	r1, [pc, #664]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c732:	4613      	mov	r3, r2
 801c734:	005b      	lsls	r3, r3, #1
 801c736:	4413      	add	r3, r2
 801c738:	00db      	lsls	r3, r3, #3
 801c73a:	440b      	add	r3, r1
 801c73c:	3314      	adds	r3, #20
 801c73e:	781b      	ldrb	r3, [r3, #0]
 801c740:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c742:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c746:	2b0a      	cmp	r3, #10
 801c748:	d105      	bne.n	801c756 <etharp_find_entry+0x5e>
 801c74a:	7dfb      	ldrb	r3, [r7, #23]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d102      	bne.n	801c756 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c750:	8c3b      	ldrh	r3, [r7, #32]
 801c752:	847b      	strh	r3, [r7, #34]	; 0x22
 801c754:	e095      	b.n	801c882 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c756:	7dfb      	ldrb	r3, [r7, #23]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	f000 8092 	beq.w	801c882 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c75e:	7dfb      	ldrb	r3, [r7, #23]
 801c760:	2b01      	cmp	r3, #1
 801c762:	d009      	beq.n	801c778 <etharp_find_entry+0x80>
 801c764:	7dfb      	ldrb	r3, [r7, #23]
 801c766:	2b01      	cmp	r3, #1
 801c768:	d806      	bhi.n	801c778 <etharp_find_entry+0x80>
 801c76a:	4b99      	ldr	r3, [pc, #612]	; (801c9d0 <etharp_find_entry+0x2d8>)
 801c76c:	f240 1223 	movw	r2, #291	; 0x123
 801c770:	4998      	ldr	r1, [pc, #608]	; (801c9d4 <etharp_find_entry+0x2dc>)
 801c772:	4899      	ldr	r0, [pc, #612]	; (801c9d8 <etharp_find_entry+0x2e0>)
 801c774:	f008 f84c 	bl	8024810 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d020      	beq.n	801c7c0 <etharp_find_entry+0xc8>
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	6819      	ldr	r1, [r3, #0]
 801c782:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c786:	4891      	ldr	r0, [pc, #580]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c788:	4613      	mov	r3, r2
 801c78a:	005b      	lsls	r3, r3, #1
 801c78c:	4413      	add	r3, r2
 801c78e:	00db      	lsls	r3, r3, #3
 801c790:	4403      	add	r3, r0
 801c792:	3304      	adds	r3, #4
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	4299      	cmp	r1, r3
 801c798:	d112      	bne.n	801c7c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d00c      	beq.n	801c7ba <etharp_find_entry+0xc2>
 801c7a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c7a4:	4989      	ldr	r1, [pc, #548]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c7a6:	4613      	mov	r3, r2
 801c7a8:	005b      	lsls	r3, r3, #1
 801c7aa:	4413      	add	r3, r2
 801c7ac:	00db      	lsls	r3, r3, #3
 801c7ae:	440b      	add	r3, r1
 801c7b0:	3308      	adds	r3, #8
 801c7b2:	681b      	ldr	r3, [r3, #0]
 801c7b4:	687a      	ldr	r2, [r7, #4]
 801c7b6:	429a      	cmp	r2, r3
 801c7b8:	d102      	bne.n	801c7c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c7ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c7be:	e100      	b.n	801c9c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c7c0:	7dfb      	ldrb	r3, [r7, #23]
 801c7c2:	2b01      	cmp	r3, #1
 801c7c4:	d140      	bne.n	801c848 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c7c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c7ca:	4980      	ldr	r1, [pc, #512]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c7cc:	4613      	mov	r3, r2
 801c7ce:	005b      	lsls	r3, r3, #1
 801c7d0:	4413      	add	r3, r2
 801c7d2:	00db      	lsls	r3, r3, #3
 801c7d4:	440b      	add	r3, r1
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d01a      	beq.n	801c812 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c7dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c7e0:	497a      	ldr	r1, [pc, #488]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c7e2:	4613      	mov	r3, r2
 801c7e4:	005b      	lsls	r3, r3, #1
 801c7e6:	4413      	add	r3, r2
 801c7e8:	00db      	lsls	r3, r3, #3
 801c7ea:	440b      	add	r3, r1
 801c7ec:	3312      	adds	r3, #18
 801c7ee:	881b      	ldrh	r3, [r3, #0]
 801c7f0:	8bba      	ldrh	r2, [r7, #28]
 801c7f2:	429a      	cmp	r2, r3
 801c7f4:	d845      	bhi.n	801c882 <etharp_find_entry+0x18a>
            old_queue = i;
 801c7f6:	8c3b      	ldrh	r3, [r7, #32]
 801c7f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c7fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c7fe:	4973      	ldr	r1, [pc, #460]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c800:	4613      	mov	r3, r2
 801c802:	005b      	lsls	r3, r3, #1
 801c804:	4413      	add	r3, r2
 801c806:	00db      	lsls	r3, r3, #3
 801c808:	440b      	add	r3, r1
 801c80a:	3312      	adds	r3, #18
 801c80c:	881b      	ldrh	r3, [r3, #0]
 801c80e:	83bb      	strh	r3, [r7, #28]
 801c810:	e037      	b.n	801c882 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c812:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c816:	496d      	ldr	r1, [pc, #436]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c818:	4613      	mov	r3, r2
 801c81a:	005b      	lsls	r3, r3, #1
 801c81c:	4413      	add	r3, r2
 801c81e:	00db      	lsls	r3, r3, #3
 801c820:	440b      	add	r3, r1
 801c822:	3312      	adds	r3, #18
 801c824:	881b      	ldrh	r3, [r3, #0]
 801c826:	8b7a      	ldrh	r2, [r7, #26]
 801c828:	429a      	cmp	r2, r3
 801c82a:	d82a      	bhi.n	801c882 <etharp_find_entry+0x18a>
            old_pending = i;
 801c82c:	8c3b      	ldrh	r3, [r7, #32]
 801c82e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801c830:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c834:	4965      	ldr	r1, [pc, #404]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c836:	4613      	mov	r3, r2
 801c838:	005b      	lsls	r3, r3, #1
 801c83a:	4413      	add	r3, r2
 801c83c:	00db      	lsls	r3, r3, #3
 801c83e:	440b      	add	r3, r1
 801c840:	3312      	adds	r3, #18
 801c842:	881b      	ldrh	r3, [r3, #0]
 801c844:	837b      	strh	r3, [r7, #26]
 801c846:	e01c      	b.n	801c882 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c848:	7dfb      	ldrb	r3, [r7, #23]
 801c84a:	2b01      	cmp	r3, #1
 801c84c:	d919      	bls.n	801c882 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c84e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c852:	495e      	ldr	r1, [pc, #376]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c854:	4613      	mov	r3, r2
 801c856:	005b      	lsls	r3, r3, #1
 801c858:	4413      	add	r3, r2
 801c85a:	00db      	lsls	r3, r3, #3
 801c85c:	440b      	add	r3, r1
 801c85e:	3312      	adds	r3, #18
 801c860:	881b      	ldrh	r3, [r3, #0]
 801c862:	8b3a      	ldrh	r2, [r7, #24]
 801c864:	429a      	cmp	r2, r3
 801c866:	d80c      	bhi.n	801c882 <etharp_find_entry+0x18a>
            old_stable = i;
 801c868:	8c3b      	ldrh	r3, [r7, #32]
 801c86a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801c86c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c870:	4956      	ldr	r1, [pc, #344]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c872:	4613      	mov	r3, r2
 801c874:	005b      	lsls	r3, r3, #1
 801c876:	4413      	add	r3, r2
 801c878:	00db      	lsls	r3, r3, #3
 801c87a:	440b      	add	r3, r1
 801c87c:	3312      	adds	r3, #18
 801c87e:	881b      	ldrh	r3, [r3, #0]
 801c880:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c882:	8c3b      	ldrh	r3, [r7, #32]
 801c884:	3301      	adds	r3, #1
 801c886:	b29b      	uxth	r3, r3
 801c888:	843b      	strh	r3, [r7, #32]
 801c88a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c88e:	2b09      	cmp	r3, #9
 801c890:	f77f af4c 	ble.w	801c72c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c894:	7afb      	ldrb	r3, [r7, #11]
 801c896:	f003 0302 	and.w	r3, r3, #2
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d108      	bne.n	801c8b0 <etharp_find_entry+0x1b8>
 801c89e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c8a2:	2b0a      	cmp	r3, #10
 801c8a4:	d107      	bne.n	801c8b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c8a6:	7afb      	ldrb	r3, [r7, #11]
 801c8a8:	f003 0301 	and.w	r3, r3, #1
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d102      	bne.n	801c8b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c8b4:	e085      	b.n	801c9c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c8b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801c8ba:	2b09      	cmp	r3, #9
 801c8bc:	dc02      	bgt.n	801c8c4 <etharp_find_entry+0x1cc>
    i = empty;
 801c8be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c8c0:	843b      	strh	r3, [r7, #32]
 801c8c2:	e039      	b.n	801c938 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c8c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801c8c8:	2b09      	cmp	r3, #9
 801c8ca:	dc14      	bgt.n	801c8f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c8cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c8ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c8d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c8d4:	493d      	ldr	r1, [pc, #244]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c8d6:	4613      	mov	r3, r2
 801c8d8:	005b      	lsls	r3, r3, #1
 801c8da:	4413      	add	r3, r2
 801c8dc:	00db      	lsls	r3, r3, #3
 801c8de:	440b      	add	r3, r1
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d018      	beq.n	801c918 <etharp_find_entry+0x220>
 801c8e6:	4b3a      	ldr	r3, [pc, #232]	; (801c9d0 <etharp_find_entry+0x2d8>)
 801c8e8:	f240 126d 	movw	r2, #365	; 0x16d
 801c8ec:	493b      	ldr	r1, [pc, #236]	; (801c9dc <etharp_find_entry+0x2e4>)
 801c8ee:	483a      	ldr	r0, [pc, #232]	; (801c9d8 <etharp_find_entry+0x2e0>)
 801c8f0:	f007 ff8e 	bl	8024810 <iprintf>
 801c8f4:	e010      	b.n	801c918 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c8f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801c8fa:	2b09      	cmp	r3, #9
 801c8fc:	dc02      	bgt.n	801c904 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c8fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c900:	843b      	strh	r3, [r7, #32]
 801c902:	e009      	b.n	801c918 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c904:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c908:	2b09      	cmp	r3, #9
 801c90a:	dc02      	bgt.n	801c912 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c90c:	8bfb      	ldrh	r3, [r7, #30]
 801c90e:	843b      	strh	r3, [r7, #32]
 801c910:	e002      	b.n	801c918 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c916:	e054      	b.n	801c9c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c918:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c91c:	2b09      	cmp	r3, #9
 801c91e:	dd06      	ble.n	801c92e <etharp_find_entry+0x236>
 801c920:	4b2b      	ldr	r3, [pc, #172]	; (801c9d0 <etharp_find_entry+0x2d8>)
 801c922:	f240 127f 	movw	r2, #383	; 0x17f
 801c926:	492e      	ldr	r1, [pc, #184]	; (801c9e0 <etharp_find_entry+0x2e8>)
 801c928:	482b      	ldr	r0, [pc, #172]	; (801c9d8 <etharp_find_entry+0x2e0>)
 801c92a:	f007 ff71 	bl	8024810 <iprintf>
    etharp_free_entry(i);
 801c92e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c932:	4618      	mov	r0, r3
 801c934:	f7ff fe06 	bl	801c544 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c938:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c93c:	2b09      	cmp	r3, #9
 801c93e:	dd06      	ble.n	801c94e <etharp_find_entry+0x256>
 801c940:	4b23      	ldr	r3, [pc, #140]	; (801c9d0 <etharp_find_entry+0x2d8>)
 801c942:	f240 1283 	movw	r2, #387	; 0x183
 801c946:	4926      	ldr	r1, [pc, #152]	; (801c9e0 <etharp_find_entry+0x2e8>)
 801c948:	4823      	ldr	r0, [pc, #140]	; (801c9d8 <etharp_find_entry+0x2e0>)
 801c94a:	f007 ff61 	bl	8024810 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c94e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c952:	491e      	ldr	r1, [pc, #120]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c954:	4613      	mov	r3, r2
 801c956:	005b      	lsls	r3, r3, #1
 801c958:	4413      	add	r3, r2
 801c95a:	00db      	lsls	r3, r3, #3
 801c95c:	440b      	add	r3, r1
 801c95e:	3314      	adds	r3, #20
 801c960:	781b      	ldrb	r3, [r3, #0]
 801c962:	2b00      	cmp	r3, #0
 801c964:	d006      	beq.n	801c974 <etharp_find_entry+0x27c>
 801c966:	4b1a      	ldr	r3, [pc, #104]	; (801c9d0 <etharp_find_entry+0x2d8>)
 801c968:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801c96c:	491d      	ldr	r1, [pc, #116]	; (801c9e4 <etharp_find_entry+0x2ec>)
 801c96e:	481a      	ldr	r0, [pc, #104]	; (801c9d8 <etharp_find_entry+0x2e0>)
 801c970:	f007 ff4e 	bl	8024810 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	2b00      	cmp	r3, #0
 801c978:	d00b      	beq.n	801c992 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c97a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	6819      	ldr	r1, [r3, #0]
 801c982:	4812      	ldr	r0, [pc, #72]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c984:	4613      	mov	r3, r2
 801c986:	005b      	lsls	r3, r3, #1
 801c988:	4413      	add	r3, r2
 801c98a:	00db      	lsls	r3, r3, #3
 801c98c:	4403      	add	r3, r0
 801c98e:	3304      	adds	r3, #4
 801c990:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c992:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c996:	490d      	ldr	r1, [pc, #52]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c998:	4613      	mov	r3, r2
 801c99a:	005b      	lsls	r3, r3, #1
 801c99c:	4413      	add	r3, r2
 801c99e:	00db      	lsls	r3, r3, #3
 801c9a0:	440b      	add	r3, r1
 801c9a2:	3312      	adds	r3, #18
 801c9a4:	2200      	movs	r2, #0
 801c9a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c9a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c9ac:	4907      	ldr	r1, [pc, #28]	; (801c9cc <etharp_find_entry+0x2d4>)
 801c9ae:	4613      	mov	r3, r2
 801c9b0:	005b      	lsls	r3, r3, #1
 801c9b2:	4413      	add	r3, r2
 801c9b4:	00db      	lsls	r3, r3, #3
 801c9b6:	440b      	add	r3, r1
 801c9b8:	3308      	adds	r3, #8
 801c9ba:	687a      	ldr	r2, [r7, #4]
 801c9bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c9be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	3728      	adds	r7, #40	; 0x28
 801c9c6:	46bd      	mov	sp, r7
 801c9c8:	bd80      	pop	{r7, pc}
 801c9ca:	bf00      	nop
 801c9cc:	2001ad38 	.word	0x2001ad38
 801c9d0:	0802c4fc 	.word	0x0802c4fc
 801c9d4:	0802c534 	.word	0x0802c534
 801c9d8:	0802c574 	.word	0x0802c574
 801c9dc:	0802c59c 	.word	0x0802c59c
 801c9e0:	0802c5b4 	.word	0x0802c5b4
 801c9e4:	0802c5c8 	.word	0x0802c5c8

0801c9e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c9e8:	b580      	push	{r7, lr}
 801c9ea:	b088      	sub	sp, #32
 801c9ec:	af02      	add	r7, sp, #8
 801c9ee:	60f8      	str	r0, [r7, #12]
 801c9f0:	60b9      	str	r1, [r7, #8]
 801c9f2:	607a      	str	r2, [r7, #4]
 801c9f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c9f6:	68fb      	ldr	r3, [r7, #12]
 801c9f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c9fc:	2b06      	cmp	r3, #6
 801c9fe:	d006      	beq.n	801ca0e <etharp_update_arp_entry+0x26>
 801ca00:	4b48      	ldr	r3, [pc, #288]	; (801cb24 <etharp_update_arp_entry+0x13c>)
 801ca02:	f240 12a9 	movw	r2, #425	; 0x1a9
 801ca06:	4948      	ldr	r1, [pc, #288]	; (801cb28 <etharp_update_arp_entry+0x140>)
 801ca08:	4848      	ldr	r0, [pc, #288]	; (801cb2c <etharp_update_arp_entry+0x144>)
 801ca0a:	f007 ff01 	bl	8024810 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801ca0e:	68bb      	ldr	r3, [r7, #8]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d012      	beq.n	801ca3a <etharp_update_arp_entry+0x52>
 801ca14:	68bb      	ldr	r3, [r7, #8]
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d00e      	beq.n	801ca3a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ca1c:	68bb      	ldr	r3, [r7, #8]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	68f9      	ldr	r1, [r7, #12]
 801ca22:	4618      	mov	r0, r3
 801ca24:	f001 f8fe 	bl	801dc24 <ip4_addr_isbroadcast_u32>
 801ca28:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d105      	bne.n	801ca3a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801ca2e:	68bb      	ldr	r3, [r7, #8]
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ca36:	2be0      	cmp	r3, #224	; 0xe0
 801ca38:	d102      	bne.n	801ca40 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ca3a:	f06f 030f 	mvn.w	r3, #15
 801ca3e:	e06c      	b.n	801cb1a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ca40:	78fb      	ldrb	r3, [r7, #3]
 801ca42:	68fa      	ldr	r2, [r7, #12]
 801ca44:	4619      	mov	r1, r3
 801ca46:	68b8      	ldr	r0, [r7, #8]
 801ca48:	f7ff fe56 	bl	801c6f8 <etharp_find_entry>
 801ca4c:	4603      	mov	r3, r0
 801ca4e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ca50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	da02      	bge.n	801ca5e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ca58:	8afb      	ldrh	r3, [r7, #22]
 801ca5a:	b25b      	sxtb	r3, r3
 801ca5c:	e05d      	b.n	801cb1a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ca5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ca62:	4933      	ldr	r1, [pc, #204]	; (801cb30 <etharp_update_arp_entry+0x148>)
 801ca64:	4613      	mov	r3, r2
 801ca66:	005b      	lsls	r3, r3, #1
 801ca68:	4413      	add	r3, r2
 801ca6a:	00db      	lsls	r3, r3, #3
 801ca6c:	440b      	add	r3, r1
 801ca6e:	3314      	adds	r3, #20
 801ca70:	2202      	movs	r2, #2
 801ca72:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ca74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ca78:	492d      	ldr	r1, [pc, #180]	; (801cb30 <etharp_update_arp_entry+0x148>)
 801ca7a:	4613      	mov	r3, r2
 801ca7c:	005b      	lsls	r3, r3, #1
 801ca7e:	4413      	add	r3, r2
 801ca80:	00db      	lsls	r3, r3, #3
 801ca82:	440b      	add	r3, r1
 801ca84:	3308      	adds	r3, #8
 801ca86:	68fa      	ldr	r2, [r7, #12]
 801ca88:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801ca8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ca8e:	4613      	mov	r3, r2
 801ca90:	005b      	lsls	r3, r3, #1
 801ca92:	4413      	add	r3, r2
 801ca94:	00db      	lsls	r3, r3, #3
 801ca96:	3308      	adds	r3, #8
 801ca98:	4a25      	ldr	r2, [pc, #148]	; (801cb30 <etharp_update_arp_entry+0x148>)
 801ca9a:	4413      	add	r3, r2
 801ca9c:	3304      	adds	r3, #4
 801ca9e:	2206      	movs	r2, #6
 801caa0:	6879      	ldr	r1, [r7, #4]
 801caa2:	4618      	mov	r0, r3
 801caa4:	f006 ff75 	bl	8023992 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801caa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801caac:	4920      	ldr	r1, [pc, #128]	; (801cb30 <etharp_update_arp_entry+0x148>)
 801caae:	4613      	mov	r3, r2
 801cab0:	005b      	lsls	r3, r3, #1
 801cab2:	4413      	add	r3, r2
 801cab4:	00db      	lsls	r3, r3, #3
 801cab6:	440b      	add	r3, r1
 801cab8:	3312      	adds	r3, #18
 801caba:	2200      	movs	r2, #0
 801cabc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801cabe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cac2:	491b      	ldr	r1, [pc, #108]	; (801cb30 <etharp_update_arp_entry+0x148>)
 801cac4:	4613      	mov	r3, r2
 801cac6:	005b      	lsls	r3, r3, #1
 801cac8:	4413      	add	r3, r2
 801caca:	00db      	lsls	r3, r3, #3
 801cacc:	440b      	add	r3, r1
 801cace:	681b      	ldr	r3, [r3, #0]
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	d021      	beq.n	801cb18 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801cad4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cad8:	4915      	ldr	r1, [pc, #84]	; (801cb30 <etharp_update_arp_entry+0x148>)
 801cada:	4613      	mov	r3, r2
 801cadc:	005b      	lsls	r3, r3, #1
 801cade:	4413      	add	r3, r2
 801cae0:	00db      	lsls	r3, r3, #3
 801cae2:	440b      	add	r3, r1
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801cae8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801caec:	4910      	ldr	r1, [pc, #64]	; (801cb30 <etharp_update_arp_entry+0x148>)
 801caee:	4613      	mov	r3, r2
 801caf0:	005b      	lsls	r3, r3, #1
 801caf2:	4413      	add	r3, r2
 801caf4:	00db      	lsls	r3, r3, #3
 801caf6:	440b      	add	r3, r1
 801caf8:	2200      	movs	r2, #0
 801cafa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801cafc:	68fb      	ldr	r3, [r7, #12]
 801cafe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801cb02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cb06:	9300      	str	r3, [sp, #0]
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	6939      	ldr	r1, [r7, #16]
 801cb0c:	68f8      	ldr	r0, [r7, #12]
 801cb0e:	f001 ff97 	bl	801ea40 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801cb12:	6938      	ldr	r0, [r7, #16]
 801cb14:	f7f8 fd7c 	bl	8015610 <pbuf_free>
  }
  return ERR_OK;
 801cb18:	2300      	movs	r3, #0
}
 801cb1a:	4618      	mov	r0, r3
 801cb1c:	3718      	adds	r7, #24
 801cb1e:	46bd      	mov	sp, r7
 801cb20:	bd80      	pop	{r7, pc}
 801cb22:	bf00      	nop
 801cb24:	0802c4fc 	.word	0x0802c4fc
 801cb28:	0802c5f4 	.word	0x0802c5f4
 801cb2c:	0802c574 	.word	0x0802c574
 801cb30:	2001ad38 	.word	0x2001ad38

0801cb34 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b084      	sub	sp, #16
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cb3c:	2300      	movs	r3, #0
 801cb3e:	60fb      	str	r3, [r7, #12]
 801cb40:	e01e      	b.n	801cb80 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801cb42:	4913      	ldr	r1, [pc, #76]	; (801cb90 <etharp_cleanup_netif+0x5c>)
 801cb44:	68fa      	ldr	r2, [r7, #12]
 801cb46:	4613      	mov	r3, r2
 801cb48:	005b      	lsls	r3, r3, #1
 801cb4a:	4413      	add	r3, r2
 801cb4c:	00db      	lsls	r3, r3, #3
 801cb4e:	440b      	add	r3, r1
 801cb50:	3314      	adds	r3, #20
 801cb52:	781b      	ldrb	r3, [r3, #0]
 801cb54:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801cb56:	7afb      	ldrb	r3, [r7, #11]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d00e      	beq.n	801cb7a <etharp_cleanup_netif+0x46>
 801cb5c:	490c      	ldr	r1, [pc, #48]	; (801cb90 <etharp_cleanup_netif+0x5c>)
 801cb5e:	68fa      	ldr	r2, [r7, #12]
 801cb60:	4613      	mov	r3, r2
 801cb62:	005b      	lsls	r3, r3, #1
 801cb64:	4413      	add	r3, r2
 801cb66:	00db      	lsls	r3, r3, #3
 801cb68:	440b      	add	r3, r1
 801cb6a:	3308      	adds	r3, #8
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	687a      	ldr	r2, [r7, #4]
 801cb70:	429a      	cmp	r2, r3
 801cb72:	d102      	bne.n	801cb7a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801cb74:	68f8      	ldr	r0, [r7, #12]
 801cb76:	f7ff fce5 	bl	801c544 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	3301      	adds	r3, #1
 801cb7e:	60fb      	str	r3, [r7, #12]
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	2b09      	cmp	r3, #9
 801cb84:	dddd      	ble.n	801cb42 <etharp_cleanup_netif+0xe>
    }
  }
}
 801cb86:	bf00      	nop
 801cb88:	bf00      	nop
 801cb8a:	3710      	adds	r7, #16
 801cb8c:	46bd      	mov	sp, r7
 801cb8e:	bd80      	pop	{r7, pc}
 801cb90:	2001ad38 	.word	0x2001ad38

0801cb94 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801cb94:	b5b0      	push	{r4, r5, r7, lr}
 801cb96:	b08a      	sub	sp, #40	; 0x28
 801cb98:	af04      	add	r7, sp, #16
 801cb9a:	6078      	str	r0, [r7, #4]
 801cb9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cb9e:	683b      	ldr	r3, [r7, #0]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d107      	bne.n	801cbb4 <etharp_input+0x20>
 801cba4:	4b3d      	ldr	r3, [pc, #244]	; (801cc9c <etharp_input+0x108>)
 801cba6:	f240 228a 	movw	r2, #650	; 0x28a
 801cbaa:	493d      	ldr	r1, [pc, #244]	; (801cca0 <etharp_input+0x10c>)
 801cbac:	483d      	ldr	r0, [pc, #244]	; (801cca4 <etharp_input+0x110>)
 801cbae:	f007 fe2f 	bl	8024810 <iprintf>
 801cbb2:	e06f      	b.n	801cc94 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	685b      	ldr	r3, [r3, #4]
 801cbb8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cbba:	693b      	ldr	r3, [r7, #16]
 801cbbc:	881b      	ldrh	r3, [r3, #0]
 801cbbe:	b29b      	uxth	r3, r3
 801cbc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cbc4:	d10c      	bne.n	801cbe0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cbc6:	693b      	ldr	r3, [r7, #16]
 801cbc8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cbca:	2b06      	cmp	r3, #6
 801cbcc:	d108      	bne.n	801cbe0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cbce:	693b      	ldr	r3, [r7, #16]
 801cbd0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cbd2:	2b04      	cmp	r3, #4
 801cbd4:	d104      	bne.n	801cbe0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801cbd6:	693b      	ldr	r3, [r7, #16]
 801cbd8:	885b      	ldrh	r3, [r3, #2]
 801cbda:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cbdc:	2b08      	cmp	r3, #8
 801cbde:	d003      	beq.n	801cbe8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801cbe0:	6878      	ldr	r0, [r7, #4]
 801cbe2:	f7f8 fd15 	bl	8015610 <pbuf_free>
    return;
 801cbe6:	e055      	b.n	801cc94 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801cbe8:	693b      	ldr	r3, [r7, #16]
 801cbea:	330e      	adds	r3, #14
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801cbf0:	693b      	ldr	r3, [r7, #16]
 801cbf2:	3318      	adds	r3, #24
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cbf8:	683b      	ldr	r3, [r7, #0]
 801cbfa:	3304      	adds	r3, #4
 801cbfc:	681b      	ldr	r3, [r3, #0]
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d102      	bne.n	801cc08 <etharp_input+0x74>
    for_us = 0;
 801cc02:	2300      	movs	r3, #0
 801cc04:	75fb      	strb	r3, [r7, #23]
 801cc06:	e009      	b.n	801cc1c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801cc08:	68ba      	ldr	r2, [r7, #8]
 801cc0a:	683b      	ldr	r3, [r7, #0]
 801cc0c:	3304      	adds	r3, #4
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	429a      	cmp	r2, r3
 801cc12:	bf0c      	ite	eq
 801cc14:	2301      	moveq	r3, #1
 801cc16:	2300      	movne	r3, #0
 801cc18:	b2db      	uxtb	r3, r3
 801cc1a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801cc1c:	693b      	ldr	r3, [r7, #16]
 801cc1e:	f103 0208 	add.w	r2, r3, #8
 801cc22:	7dfb      	ldrb	r3, [r7, #23]
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d001      	beq.n	801cc2c <etharp_input+0x98>
 801cc28:	2301      	movs	r3, #1
 801cc2a:	e000      	b.n	801cc2e <etharp_input+0x9a>
 801cc2c:	2302      	movs	r3, #2
 801cc2e:	f107 010c 	add.w	r1, r7, #12
 801cc32:	6838      	ldr	r0, [r7, #0]
 801cc34:	f7ff fed8 	bl	801c9e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801cc38:	693b      	ldr	r3, [r7, #16]
 801cc3a:	88db      	ldrh	r3, [r3, #6]
 801cc3c:	b29b      	uxth	r3, r3
 801cc3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cc42:	d003      	beq.n	801cc4c <etharp_input+0xb8>
 801cc44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cc48:	d01e      	beq.n	801cc88 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801cc4a:	e020      	b.n	801cc8e <etharp_input+0xfa>
      if (for_us) {
 801cc4c:	7dfb      	ldrb	r3, [r7, #23]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d01c      	beq.n	801cc8c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801cc52:	683b      	ldr	r3, [r7, #0]
 801cc54:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801cc58:	693b      	ldr	r3, [r7, #16]
 801cc5a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801cc5e:	683b      	ldr	r3, [r7, #0]
 801cc60:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801cc64:	683b      	ldr	r3, [r7, #0]
 801cc66:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801cc68:	693a      	ldr	r2, [r7, #16]
 801cc6a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801cc6c:	2102      	movs	r1, #2
 801cc6e:	9103      	str	r1, [sp, #12]
 801cc70:	f107 010c 	add.w	r1, r7, #12
 801cc74:	9102      	str	r1, [sp, #8]
 801cc76:	9201      	str	r2, [sp, #4]
 801cc78:	9300      	str	r3, [sp, #0]
 801cc7a:	462b      	mov	r3, r5
 801cc7c:	4622      	mov	r2, r4
 801cc7e:	4601      	mov	r1, r0
 801cc80:	6838      	ldr	r0, [r7, #0]
 801cc82:	f000 faeb 	bl	801d25c <etharp_raw>
      break;
 801cc86:	e001      	b.n	801cc8c <etharp_input+0xf8>
      break;
 801cc88:	bf00      	nop
 801cc8a:	e000      	b.n	801cc8e <etharp_input+0xfa>
      break;
 801cc8c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801cc8e:	6878      	ldr	r0, [r7, #4]
 801cc90:	f7f8 fcbe 	bl	8015610 <pbuf_free>
}
 801cc94:	3718      	adds	r7, #24
 801cc96:	46bd      	mov	sp, r7
 801cc98:	bdb0      	pop	{r4, r5, r7, pc}
 801cc9a:	bf00      	nop
 801cc9c:	0802c4fc 	.word	0x0802c4fc
 801cca0:	0802c64c 	.word	0x0802c64c
 801cca4:	0802c574 	.word	0x0802c574

0801cca8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801cca8:	b580      	push	{r7, lr}
 801ccaa:	b086      	sub	sp, #24
 801ccac:	af02      	add	r7, sp, #8
 801ccae:	60f8      	str	r0, [r7, #12]
 801ccb0:	60b9      	str	r1, [r7, #8]
 801ccb2:	4613      	mov	r3, r2
 801ccb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ccb6:	79fa      	ldrb	r2, [r7, #7]
 801ccb8:	4944      	ldr	r1, [pc, #272]	; (801cdcc <etharp_output_to_arp_index+0x124>)
 801ccba:	4613      	mov	r3, r2
 801ccbc:	005b      	lsls	r3, r3, #1
 801ccbe:	4413      	add	r3, r2
 801ccc0:	00db      	lsls	r3, r3, #3
 801ccc2:	440b      	add	r3, r1
 801ccc4:	3314      	adds	r3, #20
 801ccc6:	781b      	ldrb	r3, [r3, #0]
 801ccc8:	2b01      	cmp	r3, #1
 801ccca:	d806      	bhi.n	801ccda <etharp_output_to_arp_index+0x32>
 801cccc:	4b40      	ldr	r3, [pc, #256]	; (801cdd0 <etharp_output_to_arp_index+0x128>)
 801ccce:	f240 22ee 	movw	r2, #750	; 0x2ee
 801ccd2:	4940      	ldr	r1, [pc, #256]	; (801cdd4 <etharp_output_to_arp_index+0x12c>)
 801ccd4:	4840      	ldr	r0, [pc, #256]	; (801cdd8 <etharp_output_to_arp_index+0x130>)
 801ccd6:	f007 fd9b 	bl	8024810 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ccda:	79fa      	ldrb	r2, [r7, #7]
 801ccdc:	493b      	ldr	r1, [pc, #236]	; (801cdcc <etharp_output_to_arp_index+0x124>)
 801ccde:	4613      	mov	r3, r2
 801cce0:	005b      	lsls	r3, r3, #1
 801cce2:	4413      	add	r3, r2
 801cce4:	00db      	lsls	r3, r3, #3
 801cce6:	440b      	add	r3, r1
 801cce8:	3314      	adds	r3, #20
 801ccea:	781b      	ldrb	r3, [r3, #0]
 801ccec:	2b02      	cmp	r3, #2
 801ccee:	d153      	bne.n	801cd98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801ccf0:	79fa      	ldrb	r2, [r7, #7]
 801ccf2:	4936      	ldr	r1, [pc, #216]	; (801cdcc <etharp_output_to_arp_index+0x124>)
 801ccf4:	4613      	mov	r3, r2
 801ccf6:	005b      	lsls	r3, r3, #1
 801ccf8:	4413      	add	r3, r2
 801ccfa:	00db      	lsls	r3, r3, #3
 801ccfc:	440b      	add	r3, r1
 801ccfe:	3312      	adds	r3, #18
 801cd00:	881b      	ldrh	r3, [r3, #0]
 801cd02:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801cd06:	d919      	bls.n	801cd3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801cd08:	79fa      	ldrb	r2, [r7, #7]
 801cd0a:	4613      	mov	r3, r2
 801cd0c:	005b      	lsls	r3, r3, #1
 801cd0e:	4413      	add	r3, r2
 801cd10:	00db      	lsls	r3, r3, #3
 801cd12:	4a2e      	ldr	r2, [pc, #184]	; (801cdcc <etharp_output_to_arp_index+0x124>)
 801cd14:	4413      	add	r3, r2
 801cd16:	3304      	adds	r3, #4
 801cd18:	4619      	mov	r1, r3
 801cd1a:	68f8      	ldr	r0, [r7, #12]
 801cd1c:	f000 fb4c 	bl	801d3b8 <etharp_request>
 801cd20:	4603      	mov	r3, r0
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d138      	bne.n	801cd98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cd26:	79fa      	ldrb	r2, [r7, #7]
 801cd28:	4928      	ldr	r1, [pc, #160]	; (801cdcc <etharp_output_to_arp_index+0x124>)
 801cd2a:	4613      	mov	r3, r2
 801cd2c:	005b      	lsls	r3, r3, #1
 801cd2e:	4413      	add	r3, r2
 801cd30:	00db      	lsls	r3, r3, #3
 801cd32:	440b      	add	r3, r1
 801cd34:	3314      	adds	r3, #20
 801cd36:	2203      	movs	r2, #3
 801cd38:	701a      	strb	r2, [r3, #0]
 801cd3a:	e02d      	b.n	801cd98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801cd3c:	79fa      	ldrb	r2, [r7, #7]
 801cd3e:	4923      	ldr	r1, [pc, #140]	; (801cdcc <etharp_output_to_arp_index+0x124>)
 801cd40:	4613      	mov	r3, r2
 801cd42:	005b      	lsls	r3, r3, #1
 801cd44:	4413      	add	r3, r2
 801cd46:	00db      	lsls	r3, r3, #3
 801cd48:	440b      	add	r3, r1
 801cd4a:	3312      	adds	r3, #18
 801cd4c:	881b      	ldrh	r3, [r3, #0]
 801cd4e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801cd52:	d321      	bcc.n	801cd98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801cd54:	79fa      	ldrb	r2, [r7, #7]
 801cd56:	4613      	mov	r3, r2
 801cd58:	005b      	lsls	r3, r3, #1
 801cd5a:	4413      	add	r3, r2
 801cd5c:	00db      	lsls	r3, r3, #3
 801cd5e:	4a1b      	ldr	r2, [pc, #108]	; (801cdcc <etharp_output_to_arp_index+0x124>)
 801cd60:	4413      	add	r3, r2
 801cd62:	1d19      	adds	r1, r3, #4
 801cd64:	79fa      	ldrb	r2, [r7, #7]
 801cd66:	4613      	mov	r3, r2
 801cd68:	005b      	lsls	r3, r3, #1
 801cd6a:	4413      	add	r3, r2
 801cd6c:	00db      	lsls	r3, r3, #3
 801cd6e:	3308      	adds	r3, #8
 801cd70:	4a16      	ldr	r2, [pc, #88]	; (801cdcc <etharp_output_to_arp_index+0x124>)
 801cd72:	4413      	add	r3, r2
 801cd74:	3304      	adds	r3, #4
 801cd76:	461a      	mov	r2, r3
 801cd78:	68f8      	ldr	r0, [r7, #12]
 801cd7a:	f000 fafb 	bl	801d374 <etharp_request_dst>
 801cd7e:	4603      	mov	r3, r0
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d109      	bne.n	801cd98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cd84:	79fa      	ldrb	r2, [r7, #7]
 801cd86:	4911      	ldr	r1, [pc, #68]	; (801cdcc <etharp_output_to_arp_index+0x124>)
 801cd88:	4613      	mov	r3, r2
 801cd8a:	005b      	lsls	r3, r3, #1
 801cd8c:	4413      	add	r3, r2
 801cd8e:	00db      	lsls	r3, r3, #3
 801cd90:	440b      	add	r3, r1
 801cd92:	3314      	adds	r3, #20
 801cd94:	2203      	movs	r2, #3
 801cd96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801cd98:	68fb      	ldr	r3, [r7, #12]
 801cd9a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801cd9e:	79fa      	ldrb	r2, [r7, #7]
 801cda0:	4613      	mov	r3, r2
 801cda2:	005b      	lsls	r3, r3, #1
 801cda4:	4413      	add	r3, r2
 801cda6:	00db      	lsls	r3, r3, #3
 801cda8:	3308      	adds	r3, #8
 801cdaa:	4a08      	ldr	r2, [pc, #32]	; (801cdcc <etharp_output_to_arp_index+0x124>)
 801cdac:	4413      	add	r3, r2
 801cdae:	3304      	adds	r3, #4
 801cdb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801cdb4:	9200      	str	r2, [sp, #0]
 801cdb6:	460a      	mov	r2, r1
 801cdb8:	68b9      	ldr	r1, [r7, #8]
 801cdba:	68f8      	ldr	r0, [r7, #12]
 801cdbc:	f001 fe40 	bl	801ea40 <ethernet_output>
 801cdc0:	4603      	mov	r3, r0
}
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	3710      	adds	r7, #16
 801cdc6:	46bd      	mov	sp, r7
 801cdc8:	bd80      	pop	{r7, pc}
 801cdca:	bf00      	nop
 801cdcc:	2001ad38 	.word	0x2001ad38
 801cdd0:	0802c4fc 	.word	0x0802c4fc
 801cdd4:	0802c66c 	.word	0x0802c66c
 801cdd8:	0802c574 	.word	0x0802c574

0801cddc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801cddc:	b580      	push	{r7, lr}
 801cdde:	b08a      	sub	sp, #40	; 0x28
 801cde0:	af02      	add	r7, sp, #8
 801cde2:	60f8      	str	r0, [r7, #12]
 801cde4:	60b9      	str	r1, [r7, #8]
 801cde6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801cdec:	68fb      	ldr	r3, [r7, #12]
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d106      	bne.n	801ce00 <etharp_output+0x24>
 801cdf2:	4b73      	ldr	r3, [pc, #460]	; (801cfc0 <etharp_output+0x1e4>)
 801cdf4:	f240 321e 	movw	r2, #798	; 0x31e
 801cdf8:	4972      	ldr	r1, [pc, #456]	; (801cfc4 <etharp_output+0x1e8>)
 801cdfa:	4873      	ldr	r0, [pc, #460]	; (801cfc8 <etharp_output+0x1ec>)
 801cdfc:	f007 fd08 	bl	8024810 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ce00:	68bb      	ldr	r3, [r7, #8]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d106      	bne.n	801ce14 <etharp_output+0x38>
 801ce06:	4b6e      	ldr	r3, [pc, #440]	; (801cfc0 <etharp_output+0x1e4>)
 801ce08:	f240 321f 	movw	r2, #799	; 0x31f
 801ce0c:	496f      	ldr	r1, [pc, #444]	; (801cfcc <etharp_output+0x1f0>)
 801ce0e:	486e      	ldr	r0, [pc, #440]	; (801cfc8 <etharp_output+0x1ec>)
 801ce10:	f007 fcfe 	bl	8024810 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d106      	bne.n	801ce28 <etharp_output+0x4c>
 801ce1a:	4b69      	ldr	r3, [pc, #420]	; (801cfc0 <etharp_output+0x1e4>)
 801ce1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801ce20:	496b      	ldr	r1, [pc, #428]	; (801cfd0 <etharp_output+0x1f4>)
 801ce22:	4869      	ldr	r0, [pc, #420]	; (801cfc8 <etharp_output+0x1ec>)
 801ce24:	f007 fcf4 	bl	8024810 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	68f9      	ldr	r1, [r7, #12]
 801ce2e:	4618      	mov	r0, r3
 801ce30:	f000 fef8 	bl	801dc24 <ip4_addr_isbroadcast_u32>
 801ce34:	4603      	mov	r3, r0
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d002      	beq.n	801ce40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ce3a:	4b66      	ldr	r3, [pc, #408]	; (801cfd4 <etharp_output+0x1f8>)
 801ce3c:	61fb      	str	r3, [r7, #28]
 801ce3e:	e0af      	b.n	801cfa0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ce48:	2be0      	cmp	r3, #224	; 0xe0
 801ce4a:	d118      	bne.n	801ce7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ce4c:	2301      	movs	r3, #1
 801ce4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ce50:	2300      	movs	r3, #0
 801ce52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ce54:	235e      	movs	r3, #94	; 0x5e
 801ce56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	3301      	adds	r3, #1
 801ce5c:	781b      	ldrb	r3, [r3, #0]
 801ce5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ce62:	b2db      	uxtb	r3, r3
 801ce64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	3302      	adds	r3, #2
 801ce6a:	781b      	ldrb	r3, [r3, #0]
 801ce6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	3303      	adds	r3, #3
 801ce72:	781b      	ldrb	r3, [r3, #0]
 801ce74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ce76:	f107 0310 	add.w	r3, r7, #16
 801ce7a:	61fb      	str	r3, [r7, #28]
 801ce7c:	e090      	b.n	801cfa0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	681a      	ldr	r2, [r3, #0]
 801ce82:	68fb      	ldr	r3, [r7, #12]
 801ce84:	3304      	adds	r3, #4
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	405a      	eors	r2, r3
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	3308      	adds	r3, #8
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	4013      	ands	r3, r2
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d012      	beq.n	801cebc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ce9c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801cea0:	4293      	cmp	r3, r2
 801cea2:	d00b      	beq.n	801cebc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	330c      	adds	r3, #12
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d003      	beq.n	801ceb6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	330c      	adds	r3, #12
 801ceb2:	61bb      	str	r3, [r7, #24]
 801ceb4:	e002      	b.n	801cebc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ceb6:	f06f 0303 	mvn.w	r3, #3
 801ceba:	e07d      	b.n	801cfb8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801cebc:	4b46      	ldr	r3, [pc, #280]	; (801cfd8 <etharp_output+0x1fc>)
 801cebe:	781b      	ldrb	r3, [r3, #0]
 801cec0:	4619      	mov	r1, r3
 801cec2:	4a46      	ldr	r2, [pc, #280]	; (801cfdc <etharp_output+0x200>)
 801cec4:	460b      	mov	r3, r1
 801cec6:	005b      	lsls	r3, r3, #1
 801cec8:	440b      	add	r3, r1
 801ceca:	00db      	lsls	r3, r3, #3
 801cecc:	4413      	add	r3, r2
 801cece:	3314      	adds	r3, #20
 801ced0:	781b      	ldrb	r3, [r3, #0]
 801ced2:	2b01      	cmp	r3, #1
 801ced4:	d925      	bls.n	801cf22 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ced6:	4b40      	ldr	r3, [pc, #256]	; (801cfd8 <etharp_output+0x1fc>)
 801ced8:	781b      	ldrb	r3, [r3, #0]
 801ceda:	4619      	mov	r1, r3
 801cedc:	4a3f      	ldr	r2, [pc, #252]	; (801cfdc <etharp_output+0x200>)
 801cede:	460b      	mov	r3, r1
 801cee0:	005b      	lsls	r3, r3, #1
 801cee2:	440b      	add	r3, r1
 801cee4:	00db      	lsls	r3, r3, #3
 801cee6:	4413      	add	r3, r2
 801cee8:	3308      	adds	r3, #8
 801ceea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ceec:	68fa      	ldr	r2, [r7, #12]
 801ceee:	429a      	cmp	r2, r3
 801cef0:	d117      	bne.n	801cf22 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801cef2:	69bb      	ldr	r3, [r7, #24]
 801cef4:	681a      	ldr	r2, [r3, #0]
 801cef6:	4b38      	ldr	r3, [pc, #224]	; (801cfd8 <etharp_output+0x1fc>)
 801cef8:	781b      	ldrb	r3, [r3, #0]
 801cefa:	4618      	mov	r0, r3
 801cefc:	4937      	ldr	r1, [pc, #220]	; (801cfdc <etharp_output+0x200>)
 801cefe:	4603      	mov	r3, r0
 801cf00:	005b      	lsls	r3, r3, #1
 801cf02:	4403      	add	r3, r0
 801cf04:	00db      	lsls	r3, r3, #3
 801cf06:	440b      	add	r3, r1
 801cf08:	3304      	adds	r3, #4
 801cf0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cf0c:	429a      	cmp	r2, r3
 801cf0e:	d108      	bne.n	801cf22 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801cf10:	4b31      	ldr	r3, [pc, #196]	; (801cfd8 <etharp_output+0x1fc>)
 801cf12:	781b      	ldrb	r3, [r3, #0]
 801cf14:	461a      	mov	r2, r3
 801cf16:	68b9      	ldr	r1, [r7, #8]
 801cf18:	68f8      	ldr	r0, [r7, #12]
 801cf1a:	f7ff fec5 	bl	801cca8 <etharp_output_to_arp_index>
 801cf1e:	4603      	mov	r3, r0
 801cf20:	e04a      	b.n	801cfb8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cf22:	2300      	movs	r3, #0
 801cf24:	75fb      	strb	r3, [r7, #23]
 801cf26:	e031      	b.n	801cf8c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cf28:	7dfa      	ldrb	r2, [r7, #23]
 801cf2a:	492c      	ldr	r1, [pc, #176]	; (801cfdc <etharp_output+0x200>)
 801cf2c:	4613      	mov	r3, r2
 801cf2e:	005b      	lsls	r3, r3, #1
 801cf30:	4413      	add	r3, r2
 801cf32:	00db      	lsls	r3, r3, #3
 801cf34:	440b      	add	r3, r1
 801cf36:	3314      	adds	r3, #20
 801cf38:	781b      	ldrb	r3, [r3, #0]
 801cf3a:	2b01      	cmp	r3, #1
 801cf3c:	d923      	bls.n	801cf86 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801cf3e:	7dfa      	ldrb	r2, [r7, #23]
 801cf40:	4926      	ldr	r1, [pc, #152]	; (801cfdc <etharp_output+0x200>)
 801cf42:	4613      	mov	r3, r2
 801cf44:	005b      	lsls	r3, r3, #1
 801cf46:	4413      	add	r3, r2
 801cf48:	00db      	lsls	r3, r3, #3
 801cf4a:	440b      	add	r3, r1
 801cf4c:	3308      	adds	r3, #8
 801cf4e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cf50:	68fa      	ldr	r2, [r7, #12]
 801cf52:	429a      	cmp	r2, r3
 801cf54:	d117      	bne.n	801cf86 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801cf56:	69bb      	ldr	r3, [r7, #24]
 801cf58:	6819      	ldr	r1, [r3, #0]
 801cf5a:	7dfa      	ldrb	r2, [r7, #23]
 801cf5c:	481f      	ldr	r0, [pc, #124]	; (801cfdc <etharp_output+0x200>)
 801cf5e:	4613      	mov	r3, r2
 801cf60:	005b      	lsls	r3, r3, #1
 801cf62:	4413      	add	r3, r2
 801cf64:	00db      	lsls	r3, r3, #3
 801cf66:	4403      	add	r3, r0
 801cf68:	3304      	adds	r3, #4
 801cf6a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801cf6c:	4299      	cmp	r1, r3
 801cf6e:	d10a      	bne.n	801cf86 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801cf70:	4a19      	ldr	r2, [pc, #100]	; (801cfd8 <etharp_output+0x1fc>)
 801cf72:	7dfb      	ldrb	r3, [r7, #23]
 801cf74:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801cf76:	7dfb      	ldrb	r3, [r7, #23]
 801cf78:	461a      	mov	r2, r3
 801cf7a:	68b9      	ldr	r1, [r7, #8]
 801cf7c:	68f8      	ldr	r0, [r7, #12]
 801cf7e:	f7ff fe93 	bl	801cca8 <etharp_output_to_arp_index>
 801cf82:	4603      	mov	r3, r0
 801cf84:	e018      	b.n	801cfb8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cf86:	7dfb      	ldrb	r3, [r7, #23]
 801cf88:	3301      	adds	r3, #1
 801cf8a:	75fb      	strb	r3, [r7, #23]
 801cf8c:	7dfb      	ldrb	r3, [r7, #23]
 801cf8e:	2b09      	cmp	r3, #9
 801cf90:	d9ca      	bls.n	801cf28 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801cf92:	68ba      	ldr	r2, [r7, #8]
 801cf94:	69b9      	ldr	r1, [r7, #24]
 801cf96:	68f8      	ldr	r0, [r7, #12]
 801cf98:	f000 f822 	bl	801cfe0 <etharp_query>
 801cf9c:	4603      	mov	r3, r0
 801cf9e:	e00b      	b.n	801cfb8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801cfa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cfaa:	9300      	str	r3, [sp, #0]
 801cfac:	69fb      	ldr	r3, [r7, #28]
 801cfae:	68b9      	ldr	r1, [r7, #8]
 801cfb0:	68f8      	ldr	r0, [r7, #12]
 801cfb2:	f001 fd45 	bl	801ea40 <ethernet_output>
 801cfb6:	4603      	mov	r3, r0
}
 801cfb8:	4618      	mov	r0, r3
 801cfba:	3720      	adds	r7, #32
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	bd80      	pop	{r7, pc}
 801cfc0:	0802c4fc 	.word	0x0802c4fc
 801cfc4:	0802c64c 	.word	0x0802c64c
 801cfc8:	0802c574 	.word	0x0802c574
 801cfcc:	0802c69c 	.word	0x0802c69c
 801cfd0:	0802c63c 	.word	0x0802c63c
 801cfd4:	0802d518 	.word	0x0802d518
 801cfd8:	2001ae28 	.word	0x2001ae28
 801cfdc:	2001ad38 	.word	0x2001ad38

0801cfe0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801cfe0:	b580      	push	{r7, lr}
 801cfe2:	b08c      	sub	sp, #48	; 0x30
 801cfe4:	af02      	add	r7, sp, #8
 801cfe6:	60f8      	str	r0, [r7, #12]
 801cfe8:	60b9      	str	r1, [r7, #8]
 801cfea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801cfec:	68fb      	ldr	r3, [r7, #12]
 801cfee:	3326      	adds	r3, #38	; 0x26
 801cff0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801cff2:	23ff      	movs	r3, #255	; 0xff
 801cff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801cff8:	2300      	movs	r3, #0
 801cffa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801cffc:	68bb      	ldr	r3, [r7, #8]
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	68f9      	ldr	r1, [r7, #12]
 801d002:	4618      	mov	r0, r3
 801d004:	f000 fe0e 	bl	801dc24 <ip4_addr_isbroadcast_u32>
 801d008:	4603      	mov	r3, r0
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	d10c      	bne.n	801d028 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d00e:	68bb      	ldr	r3, [r7, #8]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d016:	2be0      	cmp	r3, #224	; 0xe0
 801d018:	d006      	beq.n	801d028 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d01a:	68bb      	ldr	r3, [r7, #8]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d003      	beq.n	801d028 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d020:	68bb      	ldr	r3, [r7, #8]
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	2b00      	cmp	r3, #0
 801d026:	d102      	bne.n	801d02e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d028:	f06f 030f 	mvn.w	r3, #15
 801d02c:	e101      	b.n	801d232 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d02e:	68fa      	ldr	r2, [r7, #12]
 801d030:	2101      	movs	r1, #1
 801d032:	68b8      	ldr	r0, [r7, #8]
 801d034:	f7ff fb60 	bl	801c6f8 <etharp_find_entry>
 801d038:	4603      	mov	r3, r0
 801d03a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d03c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d040:	2b00      	cmp	r3, #0
 801d042:	da02      	bge.n	801d04a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801d044:	8a7b      	ldrh	r3, [r7, #18]
 801d046:	b25b      	sxtb	r3, r3
 801d048:	e0f3      	b.n	801d232 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d04a:	8a7b      	ldrh	r3, [r7, #18]
 801d04c:	2b7e      	cmp	r3, #126	; 0x7e
 801d04e:	d906      	bls.n	801d05e <etharp_query+0x7e>
 801d050:	4b7a      	ldr	r3, [pc, #488]	; (801d23c <etharp_query+0x25c>)
 801d052:	f240 32c1 	movw	r2, #961	; 0x3c1
 801d056:	497a      	ldr	r1, [pc, #488]	; (801d240 <etharp_query+0x260>)
 801d058:	487a      	ldr	r0, [pc, #488]	; (801d244 <etharp_query+0x264>)
 801d05a:	f007 fbd9 	bl	8024810 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d05e:	8a7b      	ldrh	r3, [r7, #18]
 801d060:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d062:	7c7a      	ldrb	r2, [r7, #17]
 801d064:	4978      	ldr	r1, [pc, #480]	; (801d248 <etharp_query+0x268>)
 801d066:	4613      	mov	r3, r2
 801d068:	005b      	lsls	r3, r3, #1
 801d06a:	4413      	add	r3, r2
 801d06c:	00db      	lsls	r3, r3, #3
 801d06e:	440b      	add	r3, r1
 801d070:	3314      	adds	r3, #20
 801d072:	781b      	ldrb	r3, [r3, #0]
 801d074:	2b00      	cmp	r3, #0
 801d076:	d115      	bne.n	801d0a4 <etharp_query+0xc4>
    is_new_entry = 1;
 801d078:	2301      	movs	r3, #1
 801d07a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d07c:	7c7a      	ldrb	r2, [r7, #17]
 801d07e:	4972      	ldr	r1, [pc, #456]	; (801d248 <etharp_query+0x268>)
 801d080:	4613      	mov	r3, r2
 801d082:	005b      	lsls	r3, r3, #1
 801d084:	4413      	add	r3, r2
 801d086:	00db      	lsls	r3, r3, #3
 801d088:	440b      	add	r3, r1
 801d08a:	3314      	adds	r3, #20
 801d08c:	2201      	movs	r2, #1
 801d08e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d090:	7c7a      	ldrb	r2, [r7, #17]
 801d092:	496d      	ldr	r1, [pc, #436]	; (801d248 <etharp_query+0x268>)
 801d094:	4613      	mov	r3, r2
 801d096:	005b      	lsls	r3, r3, #1
 801d098:	4413      	add	r3, r2
 801d09a:	00db      	lsls	r3, r3, #3
 801d09c:	440b      	add	r3, r1
 801d09e:	3308      	adds	r3, #8
 801d0a0:	68fa      	ldr	r2, [r7, #12]
 801d0a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d0a4:	7c7a      	ldrb	r2, [r7, #17]
 801d0a6:	4968      	ldr	r1, [pc, #416]	; (801d248 <etharp_query+0x268>)
 801d0a8:	4613      	mov	r3, r2
 801d0aa:	005b      	lsls	r3, r3, #1
 801d0ac:	4413      	add	r3, r2
 801d0ae:	00db      	lsls	r3, r3, #3
 801d0b0:	440b      	add	r3, r1
 801d0b2:	3314      	adds	r3, #20
 801d0b4:	781b      	ldrb	r3, [r3, #0]
 801d0b6:	2b01      	cmp	r3, #1
 801d0b8:	d011      	beq.n	801d0de <etharp_query+0xfe>
 801d0ba:	7c7a      	ldrb	r2, [r7, #17]
 801d0bc:	4962      	ldr	r1, [pc, #392]	; (801d248 <etharp_query+0x268>)
 801d0be:	4613      	mov	r3, r2
 801d0c0:	005b      	lsls	r3, r3, #1
 801d0c2:	4413      	add	r3, r2
 801d0c4:	00db      	lsls	r3, r3, #3
 801d0c6:	440b      	add	r3, r1
 801d0c8:	3314      	adds	r3, #20
 801d0ca:	781b      	ldrb	r3, [r3, #0]
 801d0cc:	2b01      	cmp	r3, #1
 801d0ce:	d806      	bhi.n	801d0de <etharp_query+0xfe>
 801d0d0:	4b5a      	ldr	r3, [pc, #360]	; (801d23c <etharp_query+0x25c>)
 801d0d2:	f240 32cd 	movw	r2, #973	; 0x3cd
 801d0d6:	495d      	ldr	r1, [pc, #372]	; (801d24c <etharp_query+0x26c>)
 801d0d8:	485a      	ldr	r0, [pc, #360]	; (801d244 <etharp_query+0x264>)
 801d0da:	f007 fb99 	bl	8024810 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d0de:	6a3b      	ldr	r3, [r7, #32]
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d102      	bne.n	801d0ea <etharp_query+0x10a>
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d10c      	bne.n	801d104 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d0ea:	68b9      	ldr	r1, [r7, #8]
 801d0ec:	68f8      	ldr	r0, [r7, #12]
 801d0ee:	f000 f963 	bl	801d3b8 <etharp_request>
 801d0f2:	4603      	mov	r3, r0
 801d0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d102      	bne.n	801d104 <etharp_query+0x124>
      return result;
 801d0fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801d102:	e096      	b.n	801d232 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	2b00      	cmp	r3, #0
 801d108:	d106      	bne.n	801d118 <etharp_query+0x138>
 801d10a:	4b4c      	ldr	r3, [pc, #304]	; (801d23c <etharp_query+0x25c>)
 801d10c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801d110:	494f      	ldr	r1, [pc, #316]	; (801d250 <etharp_query+0x270>)
 801d112:	484c      	ldr	r0, [pc, #304]	; (801d244 <etharp_query+0x264>)
 801d114:	f007 fb7c 	bl	8024810 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d118:	7c7a      	ldrb	r2, [r7, #17]
 801d11a:	494b      	ldr	r1, [pc, #300]	; (801d248 <etharp_query+0x268>)
 801d11c:	4613      	mov	r3, r2
 801d11e:	005b      	lsls	r3, r3, #1
 801d120:	4413      	add	r3, r2
 801d122:	00db      	lsls	r3, r3, #3
 801d124:	440b      	add	r3, r1
 801d126:	3314      	adds	r3, #20
 801d128:	781b      	ldrb	r3, [r3, #0]
 801d12a:	2b01      	cmp	r3, #1
 801d12c:	d917      	bls.n	801d15e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801d12e:	4a49      	ldr	r2, [pc, #292]	; (801d254 <etharp_query+0x274>)
 801d130:	7c7b      	ldrb	r3, [r7, #17]
 801d132:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d134:	7c7a      	ldrb	r2, [r7, #17]
 801d136:	4613      	mov	r3, r2
 801d138:	005b      	lsls	r3, r3, #1
 801d13a:	4413      	add	r3, r2
 801d13c:	00db      	lsls	r3, r3, #3
 801d13e:	3308      	adds	r3, #8
 801d140:	4a41      	ldr	r2, [pc, #260]	; (801d248 <etharp_query+0x268>)
 801d142:	4413      	add	r3, r2
 801d144:	3304      	adds	r3, #4
 801d146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d14a:	9200      	str	r2, [sp, #0]
 801d14c:	697a      	ldr	r2, [r7, #20]
 801d14e:	6879      	ldr	r1, [r7, #4]
 801d150:	68f8      	ldr	r0, [r7, #12]
 801d152:	f001 fc75 	bl	801ea40 <ethernet_output>
 801d156:	4603      	mov	r3, r0
 801d158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d15c:	e067      	b.n	801d22e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d15e:	7c7a      	ldrb	r2, [r7, #17]
 801d160:	4939      	ldr	r1, [pc, #228]	; (801d248 <etharp_query+0x268>)
 801d162:	4613      	mov	r3, r2
 801d164:	005b      	lsls	r3, r3, #1
 801d166:	4413      	add	r3, r2
 801d168:	00db      	lsls	r3, r3, #3
 801d16a:	440b      	add	r3, r1
 801d16c:	3314      	adds	r3, #20
 801d16e:	781b      	ldrb	r3, [r3, #0]
 801d170:	2b01      	cmp	r3, #1
 801d172:	d15c      	bne.n	801d22e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d174:	2300      	movs	r3, #0
 801d176:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d17c:	e01c      	b.n	801d1b8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d17e:	69fb      	ldr	r3, [r7, #28]
 801d180:	895a      	ldrh	r2, [r3, #10]
 801d182:	69fb      	ldr	r3, [r7, #28]
 801d184:	891b      	ldrh	r3, [r3, #8]
 801d186:	429a      	cmp	r2, r3
 801d188:	d10a      	bne.n	801d1a0 <etharp_query+0x1c0>
 801d18a:	69fb      	ldr	r3, [r7, #28]
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d006      	beq.n	801d1a0 <etharp_query+0x1c0>
 801d192:	4b2a      	ldr	r3, [pc, #168]	; (801d23c <etharp_query+0x25c>)
 801d194:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801d198:	492f      	ldr	r1, [pc, #188]	; (801d258 <etharp_query+0x278>)
 801d19a:	482a      	ldr	r0, [pc, #168]	; (801d244 <etharp_query+0x264>)
 801d19c:	f007 fb38 	bl	8024810 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d1a0:	69fb      	ldr	r3, [r7, #28]
 801d1a2:	7b1b      	ldrb	r3, [r3, #12]
 801d1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d002      	beq.n	801d1b2 <etharp_query+0x1d2>
        copy_needed = 1;
 801d1ac:	2301      	movs	r3, #1
 801d1ae:	61bb      	str	r3, [r7, #24]
        break;
 801d1b0:	e005      	b.n	801d1be <etharp_query+0x1de>
      }
      p = p->next;
 801d1b2:	69fb      	ldr	r3, [r7, #28]
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d1b8:	69fb      	ldr	r3, [r7, #28]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d1df      	bne.n	801d17e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801d1be:	69bb      	ldr	r3, [r7, #24]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d007      	beq.n	801d1d4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d1c4:	687a      	ldr	r2, [r7, #4]
 801d1c6:	f44f 7120 	mov.w	r1, #640	; 0x280
 801d1ca:	200e      	movs	r0, #14
 801d1cc:	f7f8 fc88 	bl	8015ae0 <pbuf_clone>
 801d1d0:	61f8      	str	r0, [r7, #28]
 801d1d2:	e004      	b.n	801d1de <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d1d8:	69f8      	ldr	r0, [r7, #28]
 801d1da:	f7f8 fabf 	bl	801575c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d1de:	69fb      	ldr	r3, [r7, #28]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d021      	beq.n	801d228 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d1e4:	7c7a      	ldrb	r2, [r7, #17]
 801d1e6:	4918      	ldr	r1, [pc, #96]	; (801d248 <etharp_query+0x268>)
 801d1e8:	4613      	mov	r3, r2
 801d1ea:	005b      	lsls	r3, r3, #1
 801d1ec:	4413      	add	r3, r2
 801d1ee:	00db      	lsls	r3, r3, #3
 801d1f0:	440b      	add	r3, r1
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d00a      	beq.n	801d20e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d1f8:	7c7a      	ldrb	r2, [r7, #17]
 801d1fa:	4913      	ldr	r1, [pc, #76]	; (801d248 <etharp_query+0x268>)
 801d1fc:	4613      	mov	r3, r2
 801d1fe:	005b      	lsls	r3, r3, #1
 801d200:	4413      	add	r3, r2
 801d202:	00db      	lsls	r3, r3, #3
 801d204:	440b      	add	r3, r1
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	4618      	mov	r0, r3
 801d20a:	f7f8 fa01 	bl	8015610 <pbuf_free>
      }
      arp_table[i].q = p;
 801d20e:	7c7a      	ldrb	r2, [r7, #17]
 801d210:	490d      	ldr	r1, [pc, #52]	; (801d248 <etharp_query+0x268>)
 801d212:	4613      	mov	r3, r2
 801d214:	005b      	lsls	r3, r3, #1
 801d216:	4413      	add	r3, r2
 801d218:	00db      	lsls	r3, r3, #3
 801d21a:	440b      	add	r3, r1
 801d21c:	69fa      	ldr	r2, [r7, #28]
 801d21e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d220:	2300      	movs	r3, #0
 801d222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d226:	e002      	b.n	801d22e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d228:	23ff      	movs	r3, #255	; 0xff
 801d22a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801d22e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801d232:	4618      	mov	r0, r3
 801d234:	3728      	adds	r7, #40	; 0x28
 801d236:	46bd      	mov	sp, r7
 801d238:	bd80      	pop	{r7, pc}
 801d23a:	bf00      	nop
 801d23c:	0802c4fc 	.word	0x0802c4fc
 801d240:	0802c6a8 	.word	0x0802c6a8
 801d244:	0802c574 	.word	0x0802c574
 801d248:	2001ad38 	.word	0x2001ad38
 801d24c:	0802c6b8 	.word	0x0802c6b8
 801d250:	0802c69c 	.word	0x0802c69c
 801d254:	2001ae28 	.word	0x2001ae28
 801d258:	0802c6e0 	.word	0x0802c6e0

0801d25c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b08a      	sub	sp, #40	; 0x28
 801d260:	af02      	add	r7, sp, #8
 801d262:	60f8      	str	r0, [r7, #12]
 801d264:	60b9      	str	r1, [r7, #8]
 801d266:	607a      	str	r2, [r7, #4]
 801d268:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d26a:	2300      	movs	r3, #0
 801d26c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	2b00      	cmp	r3, #0
 801d272:	d106      	bne.n	801d282 <etharp_raw+0x26>
 801d274:	4b3a      	ldr	r3, [pc, #232]	; (801d360 <etharp_raw+0x104>)
 801d276:	f240 4257 	movw	r2, #1111	; 0x457
 801d27a:	493a      	ldr	r1, [pc, #232]	; (801d364 <etharp_raw+0x108>)
 801d27c:	483a      	ldr	r0, [pc, #232]	; (801d368 <etharp_raw+0x10c>)
 801d27e:	f007 fac7 	bl	8024810 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d282:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d286:	211c      	movs	r1, #28
 801d288:	200e      	movs	r0, #14
 801d28a:	f7f7 fedd 	bl	8015048 <pbuf_alloc>
 801d28e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d290:	69bb      	ldr	r3, [r7, #24]
 801d292:	2b00      	cmp	r3, #0
 801d294:	d102      	bne.n	801d29c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801d296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d29a:	e05d      	b.n	801d358 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d29c:	69bb      	ldr	r3, [r7, #24]
 801d29e:	895b      	ldrh	r3, [r3, #10]
 801d2a0:	2b1b      	cmp	r3, #27
 801d2a2:	d806      	bhi.n	801d2b2 <etharp_raw+0x56>
 801d2a4:	4b2e      	ldr	r3, [pc, #184]	; (801d360 <etharp_raw+0x104>)
 801d2a6:	f240 4262 	movw	r2, #1122	; 0x462
 801d2aa:	4930      	ldr	r1, [pc, #192]	; (801d36c <etharp_raw+0x110>)
 801d2ac:	482e      	ldr	r0, [pc, #184]	; (801d368 <etharp_raw+0x10c>)
 801d2ae:	f007 faaf 	bl	8024810 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d2b2:	69bb      	ldr	r3, [r7, #24]
 801d2b4:	685b      	ldr	r3, [r3, #4]
 801d2b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d2b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d2ba:	4618      	mov	r0, r3
 801d2bc:	f7f6 fdb6 	bl	8013e2c <lwip_htons>
 801d2c0:	4603      	mov	r3, r0
 801d2c2:	461a      	mov	r2, r3
 801d2c4:	697b      	ldr	r3, [r7, #20]
 801d2c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d2ce:	2b06      	cmp	r3, #6
 801d2d0:	d006      	beq.n	801d2e0 <etharp_raw+0x84>
 801d2d2:	4b23      	ldr	r3, [pc, #140]	; (801d360 <etharp_raw+0x104>)
 801d2d4:	f240 4269 	movw	r2, #1129	; 0x469
 801d2d8:	4925      	ldr	r1, [pc, #148]	; (801d370 <etharp_raw+0x114>)
 801d2da:	4823      	ldr	r0, [pc, #140]	; (801d368 <etharp_raw+0x10c>)
 801d2dc:	f007 fa98 	bl	8024810 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d2e0:	697b      	ldr	r3, [r7, #20]
 801d2e2:	3308      	adds	r3, #8
 801d2e4:	2206      	movs	r2, #6
 801d2e6:	6839      	ldr	r1, [r7, #0]
 801d2e8:	4618      	mov	r0, r3
 801d2ea:	f006 fb52 	bl	8023992 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d2ee:	697b      	ldr	r3, [r7, #20]
 801d2f0:	3312      	adds	r3, #18
 801d2f2:	2206      	movs	r2, #6
 801d2f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d2f6:	4618      	mov	r0, r3
 801d2f8:	f006 fb4b 	bl	8023992 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d2fc:	697b      	ldr	r3, [r7, #20]
 801d2fe:	330e      	adds	r3, #14
 801d300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d302:	6812      	ldr	r2, [r2, #0]
 801d304:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d306:	697b      	ldr	r3, [r7, #20]
 801d308:	3318      	adds	r3, #24
 801d30a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d30c:	6812      	ldr	r2, [r2, #0]
 801d30e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d310:	697b      	ldr	r3, [r7, #20]
 801d312:	2200      	movs	r2, #0
 801d314:	701a      	strb	r2, [r3, #0]
 801d316:	2200      	movs	r2, #0
 801d318:	f042 0201 	orr.w	r2, r2, #1
 801d31c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d31e:	697b      	ldr	r3, [r7, #20]
 801d320:	2200      	movs	r2, #0
 801d322:	f042 0208 	orr.w	r2, r2, #8
 801d326:	709a      	strb	r2, [r3, #2]
 801d328:	2200      	movs	r2, #0
 801d32a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d32c:	697b      	ldr	r3, [r7, #20]
 801d32e:	2206      	movs	r2, #6
 801d330:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d332:	697b      	ldr	r3, [r7, #20]
 801d334:	2204      	movs	r2, #4
 801d336:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d338:	f640 0306 	movw	r3, #2054	; 0x806
 801d33c:	9300      	str	r3, [sp, #0]
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	68ba      	ldr	r2, [r7, #8]
 801d342:	69b9      	ldr	r1, [r7, #24]
 801d344:	68f8      	ldr	r0, [r7, #12]
 801d346:	f001 fb7b 	bl	801ea40 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801d34a:	69b8      	ldr	r0, [r7, #24]
 801d34c:	f7f8 f960 	bl	8015610 <pbuf_free>
  p = NULL;
 801d350:	2300      	movs	r3, #0
 801d352:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d354:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d358:	4618      	mov	r0, r3
 801d35a:	3720      	adds	r7, #32
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bd80      	pop	{r7, pc}
 801d360:	0802c4fc 	.word	0x0802c4fc
 801d364:	0802c64c 	.word	0x0802c64c
 801d368:	0802c574 	.word	0x0802c574
 801d36c:	0802c6fc 	.word	0x0802c6fc
 801d370:	0802c730 	.word	0x0802c730

0801d374 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d374:	b580      	push	{r7, lr}
 801d376:	b088      	sub	sp, #32
 801d378:	af04      	add	r7, sp, #16
 801d37a:	60f8      	str	r0, [r7, #12]
 801d37c:	60b9      	str	r1, [r7, #8]
 801d37e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d380:	68fb      	ldr	r3, [r7, #12]
 801d382:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801d38c:	68fb      	ldr	r3, [r7, #12]
 801d38e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d390:	2201      	movs	r2, #1
 801d392:	9203      	str	r2, [sp, #12]
 801d394:	68ba      	ldr	r2, [r7, #8]
 801d396:	9202      	str	r2, [sp, #8]
 801d398:	4a06      	ldr	r2, [pc, #24]	; (801d3b4 <etharp_request_dst+0x40>)
 801d39a:	9201      	str	r2, [sp, #4]
 801d39c:	9300      	str	r3, [sp, #0]
 801d39e:	4603      	mov	r3, r0
 801d3a0:	687a      	ldr	r2, [r7, #4]
 801d3a2:	68f8      	ldr	r0, [r7, #12]
 801d3a4:	f7ff ff5a 	bl	801d25c <etharp_raw>
 801d3a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d3aa:	4618      	mov	r0, r3
 801d3ac:	3710      	adds	r7, #16
 801d3ae:	46bd      	mov	sp, r7
 801d3b0:	bd80      	pop	{r7, pc}
 801d3b2:	bf00      	nop
 801d3b4:	0802d520 	.word	0x0802d520

0801d3b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d3b8:	b580      	push	{r7, lr}
 801d3ba:	b082      	sub	sp, #8
 801d3bc:	af00      	add	r7, sp, #0
 801d3be:	6078      	str	r0, [r7, #4]
 801d3c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d3c2:	4a05      	ldr	r2, [pc, #20]	; (801d3d8 <etharp_request+0x20>)
 801d3c4:	6839      	ldr	r1, [r7, #0]
 801d3c6:	6878      	ldr	r0, [r7, #4]
 801d3c8:	f7ff ffd4 	bl	801d374 <etharp_request_dst>
 801d3cc:	4603      	mov	r3, r0
}
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	3708      	adds	r7, #8
 801d3d2:	46bd      	mov	sp, r7
 801d3d4:	bd80      	pop	{r7, pc}
 801d3d6:	bf00      	nop
 801d3d8:	0802d518 	.word	0x0802d518

0801d3dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d3dc:	b580      	push	{r7, lr}
 801d3de:	b08e      	sub	sp, #56	; 0x38
 801d3e0:	af04      	add	r7, sp, #16
 801d3e2:	6078      	str	r0, [r7, #4]
 801d3e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d3e6:	4b79      	ldr	r3, [pc, #484]	; (801d5cc <icmp_input+0x1f0>)
 801d3e8:	689b      	ldr	r3, [r3, #8]
 801d3ea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3ee:	781b      	ldrb	r3, [r3, #0]
 801d3f0:	f003 030f 	and.w	r3, r3, #15
 801d3f4:	b2db      	uxtb	r3, r3
 801d3f6:	009b      	lsls	r3, r3, #2
 801d3f8:	b2db      	uxtb	r3, r3
 801d3fa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801d3fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d3fe:	2b13      	cmp	r3, #19
 801d400:	f240 80cd 	bls.w	801d59e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	895b      	ldrh	r3, [r3, #10]
 801d408:	2b03      	cmp	r3, #3
 801d40a:	f240 80ca 	bls.w	801d5a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	685b      	ldr	r3, [r3, #4]
 801d412:	781b      	ldrb	r3, [r3, #0]
 801d414:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d418:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	f000 80b7 	beq.w	801d590 <icmp_input+0x1b4>
 801d422:	2b08      	cmp	r3, #8
 801d424:	f040 80b7 	bne.w	801d596 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d428:	4b69      	ldr	r3, [pc, #420]	; (801d5d0 <icmp_input+0x1f4>)
 801d42a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d42c:	4b67      	ldr	r3, [pc, #412]	; (801d5cc <icmp_input+0x1f0>)
 801d42e:	695b      	ldr	r3, [r3, #20]
 801d430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d434:	2be0      	cmp	r3, #224	; 0xe0
 801d436:	f000 80bb 	beq.w	801d5b0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d43a:	4b64      	ldr	r3, [pc, #400]	; (801d5cc <icmp_input+0x1f0>)
 801d43c:	695b      	ldr	r3, [r3, #20]
 801d43e:	4a63      	ldr	r2, [pc, #396]	; (801d5cc <icmp_input+0x1f0>)
 801d440:	6812      	ldr	r2, [r2, #0]
 801d442:	4611      	mov	r1, r2
 801d444:	4618      	mov	r0, r3
 801d446:	f000 fbed 	bl	801dc24 <ip4_addr_isbroadcast_u32>
 801d44a:	4603      	mov	r3, r0
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	f040 80b1 	bne.w	801d5b4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	891b      	ldrh	r3, [r3, #8]
 801d456:	2b07      	cmp	r3, #7
 801d458:	f240 80a5 	bls.w	801d5a6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d45c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d45e:	330e      	adds	r3, #14
 801d460:	4619      	mov	r1, r3
 801d462:	6878      	ldr	r0, [r7, #4]
 801d464:	f7f8 f83e 	bl	80154e4 <pbuf_add_header>
 801d468:	4603      	mov	r3, r0
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d04b      	beq.n	801d506 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	891a      	ldrh	r2, [r3, #8]
 801d472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d474:	4413      	add	r3, r2
 801d476:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	891b      	ldrh	r3, [r3, #8]
 801d47c:	8b7a      	ldrh	r2, [r7, #26]
 801d47e:	429a      	cmp	r2, r3
 801d480:	f0c0 809a 	bcc.w	801d5b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d484:	8b7b      	ldrh	r3, [r7, #26]
 801d486:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d48a:	4619      	mov	r1, r3
 801d48c:	200e      	movs	r0, #14
 801d48e:	f7f7 fddb 	bl	8015048 <pbuf_alloc>
 801d492:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d494:	697b      	ldr	r3, [r7, #20]
 801d496:	2b00      	cmp	r3, #0
 801d498:	f000 8090 	beq.w	801d5bc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d49c:	697b      	ldr	r3, [r7, #20]
 801d49e:	895b      	ldrh	r3, [r3, #10]
 801d4a0:	461a      	mov	r2, r3
 801d4a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d4a4:	3308      	adds	r3, #8
 801d4a6:	429a      	cmp	r2, r3
 801d4a8:	d203      	bcs.n	801d4b2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801d4aa:	6978      	ldr	r0, [r7, #20]
 801d4ac:	f7f8 f8b0 	bl	8015610 <pbuf_free>
          goto icmperr;
 801d4b0:	e085      	b.n	801d5be <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d4b2:	697b      	ldr	r3, [r7, #20]
 801d4b4:	685b      	ldr	r3, [r3, #4]
 801d4b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d4b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f006 fa69 	bl	8023992 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d4c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d4c2:	4619      	mov	r1, r3
 801d4c4:	6978      	ldr	r0, [r7, #20]
 801d4c6:	f7f8 f81d 	bl	8015504 <pbuf_remove_header>
 801d4ca:	4603      	mov	r3, r0
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d009      	beq.n	801d4e4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d4d0:	4b40      	ldr	r3, [pc, #256]	; (801d5d4 <icmp_input+0x1f8>)
 801d4d2:	22b6      	movs	r2, #182	; 0xb6
 801d4d4:	4940      	ldr	r1, [pc, #256]	; (801d5d8 <icmp_input+0x1fc>)
 801d4d6:	4841      	ldr	r0, [pc, #260]	; (801d5dc <icmp_input+0x200>)
 801d4d8:	f007 f99a 	bl	8024810 <iprintf>
          pbuf_free(r);
 801d4dc:	6978      	ldr	r0, [r7, #20]
 801d4de:	f7f8 f897 	bl	8015610 <pbuf_free>
          goto icmperr;
 801d4e2:	e06c      	b.n	801d5be <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d4e4:	6879      	ldr	r1, [r7, #4]
 801d4e6:	6978      	ldr	r0, [r7, #20]
 801d4e8:	f7f8 f9b6 	bl	8015858 <pbuf_copy>
 801d4ec:	4603      	mov	r3, r0
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d003      	beq.n	801d4fa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801d4f2:	6978      	ldr	r0, [r7, #20]
 801d4f4:	f7f8 f88c 	bl	8015610 <pbuf_free>
          goto icmperr;
 801d4f8:	e061      	b.n	801d5be <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801d4fa:	6878      	ldr	r0, [r7, #4]
 801d4fc:	f7f8 f888 	bl	8015610 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d500:	697b      	ldr	r3, [r7, #20]
 801d502:	607b      	str	r3, [r7, #4]
 801d504:	e00f      	b.n	801d526 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d506:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d508:	330e      	adds	r3, #14
 801d50a:	4619      	mov	r1, r3
 801d50c:	6878      	ldr	r0, [r7, #4]
 801d50e:	f7f7 fff9 	bl	8015504 <pbuf_remove_header>
 801d512:	4603      	mov	r3, r0
 801d514:	2b00      	cmp	r3, #0
 801d516:	d006      	beq.n	801d526 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d518:	4b2e      	ldr	r3, [pc, #184]	; (801d5d4 <icmp_input+0x1f8>)
 801d51a:	22c7      	movs	r2, #199	; 0xc7
 801d51c:	4930      	ldr	r1, [pc, #192]	; (801d5e0 <icmp_input+0x204>)
 801d51e:	482f      	ldr	r0, [pc, #188]	; (801d5dc <icmp_input+0x200>)
 801d520:	f007 f976 	bl	8024810 <iprintf>
          goto icmperr;
 801d524:	e04b      	b.n	801d5be <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d526:	687b      	ldr	r3, [r7, #4]
 801d528:	685b      	ldr	r3, [r3, #4]
 801d52a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d52c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d52e:	4619      	mov	r1, r3
 801d530:	6878      	ldr	r0, [r7, #4]
 801d532:	f7f7 ffd7 	bl	80154e4 <pbuf_add_header>
 801d536:	4603      	mov	r3, r0
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d12b      	bne.n	801d594 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	685b      	ldr	r3, [r3, #4]
 801d540:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d542:	69fb      	ldr	r3, [r7, #28]
 801d544:	681a      	ldr	r2, [r3, #0]
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d54a:	4b20      	ldr	r3, [pc, #128]	; (801d5cc <icmp_input+0x1f0>)
 801d54c:	691a      	ldr	r2, [r3, #16]
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d552:	693b      	ldr	r3, [r7, #16]
 801d554:	2200      	movs	r2, #0
 801d556:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801d558:	693b      	ldr	r3, [r7, #16]
 801d55a:	2200      	movs	r2, #0
 801d55c:	709a      	strb	r2, [r3, #2]
 801d55e:	2200      	movs	r2, #0
 801d560:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	22ff      	movs	r2, #255	; 0xff
 801d566:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	2200      	movs	r2, #0
 801d56c:	729a      	strb	r2, [r3, #10]
 801d56e:	2200      	movs	r2, #0
 801d570:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d572:	683b      	ldr	r3, [r7, #0]
 801d574:	9302      	str	r3, [sp, #8]
 801d576:	2301      	movs	r3, #1
 801d578:	9301      	str	r3, [sp, #4]
 801d57a:	2300      	movs	r3, #0
 801d57c:	9300      	str	r3, [sp, #0]
 801d57e:	23ff      	movs	r3, #255	; 0xff
 801d580:	2200      	movs	r2, #0
 801d582:	69f9      	ldr	r1, [r7, #28]
 801d584:	6878      	ldr	r0, [r7, #4]
 801d586:	f000 fa75 	bl	801da74 <ip4_output_if>
 801d58a:	4603      	mov	r3, r0
 801d58c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d58e:	e001      	b.n	801d594 <icmp_input+0x1b8>
      break;
 801d590:	bf00      	nop
 801d592:	e000      	b.n	801d596 <icmp_input+0x1ba>
      break;
 801d594:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801d596:	6878      	ldr	r0, [r7, #4]
 801d598:	f7f8 f83a 	bl	8015610 <pbuf_free>
  return;
 801d59c:	e013      	b.n	801d5c6 <icmp_input+0x1ea>
    goto lenerr;
 801d59e:	bf00      	nop
 801d5a0:	e002      	b.n	801d5a8 <icmp_input+0x1cc>
    goto lenerr;
 801d5a2:	bf00      	nop
 801d5a4:	e000      	b.n	801d5a8 <icmp_input+0x1cc>
        goto lenerr;
 801d5a6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801d5a8:	6878      	ldr	r0, [r7, #4]
 801d5aa:	f7f8 f831 	bl	8015610 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d5ae:	e00a      	b.n	801d5c6 <icmp_input+0x1ea>
        goto icmperr;
 801d5b0:	bf00      	nop
 801d5b2:	e004      	b.n	801d5be <icmp_input+0x1e2>
        goto icmperr;
 801d5b4:	bf00      	nop
 801d5b6:	e002      	b.n	801d5be <icmp_input+0x1e2>
          goto icmperr;
 801d5b8:	bf00      	nop
 801d5ba:	e000      	b.n	801d5be <icmp_input+0x1e2>
          goto icmperr;
 801d5bc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d5be:	6878      	ldr	r0, [r7, #4]
 801d5c0:	f7f8 f826 	bl	8015610 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d5c4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d5c6:	3728      	adds	r7, #40	; 0x28
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	bd80      	pop	{r7, pc}
 801d5cc:	20016f44 	.word	0x20016f44
 801d5d0:	20016f58 	.word	0x20016f58
 801d5d4:	0802c774 	.word	0x0802c774
 801d5d8:	0802c7ac 	.word	0x0802c7ac
 801d5dc:	0802c7e4 	.word	0x0802c7e4
 801d5e0:	0802c80c 	.word	0x0802c80c

0801d5e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d5e4:	b580      	push	{r7, lr}
 801d5e6:	b082      	sub	sp, #8
 801d5e8:	af00      	add	r7, sp, #0
 801d5ea:	6078      	str	r0, [r7, #4]
 801d5ec:	460b      	mov	r3, r1
 801d5ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d5f0:	78fb      	ldrb	r3, [r7, #3]
 801d5f2:	461a      	mov	r2, r3
 801d5f4:	2103      	movs	r1, #3
 801d5f6:	6878      	ldr	r0, [r7, #4]
 801d5f8:	f000 f814 	bl	801d624 <icmp_send_response>
}
 801d5fc:	bf00      	nop
 801d5fe:	3708      	adds	r7, #8
 801d600:	46bd      	mov	sp, r7
 801d602:	bd80      	pop	{r7, pc}

0801d604 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d604:	b580      	push	{r7, lr}
 801d606:	b082      	sub	sp, #8
 801d608:	af00      	add	r7, sp, #0
 801d60a:	6078      	str	r0, [r7, #4]
 801d60c:	460b      	mov	r3, r1
 801d60e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d610:	78fb      	ldrb	r3, [r7, #3]
 801d612:	461a      	mov	r2, r3
 801d614:	210b      	movs	r1, #11
 801d616:	6878      	ldr	r0, [r7, #4]
 801d618:	f000 f804 	bl	801d624 <icmp_send_response>
}
 801d61c:	bf00      	nop
 801d61e:	3708      	adds	r7, #8
 801d620:	46bd      	mov	sp, r7
 801d622:	bd80      	pop	{r7, pc}

0801d624 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d624:	b580      	push	{r7, lr}
 801d626:	b08c      	sub	sp, #48	; 0x30
 801d628:	af04      	add	r7, sp, #16
 801d62a:	6078      	str	r0, [r7, #4]
 801d62c:	460b      	mov	r3, r1
 801d62e:	70fb      	strb	r3, [r7, #3]
 801d630:	4613      	mov	r3, r2
 801d632:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d634:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d638:	2124      	movs	r1, #36	; 0x24
 801d63a:	2022      	movs	r0, #34	; 0x22
 801d63c:	f7f7 fd04 	bl	8015048 <pbuf_alloc>
 801d640:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d642:	69fb      	ldr	r3, [r7, #28]
 801d644:	2b00      	cmp	r3, #0
 801d646:	d04c      	beq.n	801d6e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d648:	69fb      	ldr	r3, [r7, #28]
 801d64a:	895b      	ldrh	r3, [r3, #10]
 801d64c:	2b23      	cmp	r3, #35	; 0x23
 801d64e:	d806      	bhi.n	801d65e <icmp_send_response+0x3a>
 801d650:	4b26      	ldr	r3, [pc, #152]	; (801d6ec <icmp_send_response+0xc8>)
 801d652:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801d656:	4926      	ldr	r1, [pc, #152]	; (801d6f0 <icmp_send_response+0xcc>)
 801d658:	4826      	ldr	r0, [pc, #152]	; (801d6f4 <icmp_send_response+0xd0>)
 801d65a:	f007 f8d9 	bl	8024810 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	685b      	ldr	r3, [r3, #4]
 801d662:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d664:	69fb      	ldr	r3, [r7, #28]
 801d666:	685b      	ldr	r3, [r3, #4]
 801d668:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d66a:	697b      	ldr	r3, [r7, #20]
 801d66c:	78fa      	ldrb	r2, [r7, #3]
 801d66e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d670:	697b      	ldr	r3, [r7, #20]
 801d672:	78ba      	ldrb	r2, [r7, #2]
 801d674:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d676:	697b      	ldr	r3, [r7, #20]
 801d678:	2200      	movs	r2, #0
 801d67a:	711a      	strb	r2, [r3, #4]
 801d67c:	2200      	movs	r2, #0
 801d67e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d680:	697b      	ldr	r3, [r7, #20]
 801d682:	2200      	movs	r2, #0
 801d684:	719a      	strb	r2, [r3, #6]
 801d686:	2200      	movs	r2, #0
 801d688:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d68a:	69fb      	ldr	r3, [r7, #28]
 801d68c:	685b      	ldr	r3, [r3, #4]
 801d68e:	f103 0008 	add.w	r0, r3, #8
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	685b      	ldr	r3, [r3, #4]
 801d696:	221c      	movs	r2, #28
 801d698:	4619      	mov	r1, r3
 801d69a:	f006 f97a 	bl	8023992 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d69e:	69bb      	ldr	r3, [r7, #24]
 801d6a0:	68db      	ldr	r3, [r3, #12]
 801d6a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d6a4:	f107 030c 	add.w	r3, r7, #12
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	f000 f825 	bl	801d6f8 <ip4_route>
 801d6ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d6b0:	693b      	ldr	r3, [r7, #16]
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d011      	beq.n	801d6da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d6b6:	697b      	ldr	r3, [r7, #20]
 801d6b8:	2200      	movs	r2, #0
 801d6ba:	709a      	strb	r2, [r3, #2]
 801d6bc:	2200      	movs	r2, #0
 801d6be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d6c0:	f107 020c 	add.w	r2, r7, #12
 801d6c4:	693b      	ldr	r3, [r7, #16]
 801d6c6:	9302      	str	r3, [sp, #8]
 801d6c8:	2301      	movs	r3, #1
 801d6ca:	9301      	str	r3, [sp, #4]
 801d6cc:	2300      	movs	r3, #0
 801d6ce:	9300      	str	r3, [sp, #0]
 801d6d0:	23ff      	movs	r3, #255	; 0xff
 801d6d2:	2100      	movs	r1, #0
 801d6d4:	69f8      	ldr	r0, [r7, #28]
 801d6d6:	f000 f9cd 	bl	801da74 <ip4_output_if>
  }
  pbuf_free(q);
 801d6da:	69f8      	ldr	r0, [r7, #28]
 801d6dc:	f7f7 ff98 	bl	8015610 <pbuf_free>
 801d6e0:	e000      	b.n	801d6e4 <icmp_send_response+0xc0>
    return;
 801d6e2:	bf00      	nop
}
 801d6e4:	3720      	adds	r7, #32
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	bd80      	pop	{r7, pc}
 801d6ea:	bf00      	nop
 801d6ec:	0802c774 	.word	0x0802c774
 801d6f0:	0802c840 	.word	0x0802c840
 801d6f4:	0802c7e4 	.word	0x0802c7e4

0801d6f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d6f8:	b480      	push	{r7}
 801d6fa:	b085      	sub	sp, #20
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d700:	4b33      	ldr	r3, [pc, #204]	; (801d7d0 <ip4_route+0xd8>)
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	60fb      	str	r3, [r7, #12]
 801d706:	e036      	b.n	801d776 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d70e:	f003 0301 	and.w	r3, r3, #1
 801d712:	b2db      	uxtb	r3, r3
 801d714:	2b00      	cmp	r3, #0
 801d716:	d02b      	beq.n	801d770 <ip4_route+0x78>
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d71e:	089b      	lsrs	r3, r3, #2
 801d720:	f003 0301 	and.w	r3, r3, #1
 801d724:	b2db      	uxtb	r3, r3
 801d726:	2b00      	cmp	r3, #0
 801d728:	d022      	beq.n	801d770 <ip4_route+0x78>
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	3304      	adds	r3, #4
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	2b00      	cmp	r3, #0
 801d732:	d01d      	beq.n	801d770 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	681a      	ldr	r2, [r3, #0]
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	3304      	adds	r3, #4
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	405a      	eors	r2, r3
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	3308      	adds	r3, #8
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	4013      	ands	r3, r2
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d101      	bne.n	801d750 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	e038      	b.n	801d7c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d756:	f003 0302 	and.w	r3, r3, #2
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d108      	bne.n	801d770 <ip4_route+0x78>
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	681a      	ldr	r2, [r3, #0]
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	330c      	adds	r3, #12
 801d766:	681b      	ldr	r3, [r3, #0]
 801d768:	429a      	cmp	r2, r3
 801d76a:	d101      	bne.n	801d770 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	e028      	b.n	801d7c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801d770:	68fb      	ldr	r3, [r7, #12]
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	60fb      	str	r3, [r7, #12]
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d1c5      	bne.n	801d708 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d77c:	4b15      	ldr	r3, [pc, #84]	; (801d7d4 <ip4_route+0xdc>)
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	2b00      	cmp	r3, #0
 801d782:	d01a      	beq.n	801d7ba <ip4_route+0xc2>
 801d784:	4b13      	ldr	r3, [pc, #76]	; (801d7d4 <ip4_route+0xdc>)
 801d786:	681b      	ldr	r3, [r3, #0]
 801d788:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d78c:	f003 0301 	and.w	r3, r3, #1
 801d790:	2b00      	cmp	r3, #0
 801d792:	d012      	beq.n	801d7ba <ip4_route+0xc2>
 801d794:	4b0f      	ldr	r3, [pc, #60]	; (801d7d4 <ip4_route+0xdc>)
 801d796:	681b      	ldr	r3, [r3, #0]
 801d798:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d79c:	f003 0304 	and.w	r3, r3, #4
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	d00a      	beq.n	801d7ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d7a4:	4b0b      	ldr	r3, [pc, #44]	; (801d7d4 <ip4_route+0xdc>)
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	3304      	adds	r3, #4
 801d7aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	d004      	beq.n	801d7ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	b2db      	uxtb	r3, r3
 801d7b6:	2b7f      	cmp	r3, #127	; 0x7f
 801d7b8:	d101      	bne.n	801d7be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d7ba:	2300      	movs	r3, #0
 801d7bc:	e001      	b.n	801d7c2 <ip4_route+0xca>
  }

  return netif_default;
 801d7be:	4b05      	ldr	r3, [pc, #20]	; (801d7d4 <ip4_route+0xdc>)
 801d7c0:	681b      	ldr	r3, [r3, #0]
}
 801d7c2:	4618      	mov	r0, r3
 801d7c4:	3714      	adds	r7, #20
 801d7c6:	46bd      	mov	sp, r7
 801d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7cc:	4770      	bx	lr
 801d7ce:	bf00      	nop
 801d7d0:	2001accc 	.word	0x2001accc
 801d7d4:	2001acd0 	.word	0x2001acd0

0801d7d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d7d8:	b580      	push	{r7, lr}
 801d7da:	b082      	sub	sp, #8
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d7e6:	f003 0301 	and.w	r3, r3, #1
 801d7ea:	b2db      	uxtb	r3, r3
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d016      	beq.n	801d81e <ip4_input_accept+0x46>
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	3304      	adds	r3, #4
 801d7f4:	681b      	ldr	r3, [r3, #0]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d011      	beq.n	801d81e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d7fa:	4b0b      	ldr	r3, [pc, #44]	; (801d828 <ip4_input_accept+0x50>)
 801d7fc:	695a      	ldr	r2, [r3, #20]
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	3304      	adds	r3, #4
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	429a      	cmp	r2, r3
 801d806:	d008      	beq.n	801d81a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d808:	4b07      	ldr	r3, [pc, #28]	; (801d828 <ip4_input_accept+0x50>)
 801d80a:	695b      	ldr	r3, [r3, #20]
 801d80c:	6879      	ldr	r1, [r7, #4]
 801d80e:	4618      	mov	r0, r3
 801d810:	f000 fa08 	bl	801dc24 <ip4_addr_isbroadcast_u32>
 801d814:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d816:	2b00      	cmp	r3, #0
 801d818:	d001      	beq.n	801d81e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d81a:	2301      	movs	r3, #1
 801d81c:	e000      	b.n	801d820 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d81e:	2300      	movs	r3, #0
}
 801d820:	4618      	mov	r0, r3
 801d822:	3708      	adds	r7, #8
 801d824:	46bd      	mov	sp, r7
 801d826:	bd80      	pop	{r7, pc}
 801d828:	20016f44 	.word	0x20016f44

0801d82c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d82c:	b580      	push	{r7, lr}
 801d82e:	b086      	sub	sp, #24
 801d830:	af00      	add	r7, sp, #0
 801d832:	6078      	str	r0, [r7, #4]
 801d834:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	685b      	ldr	r3, [r3, #4]
 801d83a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801d83c:	697b      	ldr	r3, [r7, #20]
 801d83e:	781b      	ldrb	r3, [r3, #0]
 801d840:	091b      	lsrs	r3, r3, #4
 801d842:	b2db      	uxtb	r3, r3
 801d844:	2b04      	cmp	r3, #4
 801d846:	d004      	beq.n	801d852 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d848:	6878      	ldr	r0, [r7, #4]
 801d84a:	f7f7 fee1 	bl	8015610 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d84e:	2300      	movs	r3, #0
 801d850:	e107      	b.n	801da62 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d852:	697b      	ldr	r3, [r7, #20]
 801d854:	781b      	ldrb	r3, [r3, #0]
 801d856:	f003 030f 	and.w	r3, r3, #15
 801d85a:	b2db      	uxtb	r3, r3
 801d85c:	009b      	lsls	r3, r3, #2
 801d85e:	b2db      	uxtb	r3, r3
 801d860:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d862:	697b      	ldr	r3, [r7, #20]
 801d864:	885b      	ldrh	r3, [r3, #2]
 801d866:	b29b      	uxth	r3, r3
 801d868:	4618      	mov	r0, r3
 801d86a:	f7f6 fadf 	bl	8013e2c <lwip_htons>
 801d86e:	4603      	mov	r3, r0
 801d870:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	891b      	ldrh	r3, [r3, #8]
 801d876:	89ba      	ldrh	r2, [r7, #12]
 801d878:	429a      	cmp	r2, r3
 801d87a:	d204      	bcs.n	801d886 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801d87c:	89bb      	ldrh	r3, [r7, #12]
 801d87e:	4619      	mov	r1, r3
 801d880:	6878      	ldr	r0, [r7, #4]
 801d882:	f7f7 fd3f 	bl	8015304 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	895b      	ldrh	r3, [r3, #10]
 801d88a:	89fa      	ldrh	r2, [r7, #14]
 801d88c:	429a      	cmp	r2, r3
 801d88e:	d807      	bhi.n	801d8a0 <ip4_input+0x74>
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	891b      	ldrh	r3, [r3, #8]
 801d894:	89ba      	ldrh	r2, [r7, #12]
 801d896:	429a      	cmp	r2, r3
 801d898:	d802      	bhi.n	801d8a0 <ip4_input+0x74>
 801d89a:	89fb      	ldrh	r3, [r7, #14]
 801d89c:	2b13      	cmp	r3, #19
 801d89e:	d804      	bhi.n	801d8aa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801d8a0:	6878      	ldr	r0, [r7, #4]
 801d8a2:	f7f7 feb5 	bl	8015610 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801d8a6:	2300      	movs	r3, #0
 801d8a8:	e0db      	b.n	801da62 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d8aa:	697b      	ldr	r3, [r7, #20]
 801d8ac:	691b      	ldr	r3, [r3, #16]
 801d8ae:	4a6f      	ldr	r2, [pc, #444]	; (801da6c <ip4_input+0x240>)
 801d8b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d8b2:	697b      	ldr	r3, [r7, #20]
 801d8b4:	68db      	ldr	r3, [r3, #12]
 801d8b6:	4a6d      	ldr	r2, [pc, #436]	; (801da6c <ip4_input+0x240>)
 801d8b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d8ba:	4b6c      	ldr	r3, [pc, #432]	; (801da6c <ip4_input+0x240>)
 801d8bc:	695b      	ldr	r3, [r3, #20]
 801d8be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d8c2:	2be0      	cmp	r3, #224	; 0xe0
 801d8c4:	d112      	bne.n	801d8ec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d8c6:	683b      	ldr	r3, [r7, #0]
 801d8c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d8cc:	f003 0301 	and.w	r3, r3, #1
 801d8d0:	b2db      	uxtb	r3, r3
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d007      	beq.n	801d8e6 <ip4_input+0xba>
 801d8d6:	683b      	ldr	r3, [r7, #0]
 801d8d8:	3304      	adds	r3, #4
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d002      	beq.n	801d8e6 <ip4_input+0xba>
      netif = inp;
 801d8e0:	683b      	ldr	r3, [r7, #0]
 801d8e2:	613b      	str	r3, [r7, #16]
 801d8e4:	e02a      	b.n	801d93c <ip4_input+0x110>
    } else {
      netif = NULL;
 801d8e6:	2300      	movs	r3, #0
 801d8e8:	613b      	str	r3, [r7, #16]
 801d8ea:	e027      	b.n	801d93c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d8ec:	6838      	ldr	r0, [r7, #0]
 801d8ee:	f7ff ff73 	bl	801d7d8 <ip4_input_accept>
 801d8f2:	4603      	mov	r3, r0
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d002      	beq.n	801d8fe <ip4_input+0xd2>
      netif = inp;
 801d8f8:	683b      	ldr	r3, [r7, #0]
 801d8fa:	613b      	str	r3, [r7, #16]
 801d8fc:	e01e      	b.n	801d93c <ip4_input+0x110>
    } else {
      netif = NULL;
 801d8fe:	2300      	movs	r3, #0
 801d900:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d902:	4b5a      	ldr	r3, [pc, #360]	; (801da6c <ip4_input+0x240>)
 801d904:	695b      	ldr	r3, [r3, #20]
 801d906:	b2db      	uxtb	r3, r3
 801d908:	2b7f      	cmp	r3, #127	; 0x7f
 801d90a:	d017      	beq.n	801d93c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d90c:	4b58      	ldr	r3, [pc, #352]	; (801da70 <ip4_input+0x244>)
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	613b      	str	r3, [r7, #16]
 801d912:	e00e      	b.n	801d932 <ip4_input+0x106>
          if (netif == inp) {
 801d914:	693a      	ldr	r2, [r7, #16]
 801d916:	683b      	ldr	r3, [r7, #0]
 801d918:	429a      	cmp	r2, r3
 801d91a:	d006      	beq.n	801d92a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d91c:	6938      	ldr	r0, [r7, #16]
 801d91e:	f7ff ff5b 	bl	801d7d8 <ip4_input_accept>
 801d922:	4603      	mov	r3, r0
 801d924:	2b00      	cmp	r3, #0
 801d926:	d108      	bne.n	801d93a <ip4_input+0x10e>
 801d928:	e000      	b.n	801d92c <ip4_input+0x100>
            continue;
 801d92a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d92c:	693b      	ldr	r3, [r7, #16]
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	613b      	str	r3, [r7, #16]
 801d932:	693b      	ldr	r3, [r7, #16]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d1ed      	bne.n	801d914 <ip4_input+0xe8>
 801d938:	e000      	b.n	801d93c <ip4_input+0x110>
            break;
 801d93a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d93c:	4b4b      	ldr	r3, [pc, #300]	; (801da6c <ip4_input+0x240>)
 801d93e:	691b      	ldr	r3, [r3, #16]
 801d940:	6839      	ldr	r1, [r7, #0]
 801d942:	4618      	mov	r0, r3
 801d944:	f000 f96e 	bl	801dc24 <ip4_addr_isbroadcast_u32>
 801d948:	4603      	mov	r3, r0
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d105      	bne.n	801d95a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d94e:	4b47      	ldr	r3, [pc, #284]	; (801da6c <ip4_input+0x240>)
 801d950:	691b      	ldr	r3, [r3, #16]
 801d952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d956:	2be0      	cmp	r3, #224	; 0xe0
 801d958:	d104      	bne.n	801d964 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d95a:	6878      	ldr	r0, [r7, #4]
 801d95c:	f7f7 fe58 	bl	8015610 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d960:	2300      	movs	r3, #0
 801d962:	e07e      	b.n	801da62 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d964:	693b      	ldr	r3, [r7, #16]
 801d966:	2b00      	cmp	r3, #0
 801d968:	d104      	bne.n	801d974 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d96a:	6878      	ldr	r0, [r7, #4]
 801d96c:	f7f7 fe50 	bl	8015610 <pbuf_free>
    return ERR_OK;
 801d970:	2300      	movs	r3, #0
 801d972:	e076      	b.n	801da62 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d974:	697b      	ldr	r3, [r7, #20]
 801d976:	88db      	ldrh	r3, [r3, #6]
 801d978:	b29b      	uxth	r3, r3
 801d97a:	461a      	mov	r2, r3
 801d97c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801d980:	4013      	ands	r3, r2
 801d982:	2b00      	cmp	r3, #0
 801d984:	d00b      	beq.n	801d99e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d986:	6878      	ldr	r0, [r7, #4]
 801d988:	f000 fc92 	bl	801e2b0 <ip4_reass>
 801d98c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	2b00      	cmp	r3, #0
 801d992:	d101      	bne.n	801d998 <ip4_input+0x16c>
      return ERR_OK;
 801d994:	2300      	movs	r3, #0
 801d996:	e064      	b.n	801da62 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	685b      	ldr	r3, [r3, #4]
 801d99c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d99e:	4a33      	ldr	r2, [pc, #204]	; (801da6c <ip4_input+0x240>)
 801d9a0:	693b      	ldr	r3, [r7, #16]
 801d9a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d9a4:	4a31      	ldr	r2, [pc, #196]	; (801da6c <ip4_input+0x240>)
 801d9a6:	683b      	ldr	r3, [r7, #0]
 801d9a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d9aa:	4a30      	ldr	r2, [pc, #192]	; (801da6c <ip4_input+0x240>)
 801d9ac:	697b      	ldr	r3, [r7, #20]
 801d9ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d9b0:	697b      	ldr	r3, [r7, #20]
 801d9b2:	781b      	ldrb	r3, [r3, #0]
 801d9b4:	f003 030f 	and.w	r3, r3, #15
 801d9b8:	b2db      	uxtb	r3, r3
 801d9ba:	009b      	lsls	r3, r3, #2
 801d9bc:	b2db      	uxtb	r3, r3
 801d9be:	b29a      	uxth	r2, r3
 801d9c0:	4b2a      	ldr	r3, [pc, #168]	; (801da6c <ip4_input+0x240>)
 801d9c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d9c4:	89fb      	ldrh	r3, [r7, #14]
 801d9c6:	4619      	mov	r1, r3
 801d9c8:	6878      	ldr	r0, [r7, #4]
 801d9ca:	f7f7 fd9b 	bl	8015504 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d9ce:	697b      	ldr	r3, [r7, #20]
 801d9d0:	7a5b      	ldrb	r3, [r3, #9]
 801d9d2:	2b11      	cmp	r3, #17
 801d9d4:	d006      	beq.n	801d9e4 <ip4_input+0x1b8>
 801d9d6:	2b11      	cmp	r3, #17
 801d9d8:	dc13      	bgt.n	801da02 <ip4_input+0x1d6>
 801d9da:	2b01      	cmp	r3, #1
 801d9dc:	d00c      	beq.n	801d9f8 <ip4_input+0x1cc>
 801d9de:	2b06      	cmp	r3, #6
 801d9e0:	d005      	beq.n	801d9ee <ip4_input+0x1c2>
 801d9e2:	e00e      	b.n	801da02 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d9e4:	6839      	ldr	r1, [r7, #0]
 801d9e6:	6878      	ldr	r0, [r7, #4]
 801d9e8:	f7fe fb5a 	bl	801c0a0 <udp_input>
        break;
 801d9ec:	e026      	b.n	801da3c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d9ee:	6839      	ldr	r1, [r7, #0]
 801d9f0:	6878      	ldr	r0, [r7, #4]
 801d9f2:	f7f9 ff13 	bl	801781c <tcp_input>
        break;
 801d9f6:	e021      	b.n	801da3c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d9f8:	6839      	ldr	r1, [r7, #0]
 801d9fa:	6878      	ldr	r0, [r7, #4]
 801d9fc:	f7ff fcee 	bl	801d3dc <icmp_input>
        break;
 801da00:	e01c      	b.n	801da3c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801da02:	4b1a      	ldr	r3, [pc, #104]	; (801da6c <ip4_input+0x240>)
 801da04:	695b      	ldr	r3, [r3, #20]
 801da06:	6939      	ldr	r1, [r7, #16]
 801da08:	4618      	mov	r0, r3
 801da0a:	f000 f90b 	bl	801dc24 <ip4_addr_isbroadcast_u32>
 801da0e:	4603      	mov	r3, r0
 801da10:	2b00      	cmp	r3, #0
 801da12:	d10f      	bne.n	801da34 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801da14:	4b15      	ldr	r3, [pc, #84]	; (801da6c <ip4_input+0x240>)
 801da16:	695b      	ldr	r3, [r3, #20]
 801da18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801da1c:	2be0      	cmp	r3, #224	; 0xe0
 801da1e:	d009      	beq.n	801da34 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801da20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801da24:	4619      	mov	r1, r3
 801da26:	6878      	ldr	r0, [r7, #4]
 801da28:	f7f7 fddf 	bl	80155ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801da2c:	2102      	movs	r1, #2
 801da2e:	6878      	ldr	r0, [r7, #4]
 801da30:	f7ff fdd8 	bl	801d5e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801da34:	6878      	ldr	r0, [r7, #4]
 801da36:	f7f7 fdeb 	bl	8015610 <pbuf_free>
        break;
 801da3a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801da3c:	4b0b      	ldr	r3, [pc, #44]	; (801da6c <ip4_input+0x240>)
 801da3e:	2200      	movs	r2, #0
 801da40:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801da42:	4b0a      	ldr	r3, [pc, #40]	; (801da6c <ip4_input+0x240>)
 801da44:	2200      	movs	r2, #0
 801da46:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801da48:	4b08      	ldr	r3, [pc, #32]	; (801da6c <ip4_input+0x240>)
 801da4a:	2200      	movs	r2, #0
 801da4c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801da4e:	4b07      	ldr	r3, [pc, #28]	; (801da6c <ip4_input+0x240>)
 801da50:	2200      	movs	r2, #0
 801da52:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801da54:	4b05      	ldr	r3, [pc, #20]	; (801da6c <ip4_input+0x240>)
 801da56:	2200      	movs	r2, #0
 801da58:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801da5a:	4b04      	ldr	r3, [pc, #16]	; (801da6c <ip4_input+0x240>)
 801da5c:	2200      	movs	r2, #0
 801da5e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801da60:	2300      	movs	r3, #0
}
 801da62:	4618      	mov	r0, r3
 801da64:	3718      	adds	r7, #24
 801da66:	46bd      	mov	sp, r7
 801da68:	bd80      	pop	{r7, pc}
 801da6a:	bf00      	nop
 801da6c:	20016f44 	.word	0x20016f44
 801da70:	2001accc 	.word	0x2001accc

0801da74 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801da74:	b580      	push	{r7, lr}
 801da76:	b08a      	sub	sp, #40	; 0x28
 801da78:	af04      	add	r7, sp, #16
 801da7a:	60f8      	str	r0, [r7, #12]
 801da7c:	60b9      	str	r1, [r7, #8]
 801da7e:	607a      	str	r2, [r7, #4]
 801da80:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801da82:	68bb      	ldr	r3, [r7, #8]
 801da84:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	2b00      	cmp	r3, #0
 801da8a:	d009      	beq.n	801daa0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801da8c:	68bb      	ldr	r3, [r7, #8]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d003      	beq.n	801da9a <ip4_output_if+0x26>
 801da92:	68bb      	ldr	r3, [r7, #8]
 801da94:	681b      	ldr	r3, [r3, #0]
 801da96:	2b00      	cmp	r3, #0
 801da98:	d102      	bne.n	801daa0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801da9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da9c:	3304      	adds	r3, #4
 801da9e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801daa0:	78fa      	ldrb	r2, [r7, #3]
 801daa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daa4:	9302      	str	r3, [sp, #8]
 801daa6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801daaa:	9301      	str	r3, [sp, #4]
 801daac:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dab0:	9300      	str	r3, [sp, #0]
 801dab2:	4613      	mov	r3, r2
 801dab4:	687a      	ldr	r2, [r7, #4]
 801dab6:	6979      	ldr	r1, [r7, #20]
 801dab8:	68f8      	ldr	r0, [r7, #12]
 801daba:	f000 f805 	bl	801dac8 <ip4_output_if_src>
 801dabe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801dac0:	4618      	mov	r0, r3
 801dac2:	3718      	adds	r7, #24
 801dac4:	46bd      	mov	sp, r7
 801dac6:	bd80      	pop	{r7, pc}

0801dac8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801dac8:	b580      	push	{r7, lr}
 801daca:	b088      	sub	sp, #32
 801dacc:	af00      	add	r7, sp, #0
 801dace:	60f8      	str	r0, [r7, #12]
 801dad0:	60b9      	str	r1, [r7, #8]
 801dad2:	607a      	str	r2, [r7, #4]
 801dad4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801dad6:	68fb      	ldr	r3, [r7, #12]
 801dad8:	7b9b      	ldrb	r3, [r3, #14]
 801dada:	2b01      	cmp	r3, #1
 801dadc:	d006      	beq.n	801daec <ip4_output_if_src+0x24>
 801dade:	4b4b      	ldr	r3, [pc, #300]	; (801dc0c <ip4_output_if_src+0x144>)
 801dae0:	f44f 7255 	mov.w	r2, #852	; 0x354
 801dae4:	494a      	ldr	r1, [pc, #296]	; (801dc10 <ip4_output_if_src+0x148>)
 801dae6:	484b      	ldr	r0, [pc, #300]	; (801dc14 <ip4_output_if_src+0x14c>)
 801dae8:	f006 fe92 	bl	8024810 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d060      	beq.n	801dbb4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801daf2:	2314      	movs	r3, #20
 801daf4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801daf6:	2114      	movs	r1, #20
 801daf8:	68f8      	ldr	r0, [r7, #12]
 801dafa:	f7f7 fcf3 	bl	80154e4 <pbuf_add_header>
 801dafe:	4603      	mov	r3, r0
 801db00:	2b00      	cmp	r3, #0
 801db02:	d002      	beq.n	801db0a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801db04:	f06f 0301 	mvn.w	r3, #1
 801db08:	e07c      	b.n	801dc04 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801db0a:	68fb      	ldr	r3, [r7, #12]
 801db0c:	685b      	ldr	r3, [r3, #4]
 801db0e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801db10:	68fb      	ldr	r3, [r7, #12]
 801db12:	895b      	ldrh	r3, [r3, #10]
 801db14:	2b13      	cmp	r3, #19
 801db16:	d806      	bhi.n	801db26 <ip4_output_if_src+0x5e>
 801db18:	4b3c      	ldr	r3, [pc, #240]	; (801dc0c <ip4_output_if_src+0x144>)
 801db1a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801db1e:	493e      	ldr	r1, [pc, #248]	; (801dc18 <ip4_output_if_src+0x150>)
 801db20:	483c      	ldr	r0, [pc, #240]	; (801dc14 <ip4_output_if_src+0x14c>)
 801db22:	f006 fe75 	bl	8024810 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801db26:	69fb      	ldr	r3, [r7, #28]
 801db28:	78fa      	ldrb	r2, [r7, #3]
 801db2a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801db2c:	69fb      	ldr	r3, [r7, #28]
 801db2e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801db32:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	681a      	ldr	r2, [r3, #0]
 801db38:	69fb      	ldr	r3, [r7, #28]
 801db3a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801db3c:	8b7b      	ldrh	r3, [r7, #26]
 801db3e:	089b      	lsrs	r3, r3, #2
 801db40:	b29b      	uxth	r3, r3
 801db42:	b2db      	uxtb	r3, r3
 801db44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db48:	b2da      	uxtb	r2, r3
 801db4a:	69fb      	ldr	r3, [r7, #28]
 801db4c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801db4e:	69fb      	ldr	r3, [r7, #28]
 801db50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801db54:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	891b      	ldrh	r3, [r3, #8]
 801db5a:	4618      	mov	r0, r3
 801db5c:	f7f6 f966 	bl	8013e2c <lwip_htons>
 801db60:	4603      	mov	r3, r0
 801db62:	461a      	mov	r2, r3
 801db64:	69fb      	ldr	r3, [r7, #28]
 801db66:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801db68:	69fb      	ldr	r3, [r7, #28]
 801db6a:	2200      	movs	r2, #0
 801db6c:	719a      	strb	r2, [r3, #6]
 801db6e:	2200      	movs	r2, #0
 801db70:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801db72:	4b2a      	ldr	r3, [pc, #168]	; (801dc1c <ip4_output_if_src+0x154>)
 801db74:	881b      	ldrh	r3, [r3, #0]
 801db76:	4618      	mov	r0, r3
 801db78:	f7f6 f958 	bl	8013e2c <lwip_htons>
 801db7c:	4603      	mov	r3, r0
 801db7e:	461a      	mov	r2, r3
 801db80:	69fb      	ldr	r3, [r7, #28]
 801db82:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801db84:	4b25      	ldr	r3, [pc, #148]	; (801dc1c <ip4_output_if_src+0x154>)
 801db86:	881b      	ldrh	r3, [r3, #0]
 801db88:	3301      	adds	r3, #1
 801db8a:	b29a      	uxth	r2, r3
 801db8c:	4b23      	ldr	r3, [pc, #140]	; (801dc1c <ip4_output_if_src+0x154>)
 801db8e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801db90:	68bb      	ldr	r3, [r7, #8]
 801db92:	2b00      	cmp	r3, #0
 801db94:	d104      	bne.n	801dba0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801db96:	4b22      	ldr	r3, [pc, #136]	; (801dc20 <ip4_output_if_src+0x158>)
 801db98:	681a      	ldr	r2, [r3, #0]
 801db9a:	69fb      	ldr	r3, [r7, #28]
 801db9c:	60da      	str	r2, [r3, #12]
 801db9e:	e003      	b.n	801dba8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801dba0:	68bb      	ldr	r3, [r7, #8]
 801dba2:	681a      	ldr	r2, [r3, #0]
 801dba4:	69fb      	ldr	r3, [r7, #28]
 801dba6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801dba8:	69fb      	ldr	r3, [r7, #28]
 801dbaa:	2200      	movs	r2, #0
 801dbac:	729a      	strb	r2, [r3, #10]
 801dbae:	2200      	movs	r2, #0
 801dbb0:	72da      	strb	r2, [r3, #11]
 801dbb2:	e00f      	b.n	801dbd4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801dbb4:	68fb      	ldr	r3, [r7, #12]
 801dbb6:	895b      	ldrh	r3, [r3, #10]
 801dbb8:	2b13      	cmp	r3, #19
 801dbba:	d802      	bhi.n	801dbc2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dbbc:	f06f 0301 	mvn.w	r3, #1
 801dbc0:	e020      	b.n	801dc04 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801dbc2:	68fb      	ldr	r3, [r7, #12]
 801dbc4:	685b      	ldr	r3, [r3, #4]
 801dbc6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801dbc8:	69fb      	ldr	r3, [r7, #28]
 801dbca:	691b      	ldr	r3, [r3, #16]
 801dbcc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801dbce:	f107 0314 	add.w	r3, r7, #20
 801dbd2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801dbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d00c      	beq.n	801dbf6 <ip4_output_if_src+0x12e>
 801dbdc:	68fb      	ldr	r3, [r7, #12]
 801dbde:	891a      	ldrh	r2, [r3, #8]
 801dbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbe2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801dbe4:	429a      	cmp	r2, r3
 801dbe6:	d906      	bls.n	801dbf6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801dbe8:	687a      	ldr	r2, [r7, #4]
 801dbea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dbec:	68f8      	ldr	r0, [r7, #12]
 801dbee:	f000 fd53 	bl	801e698 <ip4_frag>
 801dbf2:	4603      	mov	r3, r0
 801dbf4:	e006      	b.n	801dc04 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbf8:	695b      	ldr	r3, [r3, #20]
 801dbfa:	687a      	ldr	r2, [r7, #4]
 801dbfc:	68f9      	ldr	r1, [r7, #12]
 801dbfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dc00:	4798      	blx	r3
 801dc02:	4603      	mov	r3, r0
}
 801dc04:	4618      	mov	r0, r3
 801dc06:	3720      	adds	r7, #32
 801dc08:	46bd      	mov	sp, r7
 801dc0a:	bd80      	pop	{r7, pc}
 801dc0c:	0802c86c 	.word	0x0802c86c
 801dc10:	0802c8a0 	.word	0x0802c8a0
 801dc14:	0802c8ac 	.word	0x0802c8ac
 801dc18:	0802c8d4 	.word	0x0802c8d4
 801dc1c:	2001ae2a 	.word	0x2001ae2a
 801dc20:	0802d514 	.word	0x0802d514

0801dc24 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801dc24:	b480      	push	{r7}
 801dc26:	b085      	sub	sp, #20
 801dc28:	af00      	add	r7, sp, #0
 801dc2a:	6078      	str	r0, [r7, #4]
 801dc2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801dc38:	d002      	beq.n	801dc40 <ip4_addr_isbroadcast_u32+0x1c>
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d101      	bne.n	801dc44 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801dc40:	2301      	movs	r3, #1
 801dc42:	e02a      	b.n	801dc9a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801dc44:	683b      	ldr	r3, [r7, #0]
 801dc46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dc4a:	f003 0302 	and.w	r3, r3, #2
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d101      	bne.n	801dc56 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801dc52:	2300      	movs	r3, #0
 801dc54:	e021      	b.n	801dc9a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801dc56:	683b      	ldr	r3, [r7, #0]
 801dc58:	3304      	adds	r3, #4
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	687a      	ldr	r2, [r7, #4]
 801dc5e:	429a      	cmp	r2, r3
 801dc60:	d101      	bne.n	801dc66 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801dc62:	2300      	movs	r3, #0
 801dc64:	e019      	b.n	801dc9a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801dc66:	68fa      	ldr	r2, [r7, #12]
 801dc68:	683b      	ldr	r3, [r7, #0]
 801dc6a:	3304      	adds	r3, #4
 801dc6c:	681b      	ldr	r3, [r3, #0]
 801dc6e:	405a      	eors	r2, r3
 801dc70:	683b      	ldr	r3, [r7, #0]
 801dc72:	3308      	adds	r3, #8
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	4013      	ands	r3, r2
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d10d      	bne.n	801dc98 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801dc7c:	683b      	ldr	r3, [r7, #0]
 801dc7e:	3308      	adds	r3, #8
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	43da      	mvns	r2, r3
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801dc88:	683b      	ldr	r3, [r7, #0]
 801dc8a:	3308      	adds	r3, #8
 801dc8c:	681b      	ldr	r3, [r3, #0]
 801dc8e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801dc90:	429a      	cmp	r2, r3
 801dc92:	d101      	bne.n	801dc98 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801dc94:	2301      	movs	r3, #1
 801dc96:	e000      	b.n	801dc9a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801dc98:	2300      	movs	r3, #0
  }
}
 801dc9a:	4618      	mov	r0, r3
 801dc9c:	3714      	adds	r7, #20
 801dc9e:	46bd      	mov	sp, r7
 801dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dca4:	4770      	bx	lr
	...

0801dca8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801dca8:	b580      	push	{r7, lr}
 801dcaa:	b084      	sub	sp, #16
 801dcac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801dcae:	2300      	movs	r3, #0
 801dcb0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801dcb2:	4b12      	ldr	r3, [pc, #72]	; (801dcfc <ip_reass_tmr+0x54>)
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801dcb8:	e018      	b.n	801dcec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	7fdb      	ldrb	r3, [r3, #31]
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	d00b      	beq.n	801dcda <ip_reass_tmr+0x32>
      r->timer--;
 801dcc2:	68fb      	ldr	r3, [r7, #12]
 801dcc4:	7fdb      	ldrb	r3, [r3, #31]
 801dcc6:	3b01      	subs	r3, #1
 801dcc8:	b2da      	uxtb	r2, r3
 801dcca:	68fb      	ldr	r3, [r7, #12]
 801dccc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801dcce:	68fb      	ldr	r3, [r7, #12]
 801dcd0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	60fb      	str	r3, [r7, #12]
 801dcd8:	e008      	b.n	801dcec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801dcde:	68fb      	ldr	r3, [r7, #12]
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801dce4:	68b9      	ldr	r1, [r7, #8]
 801dce6:	6878      	ldr	r0, [r7, #4]
 801dce8:	f000 f80a 	bl	801dd00 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801dcec:	68fb      	ldr	r3, [r7, #12]
 801dcee:	2b00      	cmp	r3, #0
 801dcf0:	d1e3      	bne.n	801dcba <ip_reass_tmr+0x12>
    }
  }
}
 801dcf2:	bf00      	nop
 801dcf4:	bf00      	nop
 801dcf6:	3710      	adds	r7, #16
 801dcf8:	46bd      	mov	sp, r7
 801dcfa:	bd80      	pop	{r7, pc}
 801dcfc:	2001ae2c 	.word	0x2001ae2c

0801dd00 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801dd00:	b580      	push	{r7, lr}
 801dd02:	b088      	sub	sp, #32
 801dd04:	af00      	add	r7, sp, #0
 801dd06:	6078      	str	r0, [r7, #4]
 801dd08:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801dd0a:	2300      	movs	r3, #0
 801dd0c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801dd0e:	683a      	ldr	r2, [r7, #0]
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	429a      	cmp	r2, r3
 801dd14:	d105      	bne.n	801dd22 <ip_reass_free_complete_datagram+0x22>
 801dd16:	4b45      	ldr	r3, [pc, #276]	; (801de2c <ip_reass_free_complete_datagram+0x12c>)
 801dd18:	22ab      	movs	r2, #171	; 0xab
 801dd1a:	4945      	ldr	r1, [pc, #276]	; (801de30 <ip_reass_free_complete_datagram+0x130>)
 801dd1c:	4845      	ldr	r0, [pc, #276]	; (801de34 <ip_reass_free_complete_datagram+0x134>)
 801dd1e:	f006 fd77 	bl	8024810 <iprintf>
  if (prev != NULL) {
 801dd22:	683b      	ldr	r3, [r7, #0]
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	d00a      	beq.n	801dd3e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801dd28:	683b      	ldr	r3, [r7, #0]
 801dd2a:	681b      	ldr	r3, [r3, #0]
 801dd2c:	687a      	ldr	r2, [r7, #4]
 801dd2e:	429a      	cmp	r2, r3
 801dd30:	d005      	beq.n	801dd3e <ip_reass_free_complete_datagram+0x3e>
 801dd32:	4b3e      	ldr	r3, [pc, #248]	; (801de2c <ip_reass_free_complete_datagram+0x12c>)
 801dd34:	22ad      	movs	r2, #173	; 0xad
 801dd36:	4940      	ldr	r1, [pc, #256]	; (801de38 <ip_reass_free_complete_datagram+0x138>)
 801dd38:	483e      	ldr	r0, [pc, #248]	; (801de34 <ip_reass_free_complete_datagram+0x134>)
 801dd3a:	f006 fd69 	bl	8024810 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	685b      	ldr	r3, [r3, #4]
 801dd42:	685b      	ldr	r3, [r3, #4]
 801dd44:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801dd46:	697b      	ldr	r3, [r7, #20]
 801dd48:	889b      	ldrh	r3, [r3, #4]
 801dd4a:	b29b      	uxth	r3, r3
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	d12a      	bne.n	801dda6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	685b      	ldr	r3, [r3, #4]
 801dd54:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801dd56:	697b      	ldr	r3, [r7, #20]
 801dd58:	681a      	ldr	r2, [r3, #0]
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801dd5e:	69bb      	ldr	r3, [r7, #24]
 801dd60:	6858      	ldr	r0, [r3, #4]
 801dd62:	687b      	ldr	r3, [r7, #4]
 801dd64:	3308      	adds	r3, #8
 801dd66:	2214      	movs	r2, #20
 801dd68:	4619      	mov	r1, r3
 801dd6a:	f005 fe12 	bl	8023992 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801dd6e:	2101      	movs	r1, #1
 801dd70:	69b8      	ldr	r0, [r7, #24]
 801dd72:	f7ff fc47 	bl	801d604 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801dd76:	69b8      	ldr	r0, [r7, #24]
 801dd78:	f7f7 fcd8 	bl	801572c <pbuf_clen>
 801dd7c:	4603      	mov	r3, r0
 801dd7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801dd80:	8bfa      	ldrh	r2, [r7, #30]
 801dd82:	8a7b      	ldrh	r3, [r7, #18]
 801dd84:	4413      	add	r3, r2
 801dd86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801dd8a:	db05      	blt.n	801dd98 <ip_reass_free_complete_datagram+0x98>
 801dd8c:	4b27      	ldr	r3, [pc, #156]	; (801de2c <ip_reass_free_complete_datagram+0x12c>)
 801dd8e:	22bc      	movs	r2, #188	; 0xbc
 801dd90:	492a      	ldr	r1, [pc, #168]	; (801de3c <ip_reass_free_complete_datagram+0x13c>)
 801dd92:	4828      	ldr	r0, [pc, #160]	; (801de34 <ip_reass_free_complete_datagram+0x134>)
 801dd94:	f006 fd3c 	bl	8024810 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801dd98:	8bfa      	ldrh	r2, [r7, #30]
 801dd9a:	8a7b      	ldrh	r3, [r7, #18]
 801dd9c:	4413      	add	r3, r2
 801dd9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801dda0:	69b8      	ldr	r0, [r7, #24]
 801dda2:	f7f7 fc35 	bl	8015610 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	685b      	ldr	r3, [r3, #4]
 801ddaa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ddac:	e01f      	b.n	801ddee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ddae:	69bb      	ldr	r3, [r7, #24]
 801ddb0:	685b      	ldr	r3, [r3, #4]
 801ddb2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ddb4:	69bb      	ldr	r3, [r7, #24]
 801ddb6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ddb8:	697b      	ldr	r3, [r7, #20]
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ddbe:	68f8      	ldr	r0, [r7, #12]
 801ddc0:	f7f7 fcb4 	bl	801572c <pbuf_clen>
 801ddc4:	4603      	mov	r3, r0
 801ddc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ddc8:	8bfa      	ldrh	r2, [r7, #30]
 801ddca:	8a7b      	ldrh	r3, [r7, #18]
 801ddcc:	4413      	add	r3, r2
 801ddce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ddd2:	db05      	blt.n	801dde0 <ip_reass_free_complete_datagram+0xe0>
 801ddd4:	4b15      	ldr	r3, [pc, #84]	; (801de2c <ip_reass_free_complete_datagram+0x12c>)
 801ddd6:	22cc      	movs	r2, #204	; 0xcc
 801ddd8:	4918      	ldr	r1, [pc, #96]	; (801de3c <ip_reass_free_complete_datagram+0x13c>)
 801ddda:	4816      	ldr	r0, [pc, #88]	; (801de34 <ip_reass_free_complete_datagram+0x134>)
 801dddc:	f006 fd18 	bl	8024810 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801dde0:	8bfa      	ldrh	r2, [r7, #30]
 801dde2:	8a7b      	ldrh	r3, [r7, #18]
 801dde4:	4413      	add	r3, r2
 801dde6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801dde8:	68f8      	ldr	r0, [r7, #12]
 801ddea:	f7f7 fc11 	bl	8015610 <pbuf_free>
  while (p != NULL) {
 801ddee:	69bb      	ldr	r3, [r7, #24]
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d1dc      	bne.n	801ddae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ddf4:	6839      	ldr	r1, [r7, #0]
 801ddf6:	6878      	ldr	r0, [r7, #4]
 801ddf8:	f000 f8c2 	bl	801df80 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801ddfc:	4b10      	ldr	r3, [pc, #64]	; (801de40 <ip_reass_free_complete_datagram+0x140>)
 801ddfe:	881b      	ldrh	r3, [r3, #0]
 801de00:	8bfa      	ldrh	r2, [r7, #30]
 801de02:	429a      	cmp	r2, r3
 801de04:	d905      	bls.n	801de12 <ip_reass_free_complete_datagram+0x112>
 801de06:	4b09      	ldr	r3, [pc, #36]	; (801de2c <ip_reass_free_complete_datagram+0x12c>)
 801de08:	22d2      	movs	r2, #210	; 0xd2
 801de0a:	490e      	ldr	r1, [pc, #56]	; (801de44 <ip_reass_free_complete_datagram+0x144>)
 801de0c:	4809      	ldr	r0, [pc, #36]	; (801de34 <ip_reass_free_complete_datagram+0x134>)
 801de0e:	f006 fcff 	bl	8024810 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801de12:	4b0b      	ldr	r3, [pc, #44]	; (801de40 <ip_reass_free_complete_datagram+0x140>)
 801de14:	881a      	ldrh	r2, [r3, #0]
 801de16:	8bfb      	ldrh	r3, [r7, #30]
 801de18:	1ad3      	subs	r3, r2, r3
 801de1a:	b29a      	uxth	r2, r3
 801de1c:	4b08      	ldr	r3, [pc, #32]	; (801de40 <ip_reass_free_complete_datagram+0x140>)
 801de1e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801de20:	8bfb      	ldrh	r3, [r7, #30]
}
 801de22:	4618      	mov	r0, r3
 801de24:	3720      	adds	r7, #32
 801de26:	46bd      	mov	sp, r7
 801de28:	bd80      	pop	{r7, pc}
 801de2a:	bf00      	nop
 801de2c:	0802c904 	.word	0x0802c904
 801de30:	0802c940 	.word	0x0802c940
 801de34:	0802c94c 	.word	0x0802c94c
 801de38:	0802c974 	.word	0x0802c974
 801de3c:	0802c988 	.word	0x0802c988
 801de40:	2001ae30 	.word	0x2001ae30
 801de44:	0802c9a8 	.word	0x0802c9a8

0801de48 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801de48:	b580      	push	{r7, lr}
 801de4a:	b08a      	sub	sp, #40	; 0x28
 801de4c:	af00      	add	r7, sp, #0
 801de4e:	6078      	str	r0, [r7, #4]
 801de50:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801de52:	2300      	movs	r3, #0
 801de54:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801de56:	2300      	movs	r3, #0
 801de58:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801de5a:	2300      	movs	r3, #0
 801de5c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801de5e:	2300      	movs	r3, #0
 801de60:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801de62:	2300      	movs	r3, #0
 801de64:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801de66:	4b28      	ldr	r3, [pc, #160]	; (801df08 <ip_reass_remove_oldest_datagram+0xc0>)
 801de68:	681b      	ldr	r3, [r3, #0]
 801de6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801de6c:	e030      	b.n	801ded0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de70:	695a      	ldr	r2, [r3, #20]
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	68db      	ldr	r3, [r3, #12]
 801de76:	429a      	cmp	r2, r3
 801de78:	d10c      	bne.n	801de94 <ip_reass_remove_oldest_datagram+0x4c>
 801de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de7c:	699a      	ldr	r2, [r3, #24]
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	691b      	ldr	r3, [r3, #16]
 801de82:	429a      	cmp	r2, r3
 801de84:	d106      	bne.n	801de94 <ip_reass_remove_oldest_datagram+0x4c>
 801de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de88:	899a      	ldrh	r2, [r3, #12]
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	889b      	ldrh	r3, [r3, #4]
 801de8e:	b29b      	uxth	r3, r3
 801de90:	429a      	cmp	r2, r3
 801de92:	d014      	beq.n	801debe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801de94:	693b      	ldr	r3, [r7, #16]
 801de96:	3301      	adds	r3, #1
 801de98:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801de9a:	6a3b      	ldr	r3, [r7, #32]
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d104      	bne.n	801deaa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dea2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801dea4:	69fb      	ldr	r3, [r7, #28]
 801dea6:	61bb      	str	r3, [r7, #24]
 801dea8:	e009      	b.n	801debe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deac:	7fda      	ldrb	r2, [r3, #31]
 801deae:	6a3b      	ldr	r3, [r7, #32]
 801deb0:	7fdb      	ldrb	r3, [r3, #31]
 801deb2:	429a      	cmp	r2, r3
 801deb4:	d803      	bhi.n	801debe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801deb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deb8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801deba:	69fb      	ldr	r3, [r7, #28]
 801debc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	d001      	beq.n	801deca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801dec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dec8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801deca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ded2:	2b00      	cmp	r3, #0
 801ded4:	d1cb      	bne.n	801de6e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ded6:	6a3b      	ldr	r3, [r7, #32]
 801ded8:	2b00      	cmp	r3, #0
 801deda:	d008      	beq.n	801deee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801dedc:	69b9      	ldr	r1, [r7, #24]
 801dede:	6a38      	ldr	r0, [r7, #32]
 801dee0:	f7ff ff0e 	bl	801dd00 <ip_reass_free_complete_datagram>
 801dee4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801dee6:	697a      	ldr	r2, [r7, #20]
 801dee8:	68fb      	ldr	r3, [r7, #12]
 801deea:	4413      	add	r3, r2
 801deec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801deee:	697a      	ldr	r2, [r7, #20]
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	429a      	cmp	r2, r3
 801def4:	da02      	bge.n	801defc <ip_reass_remove_oldest_datagram+0xb4>
 801def6:	693b      	ldr	r3, [r7, #16]
 801def8:	2b01      	cmp	r3, #1
 801defa:	dcac      	bgt.n	801de56 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801defc:	697b      	ldr	r3, [r7, #20]
}
 801defe:	4618      	mov	r0, r3
 801df00:	3728      	adds	r7, #40	; 0x28
 801df02:	46bd      	mov	sp, r7
 801df04:	bd80      	pop	{r7, pc}
 801df06:	bf00      	nop
 801df08:	2001ae2c 	.word	0x2001ae2c

0801df0c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801df0c:	b580      	push	{r7, lr}
 801df0e:	b084      	sub	sp, #16
 801df10:	af00      	add	r7, sp, #0
 801df12:	6078      	str	r0, [r7, #4]
 801df14:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801df16:	2004      	movs	r0, #4
 801df18:	f7f6 fc60 	bl	80147dc <memp_malloc>
 801df1c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	2b00      	cmp	r3, #0
 801df22:	d110      	bne.n	801df46 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801df24:	6839      	ldr	r1, [r7, #0]
 801df26:	6878      	ldr	r0, [r7, #4]
 801df28:	f7ff ff8e 	bl	801de48 <ip_reass_remove_oldest_datagram>
 801df2c:	4602      	mov	r2, r0
 801df2e:	683b      	ldr	r3, [r7, #0]
 801df30:	4293      	cmp	r3, r2
 801df32:	dc03      	bgt.n	801df3c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801df34:	2004      	movs	r0, #4
 801df36:	f7f6 fc51 	bl	80147dc <memp_malloc>
 801df3a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801df3c:	68fb      	ldr	r3, [r7, #12]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d101      	bne.n	801df46 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801df42:	2300      	movs	r3, #0
 801df44:	e016      	b.n	801df74 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801df46:	2220      	movs	r2, #32
 801df48:	2100      	movs	r1, #0
 801df4a:	68f8      	ldr	r0, [r7, #12]
 801df4c:	f005 fd49 	bl	80239e2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	220f      	movs	r2, #15
 801df54:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801df56:	4b09      	ldr	r3, [pc, #36]	; (801df7c <ip_reass_enqueue_new_datagram+0x70>)
 801df58:	681a      	ldr	r2, [r3, #0]
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801df5e:	4a07      	ldr	r2, [pc, #28]	; (801df7c <ip_reass_enqueue_new_datagram+0x70>)
 801df60:	68fb      	ldr	r3, [r7, #12]
 801df62:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801df64:	68fb      	ldr	r3, [r7, #12]
 801df66:	3308      	adds	r3, #8
 801df68:	2214      	movs	r2, #20
 801df6a:	6879      	ldr	r1, [r7, #4]
 801df6c:	4618      	mov	r0, r3
 801df6e:	f005 fd10 	bl	8023992 <memcpy>
  return ipr;
 801df72:	68fb      	ldr	r3, [r7, #12]
}
 801df74:	4618      	mov	r0, r3
 801df76:	3710      	adds	r7, #16
 801df78:	46bd      	mov	sp, r7
 801df7a:	bd80      	pop	{r7, pc}
 801df7c:	2001ae2c 	.word	0x2001ae2c

0801df80 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801df80:	b580      	push	{r7, lr}
 801df82:	b082      	sub	sp, #8
 801df84:	af00      	add	r7, sp, #0
 801df86:	6078      	str	r0, [r7, #4]
 801df88:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801df8a:	4b10      	ldr	r3, [pc, #64]	; (801dfcc <ip_reass_dequeue_datagram+0x4c>)
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	687a      	ldr	r2, [r7, #4]
 801df90:	429a      	cmp	r2, r3
 801df92:	d104      	bne.n	801df9e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	681b      	ldr	r3, [r3, #0]
 801df98:	4a0c      	ldr	r2, [pc, #48]	; (801dfcc <ip_reass_dequeue_datagram+0x4c>)
 801df9a:	6013      	str	r3, [r2, #0]
 801df9c:	e00d      	b.n	801dfba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801df9e:	683b      	ldr	r3, [r7, #0]
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	d106      	bne.n	801dfb2 <ip_reass_dequeue_datagram+0x32>
 801dfa4:	4b0a      	ldr	r3, [pc, #40]	; (801dfd0 <ip_reass_dequeue_datagram+0x50>)
 801dfa6:	f240 1245 	movw	r2, #325	; 0x145
 801dfaa:	490a      	ldr	r1, [pc, #40]	; (801dfd4 <ip_reass_dequeue_datagram+0x54>)
 801dfac:	480a      	ldr	r0, [pc, #40]	; (801dfd8 <ip_reass_dequeue_datagram+0x58>)
 801dfae:	f006 fc2f 	bl	8024810 <iprintf>
    prev->next = ipr->next;
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	681a      	ldr	r2, [r3, #0]
 801dfb6:	683b      	ldr	r3, [r7, #0]
 801dfb8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801dfba:	6879      	ldr	r1, [r7, #4]
 801dfbc:	2004      	movs	r0, #4
 801dfbe:	f7f6 fc83 	bl	80148c8 <memp_free>
}
 801dfc2:	bf00      	nop
 801dfc4:	3708      	adds	r7, #8
 801dfc6:	46bd      	mov	sp, r7
 801dfc8:	bd80      	pop	{r7, pc}
 801dfca:	bf00      	nop
 801dfcc:	2001ae2c 	.word	0x2001ae2c
 801dfd0:	0802c904 	.word	0x0802c904
 801dfd4:	0802c9cc 	.word	0x0802c9cc
 801dfd8:	0802c94c 	.word	0x0802c94c

0801dfdc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801dfdc:	b580      	push	{r7, lr}
 801dfde:	b08c      	sub	sp, #48	; 0x30
 801dfe0:	af00      	add	r7, sp, #0
 801dfe2:	60f8      	str	r0, [r7, #12]
 801dfe4:	60b9      	str	r1, [r7, #8]
 801dfe6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801dfe8:	2300      	movs	r3, #0
 801dfea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801dfec:	2301      	movs	r3, #1
 801dfee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801dff0:	68bb      	ldr	r3, [r7, #8]
 801dff2:	685b      	ldr	r3, [r3, #4]
 801dff4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801dff6:	69fb      	ldr	r3, [r7, #28]
 801dff8:	885b      	ldrh	r3, [r3, #2]
 801dffa:	b29b      	uxth	r3, r3
 801dffc:	4618      	mov	r0, r3
 801dffe:	f7f5 ff15 	bl	8013e2c <lwip_htons>
 801e002:	4603      	mov	r3, r0
 801e004:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e006:	69fb      	ldr	r3, [r7, #28]
 801e008:	781b      	ldrb	r3, [r3, #0]
 801e00a:	f003 030f 	and.w	r3, r3, #15
 801e00e:	b2db      	uxtb	r3, r3
 801e010:	009b      	lsls	r3, r3, #2
 801e012:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e014:	7e7b      	ldrb	r3, [r7, #25]
 801e016:	b29b      	uxth	r3, r3
 801e018:	8b7a      	ldrh	r2, [r7, #26]
 801e01a:	429a      	cmp	r2, r3
 801e01c:	d202      	bcs.n	801e024 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e022:	e135      	b.n	801e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e024:	7e7b      	ldrb	r3, [r7, #25]
 801e026:	b29b      	uxth	r3, r3
 801e028:	8b7a      	ldrh	r2, [r7, #26]
 801e02a:	1ad3      	subs	r3, r2, r3
 801e02c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e02e:	69fb      	ldr	r3, [r7, #28]
 801e030:	88db      	ldrh	r3, [r3, #6]
 801e032:	b29b      	uxth	r3, r3
 801e034:	4618      	mov	r0, r3
 801e036:	f7f5 fef9 	bl	8013e2c <lwip_htons>
 801e03a:	4603      	mov	r3, r0
 801e03c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e040:	b29b      	uxth	r3, r3
 801e042:	00db      	lsls	r3, r3, #3
 801e044:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e046:	68bb      	ldr	r3, [r7, #8]
 801e048:	685b      	ldr	r3, [r3, #4]
 801e04a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801e04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e04e:	2200      	movs	r2, #0
 801e050:	701a      	strb	r2, [r3, #0]
 801e052:	2200      	movs	r2, #0
 801e054:	705a      	strb	r2, [r3, #1]
 801e056:	2200      	movs	r2, #0
 801e058:	709a      	strb	r2, [r3, #2]
 801e05a:	2200      	movs	r2, #0
 801e05c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e060:	8afa      	ldrh	r2, [r7, #22]
 801e062:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e064:	8afa      	ldrh	r2, [r7, #22]
 801e066:	8b7b      	ldrh	r3, [r7, #26]
 801e068:	4413      	add	r3, r2
 801e06a:	b29a      	uxth	r2, r3
 801e06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e06e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e072:	88db      	ldrh	r3, [r3, #6]
 801e074:	b29b      	uxth	r3, r3
 801e076:	8afa      	ldrh	r2, [r7, #22]
 801e078:	429a      	cmp	r2, r3
 801e07a:	d902      	bls.n	801e082 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e07c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e080:	e106      	b.n	801e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	685b      	ldr	r3, [r3, #4]
 801e086:	627b      	str	r3, [r7, #36]	; 0x24
 801e088:	e068      	b.n	801e15c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e08c:	685b      	ldr	r3, [r3, #4]
 801e08e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e092:	889b      	ldrh	r3, [r3, #4]
 801e094:	b29a      	uxth	r2, r3
 801e096:	693b      	ldr	r3, [r7, #16]
 801e098:	889b      	ldrh	r3, [r3, #4]
 801e09a:	b29b      	uxth	r3, r3
 801e09c:	429a      	cmp	r2, r3
 801e09e:	d235      	bcs.n	801e10c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e0a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d020      	beq.n	801e0ee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0ae:	889b      	ldrh	r3, [r3, #4]
 801e0b0:	b29a      	uxth	r2, r3
 801e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e0b4:	88db      	ldrh	r3, [r3, #6]
 801e0b6:	b29b      	uxth	r3, r3
 801e0b8:	429a      	cmp	r2, r3
 801e0ba:	d307      	bcc.n	801e0cc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0be:	88db      	ldrh	r3, [r3, #6]
 801e0c0:	b29a      	uxth	r2, r3
 801e0c2:	693b      	ldr	r3, [r7, #16]
 801e0c4:	889b      	ldrh	r3, [r3, #4]
 801e0c6:	b29b      	uxth	r3, r3
 801e0c8:	429a      	cmp	r2, r3
 801e0ca:	d902      	bls.n	801e0d2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e0d0:	e0de      	b.n	801e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e0d4:	68ba      	ldr	r2, [r7, #8]
 801e0d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e0da:	88db      	ldrh	r3, [r3, #6]
 801e0dc:	b29a      	uxth	r2, r3
 801e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0e0:	889b      	ldrh	r3, [r3, #4]
 801e0e2:	b29b      	uxth	r3, r3
 801e0e4:	429a      	cmp	r2, r3
 801e0e6:	d03d      	beq.n	801e164 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e0ec:	e03a      	b.n	801e164 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0f0:	88db      	ldrh	r3, [r3, #6]
 801e0f2:	b29a      	uxth	r2, r3
 801e0f4:	693b      	ldr	r3, [r7, #16]
 801e0f6:	889b      	ldrh	r3, [r3, #4]
 801e0f8:	b29b      	uxth	r3, r3
 801e0fa:	429a      	cmp	r2, r3
 801e0fc:	d902      	bls.n	801e104 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e102:	e0c5      	b.n	801e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	68ba      	ldr	r2, [r7, #8]
 801e108:	605a      	str	r2, [r3, #4]
      break;
 801e10a:	e02b      	b.n	801e164 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e10e:	889b      	ldrh	r3, [r3, #4]
 801e110:	b29a      	uxth	r2, r3
 801e112:	693b      	ldr	r3, [r7, #16]
 801e114:	889b      	ldrh	r3, [r3, #4]
 801e116:	b29b      	uxth	r3, r3
 801e118:	429a      	cmp	r2, r3
 801e11a:	d102      	bne.n	801e122 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e120:	e0b6      	b.n	801e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e124:	889b      	ldrh	r3, [r3, #4]
 801e126:	b29a      	uxth	r2, r3
 801e128:	693b      	ldr	r3, [r7, #16]
 801e12a:	88db      	ldrh	r3, [r3, #6]
 801e12c:	b29b      	uxth	r3, r3
 801e12e:	429a      	cmp	r2, r3
 801e130:	d202      	bcs.n	801e138 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e136:	e0ab      	b.n	801e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e13a:	2b00      	cmp	r3, #0
 801e13c:	d009      	beq.n	801e152 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e140:	88db      	ldrh	r3, [r3, #6]
 801e142:	b29a      	uxth	r2, r3
 801e144:	693b      	ldr	r3, [r7, #16]
 801e146:	889b      	ldrh	r3, [r3, #4]
 801e148:	b29b      	uxth	r3, r3
 801e14a:	429a      	cmp	r2, r3
 801e14c:	d001      	beq.n	801e152 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e14e:	2300      	movs	r3, #0
 801e150:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e152:	693b      	ldr	r3, [r7, #16]
 801e154:	681b      	ldr	r3, [r3, #0]
 801e156:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801e158:	693b      	ldr	r3, [r7, #16]
 801e15a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d193      	bne.n	801e08a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e162:	e000      	b.n	801e166 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e164:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d12d      	bne.n	801e1c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d01c      	beq.n	801e1ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e174:	88db      	ldrh	r3, [r3, #6]
 801e176:	b29a      	uxth	r2, r3
 801e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e17a:	889b      	ldrh	r3, [r3, #4]
 801e17c:	b29b      	uxth	r3, r3
 801e17e:	429a      	cmp	r2, r3
 801e180:	d906      	bls.n	801e190 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e182:	4b45      	ldr	r3, [pc, #276]	; (801e298 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e184:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801e188:	4944      	ldr	r1, [pc, #272]	; (801e29c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e18a:	4845      	ldr	r0, [pc, #276]	; (801e2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e18c:	f006 fb40 	bl	8024810 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e192:	68ba      	ldr	r2, [r7, #8]
 801e194:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e198:	88db      	ldrh	r3, [r3, #6]
 801e19a:	b29a      	uxth	r2, r3
 801e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e19e:	889b      	ldrh	r3, [r3, #4]
 801e1a0:	b29b      	uxth	r3, r3
 801e1a2:	429a      	cmp	r2, r3
 801e1a4:	d010      	beq.n	801e1c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e1a6:	2300      	movs	r3, #0
 801e1a8:	623b      	str	r3, [r7, #32]
 801e1aa:	e00d      	b.n	801e1c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e1ac:	68fb      	ldr	r3, [r7, #12]
 801e1ae:	685b      	ldr	r3, [r3, #4]
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	d006      	beq.n	801e1c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e1b4:	4b38      	ldr	r3, [pc, #224]	; (801e298 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e1b6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801e1ba:	493a      	ldr	r1, [pc, #232]	; (801e2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e1bc:	4838      	ldr	r0, [pc, #224]	; (801e2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e1be:	f006 fb27 	bl	8024810 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e1c2:	68fb      	ldr	r3, [r7, #12]
 801e1c4:	68ba      	ldr	r2, [r7, #8]
 801e1c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d105      	bne.n	801e1da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e1ce:	68fb      	ldr	r3, [r7, #12]
 801e1d0:	7f9b      	ldrb	r3, [r3, #30]
 801e1d2:	f003 0301 	and.w	r3, r3, #1
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d059      	beq.n	801e28e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e1da:	6a3b      	ldr	r3, [r7, #32]
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d04f      	beq.n	801e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	685b      	ldr	r3, [r3, #4]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d006      	beq.n	801e1f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	685b      	ldr	r3, [r3, #4]
 801e1ec:	685b      	ldr	r3, [r3, #4]
 801e1ee:	889b      	ldrh	r3, [r3, #4]
 801e1f0:	b29b      	uxth	r3, r3
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d002      	beq.n	801e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e1f6:	2300      	movs	r3, #0
 801e1f8:	623b      	str	r3, [r7, #32]
 801e1fa:	e041      	b.n	801e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1fe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801e200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e202:	681b      	ldr	r3, [r3, #0]
 801e204:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e206:	e012      	b.n	801e22e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e20a:	685b      	ldr	r3, [r3, #4]
 801e20c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801e20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e210:	88db      	ldrh	r3, [r3, #6]
 801e212:	b29a      	uxth	r2, r3
 801e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e216:	889b      	ldrh	r3, [r3, #4]
 801e218:	b29b      	uxth	r3, r3
 801e21a:	429a      	cmp	r2, r3
 801e21c:	d002      	beq.n	801e224 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e21e:	2300      	movs	r3, #0
 801e220:	623b      	str	r3, [r7, #32]
            break;
 801e222:	e007      	b.n	801e234 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e226:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e22a:	681b      	ldr	r3, [r3, #0]
 801e22c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e230:	2b00      	cmp	r3, #0
 801e232:	d1e9      	bne.n	801e208 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e234:	6a3b      	ldr	r3, [r7, #32]
 801e236:	2b00      	cmp	r3, #0
 801e238:	d022      	beq.n	801e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e23a:	68fb      	ldr	r3, [r7, #12]
 801e23c:	685b      	ldr	r3, [r3, #4]
 801e23e:	2b00      	cmp	r3, #0
 801e240:	d106      	bne.n	801e250 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e242:	4b15      	ldr	r3, [pc, #84]	; (801e298 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e244:	f240 12df 	movw	r2, #479	; 0x1df
 801e248:	4917      	ldr	r1, [pc, #92]	; (801e2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e24a:	4815      	ldr	r0, [pc, #84]	; (801e2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e24c:	f006 fae0 	bl	8024810 <iprintf>
          LWIP_ASSERT("sanity check",
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	685b      	ldr	r3, [r3, #4]
 801e254:	685b      	ldr	r3, [r3, #4]
 801e256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e258:	429a      	cmp	r2, r3
 801e25a:	d106      	bne.n	801e26a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e25c:	4b0e      	ldr	r3, [pc, #56]	; (801e298 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e25e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801e262:	4911      	ldr	r1, [pc, #68]	; (801e2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e264:	480e      	ldr	r0, [pc, #56]	; (801e2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e266:	f006 fad3 	bl	8024810 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d006      	beq.n	801e280 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e272:	4b09      	ldr	r3, [pc, #36]	; (801e298 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e274:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801e278:	490c      	ldr	r1, [pc, #48]	; (801e2ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e27a:	4809      	ldr	r0, [pc, #36]	; (801e2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e27c:	f006 fac8 	bl	8024810 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e280:	6a3b      	ldr	r3, [r7, #32]
 801e282:	2b00      	cmp	r3, #0
 801e284:	bf14      	ite	ne
 801e286:	2301      	movne	r3, #1
 801e288:	2300      	moveq	r3, #0
 801e28a:	b2db      	uxtb	r3, r3
 801e28c:	e000      	b.n	801e290 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e28e:	2300      	movs	r3, #0
}
 801e290:	4618      	mov	r0, r3
 801e292:	3730      	adds	r7, #48	; 0x30
 801e294:	46bd      	mov	sp, r7
 801e296:	bd80      	pop	{r7, pc}
 801e298:	0802c904 	.word	0x0802c904
 801e29c:	0802c9e8 	.word	0x0802c9e8
 801e2a0:	0802c94c 	.word	0x0802c94c
 801e2a4:	0802ca08 	.word	0x0802ca08
 801e2a8:	0802ca40 	.word	0x0802ca40
 801e2ac:	0802ca50 	.word	0x0802ca50

0801e2b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e2b0:	b580      	push	{r7, lr}
 801e2b2:	b08e      	sub	sp, #56	; 0x38
 801e2b4:	af00      	add	r7, sp, #0
 801e2b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	685b      	ldr	r3, [r3, #4]
 801e2bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2c0:	781b      	ldrb	r3, [r3, #0]
 801e2c2:	f003 030f 	and.w	r3, r3, #15
 801e2c6:	b2db      	uxtb	r3, r3
 801e2c8:	009b      	lsls	r3, r3, #2
 801e2ca:	b2db      	uxtb	r3, r3
 801e2cc:	2b14      	cmp	r3, #20
 801e2ce:	f040 8171 	bne.w	801e5b4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2d4:	88db      	ldrh	r3, [r3, #6]
 801e2d6:	b29b      	uxth	r3, r3
 801e2d8:	4618      	mov	r0, r3
 801e2da:	f7f5 fda7 	bl	8013e2c <lwip_htons>
 801e2de:	4603      	mov	r3, r0
 801e2e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e2e4:	b29b      	uxth	r3, r3
 801e2e6:	00db      	lsls	r3, r3, #3
 801e2e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2ec:	885b      	ldrh	r3, [r3, #2]
 801e2ee:	b29b      	uxth	r3, r3
 801e2f0:	4618      	mov	r0, r3
 801e2f2:	f7f5 fd9b 	bl	8013e2c <lwip_htons>
 801e2f6:	4603      	mov	r3, r0
 801e2f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2fc:	781b      	ldrb	r3, [r3, #0]
 801e2fe:	f003 030f 	and.w	r3, r3, #15
 801e302:	b2db      	uxtb	r3, r3
 801e304:	009b      	lsls	r3, r3, #2
 801e306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801e30a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e30e:	b29b      	uxth	r3, r3
 801e310:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e312:	429a      	cmp	r2, r3
 801e314:	f0c0 8150 	bcc.w	801e5b8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e31c:	b29b      	uxth	r3, r3
 801e31e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e320:	1ad3      	subs	r3, r2, r3
 801e322:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e324:	6878      	ldr	r0, [r7, #4]
 801e326:	f7f7 fa01 	bl	801572c <pbuf_clen>
 801e32a:	4603      	mov	r3, r0
 801e32c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e32e:	4b8c      	ldr	r3, [pc, #560]	; (801e560 <ip4_reass+0x2b0>)
 801e330:	881b      	ldrh	r3, [r3, #0]
 801e332:	461a      	mov	r2, r3
 801e334:	8c3b      	ldrh	r3, [r7, #32]
 801e336:	4413      	add	r3, r2
 801e338:	2b0a      	cmp	r3, #10
 801e33a:	dd10      	ble.n	801e35e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e33c:	8c3b      	ldrh	r3, [r7, #32]
 801e33e:	4619      	mov	r1, r3
 801e340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e342:	f7ff fd81 	bl	801de48 <ip_reass_remove_oldest_datagram>
 801e346:	4603      	mov	r3, r0
 801e348:	2b00      	cmp	r3, #0
 801e34a:	f000 8137 	beq.w	801e5bc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e34e:	4b84      	ldr	r3, [pc, #528]	; (801e560 <ip4_reass+0x2b0>)
 801e350:	881b      	ldrh	r3, [r3, #0]
 801e352:	461a      	mov	r2, r3
 801e354:	8c3b      	ldrh	r3, [r7, #32]
 801e356:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e358:	2b0a      	cmp	r3, #10
 801e35a:	f300 812f 	bgt.w	801e5bc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e35e:	4b81      	ldr	r3, [pc, #516]	; (801e564 <ip4_reass+0x2b4>)
 801e360:	681b      	ldr	r3, [r3, #0]
 801e362:	633b      	str	r3, [r7, #48]	; 0x30
 801e364:	e015      	b.n	801e392 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e368:	695a      	ldr	r2, [r3, #20]
 801e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e36c:	68db      	ldr	r3, [r3, #12]
 801e36e:	429a      	cmp	r2, r3
 801e370:	d10c      	bne.n	801e38c <ip4_reass+0xdc>
 801e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e374:	699a      	ldr	r2, [r3, #24]
 801e376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e378:	691b      	ldr	r3, [r3, #16]
 801e37a:	429a      	cmp	r2, r3
 801e37c:	d106      	bne.n	801e38c <ip4_reass+0xdc>
 801e37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e380:	899a      	ldrh	r2, [r3, #12]
 801e382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e384:	889b      	ldrh	r3, [r3, #4]
 801e386:	b29b      	uxth	r3, r3
 801e388:	429a      	cmp	r2, r3
 801e38a:	d006      	beq.n	801e39a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	633b      	str	r3, [r7, #48]	; 0x30
 801e392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e394:	2b00      	cmp	r3, #0
 801e396:	d1e6      	bne.n	801e366 <ip4_reass+0xb6>
 801e398:	e000      	b.n	801e39c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801e39a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801e39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d109      	bne.n	801e3b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e3a2:	8c3b      	ldrh	r3, [r7, #32]
 801e3a4:	4619      	mov	r1, r3
 801e3a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e3a8:	f7ff fdb0 	bl	801df0c <ip_reass_enqueue_new_datagram>
 801e3ac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	d11c      	bne.n	801e3ee <ip4_reass+0x13e>
      goto nullreturn;
 801e3b4:	e105      	b.n	801e5c2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3b8:	88db      	ldrh	r3, [r3, #6]
 801e3ba:	b29b      	uxth	r3, r3
 801e3bc:	4618      	mov	r0, r3
 801e3be:	f7f5 fd35 	bl	8013e2c <lwip_htons>
 801e3c2:	4603      	mov	r3, r0
 801e3c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d110      	bne.n	801e3ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e3ce:	89db      	ldrh	r3, [r3, #14]
 801e3d0:	4618      	mov	r0, r3
 801e3d2:	f7f5 fd2b 	bl	8013e2c <lwip_htons>
 801e3d6:	4603      	mov	r3, r0
 801e3d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d006      	beq.n	801e3ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e3e2:	3308      	adds	r3, #8
 801e3e4:	2214      	movs	r2, #20
 801e3e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e3e8:	4618      	mov	r0, r3
 801e3ea:	f005 fad2 	bl	8023992 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3f0:	88db      	ldrh	r3, [r3, #6]
 801e3f2:	b29b      	uxth	r3, r3
 801e3f4:	f003 0320 	and.w	r3, r3, #32
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	bf0c      	ite	eq
 801e3fc:	2301      	moveq	r3, #1
 801e3fe:	2300      	movne	r3, #0
 801e400:	b2db      	uxtb	r3, r3
 801e402:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e404:	69fb      	ldr	r3, [r7, #28]
 801e406:	2b00      	cmp	r3, #0
 801e408:	d00e      	beq.n	801e428 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801e40a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e40c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e40e:	4413      	add	r3, r2
 801e410:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e412:	8b7a      	ldrh	r2, [r7, #26]
 801e414:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e416:	429a      	cmp	r2, r3
 801e418:	f0c0 80a0 	bcc.w	801e55c <ip4_reass+0x2ac>
 801e41c:	8b7b      	ldrh	r3, [r7, #26]
 801e41e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801e422:	4293      	cmp	r3, r2
 801e424:	f200 809a 	bhi.w	801e55c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e428:	69fa      	ldr	r2, [r7, #28]
 801e42a:	6879      	ldr	r1, [r7, #4]
 801e42c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e42e:	f7ff fdd5 	bl	801dfdc <ip_reass_chain_frag_into_datagram_and_validate>
 801e432:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e434:	697b      	ldr	r3, [r7, #20]
 801e436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e43a:	f000 809b 	beq.w	801e574 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e43e:	4b48      	ldr	r3, [pc, #288]	; (801e560 <ip4_reass+0x2b0>)
 801e440:	881a      	ldrh	r2, [r3, #0]
 801e442:	8c3b      	ldrh	r3, [r7, #32]
 801e444:	4413      	add	r3, r2
 801e446:	b29a      	uxth	r2, r3
 801e448:	4b45      	ldr	r3, [pc, #276]	; (801e560 <ip4_reass+0x2b0>)
 801e44a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e44c:	69fb      	ldr	r3, [r7, #28]
 801e44e:	2b00      	cmp	r3, #0
 801e450:	d00d      	beq.n	801e46e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801e452:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e456:	4413      	add	r3, r2
 801e458:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e45c:	8a7a      	ldrh	r2, [r7, #18]
 801e45e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e462:	7f9b      	ldrb	r3, [r3, #30]
 801e464:	f043 0301 	orr.w	r3, r3, #1
 801e468:	b2da      	uxtb	r2, r3
 801e46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e46c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e46e:	697b      	ldr	r3, [r7, #20]
 801e470:	2b01      	cmp	r3, #1
 801e472:	d171      	bne.n	801e558 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e476:	8b9b      	ldrh	r3, [r3, #28]
 801e478:	3314      	adds	r3, #20
 801e47a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e47e:	685b      	ldr	r3, [r3, #4]
 801e480:	685b      	ldr	r3, [r3, #4]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e488:	685b      	ldr	r3, [r3, #4]
 801e48a:	685b      	ldr	r3, [r3, #4]
 801e48c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e490:	3308      	adds	r3, #8
 801e492:	2214      	movs	r2, #20
 801e494:	4619      	mov	r1, r3
 801e496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e498:	f005 fa7b 	bl	8023992 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e49c:	8a3b      	ldrh	r3, [r7, #16]
 801e49e:	4618      	mov	r0, r3
 801e4a0:	f7f5 fcc4 	bl	8013e2c <lwip_htons>
 801e4a4:	4603      	mov	r3, r0
 801e4a6:	461a      	mov	r2, r3
 801e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4ae:	2200      	movs	r2, #0
 801e4b0:	719a      	strb	r2, [r3, #6]
 801e4b2:	2200      	movs	r2, #0
 801e4b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4b8:	2200      	movs	r2, #0
 801e4ba:	729a      	strb	r2, [r3, #10]
 801e4bc:	2200      	movs	r2, #0
 801e4be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e4c2:	685b      	ldr	r3, [r3, #4]
 801e4c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e4c6:	e00d      	b.n	801e4e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801e4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e4ca:	685b      	ldr	r3, [r3, #4]
 801e4cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e4ce:	2114      	movs	r1, #20
 801e4d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e4d2:	f7f7 f817 	bl	8015504 <pbuf_remove_header>
      pbuf_cat(p, r);
 801e4d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e4d8:	6878      	ldr	r0, [r7, #4]
 801e4da:	f7f7 f967 	bl	80157ac <pbuf_cat>
      r = iprh->next_pbuf;
 801e4de:	68fb      	ldr	r3, [r7, #12]
 801e4e0:	681b      	ldr	r3, [r3, #0]
 801e4e2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801e4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	d1ee      	bne.n	801e4c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e4ea:	4b1e      	ldr	r3, [pc, #120]	; (801e564 <ip4_reass+0x2b4>)
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e4f0:	429a      	cmp	r2, r3
 801e4f2:	d102      	bne.n	801e4fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 801e4f4:	2300      	movs	r3, #0
 801e4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e4f8:	e010      	b.n	801e51c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e4fa:	4b1a      	ldr	r3, [pc, #104]	; (801e564 <ip4_reass+0x2b4>)
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e500:	e007      	b.n	801e512 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801e502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e508:	429a      	cmp	r2, r3
 801e50a:	d006      	beq.n	801e51a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e514:	2b00      	cmp	r3, #0
 801e516:	d1f4      	bne.n	801e502 <ip4_reass+0x252>
 801e518:	e000      	b.n	801e51c <ip4_reass+0x26c>
          break;
 801e51a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e51c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e51e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e520:	f7ff fd2e 	bl	801df80 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e524:	6878      	ldr	r0, [r7, #4]
 801e526:	f7f7 f901 	bl	801572c <pbuf_clen>
 801e52a:	4603      	mov	r3, r0
 801e52c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e52e:	4b0c      	ldr	r3, [pc, #48]	; (801e560 <ip4_reass+0x2b0>)
 801e530:	881b      	ldrh	r3, [r3, #0]
 801e532:	8c3a      	ldrh	r2, [r7, #32]
 801e534:	429a      	cmp	r2, r3
 801e536:	d906      	bls.n	801e546 <ip4_reass+0x296>
 801e538:	4b0b      	ldr	r3, [pc, #44]	; (801e568 <ip4_reass+0x2b8>)
 801e53a:	f240 229b 	movw	r2, #667	; 0x29b
 801e53e:	490b      	ldr	r1, [pc, #44]	; (801e56c <ip4_reass+0x2bc>)
 801e540:	480b      	ldr	r0, [pc, #44]	; (801e570 <ip4_reass+0x2c0>)
 801e542:	f006 f965 	bl	8024810 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e546:	4b06      	ldr	r3, [pc, #24]	; (801e560 <ip4_reass+0x2b0>)
 801e548:	881a      	ldrh	r2, [r3, #0]
 801e54a:	8c3b      	ldrh	r3, [r7, #32]
 801e54c:	1ad3      	subs	r3, r2, r3
 801e54e:	b29a      	uxth	r2, r3
 801e550:	4b03      	ldr	r3, [pc, #12]	; (801e560 <ip4_reass+0x2b0>)
 801e552:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e554:	687b      	ldr	r3, [r7, #4]
 801e556:	e038      	b.n	801e5ca <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e558:	2300      	movs	r3, #0
 801e55a:	e036      	b.n	801e5ca <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801e55c:	bf00      	nop
 801e55e:	e00a      	b.n	801e576 <ip4_reass+0x2c6>
 801e560:	2001ae30 	.word	0x2001ae30
 801e564:	2001ae2c 	.word	0x2001ae2c
 801e568:	0802c904 	.word	0x0802c904
 801e56c:	0802ca74 	.word	0x0802ca74
 801e570:	0802c94c 	.word	0x0802c94c
    goto nullreturn_ipr;
 801e574:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e578:	2b00      	cmp	r3, #0
 801e57a:	d106      	bne.n	801e58a <ip4_reass+0x2da>
 801e57c:	4b15      	ldr	r3, [pc, #84]	; (801e5d4 <ip4_reass+0x324>)
 801e57e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801e582:	4915      	ldr	r1, [pc, #84]	; (801e5d8 <ip4_reass+0x328>)
 801e584:	4815      	ldr	r0, [pc, #84]	; (801e5dc <ip4_reass+0x32c>)
 801e586:	f006 f943 	bl	8024810 <iprintf>
  if (ipr->p == NULL) {
 801e58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e58c:	685b      	ldr	r3, [r3, #4]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d116      	bne.n	801e5c0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e592:	4b13      	ldr	r3, [pc, #76]	; (801e5e0 <ip4_reass+0x330>)
 801e594:	681b      	ldr	r3, [r3, #0]
 801e596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e598:	429a      	cmp	r2, r3
 801e59a:	d006      	beq.n	801e5aa <ip4_reass+0x2fa>
 801e59c:	4b0d      	ldr	r3, [pc, #52]	; (801e5d4 <ip4_reass+0x324>)
 801e59e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e5a2:	4910      	ldr	r1, [pc, #64]	; (801e5e4 <ip4_reass+0x334>)
 801e5a4:	480d      	ldr	r0, [pc, #52]	; (801e5dc <ip4_reass+0x32c>)
 801e5a6:	f006 f933 	bl	8024810 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e5aa:	2100      	movs	r1, #0
 801e5ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e5ae:	f7ff fce7 	bl	801df80 <ip_reass_dequeue_datagram>
 801e5b2:	e006      	b.n	801e5c2 <ip4_reass+0x312>
    goto nullreturn;
 801e5b4:	bf00      	nop
 801e5b6:	e004      	b.n	801e5c2 <ip4_reass+0x312>
    goto nullreturn;
 801e5b8:	bf00      	nop
 801e5ba:	e002      	b.n	801e5c2 <ip4_reass+0x312>
      goto nullreturn;
 801e5bc:	bf00      	nop
 801e5be:	e000      	b.n	801e5c2 <ip4_reass+0x312>
  }

nullreturn:
 801e5c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801e5c2:	6878      	ldr	r0, [r7, #4]
 801e5c4:	f7f7 f824 	bl	8015610 <pbuf_free>
  return NULL;
 801e5c8:	2300      	movs	r3, #0
}
 801e5ca:	4618      	mov	r0, r3
 801e5cc:	3738      	adds	r7, #56	; 0x38
 801e5ce:	46bd      	mov	sp, r7
 801e5d0:	bd80      	pop	{r7, pc}
 801e5d2:	bf00      	nop
 801e5d4:	0802c904 	.word	0x0802c904
 801e5d8:	0802ca90 	.word	0x0802ca90
 801e5dc:	0802c94c 	.word	0x0802c94c
 801e5e0:	2001ae2c 	.word	0x2001ae2c
 801e5e4:	0802ca9c 	.word	0x0802ca9c

0801e5e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e5e8:	b580      	push	{r7, lr}
 801e5ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e5ec:	2005      	movs	r0, #5
 801e5ee:	f7f6 f8f5 	bl	80147dc <memp_malloc>
 801e5f2:	4603      	mov	r3, r0
}
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	bd80      	pop	{r7, pc}

0801e5f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e5f8:	b580      	push	{r7, lr}
 801e5fa:	b082      	sub	sp, #8
 801e5fc:	af00      	add	r7, sp, #0
 801e5fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	2b00      	cmp	r3, #0
 801e604:	d106      	bne.n	801e614 <ip_frag_free_pbuf_custom_ref+0x1c>
 801e606:	4b07      	ldr	r3, [pc, #28]	; (801e624 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e608:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801e60c:	4906      	ldr	r1, [pc, #24]	; (801e628 <ip_frag_free_pbuf_custom_ref+0x30>)
 801e60e:	4807      	ldr	r0, [pc, #28]	; (801e62c <ip_frag_free_pbuf_custom_ref+0x34>)
 801e610:	f006 f8fe 	bl	8024810 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e614:	6879      	ldr	r1, [r7, #4]
 801e616:	2005      	movs	r0, #5
 801e618:	f7f6 f956 	bl	80148c8 <memp_free>
}
 801e61c:	bf00      	nop
 801e61e:	3708      	adds	r7, #8
 801e620:	46bd      	mov	sp, r7
 801e622:	bd80      	pop	{r7, pc}
 801e624:	0802c904 	.word	0x0802c904
 801e628:	0802cabc 	.word	0x0802cabc
 801e62c:	0802c94c 	.word	0x0802c94c

0801e630 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e630:	b580      	push	{r7, lr}
 801e632:	b084      	sub	sp, #16
 801e634:	af00      	add	r7, sp, #0
 801e636:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e63c:	68fb      	ldr	r3, [r7, #12]
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d106      	bne.n	801e650 <ipfrag_free_pbuf_custom+0x20>
 801e642:	4b11      	ldr	r3, [pc, #68]	; (801e688 <ipfrag_free_pbuf_custom+0x58>)
 801e644:	f240 22ce 	movw	r2, #718	; 0x2ce
 801e648:	4910      	ldr	r1, [pc, #64]	; (801e68c <ipfrag_free_pbuf_custom+0x5c>)
 801e64a:	4811      	ldr	r0, [pc, #68]	; (801e690 <ipfrag_free_pbuf_custom+0x60>)
 801e64c:	f006 f8e0 	bl	8024810 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e650:	68fa      	ldr	r2, [r7, #12]
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	429a      	cmp	r2, r3
 801e656:	d006      	beq.n	801e666 <ipfrag_free_pbuf_custom+0x36>
 801e658:	4b0b      	ldr	r3, [pc, #44]	; (801e688 <ipfrag_free_pbuf_custom+0x58>)
 801e65a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801e65e:	490d      	ldr	r1, [pc, #52]	; (801e694 <ipfrag_free_pbuf_custom+0x64>)
 801e660:	480b      	ldr	r0, [pc, #44]	; (801e690 <ipfrag_free_pbuf_custom+0x60>)
 801e662:	f006 f8d5 	bl	8024810 <iprintf>
  if (pcr->original != NULL) {
 801e666:	68fb      	ldr	r3, [r7, #12]
 801e668:	695b      	ldr	r3, [r3, #20]
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d004      	beq.n	801e678 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e66e:	68fb      	ldr	r3, [r7, #12]
 801e670:	695b      	ldr	r3, [r3, #20]
 801e672:	4618      	mov	r0, r3
 801e674:	f7f6 ffcc 	bl	8015610 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e678:	68f8      	ldr	r0, [r7, #12]
 801e67a:	f7ff ffbd 	bl	801e5f8 <ip_frag_free_pbuf_custom_ref>
}
 801e67e:	bf00      	nop
 801e680:	3710      	adds	r7, #16
 801e682:	46bd      	mov	sp, r7
 801e684:	bd80      	pop	{r7, pc}
 801e686:	bf00      	nop
 801e688:	0802c904 	.word	0x0802c904
 801e68c:	0802cac8 	.word	0x0802cac8
 801e690:	0802c94c 	.word	0x0802c94c
 801e694:	0802cad4 	.word	0x0802cad4

0801e698 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e698:	b580      	push	{r7, lr}
 801e69a:	b094      	sub	sp, #80	; 0x50
 801e69c:	af02      	add	r7, sp, #8
 801e69e:	60f8      	str	r0, [r7, #12]
 801e6a0:	60b9      	str	r1, [r7, #8]
 801e6a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e6a4:	2300      	movs	r3, #0
 801e6a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e6aa:	68bb      	ldr	r3, [r7, #8]
 801e6ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e6ae:	3b14      	subs	r3, #20
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	da00      	bge.n	801e6b6 <ip4_frag+0x1e>
 801e6b4:	3307      	adds	r3, #7
 801e6b6:	10db      	asrs	r3, r3, #3
 801e6b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e6ba:	2314      	movs	r3, #20
 801e6bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e6be:	68fb      	ldr	r3, [r7, #12]
 801e6c0:	685b      	ldr	r3, [r3, #4]
 801e6c2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801e6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6ca:	781b      	ldrb	r3, [r3, #0]
 801e6cc:	f003 030f 	and.w	r3, r3, #15
 801e6d0:	b2db      	uxtb	r3, r3
 801e6d2:	009b      	lsls	r3, r3, #2
 801e6d4:	b2db      	uxtb	r3, r3
 801e6d6:	2b14      	cmp	r3, #20
 801e6d8:	d002      	beq.n	801e6e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e6da:	f06f 0305 	mvn.w	r3, #5
 801e6de:	e110      	b.n	801e902 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e6e0:	68fb      	ldr	r3, [r7, #12]
 801e6e2:	895b      	ldrh	r3, [r3, #10]
 801e6e4:	2b13      	cmp	r3, #19
 801e6e6:	d809      	bhi.n	801e6fc <ip4_frag+0x64>
 801e6e8:	4b88      	ldr	r3, [pc, #544]	; (801e90c <ip4_frag+0x274>)
 801e6ea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801e6ee:	4988      	ldr	r1, [pc, #544]	; (801e910 <ip4_frag+0x278>)
 801e6f0:	4888      	ldr	r0, [pc, #544]	; (801e914 <ip4_frag+0x27c>)
 801e6f2:	f006 f88d 	bl	8024810 <iprintf>
 801e6f6:	f06f 0305 	mvn.w	r3, #5
 801e6fa:	e102      	b.n	801e902 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6fe:	88db      	ldrh	r3, [r3, #6]
 801e700:	b29b      	uxth	r3, r3
 801e702:	4618      	mov	r0, r3
 801e704:	f7f5 fb92 	bl	8013e2c <lwip_htons>
 801e708:	4603      	mov	r3, r0
 801e70a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801e70c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e70e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e712:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e716:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801e71c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e71e:	68fb      	ldr	r3, [r7, #12]
 801e720:	891b      	ldrh	r3, [r3, #8]
 801e722:	3b14      	subs	r3, #20
 801e724:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801e728:	e0e1      	b.n	801e8ee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e72a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e72c:	00db      	lsls	r3, r3, #3
 801e72e:	b29b      	uxth	r3, r3
 801e730:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e734:	4293      	cmp	r3, r2
 801e736:	bf28      	it	cs
 801e738:	4613      	movcs	r3, r2
 801e73a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e73c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e740:	2114      	movs	r1, #20
 801e742:	200e      	movs	r0, #14
 801e744:	f7f6 fc80 	bl	8015048 <pbuf_alloc>
 801e748:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801e74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	f000 80d5 	beq.w	801e8fc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e754:	895b      	ldrh	r3, [r3, #10]
 801e756:	2b13      	cmp	r3, #19
 801e758:	d806      	bhi.n	801e768 <ip4_frag+0xd0>
 801e75a:	4b6c      	ldr	r3, [pc, #432]	; (801e90c <ip4_frag+0x274>)
 801e75c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801e760:	496d      	ldr	r1, [pc, #436]	; (801e918 <ip4_frag+0x280>)
 801e762:	486c      	ldr	r0, [pc, #432]	; (801e914 <ip4_frag+0x27c>)
 801e764:	f006 f854 	bl	8024810 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e76a:	685b      	ldr	r3, [r3, #4]
 801e76c:	2214      	movs	r2, #20
 801e76e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e770:	4618      	mov	r0, r3
 801e772:	f005 f90e 	bl	8023992 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e778:	685b      	ldr	r3, [r3, #4]
 801e77a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801e77c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e77e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801e782:	e064      	b.n	801e84e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	895a      	ldrh	r2, [r3, #10]
 801e788:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e78a:	1ad3      	subs	r3, r2, r3
 801e78c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e78e:	68fb      	ldr	r3, [r7, #12]
 801e790:	895b      	ldrh	r3, [r3, #10]
 801e792:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e794:	429a      	cmp	r2, r3
 801e796:	d906      	bls.n	801e7a6 <ip4_frag+0x10e>
 801e798:	4b5c      	ldr	r3, [pc, #368]	; (801e90c <ip4_frag+0x274>)
 801e79a:	f240 322d 	movw	r2, #813	; 0x32d
 801e79e:	495f      	ldr	r1, [pc, #380]	; (801e91c <ip4_frag+0x284>)
 801e7a0:	485c      	ldr	r0, [pc, #368]	; (801e914 <ip4_frag+0x27c>)
 801e7a2:	f006 f835 	bl	8024810 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e7a6:	8bfa      	ldrh	r2, [r7, #30]
 801e7a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e7ac:	4293      	cmp	r3, r2
 801e7ae:	bf28      	it	cs
 801e7b0:	4613      	movcs	r3, r2
 801e7b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e7b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d105      	bne.n	801e7ca <ip4_frag+0x132>
        poff = 0;
 801e7be:	2300      	movs	r3, #0
 801e7c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e7c2:	68fb      	ldr	r3, [r7, #12]
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	60fb      	str	r3, [r7, #12]
        continue;
 801e7c8:	e041      	b.n	801e84e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e7ca:	f7ff ff0d 	bl	801e5e8 <ip_frag_alloc_pbuf_custom_ref>
 801e7ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e7d0:	69bb      	ldr	r3, [r7, #24]
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	d103      	bne.n	801e7de <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e7d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e7d8:	f7f6 ff1a 	bl	8015610 <pbuf_free>
        goto memerr;
 801e7dc:	e08f      	b.n	801e8fe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e7de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e7e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e7e6:	4413      	add	r3, r2
 801e7e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801e7ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801e7f0:	9201      	str	r2, [sp, #4]
 801e7f2:	9300      	str	r3, [sp, #0]
 801e7f4:	4603      	mov	r3, r0
 801e7f6:	2241      	movs	r2, #65	; 0x41
 801e7f8:	2000      	movs	r0, #0
 801e7fa:	f7f6 fd4f 	bl	801529c <pbuf_alloced_custom>
 801e7fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e800:	697b      	ldr	r3, [r7, #20]
 801e802:	2b00      	cmp	r3, #0
 801e804:	d106      	bne.n	801e814 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e806:	69b8      	ldr	r0, [r7, #24]
 801e808:	f7ff fef6 	bl	801e5f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e80c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e80e:	f7f6 feff 	bl	8015610 <pbuf_free>
        goto memerr;
 801e812:	e074      	b.n	801e8fe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801e814:	68f8      	ldr	r0, [r7, #12]
 801e816:	f7f6 ffa1 	bl	801575c <pbuf_ref>
      pcr->original = p;
 801e81a:	69bb      	ldr	r3, [r7, #24]
 801e81c:	68fa      	ldr	r2, [r7, #12]
 801e81e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e820:	69bb      	ldr	r3, [r7, #24]
 801e822:	4a3f      	ldr	r2, [pc, #252]	; (801e920 <ip4_frag+0x288>)
 801e824:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e826:	6979      	ldr	r1, [r7, #20]
 801e828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e82a:	f7f6 ffbf 	bl	80157ac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e82e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801e832:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e836:	1ad3      	subs	r3, r2, r3
 801e838:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801e83c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e840:	2b00      	cmp	r3, #0
 801e842:	d004      	beq.n	801e84e <ip4_frag+0x1b6>
        poff = 0;
 801e844:	2300      	movs	r3, #0
 801e846:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801e848:	68fb      	ldr	r3, [r7, #12]
 801e84a:	681b      	ldr	r3, [r3, #0]
 801e84c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e84e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801e852:	2b00      	cmp	r3, #0
 801e854:	d196      	bne.n	801e784 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e856:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e858:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e85c:	4413      	add	r3, r2
 801e85e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801e860:	68bb      	ldr	r3, [r7, #8]
 801e862:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e864:	f1a3 0213 	sub.w	r2, r3, #19
 801e868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e86c:	429a      	cmp	r2, r3
 801e86e:	bfcc      	ite	gt
 801e870:	2301      	movgt	r3, #1
 801e872:	2300      	movle	r3, #0
 801e874:	b2db      	uxtb	r3, r3
 801e876:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801e878:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e87c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e880:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801e882:	6a3b      	ldr	r3, [r7, #32]
 801e884:	2b00      	cmp	r3, #0
 801e886:	d002      	beq.n	801e88e <ip4_frag+0x1f6>
 801e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	d003      	beq.n	801e896 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801e88e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e894:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801e896:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e898:	4618      	mov	r0, r3
 801e89a:	f7f5 fac7 	bl	8013e2c <lwip_htons>
 801e89e:	4603      	mov	r3, r0
 801e8a0:	461a      	mov	r2, r3
 801e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8a4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801e8a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e8a8:	3314      	adds	r3, #20
 801e8aa:	b29b      	uxth	r3, r3
 801e8ac:	4618      	mov	r0, r3
 801e8ae:	f7f5 fabd 	bl	8013e2c <lwip_htons>
 801e8b2:	4603      	mov	r3, r0
 801e8b4:	461a      	mov	r2, r3
 801e8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8b8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801e8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8bc:	2200      	movs	r2, #0
 801e8be:	729a      	strb	r2, [r3, #10]
 801e8c0:	2200      	movs	r2, #0
 801e8c2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801e8c4:	68bb      	ldr	r3, [r7, #8]
 801e8c6:	695b      	ldr	r3, [r3, #20]
 801e8c8:	687a      	ldr	r2, [r7, #4]
 801e8ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e8cc:	68b8      	ldr	r0, [r7, #8]
 801e8ce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801e8d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e8d2:	f7f6 fe9d 	bl	8015610 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801e8d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e8da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e8dc:	1ad3      	subs	r3, r2, r3
 801e8de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801e8e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801e8e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e8e8:	4413      	add	r3, r2
 801e8ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801e8ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	f47f af19 	bne.w	801e72a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801e8f8:	2300      	movs	r3, #0
 801e8fa:	e002      	b.n	801e902 <ip4_frag+0x26a>
      goto memerr;
 801e8fc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801e8fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801e902:	4618      	mov	r0, r3
 801e904:	3748      	adds	r7, #72	; 0x48
 801e906:	46bd      	mov	sp, r7
 801e908:	bd80      	pop	{r7, pc}
 801e90a:	bf00      	nop
 801e90c:	0802c904 	.word	0x0802c904
 801e910:	0802cae0 	.word	0x0802cae0
 801e914:	0802c94c 	.word	0x0802c94c
 801e918:	0802cafc 	.word	0x0802cafc
 801e91c:	0802cb1c 	.word	0x0802cb1c
 801e920:	0801e631 	.word	0x0801e631

0801e924 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801e924:	b580      	push	{r7, lr}
 801e926:	b086      	sub	sp, #24
 801e928:	af00      	add	r7, sp, #0
 801e92a:	6078      	str	r0, [r7, #4]
 801e92c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801e92e:	230e      	movs	r3, #14
 801e930:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	895b      	ldrh	r3, [r3, #10]
 801e936:	2b0e      	cmp	r3, #14
 801e938:	d96e      	bls.n	801ea18 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	7bdb      	ldrb	r3, [r3, #15]
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d106      	bne.n	801e950 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801e942:	683b      	ldr	r3, [r7, #0]
 801e944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e948:	3301      	adds	r3, #1
 801e94a:	b2da      	uxtb	r2, r3
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	685b      	ldr	r3, [r3, #4]
 801e954:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801e956:	693b      	ldr	r3, [r7, #16]
 801e958:	7b1a      	ldrb	r2, [r3, #12]
 801e95a:	7b5b      	ldrb	r3, [r3, #13]
 801e95c:	021b      	lsls	r3, r3, #8
 801e95e:	4313      	orrs	r3, r2
 801e960:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801e962:	693b      	ldr	r3, [r7, #16]
 801e964:	781b      	ldrb	r3, [r3, #0]
 801e966:	f003 0301 	and.w	r3, r3, #1
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	d023      	beq.n	801e9b6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801e96e:	693b      	ldr	r3, [r7, #16]
 801e970:	781b      	ldrb	r3, [r3, #0]
 801e972:	2b01      	cmp	r3, #1
 801e974:	d10f      	bne.n	801e996 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e976:	693b      	ldr	r3, [r7, #16]
 801e978:	785b      	ldrb	r3, [r3, #1]
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	d11b      	bne.n	801e9b6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e97e:	693b      	ldr	r3, [r7, #16]
 801e980:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e982:	2b5e      	cmp	r3, #94	; 0x5e
 801e984:	d117      	bne.n	801e9b6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	7b5b      	ldrb	r3, [r3, #13]
 801e98a:	f043 0310 	orr.w	r3, r3, #16
 801e98e:	b2da      	uxtb	r2, r3
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	735a      	strb	r2, [r3, #13]
 801e994:	e00f      	b.n	801e9b6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e996:	693b      	ldr	r3, [r7, #16]
 801e998:	2206      	movs	r2, #6
 801e99a:	4928      	ldr	r1, [pc, #160]	; (801ea3c <ethernet_input+0x118>)
 801e99c:	4618      	mov	r0, r3
 801e99e:	f004 ffe8 	bl	8023972 <memcmp>
 801e9a2:	4603      	mov	r3, r0
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	d106      	bne.n	801e9b6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	7b5b      	ldrb	r3, [r3, #13]
 801e9ac:	f043 0308 	orr.w	r3, r3, #8
 801e9b0:	b2da      	uxtb	r2, r3
 801e9b2:	687b      	ldr	r3, [r7, #4]
 801e9b4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e9b6:	89fb      	ldrh	r3, [r7, #14]
 801e9b8:	2b08      	cmp	r3, #8
 801e9ba:	d003      	beq.n	801e9c4 <ethernet_input+0xa0>
 801e9bc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801e9c0:	d014      	beq.n	801e9ec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e9c2:	e032      	b.n	801ea2a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e9c4:	683b      	ldr	r3, [r7, #0]
 801e9c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e9ca:	f003 0308 	and.w	r3, r3, #8
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d024      	beq.n	801ea1c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e9d2:	8afb      	ldrh	r3, [r7, #22]
 801e9d4:	4619      	mov	r1, r3
 801e9d6:	6878      	ldr	r0, [r7, #4]
 801e9d8:	f7f6 fd94 	bl	8015504 <pbuf_remove_header>
 801e9dc:	4603      	mov	r3, r0
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	d11e      	bne.n	801ea20 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801e9e2:	6839      	ldr	r1, [r7, #0]
 801e9e4:	6878      	ldr	r0, [r7, #4]
 801e9e6:	f7fe ff21 	bl	801d82c <ip4_input>
      break;
 801e9ea:	e013      	b.n	801ea14 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e9ec:	683b      	ldr	r3, [r7, #0]
 801e9ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e9f2:	f003 0308 	and.w	r3, r3, #8
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	d014      	beq.n	801ea24 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e9fa:	8afb      	ldrh	r3, [r7, #22]
 801e9fc:	4619      	mov	r1, r3
 801e9fe:	6878      	ldr	r0, [r7, #4]
 801ea00:	f7f6 fd80 	bl	8015504 <pbuf_remove_header>
 801ea04:	4603      	mov	r3, r0
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d10e      	bne.n	801ea28 <ethernet_input+0x104>
        etharp_input(p, netif);
 801ea0a:	6839      	ldr	r1, [r7, #0]
 801ea0c:	6878      	ldr	r0, [r7, #4]
 801ea0e:	f7fe f8c1 	bl	801cb94 <etharp_input>
      break;
 801ea12:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ea14:	2300      	movs	r3, #0
 801ea16:	e00c      	b.n	801ea32 <ethernet_input+0x10e>
    goto free_and_return;
 801ea18:	bf00      	nop
 801ea1a:	e006      	b.n	801ea2a <ethernet_input+0x106>
        goto free_and_return;
 801ea1c:	bf00      	nop
 801ea1e:	e004      	b.n	801ea2a <ethernet_input+0x106>
        goto free_and_return;
 801ea20:	bf00      	nop
 801ea22:	e002      	b.n	801ea2a <ethernet_input+0x106>
        goto free_and_return;
 801ea24:	bf00      	nop
 801ea26:	e000      	b.n	801ea2a <ethernet_input+0x106>
        goto free_and_return;
 801ea28:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ea2a:	6878      	ldr	r0, [r7, #4]
 801ea2c:	f7f6 fdf0 	bl	8015610 <pbuf_free>
  return ERR_OK;
 801ea30:	2300      	movs	r3, #0
}
 801ea32:	4618      	mov	r0, r3
 801ea34:	3718      	adds	r7, #24
 801ea36:	46bd      	mov	sp, r7
 801ea38:	bd80      	pop	{r7, pc}
 801ea3a:	bf00      	nop
 801ea3c:	0802d518 	.word	0x0802d518

0801ea40 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ea40:	b580      	push	{r7, lr}
 801ea42:	b086      	sub	sp, #24
 801ea44:	af00      	add	r7, sp, #0
 801ea46:	60f8      	str	r0, [r7, #12]
 801ea48:	60b9      	str	r1, [r7, #8]
 801ea4a:	607a      	str	r2, [r7, #4]
 801ea4c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ea4e:	8c3b      	ldrh	r3, [r7, #32]
 801ea50:	4618      	mov	r0, r3
 801ea52:	f7f5 f9eb 	bl	8013e2c <lwip_htons>
 801ea56:	4603      	mov	r3, r0
 801ea58:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ea5a:	210e      	movs	r1, #14
 801ea5c:	68b8      	ldr	r0, [r7, #8]
 801ea5e:	f7f6 fd41 	bl	80154e4 <pbuf_add_header>
 801ea62:	4603      	mov	r3, r0
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d125      	bne.n	801eab4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ea68:	68bb      	ldr	r3, [r7, #8]
 801ea6a:	685b      	ldr	r3, [r3, #4]
 801ea6c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ea6e:	693b      	ldr	r3, [r7, #16]
 801ea70:	8afa      	ldrh	r2, [r7, #22]
 801ea72:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ea74:	693b      	ldr	r3, [r7, #16]
 801ea76:	2206      	movs	r2, #6
 801ea78:	6839      	ldr	r1, [r7, #0]
 801ea7a:	4618      	mov	r0, r3
 801ea7c:	f004 ff89 	bl	8023992 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ea80:	693b      	ldr	r3, [r7, #16]
 801ea82:	3306      	adds	r3, #6
 801ea84:	2206      	movs	r2, #6
 801ea86:	6879      	ldr	r1, [r7, #4]
 801ea88:	4618      	mov	r0, r3
 801ea8a:	f004 ff82 	bl	8023992 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ea8e:	68fb      	ldr	r3, [r7, #12]
 801ea90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ea94:	2b06      	cmp	r3, #6
 801ea96:	d006      	beq.n	801eaa6 <ethernet_output+0x66>
 801ea98:	4b0a      	ldr	r3, [pc, #40]	; (801eac4 <ethernet_output+0x84>)
 801ea9a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ea9e:	490a      	ldr	r1, [pc, #40]	; (801eac8 <ethernet_output+0x88>)
 801eaa0:	480a      	ldr	r0, [pc, #40]	; (801eacc <ethernet_output+0x8c>)
 801eaa2:	f005 feb5 	bl	8024810 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801eaa6:	68fb      	ldr	r3, [r7, #12]
 801eaa8:	699b      	ldr	r3, [r3, #24]
 801eaaa:	68b9      	ldr	r1, [r7, #8]
 801eaac:	68f8      	ldr	r0, [r7, #12]
 801eaae:	4798      	blx	r3
 801eab0:	4603      	mov	r3, r0
 801eab2:	e002      	b.n	801eaba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801eab4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801eab6:	f06f 0301 	mvn.w	r3, #1
}
 801eaba:	4618      	mov	r0, r3
 801eabc:	3718      	adds	r7, #24
 801eabe:	46bd      	mov	sp, r7
 801eac0:	bd80      	pop	{r7, pc}
 801eac2:	bf00      	nop
 801eac4:	0802cb2c 	.word	0x0802cb2c
 801eac8:	0802cb64 	.word	0x0802cb64
 801eacc:	0802cb98 	.word	0x0802cb98

0801ead0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ead0:	b580      	push	{r7, lr}
 801ead2:	b082      	sub	sp, #8
 801ead4:	af00      	add	r7, sp, #0
 801ead6:	6078      	str	r0, [r7, #4]
 801ead8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801eada:	683b      	ldr	r3, [r7, #0]
 801eadc:	2200      	movs	r2, #0
 801eade:	2104      	movs	r1, #4
 801eae0:	4618      	mov	r0, r3
 801eae2:	f7ef f99f 	bl	800de24 <osMessageQueueNew>
 801eae6:	4602      	mov	r2, r0
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d102      	bne.n	801eafa <sys_mbox_new+0x2a>
    return ERR_MEM;
 801eaf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eaf8:	e000      	b.n	801eafc <sys_mbox_new+0x2c>

  return ERR_OK;
 801eafa:	2300      	movs	r3, #0
}
 801eafc:	4618      	mov	r0, r3
 801eafe:	3708      	adds	r7, #8
 801eb00:	46bd      	mov	sp, r7
 801eb02:	bd80      	pop	{r7, pc}

0801eb04 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801eb04:	b580      	push	{r7, lr}
 801eb06:	b082      	sub	sp, #8
 801eb08:	af00      	add	r7, sp, #0
 801eb0a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	681b      	ldr	r3, [r3, #0]
 801eb10:	4618      	mov	r0, r3
 801eb12:	f7ef faf3 	bl	800e0fc <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	4618      	mov	r0, r3
 801eb1c:	f7ef fb20 	bl	800e160 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801eb20:	bf00      	nop
 801eb22:	3708      	adds	r7, #8
 801eb24:	46bd      	mov	sp, r7
 801eb26:	bd80      	pop	{r7, pc}

0801eb28 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801eb28:	b580      	push	{r7, lr}
 801eb2a:	b084      	sub	sp, #16
 801eb2c:	af00      	add	r7, sp, #0
 801eb2e:	6078      	str	r0, [r7, #4]
 801eb30:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	6818      	ldr	r0, [r3, #0]
 801eb36:	4639      	mov	r1, r7
 801eb38:	2300      	movs	r3, #0
 801eb3a:	2200      	movs	r2, #0
 801eb3c:	f7ef f9f8 	bl	800df30 <osMessageQueuePut>
 801eb40:	4603      	mov	r3, r0
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d102      	bne.n	801eb4c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801eb46:	2300      	movs	r3, #0
 801eb48:	73fb      	strb	r3, [r7, #15]
 801eb4a:	e001      	b.n	801eb50 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801eb4c:	23ff      	movs	r3, #255	; 0xff
 801eb4e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801eb50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801eb54:	4618      	mov	r0, r3
 801eb56:	3710      	adds	r7, #16
 801eb58:	46bd      	mov	sp, r7
 801eb5a:	bd80      	pop	{r7, pc}

0801eb5c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801eb5c:	b580      	push	{r7, lr}
 801eb5e:	b086      	sub	sp, #24
 801eb60:	af00      	add	r7, sp, #0
 801eb62:	60f8      	str	r0, [r7, #12]
 801eb64:	60b9      	str	r1, [r7, #8]
 801eb66:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801eb68:	f7ee fd20 	bl	800d5ac <osKernelGetTickCount>
 801eb6c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801eb6e:	687b      	ldr	r3, [r7, #4]
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d013      	beq.n	801eb9c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	6818      	ldr	r0, [r3, #0]
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	2200      	movs	r2, #0
 801eb7c:	68b9      	ldr	r1, [r7, #8]
 801eb7e:	f7ef fa4b 	bl	800e018 <osMessageQueueGet>
 801eb82:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801eb84:	693b      	ldr	r3, [r7, #16]
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d105      	bne.n	801eb96 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801eb8a:	f7ee fd0f 	bl	800d5ac <osKernelGetTickCount>
 801eb8e:	4602      	mov	r2, r0
 801eb90:	697b      	ldr	r3, [r7, #20]
 801eb92:	1ad3      	subs	r3, r2, r3
 801eb94:	e00f      	b.n	801ebb6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801eb96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eb9a:	e00c      	b.n	801ebb6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801eb9c:	68fb      	ldr	r3, [r7, #12]
 801eb9e:	6818      	ldr	r0, [r3, #0]
 801eba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eba4:	2200      	movs	r2, #0
 801eba6:	68b9      	ldr	r1, [r7, #8]
 801eba8:	f7ef fa36 	bl	800e018 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801ebac:	f7ee fcfe 	bl	800d5ac <osKernelGetTickCount>
 801ebb0:	4602      	mov	r2, r0
 801ebb2:	697b      	ldr	r3, [r7, #20]
 801ebb4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801ebb6:	4618      	mov	r0, r3
 801ebb8:	3718      	adds	r7, #24
 801ebba:	46bd      	mov	sp, r7
 801ebbc:	bd80      	pop	{r7, pc}

0801ebbe <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801ebbe:	b580      	push	{r7, lr}
 801ebc0:	b082      	sub	sp, #8
 801ebc2:	af00      	add	r7, sp, #0
 801ebc4:	6078      	str	r0, [r7, #4]
 801ebc6:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	6818      	ldr	r0, [r3, #0]
 801ebcc:	2300      	movs	r3, #0
 801ebce:	2200      	movs	r2, #0
 801ebd0:	6839      	ldr	r1, [r7, #0]
 801ebd2:	f7ef fa21 	bl	800e018 <osMessageQueueGet>
 801ebd6:	4603      	mov	r3, r0
 801ebd8:	2b00      	cmp	r3, #0
 801ebda:	d101      	bne.n	801ebe0 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801ebdc:	2300      	movs	r3, #0
 801ebde:	e001      	b.n	801ebe4 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801ebe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801ebe4:	4618      	mov	r0, r3
 801ebe6:	3708      	adds	r7, #8
 801ebe8:	46bd      	mov	sp, r7
 801ebea:	bd80      	pop	{r7, pc}

0801ebec <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ebec:	b480      	push	{r7}
 801ebee:	b083      	sub	sp, #12
 801ebf0:	af00      	add	r7, sp, #0
 801ebf2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	681b      	ldr	r3, [r3, #0]
 801ebf8:	2b00      	cmp	r3, #0
 801ebfa:	d101      	bne.n	801ec00 <sys_mbox_valid+0x14>
    return 0;
 801ebfc:	2300      	movs	r3, #0
 801ebfe:	e000      	b.n	801ec02 <sys_mbox_valid+0x16>
  else
    return 1;
 801ec00:	2301      	movs	r3, #1
}
 801ec02:	4618      	mov	r0, r3
 801ec04:	370c      	adds	r7, #12
 801ec06:	46bd      	mov	sp, r7
 801ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec0c:	4770      	bx	lr

0801ec0e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801ec0e:	b480      	push	{r7}
 801ec10:	b083      	sub	sp, #12
 801ec12:	af00      	add	r7, sp, #0
 801ec14:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801ec16:	687b      	ldr	r3, [r7, #4]
 801ec18:	2200      	movs	r2, #0
 801ec1a:	601a      	str	r2, [r3, #0]
}
 801ec1c:	bf00      	nop
 801ec1e:	370c      	adds	r7, #12
 801ec20:	46bd      	mov	sp, r7
 801ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec26:	4770      	bx	lr

0801ec28 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801ec28:	b580      	push	{r7, lr}
 801ec2a:	b082      	sub	sp, #8
 801ec2c:	af00      	add	r7, sp, #0
 801ec2e:	6078      	str	r0, [r7, #4]
 801ec30:	460b      	mov	r3, r1
 801ec32:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801ec34:	78fb      	ldrb	r3, [r7, #3]
 801ec36:	2200      	movs	r2, #0
 801ec38:	4619      	mov	r1, r3
 801ec3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ec3e:	f7ee ff61 	bl	800db04 <osSemaphoreNew>
 801ec42:	4602      	mov	r2, r0
 801ec44:	687b      	ldr	r3, [r7, #4]
 801ec46:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	2b00      	cmp	r3, #0
 801ec4e:	d102      	bne.n	801ec56 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ec50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ec54:	e009      	b.n	801ec6a <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801ec56:	78fb      	ldrb	r3, [r7, #3]
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	d105      	bne.n	801ec68 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	2100      	movs	r1, #0
 801ec62:	4618      	mov	r0, r3
 801ec64:	f7ee ffea 	bl	800dc3c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801ec68:	2300      	movs	r3, #0
}
 801ec6a:	4618      	mov	r0, r3
 801ec6c:	3708      	adds	r7, #8
 801ec6e:	46bd      	mov	sp, r7
 801ec70:	bd80      	pop	{r7, pc}

0801ec72 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801ec72:	b580      	push	{r7, lr}
 801ec74:	b084      	sub	sp, #16
 801ec76:	af00      	add	r7, sp, #0
 801ec78:	6078      	str	r0, [r7, #4]
 801ec7a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801ec7c:	f7ee fc96 	bl	800d5ac <osKernelGetTickCount>
 801ec80:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801ec82:	683b      	ldr	r3, [r7, #0]
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	d011      	beq.n	801ecac <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	6839      	ldr	r1, [r7, #0]
 801ec8e:	4618      	mov	r0, r3
 801ec90:	f7ee ffd4 	bl	800dc3c <osSemaphoreAcquire>
 801ec94:	4603      	mov	r3, r0
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	d105      	bne.n	801eca6 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801ec9a:	f7ee fc87 	bl	800d5ac <osKernelGetTickCount>
 801ec9e:	4602      	mov	r2, r0
 801eca0:	68fb      	ldr	r3, [r7, #12]
 801eca2:	1ad3      	subs	r3, r2, r3
 801eca4:	e012      	b.n	801eccc <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801eca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ecaa:	e00f      	b.n	801eccc <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801ecac:	bf00      	nop
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	681b      	ldr	r3, [r3, #0]
 801ecb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ecb6:	4618      	mov	r0, r3
 801ecb8:	f7ee ffc0 	bl	800dc3c <osSemaphoreAcquire>
 801ecbc:	4603      	mov	r3, r0
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d1f5      	bne.n	801ecae <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801ecc2:	f7ee fc73 	bl	800d5ac <osKernelGetTickCount>
 801ecc6:	4602      	mov	r2, r0
 801ecc8:	68fb      	ldr	r3, [r7, #12]
 801ecca:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801eccc:	4618      	mov	r0, r3
 801ecce:	3710      	adds	r7, #16
 801ecd0:	46bd      	mov	sp, r7
 801ecd2:	bd80      	pop	{r7, pc}

0801ecd4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801ecd4:	b580      	push	{r7, lr}
 801ecd6:	b082      	sub	sp, #8
 801ecd8:	af00      	add	r7, sp, #0
 801ecda:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	4618      	mov	r0, r3
 801ece2:	f7ef f811 	bl	800dd08 <osSemaphoreRelease>
}
 801ece6:	bf00      	nop
 801ece8:	3708      	adds	r7, #8
 801ecea:	46bd      	mov	sp, r7
 801ecec:	bd80      	pop	{r7, pc}

0801ecee <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801ecee:	b580      	push	{r7, lr}
 801ecf0:	b082      	sub	sp, #8
 801ecf2:	af00      	add	r7, sp, #0
 801ecf4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	4618      	mov	r0, r3
 801ecfc:	f7ef f85c 	bl	800ddb8 <osSemaphoreDelete>
}
 801ed00:	bf00      	nop
 801ed02:	3708      	adds	r7, #8
 801ed04:	46bd      	mov	sp, r7
 801ed06:	bd80      	pop	{r7, pc}

0801ed08 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801ed08:	b480      	push	{r7}
 801ed0a:	b083      	sub	sp, #12
 801ed0c:	af00      	add	r7, sp, #0
 801ed0e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d101      	bne.n	801ed1c <sys_sem_valid+0x14>
    return 0;
 801ed18:	2300      	movs	r3, #0
 801ed1a:	e000      	b.n	801ed1e <sys_sem_valid+0x16>
  else
    return 1;
 801ed1c:	2301      	movs	r3, #1
}
 801ed1e:	4618      	mov	r0, r3
 801ed20:	370c      	adds	r7, #12
 801ed22:	46bd      	mov	sp, r7
 801ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed28:	4770      	bx	lr

0801ed2a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801ed2a:	b480      	push	{r7}
 801ed2c:	b083      	sub	sp, #12
 801ed2e:	af00      	add	r7, sp, #0
 801ed30:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	2200      	movs	r2, #0
 801ed36:	601a      	str	r2, [r3, #0]
}
 801ed38:	bf00      	nop
 801ed3a:	370c      	adds	r7, #12
 801ed3c:	46bd      	mov	sp, r7
 801ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed42:	4770      	bx	lr

0801ed44 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ed44:	b580      	push	{r7, lr}
 801ed46:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801ed48:	2000      	movs	r0, #0
 801ed4a:	f7ee fd93 	bl	800d874 <osMutexNew>
 801ed4e:	4603      	mov	r3, r0
 801ed50:	4a01      	ldr	r2, [pc, #4]	; (801ed58 <sys_init+0x14>)
 801ed52:	6013      	str	r3, [r2, #0]
#endif
}
 801ed54:	bf00      	nop
 801ed56:	bd80      	pop	{r7, pc}
 801ed58:	2001ae34 	.word	0x2001ae34

0801ed5c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ed5c:	b580      	push	{r7, lr}
 801ed5e:	b082      	sub	sp, #8
 801ed60:	af00      	add	r7, sp, #0
 801ed62:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801ed64:	2000      	movs	r0, #0
 801ed66:	f7ee fd85 	bl	800d874 <osMutexNew>
 801ed6a:	4602      	mov	r2, r0
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d102      	bne.n	801ed7e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ed78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ed7c:	e000      	b.n	801ed80 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ed7e:	2300      	movs	r3, #0
}
 801ed80:	4618      	mov	r0, r3
 801ed82:	3708      	adds	r7, #8
 801ed84:	46bd      	mov	sp, r7
 801ed86:	bd80      	pop	{r7, pc}

0801ed88 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ed88:	b580      	push	{r7, lr}
 801ed8a:	b082      	sub	sp, #8
 801ed8c:	af00      	add	r7, sp, #0
 801ed8e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	681b      	ldr	r3, [r3, #0]
 801ed94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ed98:	4618      	mov	r0, r3
 801ed9a:	f7ee fe05 	bl	800d9a8 <osMutexAcquire>
#endif
}
 801ed9e:	bf00      	nop
 801eda0:	3708      	adds	r7, #8
 801eda2:	46bd      	mov	sp, r7
 801eda4:	bd80      	pop	{r7, pc}

0801eda6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801eda6:	b580      	push	{r7, lr}
 801eda8:	b082      	sub	sp, #8
 801edaa:	af00      	add	r7, sp, #0
 801edac:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801edae:	687b      	ldr	r3, [r7, #4]
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	4618      	mov	r0, r3
 801edb4:	f7ee fe56 	bl	800da64 <osMutexRelease>
}
 801edb8:	bf00      	nop
 801edba:	3708      	adds	r7, #8
 801edbc:	46bd      	mov	sp, r7
 801edbe:	bd80      	pop	{r7, pc}

0801edc0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801edc0:	b580      	push	{r7, lr}
 801edc2:	b08e      	sub	sp, #56	; 0x38
 801edc4:	af00      	add	r7, sp, #0
 801edc6:	60f8      	str	r0, [r7, #12]
 801edc8:	60b9      	str	r1, [r7, #8]
 801edca:	607a      	str	r2, [r7, #4]
 801edcc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801edce:	f107 0314 	add.w	r3, r7, #20
 801edd2:	2224      	movs	r2, #36	; 0x24
 801edd4:	2100      	movs	r1, #0
 801edd6:	4618      	mov	r0, r3
 801edd8:	f004 fe03 	bl	80239e2 <memset>
 801eddc:	68fb      	ldr	r3, [r7, #12]
 801edde:	617b      	str	r3, [r7, #20]
 801ede0:	683b      	ldr	r3, [r7, #0]
 801ede2:	62bb      	str	r3, [r7, #40]	; 0x28
 801ede4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ede6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801ede8:	f107 0314 	add.w	r3, r7, #20
 801edec:	461a      	mov	r2, r3
 801edee:	6879      	ldr	r1, [r7, #4]
 801edf0:	68b8      	ldr	r0, [r7, #8]
 801edf2:	f7ee fc03 	bl	800d5fc <osThreadNew>
 801edf6:	4603      	mov	r3, r0
#endif
}
 801edf8:	4618      	mov	r0, r3
 801edfa:	3738      	adds	r7, #56	; 0x38
 801edfc:	46bd      	mov	sp, r7
 801edfe:	bd80      	pop	{r7, pc}

0801ee00 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ee00:	b580      	push	{r7, lr}
 801ee02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801ee04:	4b04      	ldr	r3, [pc, #16]	; (801ee18 <sys_arch_protect+0x18>)
 801ee06:	681b      	ldr	r3, [r3, #0]
 801ee08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ee0c:	4618      	mov	r0, r3
 801ee0e:	f7ee fdcb 	bl	800d9a8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801ee12:	2301      	movs	r3, #1
}
 801ee14:	4618      	mov	r0, r3
 801ee16:	bd80      	pop	{r7, pc}
 801ee18:	2001ae34 	.word	0x2001ae34

0801ee1c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ee1c:	b580      	push	{r7, lr}
 801ee1e:	b082      	sub	sp, #8
 801ee20:	af00      	add	r7, sp, #0
 801ee22:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ee24:	4b04      	ldr	r3, [pc, #16]	; (801ee38 <sys_arch_unprotect+0x1c>)
 801ee26:	681b      	ldr	r3, [r3, #0]
 801ee28:	4618      	mov	r0, r3
 801ee2a:	f7ee fe1b 	bl	800da64 <osMutexRelease>
}
 801ee2e:	bf00      	nop
 801ee30:	3708      	adds	r7, #8
 801ee32:	46bd      	mov	sp, r7
 801ee34:	bd80      	pop	{r7, pc}
 801ee36:	bf00      	nop
 801ee38:	2001ae34 	.word	0x2001ae34

0801ee3c <SCPI_ErrorInit>:

/**
 * Initialize error queue
 * @param context - scpi context
 */
void SCPI_ErrorInit(scpi_t * context, scpi_error_t * data, int16_t size) {
 801ee3c:	b580      	push	{r7, lr}
 801ee3e:	b084      	sub	sp, #16
 801ee40:	af00      	add	r7, sp, #0
 801ee42:	60f8      	str	r0, [r7, #12]
 801ee44:	60b9      	str	r1, [r7, #8]
 801ee46:	4613      	mov	r3, r2
 801ee48:	80fb      	strh	r3, [r7, #6]
    fifo_init(&context->error_queue, data, size);
 801ee4a:	68fb      	ldr	r3, [r7, #12]
 801ee4c:	333c      	adds	r3, #60	; 0x3c
 801ee4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801ee52:	68b9      	ldr	r1, [r7, #8]
 801ee54:	4618      	mov	r0, r3
 801ee56:	f000 fcdb 	bl	801f810 <fifo_init>
}
 801ee5a:	bf00      	nop
 801ee5c:	3710      	adds	r7, #16
 801ee5e:	46bd      	mov	sp, r7
 801ee60:	bd80      	pop	{r7, pc}

0801ee62 <SCPI_ErrorEmitEmpty>:

/**
 * Emit no error
 * @param context scpi context
 */
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 801ee62:	b580      	push	{r7, lr}
 801ee64:	b082      	sub	sp, #8
 801ee66:	af00      	add	r7, sp, #0
 801ee68:	6078      	str	r0, [r7, #4]
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 801ee6a:	6878      	ldr	r0, [r7, #4]
 801ee6c:	f000 f872 	bl	801ef54 <SCPI_ErrorCount>
 801ee70:	4603      	mov	r3, r0
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d11c      	bne.n	801eeb0 <SCPI_ErrorEmitEmpty+0x4e>
 801ee76:	2100      	movs	r1, #0
 801ee78:	6878      	ldr	r0, [r7, #4]
 801ee7a:	f000 fe40 	bl	801fafe <SCPI_RegGet>
 801ee7e:	4603      	mov	r3, r0
 801ee80:	f003 0304 	and.w	r3, r3, #4
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	d013      	beq.n	801eeb0 <SCPI_ErrorEmitEmpty+0x4e>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 801ee88:	2204      	movs	r2, #4
 801ee8a:	2100      	movs	r1, #0
 801ee8c:	6878      	ldr	r0, [r7, #4]
 801ee8e:	f000 ff36 	bl	801fcfe <SCPI_RegClearBits>

        if (context->interface && context->interface->error) {
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	d00a      	beq.n	801eeb0 <SCPI_ErrorEmitEmpty+0x4e>
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	2b00      	cmp	r3, #0
 801eea2:	d005      	beq.n	801eeb0 <SCPI_ErrorEmitEmpty+0x4e>
            context->interface->error(context, 0);
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eea8:	681b      	ldr	r3, [r3, #0]
 801eeaa:	2100      	movs	r1, #0
 801eeac:	6878      	ldr	r0, [r7, #4]
 801eeae:	4798      	blx	r3
        }
    }
}
 801eeb0:	bf00      	nop
 801eeb2:	3708      	adds	r7, #8
 801eeb4:	46bd      	mov	sp, r7
 801eeb6:	bd80      	pop	{r7, pc}

0801eeb8 <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 801eeb8:	b580      	push	{r7, lr}
 801eeba:	b082      	sub	sp, #8
 801eebc:	af00      	add	r7, sp, #0
 801eebe:	6078      	str	r0, [r7, #4]
 801eec0:	460b      	mov	r3, r1
 801eec2:	807b      	strh	r3, [r7, #2]
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 801eec4:	2204      	movs	r2, #4
 801eec6:	2100      	movs	r1, #0
 801eec8:	6878      	ldr	r0, [r7, #4]
 801eeca:	f000 fefd 	bl	801fcc8 <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eed2:	2b00      	cmp	r3, #0
 801eed4:	d00c      	beq.n	801eef0 <SCPI_ErrorEmit+0x38>
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eeda:	681b      	ldr	r3, [r3, #0]
 801eedc:	2b00      	cmp	r3, #0
 801eede:	d007      	beq.n	801eef0 <SCPI_ErrorEmit+0x38>
        context->interface->error(context, err);
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801eeea:	4611      	mov	r1, r2
 801eeec:	6878      	ldr	r0, [r7, #4]
 801eeee:	4798      	blx	r3
    }
}
 801eef0:	bf00      	nop
 801eef2:	3708      	adds	r7, #8
 801eef4:	46bd      	mov	sp, r7
 801eef6:	bd80      	pop	{r7, pc}

0801eef8 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
 801eef8:	b580      	push	{r7, lr}
 801eefa:	b082      	sub	sp, #8
 801eefc:	af00      	add	r7, sp, #0
 801eefe:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    while (fifo_remove(&context->error_queue, &error)) {
        SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
    }
#endif
    fifo_clear(&context->error_queue);
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	333c      	adds	r3, #60	; 0x3c
 801ef04:	4618      	mov	r0, r3
 801ef06:	f000 fc9f 	bl	801f848 <fifo_clear>

    SCPI_ErrorEmitEmpty(context);
 801ef0a:	6878      	ldr	r0, [r7, #4]
 801ef0c:	f7ff ffa9 	bl	801ee62 <SCPI_ErrorEmitEmpty>
}
 801ef10:	bf00      	nop
 801ef12:	3708      	adds	r7, #8
 801ef14:	46bd      	mov	sp, r7
 801ef16:	bd80      	pop	{r7, pc}

0801ef18 <SCPI_ErrorPop>:
 * Pop error from queue
 * @param context - scpi context
 * @param error
 * @return
 */
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 801ef18:	b580      	push	{r7, lr}
 801ef1a:	b082      	sub	sp, #8
 801ef1c:	af00      	add	r7, sp, #0
 801ef1e:	6078      	str	r0, [r7, #4]
 801ef20:	6039      	str	r1, [r7, #0]
    if (!error || !context) return FALSE;
 801ef22:	683b      	ldr	r3, [r7, #0]
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d002      	beq.n	801ef2e <SCPI_ErrorPop+0x16>
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	d101      	bne.n	801ef32 <SCPI_ErrorPop+0x1a>
 801ef2e:	2300      	movs	r3, #0
 801ef30:	e00c      	b.n	801ef4c <SCPI_ErrorPop+0x34>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 801ef32:	683b      	ldr	r3, [r7, #0]
 801ef34:	2200      	movs	r2, #0
 801ef36:	801a      	strh	r2, [r3, #0]
    fifo_remove(&context->error_queue, error);
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	333c      	adds	r3, #60	; 0x3c
 801ef3c:	6839      	ldr	r1, [r7, #0]
 801ef3e:	4618      	mov	r0, r3
 801ef40:	f000 fcf5 	bl	801f92e <fifo_remove>

    SCPI_ErrorEmitEmpty(context);
 801ef44:	6878      	ldr	r0, [r7, #4]
 801ef46:	f7ff ff8c 	bl	801ee62 <SCPI_ErrorEmitEmpty>

    return TRUE;
 801ef4a:	2301      	movs	r3, #1
}
 801ef4c:	4618      	mov	r0, r3
 801ef4e:	3708      	adds	r7, #8
 801ef50:	46bd      	mov	sp, r7
 801ef52:	bd80      	pop	{r7, pc}

0801ef54 <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
 801ef54:	b580      	push	{r7, lr}
 801ef56:	b084      	sub	sp, #16
 801ef58:	af00      	add	r7, sp, #0
 801ef5a:	6078      	str	r0, [r7, #4]
    int16_t result = 0;
 801ef5c:	2300      	movs	r3, #0
 801ef5e:	81fb      	strh	r3, [r7, #14]

    fifo_count(&context->error_queue, &result);
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	333c      	adds	r3, #60	; 0x3c
 801ef64:	f107 020e 	add.w	r2, r7, #14
 801ef68:	4611      	mov	r1, r2
 801ef6a:	4618      	mov	r0, r3
 801ef6c:	f000 fd52 	bl	801fa14 <fifo_count>

    return result;
 801ef70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801ef74:	4618      	mov	r0, r3
 801ef76:	3710      	adds	r7, #16
 801ef78:	46bd      	mov	sp, r7
 801ef7a:	bd80      	pop	{r7, pc}

0801ef7c <SCPI_ErrorAddInternal>:

static scpi_bool_t SCPI_ErrorAddInternal(scpi_t * context, int16_t err, char * info, size_t info_len) {
 801ef7c:	b580      	push	{r7, lr}
 801ef7e:	b086      	sub	sp, #24
 801ef80:	af00      	add	r7, sp, #0
 801ef82:	60f8      	str	r0, [r7, #12]
 801ef84:	607a      	str	r2, [r7, #4]
 801ef86:	603b      	str	r3, [r7, #0]
 801ef88:	460b      	mov	r3, r1
 801ef8a:	817b      	strh	r3, [r7, #10]
    scpi_error_t error_value;
    char * info_ptr = info ? SCPIDEFINE_strndup(&context->error_info_heap, info, info_len) : NULL;
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	617b      	str	r3, [r7, #20]
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 801ef90:	897b      	ldrh	r3, [r7, #10]
 801ef92:	823b      	strh	r3, [r7, #16]
    if (!fifo_add(&context->error_queue, &error_value)) {
 801ef94:	68fb      	ldr	r3, [r7, #12]
 801ef96:	333c      	adds	r3, #60	; 0x3c
 801ef98:	f107 0210 	add.w	r2, r7, #16
 801ef9c:	4611      	mov	r1, r2
 801ef9e:	4618      	mov	r0, r3
 801efa0:	f000 fc8c 	bl	801f8bc <fifo_add>
 801efa4:	4603      	mov	r3, r0
 801efa6:	f083 0301 	eor.w	r3, r3, #1
 801efaa:	b2db      	uxtb	r3, r3
 801efac:	2b00      	cmp	r3, #0
 801efae:	d014      	beq.n	801efda <SCPI_ErrorAddInternal+0x5e>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        fifo_remove_last(&context->error_queue, &error_value);
 801efb0:	68fb      	ldr	r3, [r7, #12]
 801efb2:	333c      	adds	r3, #60	; 0x3c
 801efb4:	f107 0210 	add.w	r2, r7, #16
 801efb8:	4611      	mov	r1, r2
 801efba:	4618      	mov	r0, r3
 801efbc:	f000 fcee 	bl	801f99c <fifo_remove_last>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 801efc0:	f64f 63a2 	movw	r3, #65186	; 0xfea2
 801efc4:	823b      	strh	r3, [r7, #16]
        fifo_add(&context->error_queue, &error_value);
 801efc6:	68fb      	ldr	r3, [r7, #12]
 801efc8:	333c      	adds	r3, #60	; 0x3c
 801efca:	f107 0210 	add.w	r2, r7, #16
 801efce:	4611      	mov	r1, r2
 801efd0:	4618      	mov	r0, r3
 801efd2:	f000 fc73 	bl	801f8bc <fifo_add>
        return FALSE;
 801efd6:	2300      	movs	r3, #0
 801efd8:	e000      	b.n	801efdc <SCPI_ErrorAddInternal+0x60>
    }
    return TRUE;
 801efda:	2301      	movs	r3, #1
}
 801efdc:	4618      	mov	r0, r3
 801efde:	3718      	adds	r7, #24
 801efe0:	46bd      	mov	sp, r7
 801efe2:	bd80      	pop	{r7, pc}

0801efe4 <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 801efe4:	b580      	push	{r7, lr}
 801efe6:	b086      	sub	sp, #24
 801efe8:	af00      	add	r7, sp, #0
 801efea:	60f8      	str	r0, [r7, #12]
 801efec:	607a      	str	r2, [r7, #4]
 801efee:	603b      	str	r3, [r7, #0]
 801eff0:	460b      	mov	r3, r1
 801eff2:	817b      	strh	r3, [r7, #10]
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	d007      	beq.n	801f00a <SCPI_ErrorPushEx+0x26>
 801effa:	683b      	ldr	r3, [r7, #0]
 801effc:	2b00      	cmp	r3, #0
 801effe:	d104      	bne.n	801f00a <SCPI_ErrorPushEx+0x26>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 801f000:	21ff      	movs	r1, #255	; 0xff
 801f002:	6878      	ldr	r0, [r7, #4]
 801f004:	f004 fa7a 	bl	80234fc <BSD_strnlen>
 801f008:	6038      	str	r0, [r7, #0]
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);
 801f00a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801f00e:	683b      	ldr	r3, [r7, #0]
 801f010:	687a      	ldr	r2, [r7, #4]
 801f012:	68f8      	ldr	r0, [r7, #12]
 801f014:	f7ff ffb2 	bl	801ef7c <SCPI_ErrorAddInternal>
 801f018:	4603      	mov	r3, r0
 801f01a:	2b00      	cmp	r3, #0
 801f01c:	bf14      	ite	ne
 801f01e:	2301      	movne	r3, #1
 801f020:	2300      	moveq	r3, #0
 801f022:	b2db      	uxtb	r3, r3
 801f024:	f083 0301 	eor.w	r3, r3, #1
 801f028:	b2db      	uxtb	r3, r3
 801f02a:	74fb      	strb	r3, [r7, #19]
 801f02c:	7cfb      	ldrb	r3, [r7, #19]
 801f02e:	f003 0301 	and.w	r3, r3, #1
 801f032:	74fb      	strb	r3, [r7, #19]

    for (i = 0; i < ERROR_DEFS_N; i++) {
 801f034:	2300      	movs	r3, #0
 801f036:	617b      	str	r3, [r7, #20]
 801f038:	e02b      	b.n	801f092 <SCPI_ErrorPushEx+0xae>
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 801f03a:	4923      	ldr	r1, [pc, #140]	; (801f0c8 <SCPI_ErrorPushEx+0xe4>)
 801f03c:	697a      	ldr	r2, [r7, #20]
 801f03e:	4613      	mov	r3, r2
 801f040:	005b      	lsls	r3, r3, #1
 801f042:	4413      	add	r3, r2
 801f044:	005b      	lsls	r3, r3, #1
 801f046:	440b      	add	r3, r1
 801f048:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f04c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801f050:	429a      	cmp	r2, r3
 801f052:	dc1b      	bgt.n	801f08c <SCPI_ErrorPushEx+0xa8>
 801f054:	491c      	ldr	r1, [pc, #112]	; (801f0c8 <SCPI_ErrorPushEx+0xe4>)
 801f056:	697a      	ldr	r2, [r7, #20]
 801f058:	4613      	mov	r3, r2
 801f05a:	005b      	lsls	r3, r3, #1
 801f05c:	4413      	add	r3, r2
 801f05e:	005b      	lsls	r3, r3, #1
 801f060:	440b      	add	r3, r1
 801f062:	3302      	adds	r3, #2
 801f064:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f068:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801f06c:	429a      	cmp	r2, r3
 801f06e:	db0d      	blt.n	801f08c <SCPI_ErrorPushEx+0xa8>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 801f070:	4915      	ldr	r1, [pc, #84]	; (801f0c8 <SCPI_ErrorPushEx+0xe4>)
 801f072:	697a      	ldr	r2, [r7, #20]
 801f074:	4613      	mov	r3, r2
 801f076:	005b      	lsls	r3, r3, #1
 801f078:	4413      	add	r3, r2
 801f07a:	005b      	lsls	r3, r3, #1
 801f07c:	440b      	add	r3, r1
 801f07e:	3304      	adds	r3, #4
 801f080:	881b      	ldrh	r3, [r3, #0]
 801f082:	461a      	mov	r2, r3
 801f084:	2102      	movs	r1, #2
 801f086:	68f8      	ldr	r0, [r7, #12]
 801f088:	f000 fe1e 	bl	801fcc8 <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 801f08c:	697b      	ldr	r3, [r7, #20]
 801f08e:	3301      	adds	r3, #1
 801f090:	617b      	str	r3, [r7, #20]
 801f092:	697b      	ldr	r3, [r7, #20]
 801f094:	2b08      	cmp	r3, #8
 801f096:	ddd0      	ble.n	801f03a <SCPI_ErrorPushEx+0x56>
        }
    }

    SCPI_ErrorEmit(context, err);
 801f098:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801f09c:	4619      	mov	r1, r3
 801f09e:	68f8      	ldr	r0, [r7, #12]
 801f0a0:	f7ff ff0a 	bl	801eeb8 <SCPI_ErrorEmit>
    if (queue_overflow) {
 801f0a4:	7cfb      	ldrb	r3, [r7, #19]
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	d003      	beq.n	801f0b2 <SCPI_ErrorPushEx+0xce>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 801f0aa:	4908      	ldr	r1, [pc, #32]	; (801f0cc <SCPI_ErrorPushEx+0xe8>)
 801f0ac:	68f8      	ldr	r0, [r7, #12]
 801f0ae:	f7ff ff03 	bl	801eeb8 <SCPI_ErrorEmit>
    }

    if (context) {
 801f0b2:	68fb      	ldr	r3, [r7, #12]
 801f0b4:	2b00      	cmp	r3, #0
 801f0b6:	d003      	beq.n	801f0c0 <SCPI_ErrorPushEx+0xdc>
        context->cmd_error = TRUE;
 801f0b8:	68fb      	ldr	r3, [r7, #12]
 801f0ba:	2201      	movs	r2, #1
 801f0bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
}
 801f0c0:	bf00      	nop
 801f0c2:	3718      	adds	r7, #24
 801f0c4:	46bd      	mov	sp, r7
 801f0c6:	bd80      	pop	{r7, pc}
 801f0c8:	0802d528 	.word	0x0802d528
 801f0cc:	fffffea2 	.word	0xfffffea2

0801f0d0 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
 801f0d0:	b580      	push	{r7, lr}
 801f0d2:	b082      	sub	sp, #8
 801f0d4:	af00      	add	r7, sp, #0
 801f0d6:	6078      	str	r0, [r7, #4]
 801f0d8:	460b      	mov	r3, r1
 801f0da:	807b      	strh	r3, [r7, #2]
    SCPI_ErrorPushEx(context, err, NULL, 0);
 801f0dc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801f0e0:	2300      	movs	r3, #0
 801f0e2:	2200      	movs	r2, #0
 801f0e4:	6878      	ldr	r0, [r7, #4]
 801f0e6:	f7ff ff7d 	bl	801efe4 <SCPI_ErrorPushEx>
    return;
 801f0ea:	bf00      	nop
}
 801f0ec:	3708      	adds	r7, #8
 801f0ee:	46bd      	mov	sp, r7
 801f0f0:	bd80      	pop	{r7, pc}
	...

0801f0f4 <SCPI_ErrorTranslate>:
/**
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
 801f0f4:	b480      	push	{r7}
 801f0f6:	b083      	sub	sp, #12
 801f0f8:	af00      	add	r7, sp, #0
 801f0fa:	4603      	mov	r3, r0
 801f0fc:	80fb      	strh	r3, [r7, #6]
    switch (err) {
 801f0fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f102:	f240 3221 	movw	r2, #801	; 0x321
 801f106:	4293      	cmp	r3, r2
 801f108:	f000 81e9 	beq.w	801f4de <SCPI_ErrorTranslate+0x3ea>
 801f10c:	f240 3221 	movw	r2, #801	; 0x321
 801f110:	4293      	cmp	r3, r2
 801f112:	f300 81e6 	bgt.w	801f4e2 <SCPI_ErrorTranslate+0x3ee>
 801f116:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801f11a:	f000 81de 	beq.w	801f4da <SCPI_ErrorTranslate+0x3e6>
 801f11e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801f122:	f300 81de 	bgt.w	801f4e2 <SCPI_ErrorTranslate+0x3ee>
 801f126:	f5b3 7f32 	cmp.w	r3, #712	; 0x2c8
 801f12a:	f300 81da 	bgt.w	801f4e2 <SCPI_ErrorTranslate+0x3ee>
 801f12e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801f132:	da1d      	bge.n	801f170 <SCPI_ErrorTranslate+0x7c>
 801f134:	2b00      	cmp	r3, #0
 801f136:	f000 818a 	beq.w	801f44e <SCPI_ErrorTranslate+0x35a>
 801f13a:	2b00      	cmp	r3, #0
 801f13c:	f300 81d1 	bgt.w	801f4e2 <SCPI_ErrorTranslate+0x3ee>
 801f140:	f113 0f65 	cmn.w	r3, #101	; 0x65
 801f144:	f300 81cd 	bgt.w	801f4e2 <SCPI_ErrorTranslate+0x3ee>
 801f148:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 801f14c:	da32      	bge.n	801f1b4 <SCPI_ErrorTranslate+0xc0>
 801f14e:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 801f152:	f000 81a6 	beq.w	801f4a2 <SCPI_ErrorTranslate+0x3ae>
 801f156:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 801f15a:	f300 81c2 	bgt.w	801f4e2 <SCPI_ErrorTranslate+0x3ee>
 801f15e:	f513 7faa 	cmn.w	r3, #340	; 0x154
 801f162:	f300 816f 	bgt.w	801f444 <SCPI_ErrorTranslate+0x350>
 801f166:	f513 7fba 	cmn.w	r3, #372	; 0x174
 801f16a:	f300 8123 	bgt.w	801f3b4 <SCPI_ErrorTranslate+0x2c0>
 801f16e:	e1b8      	b.n	801f4e2 <SCPI_ErrorTranslate+0x3ee>
 801f170:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 801f174:	2b0c      	cmp	r3, #12
 801f176:	f200 81b4 	bhi.w	801f4e2 <SCPI_ErrorTranslate+0x3ee>
 801f17a:	a201      	add	r2, pc, #4	; (adr r2, 801f180 <SCPI_ErrorTranslate+0x8c>)
 801f17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f180:	0801f4bb 	.word	0x0801f4bb
 801f184:	0801f4bf 	.word	0x0801f4bf
 801f188:	0801f4c3 	.word	0x0801f4c3
 801f18c:	0801f4c7 	.word	0x0801f4c7
 801f190:	0801f4cb 	.word	0x0801f4cb
 801f194:	0801f4e3 	.word	0x0801f4e3
 801f198:	0801f4e3 	.word	0x0801f4e3
 801f19c:	0801f4e3 	.word	0x0801f4e3
 801f1a0:	0801f4e3 	.word	0x0801f4e3
 801f1a4:	0801f4e3 	.word	0x0801f4e3
 801f1a8:	0801f4cf 	.word	0x0801f4cf
 801f1ac:	0801f4d3 	.word	0x0801f4d3
 801f1b0:	0801f4d7 	.word	0x0801f4d7
 801f1b4:	33e0      	adds	r3, #224	; 0xe0
 801f1b6:	2b7b      	cmp	r3, #123	; 0x7b
 801f1b8:	f200 8193 	bhi.w	801f4e2 <SCPI_ErrorTranslate+0x3ee>
 801f1bc:	a201      	add	r2, pc, #4	; (adr r2, 801f1c4 <SCPI_ErrorTranslate+0xd0>)
 801f1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f1c2:	bf00      	nop
 801f1c4:	0801f49f 	.word	0x0801f49f
 801f1c8:	0801f4e3 	.word	0x0801f4e3
 801f1cc:	0801f49b 	.word	0x0801f49b
 801f1d0:	0801f497 	.word	0x0801f497
 801f1d4:	0801f4e3 	.word	0x0801f4e3
 801f1d8:	0801f4e3 	.word	0x0801f4e3
 801f1dc:	0801f4e3 	.word	0x0801f4e3
 801f1e0:	0801f4e3 	.word	0x0801f4e3
 801f1e4:	0801f4e3 	.word	0x0801f4e3
 801f1e8:	0801f4e3 	.word	0x0801f4e3
 801f1ec:	0801f493 	.word	0x0801f493
 801f1f0:	0801f4e3 	.word	0x0801f4e3
 801f1f4:	0801f4e3 	.word	0x0801f4e3
 801f1f8:	0801f48f 	.word	0x0801f48f
 801f1fc:	0801f48b 	.word	0x0801f48b
 801f200:	0801f4e3 	.word	0x0801f4e3
 801f204:	0801f4e3 	.word	0x0801f4e3
 801f208:	0801f4e3 	.word	0x0801f4e3
 801f20c:	0801f4e3 	.word	0x0801f4e3
 801f210:	0801f4e3 	.word	0x0801f4e3
 801f214:	0801f4e3 	.word	0x0801f4e3
 801f218:	0801f487 	.word	0x0801f487
 801f21c:	0801f4e3 	.word	0x0801f4e3
 801f220:	0801f4e3 	.word	0x0801f4e3
 801f224:	0801f483 	.word	0x0801f483
 801f228:	0801f4e3 	.word	0x0801f4e3
 801f22c:	0801f4e3 	.word	0x0801f4e3
 801f230:	0801f4e3 	.word	0x0801f4e3
 801f234:	0801f4e3 	.word	0x0801f4e3
 801f238:	0801f4e3 	.word	0x0801f4e3
 801f23c:	0801f4e3 	.word	0x0801f4e3
 801f240:	0801f4e3 	.word	0x0801f4e3
 801f244:	0801f4e3 	.word	0x0801f4e3
 801f248:	0801f4e3 	.word	0x0801f4e3
 801f24c:	0801f4e3 	.word	0x0801f4e3
 801f250:	0801f4e3 	.word	0x0801f4e3
 801f254:	0801f4e3 	.word	0x0801f4e3
 801f258:	0801f4e3 	.word	0x0801f4e3
 801f25c:	0801f4e3 	.word	0x0801f4e3
 801f260:	0801f4e3 	.word	0x0801f4e3
 801f264:	0801f4e3 	.word	0x0801f4e3
 801f268:	0801f4e3 	.word	0x0801f4e3
 801f26c:	0801f4e3 	.word	0x0801f4e3
 801f270:	0801f4e3 	.word	0x0801f4e3
 801f274:	0801f4e3 	.word	0x0801f4e3
 801f278:	0801f4e3 	.word	0x0801f4e3
 801f27c:	0801f4e3 	.word	0x0801f4e3
 801f280:	0801f4e3 	.word	0x0801f4e3
 801f284:	0801f4e3 	.word	0x0801f4e3
 801f288:	0801f4e3 	.word	0x0801f4e3
 801f28c:	0801f4e3 	.word	0x0801f4e3
 801f290:	0801f4e3 	.word	0x0801f4e3
 801f294:	0801f4e3 	.word	0x0801f4e3
 801f298:	0801f4e3 	.word	0x0801f4e3
 801f29c:	0801f47f 	.word	0x0801f47f
 801f2a0:	0801f4e3 	.word	0x0801f4e3
 801f2a4:	0801f4e3 	.word	0x0801f4e3
 801f2a8:	0801f4e3 	.word	0x0801f4e3
 801f2ac:	0801f4e3 	.word	0x0801f4e3
 801f2b0:	0801f4e3 	.word	0x0801f4e3
 801f2b4:	0801f4e3 	.word	0x0801f4e3
 801f2b8:	0801f4e3 	.word	0x0801f4e3
 801f2bc:	0801f4e3 	.word	0x0801f4e3
 801f2c0:	0801f4e3 	.word	0x0801f4e3
 801f2c4:	0801f4e3 	.word	0x0801f4e3
 801f2c8:	0801f4e3 	.word	0x0801f4e3
 801f2cc:	0801f4e3 	.word	0x0801f4e3
 801f2d0:	0801f4e3 	.word	0x0801f4e3
 801f2d4:	0801f4e3 	.word	0x0801f4e3
 801f2d8:	0801f4e3 	.word	0x0801f4e3
 801f2dc:	0801f4e3 	.word	0x0801f4e3
 801f2e0:	0801f4e3 	.word	0x0801f4e3
 801f2e4:	0801f4e3 	.word	0x0801f4e3
 801f2e8:	0801f47b 	.word	0x0801f47b
 801f2ec:	0801f4e3 	.word	0x0801f4e3
 801f2f0:	0801f4e3 	.word	0x0801f4e3
 801f2f4:	0801f4e3 	.word	0x0801f4e3
 801f2f8:	0801f4e3 	.word	0x0801f4e3
 801f2fc:	0801f4e3 	.word	0x0801f4e3
 801f300:	0801f4e3 	.word	0x0801f4e3
 801f304:	0801f4e3 	.word	0x0801f4e3
 801f308:	0801f4e3 	.word	0x0801f4e3
 801f30c:	0801f4e3 	.word	0x0801f4e3
 801f310:	0801f4e3 	.word	0x0801f4e3
 801f314:	0801f4e3 	.word	0x0801f4e3
 801f318:	0801f4e3 	.word	0x0801f4e3
 801f31c:	0801f477 	.word	0x0801f477
 801f320:	0801f4e3 	.word	0x0801f4e3
 801f324:	0801f4e3 	.word	0x0801f4e3
 801f328:	0801f4e3 	.word	0x0801f4e3
 801f32c:	0801f4e3 	.word	0x0801f4e3
 801f330:	0801f4e3 	.word	0x0801f4e3
 801f334:	0801f4e3 	.word	0x0801f4e3
 801f338:	0801f473 	.word	0x0801f473
 801f33c:	0801f4e3 	.word	0x0801f4e3
 801f340:	0801f4e3 	.word	0x0801f4e3
 801f344:	0801f46f 	.word	0x0801f46f
 801f348:	0801f4e3 	.word	0x0801f4e3
 801f34c:	0801f4e3 	.word	0x0801f4e3
 801f350:	0801f4e3 	.word	0x0801f4e3
 801f354:	0801f46b 	.word	0x0801f46b
 801f358:	0801f4e3 	.word	0x0801f4e3
 801f35c:	0801f4e3 	.word	0x0801f4e3
 801f360:	0801f4e3 	.word	0x0801f4e3
 801f364:	0801f4e3 	.word	0x0801f4e3
 801f368:	0801f4e3 	.word	0x0801f4e3
 801f36c:	0801f4e3 	.word	0x0801f4e3
 801f370:	0801f4e3 	.word	0x0801f4e3
 801f374:	0801f4e3 	.word	0x0801f4e3
 801f378:	0801f4e3 	.word	0x0801f4e3
 801f37c:	0801f4e3 	.word	0x0801f4e3
 801f380:	0801f467 	.word	0x0801f467
 801f384:	0801f4e3 	.word	0x0801f4e3
 801f388:	0801f4e3 	.word	0x0801f4e3
 801f38c:	0801f4e3 	.word	0x0801f4e3
 801f390:	0801f463 	.word	0x0801f463
 801f394:	0801f45f 	.word	0x0801f45f
 801f398:	0801f4e3 	.word	0x0801f4e3
 801f39c:	0801f4e3 	.word	0x0801f4e3
 801f3a0:	0801f4e3 	.word	0x0801f4e3
 801f3a4:	0801f45b 	.word	0x0801f45b
 801f3a8:	0801f457 	.word	0x0801f457
 801f3ac:	0801f4e3 	.word	0x0801f4e3
 801f3b0:	0801f453 	.word	0x0801f453
 801f3b4:	f203 1373 	addw	r3, r3, #371	; 0x173
 801f3b8:	2b1f      	cmp	r3, #31
 801f3ba:	f200 8092 	bhi.w	801f4e2 <SCPI_ErrorTranslate+0x3ee>
 801f3be:	a201      	add	r2, pc, #4	; (adr r2, 801f3c4 <SCPI_ErrorTranslate+0x2d0>)
 801f3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3c4:	0801f4b7 	.word	0x0801f4b7
 801f3c8:	0801f4e3 	.word	0x0801f4e3
 801f3cc:	0801f4e3 	.word	0x0801f4e3
 801f3d0:	0801f4e3 	.word	0x0801f4e3
 801f3d4:	0801f4e3 	.word	0x0801f4e3
 801f3d8:	0801f4e3 	.word	0x0801f4e3
 801f3dc:	0801f4e3 	.word	0x0801f4e3
 801f3e0:	0801f4e3 	.word	0x0801f4e3
 801f3e4:	0801f4b3 	.word	0x0801f4b3
 801f3e8:	0801f4e3 	.word	0x0801f4e3
 801f3ec:	0801f4e3 	.word	0x0801f4e3
 801f3f0:	0801f4e3 	.word	0x0801f4e3
 801f3f4:	0801f4e3 	.word	0x0801f4e3
 801f3f8:	0801f4e3 	.word	0x0801f4e3
 801f3fc:	0801f4e3 	.word	0x0801f4e3
 801f400:	0801f4e3 	.word	0x0801f4e3
 801f404:	0801f4e3 	.word	0x0801f4e3
 801f408:	0801f4e3 	.word	0x0801f4e3
 801f40c:	0801f4e3 	.word	0x0801f4e3
 801f410:	0801f4e3 	.word	0x0801f4e3
 801f414:	0801f4e3 	.word	0x0801f4e3
 801f418:	0801f4af 	.word	0x0801f4af
 801f41c:	0801f4e3 	.word	0x0801f4e3
 801f420:	0801f4e3 	.word	0x0801f4e3
 801f424:	0801f4e3 	.word	0x0801f4e3
 801f428:	0801f4e3 	.word	0x0801f4e3
 801f42c:	0801f4e3 	.word	0x0801f4e3
 801f430:	0801f4e3 	.word	0x0801f4e3
 801f434:	0801f4e3 	.word	0x0801f4e3
 801f438:	0801f4e3 	.word	0x0801f4e3
 801f43c:	0801f4e3 	.word	0x0801f4e3
 801f440:	0801f4ab 	.word	0x0801f4ab
 801f444:	f46f 729d 	mvn.w	r2, #314	; 0x13a
 801f448:	4293      	cmp	r3, r2
 801f44a:	d02c      	beq.n	801f4a6 <SCPI_ErrorTranslate+0x3b2>
 801f44c:	e049      	b.n	801f4e2 <SCPI_ErrorTranslate+0x3ee>
#if USE_FULL_ERROR_LIST
#define XE X
#else
#define XE(def, val, str)
#endif
        LIST_OF_ERRORS
 801f44e:	4b28      	ldr	r3, [pc, #160]	; (801f4f0 <SCPI_ErrorTranslate+0x3fc>)
 801f450:	e048      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f452:	4b28      	ldr	r3, [pc, #160]	; (801f4f4 <SCPI_ErrorTranslate+0x400>)
 801f454:	e046      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f456:	4b28      	ldr	r3, [pc, #160]	; (801f4f8 <SCPI_ErrorTranslate+0x404>)
 801f458:	e044      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f45a:	4b28      	ldr	r3, [pc, #160]	; (801f4fc <SCPI_ErrorTranslate+0x408>)
 801f45c:	e042      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f45e:	4b28      	ldr	r3, [pc, #160]	; (801f500 <SCPI_ErrorTranslate+0x40c>)
 801f460:	e040      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f462:	4b28      	ldr	r3, [pc, #160]	; (801f504 <SCPI_ErrorTranslate+0x410>)
 801f464:	e03e      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f466:	4b28      	ldr	r3, [pc, #160]	; (801f508 <SCPI_ErrorTranslate+0x414>)
 801f468:	e03c      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f46a:	4b28      	ldr	r3, [pc, #160]	; (801f50c <SCPI_ErrorTranslate+0x418>)
 801f46c:	e03a      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f46e:	4b28      	ldr	r3, [pc, #160]	; (801f510 <SCPI_ErrorTranslate+0x41c>)
 801f470:	e038      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f472:	4b28      	ldr	r3, [pc, #160]	; (801f514 <SCPI_ErrorTranslate+0x420>)
 801f474:	e036      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f476:	4b28      	ldr	r3, [pc, #160]	; (801f518 <SCPI_ErrorTranslate+0x424>)
 801f478:	e034      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f47a:	4b28      	ldr	r3, [pc, #160]	; (801f51c <SCPI_ErrorTranslate+0x428>)
 801f47c:	e032      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f47e:	4b28      	ldr	r3, [pc, #160]	; (801f520 <SCPI_ErrorTranslate+0x42c>)
 801f480:	e030      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f482:	4b28      	ldr	r3, [pc, #160]	; (801f524 <SCPI_ErrorTranslate+0x430>)
 801f484:	e02e      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f486:	4b28      	ldr	r3, [pc, #160]	; (801f528 <SCPI_ErrorTranslate+0x434>)
 801f488:	e02c      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f48a:	4b28      	ldr	r3, [pc, #160]	; (801f52c <SCPI_ErrorTranslate+0x438>)
 801f48c:	e02a      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f48e:	4b28      	ldr	r3, [pc, #160]	; (801f530 <SCPI_ErrorTranslate+0x43c>)
 801f490:	e028      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f492:	4b28      	ldr	r3, [pc, #160]	; (801f534 <SCPI_ErrorTranslate+0x440>)
 801f494:	e026      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f496:	4b28      	ldr	r3, [pc, #160]	; (801f538 <SCPI_ErrorTranslate+0x444>)
 801f498:	e024      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f49a:	4b28      	ldr	r3, [pc, #160]	; (801f53c <SCPI_ErrorTranslate+0x448>)
 801f49c:	e022      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f49e:	4b28      	ldr	r3, [pc, #160]	; (801f540 <SCPI_ErrorTranslate+0x44c>)
 801f4a0:	e020      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4a2:	4b28      	ldr	r3, [pc, #160]	; (801f544 <SCPI_ErrorTranslate+0x450>)
 801f4a4:	e01e      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4a6:	4b28      	ldr	r3, [pc, #160]	; (801f548 <SCPI_ErrorTranslate+0x454>)
 801f4a8:	e01c      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4aa:	4b28      	ldr	r3, [pc, #160]	; (801f54c <SCPI_ErrorTranslate+0x458>)
 801f4ac:	e01a      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4ae:	4b28      	ldr	r3, [pc, #160]	; (801f550 <SCPI_ErrorTranslate+0x45c>)
 801f4b0:	e018      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4b2:	4b28      	ldr	r3, [pc, #160]	; (801f554 <SCPI_ErrorTranslate+0x460>)
 801f4b4:	e016      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4b6:	4b28      	ldr	r3, [pc, #160]	; (801f558 <SCPI_ErrorTranslate+0x464>)
 801f4b8:	e014      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4ba:	4b28      	ldr	r3, [pc, #160]	; (801f55c <SCPI_ErrorTranslate+0x468>)
 801f4bc:	e012      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4be:	4b28      	ldr	r3, [pc, #160]	; (801f560 <SCPI_ErrorTranslate+0x46c>)
 801f4c0:	e010      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4c2:	4b28      	ldr	r3, [pc, #160]	; (801f564 <SCPI_ErrorTranslate+0x470>)
 801f4c4:	e00e      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4c6:	4b28      	ldr	r3, [pc, #160]	; (801f568 <SCPI_ErrorTranslate+0x474>)
 801f4c8:	e00c      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4ca:	4b28      	ldr	r3, [pc, #160]	; (801f56c <SCPI_ErrorTranslate+0x478>)
 801f4cc:	e00a      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4ce:	4b28      	ldr	r3, [pc, #160]	; (801f570 <SCPI_ErrorTranslate+0x47c>)
 801f4d0:	e008      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4d2:	4b28      	ldr	r3, [pc, #160]	; (801f574 <SCPI_ErrorTranslate+0x480>)
 801f4d4:	e006      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4d6:	4b28      	ldr	r3, [pc, #160]	; (801f578 <SCPI_ErrorTranslate+0x484>)
 801f4d8:	e004      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4da:	4b28      	ldr	r3, [pc, #160]	; (801f57c <SCPI_ErrorTranslate+0x488>)
 801f4dc:	e002      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
 801f4de:	4b20      	ldr	r3, [pc, #128]	; (801f560 <SCPI_ErrorTranslate+0x46c>)
 801f4e0:	e000      	b.n	801f4e4 <SCPI_ErrorTranslate+0x3f0>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 801f4e2:	4b27      	ldr	r3, [pc, #156]	; (801f580 <SCPI_ErrorTranslate+0x48c>)
    }
}
 801f4e4:	4618      	mov	r0, r3
 801f4e6:	370c      	adds	r7, #12
 801f4e8:	46bd      	mov	sp, r7
 801f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4ee:	4770      	bx	lr
 801f4f0:	0802cbc0 	.word	0x0802cbc0
 801f4f4:	0802cbcc 	.word	0x0802cbcc
 801f4f8:	0802cbe0 	.word	0x0802cbe0
 801f4fc:	0802cbf4 	.word	0x0802cbf4
 801f500:	0802cc04 	.word	0x0802cc04
 801f504:	0802cc1c 	.word	0x0802cc1c
 801f508:	0802cc30 	.word	0x0802cc30
 801f50c:	0802cc44 	.word	0x0802cc44
 801f510:	0802cc54 	.word	0x0802cc54
 801f514:	0802cc70 	.word	0x0802cc70
 801f518:	0802cc80 	.word	0x0802cc80
 801f51c:	0802cc94 	.word	0x0802cc94
 801f520:	0802cca8 	.word	0x0802cca8
 801f524:	0802ccbc 	.word	0x0802ccbc
 801f528:	0802cccc 	.word	0x0802cccc
 801f52c:	0802cce0 	.word	0x0802cce0
 801f530:	0802ccf0 	.word	0x0802ccf0
 801f534:	0802cd00 	.word	0x0802cd00
 801f538:	0802cd14 	.word	0x0802cd14
 801f53c:	0802cd28 	.word	0x0802cd28
 801f540:	0802cd3c 	.word	0x0802cd3c
 801f544:	0802cd54 	.word	0x0802cd54
 801f548:	0802cd64 	.word	0x0802cd64
 801f54c:	0802cd80 	.word	0x0802cd80
 801f550:	0802cd94 	.word	0x0802cd94
 801f554:	0802cda4 	.word	0x0802cda4
 801f558:	0802cdbc 	.word	0x0802cdbc
 801f55c:	0802cdcc 	.word	0x0802cdcc
 801f560:	0802cdec 	.word	0x0802cdec
 801f564:	0802ce10 	.word	0x0802ce10
 801f568:	0802ce2c 	.word	0x0802ce2c
 801f56c:	0802ce4c 	.word	0x0802ce4c
 801f570:	0802ce68 	.word	0x0802ce68
 801f574:	0802ce88 	.word	0x0802ce88
 801f578:	0802cea4 	.word	0x0802cea4
 801f57c:	0802cebc 	.word	0x0802cebc
 801f580:	0802ced4 	.word	0x0802ced4

0801f584 <channelSpec>:
 * @param state lexer state
 * @param values range values
 * @param length length of values array
 * @param dimensions real number of dimensions
 */
static scpi_expr_result_t channelSpec(scpi_t * context, lex_state_t * state, int32_t * values, size_t length, size_t * dimensions) {
 801f584:	b580      	push	{r7, lr}
 801f586:	b088      	sub	sp, #32
 801f588:	af00      	add	r7, sp, #0
 801f58a:	60f8      	str	r0, [r7, #12]
 801f58c:	60b9      	str	r1, [r7, #8]
 801f58e:	607a      	str	r2, [r7, #4]
 801f590:	603b      	str	r3, [r7, #0]
    scpi_parameter_t param;
    size_t i = 0;
 801f592:	2300      	movs	r3, #0
 801f594:	61fb      	str	r3, [r7, #28]
    while (scpiLex_DecimalNumericProgramData(state, &param)) {
 801f596:	e021      	b.n	801f5dc <channelSpec+0x58>
        if (i < length) {
 801f598:	69fa      	ldr	r2, [r7, #28]
 801f59a:	683b      	ldr	r3, [r7, #0]
 801f59c:	429a      	cmp	r2, r3
 801f59e:	d209      	bcs.n	801f5b4 <channelSpec+0x30>
            SCPI_ParamToInt32(context, &param, &values[i]);
 801f5a0:	69fb      	ldr	r3, [r7, #28]
 801f5a2:	009b      	lsls	r3, r3, #2
 801f5a4:	687a      	ldr	r2, [r7, #4]
 801f5a6:	441a      	add	r2, r3
 801f5a8:	f107 0310 	add.w	r3, r7, #16
 801f5ac:	4619      	mov	r1, r3
 801f5ae:	68f8      	ldr	r0, [r7, #12]
 801f5b0:	f002 fc78 	bl	8021ea4 <SCPI_ParamToInt32>
        }

        if (scpiLex_SpecificCharacter(state, &param, '!')) {
 801f5b4:	f107 0310 	add.w	r3, r7, #16
 801f5b8:	2221      	movs	r2, #33	; 0x21
 801f5ba:	4619      	mov	r1, r3
 801f5bc:	68b8      	ldr	r0, [r7, #8]
 801f5be:	f001 fce7 	bl	8020f90 <scpiLex_SpecificCharacter>
 801f5c2:	4603      	mov	r3, r0
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	d003      	beq.n	801f5d0 <channelSpec+0x4c>
            i++;
 801f5c8:	69fb      	ldr	r3, [r7, #28]
 801f5ca:	3301      	adds	r3, #1
 801f5cc:	61fb      	str	r3, [r7, #28]
 801f5ce:	e005      	b.n	801f5dc <channelSpec+0x58>
        } else {
            *dimensions = i + 1;
 801f5d0:	69fb      	ldr	r3, [r7, #28]
 801f5d2:	1c5a      	adds	r2, r3, #1
 801f5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5d6:	601a      	str	r2, [r3, #0]
            return SCPI_EXPR_OK;
 801f5d8:	2300      	movs	r3, #0
 801f5da:	e00e      	b.n	801f5fa <channelSpec+0x76>
    while (scpiLex_DecimalNumericProgramData(state, &param)) {
 801f5dc:	f107 0310 	add.w	r3, r7, #16
 801f5e0:	4619      	mov	r1, r3
 801f5e2:	68b8      	ldr	r0, [r7, #8]
 801f5e4:	f001 f87c 	bl	80206e0 <scpiLex_DecimalNumericProgramData>
 801f5e8:	4603      	mov	r3, r0
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	d1d4      	bne.n	801f598 <channelSpec+0x14>
        }
    }

    if (i == 0) {
 801f5ee:	69fb      	ldr	r3, [r7, #28]
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	d101      	bne.n	801f5f8 <channelSpec+0x74>
        return SCPI_EXPR_NO_MORE;
 801f5f4:	2302      	movs	r3, #2
 801f5f6:	e000      	b.n	801f5fa <channelSpec+0x76>
    } else {
        /* there was at least one number followed by !, but after ! was not another number */
        return SCPI_EXPR_ERROR;
 801f5f8:	2301      	movs	r3, #1
    }
}
 801f5fa:	4618      	mov	r0, r3
 801f5fc:	3720      	adds	r7, #32
 801f5fe:	46bd      	mov	sp, r7
 801f600:	bd80      	pop	{r7, pc}

0801f602 <channelRange>:
 * @param valuesFrom return array of values from
 * @param valuesTo return array of values to
 * @param length length of values arrays
 * @param dimensions real number of dimensions
 */
static scpi_expr_result_t channelRange(scpi_t * context, lex_state_t * state, scpi_bool_t * isRange, int32_t * valuesFrom, int32_t * valuesTo, size_t length, size_t * dimensions) {
 801f602:	b580      	push	{r7, lr}
 801f604:	b08c      	sub	sp, #48	; 0x30
 801f606:	af02      	add	r7, sp, #8
 801f608:	60f8      	str	r0, [r7, #12]
 801f60a:	60b9      	str	r1, [r7, #8]
 801f60c:	607a      	str	r2, [r7, #4]
 801f60e:	603b      	str	r3, [r7, #0]
    scpi_token_t token;
    scpi_expr_result_t err;
    size_t fromDimensions;
    size_t toDimensions;

    err = channelSpec(context, state, valuesFrom, length, &fromDimensions);
 801f610:	f107 0314 	add.w	r3, r7, #20
 801f614:	9300      	str	r3, [sp, #0]
 801f616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f618:	683a      	ldr	r2, [r7, #0]
 801f61a:	68b9      	ldr	r1, [r7, #8]
 801f61c:	68f8      	ldr	r0, [r7, #12]
 801f61e:	f7ff ffb1 	bl	801f584 <channelSpec>
 801f622:	4603      	mov	r3, r0
 801f624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (err == SCPI_EXPR_OK) {
 801f628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	d12f      	bne.n	801f690 <channelRange+0x8e>
        if (scpiLex_Colon(state, &token)) {
 801f630:	f107 0318 	add.w	r3, r7, #24
 801f634:	4619      	mov	r1, r3
 801f636:	68b8      	ldr	r0, [r7, #8]
 801f638:	f001 fc87 	bl	8020f4a <scpiLex_Colon>
 801f63c:	4603      	mov	r3, r0
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d01e      	beq.n	801f680 <channelRange+0x7e>
            *isRange = TRUE;
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	2201      	movs	r2, #1
 801f646:	701a      	strb	r2, [r3, #0]
            err = channelSpec(context, state, valuesTo, length, &toDimensions);
 801f648:	f107 0310 	add.w	r3, r7, #16
 801f64c:	9300      	str	r3, [sp, #0]
 801f64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f652:	68b9      	ldr	r1, [r7, #8]
 801f654:	68f8      	ldr	r0, [r7, #12]
 801f656:	f7ff ff95 	bl	801f584 <channelSpec>
 801f65a:	4603      	mov	r3, r0
 801f65c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (err != SCPI_EXPR_OK) {
 801f660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f664:	2b00      	cmp	r3, #0
 801f666:	d001      	beq.n	801f66c <channelRange+0x6a>
                return SCPI_EXPR_ERROR;
 801f668:	2301      	movs	r3, #1
 801f66a:	e01a      	b.n	801f6a2 <channelRange+0xa0>
            }
            if (fromDimensions != toDimensions) {
 801f66c:	697a      	ldr	r2, [r7, #20]
 801f66e:	693b      	ldr	r3, [r7, #16]
 801f670:	429a      	cmp	r2, r3
 801f672:	d001      	beq.n	801f678 <channelRange+0x76>
                return SCPI_EXPR_ERROR;
 801f674:	2301      	movs	r3, #1
 801f676:	e014      	b.n	801f6a2 <channelRange+0xa0>
            }
            *dimensions = fromDimensions;
 801f678:	697a      	ldr	r2, [r7, #20]
 801f67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f67c:	601a      	str	r2, [r3, #0]
 801f67e:	e00e      	b.n	801f69e <channelRange+0x9c>
        } else {
            *isRange = FALSE;
 801f680:	687b      	ldr	r3, [r7, #4]
 801f682:	2200      	movs	r2, #0
 801f684:	701a      	strb	r2, [r3, #0]
            *dimensions = fromDimensions;
 801f686:	697a      	ldr	r2, [r7, #20]
 801f688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f68a:	601a      	str	r2, [r3, #0]
            return SCPI_EXPR_OK;
 801f68c:	2300      	movs	r3, #0
 801f68e:	e008      	b.n	801f6a2 <channelRange+0xa0>
        }
    } else if (err == SCPI_EXPR_NO_MORE) {
 801f690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f694:	2b02      	cmp	r3, #2
 801f696:	d102      	bne.n	801f69e <channelRange+0x9c>
        err = SCPI_EXPR_ERROR;
 801f698:	2301      	movs	r3, #1
 801f69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return err;
 801f69e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801f6a2:	4618      	mov	r0, r3
 801f6a4:	3728      	adds	r7, #40	; 0x28
 801f6a6:	46bd      	mov	sp, r7
 801f6a8:	bd80      	pop	{r7, pc}
	...

0801f6ac <SCPI_ExprChannelListEntry>:
 * @param valuesFrom return array of values from
 * @param valuesTo return array of values to
 * @param length length of values arrays
 * @param dimensions real number of dimensions
 */
scpi_expr_result_t SCPI_ExprChannelListEntry(scpi_t * context, scpi_parameter_t * param, int index, scpi_bool_t * isRange, int32_t * valuesFrom, int32_t * valuesTo, size_t length, size_t * dimensions) {
 801f6ac:	b580      	push	{r7, lr}
 801f6ae:	b090      	sub	sp, #64	; 0x40
 801f6b0:	af04      	add	r7, sp, #16
 801f6b2:	60f8      	str	r0, [r7, #12]
 801f6b4:	60b9      	str	r1, [r7, #8]
 801f6b6:	607a      	str	r2, [r7, #4]
 801f6b8:	603b      	str	r3, [r7, #0]
    lex_state_t lex;
    int i;
    scpi_expr_result_t res = SCPI_EXPR_OK;
 801f6ba:	2300      	movs	r3, #0
 801f6bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    scpi_token_t token;

    if (!isRange || !param || !dimensions || (length && (!valuesFrom || !valuesTo))) {
 801f6c0:	683b      	ldr	r3, [r7, #0]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d00e      	beq.n	801f6e4 <SCPI_ExprChannelListEntry+0x38>
 801f6c6:	68bb      	ldr	r3, [r7, #8]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d00b      	beq.n	801f6e4 <SCPI_ExprChannelListEntry+0x38>
 801f6cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	d008      	beq.n	801f6e4 <SCPI_ExprChannelListEntry+0x38>
 801f6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f6d4:	2b00      	cmp	r3, #0
 801f6d6:	d00b      	beq.n	801f6f0 <SCPI_ExprChannelListEntry+0x44>
 801f6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f6da:	2b00      	cmp	r3, #0
 801f6dc:	d002      	beq.n	801f6e4 <SCPI_ExprChannelListEntry+0x38>
 801f6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d105      	bne.n	801f6f0 <SCPI_ExprChannelListEntry+0x44>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 801f6e4:	4949      	ldr	r1, [pc, #292]	; (801f80c <SCPI_ExprChannelListEntry+0x160>)
 801f6e6:	68f8      	ldr	r0, [r7, #12]
 801f6e8:	f7ff fcf2 	bl	801f0d0 <SCPI_ErrorPush>
        return SCPI_EXPR_ERROR;
 801f6ec:	2301      	movs	r3, #1
 801f6ee:	e088      	b.n	801f802 <SCPI_ExprChannelListEntry+0x156>
    }

    if (param->type != SCPI_TOKEN_PROGRAM_EXPRESSION) {
 801f6f0:	68bb      	ldr	r3, [r7, #8]
 801f6f2:	781b      	ldrb	r3, [r3, #0]
 801f6f4:	2b10      	cmp	r3, #16
 801f6f6:	d006      	beq.n	801f706 <SCPI_ExprChannelListEntry+0x5a>
        SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 801f6f8:	f06f 0167 	mvn.w	r1, #103	; 0x67
 801f6fc:	68f8      	ldr	r0, [r7, #12]
 801f6fe:	f7ff fce7 	bl	801f0d0 <SCPI_ErrorPush>
        return SCPI_EXPR_ERROR;
 801f702:	2301      	movs	r3, #1
 801f704:	e07d      	b.n	801f802 <SCPI_ExprChannelListEntry+0x156>
    }

    lex.buffer = param->ptr + 1;
 801f706:	68bb      	ldr	r3, [r7, #8]
 801f708:	685b      	ldr	r3, [r3, #4]
 801f70a:	3301      	adds	r3, #1
 801f70c:	61fb      	str	r3, [r7, #28]
    lex.pos = lex.buffer;
 801f70e:	69fb      	ldr	r3, [r7, #28]
 801f710:	623b      	str	r3, [r7, #32]
    lex.len = param->len - 2;
 801f712:	68bb      	ldr	r3, [r7, #8]
 801f714:	689b      	ldr	r3, [r3, #8]
 801f716:	3b02      	subs	r3, #2
 801f718:	627b      	str	r3, [r7, #36]	; 0x24

    /* detect channel list expression */
    if (!scpiLex_SpecificCharacter(&lex, &token, '@')) {
 801f71a:	f107 0110 	add.w	r1, r7, #16
 801f71e:	f107 031c 	add.w	r3, r7, #28
 801f722:	2240      	movs	r2, #64	; 0x40
 801f724:	4618      	mov	r0, r3
 801f726:	f001 fc33 	bl	8020f90 <scpiLex_SpecificCharacter>
 801f72a:	4603      	mov	r3, r0
 801f72c:	2b00      	cmp	r3, #0
 801f72e:	d106      	bne.n	801f73e <SCPI_ExprChannelListEntry+0x92>
        SCPI_ErrorPush(context, SCPI_ERROR_EXPRESSION_PARSING_ERROR);
 801f730:	f06f 01a9 	mvn.w	r1, #169	; 0xa9
 801f734:	68f8      	ldr	r0, [r7, #12]
 801f736:	f7ff fccb 	bl	801f0d0 <SCPI_ErrorPush>
        return SCPI_EXPR_ERROR;
 801f73a:	2301      	movs	r3, #1
 801f73c:	e061      	b.n	801f802 <SCPI_ExprChannelListEntry+0x156>
    }

    for (i = 0; i <= index; i++) {
 801f73e:	2300      	movs	r3, #0
 801f740:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f742:	e039      	b.n	801f7b8 <SCPI_ExprChannelListEntry+0x10c>
        res = channelRange(context, &lex, isRange, valuesFrom, valuesTo, (i == index) ? length : 0, dimensions);
 801f744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	429a      	cmp	r2, r3
 801f74a:	d101      	bne.n	801f750 <SCPI_ExprChannelListEntry+0xa4>
 801f74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f74e:	e000      	b.n	801f752 <SCPI_ExprChannelListEntry+0xa6>
 801f750:	2300      	movs	r3, #0
 801f752:	f107 011c 	add.w	r1, r7, #28
 801f756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f758:	9202      	str	r2, [sp, #8]
 801f75a:	9301      	str	r3, [sp, #4]
 801f75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f75e:	9300      	str	r3, [sp, #0]
 801f760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f762:	683a      	ldr	r2, [r7, #0]
 801f764:	68f8      	ldr	r0, [r7, #12]
 801f766:	f7ff ff4c 	bl	801f602 <channelRange>
 801f76a:	4603      	mov	r3, r0
 801f76c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (res != SCPI_EXPR_OK) {
 801f770:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f774:	2b00      	cmp	r3, #0
 801f776:	d124      	bne.n	801f7c2 <SCPI_ExprChannelListEntry+0x116>
            break;
        }
        if (i != index) {
 801f778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	429a      	cmp	r2, r3
 801f77e:	d018      	beq.n	801f7b2 <SCPI_ExprChannelListEntry+0x106>
            if (!scpiLex_Comma(&lex, &token)) {
 801f780:	f107 0210 	add.w	r2, r7, #16
 801f784:	f107 031c 	add.w	r3, r7, #28
 801f788:	4611      	mov	r1, r2
 801f78a:	4618      	mov	r0, r3
 801f78c:	f001 fb97 	bl	8020ebe <scpiLex_Comma>
 801f790:	4603      	mov	r3, r0
 801f792:	2b00      	cmp	r3, #0
 801f794:	d10d      	bne.n	801f7b2 <SCPI_ExprChannelListEntry+0x106>
                res = scpiLex_IsEos(&lex) ? SCPI_EXPR_NO_MORE : SCPI_EXPR_ERROR;
 801f796:	f107 031c 	add.w	r3, r7, #28
 801f79a:	4618      	mov	r0, r3
 801f79c:	f000 fc0f 	bl	801ffbe <scpiLex_IsEos>
 801f7a0:	4603      	mov	r3, r0
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	d001      	beq.n	801f7aa <SCPI_ExprChannelListEntry+0xfe>
 801f7a6:	2302      	movs	r3, #2
 801f7a8:	e000      	b.n	801f7ac <SCPI_ExprChannelListEntry+0x100>
 801f7aa:	2301      	movs	r3, #1
 801f7ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                break;
 801f7b0:	e008      	b.n	801f7c4 <SCPI_ExprChannelListEntry+0x118>
    for (i = 0; i <= index; i++) {
 801f7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7b4:	3301      	adds	r3, #1
 801f7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f7b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	429a      	cmp	r2, r3
 801f7be:	ddc1      	ble.n	801f744 <SCPI_ExprChannelListEntry+0x98>
 801f7c0:	e000      	b.n	801f7c4 <SCPI_ExprChannelListEntry+0x118>
            break;
 801f7c2:	bf00      	nop
            }
        }
    }

    if (res == SCPI_EXPR_ERROR) {
 801f7c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f7c8:	2b01      	cmp	r3, #1
 801f7ca:	d104      	bne.n	801f7d6 <SCPI_ExprChannelListEntry+0x12a>
        SCPI_ErrorPush(context, SCPI_ERROR_EXPRESSION_PARSING_ERROR);
 801f7cc:	f06f 01a9 	mvn.w	r1, #169	; 0xa9
 801f7d0:	68f8      	ldr	r0, [r7, #12]
 801f7d2:	f7ff fc7d 	bl	801f0d0 <SCPI_ErrorPush>
    }
    if (res == SCPI_EXPR_NO_MORE) {
 801f7d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f7da:	2b02      	cmp	r3, #2
 801f7dc:	d10f      	bne.n	801f7fe <SCPI_ExprChannelListEntry+0x152>
        if (!scpiLex_IsEos(&lex)) {
 801f7de:	f107 031c 	add.w	r3, r7, #28
 801f7e2:	4618      	mov	r0, r3
 801f7e4:	f000 fbeb 	bl	801ffbe <scpiLex_IsEos>
 801f7e8:	4603      	mov	r3, r0
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	d107      	bne.n	801f7fe <SCPI_ExprChannelListEntry+0x152>
            res = SCPI_EXPR_ERROR;
 801f7ee:	2301      	movs	r3, #1
 801f7f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            SCPI_ErrorPush(context, SCPI_ERROR_EXPRESSION_PARSING_ERROR);
 801f7f4:	f06f 01a9 	mvn.w	r1, #169	; 0xa9
 801f7f8:	68f8      	ldr	r0, [r7, #12]
 801f7fa:	f7ff fc69 	bl	801f0d0 <SCPI_ErrorPush>
        }
    }
    return res;
 801f7fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801f802:	4618      	mov	r0, r3
 801f804:	3730      	adds	r7, #48	; 0x30
 801f806:	46bd      	mov	sp, r7
 801f808:	bd80      	pop	{r7, pc}
 801f80a:	bf00      	nop
 801f80c:	fffffeca 	.word	0xfffffeca

0801f810 <fifo_init>:

/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
 801f810:	b480      	push	{r7}
 801f812:	b085      	sub	sp, #20
 801f814:	af00      	add	r7, sp, #0
 801f816:	60f8      	str	r0, [r7, #12]
 801f818:	60b9      	str	r1, [r7, #8]
 801f81a:	4613      	mov	r3, r2
 801f81c:	80fb      	strh	r3, [r7, #6]
    fifo->wr = 0;
 801f81e:	68fb      	ldr	r3, [r7, #12]
 801f820:	2200      	movs	r2, #0
 801f822:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 801f824:	68fb      	ldr	r3, [r7, #12]
 801f826:	2200      	movs	r2, #0
 801f828:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 801f82a:	68fb      	ldr	r3, [r7, #12]
 801f82c:	2200      	movs	r2, #0
 801f82e:	809a      	strh	r2, [r3, #4]
    fifo->data = data;
 801f830:	68fb      	ldr	r3, [r7, #12]
 801f832:	68ba      	ldr	r2, [r7, #8]
 801f834:	609a      	str	r2, [r3, #8]
    fifo->size = size;
 801f836:	68fb      	ldr	r3, [r7, #12]
 801f838:	88fa      	ldrh	r2, [r7, #6]
 801f83a:	80da      	strh	r2, [r3, #6]
}
 801f83c:	bf00      	nop
 801f83e:	3714      	adds	r7, #20
 801f840:	46bd      	mov	sp, r7
 801f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f846:	4770      	bx	lr

0801f848 <fifo_clear>:

/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
 801f848:	b480      	push	{r7}
 801f84a:	b083      	sub	sp, #12
 801f84c:	af00      	add	r7, sp, #0
 801f84e:	6078      	str	r0, [r7, #4]
    fifo->wr = 0;
 801f850:	687b      	ldr	r3, [r7, #4]
 801f852:	2200      	movs	r2, #0
 801f854:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	2200      	movs	r2, #0
 801f85a:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 801f85c:	687b      	ldr	r3, [r7, #4]
 801f85e:	2200      	movs	r2, #0
 801f860:	809a      	strh	r2, [r3, #4]
}
 801f862:	bf00      	nop
 801f864:	370c      	adds	r7, #12
 801f866:	46bd      	mov	sp, r7
 801f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f86c:	4770      	bx	lr

0801f86e <fifo_is_empty>:
/**
 * Test if fifo is empty
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_empty(scpi_fifo_t * fifo) {
 801f86e:	b480      	push	{r7}
 801f870:	b083      	sub	sp, #12
 801f872:	af00      	add	r7, sp, #0
 801f874:	6078      	str	r0, [r7, #4]
    return fifo->count == 0;
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	bf0c      	ite	eq
 801f880:	2301      	moveq	r3, #1
 801f882:	2300      	movne	r3, #0
 801f884:	b2db      	uxtb	r3, r3
}
 801f886:	4618      	mov	r0, r3
 801f888:	370c      	adds	r7, #12
 801f88a:	46bd      	mov	sp, r7
 801f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f890:	4770      	bx	lr

0801f892 <fifo_is_full>:
/**
 * Test if fifo is full
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_full(scpi_fifo_t * fifo) {
 801f892:	b480      	push	{r7}
 801f894:	b083      	sub	sp, #12
 801f896:	af00      	add	r7, sp, #0
 801f898:	6078      	str	r0, [r7, #4]
    return fifo->count == fifo->size;
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801f8a0:	687b      	ldr	r3, [r7, #4]
 801f8a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f8a6:	429a      	cmp	r2, r3
 801f8a8:	bf0c      	ite	eq
 801f8aa:	2301      	moveq	r3, #1
 801f8ac:	2300      	movne	r3, #0
 801f8ae:	b2db      	uxtb	r3, r3
}
 801f8b0:	4618      	mov	r0, r3
 801f8b2:	370c      	adds	r7, #12
 801f8b4:	46bd      	mov	sp, r7
 801f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8ba:	4770      	bx	lr

0801f8bc <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 801f8bc:	b580      	push	{r7, lr}
 801f8be:	b082      	sub	sp, #8
 801f8c0:	af00      	add	r7, sp, #0
 801f8c2:	6078      	str	r0, [r7, #4]
 801f8c4:	6039      	str	r1, [r7, #0]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 801f8c6:	6878      	ldr	r0, [r7, #4]
 801f8c8:	f7ff ffe3 	bl	801f892 <fifo_is_full>
 801f8cc:	4603      	mov	r3, r0
 801f8ce:	2b00      	cmp	r3, #0
 801f8d0:	d001      	beq.n	801f8d6 <fifo_add+0x1a>
        return FALSE;
 801f8d2:	2300      	movs	r3, #0
 801f8d4:	e027      	b.n	801f926 <fifo_add+0x6a>
    }
    if (!value) {
 801f8d6:	683b      	ldr	r3, [r7, #0]
 801f8d8:	2b00      	cmp	r3, #0
 801f8da:	d101      	bne.n	801f8e0 <fifo_add+0x24>
        return FALSE;
 801f8dc:	2300      	movs	r3, #0
 801f8de:	e022      	b.n	801f926 <fifo_add+0x6a>
    }

    fifo->data[fifo->wr] = *value;
 801f8e0:	687b      	ldr	r3, [r7, #4]
 801f8e2:	689a      	ldr	r2, [r3, #8]
 801f8e4:	687b      	ldr	r3, [r7, #4]
 801f8e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f8ea:	005b      	lsls	r3, r3, #1
 801f8ec:	4413      	add	r3, r2
 801f8ee:	683a      	ldr	r2, [r7, #0]
 801f8f0:	8812      	ldrh	r2, [r2, #0]
 801f8f2:	801a      	strh	r2, [r3, #0]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 801f8f4:	687b      	ldr	r3, [r7, #4]
 801f8f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f8fa:	3301      	adds	r3, #1
 801f8fc:	687a      	ldr	r2, [r7, #4]
 801f8fe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801f902:	fb93 f1f2 	sdiv	r1, r3, r2
 801f906:	fb01 f202 	mul.w	r2, r1, r2
 801f90a:	1a9b      	subs	r3, r3, r2
 801f90c:	b21a      	sxth	r2, r3
 801f90e:	687b      	ldr	r3, [r7, #4]
 801f910:	801a      	strh	r2, [r3, #0]
    fifo->count += 1;
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f918:	b29b      	uxth	r3, r3
 801f91a:	3301      	adds	r3, #1
 801f91c:	b29b      	uxth	r3, r3
 801f91e:	b21a      	sxth	r2, r3
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	809a      	strh	r2, [r3, #4]
    return TRUE;
 801f924:	2301      	movs	r3, #1
}
 801f926:	4618      	mov	r0, r3
 801f928:	3708      	adds	r7, #8
 801f92a:	46bd      	mov	sp, r7
 801f92c:	bd80      	pop	{r7, pc}

0801f92e <fifo_remove>:
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 801f92e:	b580      	push	{r7, lr}
 801f930:	b082      	sub	sp, #8
 801f932:	af00      	add	r7, sp, #0
 801f934:	6078      	str	r0, [r7, #4]
 801f936:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 801f938:	6878      	ldr	r0, [r7, #4]
 801f93a:	f7ff ff98 	bl	801f86e <fifo_is_empty>
 801f93e:	4603      	mov	r3, r0
 801f940:	2b00      	cmp	r3, #0
 801f942:	d001      	beq.n	801f948 <fifo_remove+0x1a>
        return FALSE;
 801f944:	2300      	movs	r3, #0
 801f946:	e025      	b.n	801f994 <fifo_remove+0x66>
    }

    if (value) {
 801f948:	683b      	ldr	r3, [r7, #0]
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	d009      	beq.n	801f962 <fifo_remove+0x34>
        *value = fifo->data[fifo->rd];
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	689a      	ldr	r2, [r3, #8]
 801f952:	687b      	ldr	r3, [r7, #4]
 801f954:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f958:	005b      	lsls	r3, r3, #1
 801f95a:	441a      	add	r2, r3
 801f95c:	683b      	ldr	r3, [r7, #0]
 801f95e:	8812      	ldrh	r2, [r2, #0]
 801f960:	801a      	strh	r2, [r3, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f968:	3301      	adds	r3, #1
 801f96a:	687a      	ldr	r2, [r7, #4]
 801f96c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801f970:	fb93 f1f2 	sdiv	r1, r3, r2
 801f974:	fb01 f202 	mul.w	r2, r1, r2
 801f978:	1a9b      	subs	r3, r3, r2
 801f97a:	b21a      	sxth	r2, r3
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	805a      	strh	r2, [r3, #2]
    fifo->count -= 1;
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f986:	b29b      	uxth	r3, r3
 801f988:	3b01      	subs	r3, #1
 801f98a:	b29b      	uxth	r3, r3
 801f98c:	b21a      	sxth	r2, r3
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	809a      	strh	r2, [r3, #4]

    return TRUE;
 801f992:	2301      	movs	r3, #1
}
 801f994:	4618      	mov	r0, r3
 801f996:	3708      	adds	r7, #8
 801f998:	46bd      	mov	sp, r7
 801f99a:	bd80      	pop	{r7, pc}

0801f99c <fifo_remove_last>:
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 801f99c:	b580      	push	{r7, lr}
 801f99e:	b082      	sub	sp, #8
 801f9a0:	af00      	add	r7, sp, #0
 801f9a2:	6078      	str	r0, [r7, #4]
 801f9a4:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 801f9a6:	6878      	ldr	r0, [r7, #4]
 801f9a8:	f7ff ff61 	bl	801f86e <fifo_is_empty>
 801f9ac:	4603      	mov	r3, r0
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d001      	beq.n	801f9b6 <fifo_remove_last+0x1a>
        return FALSE;
 801f9b2:	2300      	movs	r3, #0
 801f9b4:	e02a      	b.n	801fa0c <fifo_remove_last+0x70>
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f9bc:	461a      	mov	r2, r3
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801f9c4:	4413      	add	r3, r2
 801f9c6:	3b01      	subs	r3, #1
 801f9c8:	687a      	ldr	r2, [r7, #4]
 801f9ca:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801f9ce:	fb93 f1f2 	sdiv	r1, r3, r2
 801f9d2:	fb01 f202 	mul.w	r2, r1, r2
 801f9d6:	1a9b      	subs	r3, r3, r2
 801f9d8:	b21a      	sxth	r2, r3
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	801a      	strh	r2, [r3, #0]

    if (value) {
 801f9de:	683b      	ldr	r3, [r7, #0]
 801f9e0:	2b00      	cmp	r3, #0
 801f9e2:	d009      	beq.n	801f9f8 <fifo_remove_last+0x5c>
        *value = fifo->data[fifo->wr];
 801f9e4:	687b      	ldr	r3, [r7, #4]
 801f9e6:	689a      	ldr	r2, [r3, #8]
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f9ee:	005b      	lsls	r3, r3, #1
 801f9f0:	441a      	add	r2, r3
 801f9f2:	683b      	ldr	r3, [r7, #0]
 801f9f4:	8812      	ldrh	r2, [r2, #0]
 801f9f6:	801a      	strh	r2, [r3, #0]
    }
    fifo->count -= 1;
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f9fe:	b29b      	uxth	r3, r3
 801fa00:	3b01      	subs	r3, #1
 801fa02:	b29b      	uxth	r3, r3
 801fa04:	b21a      	sxth	r2, r3
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	809a      	strh	r2, [r3, #4]

    return TRUE;
 801fa0a:	2301      	movs	r3, #1
}
 801fa0c:	4618      	mov	r0, r3
 801fa0e:	3708      	adds	r7, #8
 801fa10:	46bd      	mov	sp, r7
 801fa12:	bd80      	pop	{r7, pc}

0801fa14 <fifo_count>:
 * Retrive number of elements in fifo
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
 801fa14:	b480      	push	{r7}
 801fa16:	b083      	sub	sp, #12
 801fa18:	af00      	add	r7, sp, #0
 801fa1a:	6078      	str	r0, [r7, #4]
 801fa1c:	6039      	str	r1, [r7, #0]
    *value = fifo->count;
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801fa24:	683b      	ldr	r3, [r7, #0]
 801fa26:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801fa28:	2301      	movs	r3, #1
}
 801fa2a:	4618      	mov	r0, r3
 801fa2c:	370c      	adds	r7, #12
 801fa2e:	46bd      	mov	sp, r7
 801fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa34:	4770      	bx	lr

0801fa36 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 801fa36:	b580      	push	{r7, lr}
 801fa38:	b082      	sub	sp, #8
 801fa3a:	af00      	add	r7, sp, #0
 801fa3c:	6078      	str	r0, [r7, #4]
 801fa3e:	460b      	mov	r3, r1
 801fa40:	70fb      	strb	r3, [r7, #3]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 801fa42:	78fb      	ldrb	r3, [r7, #3]
 801fa44:	4619      	mov	r1, r3
 801fa46:	6878      	ldr	r0, [r7, #4]
 801fa48:	f000 f859 	bl	801fafe <SCPI_RegGet>
 801fa4c:	4603      	mov	r3, r0
 801fa4e:	461a      	mov	r2, r3
 801fa50:	78fb      	ldrb	r3, [r7, #3]
 801fa52:	4619      	mov	r1, r3
 801fa54:	6878      	ldr	r0, [r7, #4]
 801fa56:	f000 f88d 	bl	801fb74 <SCPI_RegSet>
}
 801fa5a:	bf00      	nop
 801fa5c:	3708      	adds	r7, #8
 801fa5e:	46bd      	mov	sp, r7
 801fa60:	bd80      	pop	{r7, pc}

0801fa62 <regUpdateEvent>:
 * in the condition register
 * @param context
 * @param condReg - condition register name
 * @param eventReg - event register name
 */
static void regUpdateEvent(scpi_t * context, scpi_reg_val_t oldCondVal, scpi_reg_val_t newCondVal, scpi_reg_name_t eventReg) {
 801fa62:	b590      	push	{r4, r7, lr}
 801fa64:	b085      	sub	sp, #20
 801fa66:	af00      	add	r7, sp, #0
 801fa68:	60f8      	str	r0, [r7, #12]
 801fa6a:	4608      	mov	r0, r1
 801fa6c:	4611      	mov	r1, r2
 801fa6e:	461a      	mov	r2, r3
 801fa70:	4603      	mov	r3, r0
 801fa72:	817b      	strh	r3, [r7, #10]
 801fa74:	460b      	mov	r3, r1
 801fa76:	813b      	strh	r3, [r7, #8]
 801fa78:	4613      	mov	r3, r2
 801fa7a:	71fb      	strb	r3, [r7, #7]
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 801fa7c:	897b      	ldrh	r3, [r7, #10]
 801fa7e:	43db      	mvns	r3, r3
 801fa80:	b29a      	uxth	r2, r3
 801fa82:	893b      	ldrh	r3, [r7, #8]
 801fa84:	4013      	ands	r3, r2
 801fa86:	b29c      	uxth	r4, r3
 801fa88:	79fb      	ldrb	r3, [r7, #7]
 801fa8a:	4619      	mov	r1, r3
 801fa8c:	68f8      	ldr	r0, [r7, #12]
 801fa8e:	f000 f836 	bl	801fafe <SCPI_RegGet>
 801fa92:	4603      	mov	r3, r0
 801fa94:	4323      	orrs	r3, r4
 801fa96:	b29a      	uxth	r2, r3
 801fa98:	79fb      	ldrb	r3, [r7, #7]
 801fa9a:	4619      	mov	r1, r3
 801fa9c:	68f8      	ldr	r0, [r7, #12]
 801fa9e:	f000 f869 	bl	801fb74 <SCPI_RegSet>
}
 801faa2:	bf00      	nop
 801faa4:	3714      	adds	r7, #20
 801faa6:	46bd      	mov	sp, r7
 801faa8:	bd90      	pop	{r4, r7, pc}

0801faaa <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 801faaa:	b580      	push	{r7, lr}
 801faac:	b084      	sub	sp, #16
 801faae:	af00      	add	r7, sp, #0
 801fab0:	60f8      	str	r0, [r7, #12]
 801fab2:	4608      	mov	r0, r1
 801fab4:	4611      	mov	r1, r2
 801fab6:	461a      	mov	r2, r3
 801fab8:	4603      	mov	r3, r0
 801faba:	817b      	strh	r3, [r7, #10]
 801fabc:	460b      	mov	r3, r1
 801fabe:	727b      	strb	r3, [r7, #9]
 801fac0:	4613      	mov	r3, r2
 801fac2:	80fb      	strh	r3, [r7, #6]
    if (val & SCPI_RegGet(context, mask)) {
 801fac4:	7a7b      	ldrb	r3, [r7, #9]
 801fac6:	4619      	mov	r1, r3
 801fac8:	68f8      	ldr	r0, [r7, #12]
 801faca:	f000 f818 	bl	801fafe <SCPI_RegGet>
 801face:	4603      	mov	r3, r0
 801fad0:	461a      	mov	r2, r3
 801fad2:	897b      	ldrh	r3, [r7, #10]
 801fad4:	4013      	ands	r3, r2
 801fad6:	b29b      	uxth	r3, r3
 801fad8:	2b00      	cmp	r3, #0
 801fada:	d006      	beq.n	801faea <regUpdateSTB+0x40>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 801fadc:	88fb      	ldrh	r3, [r7, #6]
 801fade:	461a      	mov	r2, r3
 801fae0:	2100      	movs	r1, #0
 801fae2:	68f8      	ldr	r0, [r7, #12]
 801fae4:	f000 f8f0 	bl	801fcc8 <SCPI_RegSetBits>
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
    }
}
 801fae8:	e005      	b.n	801faf6 <regUpdateSTB+0x4c>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 801faea:	88fb      	ldrh	r3, [r7, #6]
 801faec:	461a      	mov	r2, r3
 801faee:	2100      	movs	r1, #0
 801faf0:	68f8      	ldr	r0, [r7, #12]
 801faf2:	f000 f904 	bl	801fcfe <SCPI_RegClearBits>
}
 801faf6:	bf00      	nop
 801faf8:	3710      	adds	r7, #16
 801fafa:	46bd      	mov	sp, r7
 801fafc:	bd80      	pop	{r7, pc}

0801fafe <SCPI_RegGet>:
/**
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
 801fafe:	b480      	push	{r7}
 801fb00:	b083      	sub	sp, #12
 801fb02:	af00      	add	r7, sp, #0
 801fb04:	6078      	str	r0, [r7, #4]
 801fb06:	460b      	mov	r3, r1
 801fb08:	70fb      	strb	r3, [r7, #3]
    if ((name < SCPI_REG_COUNT) && context) {
 801fb0a:	78fb      	ldrb	r3, [r7, #3]
 801fb0c:	2b09      	cmp	r3, #9
 801fb0e:	d808      	bhi.n	801fb22 <SCPI_RegGet+0x24>
 801fb10:	687b      	ldr	r3, [r7, #4]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d005      	beq.n	801fb22 <SCPI_RegGet+0x24>
        return context->registers[name];
 801fb16:	78fa      	ldrb	r2, [r7, #3]
 801fb18:	687b      	ldr	r3, [r7, #4]
 801fb1a:	3224      	adds	r2, #36	; 0x24
 801fb1c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801fb20:	e000      	b.n	801fb24 <SCPI_RegGet+0x26>
    } else {
        return 0;
 801fb22:	2300      	movs	r3, #0
    }
}
 801fb24:	4618      	mov	r0, r3
 801fb26:	370c      	adds	r7, #12
 801fb28:	46bd      	mov	sp, r7
 801fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb2e:	4770      	bx	lr

0801fb30 <writeControl>:
 * Wrapper function to control interface from context
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 801fb30:	b580      	push	{r7, lr}
 801fb32:	b082      	sub	sp, #8
 801fb34:	af00      	add	r7, sp, #0
 801fb36:	6078      	str	r0, [r7, #4]
 801fb38:	460b      	mov	r3, r1
 801fb3a:	70fb      	strb	r3, [r7, #3]
 801fb3c:	4613      	mov	r3, r2
 801fb3e:	803b      	strh	r3, [r7, #0]
    if (context && context->interface && context->interface->control) {
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	d011      	beq.n	801fb6a <writeControl+0x3a>
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d00d      	beq.n	801fb6a <writeControl+0x3a>
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb52:	689b      	ldr	r3, [r3, #8]
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	d008      	beq.n	801fb6a <writeControl+0x3a>
        return context->interface->control(context, ctrl, val);
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb5c:	689b      	ldr	r3, [r3, #8]
 801fb5e:	883a      	ldrh	r2, [r7, #0]
 801fb60:	78f9      	ldrb	r1, [r7, #3]
 801fb62:	6878      	ldr	r0, [r7, #4]
 801fb64:	4798      	blx	r3
 801fb66:	4603      	mov	r3, r0
 801fb68:	e000      	b.n	801fb6c <writeControl+0x3c>
    } else {
        return 0;
 801fb6a:	2300      	movs	r3, #0
    }
}
 801fb6c:	4618      	mov	r0, r3
 801fb6e:	3708      	adds	r7, #8
 801fb70:	46bd      	mov	sp, r7
 801fb72:	bd80      	pop	{r7, pc}

0801fb74 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 801fb74:	b580      	push	{r7, lr}
 801fb76:	b084      	sub	sp, #16
 801fb78:	af00      	add	r7, sp, #0
 801fb7a:	6078      	str	r0, [r7, #4]
 801fb7c:	460b      	mov	r3, r1
 801fb7e:	70fb      	strb	r3, [r7, #3]
 801fb80:	4613      	mov	r3, r2
 801fb82:	803b      	strh	r3, [r7, #0]
    scpi_bool_t srq = FALSE;
 801fb84:	2300      	movs	r3, #0
 801fb86:	73fb      	strb	r3, [r7, #15]
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 801fb88:	78fb      	ldrb	r3, [r7, #3]
 801fb8a:	2b09      	cmp	r3, #9
 801fb8c:	f200 8098 	bhi.w	801fcc0 <SCPI_RegSet+0x14c>
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	f000 8094 	beq.w	801fcc0 <SCPI_RegSet+0x14c>
        return;
    }

    /* store old register value */
    old_val = context->registers[name];
 801fb98:	78fa      	ldrb	r2, [r7, #3]
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	3224      	adds	r2, #36	; 0x24
 801fb9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801fba2:	81bb      	strh	r3, [r7, #12]

    /* set register value */
    context->registers[name] = val;
 801fba4:	78fa      	ldrb	r2, [r7, #3]
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	3224      	adds	r2, #36	; 0x24
 801fbaa:	8839      	ldrh	r1, [r7, #0]
 801fbac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
 801fbb0:	78fb      	ldrb	r3, [r7, #3]
 801fbb2:	2b0a      	cmp	r3, #10
 801fbb4:	d870      	bhi.n	801fc98 <SCPI_RegSet+0x124>
 801fbb6:	a201      	add	r2, pc, #4	; (adr r2, 801fbbc <SCPI_RegSet+0x48>)
 801fbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fbbc:	0801fbe9 	.word	0x0801fbe9
 801fbc0:	0801fc29 	.word	0x0801fc29
 801fbc4:	0801fc33 	.word	0x0801fc33
 801fbc8:	0801fc41 	.word	0x0801fc41
 801fbcc:	0801fc71 	.word	0x0801fc71
 801fbd0:	0801fc7f 	.word	0x0801fc7f
 801fbd4:	0801fc89 	.word	0x0801fc89
 801fbd8:	0801fc4b 	.word	0x0801fc4b
 801fbdc:	0801fc59 	.word	0x0801fc59
 801fbe0:	0801fc63 	.word	0x0801fc63
 801fbe4:	0801fc99 	.word	0x0801fc99
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
 801fbe8:	2101      	movs	r1, #1
 801fbea:	6878      	ldr	r0, [r7, #4]
 801fbec:	f7ff ff87 	bl	801fafe <SCPI_RegGet>
 801fbf0:	4603      	mov	r3, r0
 801fbf2:	817b      	strh	r3, [r7, #10]
            mask &= ~STB_SRQ;
 801fbf4:	897b      	ldrh	r3, [r7, #10]
 801fbf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fbfa:	817b      	strh	r3, [r7, #10]
            if (val & mask) {
 801fbfc:	883a      	ldrh	r2, [r7, #0]
 801fbfe:	897b      	ldrh	r3, [r7, #10]
 801fc00:	4013      	ands	r3, r2
 801fc02:	b29b      	uxth	r3, r3
 801fc04:	2b00      	cmp	r3, #0
 801fc06:	d00a      	beq.n	801fc1e <SCPI_RegSet+0xaa>
                val |= STB_SRQ;
 801fc08:	883b      	ldrh	r3, [r7, #0]
 801fc0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc0e:	803b      	strh	r3, [r7, #0]
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
 801fc10:	89ba      	ldrh	r2, [r7, #12]
 801fc12:	883b      	ldrh	r3, [r7, #0]
 801fc14:	429a      	cmp	r2, r3
 801fc16:	d03e      	beq.n	801fc96 <SCPI_RegSet+0x122>
                    srq = TRUE;
 801fc18:	2301      	movs	r3, #1
 801fc1a:	73fb      	strb	r3, [r7, #15]
                }
            } else {
                val &= ~STB_SRQ;
            }
            break;
 801fc1c:	e03b      	b.n	801fc96 <SCPI_RegSet+0x122>
                val &= ~STB_SRQ;
 801fc1e:	883b      	ldrh	r3, [r7, #0]
 801fc20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fc24:	803b      	strh	r3, [r7, #0]
            break;
 801fc26:	e036      	b.n	801fc96 <SCPI_RegSet+0x122>
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
 801fc28:	2100      	movs	r1, #0
 801fc2a:	6878      	ldr	r0, [r7, #4]
 801fc2c:	f7ff ff03 	bl	801fa36 <regUpdate>
            break;
 801fc30:	e032      	b.n	801fc98 <SCPI_RegSet+0x124>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 801fc32:	8839      	ldrh	r1, [r7, #0]
 801fc34:	2320      	movs	r3, #32
 801fc36:	2203      	movs	r2, #3
 801fc38:	6878      	ldr	r0, [r7, #4]
 801fc3a:	f7ff ff36 	bl	801faaa <regUpdateSTB>
            break;
 801fc3e:	e02b      	b.n	801fc98 <SCPI_RegSet+0x124>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
 801fc40:	2102      	movs	r1, #2
 801fc42:	6878      	ldr	r0, [r7, #4]
 801fc44:	f7ff fef7 	bl	801fa36 <regUpdate>
            break;
 801fc48:	e026      	b.n	801fc98 <SCPI_RegSet+0x124>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 801fc4a:	8839      	ldrh	r1, [r7, #0]
 801fc4c:	2308      	movs	r3, #8
 801fc4e:	2208      	movs	r2, #8
 801fc50:	6878      	ldr	r0, [r7, #4]
 801fc52:	f7ff ff2a 	bl	801faaa <regUpdateSTB>
            break;
 801fc56:	e01f      	b.n	801fc98 <SCPI_RegSet+0x124>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
 801fc58:	2107      	movs	r1, #7
 801fc5a:	6878      	ldr	r0, [r7, #4]
 801fc5c:	f7ff feeb 	bl	801fa36 <regUpdate>
            break;
 801fc60:	e01a      	b.n	801fc98 <SCPI_RegSet+0x124>
        case SCPI_REG_QUESC:
            regUpdateEvent(context, old_val, val, SCPI_REG_QUES);
 801fc62:	883a      	ldrh	r2, [r7, #0]
 801fc64:	89b9      	ldrh	r1, [r7, #12]
 801fc66:	2307      	movs	r3, #7
 801fc68:	6878      	ldr	r0, [r7, #4]
 801fc6a:	f7ff fefa 	bl	801fa62 <regUpdateEvent>
            break;
 801fc6e:	e013      	b.n	801fc98 <SCPI_RegSet+0x124>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 801fc70:	8839      	ldrh	r1, [r7, #0]
 801fc72:	2380      	movs	r3, #128	; 0x80
 801fc74:	2205      	movs	r2, #5
 801fc76:	6878      	ldr	r0, [r7, #4]
 801fc78:	f7ff ff17 	bl	801faaa <regUpdateSTB>
            break;
 801fc7c:	e00c      	b.n	801fc98 <SCPI_RegSet+0x124>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
 801fc7e:	2104      	movs	r1, #4
 801fc80:	6878      	ldr	r0, [r7, #4]
 801fc82:	f7ff fed8 	bl	801fa36 <regUpdate>
            break;
 801fc86:	e007      	b.n	801fc98 <SCPI_RegSet+0x124>
        case SCPI_REG_OPERC:
            regUpdateEvent(context, old_val, val, SCPI_REG_OPER);
 801fc88:	883a      	ldrh	r2, [r7, #0]
 801fc8a:	89b9      	ldrh	r1, [r7, #12]
 801fc8c:	2304      	movs	r3, #4
 801fc8e:	6878      	ldr	r0, [r7, #4]
 801fc90:	f7ff fee7 	bl	801fa62 <regUpdateEvent>
            break;
 801fc94:	e000      	b.n	801fc98 <SCPI_RegSet+0x124>
            break;
 801fc96:	bf00      	nop
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
 801fc98:	78fa      	ldrb	r2, [r7, #3]
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	3224      	adds	r2, #36	; 0x24
 801fc9e:	8839      	ldrh	r1, [r7, #0]
 801fca0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (srq) {
 801fca4:	7bfb      	ldrb	r3, [r7, #15]
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	d00b      	beq.n	801fcc2 <SCPI_RegSet+0x14e>
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
 801fcaa:	2100      	movs	r1, #0
 801fcac:	6878      	ldr	r0, [r7, #4]
 801fcae:	f7ff ff26 	bl	801fafe <SCPI_RegGet>
 801fcb2:	4603      	mov	r3, r0
 801fcb4:	461a      	mov	r2, r3
 801fcb6:	2101      	movs	r1, #1
 801fcb8:	6878      	ldr	r0, [r7, #4]
 801fcba:	f7ff ff39 	bl	801fb30 <writeControl>
 801fcbe:	e000      	b.n	801fcc2 <SCPI_RegSet+0x14e>
        return;
 801fcc0:	bf00      	nop
    }
}
 801fcc2:	3710      	adds	r7, #16
 801fcc4:	46bd      	mov	sp, r7
 801fcc6:	bd80      	pop	{r7, pc}

0801fcc8 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 801fcc8:	b580      	push	{r7, lr}
 801fcca:	b082      	sub	sp, #8
 801fccc:	af00      	add	r7, sp, #0
 801fcce:	6078      	str	r0, [r7, #4]
 801fcd0:	460b      	mov	r3, r1
 801fcd2:	70fb      	strb	r3, [r7, #3]
 801fcd4:	4613      	mov	r3, r2
 801fcd6:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 801fcd8:	78fb      	ldrb	r3, [r7, #3]
 801fcda:	4619      	mov	r1, r3
 801fcdc:	6878      	ldr	r0, [r7, #4]
 801fcde:	f7ff ff0e 	bl	801fafe <SCPI_RegGet>
 801fce2:	4603      	mov	r3, r0
 801fce4:	461a      	mov	r2, r3
 801fce6:	883b      	ldrh	r3, [r7, #0]
 801fce8:	4313      	orrs	r3, r2
 801fcea:	b29a      	uxth	r2, r3
 801fcec:	78fb      	ldrb	r3, [r7, #3]
 801fcee:	4619      	mov	r1, r3
 801fcf0:	6878      	ldr	r0, [r7, #4]
 801fcf2:	f7ff ff3f 	bl	801fb74 <SCPI_RegSet>
}
 801fcf6:	bf00      	nop
 801fcf8:	3708      	adds	r7, #8
 801fcfa:	46bd      	mov	sp, r7
 801fcfc:	bd80      	pop	{r7, pc}

0801fcfe <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 801fcfe:	b580      	push	{r7, lr}
 801fd00:	b082      	sub	sp, #8
 801fd02:	af00      	add	r7, sp, #0
 801fd04:	6078      	str	r0, [r7, #4]
 801fd06:	460b      	mov	r3, r1
 801fd08:	70fb      	strb	r3, [r7, #3]
 801fd0a:	4613      	mov	r3, r2
 801fd0c:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 801fd0e:	78fb      	ldrb	r3, [r7, #3]
 801fd10:	4619      	mov	r1, r3
 801fd12:	6878      	ldr	r0, [r7, #4]
 801fd14:	f7ff fef3 	bl	801fafe <SCPI_RegGet>
 801fd18:	4603      	mov	r3, r0
 801fd1a:	b21a      	sxth	r2, r3
 801fd1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 801fd20:	43db      	mvns	r3, r3
 801fd22:	b21b      	sxth	r3, r3
 801fd24:	4013      	ands	r3, r2
 801fd26:	b21b      	sxth	r3, r3
 801fd28:	b29a      	uxth	r2, r3
 801fd2a:	78fb      	ldrb	r3, [r7, #3]
 801fd2c:	4619      	mov	r1, r3
 801fd2e:	6878      	ldr	r0, [r7, #4]
 801fd30:	f7ff ff20 	bl	801fb74 <SCPI_RegSet>
}
 801fd34:	bf00      	nop
 801fd36:	3708      	adds	r7, #8
 801fd38:	46bd      	mov	sp, r7
 801fd3a:	bd80      	pop	{r7, pc}

0801fd3c <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
 801fd3c:	b580      	push	{r7, lr}
 801fd3e:	b082      	sub	sp, #8
 801fd40:	af00      	add	r7, sp, #0
 801fd42:	6078      	str	r0, [r7, #4]
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 801fd44:	2200      	movs	r2, #0
 801fd46:	2102      	movs	r1, #2
 801fd48:	6878      	ldr	r0, [r7, #4]
 801fd4a:	f7ff ff13 	bl	801fb74 <SCPI_RegSet>
}
 801fd4e:	bf00      	nop
 801fd50:	3708      	adds	r7, #8
 801fd52:	46bd      	mov	sp, r7
 801fd54:	bd80      	pop	{r7, pc}

0801fd56 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 801fd56:	b580      	push	{r7, lr}
 801fd58:	b082      	sub	sp, #8
 801fd5a:	af00      	add	r7, sp, #0
 801fd5c:	6078      	str	r0, [r7, #4]
    SCPI_EventClear(context);
 801fd5e:	6878      	ldr	r0, [r7, #4]
 801fd60:	f7ff ffec 	bl	801fd3c <SCPI_EventClear>
    SCPI_ErrorClear(context);
 801fd64:	6878      	ldr	r0, [r7, #4]
 801fd66:	f7ff f8c7 	bl	801eef8 <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 801fd6a:	2200      	movs	r2, #0
 801fd6c:	2104      	movs	r1, #4
 801fd6e:	6878      	ldr	r0, [r7, #4]
 801fd70:	f7ff ff00 	bl	801fb74 <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 801fd74:	2200      	movs	r2, #0
 801fd76:	2107      	movs	r1, #7
 801fd78:	6878      	ldr	r0, [r7, #4]
 801fd7a:	f7ff fefb 	bl	801fb74 <SCPI_RegSet>
    return SCPI_RES_OK;
 801fd7e:	2301      	movs	r3, #1
}
 801fd80:	4618      	mov	r0, r3
 801fd82:	3708      	adds	r7, #8
 801fd84:	46bd      	mov	sp, r7
 801fd86:	bd80      	pop	{r7, pc}

0801fd88 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 801fd88:	b580      	push	{r7, lr}
 801fd8a:	b084      	sub	sp, #16
 801fd8c:	af00      	add	r7, sp, #0
 801fd8e:	6078      	str	r0, [r7, #4]
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 801fd90:	f107 030c 	add.w	r3, r7, #12
 801fd94:	2201      	movs	r2, #1
 801fd96:	4619      	mov	r1, r3
 801fd98:	6878      	ldr	r0, [r7, #4]
 801fd9a:	f002 f93d 	bl	8022018 <SCPI_ParamInt32>
 801fd9e:	4603      	mov	r3, r0
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	d008      	beq.n	801fdb6 <SCPI_CoreEse+0x2e>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 801fda4:	68fb      	ldr	r3, [r7, #12]
 801fda6:	b29b      	uxth	r3, r3
 801fda8:	461a      	mov	r2, r3
 801fdaa:	2103      	movs	r1, #3
 801fdac:	6878      	ldr	r0, [r7, #4]
 801fdae:	f7ff fee1 	bl	801fb74 <SCPI_RegSet>
        return SCPI_RES_OK;
 801fdb2:	2301      	movs	r3, #1
 801fdb4:	e001      	b.n	801fdba <SCPI_CoreEse+0x32>
    }
    return SCPI_RES_ERR;
 801fdb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801fdba:	4618      	mov	r0, r3
 801fdbc:	3710      	adds	r7, #16
 801fdbe:	46bd      	mov	sp, r7
 801fdc0:	bd80      	pop	{r7, pc}

0801fdc2 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 801fdc2:	b580      	push	{r7, lr}
 801fdc4:	b082      	sub	sp, #8
 801fdc6:	af00      	add	r7, sp, #0
 801fdc8:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 801fdca:	2103      	movs	r1, #3
 801fdcc:	6878      	ldr	r0, [r7, #4]
 801fdce:	f7ff fe96 	bl	801fafe <SCPI_RegGet>
 801fdd2:	4603      	mov	r3, r0
 801fdd4:	4619      	mov	r1, r3
 801fdd6:	6878      	ldr	r0, [r7, #4]
 801fdd8:	f001 fcd3 	bl	8021782 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 801fddc:	2301      	movs	r3, #1
}
 801fdde:	4618      	mov	r0, r3
 801fde0:	3708      	adds	r7, #8
 801fde2:	46bd      	mov	sp, r7
 801fde4:	bd80      	pop	{r7, pc}

0801fde6 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 801fde6:	b580      	push	{r7, lr}
 801fde8:	b082      	sub	sp, #8
 801fdea:	af00      	add	r7, sp, #0
 801fdec:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 801fdee:	2102      	movs	r1, #2
 801fdf0:	6878      	ldr	r0, [r7, #4]
 801fdf2:	f7ff fe84 	bl	801fafe <SCPI_RegGet>
 801fdf6:	4603      	mov	r3, r0
 801fdf8:	4619      	mov	r1, r3
 801fdfa:	6878      	ldr	r0, [r7, #4]
 801fdfc:	f001 fcc1 	bl	8021782 <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 801fe00:	2200      	movs	r2, #0
 801fe02:	2102      	movs	r1, #2
 801fe04:	6878      	ldr	r0, [r7, #4]
 801fe06:	f7ff feb5 	bl	801fb74 <SCPI_RegSet>
    return SCPI_RES_OK;
 801fe0a:	2301      	movs	r3, #1
}
 801fe0c:	4618      	mov	r0, r3
 801fe0e:	3708      	adds	r7, #8
 801fe10:	46bd      	mov	sp, r7
 801fe12:	bd80      	pop	{r7, pc}

0801fe14 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 801fe14:	b580      	push	{r7, lr}
 801fe16:	b082      	sub	sp, #8
 801fe18:	af00      	add	r7, sp, #0
 801fe1a:	6078      	str	r0, [r7, #4]
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 801fe1c:	2201      	movs	r2, #1
 801fe1e:	2102      	movs	r1, #2
 801fe20:	6878      	ldr	r0, [r7, #4]
 801fe22:	f7ff ff51 	bl	801fcc8 <SCPI_RegSetBits>
    return SCPI_RES_OK;
 801fe26:	2301      	movs	r3, #1
}
 801fe28:	4618      	mov	r0, r3
 801fe2a:	3708      	adds	r7, #8
 801fe2c:	46bd      	mov	sp, r7
 801fe2e:	bd80      	pop	{r7, pc}

0801fe30 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 801fe30:	b580      	push	{r7, lr}
 801fe32:	b082      	sub	sp, #8
 801fe34:	af00      	add	r7, sp, #0
 801fe36:	6078      	str	r0, [r7, #4]
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 801fe38:	2101      	movs	r1, #1
 801fe3a:	6878      	ldr	r0, [r7, #4]
 801fe3c:	f001 fca1 	bl	8021782 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 801fe40:	2301      	movs	r3, #1
}
 801fe42:	4618      	mov	r0, r3
 801fe44:	3708      	adds	r7, #8
 801fe46:	46bd      	mov	sp, r7
 801fe48:	bd80      	pop	{r7, pc}

0801fe4a <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 801fe4a:	b580      	push	{r7, lr}
 801fe4c:	b084      	sub	sp, #16
 801fe4e:	af00      	add	r7, sp, #0
 801fe50:	6078      	str	r0, [r7, #4]
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 801fe52:	f107 030c 	add.w	r3, r7, #12
 801fe56:	2201      	movs	r2, #1
 801fe58:	4619      	mov	r1, r3
 801fe5a:	6878      	ldr	r0, [r7, #4]
 801fe5c:	f002 f8dc 	bl	8022018 <SCPI_ParamInt32>
 801fe60:	4603      	mov	r3, r0
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	d008      	beq.n	801fe78 <SCPI_CoreSre+0x2e>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 801fe66:	68fb      	ldr	r3, [r7, #12]
 801fe68:	b29b      	uxth	r3, r3
 801fe6a:	461a      	mov	r2, r3
 801fe6c:	2101      	movs	r1, #1
 801fe6e:	6878      	ldr	r0, [r7, #4]
 801fe70:	f7ff fe80 	bl	801fb74 <SCPI_RegSet>
        return SCPI_RES_OK;
 801fe74:	2301      	movs	r3, #1
 801fe76:	e001      	b.n	801fe7c <SCPI_CoreSre+0x32>
    }
    return SCPI_RES_ERR;
 801fe78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801fe7c:	4618      	mov	r0, r3
 801fe7e:	3710      	adds	r7, #16
 801fe80:	46bd      	mov	sp, r7
 801fe82:	bd80      	pop	{r7, pc}

0801fe84 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 801fe84:	b580      	push	{r7, lr}
 801fe86:	b082      	sub	sp, #8
 801fe88:	af00      	add	r7, sp, #0
 801fe8a:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 801fe8c:	2101      	movs	r1, #1
 801fe8e:	6878      	ldr	r0, [r7, #4]
 801fe90:	f7ff fe35 	bl	801fafe <SCPI_RegGet>
 801fe94:	4603      	mov	r3, r0
 801fe96:	4619      	mov	r1, r3
 801fe98:	6878      	ldr	r0, [r7, #4]
 801fe9a:	f001 fc72 	bl	8021782 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 801fe9e:	2301      	movs	r3, #1
}
 801fea0:	4618      	mov	r0, r3
 801fea2:	3708      	adds	r7, #8
 801fea4:	46bd      	mov	sp, r7
 801fea6:	bd80      	pop	{r7, pc}

0801fea8 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 801fea8:	b580      	push	{r7, lr}
 801feaa:	b082      	sub	sp, #8
 801feac:	af00      	add	r7, sp, #0
 801feae:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 801feb0:	2100      	movs	r1, #0
 801feb2:	6878      	ldr	r0, [r7, #4]
 801feb4:	f7ff fe23 	bl	801fafe <SCPI_RegGet>
 801feb8:	4603      	mov	r3, r0
 801feba:	4619      	mov	r1, r3
 801febc:	6878      	ldr	r0, [r7, #4]
 801febe:	f001 fc60 	bl	8021782 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 801fec2:	2301      	movs	r3, #1
}
 801fec4:	4618      	mov	r0, r3
 801fec6:	3708      	adds	r7, #8
 801fec8:	46bd      	mov	sp, r7
 801feca:	bd80      	pop	{r7, pc}

0801fecc <SCPI_CoreTstQ>:
/**
 * *TST?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreTstQ(scpi_t * context) {
 801fecc:	b580      	push	{r7, lr}
 801fece:	b082      	sub	sp, #8
 801fed0:	af00      	add	r7, sp, #0
 801fed2:	6078      	str	r0, [r7, #4]
    (void) context;
    SCPI_ResultInt32(context, 0);
 801fed4:	2100      	movs	r1, #0
 801fed6:	6878      	ldr	r0, [r7, #4]
 801fed8:	f001 fc53 	bl	8021782 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 801fedc:	2301      	movs	r3, #1
}
 801fede:	4618      	mov	r0, r3
 801fee0:	3708      	adds	r7, #8
 801fee2:	46bd      	mov	sp, r7
 801fee4:	bd80      	pop	{r7, pc}

0801fee6 <SCPI_CoreWai>:
/**
 * *WAI
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
 801fee6:	b480      	push	{r7}
 801fee8:	b083      	sub	sp, #12
 801feea:	af00      	add	r7, sp, #0
 801feec:	6078      	str	r0, [r7, #4]
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
 801feee:	2301      	movs	r3, #1
}
 801fef0:	4618      	mov	r0, r3
 801fef2:	370c      	adds	r7, #12
 801fef4:	46bd      	mov	sp, r7
 801fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fefa:	4770      	bx	lr

0801fefc <isws>:
/**
 * Is white space
 * @param c
 * @return 
 */
static int isws(int c) {
 801fefc:	b480      	push	{r7}
 801fefe:	b083      	sub	sp, #12
 801ff00:	af00      	add	r7, sp, #0
 801ff02:	6078      	str	r0, [r7, #4]
    if ((c == ' ') || (c == '\t')) {
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	2b20      	cmp	r3, #32
 801ff08:	d002      	beq.n	801ff10 <isws+0x14>
 801ff0a:	687b      	ldr	r3, [r7, #4]
 801ff0c:	2b09      	cmp	r3, #9
 801ff0e:	d101      	bne.n	801ff14 <isws+0x18>
        return 1;
 801ff10:	2301      	movs	r3, #1
 801ff12:	e000      	b.n	801ff16 <isws+0x1a>
    }
    return 0;
 801ff14:	2300      	movs	r3, #0
}
 801ff16:	4618      	mov	r0, r3
 801ff18:	370c      	adds	r7, #12
 801ff1a:	46bd      	mov	sp, r7
 801ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff20:	4770      	bx	lr

0801ff22 <isbdigit>:
/**
 * Is binary digit
 * @param c
 * @return 
 */
static int isbdigit(int c) {
 801ff22:	b480      	push	{r7}
 801ff24:	b083      	sub	sp, #12
 801ff26:	af00      	add	r7, sp, #0
 801ff28:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1')) {
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	2b30      	cmp	r3, #48	; 0x30
 801ff2e:	d002      	beq.n	801ff36 <isbdigit+0x14>
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	2b31      	cmp	r3, #49	; 0x31
 801ff34:	d101      	bne.n	801ff3a <isbdigit+0x18>
        return 1;
 801ff36:	2301      	movs	r3, #1
 801ff38:	e000      	b.n	801ff3c <isbdigit+0x1a>
    }
    return 0;
 801ff3a:	2300      	movs	r3, #0
}
 801ff3c:	4618      	mov	r0, r3
 801ff3e:	370c      	adds	r7, #12
 801ff40:	46bd      	mov	sp, r7
 801ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff46:	4770      	bx	lr

0801ff48 <isqdigit>:
/**
 * Is hexadecimal digit
 * @param c
 * @return 
 */
static int isqdigit(int c) {
 801ff48:	b480      	push	{r7}
 801ff4a:	b083      	sub	sp, #12
 801ff4c:	af00      	add	r7, sp, #0
 801ff4e:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 801ff50:	687b      	ldr	r3, [r7, #4]
 801ff52:	2b30      	cmp	r3, #48	; 0x30
 801ff54:	d014      	beq.n	801ff80 <isqdigit+0x38>
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	2b31      	cmp	r3, #49	; 0x31
 801ff5a:	d011      	beq.n	801ff80 <isqdigit+0x38>
 801ff5c:	687b      	ldr	r3, [r7, #4]
 801ff5e:	2b32      	cmp	r3, #50	; 0x32
 801ff60:	d00e      	beq.n	801ff80 <isqdigit+0x38>
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	2b33      	cmp	r3, #51	; 0x33
 801ff66:	d00b      	beq.n	801ff80 <isqdigit+0x38>
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	2b34      	cmp	r3, #52	; 0x34
 801ff6c:	d008      	beq.n	801ff80 <isqdigit+0x38>
 801ff6e:	687b      	ldr	r3, [r7, #4]
 801ff70:	2b35      	cmp	r3, #53	; 0x35
 801ff72:	d005      	beq.n	801ff80 <isqdigit+0x38>
 801ff74:	687b      	ldr	r3, [r7, #4]
 801ff76:	2b36      	cmp	r3, #54	; 0x36
 801ff78:	d002      	beq.n	801ff80 <isqdigit+0x38>
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	2b37      	cmp	r3, #55	; 0x37
 801ff7e:	d101      	bne.n	801ff84 <isqdigit+0x3c>
        return 1;
 801ff80:	2301      	movs	r3, #1
 801ff82:	e000      	b.n	801ff86 <isqdigit+0x3e>
    }
    return 0;
 801ff84:	2300      	movs	r3, #0
}
 801ff86:	4618      	mov	r0, r3
 801ff88:	370c      	adds	r7, #12
 801ff8a:	46bd      	mov	sp, r7
 801ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff90:	4770      	bx	lr

0801ff92 <iseos>:
/**
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
 801ff92:	b480      	push	{r7}
 801ff94:	b083      	sub	sp, #12
 801ff96:	af00      	add	r7, sp, #0
 801ff98:	6078      	str	r0, [r7, #4]
    if ((state->buffer + state->len) <= (state->pos)) {
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	681b      	ldr	r3, [r3, #0]
 801ff9e:	687a      	ldr	r2, [r7, #4]
 801ffa0:	6892      	ldr	r2, [r2, #8]
 801ffa2:	441a      	add	r2, r3
 801ffa4:	687b      	ldr	r3, [r7, #4]
 801ffa6:	685b      	ldr	r3, [r3, #4]
 801ffa8:	429a      	cmp	r2, r3
 801ffaa:	d801      	bhi.n	801ffb0 <iseos+0x1e>
        return 1;
 801ffac:	2301      	movs	r3, #1
 801ffae:	e000      	b.n	801ffb2 <iseos+0x20>
    } else {
        return 0;
 801ffb0:	2300      	movs	r3, #0
    }
}
 801ffb2:	4618      	mov	r0, r3
 801ffb4:	370c      	adds	r7, #12
 801ffb6:	46bd      	mov	sp, r7
 801ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffbc:	4770      	bx	lr

0801ffbe <scpiLex_IsEos>:
/**
 * Private export of iseos
 * @param state
 * @return 
 */
int scpiLex_IsEos(lex_state_t * state) {
 801ffbe:	b580      	push	{r7, lr}
 801ffc0:	b082      	sub	sp, #8
 801ffc2:	af00      	add	r7, sp, #0
 801ffc4:	6078      	str	r0, [r7, #4]
    return iseos(state);
 801ffc6:	6878      	ldr	r0, [r7, #4]
 801ffc8:	f7ff ffe3 	bl	801ff92 <iseos>
 801ffcc:	4603      	mov	r3, r0
}
 801ffce:	4618      	mov	r0, r3
 801ffd0:	3708      	adds	r7, #8
 801ffd2:	46bd      	mov	sp, r7
 801ffd4:	bd80      	pop	{r7, pc}

0801ffd6 <ischr>:
 * Test current character
 * @param state
 * @param chr
 * @return 
 */
static int ischr(lex_state_t * state, char chr) {
 801ffd6:	b480      	push	{r7}
 801ffd8:	b083      	sub	sp, #12
 801ffda:	af00      	add	r7, sp, #0
 801ffdc:	6078      	str	r0, [r7, #4]
 801ffde:	460b      	mov	r3, r1
 801ffe0:	70fb      	strb	r3, [r7, #3]
    return (state->pos[0] == chr);
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	685b      	ldr	r3, [r3, #4]
 801ffe6:	781b      	ldrb	r3, [r3, #0]
 801ffe8:	78fa      	ldrb	r2, [r7, #3]
 801ffea:	429a      	cmp	r2, r3
 801ffec:	bf0c      	ite	eq
 801ffee:	2301      	moveq	r3, #1
 801fff0:	2300      	movne	r3, #0
 801fff2:	b2db      	uxtb	r3, r3
}
 801fff4:	4618      	mov	r0, r3
 801fff6:	370c      	adds	r7, #12
 801fff8:	46bd      	mov	sp, r7
 801fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fffe:	4770      	bx	lr

08020000 <isplusmn>:
/**
 * Is plus or minus
 * @param c
 * @return 
 */
static int isplusmn(int c) {
 8020000:	b480      	push	{r7}
 8020002:	b083      	sub	sp, #12
 8020004:	af00      	add	r7, sp, #0
 8020006:	6078      	str	r0, [r7, #4]
    return c == '+' || c == '-';
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	2b2b      	cmp	r3, #43	; 0x2b
 802000c:	d002      	beq.n	8020014 <isplusmn+0x14>
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	2b2d      	cmp	r3, #45	; 0x2d
 8020012:	d101      	bne.n	8020018 <isplusmn+0x18>
 8020014:	2301      	movs	r3, #1
 8020016:	e000      	b.n	802001a <isplusmn+0x1a>
 8020018:	2300      	movs	r3, #0
}
 802001a:	4618      	mov	r0, r3
 802001c:	370c      	adds	r7, #12
 802001e:	46bd      	mov	sp, r7
 8020020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020024:	4770      	bx	lr

08020026 <isH>:
/**
 * Is letter H
 * @param c
 * @return 
 */
static int isH(int c) {
 8020026:	b480      	push	{r7}
 8020028:	b083      	sub	sp, #12
 802002a:	af00      	add	r7, sp, #0
 802002c:	6078      	str	r0, [r7, #4]
    return c == 'h' || c == 'H';
 802002e:	687b      	ldr	r3, [r7, #4]
 8020030:	2b68      	cmp	r3, #104	; 0x68
 8020032:	d002      	beq.n	802003a <isH+0x14>
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	2b48      	cmp	r3, #72	; 0x48
 8020038:	d101      	bne.n	802003e <isH+0x18>
 802003a:	2301      	movs	r3, #1
 802003c:	e000      	b.n	8020040 <isH+0x1a>
 802003e:	2300      	movs	r3, #0
}
 8020040:	4618      	mov	r0, r3
 8020042:	370c      	adds	r7, #12
 8020044:	46bd      	mov	sp, r7
 8020046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802004a:	4770      	bx	lr

0802004c <isB>:
/**
 * Is letter B
 * @param c
 * @return 
 */
static int isB(int c) {
 802004c:	b480      	push	{r7}
 802004e:	b083      	sub	sp, #12
 8020050:	af00      	add	r7, sp, #0
 8020052:	6078      	str	r0, [r7, #4]
    return c == 'b' || c == 'B';
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	2b62      	cmp	r3, #98	; 0x62
 8020058:	d002      	beq.n	8020060 <isB+0x14>
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	2b42      	cmp	r3, #66	; 0x42
 802005e:	d101      	bne.n	8020064 <isB+0x18>
 8020060:	2301      	movs	r3, #1
 8020062:	e000      	b.n	8020066 <isB+0x1a>
 8020064:	2300      	movs	r3, #0
}
 8020066:	4618      	mov	r0, r3
 8020068:	370c      	adds	r7, #12
 802006a:	46bd      	mov	sp, r7
 802006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020070:	4770      	bx	lr

08020072 <isQ>:
/**
 * Is letter Q
 * @param c
 * @return 
 */
static int isQ(int c) {
 8020072:	b480      	push	{r7}
 8020074:	b083      	sub	sp, #12
 8020076:	af00      	add	r7, sp, #0
 8020078:	6078      	str	r0, [r7, #4]
    return c == 'q' || c == 'Q';
 802007a:	687b      	ldr	r3, [r7, #4]
 802007c:	2b71      	cmp	r3, #113	; 0x71
 802007e:	d002      	beq.n	8020086 <isQ+0x14>
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	2b51      	cmp	r3, #81	; 0x51
 8020084:	d101      	bne.n	802008a <isQ+0x18>
 8020086:	2301      	movs	r3, #1
 8020088:	e000      	b.n	802008c <isQ+0x1a>
 802008a:	2300      	movs	r3, #0
}
 802008c:	4618      	mov	r0, r3
 802008e:	370c      	adds	r7, #12
 8020090:	46bd      	mov	sp, r7
 8020092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020096:	4770      	bx	lr

08020098 <isE>:
/**
 * Is letter E
 * @param c
 * @return 
 */
static int isE(int c) {
 8020098:	b480      	push	{r7}
 802009a:	b083      	sub	sp, #12
 802009c:	af00      	add	r7, sp, #0
 802009e:	6078      	str	r0, [r7, #4]
    return c == 'e' || c == 'E';
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	2b65      	cmp	r3, #101	; 0x65
 80200a4:	d002      	beq.n	80200ac <isE+0x14>
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	2b45      	cmp	r3, #69	; 0x45
 80200aa:	d101      	bne.n	80200b0 <isE+0x18>
 80200ac:	2301      	movs	r3, #1
 80200ae:	e000      	b.n	80200b2 <isE+0x1a>
 80200b0:	2300      	movs	r3, #0
}
 80200b2:	4618      	mov	r0, r3
 80200b4:	370c      	adds	r7, #12
 80200b6:	46bd      	mov	sp, r7
 80200b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200bc:	4770      	bx	lr

080200be <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 80200be:	b580      	push	{r7, lr}
 80200c0:	b084      	sub	sp, #16
 80200c2:	af00      	add	r7, sp, #0
 80200c4:	6078      	str	r0, [r7, #4]
    int someSpace = 0;
 80200c6:	2300      	movs	r3, #0
 80200c8:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 80200ca:	e007      	b.n	80200dc <skipWs+0x1e>
        state->pos++;
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	685b      	ldr	r3, [r3, #4]
 80200d0:	1c5a      	adds	r2, r3, #1
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	605a      	str	r2, [r3, #4]
        someSpace++;
 80200d6:	68fb      	ldr	r3, [r7, #12]
 80200d8:	3301      	adds	r3, #1
 80200da:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 80200dc:	6878      	ldr	r0, [r7, #4]
 80200de:	f7ff ff58 	bl	801ff92 <iseos>
 80200e2:	4603      	mov	r3, r0
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	d108      	bne.n	80200fa <skipWs+0x3c>
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	685b      	ldr	r3, [r3, #4]
 80200ec:	781b      	ldrb	r3, [r3, #0]
 80200ee:	4618      	mov	r0, r3
 80200f0:	f7ff ff04 	bl	801fefc <isws>
 80200f4:	4603      	mov	r3, r0
 80200f6:	2b00      	cmp	r3, #0
 80200f8:	d1e8      	bne.n	80200cc <skipWs+0xe>
    }

    return someSpace;
 80200fa:	68fb      	ldr	r3, [r7, #12]
}
 80200fc:	4618      	mov	r0, r3
 80200fe:	3710      	adds	r7, #16
 8020100:	46bd      	mov	sp, r7
 8020102:	bd80      	pop	{r7, pc}

08020104 <skipDigit>:
/**
 * Skip decimal digit
 * @param state
 * @return 
 */
static int skipDigit(lex_state_t * state) {
 8020104:	b580      	push	{r7, lr}
 8020106:	b082      	sub	sp, #8
 8020108:	af00      	add	r7, sp, #0
 802010a:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 802010c:	6878      	ldr	r0, [r7, #4]
 802010e:	f7ff ff40 	bl	801ff92 <iseos>
 8020112:	4603      	mov	r3, r0
 8020114:	2b00      	cmp	r3, #0
 8020116:	d111      	bne.n	802013c <skipDigit+0x38>
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	685b      	ldr	r3, [r3, #4]
 802011c:	781b      	ldrb	r3, [r3, #0]
 802011e:	3301      	adds	r3, #1
 8020120:	4a09      	ldr	r2, [pc, #36]	; (8020148 <skipDigit+0x44>)
 8020122:	4413      	add	r3, r2
 8020124:	781b      	ldrb	r3, [r3, #0]
 8020126:	f003 0304 	and.w	r3, r3, #4
 802012a:	2b00      	cmp	r3, #0
 802012c:	d006      	beq.n	802013c <skipDigit+0x38>
        state->pos++;
 802012e:	687b      	ldr	r3, [r7, #4]
 8020130:	685b      	ldr	r3, [r3, #4]
 8020132:	1c5a      	adds	r2, r3, #1
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8020138:	2301      	movs	r3, #1
 802013a:	e000      	b.n	802013e <skipDigit+0x3a>
    } else {
        return SKIP_NONE;
 802013c:	2300      	movs	r3, #0
    }
}
 802013e:	4618      	mov	r0, r3
 8020140:	3708      	adds	r7, #8
 8020142:	46bd      	mov	sp, r7
 8020144:	bd80      	pop	{r7, pc}
 8020146:	bf00      	nop
 8020148:	0802d778 	.word	0x0802d778

0802014c <skipNumbers>:
/**
 * Skip multiple decimal digits
 * @param state
 * @return 
 */
static int skipNumbers(lex_state_t * state) {
 802014c:	b580      	push	{r7, lr}
 802014e:	b084      	sub	sp, #16
 8020150:	af00      	add	r7, sp, #0
 8020152:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8020154:	2300      	movs	r3, #0
 8020156:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8020158:	e007      	b.n	802016a <skipNumbers+0x1e>
        state->pos++;
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	685b      	ldr	r3, [r3, #4]
 802015e:	1c5a      	adds	r2, r3, #1
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8020164:	68fb      	ldr	r3, [r7, #12]
 8020166:	3301      	adds	r3, #1
 8020168:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 802016a:	6878      	ldr	r0, [r7, #4]
 802016c:	f7ff ff11 	bl	801ff92 <iseos>
 8020170:	4603      	mov	r3, r0
 8020172:	2b00      	cmp	r3, #0
 8020174:	d10a      	bne.n	802018c <skipNumbers+0x40>
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	685b      	ldr	r3, [r3, #4]
 802017a:	781b      	ldrb	r3, [r3, #0]
 802017c:	3301      	adds	r3, #1
 802017e:	4a06      	ldr	r2, [pc, #24]	; (8020198 <skipNumbers+0x4c>)
 8020180:	4413      	add	r3, r2
 8020182:	781b      	ldrb	r3, [r3, #0]
 8020184:	f003 0304 	and.w	r3, r3, #4
 8020188:	2b00      	cmp	r3, #0
 802018a:	d1e6      	bne.n	802015a <skipNumbers+0xe>
    }
    return someNumbers;
 802018c:	68fb      	ldr	r3, [r7, #12]
}
 802018e:	4618      	mov	r0, r3
 8020190:	3710      	adds	r7, #16
 8020192:	46bd      	mov	sp, r7
 8020194:	bd80      	pop	{r7, pc}
 8020196:	bf00      	nop
 8020198:	0802d778 	.word	0x0802d778

0802019c <skipPlusmn>:
/**
 * Skip plus or minus
 * @param state
 * @return 
 */
static int skipPlusmn(lex_state_t * state) {
 802019c:	b580      	push	{r7, lr}
 802019e:	b082      	sub	sp, #8
 80201a0:	af00      	add	r7, sp, #0
 80201a2:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isplusmn(state->pos[0])) {
 80201a4:	6878      	ldr	r0, [r7, #4]
 80201a6:	f7ff fef4 	bl	801ff92 <iseos>
 80201aa:	4603      	mov	r3, r0
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	d10f      	bne.n	80201d0 <skipPlusmn+0x34>
 80201b0:	687b      	ldr	r3, [r7, #4]
 80201b2:	685b      	ldr	r3, [r3, #4]
 80201b4:	781b      	ldrb	r3, [r3, #0]
 80201b6:	4618      	mov	r0, r3
 80201b8:	f7ff ff22 	bl	8020000 <isplusmn>
 80201bc:	4603      	mov	r3, r0
 80201be:	2b00      	cmp	r3, #0
 80201c0:	d006      	beq.n	80201d0 <skipPlusmn+0x34>
        state->pos++;
 80201c2:	687b      	ldr	r3, [r7, #4]
 80201c4:	685b      	ldr	r3, [r3, #4]
 80201c6:	1c5a      	adds	r2, r3, #1
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 80201cc:	2301      	movs	r3, #1
 80201ce:	e000      	b.n	80201d2 <skipPlusmn+0x36>
    } else {
        return SKIP_NONE;
 80201d0:	2300      	movs	r3, #0
    }
}
 80201d2:	4618      	mov	r0, r3
 80201d4:	3708      	adds	r7, #8
 80201d6:	46bd      	mov	sp, r7
 80201d8:	bd80      	pop	{r7, pc}
	...

080201dc <skipAlpha>:
/**
 * Skip any character from 'a'-'Z'
 * @param state
 * @return 
 */
static int skipAlpha(lex_state_t * state) {
 80201dc:	b580      	push	{r7, lr}
 80201de:	b084      	sub	sp, #16
 80201e0:	af00      	add	r7, sp, #0
 80201e2:	6078      	str	r0, [r7, #4]
    int someLetters = 0;
 80201e4:	2300      	movs	r3, #0
 80201e6:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80201e8:	e007      	b.n	80201fa <skipAlpha+0x1e>
        state->pos++;
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	685b      	ldr	r3, [r3, #4]
 80201ee:	1c5a      	adds	r2, r3, #1
 80201f0:	687b      	ldr	r3, [r7, #4]
 80201f2:	605a      	str	r2, [r3, #4]
        someLetters++;
 80201f4:	68fb      	ldr	r3, [r7, #12]
 80201f6:	3301      	adds	r3, #1
 80201f8:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80201fa:	6878      	ldr	r0, [r7, #4]
 80201fc:	f7ff fec9 	bl	801ff92 <iseos>
 8020200:	4603      	mov	r3, r0
 8020202:	2b00      	cmp	r3, #0
 8020204:	d10a      	bne.n	802021c <skipAlpha+0x40>
 8020206:	687b      	ldr	r3, [r7, #4]
 8020208:	685b      	ldr	r3, [r3, #4]
 802020a:	781b      	ldrb	r3, [r3, #0]
 802020c:	3301      	adds	r3, #1
 802020e:	4a06      	ldr	r2, [pc, #24]	; (8020228 <skipAlpha+0x4c>)
 8020210:	4413      	add	r3, r2
 8020212:	781b      	ldrb	r3, [r3, #0]
 8020214:	f003 0303 	and.w	r3, r3, #3
 8020218:	2b00      	cmp	r3, #0
 802021a:	d1e6      	bne.n	80201ea <skipAlpha+0xe>
    }
    return someLetters;
 802021c:	68fb      	ldr	r3, [r7, #12]
}
 802021e:	4618      	mov	r0, r3
 8020220:	3710      	adds	r7, #16
 8020222:	46bd      	mov	sp, r7
 8020224:	bd80      	pop	{r7, pc}
 8020226:	bf00      	nop
 8020228:	0802d778 	.word	0x0802d778

0802022c <skipChr>:
 * Skip exact character chr or nothing
 * @param state
 * @param chr
 * @return 
 */
static int skipChr(lex_state_t * state, char chr) {
 802022c:	b580      	push	{r7, lr}
 802022e:	b082      	sub	sp, #8
 8020230:	af00      	add	r7, sp, #0
 8020232:	6078      	str	r0, [r7, #4]
 8020234:	460b      	mov	r3, r1
 8020236:	70fb      	strb	r3, [r7, #3]
    if (!iseos(state) && ischr(state, chr)) {
 8020238:	6878      	ldr	r0, [r7, #4]
 802023a:	f7ff feaa 	bl	801ff92 <iseos>
 802023e:	4603      	mov	r3, r0
 8020240:	2b00      	cmp	r3, #0
 8020242:	d10e      	bne.n	8020262 <skipChr+0x36>
 8020244:	78fb      	ldrb	r3, [r7, #3]
 8020246:	4619      	mov	r1, r3
 8020248:	6878      	ldr	r0, [r7, #4]
 802024a:	f7ff fec4 	bl	801ffd6 <ischr>
 802024e:	4603      	mov	r3, r0
 8020250:	2b00      	cmp	r3, #0
 8020252:	d006      	beq.n	8020262 <skipChr+0x36>
        state->pos++;
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	685b      	ldr	r3, [r3, #4]
 8020258:	1c5a      	adds	r2, r3, #1
 802025a:	687b      	ldr	r3, [r7, #4]
 802025c:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 802025e:	2301      	movs	r3, #1
 8020260:	e000      	b.n	8020264 <skipChr+0x38>
    } else {
        return SKIP_NONE;
 8020262:	2300      	movs	r3, #0
    }
}
 8020264:	4618      	mov	r0, r3
 8020266:	3708      	adds	r7, #8
 8020268:	46bd      	mov	sp, r7
 802026a:	bd80      	pop	{r7, pc}

0802026c <skipSlashDot>:
/**
 * Skip slash or dot
 * @param state
 * @return 
 */
static int skipSlashDot(lex_state_t * state) {
 802026c:	b590      	push	{r4, r7, lr}
 802026e:	b083      	sub	sp, #12
 8020270:	af00      	add	r7, sp, #0
 8020272:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 8020274:	6878      	ldr	r0, [r7, #4]
 8020276:	f7ff fe8c 	bl	801ff92 <iseos>
 802027a:	4603      	mov	r3, r0
 802027c:	2b00      	cmp	r3, #0
 802027e:	d113      	bne.n	80202a8 <skipSlashDot+0x3c>
 8020280:	212f      	movs	r1, #47	; 0x2f
 8020282:	6878      	ldr	r0, [r7, #4]
 8020284:	f7ff fea7 	bl	801ffd6 <ischr>
 8020288:	4604      	mov	r4, r0
 802028a:	212e      	movs	r1, #46	; 0x2e
 802028c:	6878      	ldr	r0, [r7, #4]
 802028e:	f7ff fea2 	bl	801ffd6 <ischr>
 8020292:	4603      	mov	r3, r0
 8020294:	4323      	orrs	r3, r4
 8020296:	2b00      	cmp	r3, #0
 8020298:	d006      	beq.n	80202a8 <skipSlashDot+0x3c>
        state->pos++;
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	685b      	ldr	r3, [r3, #4]
 802029e:	1c5a      	adds	r2, r3, #1
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 80202a4:	2301      	movs	r3, #1
 80202a6:	e000      	b.n	80202aa <skipSlashDot+0x3e>
    } else {
        return SKIP_NONE;
 80202a8:	2300      	movs	r3, #0
    }
}
 80202aa:	4618      	mov	r0, r3
 80202ac:	370c      	adds	r7, #12
 80202ae:	46bd      	mov	sp, r7
 80202b0:	bd90      	pop	{r4, r7, pc}

080202b2 <skipStar>:
/**
 * Skip star
 * @param state
 * @return 
 */
static int skipStar(lex_state_t * state) {
 80202b2:	b580      	push	{r7, lr}
 80202b4:	b082      	sub	sp, #8
 80202b6:	af00      	add	r7, sp, #0
 80202b8:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, '*')) {
 80202ba:	6878      	ldr	r0, [r7, #4]
 80202bc:	f7ff fe69 	bl	801ff92 <iseos>
 80202c0:	4603      	mov	r3, r0
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	d10d      	bne.n	80202e2 <skipStar+0x30>
 80202c6:	212a      	movs	r1, #42	; 0x2a
 80202c8:	6878      	ldr	r0, [r7, #4]
 80202ca:	f7ff fe84 	bl	801ffd6 <ischr>
 80202ce:	4603      	mov	r3, r0
 80202d0:	2b00      	cmp	r3, #0
 80202d2:	d006      	beq.n	80202e2 <skipStar+0x30>
        state->pos++;
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	685b      	ldr	r3, [r3, #4]
 80202d8:	1c5a      	adds	r2, r3, #1
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 80202de:	2301      	movs	r3, #1
 80202e0:	e000      	b.n	80202e4 <skipStar+0x32>
    } else {
        return SKIP_NONE;
 80202e2:	2300      	movs	r3, #0
    }
}
 80202e4:	4618      	mov	r0, r3
 80202e6:	3708      	adds	r7, #8
 80202e8:	46bd      	mov	sp, r7
 80202ea:	bd80      	pop	{r7, pc}

080202ec <skipColon>:
/**
 * Skip colon
 * @param state
 * @return 
 */
static int skipColon(lex_state_t * state) {
 80202ec:	b580      	push	{r7, lr}
 80202ee:	b082      	sub	sp, #8
 80202f0:	af00      	add	r7, sp, #0
 80202f2:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, ':')) {
 80202f4:	6878      	ldr	r0, [r7, #4]
 80202f6:	f7ff fe4c 	bl	801ff92 <iseos>
 80202fa:	4603      	mov	r3, r0
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	d10d      	bne.n	802031c <skipColon+0x30>
 8020300:	213a      	movs	r1, #58	; 0x3a
 8020302:	6878      	ldr	r0, [r7, #4]
 8020304:	f7ff fe67 	bl	801ffd6 <ischr>
 8020308:	4603      	mov	r3, r0
 802030a:	2b00      	cmp	r3, #0
 802030c:	d006      	beq.n	802031c <skipColon+0x30>
        state->pos++;
 802030e:	687b      	ldr	r3, [r7, #4]
 8020310:	685b      	ldr	r3, [r3, #4]
 8020312:	1c5a      	adds	r2, r3, #1
 8020314:	687b      	ldr	r3, [r7, #4]
 8020316:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8020318:	2301      	movs	r3, #1
 802031a:	e000      	b.n	802031e <skipColon+0x32>
    } else {
        return SKIP_NONE;
 802031c:	2300      	movs	r3, #0
    }
}
 802031e:	4618      	mov	r0, r3
 8020320:	3708      	adds	r7, #8
 8020322:	46bd      	mov	sp, r7
 8020324:	bd80      	pop	{r7, pc}
	...

08020328 <skipProgramMnemonic>:
/**
 * Skip program mnemonic [a-z][a-z0-9_]*
 * @param state
 * @return 
 */
static int skipProgramMnemonic(lex_state_t * state) {
 8020328:	b580      	push	{r7, lr}
 802032a:	b084      	sub	sp, #16
 802032c:	af00      	add	r7, sp, #0
 802032e:	6078      	str	r0, [r7, #4]
    const char * startPos = state->pos;
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	685b      	ldr	r3, [r3, #4]
 8020334:	60fb      	str	r3, [r7, #12]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8020336:	6878      	ldr	r0, [r7, #4]
 8020338:	f7ff fe2b 	bl	801ff92 <iseos>
 802033c:	4603      	mov	r3, r0
 802033e:	2b00      	cmp	r3, #0
 8020340:	d12d      	bne.n	802039e <skipProgramMnemonic+0x76>
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	685b      	ldr	r3, [r3, #4]
 8020346:	781b      	ldrb	r3, [r3, #0]
 8020348:	3301      	adds	r3, #1
 802034a:	4a1e      	ldr	r2, [pc, #120]	; (80203c4 <skipProgramMnemonic+0x9c>)
 802034c:	4413      	add	r3, r2
 802034e:	781b      	ldrb	r3, [r3, #0]
 8020350:	f003 0303 	and.w	r3, r3, #3
 8020354:	2b00      	cmp	r3, #0
 8020356:	d022      	beq.n	802039e <skipProgramMnemonic+0x76>
        state->pos++;
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	685b      	ldr	r3, [r3, #4]
 802035c:	1c5a      	adds	r2, r3, #1
 802035e:	687b      	ldr	r3, [r7, #4]
 8020360:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8020362:	e004      	b.n	802036e <skipProgramMnemonic+0x46>
            state->pos++;
 8020364:	687b      	ldr	r3, [r7, #4]
 8020366:	685b      	ldr	r3, [r3, #4]
 8020368:	1c5a      	adds	r2, r3, #1
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 802036e:	6878      	ldr	r0, [r7, #4]
 8020370:	f7ff fe0f 	bl	801ff92 <iseos>
 8020374:	4603      	mov	r3, r0
 8020376:	2b00      	cmp	r3, #0
 8020378:	d111      	bne.n	802039e <skipProgramMnemonic+0x76>
 802037a:	687b      	ldr	r3, [r7, #4]
 802037c:	685b      	ldr	r3, [r3, #4]
 802037e:	781b      	ldrb	r3, [r3, #0]
 8020380:	3301      	adds	r3, #1
 8020382:	4a10      	ldr	r2, [pc, #64]	; (80203c4 <skipProgramMnemonic+0x9c>)
 8020384:	4413      	add	r3, r2
 8020386:	781b      	ldrb	r3, [r3, #0]
 8020388:	f003 0307 	and.w	r3, r3, #7
 802038c:	2b00      	cmp	r3, #0
 802038e:	d1e9      	bne.n	8020364 <skipProgramMnemonic+0x3c>
 8020390:	215f      	movs	r1, #95	; 0x5f
 8020392:	6878      	ldr	r0, [r7, #4]
 8020394:	f7ff fe1f 	bl	801ffd6 <ischr>
 8020398:	4603      	mov	r3, r0
 802039a:	2b00      	cmp	r3, #0
 802039c:	d1e2      	bne.n	8020364 <skipProgramMnemonic+0x3c>
        }
    }

    if (iseos(state)) {
 802039e:	6878      	ldr	r0, [r7, #4]
 80203a0:	f7ff fdf7 	bl	801ff92 <iseos>
 80203a4:	4603      	mov	r3, r0
 80203a6:	2b00      	cmp	r3, #0
 80203a8:	d004      	beq.n	80203b4 <skipProgramMnemonic+0x8c>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	685b      	ldr	r3, [r3, #4]
 80203ae:	68fa      	ldr	r2, [r7, #12]
 80203b0:	1ad3      	subs	r3, r2, r3
 80203b2:	e003      	b.n	80203bc <skipProgramMnemonic+0x94>
    } else {
        return (state->pos - startPos) * SKIP_OK;
 80203b4:	687b      	ldr	r3, [r7, #4]
 80203b6:	685a      	ldr	r2, [r3, #4]
 80203b8:	68fb      	ldr	r3, [r7, #12]
 80203ba:	1ad3      	subs	r3, r2, r3
    }
}
 80203bc:	4618      	mov	r0, r3
 80203be:	3710      	adds	r7, #16
 80203c0:	46bd      	mov	sp, r7
 80203c2:	bd80      	pop	{r7, pc}
 80203c4:	0802d778 	.word	0x0802d778

080203c8 <scpiLex_WhiteSpace>:
 * Detect token white space
 * @param state
 * @param token
 * @return 
 */
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 80203c8:	b580      	push	{r7, lr}
 80203ca:	b082      	sub	sp, #8
 80203cc:	af00      	add	r7, sp, #0
 80203ce:	6078      	str	r0, [r7, #4]
 80203d0:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80203d2:	687b      	ldr	r3, [r7, #4]
 80203d4:	685a      	ldr	r2, [r3, #4]
 80203d6:	683b      	ldr	r3, [r7, #0]
 80203d8:	605a      	str	r2, [r3, #4]

    skipWs(state);
 80203da:	6878      	ldr	r0, [r7, #4]
 80203dc:	f7ff fe6f 	bl	80200be <skipWs>

    token->len = state->pos - token->ptr;
 80203e0:	687b      	ldr	r3, [r7, #4]
 80203e2:	685a      	ldr	r2, [r3, #4]
 80203e4:	683b      	ldr	r3, [r7, #0]
 80203e6:	685b      	ldr	r3, [r3, #4]
 80203e8:	1ad2      	subs	r2, r2, r3
 80203ea:	683b      	ldr	r3, [r7, #0]
 80203ec:	609a      	str	r2, [r3, #8]

    if (token->len > 0) {
 80203ee:	683b      	ldr	r3, [r7, #0]
 80203f0:	689b      	ldr	r3, [r3, #8]
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	dd03      	ble.n	80203fe <scpiLex_WhiteSpace+0x36>
        token->type = SCPI_TOKEN_WS;
 80203f6:	683b      	ldr	r3, [r7, #0]
 80203f8:	2217      	movs	r2, #23
 80203fa:	701a      	strb	r2, [r3, #0]
 80203fc:	e002      	b.n	8020404 <scpiLex_WhiteSpace+0x3c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 80203fe:	683b      	ldr	r3, [r7, #0]
 8020400:	221a      	movs	r2, #26
 8020402:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8020404:	683b      	ldr	r3, [r7, #0]
 8020406:	689b      	ldr	r3, [r3, #8]
}
 8020408:	4618      	mov	r0, r3
 802040a:	3708      	adds	r7, #8
 802040c:	46bd      	mov	sp, r7
 802040e:	bd80      	pop	{r7, pc}

08020410 <skipCommonProgramHeader>:
/**
 * Skip command program header \*<PROGRAM MNEMONIC>
 * @param state
 * @return 
 */
static int skipCommonProgramHeader(lex_state_t * state) {
 8020410:	b580      	push	{r7, lr}
 8020412:	b084      	sub	sp, #16
 8020414:	af00      	add	r7, sp, #0
 8020416:	6078      	str	r0, [r7, #4]
    int res;
    if (skipStar(state)) {
 8020418:	6878      	ldr	r0, [r7, #4]
 802041a:	f7ff ff4a 	bl	80202b2 <skipStar>
 802041e:	4603      	mov	r3, r0
 8020420:	2b00      	cmp	r3, #0
 8020422:	d01c      	beq.n	802045e <skipCommonProgramHeader+0x4e>
        res = skipProgramMnemonic(state);
 8020424:	6878      	ldr	r0, [r7, #4]
 8020426:	f7ff ff7f 	bl	8020328 <skipProgramMnemonic>
 802042a:	60f8      	str	r0, [r7, #12]
        if (res == SKIP_NONE && iseos(state)) {
 802042c:	68fb      	ldr	r3, [r7, #12]
 802042e:	2b00      	cmp	r3, #0
 8020430:	d108      	bne.n	8020444 <skipCommonProgramHeader+0x34>
 8020432:	6878      	ldr	r0, [r7, #4]
 8020434:	f7ff fdad 	bl	801ff92 <iseos>
 8020438:	4603      	mov	r3, r0
 802043a:	2b00      	cmp	r3, #0
 802043c:	d002      	beq.n	8020444 <skipCommonProgramHeader+0x34>
            return SKIP_INCOMPLETE;
 802043e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020442:	e00d      	b.n	8020460 <skipCommonProgramHeader+0x50>
        } else if (res <= SKIP_INCOMPLETE) {
 8020444:	68fb      	ldr	r3, [r7, #12]
 8020446:	2b00      	cmp	r3, #0
 8020448:	da01      	bge.n	802044e <skipCommonProgramHeader+0x3e>
            return SKIP_OK;
 802044a:	2301      	movs	r3, #1
 802044c:	e008      	b.n	8020460 <skipCommonProgramHeader+0x50>
        } else if (res >= SKIP_OK) {
 802044e:	68fb      	ldr	r3, [r7, #12]
 8020450:	2b00      	cmp	r3, #0
 8020452:	dd01      	ble.n	8020458 <skipCommonProgramHeader+0x48>
            return SKIP_OK;
 8020454:	2301      	movs	r3, #1
 8020456:	e003      	b.n	8020460 <skipCommonProgramHeader+0x50>
        } else {
            return SKIP_INCOMPLETE;
 8020458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802045c:	e000      	b.n	8020460 <skipCommonProgramHeader+0x50>
        }
    }
    return SKIP_NONE;
 802045e:	2300      	movs	r3, #0
}
 8020460:	4618      	mov	r0, r3
 8020462:	3710      	adds	r7, #16
 8020464:	46bd      	mov	sp, r7
 8020466:	bd80      	pop	{r7, pc}

08020468 <skipCompoundProgramHeader>:
/**
 * Skip compound program header :<PROGRAM MNEMONIC>:<PROGRAM MNEMONIC>...
 * @param state
 * @return 
 */
static int skipCompoundProgramHeader(lex_state_t * state) {
 8020468:	b580      	push	{r7, lr}
 802046a:	b084      	sub	sp, #16
 802046c:	af00      	add	r7, sp, #0
 802046e:	6078      	str	r0, [r7, #4]
    int res;
    int firstColon = skipColon(state);
 8020470:	6878      	ldr	r0, [r7, #4]
 8020472:	f7ff ff3b 	bl	80202ec <skipColon>
 8020476:	60f8      	str	r0, [r7, #12]

    res = skipProgramMnemonic(state);
 8020478:	6878      	ldr	r0, [r7, #4]
 802047a:	f7ff ff55 	bl	8020328 <skipProgramMnemonic>
 802047e:	60b8      	str	r0, [r7, #8]
    if (res >= SKIP_OK) {
 8020480:	68bb      	ldr	r3, [r7, #8]
 8020482:	2b00      	cmp	r3, #0
 8020484:	dd17      	ble.n	80204b6 <skipCompoundProgramHeader+0x4e>
        while (skipColon(state)) {
 8020486:	e00e      	b.n	80204a6 <skipCompoundProgramHeader+0x3e>
            res = skipProgramMnemonic(state);
 8020488:	6878      	ldr	r0, [r7, #4]
 802048a:	f7ff ff4d 	bl	8020328 <skipProgramMnemonic>
 802048e:	60b8      	str	r0, [r7, #8]
            if (res <= SKIP_INCOMPLETE) {
 8020490:	68bb      	ldr	r3, [r7, #8]
 8020492:	2b00      	cmp	r3, #0
 8020494:	da01      	bge.n	802049a <skipCompoundProgramHeader+0x32>
                return SKIP_OK;
 8020496:	2301      	movs	r3, #1
 8020498:	e019      	b.n	80204ce <skipCompoundProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 802049a:	68bb      	ldr	r3, [r7, #8]
 802049c:	2b00      	cmp	r3, #0
 802049e:	d102      	bne.n	80204a6 <skipCompoundProgramHeader+0x3e>
                return SKIP_INCOMPLETE;
 80204a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80204a4:	e013      	b.n	80204ce <skipCompoundProgramHeader+0x66>
        while (skipColon(state)) {
 80204a6:	6878      	ldr	r0, [r7, #4]
 80204a8:	f7ff ff20 	bl	80202ec <skipColon>
 80204ac:	4603      	mov	r3, r0
 80204ae:	2b00      	cmp	r3, #0
 80204b0:	d1ea      	bne.n	8020488 <skipCompoundProgramHeader+0x20>
            }
        }
        return SKIP_OK;
 80204b2:	2301      	movs	r3, #1
 80204b4:	e00b      	b.n	80204ce <skipCompoundProgramHeader+0x66>
    } else if (res <= SKIP_INCOMPLETE) {
 80204b6:	68bb      	ldr	r3, [r7, #8]
 80204b8:	2b00      	cmp	r3, #0
 80204ba:	da01      	bge.n	80204c0 <skipCompoundProgramHeader+0x58>
        return SKIP_OK;
 80204bc:	2301      	movs	r3, #1
 80204be:	e006      	b.n	80204ce <skipCompoundProgramHeader+0x66>
    } else if (firstColon) {
 80204c0:	68fb      	ldr	r3, [r7, #12]
 80204c2:	2b00      	cmp	r3, #0
 80204c4:	d002      	beq.n	80204cc <skipCompoundProgramHeader+0x64>
        return SKIP_INCOMPLETE;
 80204c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80204ca:	e000      	b.n	80204ce <skipCompoundProgramHeader+0x66>
    } else {
        return SKIP_NONE;
 80204cc:	2300      	movs	r3, #0
    }
}
 80204ce:	4618      	mov	r0, r3
 80204d0:	3710      	adds	r7, #16
 80204d2:	46bd      	mov	sp, r7
 80204d4:	bd80      	pop	{r7, pc}

080204d6 <scpiLex_ProgramHeader>:
 * Detect token command or compound program header
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 80204d6:	b580      	push	{r7, lr}
 80204d8:	b084      	sub	sp, #16
 80204da:	af00      	add	r7, sp, #0
 80204dc:	6078      	str	r0, [r7, #4]
 80204de:	6039      	str	r1, [r7, #0]
    int res;
    token->ptr = state->pos;
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	685a      	ldr	r2, [r3, #4]
 80204e4:	683b      	ldr	r3, [r7, #0]
 80204e6:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 80204e8:	683b      	ldr	r3, [r7, #0]
 80204ea:	221a      	movs	r2, #26
 80204ec:	701a      	strb	r2, [r3, #0]

    res = skipCommonProgramHeader(state);
 80204ee:	6878      	ldr	r0, [r7, #4]
 80204f0:	f7ff ff8e 	bl	8020410 <skipCommonProgramHeader>
 80204f4:	60f8      	str	r0, [r7, #12]
    if (res >= SKIP_OK) {
 80204f6:	68fb      	ldr	r3, [r7, #12]
 80204f8:	2b00      	cmp	r3, #0
 80204fa:	dd0e      	ble.n	802051a <scpiLex_ProgramHeader+0x44>
        if (skipChr(state, '?') >= SKIP_OK) {
 80204fc:	213f      	movs	r1, #63	; 0x3f
 80204fe:	6878      	ldr	r0, [r7, #4]
 8020500:	f7ff fe94 	bl	802022c <skipChr>
 8020504:	4603      	mov	r3, r0
 8020506:	2b00      	cmp	r3, #0
 8020508:	dd03      	ble.n	8020512 <scpiLex_ProgramHeader+0x3c>
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 802050a:	683b      	ldr	r3, [r7, #0]
 802050c:	2216      	movs	r2, #22
 802050e:	701a      	strb	r2, [r3, #0]
 8020510:	e029      	b.n	8020566 <scpiLex_ProgramHeader+0x90>
        } else {
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 8020512:	683b      	ldr	r3, [r7, #0]
 8020514:	2213      	movs	r2, #19
 8020516:	701a      	strb	r2, [r3, #0]
 8020518:	e025      	b.n	8020566 <scpiLex_ProgramHeader+0x90>
        }
    } else if (res <= SKIP_INCOMPLETE) {
 802051a:	68fb      	ldr	r3, [r7, #12]
 802051c:	2b00      	cmp	r3, #0
 802051e:	da03      	bge.n	8020528 <scpiLex_ProgramHeader+0x52>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 8020520:	683b      	ldr	r3, [r7, #0]
 8020522:	2214      	movs	r2, #20
 8020524:	701a      	strb	r2, [r3, #0]
 8020526:	e01e      	b.n	8020566 <scpiLex_ProgramHeader+0x90>
    } else if (res == SKIP_NONE) {
 8020528:	68fb      	ldr	r3, [r7, #12]
 802052a:	2b00      	cmp	r3, #0
 802052c:	d11b      	bne.n	8020566 <scpiLex_ProgramHeader+0x90>
        res = skipCompoundProgramHeader(state);
 802052e:	6878      	ldr	r0, [r7, #4]
 8020530:	f7ff ff9a 	bl	8020468 <skipCompoundProgramHeader>
 8020534:	60f8      	str	r0, [r7, #12]

        if (res >= SKIP_OK) {
 8020536:	68fb      	ldr	r3, [r7, #12]
 8020538:	2b00      	cmp	r3, #0
 802053a:	dd0e      	ble.n	802055a <scpiLex_ProgramHeader+0x84>
            if (skipChr(state, '?') >= SKIP_OK) {
 802053c:	213f      	movs	r1, #63	; 0x3f
 802053e:	6878      	ldr	r0, [r7, #4]
 8020540:	f7ff fe74 	bl	802022c <skipChr>
 8020544:	4603      	mov	r3, r0
 8020546:	2b00      	cmp	r3, #0
 8020548:	dd03      	ble.n	8020552 <scpiLex_ProgramHeader+0x7c>
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 802054a:	683b      	ldr	r3, [r7, #0]
 802054c:	2215      	movs	r2, #21
 802054e:	701a      	strb	r2, [r3, #0]
 8020550:	e009      	b.n	8020566 <scpiLex_ProgramHeader+0x90>
            } else {
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 8020552:	683b      	ldr	r3, [r7, #0]
 8020554:	2211      	movs	r2, #17
 8020556:	701a      	strb	r2, [r3, #0]
 8020558:	e005      	b.n	8020566 <scpiLex_ProgramHeader+0x90>
            }
        } else if (res <= SKIP_INCOMPLETE) {
 802055a:	68fb      	ldr	r3, [r7, #12]
 802055c:	2b00      	cmp	r3, #0
 802055e:	da02      	bge.n	8020566 <scpiLex_ProgramHeader+0x90>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 8020560:	683b      	ldr	r3, [r7, #0]
 8020562:	2212      	movs	r2, #18
 8020564:	701a      	strb	r2, [r3, #0]
        }
    }

    if (token->type != SCPI_TOKEN_UNKNOWN) {
 8020566:	683b      	ldr	r3, [r7, #0]
 8020568:	781b      	ldrb	r3, [r3, #0]
 802056a:	2b1a      	cmp	r3, #26
 802056c:	d007      	beq.n	802057e <scpiLex_ProgramHeader+0xa8>
        token->len = state->pos - token->ptr;
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	685a      	ldr	r2, [r3, #4]
 8020572:	683b      	ldr	r3, [r7, #0]
 8020574:	685b      	ldr	r3, [r3, #4]
 8020576:	1ad2      	subs	r2, r2, r3
 8020578:	683b      	ldr	r3, [r7, #0]
 802057a:	609a      	str	r2, [r3, #8]
 802057c:	e006      	b.n	802058c <scpiLex_ProgramHeader+0xb6>
    } else {
        token->len = 0;
 802057e:	683b      	ldr	r3, [r7, #0]
 8020580:	2200      	movs	r2, #0
 8020582:	609a      	str	r2, [r3, #8]
        state->pos = token->ptr;
 8020584:	683b      	ldr	r3, [r7, #0]
 8020586:	685a      	ldr	r2, [r3, #4]
 8020588:	687b      	ldr	r3, [r7, #4]
 802058a:	605a      	str	r2, [r3, #4]
    }

    return token->len;
 802058c:	683b      	ldr	r3, [r7, #0]
 802058e:	689b      	ldr	r3, [r3, #8]
}
 8020590:	4618      	mov	r0, r3
 8020592:	3710      	adds	r7, #16
 8020594:	46bd      	mov	sp, r7
 8020596:	bd80      	pop	{r7, pc}

08020598 <scpiLex_CharacterProgramData>:
 * Detect token "Character program data"
 * @param state
 * @param token
 * @return 
 */
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 8020598:	b580      	push	{r7, lr}
 802059a:	b082      	sub	sp, #8
 802059c:	af00      	add	r7, sp, #0
 802059e:	6078      	str	r0, [r7, #4]
 80205a0:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	685a      	ldr	r2, [r3, #4]
 80205a6:	683b      	ldr	r3, [r7, #0]
 80205a8:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80205aa:	6878      	ldr	r0, [r7, #4]
 80205ac:	f7ff fcf1 	bl	801ff92 <iseos>
 80205b0:	4603      	mov	r3, r0
 80205b2:	2b00      	cmp	r3, #0
 80205b4:	d12d      	bne.n	8020612 <scpiLex_CharacterProgramData+0x7a>
 80205b6:	687b      	ldr	r3, [r7, #4]
 80205b8:	685b      	ldr	r3, [r3, #4]
 80205ba:	781b      	ldrb	r3, [r3, #0]
 80205bc:	3301      	adds	r3, #1
 80205be:	4a21      	ldr	r2, [pc, #132]	; (8020644 <scpiLex_CharacterProgramData+0xac>)
 80205c0:	4413      	add	r3, r2
 80205c2:	781b      	ldrb	r3, [r3, #0]
 80205c4:	f003 0303 	and.w	r3, r3, #3
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d022      	beq.n	8020612 <scpiLex_CharacterProgramData+0x7a>
        state->pos++;
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	685b      	ldr	r3, [r3, #4]
 80205d0:	1c5a      	adds	r2, r3, #1
 80205d2:	687b      	ldr	r3, [r7, #4]
 80205d4:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 80205d6:	e004      	b.n	80205e2 <scpiLex_CharacterProgramData+0x4a>
            state->pos++;
 80205d8:	687b      	ldr	r3, [r7, #4]
 80205da:	685b      	ldr	r3, [r3, #4]
 80205dc:	1c5a      	adds	r2, r3, #1
 80205de:	687b      	ldr	r3, [r7, #4]
 80205e0:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 80205e2:	6878      	ldr	r0, [r7, #4]
 80205e4:	f7ff fcd5 	bl	801ff92 <iseos>
 80205e8:	4603      	mov	r3, r0
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	d111      	bne.n	8020612 <scpiLex_CharacterProgramData+0x7a>
 80205ee:	687b      	ldr	r3, [r7, #4]
 80205f0:	685b      	ldr	r3, [r3, #4]
 80205f2:	781b      	ldrb	r3, [r3, #0]
 80205f4:	3301      	adds	r3, #1
 80205f6:	4a13      	ldr	r2, [pc, #76]	; (8020644 <scpiLex_CharacterProgramData+0xac>)
 80205f8:	4413      	add	r3, r2
 80205fa:	781b      	ldrb	r3, [r3, #0]
 80205fc:	f003 0307 	and.w	r3, r3, #7
 8020600:	2b00      	cmp	r3, #0
 8020602:	d1e9      	bne.n	80205d8 <scpiLex_CharacterProgramData+0x40>
 8020604:	215f      	movs	r1, #95	; 0x5f
 8020606:	6878      	ldr	r0, [r7, #4]
 8020608:	f7ff fce5 	bl	801ffd6 <ischr>
 802060c:	4603      	mov	r3, r0
 802060e:	2b00      	cmp	r3, #0
 8020610:	d1e2      	bne.n	80205d8 <scpiLex_CharacterProgramData+0x40>
        }
    }

    token->len = state->pos - token->ptr;
 8020612:	687b      	ldr	r3, [r7, #4]
 8020614:	685a      	ldr	r2, [r3, #4]
 8020616:	683b      	ldr	r3, [r7, #0]
 8020618:	685b      	ldr	r3, [r3, #4]
 802061a:	1ad2      	subs	r2, r2, r3
 802061c:	683b      	ldr	r3, [r7, #0]
 802061e:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 8020620:	683b      	ldr	r3, [r7, #0]
 8020622:	689b      	ldr	r3, [r3, #8]
 8020624:	2b00      	cmp	r3, #0
 8020626:	dd03      	ble.n	8020630 <scpiLex_CharacterProgramData+0x98>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 8020628:	683b      	ldr	r3, [r7, #0]
 802062a:	2209      	movs	r2, #9
 802062c:	701a      	strb	r2, [r3, #0]
 802062e:	e002      	b.n	8020636 <scpiLex_CharacterProgramData+0x9e>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8020630:	683b      	ldr	r3, [r7, #0]
 8020632:	221a      	movs	r2, #26
 8020634:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8020636:	683b      	ldr	r3, [r7, #0]
 8020638:	689b      	ldr	r3, [r3, #8]
}
 802063a:	4618      	mov	r0, r3
 802063c:	3708      	adds	r7, #8
 802063e:	46bd      	mov	sp, r7
 8020640:	bd80      	pop	{r7, pc}
 8020642:	bf00      	nop
 8020644:	0802d778 	.word	0x0802d778

08020648 <skipMantisa>:

/* 7.7.2 <DECIMAL NUMERIC PROGRAM DATA> */
static int skipMantisa(lex_state_t * state) {
 8020648:	b580      	push	{r7, lr}
 802064a:	b084      	sub	sp, #16
 802064c:	af00      	add	r7, sp, #0
 802064e:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8020650:	2300      	movs	r3, #0
 8020652:	60fb      	str	r3, [r7, #12]

    skipPlusmn(state);
 8020654:	6878      	ldr	r0, [r7, #4]
 8020656:	f7ff fda1 	bl	802019c <skipPlusmn>

    someNumbers += skipNumbers(state);
 802065a:	6878      	ldr	r0, [r7, #4]
 802065c:	f7ff fd76 	bl	802014c <skipNumbers>
 8020660:	4602      	mov	r2, r0
 8020662:	68fb      	ldr	r3, [r7, #12]
 8020664:	4413      	add	r3, r2
 8020666:	60fb      	str	r3, [r7, #12]

    if (skipChr(state, '.')) {
 8020668:	212e      	movs	r1, #46	; 0x2e
 802066a:	6878      	ldr	r0, [r7, #4]
 802066c:	f7ff fdde 	bl	802022c <skipChr>
 8020670:	4603      	mov	r3, r0
 8020672:	2b00      	cmp	r3, #0
 8020674:	d006      	beq.n	8020684 <skipMantisa+0x3c>
        someNumbers += skipNumbers(state);
 8020676:	6878      	ldr	r0, [r7, #4]
 8020678:	f7ff fd68 	bl	802014c <skipNumbers>
 802067c:	4602      	mov	r2, r0
 802067e:	68fb      	ldr	r3, [r7, #12]
 8020680:	4413      	add	r3, r2
 8020682:	60fb      	str	r3, [r7, #12]
    }

    return someNumbers;
 8020684:	68fb      	ldr	r3, [r7, #12]
}
 8020686:	4618      	mov	r0, r3
 8020688:	3710      	adds	r7, #16
 802068a:	46bd      	mov	sp, r7
 802068c:	bd80      	pop	{r7, pc}

0802068e <skipExponent>:

static int skipExponent(lex_state_t * state) {
 802068e:	b580      	push	{r7, lr}
 8020690:	b084      	sub	sp, #16
 8020692:	af00      	add	r7, sp, #0
 8020694:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8020696:	2300      	movs	r3, #0
 8020698:	60fb      	str	r3, [r7, #12]

    if (!iseos(state) && isE(state->pos[0])) {
 802069a:	6878      	ldr	r0, [r7, #4]
 802069c:	f7ff fc79 	bl	801ff92 <iseos>
 80206a0:	4603      	mov	r3, r0
 80206a2:	2b00      	cmp	r3, #0
 80206a4:	d117      	bne.n	80206d6 <skipExponent+0x48>
 80206a6:	687b      	ldr	r3, [r7, #4]
 80206a8:	685b      	ldr	r3, [r3, #4]
 80206aa:	781b      	ldrb	r3, [r3, #0]
 80206ac:	4618      	mov	r0, r3
 80206ae:	f7ff fcf3 	bl	8020098 <isE>
 80206b2:	4603      	mov	r3, r0
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	d00e      	beq.n	80206d6 <skipExponent+0x48>
        state->pos++;
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	685b      	ldr	r3, [r3, #4]
 80206bc:	1c5a      	adds	r2, r3, #1
 80206be:	687b      	ldr	r3, [r7, #4]
 80206c0:	605a      	str	r2, [r3, #4]

        skipWs(state);
 80206c2:	6878      	ldr	r0, [r7, #4]
 80206c4:	f7ff fcfb 	bl	80200be <skipWs>

        skipPlusmn(state);
 80206c8:	6878      	ldr	r0, [r7, #4]
 80206ca:	f7ff fd67 	bl	802019c <skipPlusmn>

        someNumbers = skipNumbers(state);
 80206ce:	6878      	ldr	r0, [r7, #4]
 80206d0:	f7ff fd3c 	bl	802014c <skipNumbers>
 80206d4:	60f8      	str	r0, [r7, #12]
    }

    return someNumbers;
 80206d6:	68fb      	ldr	r3, [r7, #12]
}
 80206d8:	4618      	mov	r0, r3
 80206da:	3710      	adds	r7, #16
 80206dc:	46bd      	mov	sp, r7
 80206de:	bd80      	pop	{r7, pc}

080206e0 <scpiLex_DecimalNumericProgramData>:
 * Detect token Decimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 80206e0:	b580      	push	{r7, lr}
 80206e2:	b084      	sub	sp, #16
 80206e4:	af00      	add	r7, sp, #0
 80206e6:	6078      	str	r0, [r7, #4]
 80206e8:	6039      	str	r1, [r7, #0]
    char * rollback;
    token->ptr = state->pos;
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	685a      	ldr	r2, [r3, #4]
 80206ee:	683b      	ldr	r3, [r7, #0]
 80206f0:	605a      	str	r2, [r3, #4]

    if (skipMantisa(state)) {
 80206f2:	6878      	ldr	r0, [r7, #4]
 80206f4:	f7ff ffa8 	bl	8020648 <skipMantisa>
 80206f8:	4603      	mov	r3, r0
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d00f      	beq.n	802071e <scpiLex_DecimalNumericProgramData+0x3e>
        rollback = state->pos;
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	685b      	ldr	r3, [r3, #4]
 8020702:	60fb      	str	r3, [r7, #12]
        skipWs(state);
 8020704:	6878      	ldr	r0, [r7, #4]
 8020706:	f7ff fcda 	bl	80200be <skipWs>
        if (!skipExponent(state)) {
 802070a:	6878      	ldr	r0, [r7, #4]
 802070c:	f7ff ffbf 	bl	802068e <skipExponent>
 8020710:	4603      	mov	r3, r0
 8020712:	2b00      	cmp	r3, #0
 8020714:	d107      	bne.n	8020726 <scpiLex_DecimalNumericProgramData+0x46>
            state->pos = rollback;
 8020716:	687b      	ldr	r3, [r7, #4]
 8020718:	68fa      	ldr	r2, [r7, #12]
 802071a:	605a      	str	r2, [r3, #4]
 802071c:	e003      	b.n	8020726 <scpiLex_DecimalNumericProgramData+0x46>
        }
    } else {
        state->pos = token->ptr;
 802071e:	683b      	ldr	r3, [r7, #0]
 8020720:	685a      	ldr	r2, [r3, #4]
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	605a      	str	r2, [r3, #4]
    }

    token->len = state->pos - token->ptr;
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	685a      	ldr	r2, [r3, #4]
 802072a:	683b      	ldr	r3, [r7, #0]
 802072c:	685b      	ldr	r3, [r3, #4]
 802072e:	1ad2      	subs	r2, r2, r3
 8020730:	683b      	ldr	r3, [r7, #0]
 8020732:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 8020734:	683b      	ldr	r3, [r7, #0]
 8020736:	689b      	ldr	r3, [r3, #8]
 8020738:	2b00      	cmp	r3, #0
 802073a:	dd03      	ble.n	8020744 <scpiLex_DecimalNumericProgramData+0x64>
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 802073c:	683b      	ldr	r3, [r7, #0]
 802073e:	220a      	movs	r2, #10
 8020740:	701a      	strb	r2, [r3, #0]
 8020742:	e002      	b.n	802074a <scpiLex_DecimalNumericProgramData+0x6a>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8020744:	683b      	ldr	r3, [r7, #0]
 8020746:	221a      	movs	r2, #26
 8020748:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 802074a:	683b      	ldr	r3, [r7, #0]
 802074c:	689b      	ldr	r3, [r3, #8]
}
 802074e:	4618      	mov	r0, r3
 8020750:	3710      	adds	r7, #16
 8020752:	46bd      	mov	sp, r7
 8020754:	bd80      	pop	{r7, pc}

08020756 <scpiLex_SuffixProgramData>:

/* 7.7.3 <SUFFIX PROGRAM DATA> */
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 8020756:	b580      	push	{r7, lr}
 8020758:	b082      	sub	sp, #8
 802075a:	af00      	add	r7, sp, #0
 802075c:	6078      	str	r0, [r7, #4]
 802075e:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8020760:	687b      	ldr	r3, [r7, #4]
 8020762:	685a      	ldr	r2, [r3, #4]
 8020764:	683b      	ldr	r3, [r7, #0]
 8020766:	605a      	str	r2, [r3, #4]

    skipChr(state, '/');
 8020768:	212f      	movs	r1, #47	; 0x2f
 802076a:	6878      	ldr	r0, [r7, #4]
 802076c:	f7ff fd5e 	bl	802022c <skipChr>

    /* TODO: strict parsing  : SLASH? (ALPHA+ (MINUS? DIGIT)?) ((SLASH | DOT) (ALPHA+ (MINUS? DIGIT)?))* */
    if (skipAlpha(state)) {
 8020770:	6878      	ldr	r0, [r7, #4]
 8020772:	f7ff fd33 	bl	80201dc <skipAlpha>
 8020776:	4603      	mov	r3, r0
 8020778:	2b00      	cmp	r3, #0
 802077a:	d017      	beq.n	80207ac <scpiLex_SuffixProgramData+0x56>
        skipChr(state, '-');
 802077c:	212d      	movs	r1, #45	; 0x2d
 802077e:	6878      	ldr	r0, [r7, #4]
 8020780:	f7ff fd54 	bl	802022c <skipChr>
        skipDigit(state);
 8020784:	6878      	ldr	r0, [r7, #4]
 8020786:	f7ff fcbd 	bl	8020104 <skipDigit>

        while (skipSlashDot(state)) {
 802078a:	e009      	b.n	80207a0 <scpiLex_SuffixProgramData+0x4a>
            skipAlpha(state);
 802078c:	6878      	ldr	r0, [r7, #4]
 802078e:	f7ff fd25 	bl	80201dc <skipAlpha>
            skipChr(state, '-');
 8020792:	212d      	movs	r1, #45	; 0x2d
 8020794:	6878      	ldr	r0, [r7, #4]
 8020796:	f7ff fd49 	bl	802022c <skipChr>
            skipDigit(state);
 802079a:	6878      	ldr	r0, [r7, #4]
 802079c:	f7ff fcb2 	bl	8020104 <skipDigit>
        while (skipSlashDot(state)) {
 80207a0:	6878      	ldr	r0, [r7, #4]
 80207a2:	f7ff fd63 	bl	802026c <skipSlashDot>
 80207a6:	4603      	mov	r3, r0
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	d1ef      	bne.n	802078c <scpiLex_SuffixProgramData+0x36>
        }
    }

    token->len = state->pos - token->ptr;
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	685a      	ldr	r2, [r3, #4]
 80207b0:	683b      	ldr	r3, [r7, #0]
 80207b2:	685b      	ldr	r3, [r3, #4]
 80207b4:	1ad2      	subs	r2, r2, r3
 80207b6:	683b      	ldr	r3, [r7, #0]
 80207b8:	609a      	str	r2, [r3, #8]
    if ((token->len > 0)) {
 80207ba:	683b      	ldr	r3, [r7, #0]
 80207bc:	689b      	ldr	r3, [r3, #8]
 80207be:	2b00      	cmp	r3, #0
 80207c0:	dd03      	ble.n	80207ca <scpiLex_SuffixProgramData+0x74>
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 80207c2:	683b      	ldr	r3, [r7, #0]
 80207c4:	220c      	movs	r2, #12
 80207c6:	701a      	strb	r2, [r3, #0]
 80207c8:	e009      	b.n	80207de <scpiLex_SuffixProgramData+0x88>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 80207ca:	683b      	ldr	r3, [r7, #0]
 80207cc:	221a      	movs	r2, #26
 80207ce:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 80207d0:	683b      	ldr	r3, [r7, #0]
 80207d2:	685a      	ldr	r2, [r3, #4]
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	605a      	str	r2, [r3, #4]
        token->len = 0;
 80207d8:	683b      	ldr	r3, [r7, #0]
 80207da:	2200      	movs	r2, #0
 80207dc:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 80207de:	683b      	ldr	r3, [r7, #0]
 80207e0:	689b      	ldr	r3, [r3, #8]
}
 80207e2:	4618      	mov	r0, r3
 80207e4:	3708      	adds	r7, #8
 80207e6:	46bd      	mov	sp, r7
 80207e8:	bd80      	pop	{r7, pc}
	...

080207ec <skipHexNum>:

/* 7.7.4 <NONDECIMAL NUMERIC PROGRAM DATA> */
static int skipHexNum(lex_state_t * state) {
 80207ec:	b580      	push	{r7, lr}
 80207ee:	b084      	sub	sp, #16
 80207f0:	af00      	add	r7, sp, #0
 80207f2:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 80207f4:	2300      	movs	r3, #0
 80207f6:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 80207f8:	e007      	b.n	802080a <skipHexNum+0x1e>
        state->pos++;
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	685b      	ldr	r3, [r3, #4]
 80207fe:	1c5a      	adds	r2, r3, #1
 8020800:	687b      	ldr	r3, [r7, #4]
 8020802:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8020804:	68fb      	ldr	r3, [r7, #12]
 8020806:	3301      	adds	r3, #1
 8020808:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 802080a:	6878      	ldr	r0, [r7, #4]
 802080c:	f7ff fbc1 	bl	801ff92 <iseos>
 8020810:	4603      	mov	r3, r0
 8020812:	2b00      	cmp	r3, #0
 8020814:	d10a      	bne.n	802082c <skipHexNum+0x40>
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	685b      	ldr	r3, [r3, #4]
 802081a:	781b      	ldrb	r3, [r3, #0]
 802081c:	3301      	adds	r3, #1
 802081e:	4a06      	ldr	r2, [pc, #24]	; (8020838 <skipHexNum+0x4c>)
 8020820:	4413      	add	r3, r2
 8020822:	781b      	ldrb	r3, [r3, #0]
 8020824:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8020828:	2b00      	cmp	r3, #0
 802082a:	d1e6      	bne.n	80207fa <skipHexNum+0xe>
    }
    return someNumbers;
 802082c:	68fb      	ldr	r3, [r7, #12]
}
 802082e:	4618      	mov	r0, r3
 8020830:	3710      	adds	r7, #16
 8020832:	46bd      	mov	sp, r7
 8020834:	bd80      	pop	{r7, pc}
 8020836:	bf00      	nop
 8020838:	0802d778 	.word	0x0802d778

0802083c <skipOctNum>:

static int skipOctNum(lex_state_t * state) {
 802083c:	b580      	push	{r7, lr}
 802083e:	b084      	sub	sp, #16
 8020840:	af00      	add	r7, sp, #0
 8020842:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8020844:	2300      	movs	r3, #0
 8020846:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 8020848:	e007      	b.n	802085a <skipOctNum+0x1e>
        state->pos++;
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	685b      	ldr	r3, [r3, #4]
 802084e:	1c5a      	adds	r2, r3, #1
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8020854:	68fb      	ldr	r3, [r7, #12]
 8020856:	3301      	adds	r3, #1
 8020858:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 802085a:	6878      	ldr	r0, [r7, #4]
 802085c:	f7ff fb99 	bl	801ff92 <iseos>
 8020860:	4603      	mov	r3, r0
 8020862:	2b00      	cmp	r3, #0
 8020864:	d108      	bne.n	8020878 <skipOctNum+0x3c>
 8020866:	687b      	ldr	r3, [r7, #4]
 8020868:	685b      	ldr	r3, [r3, #4]
 802086a:	781b      	ldrb	r3, [r3, #0]
 802086c:	4618      	mov	r0, r3
 802086e:	f7ff fb6b 	bl	801ff48 <isqdigit>
 8020872:	4603      	mov	r3, r0
 8020874:	2b00      	cmp	r3, #0
 8020876:	d1e8      	bne.n	802084a <skipOctNum+0xe>
    }
    return someNumbers;
 8020878:	68fb      	ldr	r3, [r7, #12]
}
 802087a:	4618      	mov	r0, r3
 802087c:	3710      	adds	r7, #16
 802087e:	46bd      	mov	sp, r7
 8020880:	bd80      	pop	{r7, pc}

08020882 <skipBinNum>:

static int skipBinNum(lex_state_t * state) {
 8020882:	b580      	push	{r7, lr}
 8020884:	b084      	sub	sp, #16
 8020886:	af00      	add	r7, sp, #0
 8020888:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 802088a:	2300      	movs	r3, #0
 802088c:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 802088e:	e007      	b.n	80208a0 <skipBinNum+0x1e>
        state->pos++;
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	685b      	ldr	r3, [r3, #4]
 8020894:	1c5a      	adds	r2, r3, #1
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	605a      	str	r2, [r3, #4]
        someNumbers++;
 802089a:	68fb      	ldr	r3, [r7, #12]
 802089c:	3301      	adds	r3, #1
 802089e:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 80208a0:	6878      	ldr	r0, [r7, #4]
 80208a2:	f7ff fb76 	bl	801ff92 <iseos>
 80208a6:	4603      	mov	r3, r0
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	d108      	bne.n	80208be <skipBinNum+0x3c>
 80208ac:	687b      	ldr	r3, [r7, #4]
 80208ae:	685b      	ldr	r3, [r3, #4]
 80208b0:	781b      	ldrb	r3, [r3, #0]
 80208b2:	4618      	mov	r0, r3
 80208b4:	f7ff fb35 	bl	801ff22 <isbdigit>
 80208b8:	4603      	mov	r3, r0
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	d1e8      	bne.n	8020890 <skipBinNum+0xe>
    }
    return someNumbers;
 80208be:	68fb      	ldr	r3, [r7, #12]
}
 80208c0:	4618      	mov	r0, r3
 80208c2:	3710      	adds	r7, #16
 80208c4:	46bd      	mov	sp, r7
 80208c6:	bd80      	pop	{r7, pc}

080208c8 <scpiLex_NondecimalNumericData>:
 * Detect token nondecimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 80208c8:	b580      	push	{r7, lr}
 80208ca:	b084      	sub	sp, #16
 80208cc:	af00      	add	r7, sp, #0
 80208ce:	6078      	str	r0, [r7, #4]
 80208d0:	6039      	str	r1, [r7, #0]
    int someNumbers = 0;
 80208d2:	2300      	movs	r3, #0
 80208d4:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 80208d6:	687b      	ldr	r3, [r7, #4]
 80208d8:	685a      	ldr	r2, [r3, #4]
 80208da:	683b      	ldr	r3, [r7, #0]
 80208dc:	605a      	str	r2, [r3, #4]
    if (skipChr(state, '#')) {
 80208de:	2123      	movs	r1, #35	; 0x23
 80208e0:	6878      	ldr	r0, [r7, #4]
 80208e2:	f7ff fca3 	bl	802022c <skipChr>
 80208e6:	4603      	mov	r3, r0
 80208e8:	2b00      	cmp	r3, #0
 80208ea:	d046      	beq.n	802097a <scpiLex_NondecimalNumericData+0xb2>
        if (!iseos(state)) {
 80208ec:	6878      	ldr	r0, [r7, #4]
 80208ee:	f7ff fb50 	bl	801ff92 <iseos>
 80208f2:	4603      	mov	r3, r0
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	d140      	bne.n	802097a <scpiLex_NondecimalNumericData+0xb2>
            if (isH(state->pos[0])) {
 80208f8:	687b      	ldr	r3, [r7, #4]
 80208fa:	685b      	ldr	r3, [r3, #4]
 80208fc:	781b      	ldrb	r3, [r3, #0]
 80208fe:	4618      	mov	r0, r3
 8020900:	f7ff fb91 	bl	8020026 <isH>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	d00c      	beq.n	8020924 <scpiLex_NondecimalNumericData+0x5c>
                state->pos++;
 802090a:	687b      	ldr	r3, [r7, #4]
 802090c:	685b      	ldr	r3, [r3, #4]
 802090e:	1c5a      	adds	r2, r3, #1
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	605a      	str	r2, [r3, #4]
                someNumbers = skipHexNum(state);
 8020914:	6878      	ldr	r0, [r7, #4]
 8020916:	f7ff ff69 	bl	80207ec <skipHexNum>
 802091a:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_HEXNUM;
 802091c:	683b      	ldr	r3, [r7, #0]
 802091e:	2206      	movs	r2, #6
 8020920:	701a      	strb	r2, [r3, #0]
 8020922:	e02a      	b.n	802097a <scpiLex_NondecimalNumericData+0xb2>
            } else if (isQ(state->pos[0])) {
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	685b      	ldr	r3, [r3, #4]
 8020928:	781b      	ldrb	r3, [r3, #0]
 802092a:	4618      	mov	r0, r3
 802092c:	f7ff fba1 	bl	8020072 <isQ>
 8020930:	4603      	mov	r3, r0
 8020932:	2b00      	cmp	r3, #0
 8020934:	d00c      	beq.n	8020950 <scpiLex_NondecimalNumericData+0x88>
                state->pos++;
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	685b      	ldr	r3, [r3, #4]
 802093a:	1c5a      	adds	r2, r3, #1
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	605a      	str	r2, [r3, #4]
                someNumbers = skipOctNum(state);
 8020940:	6878      	ldr	r0, [r7, #4]
 8020942:	f7ff ff7b 	bl	802083c <skipOctNum>
 8020946:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_OCTNUM;
 8020948:	683b      	ldr	r3, [r7, #0]
 802094a:	2207      	movs	r2, #7
 802094c:	701a      	strb	r2, [r3, #0]
 802094e:	e014      	b.n	802097a <scpiLex_NondecimalNumericData+0xb2>
            } else if (isB(state->pos[0])) {
 8020950:	687b      	ldr	r3, [r7, #4]
 8020952:	685b      	ldr	r3, [r3, #4]
 8020954:	781b      	ldrb	r3, [r3, #0]
 8020956:	4618      	mov	r0, r3
 8020958:	f7ff fb78 	bl	802004c <isB>
 802095c:	4603      	mov	r3, r0
 802095e:	2b00      	cmp	r3, #0
 8020960:	d00b      	beq.n	802097a <scpiLex_NondecimalNumericData+0xb2>
                state->pos++;
 8020962:	687b      	ldr	r3, [r7, #4]
 8020964:	685b      	ldr	r3, [r3, #4]
 8020966:	1c5a      	adds	r2, r3, #1
 8020968:	687b      	ldr	r3, [r7, #4]
 802096a:	605a      	str	r2, [r3, #4]
                someNumbers = skipBinNum(state);
 802096c:	6878      	ldr	r0, [r7, #4]
 802096e:	f7ff ff88 	bl	8020882 <skipBinNum>
 8020972:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_BINNUM;
 8020974:	683b      	ldr	r3, [r7, #0]
 8020976:	2208      	movs	r2, #8
 8020978:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (someNumbers) {
 802097a:	68fb      	ldr	r3, [r7, #12]
 802097c:	2b00      	cmp	r3, #0
 802097e:	d00c      	beq.n	802099a <scpiLex_NondecimalNumericData+0xd2>
        token->ptr += 2; /* ignore number prefix */
 8020980:	683b      	ldr	r3, [r7, #0]
 8020982:	685b      	ldr	r3, [r3, #4]
 8020984:	1c9a      	adds	r2, r3, #2
 8020986:	683b      	ldr	r3, [r7, #0]
 8020988:	605a      	str	r2, [r3, #4]
        token->len = state->pos - token->ptr;
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	685a      	ldr	r2, [r3, #4]
 802098e:	683b      	ldr	r3, [r7, #0]
 8020990:	685b      	ldr	r3, [r3, #4]
 8020992:	1ad2      	subs	r2, r2, r3
 8020994:	683b      	ldr	r3, [r7, #0]
 8020996:	609a      	str	r2, [r3, #8]
 8020998:	e009      	b.n	80209ae <scpiLex_NondecimalNumericData+0xe6>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 802099a:	683b      	ldr	r3, [r7, #0]
 802099c:	221a      	movs	r2, #26
 802099e:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 80209a0:	683b      	ldr	r3, [r7, #0]
 80209a2:	685a      	ldr	r2, [r3, #4]
 80209a4:	687b      	ldr	r3, [r7, #4]
 80209a6:	605a      	str	r2, [r3, #4]
        token->len = 0;
 80209a8:	683b      	ldr	r3, [r7, #0]
 80209aa:	2200      	movs	r2, #0
 80209ac:	609a      	str	r2, [r3, #8]
    }
    return token->len > 0 ? token->len + 2 : 0;
 80209ae:	683b      	ldr	r3, [r7, #0]
 80209b0:	689b      	ldr	r3, [r3, #8]
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	dd03      	ble.n	80209be <scpiLex_NondecimalNumericData+0xf6>
 80209b6:	683b      	ldr	r3, [r7, #0]
 80209b8:	689b      	ldr	r3, [r3, #8]
 80209ba:	3302      	adds	r3, #2
 80209bc:	e000      	b.n	80209c0 <scpiLex_NondecimalNumericData+0xf8>
 80209be:	2300      	movs	r3, #0
}
 80209c0:	4618      	mov	r0, r3
 80209c2:	3710      	adds	r7, #16
 80209c4:	46bd      	mov	sp, r7
 80209c6:	bd80      	pop	{r7, pc}

080209c8 <isascii7bit>:

/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
 80209c8:	b480      	push	{r7}
 80209ca:	b083      	sub	sp, #12
 80209cc:	af00      	add	r7, sp, #0
 80209ce:	6078      	str	r0, [r7, #4]
    return (c >= 0) && (c <= 0x7f);
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	2b00      	cmp	r3, #0
 80209d4:	db04      	blt.n	80209e0 <isascii7bit+0x18>
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	2b7f      	cmp	r3, #127	; 0x7f
 80209da:	dc01      	bgt.n	80209e0 <isascii7bit+0x18>
 80209dc:	2301      	movs	r3, #1
 80209de:	e000      	b.n	80209e2 <isascii7bit+0x1a>
 80209e0:	2300      	movs	r3, #0
}
 80209e2:	4618      	mov	r0, r3
 80209e4:	370c      	adds	r7, #12
 80209e6:	46bd      	mov	sp, r7
 80209e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209ec:	4770      	bx	lr

080209ee <skipQuoteProgramData>:

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 80209ee:	b580      	push	{r7, lr}
 80209f0:	b082      	sub	sp, #8
 80209f2:	af00      	add	r7, sp, #0
 80209f4:	6078      	str	r0, [r7, #4]
 80209f6:	460b      	mov	r3, r1
 80209f8:	70fb      	strb	r3, [r7, #3]
    while (!iseos(state)) {
 80209fa:	e03d      	b.n	8020a78 <skipQuoteProgramData+0x8a>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 80209fc:	687b      	ldr	r3, [r7, #4]
 80209fe:	685b      	ldr	r3, [r3, #4]
 8020a00:	781b      	ldrb	r3, [r3, #0]
 8020a02:	4618      	mov	r0, r3
 8020a04:	f7ff ffe0 	bl	80209c8 <isascii7bit>
 8020a08:	4603      	mov	r3, r0
 8020a0a:	2b00      	cmp	r3, #0
 8020a0c:	d00d      	beq.n	8020a2a <skipQuoteProgramData+0x3c>
 8020a0e:	78fb      	ldrb	r3, [r7, #3]
 8020a10:	4619      	mov	r1, r3
 8020a12:	6878      	ldr	r0, [r7, #4]
 8020a14:	f7ff fadf 	bl	801ffd6 <ischr>
 8020a18:	4603      	mov	r3, r0
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d105      	bne.n	8020a2a <skipQuoteProgramData+0x3c>
            state->pos++;
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	685b      	ldr	r3, [r3, #4]
 8020a22:	1c5a      	adds	r2, r3, #1
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	605a      	str	r2, [r3, #4]
 8020a28:	e026      	b.n	8020a78 <skipQuoteProgramData+0x8a>
        } else if (ischr(state, quote)) {
 8020a2a:	78fb      	ldrb	r3, [r7, #3]
 8020a2c:	4619      	mov	r1, r3
 8020a2e:	6878      	ldr	r0, [r7, #4]
 8020a30:	f7ff fad1 	bl	801ffd6 <ischr>
 8020a34:	4603      	mov	r3, r0
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	d025      	beq.n	8020a86 <skipQuoteProgramData+0x98>
            state->pos++;
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	685b      	ldr	r3, [r3, #4]
 8020a3e:	1c5a      	adds	r2, r3, #1
 8020a40:	687b      	ldr	r3, [r7, #4]
 8020a42:	605a      	str	r2, [r3, #4]
            if (!iseos(state) && ischr(state, quote)) {
 8020a44:	6878      	ldr	r0, [r7, #4]
 8020a46:	f7ff faa4 	bl	801ff92 <iseos>
 8020a4a:	4603      	mov	r3, r0
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	d10d      	bne.n	8020a6c <skipQuoteProgramData+0x7e>
 8020a50:	78fb      	ldrb	r3, [r7, #3]
 8020a52:	4619      	mov	r1, r3
 8020a54:	6878      	ldr	r0, [r7, #4]
 8020a56:	f7ff fabe 	bl	801ffd6 <ischr>
 8020a5a:	4603      	mov	r3, r0
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	d005      	beq.n	8020a6c <skipQuoteProgramData+0x7e>
                state->pos++;
 8020a60:	687b      	ldr	r3, [r7, #4]
 8020a62:	685b      	ldr	r3, [r3, #4]
 8020a64:	1c5a      	adds	r2, r3, #1
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	605a      	str	r2, [r3, #4]
 8020a6a:	e005      	b.n	8020a78 <skipQuoteProgramData+0x8a>
            } else {
                state->pos--;
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	685b      	ldr	r3, [r3, #4]
 8020a70:	1e5a      	subs	r2, r3, #1
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	605a      	str	r2, [r3, #4]
                break;
 8020a76:	e007      	b.n	8020a88 <skipQuoteProgramData+0x9a>
    while (!iseos(state)) {
 8020a78:	6878      	ldr	r0, [r7, #4]
 8020a7a:	f7ff fa8a 	bl	801ff92 <iseos>
 8020a7e:	4603      	mov	r3, r0
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d0bb      	beq.n	80209fc <skipQuoteProgramData+0xe>
            }
        } else {
            break;
        }
    }
}
 8020a84:	e000      	b.n	8020a88 <skipQuoteProgramData+0x9a>
            break;
 8020a86:	bf00      	nop
}
 8020a88:	bf00      	nop
 8020a8a:	3708      	adds	r7, #8
 8020a8c:	46bd      	mov	sp, r7
 8020a8e:	bd80      	pop	{r7, pc}

08020a90 <skipDoubleQuoteProgramData>:

static void skipDoubleQuoteProgramData(lex_state_t * state) {
 8020a90:	b580      	push	{r7, lr}
 8020a92:	b082      	sub	sp, #8
 8020a94:	af00      	add	r7, sp, #0
 8020a96:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '"');
 8020a98:	2122      	movs	r1, #34	; 0x22
 8020a9a:	6878      	ldr	r0, [r7, #4]
 8020a9c:	f7ff ffa7 	bl	80209ee <skipQuoteProgramData>
}
 8020aa0:	bf00      	nop
 8020aa2:	3708      	adds	r7, #8
 8020aa4:	46bd      	mov	sp, r7
 8020aa6:	bd80      	pop	{r7, pc}

08020aa8 <skipSingleQuoteProgramData>:

static void skipSingleQuoteProgramData(lex_state_t * state) {
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	b082      	sub	sp, #8
 8020aac:	af00      	add	r7, sp, #0
 8020aae:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '\'');
 8020ab0:	2127      	movs	r1, #39	; 0x27
 8020ab2:	6878      	ldr	r0, [r7, #4]
 8020ab4:	f7ff ff9b 	bl	80209ee <skipQuoteProgramData>
}
 8020ab8:	bf00      	nop
 8020aba:	3708      	adds	r7, #8
 8020abc:	46bd      	mov	sp, r7
 8020abe:	bd80      	pop	{r7, pc}

08020ac0 <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 8020ac0:	b580      	push	{r7, lr}
 8020ac2:	b082      	sub	sp, #8
 8020ac4:	af00      	add	r7, sp, #0
 8020ac6:	6078      	str	r0, [r7, #4]
 8020ac8:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	685a      	ldr	r2, [r3, #4]
 8020ace:	683b      	ldr	r3, [r7, #0]
 8020ad0:	605a      	str	r2, [r3, #4]

    if (!iseos(state)) {
 8020ad2:	6878      	ldr	r0, [r7, #4]
 8020ad4:	f7ff fa5d 	bl	801ff92 <iseos>
 8020ad8:	4603      	mov	r3, r0
 8020ada:	2b00      	cmp	r3, #0
 8020adc:	d160      	bne.n	8020ba0 <scpiLex_StringProgramData+0xe0>
        if (ischr(state, '"')) {
 8020ade:	2122      	movs	r1, #34	; 0x22
 8020ae0:	6878      	ldr	r0, [r7, #4]
 8020ae2:	f7ff fa78 	bl	801ffd6 <ischr>
 8020ae6:	4603      	mov	r3, r0
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	d029      	beq.n	8020b40 <scpiLex_StringProgramData+0x80>
            state->pos++;
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	685b      	ldr	r3, [r3, #4]
 8020af0:	1c5a      	adds	r2, r3, #1
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8020af6:	683b      	ldr	r3, [r7, #0]
 8020af8:	220f      	movs	r2, #15
 8020afa:	701a      	strb	r2, [r3, #0]
            skipDoubleQuoteProgramData(state);
 8020afc:	6878      	ldr	r0, [r7, #4]
 8020afe:	f7ff ffc7 	bl	8020a90 <skipDoubleQuoteProgramData>
            if (!iseos(state) && ischr(state, '"')) {
 8020b02:	6878      	ldr	r0, [r7, #4]
 8020b04:	f7ff fa45 	bl	801ff92 <iseos>
 8020b08:	4603      	mov	r3, r0
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	d113      	bne.n	8020b36 <scpiLex_StringProgramData+0x76>
 8020b0e:	2122      	movs	r1, #34	; 0x22
 8020b10:	6878      	ldr	r0, [r7, #4]
 8020b12:	f7ff fa60 	bl	801ffd6 <ischr>
 8020b16:	4603      	mov	r3, r0
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	d00c      	beq.n	8020b36 <scpiLex_StringProgramData+0x76>
                state->pos++;
 8020b1c:	687b      	ldr	r3, [r7, #4]
 8020b1e:	685b      	ldr	r3, [r3, #4]
 8020b20:	1c5a      	adds	r2, r3, #1
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	685a      	ldr	r2, [r3, #4]
 8020b2a:	683b      	ldr	r3, [r7, #0]
 8020b2c:	685b      	ldr	r3, [r3, #4]
 8020b2e:	1ad2      	subs	r2, r2, r3
 8020b30:	683b      	ldr	r3, [r7, #0]
 8020b32:	609a      	str	r2, [r3, #8]
 8020b34:	e034      	b.n	8020ba0 <scpiLex_StringProgramData+0xe0>
            } else {
                state->pos = token->ptr;
 8020b36:	683b      	ldr	r3, [r7, #0]
 8020b38:	685a      	ldr	r2, [r3, #4]
 8020b3a:	687b      	ldr	r3, [r7, #4]
 8020b3c:	605a      	str	r2, [r3, #4]
 8020b3e:	e02f      	b.n	8020ba0 <scpiLex_StringProgramData+0xe0>
            }
        } else if (ischr(state, '\'')) {
 8020b40:	2127      	movs	r1, #39	; 0x27
 8020b42:	6878      	ldr	r0, [r7, #4]
 8020b44:	f7ff fa47 	bl	801ffd6 <ischr>
 8020b48:	4603      	mov	r3, r0
 8020b4a:	2b00      	cmp	r3, #0
 8020b4c:	d028      	beq.n	8020ba0 <scpiLex_StringProgramData+0xe0>
            state->pos++;
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	685b      	ldr	r3, [r3, #4]
 8020b52:	1c5a      	adds	r2, r3, #1
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8020b58:	683b      	ldr	r3, [r7, #0]
 8020b5a:	220e      	movs	r2, #14
 8020b5c:	701a      	strb	r2, [r3, #0]
            skipSingleQuoteProgramData(state);
 8020b5e:	6878      	ldr	r0, [r7, #4]
 8020b60:	f7ff ffa2 	bl	8020aa8 <skipSingleQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 8020b64:	6878      	ldr	r0, [r7, #4]
 8020b66:	f7ff fa14 	bl	801ff92 <iseos>
 8020b6a:	4603      	mov	r3, r0
 8020b6c:	2b00      	cmp	r3, #0
 8020b6e:	d113      	bne.n	8020b98 <scpiLex_StringProgramData+0xd8>
 8020b70:	2127      	movs	r1, #39	; 0x27
 8020b72:	6878      	ldr	r0, [r7, #4]
 8020b74:	f7ff fa2f 	bl	801ffd6 <ischr>
 8020b78:	4603      	mov	r3, r0
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	d00c      	beq.n	8020b98 <scpiLex_StringProgramData+0xd8>
                state->pos++;
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	685b      	ldr	r3, [r3, #4]
 8020b82:	1c5a      	adds	r2, r3, #1
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 8020b88:	687b      	ldr	r3, [r7, #4]
 8020b8a:	685a      	ldr	r2, [r3, #4]
 8020b8c:	683b      	ldr	r3, [r7, #0]
 8020b8e:	685b      	ldr	r3, [r3, #4]
 8020b90:	1ad2      	subs	r2, r2, r3
 8020b92:	683b      	ldr	r3, [r7, #0]
 8020b94:	609a      	str	r2, [r3, #8]
 8020b96:	e003      	b.n	8020ba0 <scpiLex_StringProgramData+0xe0>
            } else {
                state->pos = token->ptr;
 8020b98:	683b      	ldr	r3, [r7, #0]
 8020b9a:	685a      	ldr	r2, [r3, #4]
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	605a      	str	r2, [r3, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 8020ba0:	687b      	ldr	r3, [r7, #4]
 8020ba2:	685a      	ldr	r2, [r3, #4]
 8020ba4:	683b      	ldr	r3, [r7, #0]
 8020ba6:	685b      	ldr	r3, [r3, #4]
 8020ba8:	1ad2      	subs	r2, r2, r3
 8020baa:	683b      	ldr	r3, [r7, #0]
 8020bac:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 8020bae:	683b      	ldr	r3, [r7, #0]
 8020bb0:	689b      	ldr	r3, [r3, #8]
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	dc09      	bgt.n	8020bca <scpiLex_StringProgramData+0x10a>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8020bb6:	683b      	ldr	r3, [r7, #0]
 8020bb8:	221a      	movs	r2, #26
 8020bba:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8020bbc:	683b      	ldr	r3, [r7, #0]
 8020bbe:	685a      	ldr	r2, [r3, #4]
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8020bc4:	683b      	ldr	r3, [r7, #0]
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	609a      	str	r2, [r3, #8]
    }

    return token->len > 0 ? token->len : 0;
 8020bca:	683b      	ldr	r3, [r7, #0]
 8020bcc:	689b      	ldr	r3, [r3, #8]
 8020bce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8020bd2:	4618      	mov	r0, r3
 8020bd4:	3708      	adds	r7, #8
 8020bd6:	46bd      	mov	sp, r7
 8020bd8:	bd80      	pop	{r7, pc}
	...

08020bdc <isNonzeroDigit>:

/* 7.7.6 <ARBITRARY BLOCK PROGRAM DATA> */
static int isNonzeroDigit(int c) {
 8020bdc:	b480      	push	{r7}
 8020bde:	b083      	sub	sp, #12
 8020be0:	af00      	add	r7, sp, #0
 8020be2:	6078      	str	r0, [r7, #4]
    return isdigit(c) && (c != '0');
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	3301      	adds	r3, #1
 8020be8:	4a09      	ldr	r2, [pc, #36]	; (8020c10 <isNonzeroDigit+0x34>)
 8020bea:	4413      	add	r3, r2
 8020bec:	781b      	ldrb	r3, [r3, #0]
 8020bee:	f003 0304 	and.w	r3, r3, #4
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d004      	beq.n	8020c00 <isNonzeroDigit+0x24>
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	2b30      	cmp	r3, #48	; 0x30
 8020bfa:	d001      	beq.n	8020c00 <isNonzeroDigit+0x24>
 8020bfc:	2301      	movs	r3, #1
 8020bfe:	e000      	b.n	8020c02 <isNonzeroDigit+0x26>
 8020c00:	2300      	movs	r3, #0
}
 8020c02:	4618      	mov	r0, r3
 8020c04:	370c      	adds	r7, #12
 8020c06:	46bd      	mov	sp, r7
 8020c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c0c:	4770      	bx	lr
 8020c0e:	bf00      	nop
 8020c10:	0802d778 	.word	0x0802d778

08020c14 <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 8020c14:	b580      	push	{r7, lr}
 8020c16:	b086      	sub	sp, #24
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
 8020c1c:	6039      	str	r1, [r7, #0]
    int i;
    int arbitraryBlockLength = 0;
 8020c1e:	2300      	movs	r3, #0
 8020c20:	613b      	str	r3, [r7, #16]
    const char * ptr = state->pos;
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	685b      	ldr	r3, [r3, #4]
 8020c26:	60bb      	str	r3, [r7, #8]
    int validData = -1;
 8020c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020c2c:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	685a      	ldr	r2, [r3, #4]
 8020c32:	683b      	ldr	r3, [r7, #0]
 8020c34:	605a      	str	r2, [r3, #4]

    if (skipChr(state, '#')) {
 8020c36:	2123      	movs	r1, #35	; 0x23
 8020c38:	6878      	ldr	r0, [r7, #4]
 8020c3a:	f7ff faf7 	bl	802022c <skipChr>
 8020c3e:	4603      	mov	r3, r0
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	d077      	beq.n	8020d34 <scpiLex_ArbitraryBlockProgramData+0x120>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 8020c44:	6878      	ldr	r0, [r7, #4]
 8020c46:	f7ff f9a4 	bl	801ff92 <iseos>
 8020c4a:	4603      	mov	r3, r0
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	d167      	bne.n	8020d20 <scpiLex_ArbitraryBlockProgramData+0x10c>
 8020c50:	687b      	ldr	r3, [r7, #4]
 8020c52:	685b      	ldr	r3, [r3, #4]
 8020c54:	781b      	ldrb	r3, [r3, #0]
 8020c56:	4618      	mov	r0, r3
 8020c58:	f7ff ffc0 	bl	8020bdc <isNonzeroDigit>
 8020c5c:	4603      	mov	r3, r0
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	d05e      	beq.n	8020d20 <scpiLex_ArbitraryBlockProgramData+0x10c>
            /* Get number of digits */
            i = state->pos[0] - '0';
 8020c62:	687b      	ldr	r3, [r7, #4]
 8020c64:	685b      	ldr	r3, [r3, #4]
 8020c66:	781b      	ldrb	r3, [r3, #0]
 8020c68:	3b30      	subs	r3, #48	; 0x30
 8020c6a:	617b      	str	r3, [r7, #20]
            state->pos++;
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	685b      	ldr	r3, [r3, #4]
 8020c70:	1c5a      	adds	r2, r3, #1
 8020c72:	687b      	ldr	r3, [r7, #4]
 8020c74:	605a      	str	r2, [r3, #4]

            for (; i > 0; i--) {
 8020c76:	e025      	b.n	8020cc4 <scpiLex_ArbitraryBlockProgramData+0xb0>
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8020c78:	6878      	ldr	r0, [r7, #4]
 8020c7a:	f7ff f98a 	bl	801ff92 <iseos>
 8020c7e:	4603      	mov	r3, r0
 8020c80:	2b00      	cmp	r3, #0
 8020c82:	d122      	bne.n	8020cca <scpiLex_ArbitraryBlockProgramData+0xb6>
 8020c84:	687b      	ldr	r3, [r7, #4]
 8020c86:	685b      	ldr	r3, [r3, #4]
 8020c88:	781b      	ldrb	r3, [r3, #0]
 8020c8a:	3301      	adds	r3, #1
 8020c8c:	4a40      	ldr	r2, [pc, #256]	; (8020d90 <scpiLex_ArbitraryBlockProgramData+0x17c>)
 8020c8e:	4413      	add	r3, r2
 8020c90:	781b      	ldrb	r3, [r3, #0]
 8020c92:	f003 0304 	and.w	r3, r3, #4
 8020c96:	2b00      	cmp	r3, #0
 8020c98:	d017      	beq.n	8020cca <scpiLex_ArbitraryBlockProgramData+0xb6>
                    arbitraryBlockLength *= 10;
 8020c9a:	693a      	ldr	r2, [r7, #16]
 8020c9c:	4613      	mov	r3, r2
 8020c9e:	009b      	lsls	r3, r3, #2
 8020ca0:	4413      	add	r3, r2
 8020ca2:	005b      	lsls	r3, r3, #1
 8020ca4:	613b      	str	r3, [r7, #16]
                    arbitraryBlockLength += (state->pos[0] - '0');
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	685b      	ldr	r3, [r3, #4]
 8020caa:	781b      	ldrb	r3, [r3, #0]
 8020cac:	3b30      	subs	r3, #48	; 0x30
 8020cae:	693a      	ldr	r2, [r7, #16]
 8020cb0:	4413      	add	r3, r2
 8020cb2:	613b      	str	r3, [r7, #16]
                    state->pos++;
 8020cb4:	687b      	ldr	r3, [r7, #4]
 8020cb6:	685b      	ldr	r3, [r3, #4]
 8020cb8:	1c5a      	adds	r2, r3, #1
 8020cba:	687b      	ldr	r3, [r7, #4]
 8020cbc:	605a      	str	r2, [r3, #4]
            for (; i > 0; i--) {
 8020cbe:	697b      	ldr	r3, [r7, #20]
 8020cc0:	3b01      	subs	r3, #1
 8020cc2:	617b      	str	r3, [r7, #20]
 8020cc4:	697b      	ldr	r3, [r7, #20]
 8020cc6:	2b00      	cmp	r3, #0
 8020cc8:	dcd6      	bgt.n	8020c78 <scpiLex_ArbitraryBlockProgramData+0x64>
                } else {
                    break;
                }
            }

            if (i == 0) {
 8020cca:	697b      	ldr	r3, [r7, #20]
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d11e      	bne.n	8020d0e <scpiLex_ArbitraryBlockProgramData+0xfa>
                state->pos += arbitraryBlockLength;
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	685a      	ldr	r2, [r3, #4]
 8020cd4:	693b      	ldr	r3, [r7, #16]
 8020cd6:	441a      	add	r2, r3
 8020cd8:	687b      	ldr	r3, [r7, #4]
 8020cda:	605a      	str	r2, [r3, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 8020cdc:	687b      	ldr	r3, [r7, #4]
 8020cde:	681b      	ldr	r3, [r3, #0]
 8020ce0:	687a      	ldr	r2, [r7, #4]
 8020ce2:	6892      	ldr	r2, [r2, #8]
 8020ce4:	441a      	add	r2, r3
 8020ce6:	687b      	ldr	r3, [r7, #4]
 8020ce8:	685b      	ldr	r3, [r3, #4]
 8020cea:	429a      	cmp	r2, r3
 8020cec:	d30c      	bcc.n	8020d08 <scpiLex_ArbitraryBlockProgramData+0xf4>
                    token->ptr = state->pos - arbitraryBlockLength;
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	685a      	ldr	r2, [r3, #4]
 8020cf2:	693b      	ldr	r3, [r7, #16]
 8020cf4:	425b      	negs	r3, r3
 8020cf6:	441a      	add	r2, r3
 8020cf8:	683b      	ldr	r3, [r7, #0]
 8020cfa:	605a      	str	r2, [r3, #4]
                    token->len = arbitraryBlockLength;
 8020cfc:	683b      	ldr	r3, [r7, #0]
 8020cfe:	693a      	ldr	r2, [r7, #16]
 8020d00:	609a      	str	r2, [r3, #8]
                    validData = 1;
 8020d02:	2301      	movs	r3, #1
 8020d04:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 8020d06:	e014      	b.n	8020d32 <scpiLex_ArbitraryBlockProgramData+0x11e>
                } else {
                    validData = 0;
 8020d08:	2300      	movs	r3, #0
 8020d0a:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 8020d0c:	e011      	b.n	8020d32 <scpiLex_ArbitraryBlockProgramData+0x11e>
                }
            } else if (iseos(state)) {
 8020d0e:	6878      	ldr	r0, [r7, #4]
 8020d10:	f7ff f93f 	bl	801ff92 <iseos>
 8020d14:	4603      	mov	r3, r0
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	d00b      	beq.n	8020d32 <scpiLex_ArbitraryBlockProgramData+0x11e>
                validData = 0;
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 8020d1e:	e008      	b.n	8020d32 <scpiLex_ArbitraryBlockProgramData+0x11e>
            }
        } else if (iseos(state)) {
 8020d20:	6878      	ldr	r0, [r7, #4]
 8020d22:	f7ff f936 	bl	801ff92 <iseos>
 8020d26:	4603      	mov	r3, r0
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d003      	beq.n	8020d34 <scpiLex_ArbitraryBlockProgramData+0x120>
            validData = 0;
 8020d2c:	2300      	movs	r3, #0
 8020d2e:	60fb      	str	r3, [r7, #12]
 8020d30:	e000      	b.n	8020d34 <scpiLex_ArbitraryBlockProgramData+0x120>
            if (i == 0) {
 8020d32:	bf00      	nop
        }
    }

    if (validData == 1) {
 8020d34:	68fb      	ldr	r3, [r7, #12]
 8020d36:	2b01      	cmp	r3, #1
 8020d38:	d103      	bne.n	8020d42 <scpiLex_ArbitraryBlockProgramData+0x12e>
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 8020d3a:	683b      	ldr	r3, [r7, #0]
 8020d3c:	220d      	movs	r2, #13
 8020d3e:	701a      	strb	r2, [r3, #0]
 8020d40:	e01a      	b.n	8020d78 <scpiLex_ArbitraryBlockProgramData+0x164>
    } else if (validData == 0) {
 8020d42:	68fb      	ldr	r3, [r7, #12]
 8020d44:	2b00      	cmp	r3, #0
 8020d46:	d10d      	bne.n	8020d64 <scpiLex_ArbitraryBlockProgramData+0x150>
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 8020d48:	683b      	ldr	r3, [r7, #0]
 8020d4a:	221a      	movs	r2, #26
 8020d4c:	701a      	strb	r2, [r3, #0]
        token->len = 0;
 8020d4e:	683b      	ldr	r3, [r7, #0]
 8020d50:	2200      	movs	r2, #0
 8020d52:	609a      	str	r2, [r3, #8]
        state->pos = state->buffer + state->len;
 8020d54:	687b      	ldr	r3, [r7, #4]
 8020d56:	681b      	ldr	r3, [r3, #0]
 8020d58:	687a      	ldr	r2, [r7, #4]
 8020d5a:	6892      	ldr	r2, [r2, #8]
 8020d5c:	441a      	add	r2, r3
 8020d5e:	687b      	ldr	r3, [r7, #4]
 8020d60:	605a      	str	r2, [r3, #4]
 8020d62:	e009      	b.n	8020d78 <scpiLex_ArbitraryBlockProgramData+0x164>
    } else {
        /* invalid */
        token->type = SCPI_TOKEN_UNKNOWN;
 8020d64:	683b      	ldr	r3, [r7, #0]
 8020d66:	221a      	movs	r2, #26
 8020d68:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8020d6a:	683b      	ldr	r3, [r7, #0]
 8020d6c:	685a      	ldr	r2, [r3, #4]
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8020d72:	683b      	ldr	r3, [r7, #0]
 8020d74:	2200      	movs	r2, #0
 8020d76:	609a      	str	r2, [r3, #8]
    }

    return token->len + (token->ptr - ptr);
 8020d78:	683b      	ldr	r3, [r7, #0]
 8020d7a:	689a      	ldr	r2, [r3, #8]
 8020d7c:	683b      	ldr	r3, [r7, #0]
 8020d7e:	6859      	ldr	r1, [r3, #4]
 8020d80:	68bb      	ldr	r3, [r7, #8]
 8020d82:	1acb      	subs	r3, r1, r3
 8020d84:	4413      	add	r3, r2
}
 8020d86:	4618      	mov	r0, r3
 8020d88:	3718      	adds	r7, #24
 8020d8a:	46bd      	mov	sp, r7
 8020d8c:	bd80      	pop	{r7, pc}
 8020d8e:	bf00      	nop
 8020d90:	0802d778 	.word	0x0802d778

08020d94 <isProgramExpression>:

/* 7.7.7 <EXPRESSION PROGRAM DATA> */
static int isProgramExpression(int c) {
 8020d94:	b480      	push	{r7}
 8020d96:	b083      	sub	sp, #12
 8020d98:	af00      	add	r7, sp, #0
 8020d9a:	6078      	str	r0, [r7, #4]
    if ((c >= 0x20) && (c <= 0x7e)) {
 8020d9c:	687b      	ldr	r3, [r7, #4]
 8020d9e:	2b1f      	cmp	r3, #31
 8020da0:	dd16      	ble.n	8020dd0 <isProgramExpression+0x3c>
 8020da2:	687b      	ldr	r3, [r7, #4]
 8020da4:	2b7e      	cmp	r3, #126	; 0x7e
 8020da6:	dc13      	bgt.n	8020dd0 <isProgramExpression+0x3c>
        if ((c != '"')
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	2b22      	cmp	r3, #34	; 0x22
 8020dac:	d010      	beq.n	8020dd0 <isProgramExpression+0x3c>
                && (c != '#')
 8020dae:	687b      	ldr	r3, [r7, #4]
 8020db0:	2b23      	cmp	r3, #35	; 0x23
 8020db2:	d00d      	beq.n	8020dd0 <isProgramExpression+0x3c>
                && (c != '\'')
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	2b27      	cmp	r3, #39	; 0x27
 8020db8:	d00a      	beq.n	8020dd0 <isProgramExpression+0x3c>
                && (c != '(')
 8020dba:	687b      	ldr	r3, [r7, #4]
 8020dbc:	2b28      	cmp	r3, #40	; 0x28
 8020dbe:	d007      	beq.n	8020dd0 <isProgramExpression+0x3c>
                && (c != ')')
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	2b29      	cmp	r3, #41	; 0x29
 8020dc4:	d004      	beq.n	8020dd0 <isProgramExpression+0x3c>
                && (c != ';')) {
 8020dc6:	687b      	ldr	r3, [r7, #4]
 8020dc8:	2b3b      	cmp	r3, #59	; 0x3b
 8020dca:	d001      	beq.n	8020dd0 <isProgramExpression+0x3c>
            return 1;
 8020dcc:	2301      	movs	r3, #1
 8020dce:	e000      	b.n	8020dd2 <isProgramExpression+0x3e>
        }
    }

    return 0;
 8020dd0:	2300      	movs	r3, #0
}
 8020dd2:	4618      	mov	r0, r3
 8020dd4:	370c      	adds	r7, #12
 8020dd6:	46bd      	mov	sp, r7
 8020dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ddc:	4770      	bx	lr

08020dde <skipProgramExpression>:

static void skipProgramExpression(lex_state_t * state) {
 8020dde:	b580      	push	{r7, lr}
 8020de0:	b082      	sub	sp, #8
 8020de2:	af00      	add	r7, sp, #0
 8020de4:	6078      	str	r0, [r7, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8020de6:	e004      	b.n	8020df2 <skipProgramExpression+0x14>
        state->pos++;
 8020de8:	687b      	ldr	r3, [r7, #4]
 8020dea:	685b      	ldr	r3, [r3, #4]
 8020dec:	1c5a      	adds	r2, r3, #1
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	605a      	str	r2, [r3, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8020df2:	6878      	ldr	r0, [r7, #4]
 8020df4:	f7ff f8cd 	bl	801ff92 <iseos>
 8020df8:	4603      	mov	r3, r0
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	d108      	bne.n	8020e10 <skipProgramExpression+0x32>
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	685b      	ldr	r3, [r3, #4]
 8020e02:	781b      	ldrb	r3, [r3, #0]
 8020e04:	4618      	mov	r0, r3
 8020e06:	f7ff ffc5 	bl	8020d94 <isProgramExpression>
 8020e0a:	4603      	mov	r3, r0
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d1eb      	bne.n	8020de8 <skipProgramExpression+0xa>
    }
}
 8020e10:	bf00      	nop
 8020e12:	3708      	adds	r7, #8
 8020e14:	46bd      	mov	sp, r7
 8020e16:	bd80      	pop	{r7, pc}

08020e18 <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 8020e18:	b580      	push	{r7, lr}
 8020e1a:	b082      	sub	sp, #8
 8020e1c:	af00      	add	r7, sp, #0
 8020e1e:	6078      	str	r0, [r7, #4]
 8020e20:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	685a      	ldr	r2, [r3, #4]
 8020e26:	683b      	ldr	r3, [r7, #0]
 8020e28:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && ischr(state, '(')) {
 8020e2a:	6878      	ldr	r0, [r7, #4]
 8020e2c:	f7ff f8b1 	bl	801ff92 <iseos>
 8020e30:	4603      	mov	r3, r0
 8020e32:	2b00      	cmp	r3, #0
 8020e34:	d12b      	bne.n	8020e8e <scpiLex_ProgramExpression+0x76>
 8020e36:	2128      	movs	r1, #40	; 0x28
 8020e38:	6878      	ldr	r0, [r7, #4]
 8020e3a:	f7ff f8cc 	bl	801ffd6 <ischr>
 8020e3e:	4603      	mov	r3, r0
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d024      	beq.n	8020e8e <scpiLex_ProgramExpression+0x76>
        state->pos++;
 8020e44:	687b      	ldr	r3, [r7, #4]
 8020e46:	685b      	ldr	r3, [r3, #4]
 8020e48:	1c5a      	adds	r2, r3, #1
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	605a      	str	r2, [r3, #4]
        skipProgramExpression(state);
 8020e4e:	6878      	ldr	r0, [r7, #4]
 8020e50:	f7ff ffc5 	bl	8020dde <skipProgramExpression>

        if (!iseos(state) && ischr(state, ')')) {
 8020e54:	6878      	ldr	r0, [r7, #4]
 8020e56:	f7ff f89c 	bl	801ff92 <iseos>
 8020e5a:	4603      	mov	r3, r0
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d113      	bne.n	8020e88 <scpiLex_ProgramExpression+0x70>
 8020e60:	2129      	movs	r1, #41	; 0x29
 8020e62:	6878      	ldr	r0, [r7, #4]
 8020e64:	f7ff f8b7 	bl	801ffd6 <ischr>
 8020e68:	4603      	mov	r3, r0
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d00c      	beq.n	8020e88 <scpiLex_ProgramExpression+0x70>
            state->pos++;
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	685b      	ldr	r3, [r3, #4]
 8020e72:	1c5a      	adds	r2, r3, #1
 8020e74:	687b      	ldr	r3, [r7, #4]
 8020e76:	605a      	str	r2, [r3, #4]
            token->len = state->pos - token->ptr;
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	685a      	ldr	r2, [r3, #4]
 8020e7c:	683b      	ldr	r3, [r7, #0]
 8020e7e:	685b      	ldr	r3, [r3, #4]
 8020e80:	1ad2      	subs	r2, r2, r3
 8020e82:	683b      	ldr	r3, [r7, #0]
 8020e84:	609a      	str	r2, [r3, #8]
 8020e86:	e002      	b.n	8020e8e <scpiLex_ProgramExpression+0x76>
        } else {
            token->len = 0;
 8020e88:	683b      	ldr	r3, [r7, #0]
 8020e8a:	2200      	movs	r2, #0
 8020e8c:	609a      	str	r2, [r3, #8]
        }
    }

    if ((token->len > 0)) {
 8020e8e:	683b      	ldr	r3, [r7, #0]
 8020e90:	689b      	ldr	r3, [r3, #8]
 8020e92:	2b00      	cmp	r3, #0
 8020e94:	dd03      	ble.n	8020e9e <scpiLex_ProgramExpression+0x86>
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 8020e96:	683b      	ldr	r3, [r7, #0]
 8020e98:	2210      	movs	r2, #16
 8020e9a:	701a      	strb	r2, [r3, #0]
 8020e9c:	e009      	b.n	8020eb2 <scpiLex_ProgramExpression+0x9a>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8020e9e:	683b      	ldr	r3, [r7, #0]
 8020ea0:	221a      	movs	r2, #26
 8020ea2:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8020ea4:	683b      	ldr	r3, [r7, #0]
 8020ea6:	685a      	ldr	r2, [r3, #4]
 8020ea8:	687b      	ldr	r3, [r7, #4]
 8020eaa:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8020eac:	683b      	ldr	r3, [r7, #0]
 8020eae:	2200      	movs	r2, #0
 8020eb0:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 8020eb2:	683b      	ldr	r3, [r7, #0]
 8020eb4:	689b      	ldr	r3, [r3, #8]
}
 8020eb6:	4618      	mov	r0, r3
 8020eb8:	3708      	adds	r7, #8
 8020eba:	46bd      	mov	sp, r7
 8020ebc:	bd80      	pop	{r7, pc}

08020ebe <scpiLex_Comma>:
 * Detect token comma
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 8020ebe:	b580      	push	{r7, lr}
 8020ec0:	b082      	sub	sp, #8
 8020ec2:	af00      	add	r7, sp, #0
 8020ec4:	6078      	str	r0, [r7, #4]
 8020ec6:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8020ec8:	687b      	ldr	r3, [r7, #4]
 8020eca:	685a      	ldr	r2, [r3, #4]
 8020ecc:	683b      	ldr	r3, [r7, #0]
 8020ece:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ',')) {
 8020ed0:	212c      	movs	r1, #44	; 0x2c
 8020ed2:	6878      	ldr	r0, [r7, #4]
 8020ed4:	f7ff f9aa 	bl	802022c <skipChr>
 8020ed8:	4603      	mov	r3, r0
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	d006      	beq.n	8020eec <scpiLex_Comma+0x2e>
        token->len = 1;
 8020ede:	683b      	ldr	r3, [r7, #0]
 8020ee0:	2201      	movs	r2, #1
 8020ee2:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_COMMA;
 8020ee4:	683b      	ldr	r3, [r7, #0]
 8020ee6:	2200      	movs	r2, #0
 8020ee8:	701a      	strb	r2, [r3, #0]
 8020eea:	e005      	b.n	8020ef8 <scpiLex_Comma+0x3a>
    } else {
        token->len = 0;
 8020eec:	683b      	ldr	r3, [r7, #0]
 8020eee:	2200      	movs	r2, #0
 8020ef0:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8020ef2:	683b      	ldr	r3, [r7, #0]
 8020ef4:	221a      	movs	r2, #26
 8020ef6:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8020ef8:	683b      	ldr	r3, [r7, #0]
 8020efa:	689b      	ldr	r3, [r3, #8]
}
 8020efc:	4618      	mov	r0, r3
 8020efe:	3708      	adds	r7, #8
 8020f00:	46bd      	mov	sp, r7
 8020f02:	bd80      	pop	{r7, pc}

08020f04 <scpiLex_Semicolon>:
 * Detect token semicolon
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 8020f04:	b580      	push	{r7, lr}
 8020f06:	b082      	sub	sp, #8
 8020f08:	af00      	add	r7, sp, #0
 8020f0a:	6078      	str	r0, [r7, #4]
 8020f0c:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	685a      	ldr	r2, [r3, #4]
 8020f12:	683b      	ldr	r3, [r7, #0]
 8020f14:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ';')) {
 8020f16:	213b      	movs	r1, #59	; 0x3b
 8020f18:	6878      	ldr	r0, [r7, #4]
 8020f1a:	f7ff f987 	bl	802022c <skipChr>
 8020f1e:	4603      	mov	r3, r0
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d006      	beq.n	8020f32 <scpiLex_Semicolon+0x2e>
        token->len = 1;
 8020f24:	683b      	ldr	r3, [r7, #0]
 8020f26:	2201      	movs	r2, #1
 8020f28:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
 8020f2a:	683b      	ldr	r3, [r7, #0]
 8020f2c:	2201      	movs	r2, #1
 8020f2e:	701a      	strb	r2, [r3, #0]
 8020f30:	e005      	b.n	8020f3e <scpiLex_Semicolon+0x3a>
    } else {
        token->len = 0;
 8020f32:	683b      	ldr	r3, [r7, #0]
 8020f34:	2200      	movs	r2, #0
 8020f36:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8020f38:	683b      	ldr	r3, [r7, #0]
 8020f3a:	221a      	movs	r2, #26
 8020f3c:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8020f3e:	683b      	ldr	r3, [r7, #0]
 8020f40:	689b      	ldr	r3, [r3, #8]
}
 8020f42:	4618      	mov	r0, r3
 8020f44:	3708      	adds	r7, #8
 8020f46:	46bd      	mov	sp, r7
 8020f48:	bd80      	pop	{r7, pc}

08020f4a <scpiLex_Colon>:
 * Detect token colon
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Colon(lex_state_t * state, scpi_token_t * token) {
 8020f4a:	b580      	push	{r7, lr}
 8020f4c:	b082      	sub	sp, #8
 8020f4e:	af00      	add	r7, sp, #0
 8020f50:	6078      	str	r0, [r7, #4]
 8020f52:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	685a      	ldr	r2, [r3, #4]
 8020f58:	683b      	ldr	r3, [r7, #0]
 8020f5a:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ':')) {
 8020f5c:	213a      	movs	r1, #58	; 0x3a
 8020f5e:	6878      	ldr	r0, [r7, #4]
 8020f60:	f7ff f964 	bl	802022c <skipChr>
 8020f64:	4603      	mov	r3, r0
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	d006      	beq.n	8020f78 <scpiLex_Colon+0x2e>
        token->len = 1;
 8020f6a:	683b      	ldr	r3, [r7, #0]
 8020f6c:	2201      	movs	r2, #1
 8020f6e:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_COLON;
 8020f70:	683b      	ldr	r3, [r7, #0]
 8020f72:	2202      	movs	r2, #2
 8020f74:	701a      	strb	r2, [r3, #0]
 8020f76:	e005      	b.n	8020f84 <scpiLex_Colon+0x3a>
    } else {
        token->len = 0;
 8020f78:	683b      	ldr	r3, [r7, #0]
 8020f7a:	2200      	movs	r2, #0
 8020f7c:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8020f7e:	683b      	ldr	r3, [r7, #0]
 8020f80:	221a      	movs	r2, #26
 8020f82:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8020f84:	683b      	ldr	r3, [r7, #0]
 8020f86:	689b      	ldr	r3, [r3, #8]
}
 8020f88:	4618      	mov	r0, r3
 8020f8a:	3708      	adds	r7, #8
 8020f8c:	46bd      	mov	sp, r7
 8020f8e:	bd80      	pop	{r7, pc}

08020f90 <scpiLex_SpecificCharacter>:
 * Detect specified character
 * @param state
 * @param token
 * @return 
 */
int scpiLex_SpecificCharacter(lex_state_t * state, scpi_token_t * token, char chr) {
 8020f90:	b580      	push	{r7, lr}
 8020f92:	b084      	sub	sp, #16
 8020f94:	af00      	add	r7, sp, #0
 8020f96:	60f8      	str	r0, [r7, #12]
 8020f98:	60b9      	str	r1, [r7, #8]
 8020f9a:	4613      	mov	r3, r2
 8020f9c:	71fb      	strb	r3, [r7, #7]
    token->ptr = state->pos;
 8020f9e:	68fb      	ldr	r3, [r7, #12]
 8020fa0:	685a      	ldr	r2, [r3, #4]
 8020fa2:	68bb      	ldr	r3, [r7, #8]
 8020fa4:	605a      	str	r2, [r3, #4]

    if (skipChr(state, chr)) {
 8020fa6:	79fb      	ldrb	r3, [r7, #7]
 8020fa8:	4619      	mov	r1, r3
 8020faa:	68f8      	ldr	r0, [r7, #12]
 8020fac:	f7ff f93e 	bl	802022c <skipChr>
 8020fb0:	4603      	mov	r3, r0
 8020fb2:	2b00      	cmp	r3, #0
 8020fb4:	d006      	beq.n	8020fc4 <scpiLex_SpecificCharacter+0x34>
        token->len = 1;
 8020fb6:	68bb      	ldr	r3, [r7, #8]
 8020fb8:	2201      	movs	r2, #1
 8020fba:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_SPECIFIC_CHARACTER;
 8020fbc:	68bb      	ldr	r3, [r7, #8]
 8020fbe:	2203      	movs	r2, #3
 8020fc0:	701a      	strb	r2, [r3, #0]
 8020fc2:	e005      	b.n	8020fd0 <scpiLex_SpecificCharacter+0x40>
    } else {
        token->len = 0;
 8020fc4:	68bb      	ldr	r3, [r7, #8]
 8020fc6:	2200      	movs	r2, #0
 8020fc8:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8020fca:	68bb      	ldr	r3, [r7, #8]
 8020fcc:	221a      	movs	r2, #26
 8020fce:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8020fd0:	68bb      	ldr	r3, [r7, #8]
 8020fd2:	689b      	ldr	r3, [r3, #8]
}
 8020fd4:	4618      	mov	r0, r3
 8020fd6:	3710      	adds	r7, #16
 8020fd8:	46bd      	mov	sp, r7
 8020fda:	bd80      	pop	{r7, pc}

08020fdc <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 8020fdc:	b580      	push	{r7, lr}
 8020fde:	b082      	sub	sp, #8
 8020fe0:	af00      	add	r7, sp, #0
 8020fe2:	6078      	str	r0, [r7, #4]
 8020fe4:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	685a      	ldr	r2, [r3, #4]
 8020fea:	683b      	ldr	r3, [r7, #0]
 8020fec:	605a      	str	r2, [r3, #4]

    skipChr(state, '\r');
 8020fee:	210d      	movs	r1, #13
 8020ff0:	6878      	ldr	r0, [r7, #4]
 8020ff2:	f7ff f91b 	bl	802022c <skipChr>
    skipChr(state, '\n');
 8020ff6:	210a      	movs	r1, #10
 8020ff8:	6878      	ldr	r0, [r7, #4]
 8020ffa:	f7ff f917 	bl	802022c <skipChr>

    token->len = state->pos - token->ptr;
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	685a      	ldr	r2, [r3, #4]
 8021002:	683b      	ldr	r3, [r7, #0]
 8021004:	685b      	ldr	r3, [r3, #4]
 8021006:	1ad2      	subs	r2, r2, r3
 8021008:	683b      	ldr	r3, [r7, #0]
 802100a:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 802100c:	683b      	ldr	r3, [r7, #0]
 802100e:	689b      	ldr	r3, [r3, #8]
 8021010:	2b00      	cmp	r3, #0
 8021012:	dd03      	ble.n	802101c <scpiLex_NewLine+0x40>
        token->type = SCPI_TOKEN_NL;
 8021014:	683b      	ldr	r3, [r7, #0]
 8021016:	2205      	movs	r2, #5
 8021018:	701a      	strb	r2, [r3, #0]
 802101a:	e009      	b.n	8021030 <scpiLex_NewLine+0x54>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 802101c:	683b      	ldr	r3, [r7, #0]
 802101e:	221a      	movs	r2, #26
 8021020:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8021022:	683b      	ldr	r3, [r7, #0]
 8021024:	685a      	ldr	r2, [r3, #4]
 8021026:	687b      	ldr	r3, [r7, #4]
 8021028:	605a      	str	r2, [r3, #4]
        token->len = 0;
 802102a:	683b      	ldr	r3, [r7, #0]
 802102c:	2200      	movs	r2, #0
 802102e:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 8021030:	683b      	ldr	r3, [r7, #0]
 8021032:	689b      	ldr	r3, [r3, #8]
}
 8021034:	4618      	mov	r0, r3
 8021036:	3708      	adds	r7, #8
 8021038:	46bd      	mov	sp, r7
 802103a:	bd80      	pop	{r7, pc}

0802103c <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 802103c:	b580      	push	{r7, lr}
 802103e:	b082      	sub	sp, #8
 8021040:	af00      	add	r7, sp, #0
 8021042:	6078      	str	r0, [r7, #4]
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 8021044:	2206      	movs	r2, #6
 8021046:	4904      	ldr	r1, [pc, #16]	; (8021058 <SCPI_SystemVersionQ+0x1c>)
 8021048:	6878      	ldr	r0, [r7, #4]
 802104a:	f000 fb0c 	bl	8021666 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 802104e:	2301      	movs	r3, #1
}
 8021050:	4618      	mov	r0, r3
 8021052:	3708      	adds	r7, #8
 8021054:	46bd      	mov	sp, r7
 8021056:	bd80      	pop	{r7, pc}
 8021058:	0802cee4 	.word	0x0802cee4

0802105c <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 802105c:	b580      	push	{r7, lr}
 802105e:	b084      	sub	sp, #16
 8021060:	af00      	add	r7, sp, #0
 8021062:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 8021064:	f107 030c 	add.w	r3, r7, #12
 8021068:	4619      	mov	r1, r3
 802106a:	6878      	ldr	r0, [r7, #4]
 802106c:	f7fd ff54 	bl	801ef18 <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 8021070:	f107 030c 	add.w	r3, r7, #12
 8021074:	4619      	mov	r1, r3
 8021076:	6878      	ldr	r0, [r7, #4]
 8021078:	f000 fc0a 	bl	8021890 <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
 802107c:	2301      	movs	r3, #1
}
 802107e:	4618      	mov	r0, r3
 8021080:	3710      	adds	r7, #16
 8021082:	46bd      	mov	sp, r7
 8021084:	bd80      	pop	{r7, pc}

08021086 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 8021086:	b580      	push	{r7, lr}
 8021088:	b082      	sub	sp, #8
 802108a:	af00      	add	r7, sp, #0
 802108c:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 802108e:	6878      	ldr	r0, [r7, #4]
 8021090:	f7fd ff60 	bl	801ef54 <SCPI_ErrorCount>
 8021094:	4603      	mov	r3, r0
 8021096:	4619      	mov	r1, r3
 8021098:	6878      	ldr	r0, [r7, #4]
 802109a:	f000 fb72 	bl	8021782 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 802109e:	2301      	movs	r3, #1
}
 80210a0:	4618      	mov	r0, r3
 80210a2:	3708      	adds	r7, #8
 80210a4:	46bd      	mov	sp, r7
 80210a6:	bd80      	pop	{r7, pc}

080210a8 <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
 80210a8:	b580      	push	{r7, lr}
 80210aa:	b082      	sub	sp, #8
 80210ac:	af00      	add	r7, sp, #0
 80210ae:	6078      	str	r0, [r7, #4]
    /* return value */
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_QUES));
 80210b0:	2107      	movs	r1, #7
 80210b2:	6878      	ldr	r0, [r7, #4]
 80210b4:	f7fe fd23 	bl	801fafe <SCPI_RegGet>
 80210b8:	4603      	mov	r3, r0
 80210ba:	4619      	mov	r1, r3
 80210bc:	6878      	ldr	r0, [r7, #4]
 80210be:	f000 fb60 	bl	8021782 <SCPI_ResultInt32>

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 80210c2:	2200      	movs	r2, #0
 80210c4:	2107      	movs	r1, #7
 80210c6:	6878      	ldr	r0, [r7, #4]
 80210c8:	f7fe fd54 	bl	801fb74 <SCPI_RegSet>

    return SCPI_RES_OK;
 80210cc:	2301      	movs	r3, #1
}
 80210ce:	4618      	mov	r0, r3
 80210d0:	3708      	adds	r7, #8
 80210d2:	46bd      	mov	sp, r7
 80210d4:	bd80      	pop	{r7, pc}

080210d6 <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
 80210d6:	b580      	push	{r7, lr}
 80210d8:	b082      	sub	sp, #8
 80210da:	af00      	add	r7, sp, #0
 80210dc:	6078      	str	r0, [r7, #4]
    /* return value */
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_QUESE));
 80210de:	2108      	movs	r1, #8
 80210e0:	6878      	ldr	r0, [r7, #4]
 80210e2:	f7fe fd0c 	bl	801fafe <SCPI_RegGet>
 80210e6:	4603      	mov	r3, r0
 80210e8:	4619      	mov	r1, r3
 80210ea:	6878      	ldr	r0, [r7, #4]
 80210ec:	f000 fb49 	bl	8021782 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 80210f0:	2301      	movs	r3, #1
}
 80210f2:	4618      	mov	r0, r3
 80210f4:	3708      	adds	r7, #8
 80210f6:	46bd      	mov	sp, r7
 80210f8:	bd80      	pop	{r7, pc}

080210fa <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
 80210fa:	b580      	push	{r7, lr}
 80210fc:	b084      	sub	sp, #16
 80210fe:	af00      	add	r7, sp, #0
 8021100:	6078      	str	r0, [r7, #4]
    int32_t new_QUESE;
    if (SCPI_ParamInt32(context, &new_QUESE, TRUE)) {
 8021102:	f107 030c 	add.w	r3, r7, #12
 8021106:	2201      	movs	r2, #1
 8021108:	4619      	mov	r1, r3
 802110a:	6878      	ldr	r0, [r7, #4]
 802110c:	f000 ff84 	bl	8022018 <SCPI_ParamInt32>
 8021110:	4603      	mov	r3, r0
 8021112:	2b00      	cmp	r3, #0
 8021114:	d006      	beq.n	8021124 <SCPI_StatusQuestionableEnable+0x2a>
        SCPI_RegSet(context, SCPI_REG_QUESE, (scpi_reg_val_t) new_QUESE);
 8021116:	68fb      	ldr	r3, [r7, #12]
 8021118:	b29b      	uxth	r3, r3
 802111a:	461a      	mov	r2, r3
 802111c:	2108      	movs	r1, #8
 802111e:	6878      	ldr	r0, [r7, #4]
 8021120:	f7fe fd28 	bl	801fb74 <SCPI_RegSet>
    }
    return SCPI_RES_OK;
 8021124:	2301      	movs	r3, #1
}
 8021126:	4618      	mov	r0, r3
 8021128:	3710      	adds	r7, #16
 802112a:	46bd      	mov	sp, r7
 802112c:	bd80      	pop	{r7, pc}

0802112e <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
 802112e:	b580      	push	{r7, lr}
 8021130:	b082      	sub	sp, #8
 8021132:	af00      	add	r7, sp, #0
 8021134:	6078      	str	r0, [r7, #4]
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 8021136:	2200      	movs	r2, #0
 8021138:	2107      	movs	r1, #7
 802113a:	6878      	ldr	r0, [r7, #4]
 802113c:	f7fe fd1a 	bl	801fb74 <SCPI_RegSet>
    return SCPI_RES_OK;
 8021140:	2301      	movs	r3, #1
}
 8021142:	4618      	mov	r0, r3
 8021144:	3708      	adds	r7, #8
 8021146:	46bd      	mov	sp, r7
 8021148:	bd80      	pop	{r7, pc}

0802114a <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 802114a:	b580      	push	{r7, lr}
 802114c:	b084      	sub	sp, #16
 802114e:	af00      	add	r7, sp, #0
 8021150:	60f8      	str	r0, [r7, #12]
 8021152:	60b9      	str	r1, [r7, #8]
 8021154:	607a      	str	r2, [r7, #4]
    if (len > 0) {
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	2b00      	cmp	r3, #0
 802115a:	d008      	beq.n	802116e <writeData+0x24>
        return context->interface->write(context, data, len);
 802115c:	68fb      	ldr	r3, [r7, #12]
 802115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021160:	685b      	ldr	r3, [r3, #4]
 8021162:	687a      	ldr	r2, [r7, #4]
 8021164:	68b9      	ldr	r1, [r7, #8]
 8021166:	68f8      	ldr	r0, [r7, #12]
 8021168:	4798      	blx	r3
 802116a:	4603      	mov	r3, r0
 802116c:	e000      	b.n	8021170 <writeData+0x26>
    } else {
        return 0;
 802116e:	2300      	movs	r3, #0
    }
}
 8021170:	4618      	mov	r0, r3
 8021172:	3710      	adds	r7, #16
 8021174:	46bd      	mov	sp, r7
 8021176:	bd80      	pop	{r7, pc}

08021178 <flushData>:
/**
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
 8021178:	b580      	push	{r7, lr}
 802117a:	b082      	sub	sp, #8
 802117c:	af00      	add	r7, sp, #0
 802117e:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->flush) {
 8021180:	687b      	ldr	r3, [r7, #4]
 8021182:	2b00      	cmp	r3, #0
 8021184:	d00f      	beq.n	80211a6 <flushData+0x2e>
 8021186:	687b      	ldr	r3, [r7, #4]
 8021188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802118a:	2b00      	cmp	r3, #0
 802118c:	d00b      	beq.n	80211a6 <flushData+0x2e>
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021192:	68db      	ldr	r3, [r3, #12]
 8021194:	2b00      	cmp	r3, #0
 8021196:	d006      	beq.n	80211a6 <flushData+0x2e>
        return context->interface->flush(context);
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802119c:	68db      	ldr	r3, [r3, #12]
 802119e:	6878      	ldr	r0, [r7, #4]
 80211a0:	4798      	blx	r3
 80211a2:	4603      	mov	r3, r0
 80211a4:	e000      	b.n	80211a8 <flushData+0x30>
    } else {
        return SCPI_RES_OK;
 80211a6:	2301      	movs	r3, #1
    }
}
 80211a8:	4618      	mov	r0, r3
 80211aa:	3708      	adds	r7, #8
 80211ac:	46bd      	mov	sp, r7
 80211ae:	bd80      	pop	{r7, pc}

080211b0 <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
 80211b0:	b580      	push	{r7, lr}
 80211b2:	b082      	sub	sp, #8
 80211b4:	af00      	add	r7, sp, #0
 80211b6:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211bc:	2b00      	cmp	r3, #0
 80211be:	dd06      	ble.n	80211ce <writeDelimiter+0x1e>
        return writeData(context, ",", 1);
 80211c0:	2201      	movs	r2, #1
 80211c2:	4905      	ldr	r1, [pc, #20]	; (80211d8 <writeDelimiter+0x28>)
 80211c4:	6878      	ldr	r0, [r7, #4]
 80211c6:	f7ff ffc0 	bl	802114a <writeData>
 80211ca:	4603      	mov	r3, r0
 80211cc:	e000      	b.n	80211d0 <writeDelimiter+0x20>
    } else {
        return 0;
 80211ce:	2300      	movs	r3, #0
    }
}
 80211d0:	4618      	mov	r0, r3
 80211d2:	3708      	adds	r7, #8
 80211d4:	46bd      	mov	sp, r7
 80211d6:	bd80      	pop	{r7, pc}
 80211d8:	0802ceec 	.word	0x0802ceec

080211dc <writeNewLine>:
/**
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
 80211dc:	b580      	push	{r7, lr}
 80211de:	b084      	sub	sp, #16
 80211e0:	af00      	add	r7, sp, #0
 80211e2:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211e8:	2b00      	cmp	r3, #0
 80211ea:	dd0a      	ble.n	8021202 <writeNewLine+0x26>
        size_t len;
#ifndef SCPI_LINE_ENDING
#error no termination character defined
#endif
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 80211ec:	2202      	movs	r2, #2
 80211ee:	4907      	ldr	r1, [pc, #28]	; (802120c <writeNewLine+0x30>)
 80211f0:	6878      	ldr	r0, [r7, #4]
 80211f2:	f7ff ffaa 	bl	802114a <writeData>
 80211f6:	60f8      	str	r0, [r7, #12]
        flushData(context);
 80211f8:	6878      	ldr	r0, [r7, #4]
 80211fa:	f7ff ffbd 	bl	8021178 <flushData>
        return len;
 80211fe:	68fb      	ldr	r3, [r7, #12]
 8021200:	e000      	b.n	8021204 <writeNewLine+0x28>
    } else {
        return 0;
 8021202:	2300      	movs	r3, #0
    }
}
 8021204:	4618      	mov	r0, r3
 8021206:	3710      	adds	r7, #16
 8021208:	46bd      	mov	sp, r7
 802120a:	bd80      	pop	{r7, pc}
 802120c:	0802cef0 	.word	0x0802cef0

08021210 <writeSemicolon>:
/**
 * Conditionaly write ";"
 * @param context
 * @return number of characters written
 */
static size_t writeSemicolon(scpi_t * context) {
 8021210:	b580      	push	{r7, lr}
 8021212:	b082      	sub	sp, #8
 8021214:	af00      	add	r7, sp, #0
 8021216:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 8021218:	687b      	ldr	r3, [r7, #4]
 802121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802121c:	2b00      	cmp	r3, #0
 802121e:	dd06      	ble.n	802122e <writeSemicolon+0x1e>
        return writeData(context, ";", 1);
 8021220:	2201      	movs	r2, #1
 8021222:	4905      	ldr	r1, [pc, #20]	; (8021238 <writeSemicolon+0x28>)
 8021224:	6878      	ldr	r0, [r7, #4]
 8021226:	f7ff ff90 	bl	802114a <writeData>
 802122a:	4603      	mov	r3, r0
 802122c:	e000      	b.n	8021230 <writeSemicolon+0x20>
    } else {
        return 0;
 802122e:	2300      	movs	r3, #0
    }
}
 8021230:	4618      	mov	r0, r3
 8021232:	3708      	adds	r7, #8
 8021234:	46bd      	mov	sp, r7
 8021236:	bd80      	pop	{r7, pc}
 8021238:	0802cef4 	.word	0x0802cef4

0802123c <processCommand>:

/**
 * Process command
 * @param context
 */
static scpi_bool_t processCommand(scpi_t * context) {
 802123c:	b580      	push	{r7, lr}
 802123e:	b086      	sub	sp, #24
 8021240:	af00      	add	r7, sp, #0
 8021242:	6078      	str	r0, [r7, #4]
    const scpi_command_t * cmd = context->param_list.cmd;
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	691b      	ldr	r3, [r3, #16]
 8021248:	613b      	str	r3, [r7, #16]
    lex_state_t * state = &context->param_list.lex_state;
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	3314      	adds	r3, #20
 802124e:	60fb      	str	r3, [r7, #12]
    scpi_bool_t result = TRUE;
 8021250:	2301      	movs	r3, #1
 8021252:	75fb      	strb	r3, [r7, #23]

    /* conditionaly write ; */
    writeSemicolon(context);
 8021254:	6878      	ldr	r0, [r7, #4]
 8021256:	f7ff ffdb 	bl	8021210 <writeSemicolon>

    context->cmd_error = FALSE;
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	2200      	movs	r2, #0
 802125e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    context->output_count = 0;
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	2200      	movs	r2, #0
 8021266:	631a      	str	r2, [r3, #48]	; 0x30
    context->input_count = 0;
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	2200      	movs	r2, #0
 802126c:	635a      	str	r2, [r3, #52]	; 0x34
    context->arbitrary_reminding = 0;
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	2200      	movs	r2, #0
 8021272:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
 8021276:	693b      	ldr	r3, [r7, #16]
 8021278:	685b      	ldr	r3, [r3, #4]
 802127a:	2b00      	cmp	r3, #0
 802127c:	d01d      	beq.n	80212ba <processCommand+0x7e>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 802127e:	693b      	ldr	r3, [r7, #16]
 8021280:	685b      	ldr	r3, [r3, #4]
 8021282:	6878      	ldr	r0, [r7, #4]
 8021284:	4798      	blx	r3
 8021286:	4603      	mov	r3, r0
 8021288:	2b01      	cmp	r3, #1
 802128a:	d00f      	beq.n	80212ac <processCommand+0x70>
            if (!context->cmd_error) {
 802128c:	687b      	ldr	r3, [r7, #4]
 802128e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8021292:	f083 0301 	eor.w	r3, r3, #1
 8021296:	b2db      	uxtb	r3, r3
 8021298:	2b00      	cmp	r3, #0
 802129a:	d004      	beq.n	80212a6 <processCommand+0x6a>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 802129c:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80212a0:	6878      	ldr	r0, [r7, #4]
 80212a2:	f7fd ff15 	bl	801f0d0 <SCPI_ErrorPush>
            }
            result = FALSE;
 80212a6:	2300      	movs	r3, #0
 80212a8:	75fb      	strb	r3, [r7, #23]
 80212aa:	e006      	b.n	80212ba <processCommand+0x7e>
        } else {
            if (context->cmd_error) {
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	d001      	beq.n	80212ba <processCommand+0x7e>
                result = FALSE;
 80212b6:	2300      	movs	r3, #0
 80212b8:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    /* set error if command callback did not read all parameters */
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 80212ba:	68fb      	ldr	r3, [r7, #12]
 80212bc:	685a      	ldr	r2, [r3, #4]
 80212be:	68fb      	ldr	r3, [r7, #12]
 80212c0:	681b      	ldr	r3, [r3, #0]
 80212c2:	68f9      	ldr	r1, [r7, #12]
 80212c4:	6889      	ldr	r1, [r1, #8]
 80212c6:	440b      	add	r3, r1
 80212c8:	429a      	cmp	r2, r3
 80212ca:	d20e      	bcs.n	80212ea <processCommand+0xae>
 80212cc:	687b      	ldr	r3, [r7, #4]
 80212ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80212d2:	f083 0301 	eor.w	r3, r3, #1
 80212d6:	b2db      	uxtb	r3, r3
 80212d8:	2b00      	cmp	r3, #0
 80212da:	d006      	beq.n	80212ea <processCommand+0xae>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 80212dc:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 80212e0:	6878      	ldr	r0, [r7, #4]
 80212e2:	f7fd fef5 	bl	801f0d0 <SCPI_ErrorPush>
        result = FALSE;
 80212e6:	2300      	movs	r3, #0
 80212e8:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 80212ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80212ec:	4618      	mov	r0, r3
 80212ee:	3718      	adds	r7, #24
 80212f0:	46bd      	mov	sp, r7
 80212f2:	bd80      	pop	{r7, pc}

080212f4 <findCommandHeader>:
/**
 * Cycle all patterns and search matching pattern. Execute command callback.
 * @param context
 * @result TRUE if context->paramlist is filled with correct values
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
 80212f4:	b580      	push	{r7, lr}
 80212f6:	b088      	sub	sp, #32
 80212f8:	af02      	add	r7, sp, #8
 80212fa:	60f8      	str	r0, [r7, #12]
 80212fc:	60b9      	str	r1, [r7, #8]
 80212fe:	607a      	str	r2, [r7, #4]
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8021300:	2300      	movs	r3, #0
 8021302:	617b      	str	r3, [r7, #20]
 8021304:	e01e      	b.n	8021344 <findCommandHeader+0x50>
        cmd = &context->cmdlist[i];
 8021306:	68fb      	ldr	r3, [r7, #12]
 8021308:	6819      	ldr	r1, [r3, #0]
 802130a:	697a      	ldr	r2, [r7, #20]
 802130c:	4613      	mov	r3, r2
 802130e:	005b      	lsls	r3, r3, #1
 8021310:	4413      	add	r3, r2
 8021312:	009b      	lsls	r3, r3, #2
 8021314:	440b      	add	r3, r1
 8021316:	613b      	str	r3, [r7, #16]
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 8021318:	693b      	ldr	r3, [r7, #16]
 802131a:	6818      	ldr	r0, [r3, #0]
 802131c:	687a      	ldr	r2, [r7, #4]
 802131e:	2300      	movs	r3, #0
 8021320:	9301      	str	r3, [sp, #4]
 8021322:	2300      	movs	r3, #0
 8021324:	9300      	str	r3, [sp, #0]
 8021326:	2300      	movs	r3, #0
 8021328:	68b9      	ldr	r1, [r7, #8]
 802132a:	f001 feba 	bl	80230a2 <matchCommand>
 802132e:	4603      	mov	r3, r0
 8021330:	2b00      	cmp	r3, #0
 8021332:	d004      	beq.n	802133e <findCommandHeader+0x4a>
            context->param_list.cmd = cmd;
 8021334:	68fb      	ldr	r3, [r7, #12]
 8021336:	693a      	ldr	r2, [r7, #16]
 8021338:	611a      	str	r2, [r3, #16]
            return TRUE;
 802133a:	2301      	movs	r3, #1
 802133c:	e00e      	b.n	802135c <findCommandHeader+0x68>
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 802133e:	697b      	ldr	r3, [r7, #20]
 8021340:	3301      	adds	r3, #1
 8021342:	617b      	str	r3, [r7, #20]
 8021344:	68fb      	ldr	r3, [r7, #12]
 8021346:	6819      	ldr	r1, [r3, #0]
 8021348:	697a      	ldr	r2, [r7, #20]
 802134a:	4613      	mov	r3, r2
 802134c:	005b      	lsls	r3, r3, #1
 802134e:	4413      	add	r3, r2
 8021350:	009b      	lsls	r3, r3, #2
 8021352:	440b      	add	r3, r1
 8021354:	681b      	ldr	r3, [r3, #0]
 8021356:	2b00      	cmp	r3, #0
 8021358:	d1d5      	bne.n	8021306 <findCommandHeader+0x12>
        }
    }
    return FALSE;
 802135a:	2300      	movs	r3, #0
}
 802135c:	4618      	mov	r0, r3
 802135e:	3718      	adds	r7, #24
 8021360:	46bd      	mov	sp, r7
 8021362:	bd80      	pop	{r7, pc}

08021364 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return FALSE if there was some error during evaluation of commands
 */
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 8021364:	b580      	push	{r7, lr}
 8021366:	b08c      	sub	sp, #48	; 0x30
 8021368:	af00      	add	r7, sp, #0
 802136a:	60f8      	str	r0, [r7, #12]
 802136c:	60b9      	str	r1, [r7, #8]
 802136e:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 8021370:	2301      	movs	r3, #1
 8021372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scpi_parser_state_t * state;
    int r;
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 8021376:	231a      	movs	r3, #26
 8021378:	753b      	strb	r3, [r7, #20]
 802137a:	2300      	movs	r3, #0
 802137c:	61bb      	str	r3, [r7, #24]
 802137e:	2300      	movs	r3, #0
 8021380:	61fb      	str	r3, [r7, #28]

    if (context == NULL) {
 8021382:	68fb      	ldr	r3, [r7, #12]
 8021384:	2b00      	cmp	r3, #0
 8021386:	d101      	bne.n	802138c <SCPI_Parse+0x28>
        return FALSE;
 8021388:	2300      	movs	r3, #0
 802138a:	e08f      	b.n	80214ac <SCPI_Parse+0x148>
    }

    state = &context->parser_state;
 802138c:	68fb      	ldr	r3, [r7, #12]
 802138e:	3364      	adds	r3, #100	; 0x64
 8021390:	627b      	str	r3, [r7, #36]	; 0x24
    context->output_count = 0;
 8021392:	68fb      	ldr	r3, [r7, #12]
 8021394:	2200      	movs	r2, #0
 8021396:	631a      	str	r2, [r3, #48]	; 0x30

    while (1) {
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 8021398:	687a      	ldr	r2, [r7, #4]
 802139a:	68b9      	ldr	r1, [r7, #8]
 802139c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802139e:	f001 f89c 	bl	80224da <scpiParser_detectProgramMessageUnit>
 80213a2:	6238      	str	r0, [r7, #32]

        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 80213a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213a6:	781b      	ldrb	r3, [r3, #0]
 80213a8:	2b19      	cmp	r3, #25
 80213aa:	d108      	bne.n	80213be <SCPI_Parse+0x5a>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER);
 80213ac:	f06f 0164 	mvn.w	r1, #100	; 0x64
 80213b0:	68f8      	ldr	r0, [r7, #12]
 80213b2:	f7fd fe8d 	bl	801f0d0 <SCPI_ErrorPush>
            result = FALSE;
 80213b6:	2300      	movs	r3, #0
 80213b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80213bc:	e063      	b.n	8021486 <SCPI_Parse+0x122>
        } else if (state->programHeader.len > 0) {
 80213be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213c0:	689b      	ldr	r3, [r3, #8]
 80213c2:	2b00      	cmp	r3, #0
 80213c4:	dd5f      	ble.n	8021486 <SCPI_Parse+0x122>

            composeCompoundCommand(&cmd_prev, &state->programHeader);
 80213c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80213c8:	f107 0314 	add.w	r3, r7, #20
 80213cc:	4611      	mov	r1, r2
 80213ce:	4618      	mov	r0, r3
 80213d0:	f002 f830 	bl	8023434 <composeCompoundCommand>

            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 80213d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213d6:	6859      	ldr	r1, [r3, #4]
 80213d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213da:	689b      	ldr	r3, [r3, #8]
 80213dc:	461a      	mov	r2, r3
 80213de:	68f8      	ldr	r0, [r7, #12]
 80213e0:	f7ff ff88 	bl	80212f4 <findCommandHeader>
 80213e4:	4603      	mov	r3, r0
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d02c      	beq.n	8021444 <SCPI_Parse+0xe0>

                context->param_list.lex_state.buffer = state->programData.ptr;
 80213ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213ec:	691a      	ldr	r2, [r3, #16]
 80213ee:	68fb      	ldr	r3, [r7, #12]
 80213f0:	615a      	str	r2, [r3, #20]
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 80213f2:	68fb      	ldr	r3, [r7, #12]
 80213f4:	695a      	ldr	r2, [r3, #20]
 80213f6:	68fb      	ldr	r3, [r7, #12]
 80213f8:	619a      	str	r2, [r3, #24]
                context->param_list.lex_state.len = state->programData.len;
 80213fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213fc:	695a      	ldr	r2, [r3, #20]
 80213fe:	68fb      	ldr	r3, [r7, #12]
 8021400:	61da      	str	r2, [r3, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 8021402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021404:	685a      	ldr	r2, [r3, #4]
 8021406:	68fb      	ldr	r3, [r7, #12]
 8021408:	629a      	str	r2, [r3, #40]	; 0x28
                context->param_list.cmd_raw.position = 0;
 802140a:	68fb      	ldr	r3, [r7, #12]
 802140c:	2200      	movs	r2, #0
 802140e:	625a      	str	r2, [r3, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 8021410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021412:	689b      	ldr	r3, [r3, #8]
 8021414:	461a      	mov	r2, r3
 8021416:	68fb      	ldr	r3, [r7, #12]
 8021418:	621a      	str	r2, [r3, #32]

                result &= processCommand(context);
 802141a:	68f8      	ldr	r0, [r7, #12]
 802141c:	f7ff ff0e 	bl	802123c <processCommand>
 8021420:	4603      	mov	r3, r0
 8021422:	461a      	mov	r2, r3
 8021424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021428:	4013      	ands	r3, r2
 802142a:	2b00      	cmp	r3, #0
 802142c:	bf14      	ite	ne
 802142e:	2301      	movne	r3, #1
 8021430:	2300      	moveq	r3, #0
 8021432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                cmd_prev = state->programHeader;
 8021436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021438:	f107 0314 	add.w	r3, r7, #20
 802143c:	ca07      	ldmia	r2, {r0, r1, r2}
 802143e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8021442:	e020      	b.n	8021486 <SCPI_Parse+0x122>
            } else {
                /* place undefined header with error */
                /* calculate length of errornouse header and trim \r\n */
                size_t r2 = r;
 8021444:	6a3b      	ldr	r3, [r7, #32]
 8021446:	62bb      	str	r3, [r7, #40]	; 0x28
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 8021448:	e002      	b.n	8021450 <SCPI_Parse+0xec>
 802144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802144c:	3b01      	subs	r3, #1
 802144e:	62bb      	str	r3, [r7, #40]	; 0x28
 8021450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021452:	2b00      	cmp	r3, #0
 8021454:	d00d      	beq.n	8021472 <SCPI_Parse+0x10e>
 8021456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021458:	3b01      	subs	r3, #1
 802145a:	68ba      	ldr	r2, [r7, #8]
 802145c:	4413      	add	r3, r2
 802145e:	781b      	ldrb	r3, [r3, #0]
 8021460:	2b0d      	cmp	r3, #13
 8021462:	d0f2      	beq.n	802144a <SCPI_Parse+0xe6>
 8021464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021466:	3b01      	subs	r3, #1
 8021468:	68ba      	ldr	r2, [r7, #8]
 802146a:	4413      	add	r3, r2
 802146c:	781b      	ldrb	r3, [r3, #0]
 802146e:	2b0a      	cmp	r3, #10
 8021470:	d0eb      	beq.n	802144a <SCPI_Parse+0xe6>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 8021472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021474:	68ba      	ldr	r2, [r7, #8]
 8021476:	f06f 0170 	mvn.w	r1, #112	; 0x70
 802147a:	68f8      	ldr	r0, [r7, #12]
 802147c:	f7fd fdb2 	bl	801efe4 <SCPI_ErrorPushEx>
                result = FALSE;
 8021480:	2300      	movs	r3, #0
 8021482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        if (r < len) {
 8021486:	6a3a      	ldr	r2, [r7, #32]
 8021488:	687b      	ldr	r3, [r7, #4]
 802148a:	429a      	cmp	r2, r3
 802148c:	da08      	bge.n	80214a0 <SCPI_Parse+0x13c>
            data += r;
 802148e:	6a3b      	ldr	r3, [r7, #32]
 8021490:	68ba      	ldr	r2, [r7, #8]
 8021492:	4413      	add	r3, r2
 8021494:	60bb      	str	r3, [r7, #8]
            len -= r;
 8021496:	687a      	ldr	r2, [r7, #4]
 8021498:	6a3b      	ldr	r3, [r7, #32]
 802149a:	1ad3      	subs	r3, r2, r3
 802149c:	607b      	str	r3, [r7, #4]
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 802149e:	e77b      	b.n	8021398 <SCPI_Parse+0x34>
        } else {
            break;
 80214a0:	bf00      	nop
        }

    }

    /* conditionaly write new line */
    writeNewLine(context);
 80214a2:	68f8      	ldr	r0, [r7, #12]
 80214a4:	f7ff fe9a 	bl	80211dc <writeNewLine>

    return result;
 80214a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80214ac:	4618      	mov	r0, r3
 80214ae:	3730      	adds	r7, #48	; 0x30
 80214b0:	46bd      	mov	sp, r7
 80214b2:	bd80      	pop	{r7, pc}

080214b4 <SCPI_Init>:
        const scpi_command_t * commands,
        scpi_interface_t * interface,
        const scpi_unit_def_t * units,
        const char * idn1, const char * idn2, const char * idn3, const char * idn4,
        char * input_buffer, size_t input_buffer_length,
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 80214b4:	b580      	push	{r7, lr}
 80214b6:	b084      	sub	sp, #16
 80214b8:	af00      	add	r7, sp, #0
 80214ba:	60f8      	str	r0, [r7, #12]
 80214bc:	60b9      	str	r1, [r7, #8]
 80214be:	607a      	str	r2, [r7, #4]
 80214c0:	603b      	str	r3, [r7, #0]
    memset(context, 0, sizeof (*context));
 80214c2:	2298      	movs	r2, #152	; 0x98
 80214c4:	2100      	movs	r1, #0
 80214c6:	68f8      	ldr	r0, [r7, #12]
 80214c8:	f002 fa8b 	bl	80239e2 <memset>
    context->cmdlist = commands;
 80214cc:	68fb      	ldr	r3, [r7, #12]
 80214ce:	68ba      	ldr	r2, [r7, #8]
 80214d0:	601a      	str	r2, [r3, #0]
    context->interface = interface;
 80214d2:	68fb      	ldr	r3, [r7, #12]
 80214d4:	687a      	ldr	r2, [r7, #4]
 80214d6:	62da      	str	r2, [r3, #44]	; 0x2c
    context->units = units;
 80214d8:	68fb      	ldr	r3, [r7, #12]
 80214da:	683a      	ldr	r2, [r7, #0]
 80214dc:	65da      	str	r2, [r3, #92]	; 0x5c
    context->idn[0] = idn1;
 80214de:	68fb      	ldr	r3, [r7, #12]
 80214e0:	69ba      	ldr	r2, [r7, #24]
 80214e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    context->idn[1] = idn2;
 80214e6:	68fb      	ldr	r3, [r7, #12]
 80214e8:	69fa      	ldr	r2, [r7, #28]
 80214ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    context->idn[2] = idn3;
 80214ee:	68fb      	ldr	r3, [r7, #12]
 80214f0:	6a3a      	ldr	r2, [r7, #32]
 80214f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    context->idn[3] = idn4;
 80214f6:	68fb      	ldr	r3, [r7, #12]
 80214f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80214fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    context->buffer.data = input_buffer;
 80214fe:	68fb      	ldr	r3, [r7, #12]
 8021500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021502:	60da      	str	r2, [r3, #12]
    context->buffer.length = input_buffer_length;
 8021504:	68fb      	ldr	r3, [r7, #12]
 8021506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021508:	605a      	str	r2, [r3, #4]
    context->buffer.position = 0;
 802150a:	68fb      	ldr	r3, [r7, #12]
 802150c:	2200      	movs	r2, #0
 802150e:	609a      	str	r2, [r3, #8]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8021510:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8021514:	461a      	mov	r2, r3
 8021516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021518:	68f8      	ldr	r0, [r7, #12]
 802151a:	f7fd fc8f 	bl	801ee3c <SCPI_ErrorInit>
}
 802151e:	bf00      	nop
 8021520:	3710      	adds	r7, #16
 8021522:	46bd      	mov	sp, r7
 8021524:	bd80      	pop	{r7, pc}

08021526 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 8021526:	b580      	push	{r7, lr}
 8021528:	b088      	sub	sp, #32
 802152a:	af00      	add	r7, sp, #0
 802152c:	60f8      	str	r0, [r7, #12]
 802152e:	60b9      	str	r1, [r7, #8]
 8021530:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 8021532:	2301      	movs	r3, #1
 8021534:	77fb      	strb	r3, [r7, #31]
    size_t totcmdlen = 0;
 8021536:	2300      	movs	r3, #0
 8021538:	61bb      	str	r3, [r7, #24]
    int cmdlen = 0;
 802153a:	2300      	movs	r3, #0
 802153c:	617b      	str	r3, [r7, #20]

    if (len == 0) {
 802153e:	687b      	ldr	r3, [r7, #4]
 8021540:	2b00      	cmp	r3, #0
 8021542:	d114      	bne.n	802156e <SCPI_Input+0x48>
        context->buffer.data[context->buffer.position] = 0;
 8021544:	68fb      	ldr	r3, [r7, #12]
 8021546:	68da      	ldr	r2, [r3, #12]
 8021548:	68fb      	ldr	r3, [r7, #12]
 802154a:	689b      	ldr	r3, [r3, #8]
 802154c:	4413      	add	r3, r2
 802154e:	2200      	movs	r2, #0
 8021550:	701a      	strb	r2, [r3, #0]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 8021552:	68fb      	ldr	r3, [r7, #12]
 8021554:	68d9      	ldr	r1, [r3, #12]
 8021556:	68fb      	ldr	r3, [r7, #12]
 8021558:	689b      	ldr	r3, [r3, #8]
 802155a:	461a      	mov	r2, r3
 802155c:	68f8      	ldr	r0, [r7, #12]
 802155e:	f7ff ff01 	bl	8021364 <SCPI_Parse>
 8021562:	4603      	mov	r3, r0
 8021564:	77fb      	strb	r3, [r7, #31]
        context->buffer.position = 0;
 8021566:	68fb      	ldr	r3, [r7, #12]
 8021568:	2200      	movs	r2, #0
 802156a:	609a      	str	r2, [r3, #8]
 802156c:	e076      	b.n	802165c <SCPI_Input+0x136>
    } else {
        int buffer_free;

        buffer_free = context->buffer.length - context->buffer.position;
 802156e:	68fb      	ldr	r3, [r7, #12]
 8021570:	685a      	ldr	r2, [r3, #4]
 8021572:	68fb      	ldr	r3, [r7, #12]
 8021574:	689b      	ldr	r3, [r3, #8]
 8021576:	1ad3      	subs	r3, r2, r3
 8021578:	613b      	str	r3, [r7, #16]
        if (len > (buffer_free - 1)) {
 802157a:	693a      	ldr	r2, [r7, #16]
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	429a      	cmp	r2, r3
 8021580:	dc10      	bgt.n	80215a4 <SCPI_Input+0x7e>
            /* Input buffer overrun - invalidate buffer */
            context->buffer.position = 0;
 8021582:	68fb      	ldr	r3, [r7, #12]
 8021584:	2200      	movs	r2, #0
 8021586:	609a      	str	r2, [r3, #8]
            context->buffer.data[context->buffer.position] = 0;
 8021588:	68fb      	ldr	r3, [r7, #12]
 802158a:	68da      	ldr	r2, [r3, #12]
 802158c:	68fb      	ldr	r3, [r7, #12]
 802158e:	689b      	ldr	r3, [r3, #8]
 8021590:	4413      	add	r3, r2
 8021592:	2200      	movs	r2, #0
 8021594:	701a      	strb	r2, [r3, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 8021596:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
 802159a:	68f8      	ldr	r0, [r7, #12]
 802159c:	f7fd fd98 	bl	801f0d0 <SCPI_ErrorPush>
            return FALSE;
 80215a0:	2300      	movs	r3, #0
 80215a2:	e05c      	b.n	802165e <SCPI_Input+0x138>
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 80215a4:	68fb      	ldr	r3, [r7, #12]
 80215a6:	68da      	ldr	r2, [r3, #12]
 80215a8:	68fb      	ldr	r3, [r7, #12]
 80215aa:	689b      	ldr	r3, [r3, #8]
 80215ac:	4413      	add	r3, r2
 80215ae:	687a      	ldr	r2, [r7, #4]
 80215b0:	68b9      	ldr	r1, [r7, #8]
 80215b2:	4618      	mov	r0, r3
 80215b4:	f002 f9ed 	bl	8023992 <memcpy>
        context->buffer.position += len;
 80215b8:	68fb      	ldr	r3, [r7, #12]
 80215ba:	689a      	ldr	r2, [r3, #8]
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	441a      	add	r2, r3
 80215c0:	68fb      	ldr	r3, [r7, #12]
 80215c2:	609a      	str	r2, [r3, #8]
        context->buffer.data[context->buffer.position] = 0;
 80215c4:	68fb      	ldr	r3, [r7, #12]
 80215c6:	68da      	ldr	r2, [r3, #12]
 80215c8:	68fb      	ldr	r3, [r7, #12]
 80215ca:	689b      	ldr	r3, [r3, #8]
 80215cc:	4413      	add	r3, r2
 80215ce:	2200      	movs	r2, #0
 80215d0:	701a      	strb	r2, [r3, #0]


        while (1) {
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 80215d2:	68fb      	ldr	r3, [r7, #12]
 80215d4:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80215d8:	68fb      	ldr	r3, [r7, #12]
 80215da:	68da      	ldr	r2, [r3, #12]
 80215dc:	69bb      	ldr	r3, [r7, #24]
 80215de:	18d1      	adds	r1, r2, r3
 80215e0:	68fb      	ldr	r3, [r7, #12]
 80215e2:	689a      	ldr	r2, [r3, #8]
 80215e4:	69bb      	ldr	r3, [r7, #24]
 80215e6:	1ad3      	subs	r3, r2, r3
 80215e8:	461a      	mov	r2, r3
 80215ea:	f000 ff76 	bl	80224da <scpiParser_detectProgramMessageUnit>
 80215ee:	6178      	str	r0, [r7, #20]
            totcmdlen += cmdlen;
 80215f0:	697b      	ldr	r3, [r7, #20]
 80215f2:	69ba      	ldr	r2, [r7, #24]
 80215f4:	4413      	add	r3, r2
 80215f6:	61bb      	str	r3, [r7, #24]

            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 80215f8:	68fb      	ldr	r3, [r7, #12]
 80215fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80215fe:	2b01      	cmp	r3, #1
 8021600:	d11e      	bne.n	8021640 <SCPI_Input+0x11a>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 8021602:	68fb      	ldr	r3, [r7, #12]
 8021604:	68db      	ldr	r3, [r3, #12]
 8021606:	69ba      	ldr	r2, [r7, #24]
 8021608:	4619      	mov	r1, r3
 802160a:	68f8      	ldr	r0, [r7, #12]
 802160c:	f7ff feaa 	bl	8021364 <SCPI_Parse>
 8021610:	4603      	mov	r3, r0
 8021612:	77fb      	strb	r3, [r7, #31]
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8021614:	68fb      	ldr	r3, [r7, #12]
 8021616:	68d8      	ldr	r0, [r3, #12]
 8021618:	68fb      	ldr	r3, [r7, #12]
 802161a:	68da      	ldr	r2, [r3, #12]
 802161c:	69bb      	ldr	r3, [r7, #24]
 802161e:	18d1      	adds	r1, r2, r3
 8021620:	68fb      	ldr	r3, [r7, #12]
 8021622:	689a      	ldr	r2, [r3, #8]
 8021624:	69bb      	ldr	r3, [r7, #24]
 8021626:	1ad3      	subs	r3, r2, r3
 8021628:	461a      	mov	r2, r3
 802162a:	f002 f9c0 	bl	80239ae <memmove>
                context->buffer.position -= totcmdlen;
 802162e:	68fb      	ldr	r3, [r7, #12]
 8021630:	689a      	ldr	r2, [r3, #8]
 8021632:	69bb      	ldr	r3, [r7, #24]
 8021634:	1ad2      	subs	r2, r2, r3
 8021636:	68fb      	ldr	r3, [r7, #12]
 8021638:	609a      	str	r2, [r3, #8]
                totcmdlen = 0;
 802163a:	2300      	movs	r3, #0
 802163c:	61bb      	str	r3, [r7, #24]
 802163e:	e7c8      	b.n	80215d2 <SCPI_Input+0xac>
            } else {
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN) break;
 8021640:	68fb      	ldr	r3, [r7, #12]
 8021642:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8021646:	2b1a      	cmp	r3, #26
 8021648:	d005      	beq.n	8021656 <SCPI_Input+0x130>
                if (totcmdlen >= context->buffer.position) break;
 802164a:	68fb      	ldr	r3, [r7, #12]
 802164c:	689b      	ldr	r3, [r3, #8]
 802164e:	69ba      	ldr	r2, [r7, #24]
 8021650:	429a      	cmp	r2, r3
 8021652:	d202      	bcs.n	802165a <SCPI_Input+0x134>
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8021654:	e7bd      	b.n	80215d2 <SCPI_Input+0xac>
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN) break;
 8021656:	bf00      	nop
 8021658:	e000      	b.n	802165c <SCPI_Input+0x136>
                if (totcmdlen >= context->buffer.position) break;
 802165a:	bf00      	nop
            }
        }
    }

    return result;
 802165c:	7ffb      	ldrb	r3, [r7, #31]
}
 802165e:	4618      	mov	r0, r3
 8021660:	3720      	adds	r7, #32
 8021662:	46bd      	mov	sp, r7
 8021664:	bd80      	pop	{r7, pc}

08021666 <SCPI_ResultCharacters>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 8021666:	b580      	push	{r7, lr}
 8021668:	b086      	sub	sp, #24
 802166a:	af00      	add	r7, sp, #0
 802166c:	60f8      	str	r0, [r7, #12]
 802166e:	60b9      	str	r1, [r7, #8]
 8021670:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 8021672:	2300      	movs	r3, #0
 8021674:	617b      	str	r3, [r7, #20]
    result += writeDelimiter(context);
 8021676:	68f8      	ldr	r0, [r7, #12]
 8021678:	f7ff fd9a 	bl	80211b0 <writeDelimiter>
 802167c:	4602      	mov	r2, r0
 802167e:	697b      	ldr	r3, [r7, #20]
 8021680:	4413      	add	r3, r2
 8021682:	617b      	str	r3, [r7, #20]
    result += writeData(context, data, len);
 8021684:	687a      	ldr	r2, [r7, #4]
 8021686:	68b9      	ldr	r1, [r7, #8]
 8021688:	68f8      	ldr	r0, [r7, #12]
 802168a:	f7ff fd5e 	bl	802114a <writeData>
 802168e:	4602      	mov	r2, r0
 8021690:	697b      	ldr	r3, [r7, #20]
 8021692:	4413      	add	r3, r2
 8021694:	617b      	str	r3, [r7, #20]
    context->output_count++;
 8021696:	68fb      	ldr	r3, [r7, #12]
 8021698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802169a:	1c5a      	adds	r2, r3, #1
 802169c:	68fb      	ldr	r3, [r7, #12]
 802169e:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 80216a0:	697b      	ldr	r3, [r7, #20]
}
 80216a2:	4618      	mov	r0, r3
 80216a4:	3718      	adds	r7, #24
 80216a6:	46bd      	mov	sp, r7
 80216a8:	bd80      	pop	{r7, pc}
	...

080216ac <getBasePrefix>:
/**
 * Return prefix of nondecimal base
 * @param base
 * @return
 */
static const char * getBasePrefix(int8_t base) {
 80216ac:	b480      	push	{r7}
 80216ae:	b083      	sub	sp, #12
 80216b0:	af00      	add	r7, sp, #0
 80216b2:	4603      	mov	r3, r0
 80216b4:	71fb      	strb	r3, [r7, #7]
    switch (base) {
 80216b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80216ba:	2b10      	cmp	r3, #16
 80216bc:	d00a      	beq.n	80216d4 <getBasePrefix+0x28>
 80216be:	2b10      	cmp	r3, #16
 80216c0:	dc0a      	bgt.n	80216d8 <getBasePrefix+0x2c>
 80216c2:	2b02      	cmp	r3, #2
 80216c4:	d002      	beq.n	80216cc <getBasePrefix+0x20>
 80216c6:	2b08      	cmp	r3, #8
 80216c8:	d002      	beq.n	80216d0 <getBasePrefix+0x24>
 80216ca:	e005      	b.n	80216d8 <getBasePrefix+0x2c>
        case 2: return "#B";
 80216cc:	4b06      	ldr	r3, [pc, #24]	; (80216e8 <getBasePrefix+0x3c>)
 80216ce:	e004      	b.n	80216da <getBasePrefix+0x2e>
        case 8: return "#Q";
 80216d0:	4b06      	ldr	r3, [pc, #24]	; (80216ec <getBasePrefix+0x40>)
 80216d2:	e002      	b.n	80216da <getBasePrefix+0x2e>
        case 16: return "#H";
 80216d4:	4b06      	ldr	r3, [pc, #24]	; (80216f0 <getBasePrefix+0x44>)
 80216d6:	e000      	b.n	80216da <getBasePrefix+0x2e>
        default: return NULL;
 80216d8:	2300      	movs	r3, #0
    }
}
 80216da:	4618      	mov	r0, r3
 80216dc:	370c      	adds	r7, #12
 80216de:	46bd      	mov	sp, r7
 80216e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216e4:	4770      	bx	lr
 80216e6:	bf00      	nop
 80216e8:	0802cef8 	.word	0x0802cef8
 80216ec:	0802cefc 	.word	0x0802cefc
 80216f0:	0802cf00 	.word	0x0802cf00

080216f4 <resultUInt32BaseSign>:
 * @param val
 * @param base
 * @param sign
 * @return
 */
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 80216f4:	b580      	push	{r7, lr}
 80216f6:	b092      	sub	sp, #72	; 0x48
 80216f8:	af02      	add	r7, sp, #8
 80216fa:	60f8      	str	r0, [r7, #12]
 80216fc:	60b9      	str	r1, [r7, #8]
 80216fe:	4611      	mov	r1, r2
 8021700:	461a      	mov	r2, r3
 8021702:	460b      	mov	r3, r1
 8021704:	71fb      	strb	r3, [r7, #7]
 8021706:	4613      	mov	r3, r2
 8021708:	71bb      	strb	r3, [r7, #6]
    char buffer[32 + 1];
    const char * basePrefix;
    size_t result = 0;
 802170a:	2300      	movs	r3, #0
 802170c:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t len;

    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 802170e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8021712:	f107 0110 	add.w	r1, r7, #16
 8021716:	79bb      	ldrb	r3, [r7, #6]
 8021718:	9300      	str	r3, [sp, #0]
 802171a:	4613      	mov	r3, r2
 802171c:	2221      	movs	r2, #33	; 0x21
 802171e:	68b8      	ldr	r0, [r7, #8]
 8021720:	f001 fa34 	bl	8022b8c <UInt32ToStrBaseSign>
 8021724:	63b8      	str	r0, [r7, #56]	; 0x38
    basePrefix = getBasePrefix(base);
 8021726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802172a:	4618      	mov	r0, r3
 802172c:	f7ff ffbe 	bl	80216ac <getBasePrefix>
 8021730:	6378      	str	r0, [r7, #52]	; 0x34

    result += writeDelimiter(context);
 8021732:	68f8      	ldr	r0, [r7, #12]
 8021734:	f7ff fd3c 	bl	80211b0 <writeDelimiter>
 8021738:	4602      	mov	r2, r0
 802173a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802173c:	4413      	add	r3, r2
 802173e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (basePrefix != NULL) {
 8021740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021742:	2b00      	cmp	r3, #0
 8021744:	d008      	beq.n	8021758 <resultUInt32BaseSign+0x64>
        result += writeData(context, basePrefix, 2);
 8021746:	2202      	movs	r2, #2
 8021748:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802174a:	68f8      	ldr	r0, [r7, #12]
 802174c:	f7ff fcfd 	bl	802114a <writeData>
 8021750:	4602      	mov	r2, r0
 8021752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021754:	4413      	add	r3, r2
 8021756:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    result += writeData(context, buffer, len);
 8021758:	f107 0310 	add.w	r3, r7, #16
 802175c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802175e:	4619      	mov	r1, r3
 8021760:	68f8      	ldr	r0, [r7, #12]
 8021762:	f7ff fcf2 	bl	802114a <writeData>
 8021766:	4602      	mov	r2, r0
 8021768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802176a:	4413      	add	r3, r2
 802176c:	63fb      	str	r3, [r7, #60]	; 0x3c
    context->output_count++;
 802176e:	68fb      	ldr	r3, [r7, #12]
 8021770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021772:	1c5a      	adds	r2, r3, #1
 8021774:	68fb      	ldr	r3, [r7, #12]
 8021776:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 8021778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 802177a:	4618      	mov	r0, r3
 802177c:	3740      	adds	r7, #64	; 0x40
 802177e:	46bd      	mov	sp, r7
 8021780:	bd80      	pop	{r7, pc}

08021782 <SCPI_ResultInt32>:
 * Write signed 32 bit integer value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultInt32(scpi_t * context, int32_t val) {
 8021782:	b580      	push	{r7, lr}
 8021784:	b082      	sub	sp, #8
 8021786:	af00      	add	r7, sp, #0
 8021788:	6078      	str	r0, [r7, #4]
 802178a:	6039      	str	r1, [r7, #0]
    return resultUInt32BaseSign(context, val, 10, TRUE);
 802178c:	6839      	ldr	r1, [r7, #0]
 802178e:	2301      	movs	r3, #1
 8021790:	220a      	movs	r2, #10
 8021792:	6878      	ldr	r0, [r7, #4]
 8021794:	f7ff ffae 	bl	80216f4 <resultUInt32BaseSign>
 8021798:	4603      	mov	r3, r0
}
 802179a:	4618      	mov	r0, r3
 802179c:	3708      	adds	r7, #8
 802179e:	46bd      	mov	sp, r7
 80217a0:	bd80      	pop	{r7, pc}

080217a2 <SCPI_ResultUInt32Base>:
 * Write signed/unsigned 32 bit integer value in specific base to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultUInt32Base(scpi_t * context, uint32_t val, int8_t base) {
 80217a2:	b580      	push	{r7, lr}
 80217a4:	b084      	sub	sp, #16
 80217a6:	af00      	add	r7, sp, #0
 80217a8:	60f8      	str	r0, [r7, #12]
 80217aa:	60b9      	str	r1, [r7, #8]
 80217ac:	4613      	mov	r3, r2
 80217ae:	71fb      	strb	r3, [r7, #7]
    return resultUInt32BaseSign(context, val, base, FALSE);
 80217b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80217b4:	2300      	movs	r3, #0
 80217b6:	68b9      	ldr	r1, [r7, #8]
 80217b8:	68f8      	ldr	r0, [r7, #12]
 80217ba:	f7ff ff9b 	bl	80216f4 <resultUInt32BaseSign>
 80217be:	4603      	mov	r3, r0
}
 80217c0:	4618      	mov	r0, r3
 80217c2:	3710      	adds	r7, #16
 80217c4:	46bd      	mov	sp, r7
 80217c6:	bd80      	pop	{r7, pc}

080217c8 <SCPI_ResultText>:
 * Write string withn " to the result
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultText(scpi_t * context, const char * data) {
 80217c8:	b580      	push	{r7, lr}
 80217ca:	b086      	sub	sp, #24
 80217cc:	af00      	add	r7, sp, #0
 80217ce:	6078      	str	r0, [r7, #4]
 80217d0:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 80217d2:	2300      	movs	r3, #0
 80217d4:	617b      	str	r3, [r7, #20]
    size_t len = strlen(data);
 80217d6:	6838      	ldr	r0, [r7, #0]
 80217d8:	f7de fd24 	bl	8000224 <strlen>
 80217dc:	6138      	str	r0, [r7, #16]
    const char * quote;
    result += writeDelimiter(context);
 80217de:	6878      	ldr	r0, [r7, #4]
 80217e0:	f7ff fce6 	bl	80211b0 <writeDelimiter>
 80217e4:	4602      	mov	r2, r0
 80217e6:	697b      	ldr	r3, [r7, #20]
 80217e8:	4413      	add	r3, r2
 80217ea:	617b      	str	r3, [r7, #20]
    result += writeData(context, "\"", 1);
 80217ec:	2201      	movs	r2, #1
 80217ee:	4927      	ldr	r1, [pc, #156]	; (802188c <SCPI_ResultText+0xc4>)
 80217f0:	6878      	ldr	r0, [r7, #4]
 80217f2:	f7ff fcaa 	bl	802114a <writeData>
 80217f6:	4602      	mov	r2, r0
 80217f8:	697b      	ldr	r3, [r7, #20]
 80217fa:	4413      	add	r3, r2
 80217fc:	617b      	str	r3, [r7, #20]
    while ((quote = strnpbrk(data, len, "\""))) {
 80217fe:	e020      	b.n	8021842 <SCPI_ResultText+0x7a>
        result += writeData(context, data, quote - data + 1);
 8021800:	68fa      	ldr	r2, [r7, #12]
 8021802:	683b      	ldr	r3, [r7, #0]
 8021804:	1ad3      	subs	r3, r2, r3
 8021806:	3301      	adds	r3, #1
 8021808:	461a      	mov	r2, r3
 802180a:	6839      	ldr	r1, [r7, #0]
 802180c:	6878      	ldr	r0, [r7, #4]
 802180e:	f7ff fc9c 	bl	802114a <writeData>
 8021812:	4602      	mov	r2, r0
 8021814:	697b      	ldr	r3, [r7, #20]
 8021816:	4413      	add	r3, r2
 8021818:	617b      	str	r3, [r7, #20]
        result += writeData(context, "\"", 1);
 802181a:	2201      	movs	r2, #1
 802181c:	491b      	ldr	r1, [pc, #108]	; (802188c <SCPI_ResultText+0xc4>)
 802181e:	6878      	ldr	r0, [r7, #4]
 8021820:	f7ff fc93 	bl	802114a <writeData>
 8021824:	4602      	mov	r2, r0
 8021826:	697b      	ldr	r3, [r7, #20]
 8021828:	4413      	add	r3, r2
 802182a:	617b      	str	r3, [r7, #20]
        len -= quote - data + 1;
 802182c:	68fa      	ldr	r2, [r7, #12]
 802182e:	683b      	ldr	r3, [r7, #0]
 8021830:	1ad3      	subs	r3, r2, r3
 8021832:	461a      	mov	r2, r3
 8021834:	693b      	ldr	r3, [r7, #16]
 8021836:	1a9b      	subs	r3, r3, r2
 8021838:	3b01      	subs	r3, #1
 802183a:	613b      	str	r3, [r7, #16]
        data = quote + 1;
 802183c:	68fb      	ldr	r3, [r7, #12]
 802183e:	3301      	adds	r3, #1
 8021840:	603b      	str	r3, [r7, #0]
    while ((quote = strnpbrk(data, len, "\""))) {
 8021842:	4a12      	ldr	r2, [pc, #72]	; (802188c <SCPI_ResultText+0xc4>)
 8021844:	6939      	ldr	r1, [r7, #16]
 8021846:	6838      	ldr	r0, [r7, #0]
 8021848:	f001 f970 	bl	8022b2c <strnpbrk>
 802184c:	60f8      	str	r0, [r7, #12]
 802184e:	68fb      	ldr	r3, [r7, #12]
 8021850:	2b00      	cmp	r3, #0
 8021852:	d1d5      	bne.n	8021800 <SCPI_ResultText+0x38>
    }
    result += writeData(context, data, len);
 8021854:	693a      	ldr	r2, [r7, #16]
 8021856:	6839      	ldr	r1, [r7, #0]
 8021858:	6878      	ldr	r0, [r7, #4]
 802185a:	f7ff fc76 	bl	802114a <writeData>
 802185e:	4602      	mov	r2, r0
 8021860:	697b      	ldr	r3, [r7, #20]
 8021862:	4413      	add	r3, r2
 8021864:	617b      	str	r3, [r7, #20]
    result += writeData(context, "\"", 1);
 8021866:	2201      	movs	r2, #1
 8021868:	4908      	ldr	r1, [pc, #32]	; (802188c <SCPI_ResultText+0xc4>)
 802186a:	6878      	ldr	r0, [r7, #4]
 802186c:	f7ff fc6d 	bl	802114a <writeData>
 8021870:	4602      	mov	r2, r0
 8021872:	697b      	ldr	r3, [r7, #20]
 8021874:	4413      	add	r3, r2
 8021876:	617b      	str	r3, [r7, #20]
    context->output_count++;
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802187c:	1c5a      	adds	r2, r3, #1
 802187e:	687b      	ldr	r3, [r7, #4]
 8021880:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 8021882:	697b      	ldr	r3, [r7, #20]
}
 8021884:	4618      	mov	r0, r3
 8021886:	3718      	adds	r7, #24
 8021888:	46bd      	mov	sp, r7
 802188a:	bd80      	pop	{r7, pc}
 802188c:	0802cf04 	.word	0x0802cf04

08021890 <SCPI_ResultError>:
 *
 * @param context
 * @param error
 * @return
 */
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8021890:	b580      	push	{r7, lr}
 8021892:	b08a      	sub	sp, #40	; 0x28
 8021894:	af00      	add	r7, sp, #0
 8021896:	6078      	str	r0, [r7, #4]
 8021898:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 802189a:	2300      	movs	r3, #0
 802189c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t outputlimit = SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH;
 802189e:	23ff      	movs	r3, #255	; 0xff
 80218a0:	623b      	str	r3, [r7, #32]
    size_t step = 0;
 80218a2:	2300      	movs	r3, #0
 80218a4:	61bb      	str	r3, [r7, #24]

    const char * data[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t len[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t i;

    data[0] = SCPI_ErrorTranslate(error->error_code);
 80218a6:	683b      	ldr	r3, [r7, #0]
 80218a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80218ac:	4618      	mov	r0, r3
 80218ae:	f7fd fc21 	bl	801f0f4 <SCPI_ErrorTranslate>
 80218b2:	4603      	mov	r3, r0
 80218b4:	613b      	str	r3, [r7, #16]
    len[0] = strlen(data[0]);
 80218b6:	693b      	ldr	r3, [r7, #16]
 80218b8:	4618      	mov	r0, r3
 80218ba:	f7de fcb3 	bl	8000224 <strlen>
 80218be:	4603      	mov	r3, r0
 80218c0:	60fb      	str	r3, [r7, #12]
#else
    SCPIDEFINE_get_parts(&context->error_info_heap, data[1], &len[1], &data[2], &len[2]);
#endif
#endif

    result += SCPI_ResultInt32(context, error->error_code);
 80218c2:	683b      	ldr	r3, [r7, #0]
 80218c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80218c8:	4619      	mov	r1, r3
 80218ca:	6878      	ldr	r0, [r7, #4]
 80218cc:	f7ff ff59 	bl	8021782 <SCPI_ResultInt32>
 80218d0:	4602      	mov	r2, r0
 80218d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218d4:	4413      	add	r3, r2
 80218d6:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeDelimiter(context);
 80218d8:	6878      	ldr	r0, [r7, #4]
 80218da:	f7ff fc69 	bl	80211b0 <writeDelimiter>
 80218de:	4602      	mov	r2, r0
 80218e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218e2:	4413      	add	r3, r2
 80218e4:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeData(context, "\"", 1);
 80218e6:	2201      	movs	r2, #1
 80218e8:	496d      	ldr	r1, [pc, #436]	; (8021aa0 <SCPI_ResultError+0x210>)
 80218ea:	6878      	ldr	r0, [r7, #4]
 80218ec:	f7ff fc2d 	bl	802114a <writeData>
 80218f0:	4602      	mov	r2, r0
 80218f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218f4:	4413      	add	r3, r2
 80218f6:	627b      	str	r3, [r7, #36]	; 0x24

    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 80218f8:	2300      	movs	r3, #0
 80218fa:	61fb      	str	r3, [r7, #28]
 80218fc:	e0b3      	b.n	8021a66 <SCPI_ResultError+0x1d6>
        if (i == 1) {
 80218fe:	69fb      	ldr	r3, [r7, #28]
 8021900:	2b01      	cmp	r3, #1
 8021902:	d109      	bne.n	8021918 <SCPI_ResultError+0x88>
            result += writeSemicolon(context);
 8021904:	6878      	ldr	r0, [r7, #4]
 8021906:	f7ff fc83 	bl	8021210 <writeSemicolon>
 802190a:	4602      	mov	r2, r0
 802190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802190e:	4413      	add	r3, r2
 8021910:	627b      	str	r3, [r7, #36]	; 0x24
            outputlimit -= 1;
 8021912:	6a3b      	ldr	r3, [r7, #32]
 8021914:	3b01      	subs	r3, #1
 8021916:	623b      	str	r3, [r7, #32]
        }
        if (len[i] > outputlimit) {
 8021918:	69fb      	ldr	r3, [r7, #28]
 802191a:	009b      	lsls	r3, r3, #2
 802191c:	3328      	adds	r3, #40	; 0x28
 802191e:	443b      	add	r3, r7
 8021920:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8021924:	6a3a      	ldr	r2, [r7, #32]
 8021926:	429a      	cmp	r2, r3
 8021928:	d269      	bcs.n	80219fe <SCPI_ResultError+0x16e>
            len[i] = outputlimit;
 802192a:	69fb      	ldr	r3, [r7, #28]
 802192c:	009b      	lsls	r3, r3, #2
 802192e:	3328      	adds	r3, #40	; 0x28
 8021930:	443b      	add	r3, r7
 8021932:	6a3a      	ldr	r2, [r7, #32]
 8021934:	f843 2c1c 	str.w	r2, [r3, #-28]
        }

        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8021938:	e061      	b.n	80219fe <SCPI_ResultError+0x16e>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 802193a:	69fb      	ldr	r3, [r7, #28]
 802193c:	009b      	lsls	r3, r3, #2
 802193e:	3328      	adds	r3, #40	; 0x28
 8021940:	443b      	add	r3, r7
 8021942:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8021946:	697a      	ldr	r2, [r7, #20]
 8021948:	1ad3      	subs	r3, r2, r3
 802194a:	3301      	adds	r3, #1
 802194c:	61bb      	str	r3, [r7, #24]
 802194e:	69ba      	ldr	r2, [r7, #24]
 8021950:	6a3b      	ldr	r3, [r7, #32]
 8021952:	429a      	cmp	r2, r3
 8021954:	d310      	bcc.n	8021978 <SCPI_ResultError+0xe8>
                len[i] -= 1;
 8021956:	69fb      	ldr	r3, [r7, #28]
 8021958:	009b      	lsls	r3, r3, #2
 802195a:	3328      	adds	r3, #40	; 0x28
 802195c:	443b      	add	r3, r7
 802195e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8021962:	1e5a      	subs	r2, r3, #1
 8021964:	69fb      	ldr	r3, [r7, #28]
 8021966:	009b      	lsls	r3, r3, #2
 8021968:	3328      	adds	r3, #40	; 0x28
 802196a:	443b      	add	r3, r7
 802196c:	f843 2c1c 	str.w	r2, [r3, #-28]
                outputlimit -= 1;
 8021970:	6a3b      	ldr	r3, [r7, #32]
 8021972:	3b01      	subs	r3, #1
 8021974:	623b      	str	r3, [r7, #32]
                break;
 8021976:	e056      	b.n	8021a26 <SCPI_ResultError+0x196>
            }
            result += writeData(context, data[i], step);
 8021978:	69fb      	ldr	r3, [r7, #28]
 802197a:	009b      	lsls	r3, r3, #2
 802197c:	3328      	adds	r3, #40	; 0x28
 802197e:	443b      	add	r3, r7
 8021980:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8021984:	69ba      	ldr	r2, [r7, #24]
 8021986:	4619      	mov	r1, r3
 8021988:	6878      	ldr	r0, [r7, #4]
 802198a:	f7ff fbde 	bl	802114a <writeData>
 802198e:	4602      	mov	r2, r0
 8021990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021992:	4413      	add	r3, r2
 8021994:	627b      	str	r3, [r7, #36]	; 0x24
            result += writeData(context, "\"", 1);
 8021996:	2201      	movs	r2, #1
 8021998:	4941      	ldr	r1, [pc, #260]	; (8021aa0 <SCPI_ResultError+0x210>)
 802199a:	6878      	ldr	r0, [r7, #4]
 802199c:	f7ff fbd5 	bl	802114a <writeData>
 80219a0:	4602      	mov	r2, r0
 80219a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219a4:	4413      	add	r3, r2
 80219a6:	627b      	str	r3, [r7, #36]	; 0x24
            len[i] -= step;
 80219a8:	69fb      	ldr	r3, [r7, #28]
 80219aa:	009b      	lsls	r3, r3, #2
 80219ac:	3328      	adds	r3, #40	; 0x28
 80219ae:	443b      	add	r3, r7
 80219b0:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80219b4:	69bb      	ldr	r3, [r7, #24]
 80219b6:	1ad2      	subs	r2, r2, r3
 80219b8:	69fb      	ldr	r3, [r7, #28]
 80219ba:	009b      	lsls	r3, r3, #2
 80219bc:	3328      	adds	r3, #40	; 0x28
 80219be:	443b      	add	r3, r7
 80219c0:	f843 2c1c 	str.w	r2, [r3, #-28]
            outputlimit -= step + 1;
 80219c4:	6a3a      	ldr	r2, [r7, #32]
 80219c6:	69bb      	ldr	r3, [r7, #24]
 80219c8:	1ad3      	subs	r3, r2, r3
 80219ca:	3b01      	subs	r3, #1
 80219cc:	623b      	str	r3, [r7, #32]
            data[i] = quote + 1;
 80219ce:	697b      	ldr	r3, [r7, #20]
 80219d0:	1c5a      	adds	r2, r3, #1
 80219d2:	69fb      	ldr	r3, [r7, #28]
 80219d4:	009b      	lsls	r3, r3, #2
 80219d6:	3328      	adds	r3, #40	; 0x28
 80219d8:	443b      	add	r3, r7
 80219da:	f843 2c18 	str.w	r2, [r3, #-24]
            if (len[i] > outputlimit) {
 80219de:	69fb      	ldr	r3, [r7, #28]
 80219e0:	009b      	lsls	r3, r3, #2
 80219e2:	3328      	adds	r3, #40	; 0x28
 80219e4:	443b      	add	r3, r7
 80219e6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80219ea:	6a3a      	ldr	r2, [r7, #32]
 80219ec:	429a      	cmp	r2, r3
 80219ee:	d206      	bcs.n	80219fe <SCPI_ResultError+0x16e>
                len[i] = outputlimit;
 80219f0:	69fb      	ldr	r3, [r7, #28]
 80219f2:	009b      	lsls	r3, r3, #2
 80219f4:	3328      	adds	r3, #40	; 0x28
 80219f6:	443b      	add	r3, r7
 80219f8:	6a3a      	ldr	r2, [r7, #32]
 80219fa:	f843 2c1c 	str.w	r2, [r3, #-28]
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 80219fe:	69fb      	ldr	r3, [r7, #28]
 8021a00:	009b      	lsls	r3, r3, #2
 8021a02:	3328      	adds	r3, #40	; 0x28
 8021a04:	443b      	add	r3, r7
 8021a06:	f853 0c18 	ldr.w	r0, [r3, #-24]
 8021a0a:	69fb      	ldr	r3, [r7, #28]
 8021a0c:	009b      	lsls	r3, r3, #2
 8021a0e:	3328      	adds	r3, #40	; 0x28
 8021a10:	443b      	add	r3, r7
 8021a12:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8021a16:	4a22      	ldr	r2, [pc, #136]	; (8021aa0 <SCPI_ResultError+0x210>)
 8021a18:	4619      	mov	r1, r3
 8021a1a:	f001 f887 	bl	8022b2c <strnpbrk>
 8021a1e:	6178      	str	r0, [r7, #20]
 8021a20:	697b      	ldr	r3, [r7, #20]
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d189      	bne.n	802193a <SCPI_ResultError+0xaa>
            }
        }

        result += writeData(context, data[i], len[i]);
 8021a26:	69fb      	ldr	r3, [r7, #28]
 8021a28:	009b      	lsls	r3, r3, #2
 8021a2a:	3328      	adds	r3, #40	; 0x28
 8021a2c:	443b      	add	r3, r7
 8021a2e:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8021a32:	69fb      	ldr	r3, [r7, #28]
 8021a34:	009b      	lsls	r3, r3, #2
 8021a36:	3328      	adds	r3, #40	; 0x28
 8021a38:	443b      	add	r3, r7
 8021a3a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8021a3e:	461a      	mov	r2, r3
 8021a40:	6878      	ldr	r0, [r7, #4]
 8021a42:	f7ff fb82 	bl	802114a <writeData>
 8021a46:	4602      	mov	r2, r0
 8021a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a4a:	4413      	add	r3, r2
 8021a4c:	627b      	str	r3, [r7, #36]	; 0x24
        outputlimit -= len[i];
 8021a4e:	69fb      	ldr	r3, [r7, #28]
 8021a50:	009b      	lsls	r3, r3, #2
 8021a52:	3328      	adds	r3, #40	; 0x28
 8021a54:	443b      	add	r3, r7
 8021a56:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8021a5a:	6a3a      	ldr	r2, [r7, #32]
 8021a5c:	1ad3      	subs	r3, r2, r3
 8021a5e:	623b      	str	r3, [r7, #32]
    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 8021a60:	69fb      	ldr	r3, [r7, #28]
 8021a62:	3301      	adds	r3, #1
 8021a64:	61fb      	str	r3, [r7, #28]
 8021a66:	69fb      	ldr	r3, [r7, #28]
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d10b      	bne.n	8021a84 <SCPI_ResultError+0x1f4>
 8021a6c:	69fb      	ldr	r3, [r7, #28]
 8021a6e:	009b      	lsls	r3, r3, #2
 8021a70:	3328      	adds	r3, #40	; 0x28
 8021a72:	443b      	add	r3, r7
 8021a74:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	d003      	beq.n	8021a84 <SCPI_ResultError+0x1f4>
 8021a7c:	6a3b      	ldr	r3, [r7, #32]
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	f47f af3d 	bne.w	80218fe <SCPI_ResultError+0x6e>
    }
    result += writeData(context, "\"", 1);
 8021a84:	2201      	movs	r2, #1
 8021a86:	4906      	ldr	r1, [pc, #24]	; (8021aa0 <SCPI_ResultError+0x210>)
 8021a88:	6878      	ldr	r0, [r7, #4]
 8021a8a:	f7ff fb5e 	bl	802114a <writeData>
 8021a8e:	4602      	mov	r2, r0
 8021a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a92:	4413      	add	r3, r2
 8021a94:	627b      	str	r3, [r7, #36]	; 0x24

    return result;
 8021a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021a98:	4618      	mov	r0, r3
 8021a9a:	3728      	adds	r7, #40	; 0x28
 8021a9c:	46bd      	mov	sp, r7
 8021a9e:	bd80      	pop	{r7, pc}
 8021aa0:	0802cf04 	.word	0x0802cf04

08021aa4 <SCPI_ResultArbitraryBlockHeader>:
 * Write arbitrary block header with length
 * @param context
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 8021aa4:	b580      	push	{r7, lr}
 8021aa6:	b086      	sub	sp, #24
 8021aa8:	af00      	add	r7, sp, #0
 8021aaa:	6078      	str	r0, [r7, #4]
 8021aac:	6039      	str	r1, [r7, #0]
    char block_header[12];
    size_t header_len;
    block_header[0] = '#';
 8021aae:	2323      	movs	r3, #35	; 0x23
 8021ab0:	723b      	strb	r3, [r7, #8]
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 8021ab2:	f107 0108 	add.w	r1, r7, #8
 8021ab6:	3102      	adds	r1, #2
 8021ab8:	230a      	movs	r3, #10
 8021aba:	220a      	movs	r2, #10
 8021abc:	6838      	ldr	r0, [r7, #0]
 8021abe:	f001 f905 	bl	8022ccc <SCPI_UInt32ToStrBase>

    header_len = strlen(block_header + 2);
 8021ac2:	f107 0308 	add.w	r3, r7, #8
 8021ac6:	3302      	adds	r3, #2
 8021ac8:	4618      	mov	r0, r3
 8021aca:	f7de fbab 	bl	8000224 <strlen>
 8021ace:	6178      	str	r0, [r7, #20]
    block_header[1] = (char) (header_len + '0');
 8021ad0:	697b      	ldr	r3, [r7, #20]
 8021ad2:	b2db      	uxtb	r3, r3
 8021ad4:	3330      	adds	r3, #48	; 0x30
 8021ad6:	b2db      	uxtb	r3, r3
 8021ad8:	727b      	strb	r3, [r7, #9]

    context->arbitrary_reminding = len;
 8021ada:	687b      	ldr	r3, [r7, #4]
 8021adc:	683a      	ldr	r2, [r7, #0]
 8021ade:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    return writeData(context, block_header, header_len + 2);
 8021ae2:	697b      	ldr	r3, [r7, #20]
 8021ae4:	1c9a      	adds	r2, r3, #2
 8021ae6:	f107 0308 	add.w	r3, r7, #8
 8021aea:	4619      	mov	r1, r3
 8021aec:	6878      	ldr	r0, [r7, #4]
 8021aee:	f7ff fb2c 	bl	802114a <writeData>
 8021af2:	4603      	mov	r3, r0
}
 8021af4:	4618      	mov	r0, r3
 8021af6:	3718      	adds	r7, #24
 8021af8:	46bd      	mov	sp, r7
 8021afa:	bd80      	pop	{r7, pc}

08021afc <SCPI_ResultArbitraryBlockData>:
 * @param context
 * @param data
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 8021afc:	b580      	push	{r7, lr}
 8021afe:	b084      	sub	sp, #16
 8021b00:	af00      	add	r7, sp, #0
 8021b02:	60f8      	str	r0, [r7, #12]
 8021b04:	60b9      	str	r1, [r7, #8]
 8021b06:	607a      	str	r2, [r7, #4]

    if (context->arbitrary_reminding < len) {
 8021b08:	68fb      	ldr	r3, [r7, #12]
 8021b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021b0e:	687a      	ldr	r2, [r7, #4]
 8021b10:	429a      	cmp	r2, r3
 8021b12:	d905      	bls.n	8021b20 <SCPI_ResultArbitraryBlockData+0x24>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8021b14:	4910      	ldr	r1, [pc, #64]	; (8021b58 <SCPI_ResultArbitraryBlockData+0x5c>)
 8021b16:	68f8      	ldr	r0, [r7, #12]
 8021b18:	f7fd fada 	bl	801f0d0 <SCPI_ErrorPush>
        return 0;
 8021b1c:	2300      	movs	r3, #0
 8021b1e:	e017      	b.n	8021b50 <SCPI_ResultArbitraryBlockData+0x54>
    }

    context->arbitrary_reminding -= len;
 8021b20:	68fb      	ldr	r3, [r7, #12]
 8021b22:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8021b26:	687b      	ldr	r3, [r7, #4]
 8021b28:	1ad2      	subs	r2, r2, r3
 8021b2a:	68fb      	ldr	r3, [r7, #12]
 8021b2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    if (context->arbitrary_reminding == 0) {
 8021b30:	68fb      	ldr	r3, [r7, #12]
 8021b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d104      	bne.n	8021b44 <SCPI_ResultArbitraryBlockData+0x48>
        context->output_count++;
 8021b3a:	68fb      	ldr	r3, [r7, #12]
 8021b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b3e:	1c5a      	adds	r2, r3, #1
 8021b40:	68fb      	ldr	r3, [r7, #12]
 8021b42:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return writeData(context, (const char *) data, len);
 8021b44:	687a      	ldr	r2, [r7, #4]
 8021b46:	68b9      	ldr	r1, [r7, #8]
 8021b48:	68f8      	ldr	r0, [r7, #12]
 8021b4a:	f7ff fafe 	bl	802114a <writeData>
 8021b4e:	4603      	mov	r3, r0
}
 8021b50:	4618      	mov	r0, r3
 8021b52:	3710      	adds	r7, #16
 8021b54:	46bd      	mov	sp, r7
 8021b56:	bd80      	pop	{r7, pc}
 8021b58:	fffffeca 	.word	0xfffffeca

08021b5c <SCPI_ResultArbitraryBlock>:
 * @param context
 * @param data
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 8021b5c:	b580      	push	{r7, lr}
 8021b5e:	b086      	sub	sp, #24
 8021b60:	af00      	add	r7, sp, #0
 8021b62:	60f8      	str	r0, [r7, #12]
 8021b64:	60b9      	str	r1, [r7, #8]
 8021b66:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 8021b68:	2300      	movs	r3, #0
 8021b6a:	617b      	str	r3, [r7, #20]
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8021b6c:	6879      	ldr	r1, [r7, #4]
 8021b6e:	68f8      	ldr	r0, [r7, #12]
 8021b70:	f7ff ff98 	bl	8021aa4 <SCPI_ResultArbitraryBlockHeader>
 8021b74:	4602      	mov	r2, r0
 8021b76:	697b      	ldr	r3, [r7, #20]
 8021b78:	4413      	add	r3, r2
 8021b7a:	617b      	str	r3, [r7, #20]
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 8021b7c:	687a      	ldr	r2, [r7, #4]
 8021b7e:	68b9      	ldr	r1, [r7, #8]
 8021b80:	68f8      	ldr	r0, [r7, #12]
 8021b82:	f7ff ffbb 	bl	8021afc <SCPI_ResultArbitraryBlockData>
 8021b86:	4602      	mov	r2, r0
 8021b88:	697b      	ldr	r3, [r7, #20]
 8021b8a:	4413      	add	r3, r2
 8021b8c:	617b      	str	r3, [r7, #20]
    return result;
 8021b8e:	697b      	ldr	r3, [r7, #20]
}
 8021b90:	4618      	mov	r0, r3
 8021b92:	3718      	adds	r7, #24
 8021b94:	46bd      	mov	sp, r7
 8021b96:	bd80      	pop	{r7, pc}

08021b98 <invalidateToken>:
/**
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
 8021b98:	b480      	push	{r7}
 8021b9a:	b083      	sub	sp, #12
 8021b9c:	af00      	add	r7, sp, #0
 8021b9e:	6078      	str	r0, [r7, #4]
 8021ba0:	6039      	str	r1, [r7, #0]
    token->len = 0;
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	2200      	movs	r2, #0
 8021ba6:	609a      	str	r2, [r3, #8]
    token->ptr = ptr;
 8021ba8:	687b      	ldr	r3, [r7, #4]
 8021baa:	683a      	ldr	r2, [r7, #0]
 8021bac:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	221a      	movs	r2, #26
 8021bb2:	701a      	strb	r2, [r3, #0]
}
 8021bb4:	bf00      	nop
 8021bb6:	370c      	adds	r7, #12
 8021bb8:	46bd      	mov	sp, r7
 8021bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bbe:	4770      	bx	lr

08021bc0 <SCPI_Parameter>:
 * @param context
 * @param parameter
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 8021bc0:	b580      	push	{r7, lr}
 8021bc2:	b086      	sub	sp, #24
 8021bc4:	af00      	add	r7, sp, #0
 8021bc6:	60f8      	str	r0, [r7, #12]
 8021bc8:	60b9      	str	r1, [r7, #8]
 8021bca:	4613      	mov	r3, r2
 8021bcc:	71fb      	strb	r3, [r7, #7]
    lex_state_t * state;

    if (!parameter) {
 8021bce:	68bb      	ldr	r3, [r7, #8]
 8021bd0:	2b00      	cmp	r3, #0
 8021bd2:	d105      	bne.n	8021be0 <SCPI_Parameter+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8021bd4:	492f      	ldr	r1, [pc, #188]	; (8021c94 <SCPI_Parameter+0xd4>)
 8021bd6:	68f8      	ldr	r0, [r7, #12]
 8021bd8:	f7fd fa7a 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 8021bdc:	2300      	movs	r3, #0
 8021bde:	e055      	b.n	8021c8c <SCPI_Parameter+0xcc>
    }

    invalidateToken(parameter, NULL);
 8021be0:	2100      	movs	r1, #0
 8021be2:	68b8      	ldr	r0, [r7, #8]
 8021be4:	f7ff ffd8 	bl	8021b98 <invalidateToken>

    state = &context->param_list.lex_state;
 8021be8:	68fb      	ldr	r3, [r7, #12]
 8021bea:	3314      	adds	r3, #20
 8021bec:	617b      	str	r3, [r7, #20]

    if (state->pos >= (state->buffer + state->len)) {
 8021bee:	697b      	ldr	r3, [r7, #20]
 8021bf0:	685a      	ldr	r2, [r3, #4]
 8021bf2:	697b      	ldr	r3, [r7, #20]
 8021bf4:	681b      	ldr	r3, [r3, #0]
 8021bf6:	6979      	ldr	r1, [r7, #20]
 8021bf8:	6889      	ldr	r1, [r1, #8]
 8021bfa:	440b      	add	r3, r1
 8021bfc:	429a      	cmp	r2, r3
 8021bfe:	d30d      	bcc.n	8021c1c <SCPI_Parameter+0x5c>
        if (mandatory) {
 8021c00:	79fb      	ldrb	r3, [r7, #7]
 8021c02:	2b00      	cmp	r3, #0
 8021c04:	d005      	beq.n	8021c12 <SCPI_Parameter+0x52>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8021c06:	f06f 016c 	mvn.w	r1, #108	; 0x6c
 8021c0a:	68f8      	ldr	r0, [r7, #12]
 8021c0c:	f7fd fa60 	bl	801f0d0 <SCPI_ErrorPush>
 8021c10:	e002      	b.n	8021c18 <SCPI_Parameter+0x58>
        } else {
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 8021c12:	68bb      	ldr	r3, [r7, #8]
 8021c14:	2209      	movs	r2, #9
 8021c16:	701a      	strb	r2, [r3, #0]
        }
        return FALSE;
 8021c18:	2300      	movs	r3, #0
 8021c1a:	e037      	b.n	8021c8c <SCPI_Parameter+0xcc>
    }
    if (context->input_count != 0) {
 8021c1c:	68fb      	ldr	r3, [r7, #12]
 8021c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021c20:	2b00      	cmp	r3, #0
 8021c22:	d012      	beq.n	8021c4a <SCPI_Parameter+0x8a>
        scpiLex_Comma(state, parameter);
 8021c24:	68b9      	ldr	r1, [r7, #8]
 8021c26:	6978      	ldr	r0, [r7, #20]
 8021c28:	f7ff f949 	bl	8020ebe <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 8021c2c:	68bb      	ldr	r3, [r7, #8]
 8021c2e:	781b      	ldrb	r3, [r3, #0]
 8021c30:	2b00      	cmp	r3, #0
 8021c32:	d00a      	beq.n	8021c4a <SCPI_Parameter+0x8a>
            invalidateToken(parameter, NULL);
 8021c34:	2100      	movs	r1, #0
 8021c36:	68b8      	ldr	r0, [r7, #8]
 8021c38:	f7ff ffae 	bl	8021b98 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 8021c3c:	f06f 0166 	mvn.w	r1, #102	; 0x66
 8021c40:	68f8      	ldr	r0, [r7, #12]
 8021c42:	f7fd fa45 	bl	801f0d0 <SCPI_ErrorPush>
            return FALSE;
 8021c46:	2300      	movs	r3, #0
 8021c48:	e020      	b.n	8021c8c <SCPI_Parameter+0xcc>
        }
    }

    context->input_count++;
 8021c4a:	68fb      	ldr	r3, [r7, #12]
 8021c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021c4e:	1c5a      	adds	r2, r3, #1
 8021c50:	68fb      	ldr	r3, [r7, #12]
 8021c52:	635a      	str	r2, [r3, #52]	; 0x34

    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8021c54:	68fb      	ldr	r3, [r7, #12]
 8021c56:	3314      	adds	r3, #20
 8021c58:	68b9      	ldr	r1, [r7, #8]
 8021c5a:	4618      	mov	r0, r3
 8021c5c:	f000 fb62 	bl	8022324 <scpiParser_parseProgramData>

    switch (parameter->type) {
 8021c60:	68bb      	ldr	r3, [r7, #8]
 8021c62:	781b      	ldrb	r3, [r3, #0]
 8021c64:	2b0b      	cmp	r3, #11
 8021c66:	dc02      	bgt.n	8021c6e <SCPI_Parameter+0xae>
 8021c68:	2b06      	cmp	r3, #6
 8021c6a:	da03      	bge.n	8021c74 <SCPI_Parameter+0xb4>
 8021c6c:	e004      	b.n	8021c78 <SCPI_Parameter+0xb8>
 8021c6e:	3b0d      	subs	r3, #13
 8021c70:	2b03      	cmp	r3, #3
 8021c72:	d801      	bhi.n	8021c78 <SCPI_Parameter+0xb8>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
        case SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA:
        case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_PROGRAM_EXPRESSION:
            return TRUE;
 8021c74:	2301      	movs	r3, #1
 8021c76:	e009      	b.n	8021c8c <SCPI_Parameter+0xcc>
        default:
            invalidateToken(parameter, NULL);
 8021c78:	2100      	movs	r1, #0
 8021c7a:	68b8      	ldr	r0, [r7, #8]
 8021c7c:	f7ff ff8c 	bl	8021b98 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 8021c80:	f06f 0196 	mvn.w	r1, #150	; 0x96
 8021c84:	68f8      	ldr	r0, [r7, #12]
 8021c86:	f7fd fa23 	bl	801f0d0 <SCPI_ErrorPush>
            return FALSE;
 8021c8a:	2300      	movs	r3, #0
    }
}
 8021c8c:	4618      	mov	r0, r3
 8021c8e:	3718      	adds	r7, #24
 8021c90:	46bd      	mov	sp, r7
 8021c92:	bd80      	pop	{r7, pc}
 8021c94:	fffffeca 	.word	0xfffffeca

08021c98 <SCPI_ParamIsNumber>:
 * Detect if parameter is number
 * @param parameter
 * @param suffixAllowed
 * @return
 */
scpi_bool_t SCPI_ParamIsNumber(scpi_parameter_t * parameter, scpi_bool_t suffixAllowed) {
 8021c98:	b480      	push	{r7}
 8021c9a:	b083      	sub	sp, #12
 8021c9c:	af00      	add	r7, sp, #0
 8021c9e:	6078      	str	r0, [r7, #4]
 8021ca0:	460b      	mov	r3, r1
 8021ca2:	70fb      	strb	r3, [r7, #3]
    switch (parameter->type) {
 8021ca4:	687b      	ldr	r3, [r7, #4]
 8021ca6:	781b      	ldrb	r3, [r3, #0]
 8021ca8:	2b0b      	cmp	r3, #11
 8021caa:	d00a      	beq.n	8021cc2 <SCPI_ParamIsNumber+0x2a>
 8021cac:	2b0b      	cmp	r3, #11
 8021cae:	dc0a      	bgt.n	8021cc6 <SCPI_ParamIsNumber+0x2e>
 8021cb0:	2b08      	cmp	r3, #8
 8021cb2:	dc02      	bgt.n	8021cba <SCPI_ParamIsNumber+0x22>
 8021cb4:	2b06      	cmp	r3, #6
 8021cb6:	da02      	bge.n	8021cbe <SCPI_ParamIsNumber+0x26>
 8021cb8:	e005      	b.n	8021cc6 <SCPI_ParamIsNumber+0x2e>
 8021cba:	2b0a      	cmp	r3, #10
 8021cbc:	d103      	bne.n	8021cc6 <SCPI_ParamIsNumber+0x2e>
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
            return TRUE;
 8021cbe:	2301      	movs	r3, #1
 8021cc0:	e002      	b.n	8021cc8 <SCPI_ParamIsNumber+0x30>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            return suffixAllowed;
 8021cc2:	78fb      	ldrb	r3, [r7, #3]
 8021cc4:	e000      	b.n	8021cc8 <SCPI_ParamIsNumber+0x30>
        default:
            return FALSE;
 8021cc6:	2300      	movs	r3, #0
    }
}
 8021cc8:	4618      	mov	r0, r3
 8021cca:	370c      	adds	r7, #12
 8021ccc:	46bd      	mov	sp, r7
 8021cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cd2:	4770      	bx	lr

08021cd4 <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 8021cd4:	b580      	push	{r7, lr}
 8021cd6:	b084      	sub	sp, #16
 8021cd8:	af00      	add	r7, sp, #0
 8021cda:	60f8      	str	r0, [r7, #12]
 8021cdc:	60b9      	str	r1, [r7, #8]
 8021cde:	607a      	str	r2, [r7, #4]
 8021ce0:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	d105      	bne.n	8021cf4 <ParamSignToUInt32+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8021ce8:	4933      	ldr	r1, [pc, #204]	; (8021db8 <ParamSignToUInt32+0xe4>)
 8021cea:	68f8      	ldr	r0, [r7, #12]
 8021cec:	f7fd f9f0 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 8021cf0:	2300      	movs	r3, #0
 8021cf2:	e05d      	b.n	8021db0 <ParamSignToUInt32+0xdc>
    }

    switch (parameter->type) {
 8021cf4:	68bb      	ldr	r3, [r7, #8]
 8021cf6:	781b      	ldrb	r3, [r3, #0]
 8021cf8:	3b06      	subs	r3, #6
 8021cfa:	2b05      	cmp	r3, #5
 8021cfc:	d857      	bhi.n	8021dae <ParamSignToUInt32+0xda>
 8021cfe:	a201      	add	r2, pc, #4	; (adr r2, 8021d04 <ParamSignToUInt32+0x30>)
 8021d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021d04:	08021d1d 	.word	0x08021d1d
 8021d08:	08021d39 	.word	0x08021d39
 8021d0c:	08021d55 	.word	0x08021d55
 8021d10:	08021daf 	.word	0x08021daf
 8021d14:	08021d71 	.word	0x08021d71
 8021d18:	08021d71 	.word	0x08021d71
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 8021d1c:	68bb      	ldr	r3, [r7, #8]
 8021d1e:	685b      	ldr	r3, [r3, #4]
 8021d20:	2210      	movs	r2, #16
 8021d22:	6879      	ldr	r1, [r7, #4]
 8021d24:	4618      	mov	r0, r3
 8021d26:	f000 ffff 	bl	8022d28 <strBaseToUInt32>
 8021d2a:	4603      	mov	r3, r0
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	bf14      	ite	ne
 8021d30:	2301      	movne	r3, #1
 8021d32:	2300      	moveq	r3, #0
 8021d34:	b2db      	uxtb	r3, r3
 8021d36:	e03b      	b.n	8021db0 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 8021d38:	68bb      	ldr	r3, [r7, #8]
 8021d3a:	685b      	ldr	r3, [r3, #4]
 8021d3c:	2208      	movs	r2, #8
 8021d3e:	6879      	ldr	r1, [r7, #4]
 8021d40:	4618      	mov	r0, r3
 8021d42:	f000 fff1 	bl	8022d28 <strBaseToUInt32>
 8021d46:	4603      	mov	r3, r0
 8021d48:	2b00      	cmp	r3, #0
 8021d4a:	bf14      	ite	ne
 8021d4c:	2301      	movne	r3, #1
 8021d4e:	2300      	moveq	r3, #0
 8021d50:	b2db      	uxtb	r3, r3
 8021d52:	e02d      	b.n	8021db0 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 8021d54:	68bb      	ldr	r3, [r7, #8]
 8021d56:	685b      	ldr	r3, [r3, #4]
 8021d58:	2202      	movs	r2, #2
 8021d5a:	6879      	ldr	r1, [r7, #4]
 8021d5c:	4618      	mov	r0, r3
 8021d5e:	f000 ffe3 	bl	8022d28 <strBaseToUInt32>
 8021d62:	4603      	mov	r3, r0
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	bf14      	ite	ne
 8021d68:	2301      	movne	r3, #1
 8021d6a:	2300      	moveq	r3, #0
 8021d6c:	b2db      	uxtb	r3, r3
 8021d6e:	e01f      	b.n	8021db0 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 8021d70:	78fb      	ldrb	r3, [r7, #3]
 8021d72:	2b00      	cmp	r3, #0
 8021d74:	d00d      	beq.n	8021d92 <ParamSignToUInt32+0xbe>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 8021d76:	68bb      	ldr	r3, [r7, #8]
 8021d78:	685b      	ldr	r3, [r3, #4]
 8021d7a:	220a      	movs	r2, #10
 8021d7c:	6879      	ldr	r1, [r7, #4]
 8021d7e:	4618      	mov	r0, r3
 8021d80:	f000 ffb9 	bl	8022cf6 <strBaseToInt32>
 8021d84:	4603      	mov	r3, r0
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	bf14      	ite	ne
 8021d8a:	2301      	movne	r3, #1
 8021d8c:	2300      	moveq	r3, #0
 8021d8e:	b2db      	uxtb	r3, r3
 8021d90:	e00e      	b.n	8021db0 <ParamSignToUInt32+0xdc>
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 8021d92:	68bb      	ldr	r3, [r7, #8]
 8021d94:	685b      	ldr	r3, [r3, #4]
 8021d96:	220a      	movs	r2, #10
 8021d98:	6879      	ldr	r1, [r7, #4]
 8021d9a:	4618      	mov	r0, r3
 8021d9c:	f000 ffc4 	bl	8022d28 <strBaseToUInt32>
 8021da0:	4603      	mov	r3, r0
 8021da2:	2b00      	cmp	r3, #0
 8021da4:	bf14      	ite	ne
 8021da6:	2301      	movne	r3, #1
 8021da8:	2300      	moveq	r3, #0
 8021daa:	b2db      	uxtb	r3, r3
 8021dac:	e000      	b.n	8021db0 <ParamSignToUInt32+0xdc>
            }
        default:
            return FALSE;
 8021dae:	2300      	movs	r3, #0
    }
}
 8021db0:	4618      	mov	r0, r3
 8021db2:	3710      	adds	r7, #16
 8021db4:	46bd      	mov	sp, r7
 8021db6:	bd80      	pop	{r7, pc}
 8021db8:	fffffeca 	.word	0xfffffeca

08021dbc <ParamSignToUInt64>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt64(scpi_t * context, scpi_parameter_t * parameter, uint64_t * value, scpi_bool_t sign) {
 8021dbc:	b580      	push	{r7, lr}
 8021dbe:	b084      	sub	sp, #16
 8021dc0:	af00      	add	r7, sp, #0
 8021dc2:	60f8      	str	r0, [r7, #12]
 8021dc4:	60b9      	str	r1, [r7, #8]
 8021dc6:	607a      	str	r2, [r7, #4]
 8021dc8:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	2b00      	cmp	r3, #0
 8021dce:	d105      	bne.n	8021ddc <ParamSignToUInt64+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8021dd0:	4933      	ldr	r1, [pc, #204]	; (8021ea0 <ParamSignToUInt64+0xe4>)
 8021dd2:	68f8      	ldr	r0, [r7, #12]
 8021dd4:	f7fd f97c 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 8021dd8:	2300      	movs	r3, #0
 8021dda:	e05d      	b.n	8021e98 <ParamSignToUInt64+0xdc>
    }

    switch (parameter->type) {
 8021ddc:	68bb      	ldr	r3, [r7, #8]
 8021dde:	781b      	ldrb	r3, [r3, #0]
 8021de0:	3b06      	subs	r3, #6
 8021de2:	2b05      	cmp	r3, #5
 8021de4:	d857      	bhi.n	8021e96 <ParamSignToUInt64+0xda>
 8021de6:	a201      	add	r2, pc, #4	; (adr r2, 8021dec <ParamSignToUInt64+0x30>)
 8021de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021dec:	08021e05 	.word	0x08021e05
 8021df0:	08021e21 	.word	0x08021e21
 8021df4:	08021e3d 	.word	0x08021e3d
 8021df8:	08021e97 	.word	0x08021e97
 8021dfc:	08021e59 	.word	0x08021e59
 8021e00:	08021e59 	.word	0x08021e59
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt64(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 8021e04:	68bb      	ldr	r3, [r7, #8]
 8021e06:	685b      	ldr	r3, [r3, #4]
 8021e08:	2210      	movs	r2, #16
 8021e0a:	6879      	ldr	r1, [r7, #4]
 8021e0c:	4618      	mov	r0, r3
 8021e0e:	f000 ffbf 	bl	8022d90 <strBaseToUInt64>
 8021e12:	4603      	mov	r3, r0
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	bf14      	ite	ne
 8021e18:	2301      	movne	r3, #1
 8021e1a:	2300      	moveq	r3, #0
 8021e1c:	b2db      	uxtb	r3, r3
 8021e1e:	e03b      	b.n	8021e98 <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt64(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 8021e20:	68bb      	ldr	r3, [r7, #8]
 8021e22:	685b      	ldr	r3, [r3, #4]
 8021e24:	2208      	movs	r2, #8
 8021e26:	6879      	ldr	r1, [r7, #4]
 8021e28:	4618      	mov	r0, r3
 8021e2a:	f000 ffb1 	bl	8022d90 <strBaseToUInt64>
 8021e2e:	4603      	mov	r3, r0
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	bf14      	ite	ne
 8021e34:	2301      	movne	r3, #1
 8021e36:	2300      	moveq	r3, #0
 8021e38:	b2db      	uxtb	r3, r3
 8021e3a:	e02d      	b.n	8021e98 <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt64(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 8021e3c:	68bb      	ldr	r3, [r7, #8]
 8021e3e:	685b      	ldr	r3, [r3, #4]
 8021e40:	2202      	movs	r2, #2
 8021e42:	6879      	ldr	r1, [r7, #4]
 8021e44:	4618      	mov	r0, r3
 8021e46:	f000 ffa3 	bl	8022d90 <strBaseToUInt64>
 8021e4a:	4603      	mov	r3, r0
 8021e4c:	2b00      	cmp	r3, #0
 8021e4e:	bf14      	ite	ne
 8021e50:	2301      	movne	r3, #1
 8021e52:	2300      	moveq	r3, #0
 8021e54:	b2db      	uxtb	r3, r3
 8021e56:	e01f      	b.n	8021e98 <ParamSignToUInt64+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 8021e58:	78fb      	ldrb	r3, [r7, #3]
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d00d      	beq.n	8021e7a <ParamSignToUInt64+0xbe>
                return strBaseToInt64(parameter->ptr, (int64_t *) value, 10) > 0 ? TRUE : FALSE;
 8021e5e:	68bb      	ldr	r3, [r7, #8]
 8021e60:	685b      	ldr	r3, [r3, #4]
 8021e62:	220a      	movs	r2, #10
 8021e64:	6879      	ldr	r1, [r7, #4]
 8021e66:	4618      	mov	r0, r3
 8021e68:	f000 ff77 	bl	8022d5a <strBaseToInt64>
 8021e6c:	4603      	mov	r3, r0
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	bf14      	ite	ne
 8021e72:	2301      	movne	r3, #1
 8021e74:	2300      	moveq	r3, #0
 8021e76:	b2db      	uxtb	r3, r3
 8021e78:	e00e      	b.n	8021e98 <ParamSignToUInt64+0xdc>
            } else {
                return strBaseToUInt64(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 8021e7a:	68bb      	ldr	r3, [r7, #8]
 8021e7c:	685b      	ldr	r3, [r3, #4]
 8021e7e:	220a      	movs	r2, #10
 8021e80:	6879      	ldr	r1, [r7, #4]
 8021e82:	4618      	mov	r0, r3
 8021e84:	f000 ff84 	bl	8022d90 <strBaseToUInt64>
 8021e88:	4603      	mov	r3, r0
 8021e8a:	2b00      	cmp	r3, #0
 8021e8c:	bf14      	ite	ne
 8021e8e:	2301      	movne	r3, #1
 8021e90:	2300      	moveq	r3, #0
 8021e92:	b2db      	uxtb	r3, r3
 8021e94:	e000      	b.n	8021e98 <ParamSignToUInt64+0xdc>
            }
        default:
            return FALSE;
 8021e96:	2300      	movs	r3, #0
    }
}
 8021e98:	4618      	mov	r0, r3
 8021e9a:	3710      	adds	r7, #16
 8021e9c:	46bd      	mov	sp, r7
 8021e9e:	bd80      	pop	{r7, pc}
 8021ea0:	fffffeca 	.word	0xfffffeca

08021ea4 <SCPI_ParamToInt32>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToInt32(scpi_t * context, scpi_parameter_t * parameter, int32_t * value) {
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	b084      	sub	sp, #16
 8021ea8:	af00      	add	r7, sp, #0
 8021eaa:	60f8      	str	r0, [r7, #12]
 8021eac:	60b9      	str	r1, [r7, #8]
 8021eae:	607a      	str	r2, [r7, #4]
    return ParamSignToUInt32(context, parameter, (uint32_t *) value, TRUE);
 8021eb0:	2301      	movs	r3, #1
 8021eb2:	687a      	ldr	r2, [r7, #4]
 8021eb4:	68b9      	ldr	r1, [r7, #8]
 8021eb6:	68f8      	ldr	r0, [r7, #12]
 8021eb8:	f7ff ff0c 	bl	8021cd4 <ParamSignToUInt32>
 8021ebc:	4603      	mov	r3, r0
}
 8021ebe:	4618      	mov	r0, r3
 8021ec0:	3710      	adds	r7, #16
 8021ec2:	46bd      	mov	sp, r7
 8021ec4:	bd80      	pop	{r7, pc}

08021ec6 <SCPI_ParamToUInt64>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToUInt64(scpi_t * context, scpi_parameter_t * parameter, uint64_t * value) {
 8021ec6:	b580      	push	{r7, lr}
 8021ec8:	b084      	sub	sp, #16
 8021eca:	af00      	add	r7, sp, #0
 8021ecc:	60f8      	str	r0, [r7, #12]
 8021ece:	60b9      	str	r1, [r7, #8]
 8021ed0:	607a      	str	r2, [r7, #4]
    return ParamSignToUInt64(context, parameter, value, FALSE);
 8021ed2:	2300      	movs	r3, #0
 8021ed4:	687a      	ldr	r2, [r7, #4]
 8021ed6:	68b9      	ldr	r1, [r7, #8]
 8021ed8:	68f8      	ldr	r0, [r7, #12]
 8021eda:	f7ff ff6f 	bl	8021dbc <ParamSignToUInt64>
 8021ede:	4603      	mov	r3, r0
}
 8021ee0:	4618      	mov	r0, r3
 8021ee2:	3710      	adds	r7, #16
 8021ee4:	46bd      	mov	sp, r7
 8021ee6:	bd80      	pop	{r7, pc}

08021ee8 <SCPI_ParamToDouble>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToDouble(scpi_t * context, scpi_parameter_t * parameter, double * value) {
 8021ee8:	b580      	push	{r7, lr}
 8021eea:	b088      	sub	sp, #32
 8021eec:	af00      	add	r7, sp, #0
 8021eee:	60f8      	str	r0, [r7, #12]
 8021ef0:	60b9      	str	r1, [r7, #8]
 8021ef2:	607a      	str	r2, [r7, #4]
    scpi_bool_t result;
    uint64_t valint;

    if (!value) {
 8021ef4:	687b      	ldr	r3, [r7, #4]
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	d105      	bne.n	8021f06 <SCPI_ParamToDouble+0x1e>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8021efa:	491d      	ldr	r1, [pc, #116]	; (8021f70 <SCPI_ParamToDouble+0x88>)
 8021efc:	68f8      	ldr	r0, [r7, #12]
 8021efe:	f7fd f8e7 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 8021f02:	2300      	movs	r3, #0
 8021f04:	e02f      	b.n	8021f66 <SCPI_ParamToDouble+0x7e>
    }

    switch (parameter->type) {
 8021f06:	68bb      	ldr	r3, [r7, #8]
 8021f08:	781b      	ldrb	r3, [r3, #0]
 8021f0a:	2b08      	cmp	r3, #8
 8021f0c:	dc02      	bgt.n	8021f14 <SCPI_ParamToDouble+0x2c>
 8021f0e:	2b06      	cmp	r3, #6
 8021f10:	da04      	bge.n	8021f1c <SCPI_ParamToDouble+0x34>
 8021f12:	e025      	b.n	8021f60 <SCPI_ParamToDouble+0x78>
 8021f14:	3b0a      	subs	r3, #10
 8021f16:	2b01      	cmp	r3, #1
 8021f18:	d822      	bhi.n	8021f60 <SCPI_ParamToDouble+0x78>
 8021f1a:	e014      	b.n	8021f46 <SCPI_ParamToDouble+0x5e>
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
            result = SCPI_ParamToUInt64(context, parameter, &valint);
 8021f1c:	f107 0310 	add.w	r3, r7, #16
 8021f20:	461a      	mov	r2, r3
 8021f22:	68b9      	ldr	r1, [r7, #8]
 8021f24:	68f8      	ldr	r0, [r7, #12]
 8021f26:	f7ff ffce 	bl	8021ec6 <SCPI_ParamToUInt64>
 8021f2a:	4603      	mov	r3, r0
 8021f2c:	77fb      	strb	r3, [r7, #31]
            *value = valint;
 8021f2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021f32:	4610      	mov	r0, r2
 8021f34:	4619      	mov	r1, r3
 8021f36:	f7de fb59 	bl	80005ec <__aeabi_ul2d>
 8021f3a:	4602      	mov	r2, r0
 8021f3c:	460b      	mov	r3, r1
 8021f3e:	6879      	ldr	r1, [r7, #4]
 8021f40:	e9c1 2300 	strd	r2, r3, [r1]
            break;
 8021f44:	e00e      	b.n	8021f64 <SCPI_ParamToDouble+0x7c>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            result = strToDouble(parameter->ptr, value) > 0 ? TRUE : FALSE;
 8021f46:	68bb      	ldr	r3, [r7, #8]
 8021f48:	685b      	ldr	r3, [r3, #4]
 8021f4a:	6879      	ldr	r1, [r7, #4]
 8021f4c:	4618      	mov	r0, r3
 8021f4e:	f000 ff3a 	bl	8022dc6 <strToDouble>
 8021f52:	4603      	mov	r3, r0
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	bf14      	ite	ne
 8021f58:	2301      	movne	r3, #1
 8021f5a:	2300      	moveq	r3, #0
 8021f5c:	77fb      	strb	r3, [r7, #31]
            break;
 8021f5e:	e001      	b.n	8021f64 <SCPI_ParamToDouble+0x7c>
        default:
            result = FALSE;
 8021f60:	2300      	movs	r3, #0
 8021f62:	77fb      	strb	r3, [r7, #31]
    }
    return result;
 8021f64:	7ffb      	ldrb	r3, [r7, #31]
}
 8021f66:	4618      	mov	r0, r3
 8021f68:	3720      	adds	r7, #32
 8021f6a:	46bd      	mov	sp, r7
 8021f6c:	bd80      	pop	{r7, pc}
 8021f6e:	bf00      	nop
 8021f70:	fffffeca 	.word	0xfffffeca

08021f74 <ParamSignUInt32>:
 * @param value
 * @param mandatory
 * @param sign
 * @return
 */
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 8021f74:	b580      	push	{r7, lr}
 8021f76:	b088      	sub	sp, #32
 8021f78:	af00      	add	r7, sp, #0
 8021f7a:	60f8      	str	r0, [r7, #12]
 8021f7c:	60b9      	str	r1, [r7, #8]
 8021f7e:	4611      	mov	r1, r2
 8021f80:	461a      	mov	r2, r3
 8021f82:	460b      	mov	r3, r1
 8021f84:	71fb      	strb	r3, [r7, #7]
 8021f86:	4613      	mov	r3, r2
 8021f88:	71bb      	strb	r3, [r7, #6]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 8021f8a:	68bb      	ldr	r3, [r7, #8]
 8021f8c:	2b00      	cmp	r3, #0
 8021f8e:	d105      	bne.n	8021f9c <ParamSignUInt32+0x28>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8021f90:	4920      	ldr	r1, [pc, #128]	; (8022014 <ParamSignUInt32+0xa0>)
 8021f92:	68f8      	ldr	r0, [r7, #12]
 8021f94:	f7fd f89c 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 8021f98:	2300      	movs	r3, #0
 8021f9a:	e037      	b.n	802200c <ParamSignUInt32+0x98>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 8021f9c:	79fa      	ldrb	r2, [r7, #7]
 8021f9e:	f107 0310 	add.w	r3, r7, #16
 8021fa2:	4619      	mov	r1, r3
 8021fa4:	68f8      	ldr	r0, [r7, #12]
 8021fa6:	f7ff fe0b 	bl	8021bc0 <SCPI_Parameter>
 8021faa:	4603      	mov	r3, r0
 8021fac:	77fb      	strb	r3, [r7, #31]
    if (result) {
 8021fae:	7ffb      	ldrb	r3, [r7, #31]
 8021fb0:	2b00      	cmp	r3, #0
 8021fb2:	d02a      	beq.n	802200a <ParamSignUInt32+0x96>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 8021fb4:	f107 0310 	add.w	r3, r7, #16
 8021fb8:	2100      	movs	r1, #0
 8021fba:	4618      	mov	r0, r3
 8021fbc:	f7ff fe6c 	bl	8021c98 <SCPI_ParamIsNumber>
 8021fc0:	4603      	mov	r3, r0
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	d009      	beq.n	8021fda <ParamSignUInt32+0x66>
            result = ParamSignToUInt32(context, &param, value, sign);
 8021fc6:	79bb      	ldrb	r3, [r7, #6]
 8021fc8:	f107 0110 	add.w	r1, r7, #16
 8021fcc:	68ba      	ldr	r2, [r7, #8]
 8021fce:	68f8      	ldr	r0, [r7, #12]
 8021fd0:	f7ff fe80 	bl	8021cd4 <ParamSignToUInt32>
 8021fd4:	4603      	mov	r3, r0
 8021fd6:	77fb      	strb	r3, [r7, #31]
 8021fd8:	e017      	b.n	802200a <ParamSignUInt32+0x96>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 8021fda:	f107 0310 	add.w	r3, r7, #16
 8021fde:	2101      	movs	r1, #1
 8021fe0:	4618      	mov	r0, r3
 8021fe2:	f7ff fe59 	bl	8021c98 <SCPI_ParamIsNumber>
 8021fe6:	4603      	mov	r3, r0
 8021fe8:	2b00      	cmp	r3, #0
 8021fea:	d007      	beq.n	8021ffc <ParamSignUInt32+0x88>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 8021fec:	f06f 0189 	mvn.w	r1, #137	; 0x89
 8021ff0:	68f8      	ldr	r0, [r7, #12]
 8021ff2:	f7fd f86d 	bl	801f0d0 <SCPI_ErrorPush>
            result = FALSE;
 8021ff6:	2300      	movs	r3, #0
 8021ff8:	77fb      	strb	r3, [r7, #31]
 8021ffa:	e006      	b.n	802200a <ParamSignUInt32+0x96>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8021ffc:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8022000:	68f8      	ldr	r0, [r7, #12]
 8022002:	f7fd f865 	bl	801f0d0 <SCPI_ErrorPush>
            result = FALSE;
 8022006:	2300      	movs	r3, #0
 8022008:	77fb      	strb	r3, [r7, #31]
        }
    }
    return result;
 802200a:	7ffb      	ldrb	r3, [r7, #31]
}
 802200c:	4618      	mov	r0, r3
 802200e:	3720      	adds	r7, #32
 8022010:	46bd      	mov	sp, r7
 8022012:	bd80      	pop	{r7, pc}
 8022014:	fffffeca 	.word	0xfffffeca

08022018 <SCPI_ParamInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamInt32(scpi_t * context, int32_t * value, scpi_bool_t mandatory) {
 8022018:	b580      	push	{r7, lr}
 802201a:	b084      	sub	sp, #16
 802201c:	af00      	add	r7, sp, #0
 802201e:	60f8      	str	r0, [r7, #12]
 8022020:	60b9      	str	r1, [r7, #8]
 8022022:	4613      	mov	r3, r2
 8022024:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 8022026:	79fa      	ldrb	r2, [r7, #7]
 8022028:	2301      	movs	r3, #1
 802202a:	68b9      	ldr	r1, [r7, #8]
 802202c:	68f8      	ldr	r0, [r7, #12]
 802202e:	f7ff ffa1 	bl	8021f74 <ParamSignUInt32>
 8022032:	4603      	mov	r3, r0
}
 8022034:	4618      	mov	r0, r3
 8022036:	3710      	adds	r7, #16
 8022038:	46bd      	mov	sp, r7
 802203a:	bd80      	pop	{r7, pc}

0802203c <SCPI_ParamUInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory) {
 802203c:	b580      	push	{r7, lr}
 802203e:	b084      	sub	sp, #16
 8022040:	af00      	add	r7, sp, #0
 8022042:	60f8      	str	r0, [r7, #12]
 8022044:	60b9      	str	r1, [r7, #8]
 8022046:	4613      	mov	r3, r2
 8022048:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, value, mandatory, FALSE);
 802204a:	79fa      	ldrb	r2, [r7, #7]
 802204c:	2300      	movs	r3, #0
 802204e:	68b9      	ldr	r1, [r7, #8]
 8022050:	68f8      	ldr	r0, [r7, #12]
 8022052:	f7ff ff8f 	bl	8021f74 <ParamSignUInt32>
 8022056:	4603      	mov	r3, r0
}
 8022058:	4618      	mov	r0, r3
 802205a:	3710      	adds	r7, #16
 802205c:	46bd      	mov	sp, r7
 802205e:	bd80      	pop	{r7, pc}

08022060 <SCPI_ParamCopyText>:
    }

    return result;
}

scpi_bool_t SCPI_ParamCopyText(scpi_t * context, char * buffer, size_t buffer_len, size_t * copy_len, scpi_bool_t mandatory) {
 8022060:	b580      	push	{r7, lr}
 8022062:	b08c      	sub	sp, #48	; 0x30
 8022064:	af00      	add	r7, sp, #0
 8022066:	60f8      	str	r0, [r7, #12]
 8022068:	60b9      	str	r1, [r7, #8]
 802206a:	607a      	str	r2, [r7, #4]
 802206c:	603b      	str	r3, [r7, #0]
    scpi_parameter_t param;
    size_t i_from;
    size_t i_to;
    char quote;

    if (!buffer || !copy_len) {
 802206e:	68bb      	ldr	r3, [r7, #8]
 8022070:	2b00      	cmp	r3, #0
 8022072:	d002      	beq.n	802207a <SCPI_ParamCopyText+0x1a>
 8022074:	683b      	ldr	r3, [r7, #0]
 8022076:	2b00      	cmp	r3, #0
 8022078:	d105      	bne.n	8022086 <SCPI_ParamCopyText+0x26>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 802207a:	4935      	ldr	r1, [pc, #212]	; (8022150 <SCPI_ParamCopyText+0xf0>)
 802207c:	68f8      	ldr	r0, [r7, #12]
 802207e:	f7fd f827 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 8022082:	2300      	movs	r3, #0
 8022084:	e05f      	b.n	8022146 <SCPI_ParamCopyText+0xe6>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 8022086:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 802208a:	f107 0314 	add.w	r3, r7, #20
 802208e:	4619      	mov	r1, r3
 8022090:	68f8      	ldr	r0, [r7, #12]
 8022092:	f7ff fd95 	bl	8021bc0 <SCPI_Parameter>
 8022096:	4603      	mov	r3, r0
 8022098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (result) {
 802209c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	d04b      	beq.n	802213c <SCPI_ParamCopyText+0xdc>

        switch (param.type) {
 80220a4:	7d3b      	ldrb	r3, [r7, #20]
 80220a6:	3b0e      	subs	r3, #14
 80220a8:	2b01      	cmp	r3, #1
 80220aa:	d83e      	bhi.n	802212a <SCPI_ParamCopyText+0xca>
            case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
            case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
                quote = param.type == SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA ? '\'' : '"';
 80220ac:	7d3b      	ldrb	r3, [r7, #20]
 80220ae:	2b0e      	cmp	r3, #14
 80220b0:	d101      	bne.n	80220b6 <SCPI_ParamCopyText+0x56>
 80220b2:	2327      	movs	r3, #39	; 0x27
 80220b4:	e000      	b.n	80220b8 <SCPI_ParamCopyText+0x58>
 80220b6:	2322      	movs	r3, #34	; 0x22
 80220b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 80220bc:	2301      	movs	r3, #1
 80220be:	62bb      	str	r3, [r7, #40]	; 0x28
 80220c0:	2300      	movs	r3, #0
 80220c2:	627b      	str	r3, [r7, #36]	; 0x24
 80220c4:	e01c      	b.n	8022100 <SCPI_ParamCopyText+0xa0>
                    if (i_from >= buffer_len) {
 80220c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80220c8:	687b      	ldr	r3, [r7, #4]
 80220ca:	429a      	cmp	r2, r3
 80220cc:	d21f      	bcs.n	802210e <SCPI_ParamCopyText+0xae>
                        break;
                    }
                    buffer[i_to] = param.ptr[i_from];
 80220ce:	69ba      	ldr	r2, [r7, #24]
 80220d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220d2:	441a      	add	r2, r3
 80220d4:	68b9      	ldr	r1, [r7, #8]
 80220d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220d8:	440b      	add	r3, r1
 80220da:	7812      	ldrb	r2, [r2, #0]
 80220dc:	701a      	strb	r2, [r3, #0]
                    i_to++;
 80220de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220e0:	3301      	adds	r3, #1
 80220e2:	627b      	str	r3, [r7, #36]	; 0x24
                    if (param.ptr[i_from] == quote) {
 80220e4:	69ba      	ldr	r2, [r7, #24]
 80220e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220e8:	4413      	add	r3, r2
 80220ea:	781b      	ldrb	r3, [r3, #0]
 80220ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80220f0:	429a      	cmp	r2, r3
 80220f2:	d102      	bne.n	80220fa <SCPI_ParamCopyText+0x9a>
                        i_from++;
 80220f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220f6:	3301      	adds	r3, #1
 80220f8:	62bb      	str	r3, [r7, #40]	; 0x28
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 80220fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220fc:	3301      	adds	r3, #1
 80220fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8022100:	69fb      	ldr	r3, [r7, #28]
 8022102:	3b01      	subs	r3, #1
 8022104:	461a      	mov	r2, r3
 8022106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022108:	4293      	cmp	r3, r2
 802210a:	d3dc      	bcc.n	80220c6 <SCPI_ParamCopyText+0x66>
 802210c:	e000      	b.n	8022110 <SCPI_ParamCopyText+0xb0>
                        break;
 802210e:	bf00      	nop
                    }
                }
                *copy_len = i_to;
 8022110:	683b      	ldr	r3, [r7, #0]
 8022112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022114:	601a      	str	r2, [r3, #0]
                if (i_to < buffer_len) {
 8022116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022118:	687b      	ldr	r3, [r7, #4]
 802211a:	429a      	cmp	r2, r3
 802211c:	d210      	bcs.n	8022140 <SCPI_ParamCopyText+0xe0>
                    buffer[i_to] = 0;
 802211e:	68ba      	ldr	r2, [r7, #8]
 8022120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022122:	4413      	add	r3, r2
 8022124:	2200      	movs	r2, #0
 8022126:	701a      	strb	r2, [r3, #0]
                }
                break;
 8022128:	e00a      	b.n	8022140 <SCPI_ParamCopyText+0xe0>
            default:
                SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 802212a:	f06f 0167 	mvn.w	r1, #103	; 0x67
 802212e:	68f8      	ldr	r0, [r7, #12]
 8022130:	f7fc ffce 	bl	801f0d0 <SCPI_ErrorPush>
                result = FALSE;
 8022134:	2300      	movs	r3, #0
 8022136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 802213a:	e002      	b.n	8022142 <SCPI_ParamCopyText+0xe2>
        }
    }
 802213c:	bf00      	nop
 802213e:	e000      	b.n	8022142 <SCPI_ParamCopyText+0xe2>
                break;
 8022140:	bf00      	nop

    return result;
 8022142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8022146:	4618      	mov	r0, r3
 8022148:	3730      	adds	r7, #48	; 0x30
 802214a:	46bd      	mov	sp, r7
 802214c:	bd80      	pop	{r7, pc}
 802214e:	bf00      	nop
 8022150:	fffffeca 	.word	0xfffffeca

08022154 <SCPI_ParamToChoice>:
 * @param parameter - should be PROGRAM_MNEMONIC
 * @param options - NULL terminated list of choices
 * @param value - index to options
 * @return
 */
scpi_bool_t SCPI_ParamToChoice(scpi_t * context, scpi_parameter_t * parameter, const scpi_choice_def_t * options, int32_t * value) {
 8022154:	b590      	push	{r4, r7, lr}
 8022156:	b089      	sub	sp, #36	; 0x24
 8022158:	af02      	add	r7, sp, #8
 802215a:	60f8      	str	r0, [r7, #12]
 802215c:	60b9      	str	r1, [r7, #8]
 802215e:	607a      	str	r2, [r7, #4]
 8022160:	603b      	str	r3, [r7, #0]
    size_t res;
    scpi_bool_t result = FALSE;
 8022162:	2300      	movs	r3, #0
 8022164:	74fb      	strb	r3, [r7, #19]

    if (!options || !value) {
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	2b00      	cmp	r3, #0
 802216a:	d002      	beq.n	8022172 <SCPI_ParamToChoice+0x1e>
 802216c:	683b      	ldr	r3, [r7, #0]
 802216e:	2b00      	cmp	r3, #0
 8022170:	d105      	bne.n	802217e <SCPI_ParamToChoice+0x2a>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8022172:	4929      	ldr	r1, [pc, #164]	; (8022218 <SCPI_ParamToChoice+0xc4>)
 8022174:	68f8      	ldr	r0, [r7, #12]
 8022176:	f7fc ffab 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 802217a:	2300      	movs	r3, #0
 802217c:	e048      	b.n	8022210 <SCPI_ParamToChoice+0xbc>
    }

    if (parameter->type == SCPI_TOKEN_PROGRAM_MNEMONIC) {
 802217e:	68bb      	ldr	r3, [r7, #8]
 8022180:	781b      	ldrb	r3, [r3, #0]
 8022182:	2b09      	cmp	r3, #9
 8022184:	d13e      	bne.n	8022204 <SCPI_ParamToChoice+0xb0>
        for (res = 0; options[res].name; ++res) {
 8022186:	2300      	movs	r3, #0
 8022188:	617b      	str	r3, [r7, #20]
 802218a:	e028      	b.n	80221de <SCPI_ParamToChoice+0x8a>
            if (matchPattern(options[res].name, strlen(options[res].name), parameter->ptr, parameter->len, NULL)) {
 802218c:	697b      	ldr	r3, [r7, #20]
 802218e:	00db      	lsls	r3, r3, #3
 8022190:	687a      	ldr	r2, [r7, #4]
 8022192:	4413      	add	r3, r2
 8022194:	681c      	ldr	r4, [r3, #0]
 8022196:	697b      	ldr	r3, [r7, #20]
 8022198:	00db      	lsls	r3, r3, #3
 802219a:	687a      	ldr	r2, [r7, #4]
 802219c:	4413      	add	r3, r2
 802219e:	681b      	ldr	r3, [r3, #0]
 80221a0:	4618      	mov	r0, r3
 80221a2:	f7de f83f 	bl	8000224 <strlen>
 80221a6:	4601      	mov	r1, r0
 80221a8:	68bb      	ldr	r3, [r7, #8]
 80221aa:	685a      	ldr	r2, [r3, #4]
 80221ac:	68bb      	ldr	r3, [r7, #8]
 80221ae:	689b      	ldr	r3, [r3, #8]
 80221b0:	4618      	mov	r0, r3
 80221b2:	2300      	movs	r3, #0
 80221b4:	9300      	str	r3, [sp, #0]
 80221b6:	4603      	mov	r3, r0
 80221b8:	4620      	mov	r0, r4
 80221ba:	f000 ff19 	bl	8022ff0 <matchPattern>
 80221be:	4603      	mov	r3, r0
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d009      	beq.n	80221d8 <SCPI_ParamToChoice+0x84>
                *value = options[res].tag;
 80221c4:	697b      	ldr	r3, [r7, #20]
 80221c6:	00db      	lsls	r3, r3, #3
 80221c8:	687a      	ldr	r2, [r7, #4]
 80221ca:	4413      	add	r3, r2
 80221cc:	685a      	ldr	r2, [r3, #4]
 80221ce:	683b      	ldr	r3, [r7, #0]
 80221d0:	601a      	str	r2, [r3, #0]
                result = TRUE;
 80221d2:	2301      	movs	r3, #1
 80221d4:	74fb      	strb	r3, [r7, #19]
                break;
 80221d6:	e009      	b.n	80221ec <SCPI_ParamToChoice+0x98>
        for (res = 0; options[res].name; ++res) {
 80221d8:	697b      	ldr	r3, [r7, #20]
 80221da:	3301      	adds	r3, #1
 80221dc:	617b      	str	r3, [r7, #20]
 80221de:	697b      	ldr	r3, [r7, #20]
 80221e0:	00db      	lsls	r3, r3, #3
 80221e2:	687a      	ldr	r2, [r7, #4]
 80221e4:	4413      	add	r3, r2
 80221e6:	681b      	ldr	r3, [r3, #0]
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	d1cf      	bne.n	802218c <SCPI_ParamToChoice+0x38>
            }
        }

        if (!result) {
 80221ec:	7cfb      	ldrb	r3, [r7, #19]
 80221ee:	f083 0301 	eor.w	r3, r3, #1
 80221f2:	b2db      	uxtb	r3, r3
 80221f4:	2b00      	cmp	r3, #0
 80221f6:	d00a      	beq.n	802220e <SCPI_ParamToChoice+0xba>
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 80221f8:	f06f 01df 	mvn.w	r1, #223	; 0xdf
 80221fc:	68f8      	ldr	r0, [r7, #12]
 80221fe:	f7fc ff67 	bl	801f0d0 <SCPI_ErrorPush>
 8022202:	e004      	b.n	802220e <SCPI_ParamToChoice+0xba>
        }
    } else {
        SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8022204:	f06f 0167 	mvn.w	r1, #103	; 0x67
 8022208:	68f8      	ldr	r0, [r7, #12]
 802220a:	f7fc ff61 	bl	801f0d0 <SCPI_ErrorPush>
    }

    return result;
 802220e:	7cfb      	ldrb	r3, [r7, #19]
}
 8022210:	4618      	mov	r0, r3
 8022212:	371c      	adds	r7, #28
 8022214:	46bd      	mov	sp, r7
 8022216:	bd90      	pop	{r4, r7, pc}
 8022218:	fffffeca 	.word	0xfffffeca

0802221c <SCPI_ParamBool>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamBool(scpi_t * context, scpi_bool_t * value, scpi_bool_t mandatory) {
 802221c:	b580      	push	{r7, lr}
 802221e:	b08a      	sub	sp, #40	; 0x28
 8022220:	af00      	add	r7, sp, #0
 8022222:	60f8      	str	r0, [r7, #12]
 8022224:	60b9      	str	r1, [r7, #8]
 8022226:	4613      	mov	r3, r2
 8022228:	71fb      	strb	r3, [r7, #7]
    scpi_bool_t result;
    scpi_parameter_t param;
    int32_t intval;

    if (!value) {
 802222a:	68bb      	ldr	r3, [r7, #8]
 802222c:	2b00      	cmp	r3, #0
 802222e:	d105      	bne.n	802223c <SCPI_ParamBool+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8022230:	4922      	ldr	r1, [pc, #136]	; (80222bc <SCPI_ParamBool+0xa0>)
 8022232:	68f8      	ldr	r0, [r7, #12]
 8022234:	f7fc ff4c 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 8022238:	2300      	movs	r3, #0
 802223a:	e03a      	b.n	80222b2 <SCPI_ParamBool+0x96>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 802223c:	79fa      	ldrb	r2, [r7, #7]
 802223e:	f107 0318 	add.w	r3, r7, #24
 8022242:	4619      	mov	r1, r3
 8022244:	68f8      	ldr	r0, [r7, #12]
 8022246:	f7ff fcbb 	bl	8021bc0 <SCPI_Parameter>
 802224a:	4603      	mov	r3, r0
 802224c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (result) {
 8022250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022254:	2b00      	cmp	r3, #0
 8022256:	d02a      	beq.n	80222ae <SCPI_ParamBool+0x92>
        if (param.type == SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA) {
 8022258:	7e3b      	ldrb	r3, [r7, #24]
 802225a:	2b0a      	cmp	r3, #10
 802225c:	d110      	bne.n	8022280 <SCPI_ParamBool+0x64>
            SCPI_ParamToInt32(context, &param, &intval);
 802225e:	f107 0214 	add.w	r2, r7, #20
 8022262:	f107 0318 	add.w	r3, r7, #24
 8022266:	4619      	mov	r1, r3
 8022268:	68f8      	ldr	r0, [r7, #12]
 802226a:	f7ff fe1b 	bl	8021ea4 <SCPI_ParamToInt32>
            *value = intval ? TRUE : FALSE;
 802226e:	697b      	ldr	r3, [r7, #20]
 8022270:	2b00      	cmp	r3, #0
 8022272:	bf14      	ite	ne
 8022274:	2301      	movne	r3, #1
 8022276:	2300      	moveq	r3, #0
 8022278:	b2da      	uxtb	r2, r3
 802227a:	68bb      	ldr	r3, [r7, #8]
 802227c:	701a      	strb	r2, [r3, #0]
 802227e:	e016      	b.n	80222ae <SCPI_ParamBool+0x92>
        } else {
            result = SCPI_ParamToChoice(context, &param, scpi_bool_def, &intval);
 8022280:	f107 0314 	add.w	r3, r7, #20
 8022284:	f107 0118 	add.w	r1, r7, #24
 8022288:	4a0d      	ldr	r2, [pc, #52]	; (80222c0 <SCPI_ParamBool+0xa4>)
 802228a:	68f8      	ldr	r0, [r7, #12]
 802228c:	f7ff ff62 	bl	8022154 <SCPI_ParamToChoice>
 8022290:	4603      	mov	r3, r0
 8022292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (result) {
 8022296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802229a:	2b00      	cmp	r3, #0
 802229c:	d007      	beq.n	80222ae <SCPI_ParamBool+0x92>
                *value = intval ? TRUE : FALSE;
 802229e:	697b      	ldr	r3, [r7, #20]
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	bf14      	ite	ne
 80222a4:	2301      	movne	r3, #1
 80222a6:	2300      	moveq	r3, #0
 80222a8:	b2da      	uxtb	r2, r3
 80222aa:	68bb      	ldr	r3, [r7, #8]
 80222ac:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return result;
 80222ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80222b2:	4618      	mov	r0, r3
 80222b4:	3728      	adds	r7, #40	; 0x28
 80222b6:	46bd      	mov	sp, r7
 80222b8:	bd80      	pop	{r7, pc}
 80222ba:	bf00      	nop
 80222bc:	fffffeca 	.word	0xfffffeca
 80222c0:	0802d560 	.word	0x0802d560

080222c4 <SCPI_ParamChoice>:
 * @param options
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamChoice(scpi_t * context, const scpi_choice_def_t * options, int32_t * value, scpi_bool_t mandatory) {
 80222c4:	b580      	push	{r7, lr}
 80222c6:	b088      	sub	sp, #32
 80222c8:	af00      	add	r7, sp, #0
 80222ca:	60f8      	str	r0, [r7, #12]
 80222cc:	60b9      	str	r1, [r7, #8]
 80222ce:	607a      	str	r2, [r7, #4]
 80222d0:	70fb      	strb	r3, [r7, #3]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!options || !value) {
 80222d2:	68bb      	ldr	r3, [r7, #8]
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	d002      	beq.n	80222de <SCPI_ParamChoice+0x1a>
 80222d8:	687b      	ldr	r3, [r7, #4]
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d105      	bne.n	80222ea <SCPI_ParamChoice+0x26>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80222de:	4910      	ldr	r1, [pc, #64]	; (8022320 <SCPI_ParamChoice+0x5c>)
 80222e0:	68f8      	ldr	r0, [r7, #12]
 80222e2:	f7fc fef5 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 80222e6:	2300      	movs	r3, #0
 80222e8:	e015      	b.n	8022316 <SCPI_ParamChoice+0x52>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 80222ea:	78fa      	ldrb	r2, [r7, #3]
 80222ec:	f107 0310 	add.w	r3, r7, #16
 80222f0:	4619      	mov	r1, r3
 80222f2:	68f8      	ldr	r0, [r7, #12]
 80222f4:	f7ff fc64 	bl	8021bc0 <SCPI_Parameter>
 80222f8:	4603      	mov	r3, r0
 80222fa:	77fb      	strb	r3, [r7, #31]
    if (result) {
 80222fc:	7ffb      	ldrb	r3, [r7, #31]
 80222fe:	2b00      	cmp	r3, #0
 8022300:	d008      	beq.n	8022314 <SCPI_ParamChoice+0x50>
        result = SCPI_ParamToChoice(context, &param, options, value);
 8022302:	f107 0110 	add.w	r1, r7, #16
 8022306:	687b      	ldr	r3, [r7, #4]
 8022308:	68ba      	ldr	r2, [r7, #8]
 802230a:	68f8      	ldr	r0, [r7, #12]
 802230c:	f7ff ff22 	bl	8022154 <SCPI_ParamToChoice>
 8022310:	4603      	mov	r3, r0
 8022312:	77fb      	strb	r3, [r7, #31]
    }

    return result;
 8022314:	7ffb      	ldrb	r3, [r7, #31]
}
 8022316:	4618      	mov	r0, r3
 8022318:	3720      	adds	r7, #32
 802231a:	46bd      	mov	sp, r7
 802231c:	bd80      	pop	{r7, pc}
 802231e:	bf00      	nop
 8022320:	fffffeca 	.word	0xfffffeca

08022324 <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 8022324:	b580      	push	{r7, lr}
 8022326:	b08a      	sub	sp, #40	; 0x28
 8022328:	af00      	add	r7, sp, #0
 802232a:	6078      	str	r0, [r7, #4]
 802232c:	6039      	str	r1, [r7, #0]
    scpi_token_t tmp;
    int result = 0;
 802232e:	2300      	movs	r3, #0
 8022330:	627b      	str	r3, [r7, #36]	; 0x24
    int wsLen;
    int suffixLen;
    int realLen = 0;
 8022332:	2300      	movs	r3, #0
 8022334:	623b      	str	r3, [r7, #32]
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8022336:	f107 030c 	add.w	r3, r7, #12
 802233a:	4619      	mov	r1, r3
 802233c:	6878      	ldr	r0, [r7, #4]
 802233e:	f7fe f843 	bl	80203c8 <scpiLex_WhiteSpace>
 8022342:	4602      	mov	r2, r0
 8022344:	6a3b      	ldr	r3, [r7, #32]
 8022346:	4413      	add	r3, r2
 8022348:	623b      	str	r3, [r7, #32]

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 802234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802234c:	2b00      	cmp	r3, #0
 802234e:	d104      	bne.n	802235a <scpiParser_parseProgramData+0x36>
 8022350:	6839      	ldr	r1, [r7, #0]
 8022352:	6878      	ldr	r0, [r7, #4]
 8022354:	f7fe fab8 	bl	80208c8 <scpiLex_NondecimalNumericData>
 8022358:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 802235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802235c:	2b00      	cmp	r3, #0
 802235e:	d104      	bne.n	802236a <scpiParser_parseProgramData+0x46>
 8022360:	6839      	ldr	r1, [r7, #0]
 8022362:	6878      	ldr	r0, [r7, #4]
 8022364:	f7fe f918 	bl	8020598 <scpiLex_CharacterProgramData>
 8022368:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) {
 802236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802236c:	2b00      	cmp	r3, #0
 802236e:	d126      	bne.n	80223be <scpiParser_parseProgramData+0x9a>
        result = scpiLex_DecimalNumericProgramData(state, token);
 8022370:	6839      	ldr	r1, [r7, #0]
 8022372:	6878      	ldr	r0, [r7, #4]
 8022374:	f7fe f9b4 	bl	80206e0 <scpiLex_DecimalNumericProgramData>
 8022378:	6278      	str	r0, [r7, #36]	; 0x24
        if (result != 0) {
 802237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802237c:	2b00      	cmp	r3, #0
 802237e:	d01e      	beq.n	80223be <scpiParser_parseProgramData+0x9a>
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 8022380:	f107 030c 	add.w	r3, r7, #12
 8022384:	4619      	mov	r1, r3
 8022386:	6878      	ldr	r0, [r7, #4]
 8022388:	f7fe f81e 	bl	80203c8 <scpiLex_WhiteSpace>
 802238c:	61f8      	str	r0, [r7, #28]
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 802238e:	f107 030c 	add.w	r3, r7, #12
 8022392:	4619      	mov	r1, r3
 8022394:	6878      	ldr	r0, [r7, #4]
 8022396:	f7fe f9de 	bl	8020756 <scpiLex_SuffixProgramData>
 802239a:	61b8      	str	r0, [r7, #24]
            if (suffixLen > 0) {
 802239c:	69bb      	ldr	r3, [r7, #24]
 802239e:	2b00      	cmp	r3, #0
 80223a0:	dd0d      	ble.n	80223be <scpiParser_parseProgramData+0x9a>
                token->len += wsLen + suffixLen;
 80223a2:	683b      	ldr	r3, [r7, #0]
 80223a4:	689a      	ldr	r2, [r3, #8]
 80223a6:	69f9      	ldr	r1, [r7, #28]
 80223a8:	69bb      	ldr	r3, [r7, #24]
 80223aa:	440b      	add	r3, r1
 80223ac:	441a      	add	r2, r3
 80223ae:	683b      	ldr	r3, [r7, #0]
 80223b0:	609a      	str	r2, [r3, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 80223b2:	683b      	ldr	r3, [r7, #0]
 80223b4:	220b      	movs	r2, #11
 80223b6:	701a      	strb	r2, [r3, #0]
                result = token->len;
 80223b8:	683b      	ldr	r3, [r7, #0]
 80223ba:	689b      	ldr	r3, [r3, #8]
 80223bc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 80223be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223c0:	2b00      	cmp	r3, #0
 80223c2:	d104      	bne.n	80223ce <scpiParser_parseProgramData+0xaa>
 80223c4:	6839      	ldr	r1, [r7, #0]
 80223c6:	6878      	ldr	r0, [r7, #4]
 80223c8:	f7fe fb7a 	bl	8020ac0 <scpiLex_StringProgramData>
 80223cc:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 80223ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	d104      	bne.n	80223de <scpiParser_parseProgramData+0xba>
 80223d4:	6839      	ldr	r1, [r7, #0]
 80223d6:	6878      	ldr	r0, [r7, #4]
 80223d8:	f7fe fc1c 	bl	8020c14 <scpiLex_ArbitraryBlockProgramData>
 80223dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 80223de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d104      	bne.n	80223ee <scpiParser_parseProgramData+0xca>
 80223e4:	6839      	ldr	r1, [r7, #0]
 80223e6:	6878      	ldr	r0, [r7, #4]
 80223e8:	f7fe fd16 	bl	8020e18 <scpiLex_ProgramExpression>
 80223ec:	6278      	str	r0, [r7, #36]	; 0x24

    realLen += scpiLex_WhiteSpace(state, &tmp);
 80223ee:	f107 030c 	add.w	r3, r7, #12
 80223f2:	4619      	mov	r1, r3
 80223f4:	6878      	ldr	r0, [r7, #4]
 80223f6:	f7fd ffe7 	bl	80203c8 <scpiLex_WhiteSpace>
 80223fa:	4602      	mov	r2, r0
 80223fc:	6a3b      	ldr	r3, [r7, #32]
 80223fe:	4413      	add	r3, r2
 8022400:	623b      	str	r3, [r7, #32]

    return result + realLen;
 8022402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022404:	6a3b      	ldr	r3, [r7, #32]
 8022406:	4413      	add	r3, r2
}
 8022408:	4618      	mov	r0, r3
 802240a:	3728      	adds	r7, #40	; 0x28
 802240c:	46bd      	mov	sp, r7
 802240e:	bd80      	pop	{r7, pc}

08022410 <scpiParser_parseAllProgramData>:
 * @param state
 * @param token
 * @param numberOfParameters
 * @return
 */
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 8022410:	b580      	push	{r7, lr}
 8022412:	b08a      	sub	sp, #40	; 0x28
 8022414:	af00      	add	r7, sp, #0
 8022416:	60f8      	str	r0, [r7, #12]
 8022418:	60b9      	str	r1, [r7, #8]
 802241a:	607a      	str	r2, [r7, #4]

    int result;
    scpi_token_t tmp;
    int paramCount = 0;
 802241c:	2300      	movs	r3, #0
 802241e:	623b      	str	r3, [r7, #32]

    token->len = -1;
 8022420:	68bb      	ldr	r3, [r7, #8]
 8022422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022426:	609a      	str	r2, [r3, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 8022428:	68bb      	ldr	r3, [r7, #8]
 802242a:	2218      	movs	r2, #24
 802242c:	701a      	strb	r2, [r3, #0]
    token->ptr = state->pos;
 802242e:	68fb      	ldr	r3, [r7, #12]
 8022430:	685a      	ldr	r2, [r3, #4]
 8022432:	68bb      	ldr	r3, [r7, #8]
 8022434:	605a      	str	r2, [r3, #4]


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8022436:	2301      	movs	r3, #1
 8022438:	627b      	str	r3, [r7, #36]	; 0x24
 802243a:	e037      	b.n	80224ac <scpiParser_parseAllProgramData+0x9c>
        token->len += result;
 802243c:	68bb      	ldr	r3, [r7, #8]
 802243e:	689a      	ldr	r2, [r3, #8]
 8022440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022442:	441a      	add	r2, r3
 8022444:	68bb      	ldr	r3, [r7, #8]
 8022446:	609a      	str	r2, [r3, #8]

        if (result == 0) {
 8022448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802244a:	2b00      	cmp	r3, #0
 802244c:	d109      	bne.n	8022462 <scpiParser_parseAllProgramData+0x52>
            token->type = SCPI_TOKEN_UNKNOWN;
 802244e:	68bb      	ldr	r3, [r7, #8]
 8022450:	221a      	movs	r2, #26
 8022452:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 8022454:	68bb      	ldr	r3, [r7, #8]
 8022456:	2200      	movs	r2, #0
 8022458:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 802245a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802245e:	623b      	str	r3, [r7, #32]
            break;
 8022460:	e027      	b.n	80224b2 <scpiParser_parseAllProgramData+0xa2>
        }

        result = scpiParser_parseProgramData(state, &tmp);
 8022462:	f107 0314 	add.w	r3, r7, #20
 8022466:	4619      	mov	r1, r3
 8022468:	68f8      	ldr	r0, [r7, #12]
 802246a:	f7ff ff5b 	bl	8022324 <scpiParser_parseProgramData>
 802246e:	6278      	str	r0, [r7, #36]	; 0x24
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 8022470:	7d3b      	ldrb	r3, [r7, #20]
 8022472:	2b1a      	cmp	r3, #26
 8022474:	d006      	beq.n	8022484 <scpiParser_parseAllProgramData+0x74>
            token->len += result;
 8022476:	68bb      	ldr	r3, [r7, #8]
 8022478:	689a      	ldr	r2, [r3, #8]
 802247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802247c:	441a      	add	r2, r3
 802247e:	68bb      	ldr	r3, [r7, #8]
 8022480:	609a      	str	r2, [r3, #8]
 8022482:	e009      	b.n	8022498 <scpiParser_parseAllProgramData+0x88>
        } else {
            token->type = SCPI_TOKEN_UNKNOWN;
 8022484:	68bb      	ldr	r3, [r7, #8]
 8022486:	221a      	movs	r2, #26
 8022488:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 802248a:	68bb      	ldr	r3, [r7, #8]
 802248c:	2200      	movs	r2, #0
 802248e:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 8022490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022494:	623b      	str	r3, [r7, #32]
            break;
 8022496:	e00c      	b.n	80224b2 <scpiParser_parseAllProgramData+0xa2>
        }
        paramCount++;
 8022498:	6a3b      	ldr	r3, [r7, #32]
 802249a:	3301      	adds	r3, #1
 802249c:	623b      	str	r3, [r7, #32]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 802249e:	f107 0314 	add.w	r3, r7, #20
 80224a2:	4619      	mov	r1, r3
 80224a4:	68f8      	ldr	r0, [r7, #12]
 80224a6:	f7fe fd0a 	bl	8020ebe <scpiLex_Comma>
 80224aa:	6278      	str	r0, [r7, #36]	; 0x24
 80224ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224ae:	2b00      	cmp	r3, #0
 80224b0:	d1c4      	bne.n	802243c <scpiParser_parseAllProgramData+0x2c>
    }

    if (token->len == -1) {
 80224b2:	68bb      	ldr	r3, [r7, #8]
 80224b4:	689b      	ldr	r3, [r3, #8]
 80224b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80224ba:	d102      	bne.n	80224c2 <scpiParser_parseAllProgramData+0xb2>
        token->len = 0;
 80224bc:	68bb      	ldr	r3, [r7, #8]
 80224be:	2200      	movs	r2, #0
 80224c0:	609a      	str	r2, [r3, #8]
    }

    if (numberOfParameters != NULL) {
 80224c2:	687b      	ldr	r3, [r7, #4]
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	d002      	beq.n	80224ce <scpiParser_parseAllProgramData+0xbe>
        *numberOfParameters = paramCount;
 80224c8:	687b      	ldr	r3, [r7, #4]
 80224ca:	6a3a      	ldr	r2, [r7, #32]
 80224cc:	601a      	str	r2, [r3, #0]
    }
    return token->len;
 80224ce:	68bb      	ldr	r3, [r7, #8]
 80224d0:	689b      	ldr	r3, [r3, #8]
}
 80224d2:	4618      	mov	r0, r3
 80224d4:	3728      	adds	r7, #40	; 0x28
 80224d6:	46bd      	mov	sp, r7
 80224d8:	bd80      	pop	{r7, pc}

080224da <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 80224da:	b580      	push	{r7, lr}
 80224dc:	b08c      	sub	sp, #48	; 0x30
 80224de:	af00      	add	r7, sp, #0
 80224e0:	60f8      	str	r0, [r7, #12]
 80224e2:	60b9      	str	r1, [r7, #8]
 80224e4:	607a      	str	r2, [r7, #4]
    lex_state_t lex_state;
    scpi_token_t tmp;
    int result = 0;
 80224e6:	2300      	movs	r3, #0
 80224e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    lex_state.buffer = lex_state.pos = buffer;
 80224ea:	68bb      	ldr	r3, [r7, #8]
 80224ec:	627b      	str	r3, [r7, #36]	; 0x24
 80224ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224f0:	623b      	str	r3, [r7, #32]
    lex_state.len = len;
 80224f2:	687b      	ldr	r3, [r7, #4]
 80224f4:	62bb      	str	r3, [r7, #40]	; 0x28
    state->numberOfParameters = 0;
 80224f6:	68fb      	ldr	r3, [r7, #12]
 80224f8:	2200      	movs	r2, #0
 80224fa:	619a      	str	r2, [r3, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 80224fc:	f107 0214 	add.w	r2, r7, #20
 8022500:	f107 0320 	add.w	r3, r7, #32
 8022504:	4611      	mov	r1, r2
 8022506:	4618      	mov	r0, r3
 8022508:	f7fd ff5e 	bl	80203c8 <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 802250c:	68fa      	ldr	r2, [r7, #12]
 802250e:	f107 0320 	add.w	r3, r7, #32
 8022512:	4611      	mov	r1, r2
 8022514:	4618      	mov	r0, r3
 8022516:	f7fd ffde 	bl	80204d6 <scpiLex_ProgramHeader>
 802251a:	4603      	mov	r3, r0
 802251c:	2b00      	cmp	r3, #0
 802251e:	db1e      	blt.n	802255e <scpiParser_detectProgramMessageUnit+0x84>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 8022520:	f107 0214 	add.w	r2, r7, #20
 8022524:	f107 0320 	add.w	r3, r7, #32
 8022528:	4611      	mov	r1, r2
 802252a:	4618      	mov	r0, r3
 802252c:	f7fd ff4c 	bl	80203c8 <scpiLex_WhiteSpace>
 8022530:	4603      	mov	r3, r0
 8022532:	2b00      	cmp	r3, #0
 8022534:	dd0b      	ble.n	802254e <scpiParser_detectProgramMessageUnit+0x74>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 8022536:	68fb      	ldr	r3, [r7, #12]
 8022538:	f103 010c 	add.w	r1, r3, #12
 802253c:	68fb      	ldr	r3, [r7, #12]
 802253e:	f103 0218 	add.w	r2, r3, #24
 8022542:	f107 0320 	add.w	r3, r7, #32
 8022546:	4618      	mov	r0, r3
 8022548:	f7ff ff62 	bl	8022410 <scpiParser_parseAllProgramData>
 802254c:	e014      	b.n	8022578 <scpiParser_detectProgramMessageUnit+0x9e>
        } else {
            invalidateToken(&state->programData, lex_state.pos);
 802254e:	68fb      	ldr	r3, [r7, #12]
 8022550:	330c      	adds	r3, #12
 8022552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022554:	4611      	mov	r1, r2
 8022556:	4618      	mov	r0, r3
 8022558:	f7ff fb1e 	bl	8021b98 <invalidateToken>
 802255c:	e00c      	b.n	8022578 <scpiParser_detectProgramMessageUnit+0x9e>
        }
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
 802255e:	68fb      	ldr	r3, [r7, #12]
 8022560:	6a3a      	ldr	r2, [r7, #32]
 8022562:	4611      	mov	r1, r2
 8022564:	4618      	mov	r0, r3
 8022566:	f7ff fb17 	bl	8021b98 <invalidateToken>
        invalidateToken(&state->programData, lex_state.buffer);
 802256a:	68fb      	ldr	r3, [r7, #12]
 802256c:	330c      	adds	r3, #12
 802256e:	6a3a      	ldr	r2, [r7, #32]
 8022570:	4611      	mov	r1, r2
 8022572:	4618      	mov	r0, r3
 8022574:	f7ff fb10 	bl	8021b98 <invalidateToken>
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 8022578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802257a:	2b00      	cmp	r3, #0
 802257c:	d108      	bne.n	8022590 <scpiParser_detectProgramMessageUnit+0xb6>
 802257e:	f107 0214 	add.w	r2, r7, #20
 8022582:	f107 0320 	add.w	r3, r7, #32
 8022586:	4611      	mov	r1, r2
 8022588:	4618      	mov	r0, r3
 802258a:	f7fe fd27 	bl	8020fdc <scpiLex_NewLine>
 802258e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 8022590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022592:	2b00      	cmp	r3, #0
 8022594:	d108      	bne.n	80225a8 <scpiParser_detectProgramMessageUnit+0xce>
 8022596:	f107 0214 	add.w	r2, r7, #20
 802259a:	f107 0320 	add.w	r3, r7, #32
 802259e:	4611      	mov	r1, r2
 80225a0:	4618      	mov	r0, r3
 80225a2:	f7fe fcaf 	bl	8020f04 <scpiLex_Semicolon>
 80225a6:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 80225a8:	f107 0320 	add.w	r3, r7, #32
 80225ac:	4618      	mov	r0, r3
 80225ae:	f7fd fd06 	bl	801ffbe <scpiLex_IsEos>
 80225b2:	4603      	mov	r3, r0
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d112      	bne.n	80225de <scpiParser_detectProgramMessageUnit+0x104>
 80225b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d10f      	bne.n	80225de <scpiParser_detectProgramMessageUnit+0x104>
        lex_state.pos++;
 80225be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225c0:	3301      	adds	r3, #1
 80225c2:	627b      	str	r3, [r7, #36]	; 0x24

        state->programHeader.len = 1;
 80225c4:	68fb      	ldr	r3, [r7, #12]
 80225c6:	2201      	movs	r2, #1
 80225c8:	609a      	str	r2, [r3, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 80225ca:	68fb      	ldr	r3, [r7, #12]
 80225cc:	2219      	movs	r2, #25
 80225ce:	701a      	strb	r2, [r3, #0]

        invalidateToken(&state->programData, lex_state.buffer);
 80225d0:	68fb      	ldr	r3, [r7, #12]
 80225d2:	330c      	adds	r3, #12
 80225d4:	6a3a      	ldr	r2, [r7, #32]
 80225d6:	4611      	mov	r1, r2
 80225d8:	4618      	mov	r0, r3
 80225da:	f7ff fadd 	bl	8021b98 <invalidateToken>
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 80225de:	7d3b      	ldrb	r3, [r7, #20]
 80225e0:	2b01      	cmp	r3, #1
 80225e2:	d103      	bne.n	80225ec <scpiParser_detectProgramMessageUnit+0x112>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 80225e4:	68fb      	ldr	r3, [r7, #12]
 80225e6:	2202      	movs	r2, #2
 80225e8:	771a      	strb	r2, [r3, #28]
 80225ea:	e009      	b.n	8022600 <scpiParser_detectProgramMessageUnit+0x126>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 80225ec:	7d3b      	ldrb	r3, [r7, #20]
 80225ee:	2b05      	cmp	r3, #5
 80225f0:	d103      	bne.n	80225fa <scpiParser_detectProgramMessageUnit+0x120>
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 80225f2:	68fb      	ldr	r3, [r7, #12]
 80225f4:	2201      	movs	r2, #1
 80225f6:	771a      	strb	r2, [r3, #28]
 80225f8:	e002      	b.n	8022600 <scpiParser_detectProgramMessageUnit+0x126>
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 80225fa:	68fb      	ldr	r3, [r7, #12]
 80225fc:	2200      	movs	r2, #0
 80225fe:	771a      	strb	r2, [r3, #28]
    }

    return lex_state.pos - lex_state.buffer;
 8022600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022602:	6a3b      	ldr	r3, [r7, #32]
 8022604:	1ad3      	subs	r3, r2, r3
}
 8022606:	4618      	mov	r0, r3
 8022608:	3730      	adds	r7, #48	; 0x30
 802260a:	46bd      	mov	sp, r7
 802260c:	bd80      	pop	{r7, pc}
	...

08022610 <produceResultArrayBinary>:
 * @param count
 * @param item_size
 * @param format
 * @return
 */
static size_t produceResultArrayBinary(scpi_t * context, const void * array, size_t count, size_t item_size, scpi_array_format_t format) {
 8022610:	b580      	push	{r7, lr}
 8022612:	b08a      	sub	sp, #40	; 0x28
 8022614:	af00      	add	r7, sp, #0
 8022616:	60f8      	str	r0, [r7, #12]
 8022618:	60b9      	str	r1, [r7, #8]
 802261a:	607a      	str	r2, [r7, #4]
 802261c:	603b      	str	r3, [r7, #0]

    if (SCPI_GetNativeFormat() == format) {
 802261e:	f000 ff8d 	bl	802353c <SCPI_GetNativeFormat>
 8022622:	4603      	mov	r3, r0
 8022624:	461a      	mov	r2, r3
 8022626:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 802262a:	4293      	cmp	r3, r2
 802262c:	d125      	bne.n	802267a <produceResultArrayBinary+0x6a>
 802262e:	683b      	ldr	r3, [r7, #0]
 8022630:	2b08      	cmp	r3, #8
 8022632:	bf8c      	ite	hi
 8022634:	2301      	movhi	r3, #1
 8022636:	2300      	movls	r3, #0
 8022638:	b2db      	uxtb	r3, r3
 802263a:	2b00      	cmp	r3, #0
 802263c:	d117      	bne.n	802266e <produceResultArrayBinary+0x5e>
 802263e:	2201      	movs	r2, #1
 8022640:	683b      	ldr	r3, [r7, #0]
 8022642:	fa02 f303 	lsl.w	r3, r2, r3
 8022646:	f403 738b 	and.w	r3, r3, #278	; 0x116
 802264a:	2b00      	cmp	r3, #0
 802264c:	bf14      	ite	ne
 802264e:	2301      	movne	r3, #1
 8022650:	2300      	moveq	r3, #0
 8022652:	b2db      	uxtb	r3, r3
 8022654:	2b00      	cmp	r3, #0
 8022656:	d00a      	beq.n	802266e <produceResultArrayBinary+0x5e>
        switch (item_size) {
            case 1:
            case 2:
            case 4:
            case 8:
                return SCPI_ResultArbitraryBlock(context, array, count * item_size);
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	683a      	ldr	r2, [r7, #0]
 802265c:	fb02 f303 	mul.w	r3, r2, r3
 8022660:	461a      	mov	r2, r3
 8022662:	68b9      	ldr	r1, [r7, #8]
 8022664:	68f8      	ldr	r0, [r7, #12]
 8022666:	f7ff fa79 	bl	8021b5c <SCPI_ResultArbitraryBlock>
 802266a:	4603      	mov	r3, r0
 802266c:	e0b7      	b.n	80227de <produceResultArrayBinary+0x1ce>
            default:
                SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 802266e:	495e      	ldr	r1, [pc, #376]	; (80227e8 <produceResultArrayBinary+0x1d8>)
 8022670:	68f8      	ldr	r0, [r7, #12]
 8022672:	f7fc fd2d 	bl	801f0d0 <SCPI_ErrorPush>
                return 0;
 8022676:	2300      	movs	r3, #0
 8022678:	e0b1      	b.n	80227de <produceResultArrayBinary+0x1ce>
        }
    } else {
        size_t result = 0;
 802267a:	2300      	movs	r3, #0
 802267c:	627b      	str	r3, [r7, #36]	; 0x24
 802267e:	683b      	ldr	r3, [r7, #0]
 8022680:	2b08      	cmp	r3, #8
 8022682:	bf8c      	ite	hi
 8022684:	2301      	movhi	r3, #1
 8022686:	2300      	movls	r3, #0
 8022688:	b2db      	uxtb	r3, r3
 802268a:	2b00      	cmp	r3, #0
 802268c:	d132      	bne.n	80226f4 <produceResultArrayBinary+0xe4>
 802268e:	2201      	movs	r2, #1
 8022690:	683b      	ldr	r3, [r7, #0]
 8022692:	fa02 f303 	lsl.w	r3, r2, r3
 8022696:	f403 738b 	and.w	r3, r3, #278	; 0x116
 802269a:	2b00      	cmp	r3, #0
 802269c:	bf14      	ite	ne
 802269e:	2301      	movne	r3, #1
 80226a0:	2300      	moveq	r3, #0
 80226a2:	b2db      	uxtb	r3, r3
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	d025      	beq.n	80226f4 <produceResultArrayBinary+0xe4>
        switch (item_size) {
            case 1:
            case 2:
            case 4:
            case 8:
                result += SCPI_ResultArbitraryBlockHeader(context, count * item_size);
 80226a8:	687b      	ldr	r3, [r7, #4]
 80226aa:	683a      	ldr	r2, [r7, #0]
 80226ac:	fb02 f303 	mul.w	r3, r2, r3
 80226b0:	4619      	mov	r1, r3
 80226b2:	68f8      	ldr	r0, [r7, #12]
 80226b4:	f7ff f9f6 	bl	8021aa4 <SCPI_ResultArbitraryBlockHeader>
 80226b8:	4602      	mov	r2, r0
 80226ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80226bc:	4413      	add	r3, r2
 80226be:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80226c0:	bf00      	nop
            default:
                SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
                return 0;
        }

        switch (item_size) {
 80226c2:	683b      	ldr	r3, [r7, #0]
 80226c4:	3b01      	subs	r3, #1
 80226c6:	2b07      	cmp	r3, #7
 80226c8:	f200 8088 	bhi.w	80227dc <produceResultArrayBinary+0x1cc>
 80226cc:	a201      	add	r2, pc, #4	; (adr r2, 80226d4 <produceResultArrayBinary+0xc4>)
 80226ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80226d2:	bf00      	nop
 80226d4:	08022701 	.word	0x08022701
 80226d8:	08022715 	.word	0x08022715
 80226dc:	080227dd 	.word	0x080227dd
 80226e0:	08022755 	.word	0x08022755
 80226e4:	080227dd 	.word	0x080227dd
 80226e8:	080227dd 	.word	0x080227dd
 80226ec:	080227dd 	.word	0x080227dd
 80226f0:	08022795 	.word	0x08022795
                SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80226f4:	493c      	ldr	r1, [pc, #240]	; (80227e8 <produceResultArrayBinary+0x1d8>)
 80226f6:	68f8      	ldr	r0, [r7, #12]
 80226f8:	f7fc fcea 	bl	801f0d0 <SCPI_ErrorPush>
                return 0;
 80226fc:	2300      	movs	r3, #0
 80226fe:	e06e      	b.n	80227de <produceResultArrayBinary+0x1ce>
            case 1:
                result += SCPI_ResultArbitraryBlockData(context, array, count);
 8022700:	687a      	ldr	r2, [r7, #4]
 8022702:	68b9      	ldr	r1, [r7, #8]
 8022704:	68f8      	ldr	r0, [r7, #12]
 8022706:	f7ff f9f9 	bl	8021afc <SCPI_ResultArbitraryBlockData>
 802270a:	4602      	mov	r2, r0
 802270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802270e:	4413      	add	r3, r2
 8022710:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8022712:	e063      	b.n	80227dc <produceResultArrayBinary+0x1cc>
            case 2:
                for (i = 0; i < count; i++) {
 8022714:	2300      	movs	r3, #0
 8022716:	623b      	str	r3, [r7, #32]
 8022718:	e017      	b.n	802274a <produceResultArrayBinary+0x13a>
                    uint16_t val = SCPI_Swap16(((uint16_t*) array)[i]);
 802271a:	6a3b      	ldr	r3, [r7, #32]
 802271c:	005b      	lsls	r3, r3, #1
 802271e:	68ba      	ldr	r2, [r7, #8]
 8022720:	4413      	add	r3, r2
 8022722:	881b      	ldrh	r3, [r3, #0]
 8022724:	4618      	mov	r0, r3
 8022726:	f000 ff1d 	bl	8023564 <SCPI_Swap16>
 802272a:	4603      	mov	r3, r0
 802272c:	83fb      	strh	r3, [r7, #30]
                    result += SCPI_ResultArbitraryBlockData(context, &val, item_size);
 802272e:	f107 031e 	add.w	r3, r7, #30
 8022732:	683a      	ldr	r2, [r7, #0]
 8022734:	4619      	mov	r1, r3
 8022736:	68f8      	ldr	r0, [r7, #12]
 8022738:	f7ff f9e0 	bl	8021afc <SCPI_ResultArbitraryBlockData>
 802273c:	4602      	mov	r2, r0
 802273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022740:	4413      	add	r3, r2
 8022742:	627b      	str	r3, [r7, #36]	; 0x24
                for (i = 0; i < count; i++) {
 8022744:	6a3b      	ldr	r3, [r7, #32]
 8022746:	3301      	adds	r3, #1
 8022748:	623b      	str	r3, [r7, #32]
 802274a:	6a3a      	ldr	r2, [r7, #32]
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	429a      	cmp	r2, r3
 8022750:	d3e3      	bcc.n	802271a <produceResultArrayBinary+0x10a>
                }
                break;
 8022752:	e043      	b.n	80227dc <produceResultArrayBinary+0x1cc>
            case 4:
                for (i = 0; i < count; i++) {
 8022754:	2300      	movs	r3, #0
 8022756:	623b      	str	r3, [r7, #32]
 8022758:	e017      	b.n	802278a <produceResultArrayBinary+0x17a>
                    uint32_t val = SCPI_Swap32(((uint32_t*) array)[i]);
 802275a:	6a3b      	ldr	r3, [r7, #32]
 802275c:	009b      	lsls	r3, r3, #2
 802275e:	68ba      	ldr	r2, [r7, #8]
 8022760:	4413      	add	r3, r2
 8022762:	681b      	ldr	r3, [r3, #0]
 8022764:	4618      	mov	r0, r3
 8022766:	f000 ff12 	bl	802358e <SCPI_Swap32>
 802276a:	4603      	mov	r3, r0
 802276c:	61bb      	str	r3, [r7, #24]
                    result += SCPI_ResultArbitraryBlockData(context, &val, item_size);
 802276e:	f107 0318 	add.w	r3, r7, #24
 8022772:	683a      	ldr	r2, [r7, #0]
 8022774:	4619      	mov	r1, r3
 8022776:	68f8      	ldr	r0, [r7, #12]
 8022778:	f7ff f9c0 	bl	8021afc <SCPI_ResultArbitraryBlockData>
 802277c:	4602      	mov	r2, r0
 802277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022780:	4413      	add	r3, r2
 8022782:	627b      	str	r3, [r7, #36]	; 0x24
                for (i = 0; i < count; i++) {
 8022784:	6a3b      	ldr	r3, [r7, #32]
 8022786:	3301      	adds	r3, #1
 8022788:	623b      	str	r3, [r7, #32]
 802278a:	6a3a      	ldr	r2, [r7, #32]
 802278c:	687b      	ldr	r3, [r7, #4]
 802278e:	429a      	cmp	r2, r3
 8022790:	d3e3      	bcc.n	802275a <produceResultArrayBinary+0x14a>
                }
                break;
 8022792:	e023      	b.n	80227dc <produceResultArrayBinary+0x1cc>
            case 8:
                for (i = 0; i < count; i++) {
 8022794:	2300      	movs	r3, #0
 8022796:	623b      	str	r3, [r7, #32]
 8022798:	e01b      	b.n	80227d2 <produceResultArrayBinary+0x1c2>
                    uint64_t val = SCPI_Swap64(((uint64_t*) array)[i]);
 802279a:	6a3b      	ldr	r3, [r7, #32]
 802279c:	00db      	lsls	r3, r3, #3
 802279e:	68ba      	ldr	r2, [r7, #8]
 80227a0:	4413      	add	r3, r2
 80227a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227a6:	4610      	mov	r0, r2
 80227a8:	4619      	mov	r1, r3
 80227aa:	f000 ff09 	bl	80235c0 <SCPI_Swap64>
 80227ae:	4602      	mov	r2, r0
 80227b0:	460b      	mov	r3, r1
 80227b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
                    result += SCPI_ResultArbitraryBlockData(context, &val, item_size);
 80227b6:	f107 0310 	add.w	r3, r7, #16
 80227ba:	683a      	ldr	r2, [r7, #0]
 80227bc:	4619      	mov	r1, r3
 80227be:	68f8      	ldr	r0, [r7, #12]
 80227c0:	f7ff f99c 	bl	8021afc <SCPI_ResultArbitraryBlockData>
 80227c4:	4602      	mov	r2, r0
 80227c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227c8:	4413      	add	r3, r2
 80227ca:	627b      	str	r3, [r7, #36]	; 0x24
                for (i = 0; i < count; i++) {
 80227cc:	6a3b      	ldr	r3, [r7, #32]
 80227ce:	3301      	adds	r3, #1
 80227d0:	623b      	str	r3, [r7, #32]
 80227d2:	6a3a      	ldr	r2, [r7, #32]
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	429a      	cmp	r2, r3
 80227d8:	d3df      	bcc.n	802279a <produceResultArrayBinary+0x18a>
                }
                break;
 80227da:	bf00      	nop
        }

        return result;
 80227dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
}
 80227de:	4618      	mov	r0, r3
 80227e0:	3728      	adds	r7, #40	; 0x28
 80227e2:	46bd      	mov	sp, r7
 80227e4:	bd80      	pop	{r7, pc}
 80227e6:	bf00      	nop
 80227e8:	fffffeca 	.word	0xfffffeca

080227ec <SCPI_ResultArrayUInt8>:
 * @param array
 * @param count
 * @param format
 * @return
 */
size_t SCPI_ResultArrayUInt8(scpi_t * context, const uint8_t * array, size_t count, scpi_array_format_t format) {
 80227ec:	b580      	push	{r7, lr}
 80227ee:	b088      	sub	sp, #32
 80227f0:	af02      	add	r7, sp, #8
 80227f2:	60f8      	str	r0, [r7, #12]
 80227f4:	60b9      	str	r1, [r7, #8]
 80227f6:	607a      	str	r2, [r7, #4]
 80227f8:	70fb      	strb	r3, [r7, #3]
    RESULT_ARRAY(SCPI_ResultUInt8);
 80227fa:	2300      	movs	r3, #0
 80227fc:	617b      	str	r3, [r7, #20]
 80227fe:	78fb      	ldrb	r3, [r7, #3]
 8022800:	2b00      	cmp	r3, #0
 8022802:	d117      	bne.n	8022834 <SCPI_ResultArrayUInt8+0x48>
 8022804:	2300      	movs	r3, #0
 8022806:	613b      	str	r3, [r7, #16]
 8022808:	e00f      	b.n	802282a <SCPI_ResultArrayUInt8+0x3e>
 802280a:	68ba      	ldr	r2, [r7, #8]
 802280c:	693b      	ldr	r3, [r7, #16]
 802280e:	4413      	add	r3, r2
 8022810:	781b      	ldrb	r3, [r3, #0]
 8022812:	220a      	movs	r2, #10
 8022814:	4619      	mov	r1, r3
 8022816:	68f8      	ldr	r0, [r7, #12]
 8022818:	f7fe ffc3 	bl	80217a2 <SCPI_ResultUInt32Base>
 802281c:	4602      	mov	r2, r0
 802281e:	697b      	ldr	r3, [r7, #20]
 8022820:	4413      	add	r3, r2
 8022822:	617b      	str	r3, [r7, #20]
 8022824:	693b      	ldr	r3, [r7, #16]
 8022826:	3301      	adds	r3, #1
 8022828:	613b      	str	r3, [r7, #16]
 802282a:	693a      	ldr	r2, [r7, #16]
 802282c:	687b      	ldr	r3, [r7, #4]
 802282e:	429a      	cmp	r2, r3
 8022830:	d3eb      	bcc.n	802280a <SCPI_ResultArrayUInt8+0x1e>
 8022832:	e008      	b.n	8022846 <SCPI_ResultArrayUInt8+0x5a>
 8022834:	78fb      	ldrb	r3, [r7, #3]
 8022836:	9300      	str	r3, [sp, #0]
 8022838:	2301      	movs	r3, #1
 802283a:	687a      	ldr	r2, [r7, #4]
 802283c:	68b9      	ldr	r1, [r7, #8]
 802283e:	68f8      	ldr	r0, [r7, #12]
 8022840:	f7ff fee6 	bl	8022610 <produceResultArrayBinary>
 8022844:	6178      	str	r0, [r7, #20]
 8022846:	697b      	ldr	r3, [r7, #20]
}
 8022848:	4618      	mov	r0, r3
 802284a:	3718      	adds	r7, #24
 802284c:	46bd      	mov	sp, r7
 802284e:	bd80      	pop	{r7, pc}

08022850 <translateUnit>:
 * @param units units patterns
 * @param unit text representation of unknown unit
 * @param len length of text representation
 * @return pointer of related unit definition or NULL
 */
static const scpi_unit_def_t * translateUnit(const scpi_unit_def_t * units, const char * unit, size_t len) {
 8022850:	b590      	push	{r4, r7, lr}
 8022852:	b087      	sub	sp, #28
 8022854:	af00      	add	r7, sp, #0
 8022856:	60f8      	str	r0, [r7, #12]
 8022858:	60b9      	str	r1, [r7, #8]
 802285a:	607a      	str	r2, [r7, #4]
    int i;

    if (units == NULL) {
 802285c:	68fb      	ldr	r3, [r7, #12]
 802285e:	2b00      	cmp	r3, #0
 8022860:	d101      	bne.n	8022866 <translateUnit+0x16>
        return NULL;
 8022862:	2300      	movs	r3, #0
 8022864:	e028      	b.n	80228b8 <translateUnit+0x68>
    }

    for (i = 0; units[i].name != NULL; i++) {
 8022866:	2300      	movs	r3, #0
 8022868:	617b      	str	r3, [r7, #20]
 802286a:	e01d      	b.n	80228a8 <translateUnit+0x58>
        if (compareStr(unit, len, units[i].name, strlen(units[i].name))) {
 802286c:	697b      	ldr	r3, [r7, #20]
 802286e:	011b      	lsls	r3, r3, #4
 8022870:	68fa      	ldr	r2, [r7, #12]
 8022872:	4413      	add	r3, r2
 8022874:	681c      	ldr	r4, [r3, #0]
 8022876:	697b      	ldr	r3, [r7, #20]
 8022878:	011b      	lsls	r3, r3, #4
 802287a:	68fa      	ldr	r2, [r7, #12]
 802287c:	4413      	add	r3, r2
 802287e:	681b      	ldr	r3, [r3, #0]
 8022880:	4618      	mov	r0, r3
 8022882:	f7dd fccf 	bl	8000224 <strlen>
 8022886:	4603      	mov	r3, r0
 8022888:	4622      	mov	r2, r4
 802288a:	6879      	ldr	r1, [r7, #4]
 802288c:	68b8      	ldr	r0, [r7, #8]
 802288e:	f000 fab3 	bl	8022df8 <compareStr>
 8022892:	4603      	mov	r3, r0
 8022894:	2b00      	cmp	r3, #0
 8022896:	d004      	beq.n	80228a2 <translateUnit+0x52>
            return &units[i];
 8022898:	697b      	ldr	r3, [r7, #20]
 802289a:	011b      	lsls	r3, r3, #4
 802289c:	68fa      	ldr	r2, [r7, #12]
 802289e:	4413      	add	r3, r2
 80228a0:	e00a      	b.n	80228b8 <translateUnit+0x68>
    for (i = 0; units[i].name != NULL; i++) {
 80228a2:	697b      	ldr	r3, [r7, #20]
 80228a4:	3301      	adds	r3, #1
 80228a6:	617b      	str	r3, [r7, #20]
 80228a8:	697b      	ldr	r3, [r7, #20]
 80228aa:	011b      	lsls	r3, r3, #4
 80228ac:	68fa      	ldr	r2, [r7, #12]
 80228ae:	4413      	add	r3, r2
 80228b0:	681b      	ldr	r3, [r3, #0]
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	d1da      	bne.n	802286c <translateUnit+0x1c>
        }
    }

    return NULL;
 80228b6:	2300      	movs	r3, #0
}
 80228b8:	4618      	mov	r0, r3
 80228ba:	371c      	adds	r7, #28
 80228bc:	46bd      	mov	sp, r7
 80228be:	bd90      	pop	{r4, r7, pc}

080228c0 <transformNumber>:
 * @param unit text representation of unit
 * @param len length of text representation
 * @param value preparsed numeric value
 * @return TRUE if value parameter was converted to base units
 */
static scpi_bool_t transformNumber(scpi_t * context, const char * unit, size_t len, scpi_number_t * value) {
 80228c0:	b580      	push	{r7, lr}
 80228c2:	b086      	sub	sp, #24
 80228c4:	af00      	add	r7, sp, #0
 80228c6:	60f8      	str	r0, [r7, #12]
 80228c8:	60b9      	str	r1, [r7, #8]
 80228ca:	607a      	str	r2, [r7, #4]
 80228cc:	603b      	str	r3, [r7, #0]
    size_t s;
    const scpi_unit_def_t * unitDef;
    s = skipWhitespace(unit, len);
 80228ce:	6879      	ldr	r1, [r7, #4]
 80228d0:	68b8      	ldr	r0, [r7, #8]
 80228d2:	f000 fb05 	bl	8022ee0 <skipWhitespace>
 80228d6:	6178      	str	r0, [r7, #20]

    if (s == len) {
 80228d8:	697a      	ldr	r2, [r7, #20]
 80228da:	687b      	ldr	r3, [r7, #4]
 80228dc:	429a      	cmp	r2, r3
 80228de:	d104      	bne.n	80228ea <transformNumber+0x2a>
        value->unit = SCPI_UNIT_NONE;
 80228e0:	683b      	ldr	r3, [r7, #0]
 80228e2:	2200      	movs	r2, #0
 80228e4:	741a      	strb	r2, [r3, #16]
        return TRUE;
 80228e6:	2301      	movs	r3, #1
 80228e8:	e027      	b.n	802293a <transformNumber+0x7a>
    }

    unitDef = translateUnit(context->units, unit + s, len - s);
 80228ea:	68fb      	ldr	r3, [r7, #12]
 80228ec:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80228ee:	68ba      	ldr	r2, [r7, #8]
 80228f0:	697b      	ldr	r3, [r7, #20]
 80228f2:	18d1      	adds	r1, r2, r3
 80228f4:	687a      	ldr	r2, [r7, #4]
 80228f6:	697b      	ldr	r3, [r7, #20]
 80228f8:	1ad3      	subs	r3, r2, r3
 80228fa:	461a      	mov	r2, r3
 80228fc:	f7ff ffa8 	bl	8022850 <translateUnit>
 8022900:	6138      	str	r0, [r7, #16]

    if (unitDef == NULL) {
 8022902:	693b      	ldr	r3, [r7, #16]
 8022904:	2b00      	cmp	r3, #0
 8022906:	d106      	bne.n	8022916 <transformNumber+0x56>
        SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SUFFIX);
 8022908:	f06f 0182 	mvn.w	r1, #130	; 0x82
 802290c:	68f8      	ldr	r0, [r7, #12]
 802290e:	f7fc fbdf 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 8022912:	2300      	movs	r3, #0
 8022914:	e011      	b.n	802293a <transformNumber+0x7a>
    }

    value->content.value *= unitDef->mult;
 8022916:	683b      	ldr	r3, [r7, #0]
 8022918:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 802291c:	693b      	ldr	r3, [r7, #16]
 802291e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8022922:	f7dd fe99 	bl	8000658 <__aeabi_dmul>
 8022926:	4602      	mov	r2, r0
 8022928:	460b      	mov	r3, r1
 802292a:	6839      	ldr	r1, [r7, #0]
 802292c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    value->unit = unitDef->unit;
 8022930:	693b      	ldr	r3, [r7, #16]
 8022932:	791a      	ldrb	r2, [r3, #4]
 8022934:	683b      	ldr	r3, [r7, #0]
 8022936:	741a      	strb	r2, [r3, #16]

    return TRUE;
 8022938:	2301      	movs	r3, #1
}
 802293a:	4618      	mov	r0, r3
 802293c:	3718      	adds	r7, #24
 802293e:	46bd      	mov	sp, r7
 8022940:	bd80      	pop	{r7, pc}
	...

08022944 <SCPI_ParamNumber>:
 * @param context
 * @param value return value
 * @param mandatory if the parameter is mandatory
 * @return
 */
scpi_bool_t SCPI_ParamNumber(scpi_t * context, const scpi_choice_def_t * special, scpi_number_t * value, scpi_bool_t mandatory) {
 8022944:	b580      	push	{r7, lr}
 8022946:	b090      	sub	sp, #64	; 0x40
 8022948:	af00      	add	r7, sp, #0
 802294a:	60f8      	str	r0, [r7, #12]
 802294c:	60b9      	str	r1, [r7, #8]
 802294e:	607a      	str	r2, [r7, #4]
 8022950:	70fb      	strb	r3, [r7, #3]
    lex_state_t state;
    scpi_parameter_t param;
    scpi_bool_t result;
    int32_t tag;

    if (!value) {
 8022952:	687b      	ldr	r3, [r7, #4]
 8022954:	2b00      	cmp	r3, #0
 8022956:	d105      	bne.n	8022964 <SCPI_ParamNumber+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8022958:	4973      	ldr	r1, [pc, #460]	; (8022b28 <SCPI_ParamNumber+0x1e4>)
 802295a:	68f8      	ldr	r0, [r7, #12]
 802295c:	f7fc fbb8 	bl	801f0d0 <SCPI_ErrorPush>
        return FALSE;
 8022960:	2300      	movs	r3, #0
 8022962:	e0dc      	b.n	8022b1e <SCPI_ParamNumber+0x1da>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 8022964:	78fa      	ldrb	r2, [r7, #3]
 8022966:	f107 0318 	add.w	r3, r7, #24
 802296a:	4619      	mov	r1, r3
 802296c:	68f8      	ldr	r0, [r7, #12]
 802296e:	f7ff f927 	bl	8021bc0 <SCPI_Parameter>
 8022972:	4603      	mov	r3, r0
 8022974:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    if (!result) {
 8022978:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 802297c:	f083 0301 	eor.w	r3, r3, #1
 8022980:	b2db      	uxtb	r3, r3
 8022982:	2b00      	cmp	r3, #0
 8022984:	d002      	beq.n	802298c <SCPI_ParamNumber+0x48>
        return result;
 8022986:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 802298a:	e0c8      	b.n	8022b1e <SCPI_ParamNumber+0x1da>
    }

    state.buffer = param.ptr;
 802298c:	69fb      	ldr	r3, [r7, #28]
 802298e:	627b      	str	r3, [r7, #36]	; 0x24
    state.pos = state.buffer;
 8022990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022992:	62bb      	str	r3, [r7, #40]	; 0x28
    state.len = param.len;
 8022994:	6a3b      	ldr	r3, [r7, #32]
 8022996:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (param.type) {
 8022998:	7e3b      	ldrb	r3, [r7, #24]
 802299a:	3b06      	subs	r3, #6
 802299c:	2b05      	cmp	r3, #5
 802299e:	d809      	bhi.n	80229b4 <SCPI_ParamNumber+0x70>
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
        case SCPI_TOKEN_PROGRAM_MNEMONIC:
            value->unit = SCPI_UNIT_NONE;
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	2200      	movs	r2, #0
 80229a4:	741a      	strb	r2, [r3, #16]
            value->special = FALSE;
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	2200      	movs	r2, #0
 80229aa:	701a      	strb	r2, [r3, #0]
            result = TRUE;
 80229ac:	2301      	movs	r3, #1
 80229ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80229b2:	e000      	b.n	80229b6 <SCPI_ParamNumber+0x72>
        default:
            break;
 80229b4:	bf00      	nop
    }

    switch (param.type) {
 80229b6:	7e3b      	ldrb	r3, [r7, #24]
 80229b8:	3b06      	subs	r3, #6
 80229ba:	2b05      	cmp	r3, #5
 80229bc:	d81e      	bhi.n	80229fc <SCPI_ParamNumber+0xb8>
 80229be:	a201      	add	r2, pc, #4	; (adr r2, 80229c4 <SCPI_ParamNumber+0x80>)
 80229c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80229c4:	080229ed 	.word	0x080229ed
 80229c8:	080229f5 	.word	0x080229f5
 80229cc:	080229e5 	.word	0x080229e5
 80229d0:	080229dd 	.word	0x080229dd
 80229d4:	080229dd 	.word	0x080229dd
 80229d8:	080229dd 	.word	0x080229dd
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
        case SCPI_TOKEN_PROGRAM_MNEMONIC:
            value->base = 10;
 80229dc:	687b      	ldr	r3, [r7, #4]
 80229de:	220a      	movs	r2, #10
 80229e0:	745a      	strb	r2, [r3, #17]
            break;
 80229e2:	e00c      	b.n	80229fe <SCPI_ParamNumber+0xba>
        case SCPI_TOKEN_BINNUM:
            value->base = 2;
 80229e4:	687b      	ldr	r3, [r7, #4]
 80229e6:	2202      	movs	r2, #2
 80229e8:	745a      	strb	r2, [r3, #17]
            break;
 80229ea:	e008      	b.n	80229fe <SCPI_ParamNumber+0xba>
        case SCPI_TOKEN_HEXNUM:
            value->base = 16;
 80229ec:	687b      	ldr	r3, [r7, #4]
 80229ee:	2210      	movs	r2, #16
 80229f0:	745a      	strb	r2, [r3, #17]
            break;
 80229f2:	e004      	b.n	80229fe <SCPI_ParamNumber+0xba>
        case SCPI_TOKEN_OCTNUM:
            value->base = 8;
 80229f4:	687b      	ldr	r3, [r7, #4]
 80229f6:	2208      	movs	r2, #8
 80229f8:	745a      	strb	r2, [r3, #17]
            break;
 80229fa:	e000      	b.n	80229fe <SCPI_ParamNumber+0xba>
        default:
            break;
 80229fc:	bf00      	nop
    }

    switch (param.type) {
 80229fe:	7e3b      	ldrb	r3, [r7, #24]
 8022a00:	3b06      	subs	r3, #6
 8022a02:	2b05      	cmp	r3, #5
 8022a04:	f200 8086 	bhi.w	8022b14 <SCPI_ParamNumber+0x1d0>
 8022a08:	a201      	add	r2, pc, #4	; (adr r2, 8022a10 <SCPI_ParamNumber+0xcc>)
 8022a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022a0e:	bf00      	nop
 8022a10:	08022a3d 	.word	0x08022a3d
 8022a14:	08022a51 	.word	0x08022a51
 8022a18:	08022a65 	.word	0x08022a65
 8022a1c:	08022ad1 	.word	0x08022ad1
 8022a20:	08022a29 	.word	0x08022a29
 8022a24:	08022a79 	.word	0x08022a79
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
            SCPI_ParamToDouble(context, &param, &(value->content.value));
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	f103 0208 	add.w	r2, r3, #8
 8022a2e:	f107 0318 	add.w	r3, r7, #24
 8022a32:	4619      	mov	r1, r3
 8022a34:	68f8      	ldr	r0, [r7, #12]
 8022a36:	f7ff fa57 	bl	8021ee8 <SCPI_ParamToDouble>
            break;
 8022a3a:	e06e      	b.n	8022b1a <SCPI_ParamNumber+0x1d6>
        case SCPI_TOKEN_HEXNUM:
            SCPI_ParamToDouble(context, &param, &(value->content.value));
 8022a3c:	687b      	ldr	r3, [r7, #4]
 8022a3e:	f103 0208 	add.w	r2, r3, #8
 8022a42:	f107 0318 	add.w	r3, r7, #24
 8022a46:	4619      	mov	r1, r3
 8022a48:	68f8      	ldr	r0, [r7, #12]
 8022a4a:	f7ff fa4d 	bl	8021ee8 <SCPI_ParamToDouble>
            break;
 8022a4e:	e064      	b.n	8022b1a <SCPI_ParamNumber+0x1d6>
        case SCPI_TOKEN_OCTNUM:
            SCPI_ParamToDouble(context, &param, &(value->content.value));
 8022a50:	687b      	ldr	r3, [r7, #4]
 8022a52:	f103 0208 	add.w	r2, r3, #8
 8022a56:	f107 0318 	add.w	r3, r7, #24
 8022a5a:	4619      	mov	r1, r3
 8022a5c:	68f8      	ldr	r0, [r7, #12]
 8022a5e:	f7ff fa43 	bl	8021ee8 <SCPI_ParamToDouble>
            break;
 8022a62:	e05a      	b.n	8022b1a <SCPI_ParamNumber+0x1d6>
        case SCPI_TOKEN_BINNUM:
            SCPI_ParamToDouble(context, &param, &(value->content.value));
 8022a64:	687b      	ldr	r3, [r7, #4]
 8022a66:	f103 0208 	add.w	r2, r3, #8
 8022a6a:	f107 0318 	add.w	r3, r7, #24
 8022a6e:	4619      	mov	r1, r3
 8022a70:	68f8      	ldr	r0, [r7, #12]
 8022a72:	f7ff fa39 	bl	8021ee8 <SCPI_ParamToDouble>
            break;
 8022a76:	e050      	b.n	8022b1a <SCPI_ParamNumber+0x1d6>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            scpiLex_DecimalNumericProgramData(&state, &token);
 8022a78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8022a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a80:	4611      	mov	r1, r2
 8022a82:	4618      	mov	r0, r3
 8022a84:	f7fd fe2c 	bl	80206e0 <scpiLex_DecimalNumericProgramData>
            scpiLex_WhiteSpace(&state, &token);
 8022a88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8022a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a90:	4611      	mov	r1, r2
 8022a92:	4618      	mov	r0, r3
 8022a94:	f7fd fc98 	bl	80203c8 <scpiLex_WhiteSpace>
            scpiLex_SuffixProgramData(&state, &token);
 8022a98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8022a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022aa0:	4611      	mov	r1, r2
 8022aa2:	4618      	mov	r0, r3
 8022aa4:	f7fd fe57 	bl	8020756 <scpiLex_SuffixProgramData>

            SCPI_ParamToDouble(context, &param, &(value->content.value));
 8022aa8:	687b      	ldr	r3, [r7, #4]
 8022aaa:	f103 0208 	add.w	r2, r3, #8
 8022aae:	f107 0318 	add.w	r3, r7, #24
 8022ab2:	4619      	mov	r1, r3
 8022ab4:	68f8      	ldr	r0, [r7, #12]
 8022ab6:	f7ff fa17 	bl	8021ee8 <SCPI_ParamToDouble>

            result = transformNumber(context, token.ptr, token.len, value);
 8022aba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022abe:	461a      	mov	r2, r3
 8022ac0:	687b      	ldr	r3, [r7, #4]
 8022ac2:	68f8      	ldr	r0, [r7, #12]
 8022ac4:	f7ff fefc 	bl	80228c0 <transformNumber>
 8022ac8:	4603      	mov	r3, r0
 8022aca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8022ace:	e024      	b.n	8022b1a <SCPI_ParamNumber+0x1d6>
        case SCPI_TOKEN_PROGRAM_MNEMONIC:
            scpiLex_WhiteSpace(&state, &token);
 8022ad0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8022ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022ad8:	4611      	mov	r1, r2
 8022ada:	4618      	mov	r0, r3
 8022adc:	f7fd fc74 	bl	80203c8 <scpiLex_WhiteSpace>
            scpiLex_CharacterProgramData(&state, &token);
 8022ae0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8022ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022ae8:	4611      	mov	r1, r2
 8022aea:	4618      	mov	r0, r3
 8022aec:	f7fd fd54 	bl	8020598 <scpiLex_CharacterProgramData>

            /* convert string to special number type */
            result = SCPI_ParamToChoice(context, &token, special, &tag);
 8022af0:	f107 0314 	add.w	r3, r7, #20
 8022af4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8022af8:	68ba      	ldr	r2, [r7, #8]
 8022afa:	68f8      	ldr	r0, [r7, #12]
 8022afc:	f7ff fb2a 	bl	8022154 <SCPI_ParamToChoice>
 8022b00:	4603      	mov	r3, r0
 8022b02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

            value->special = TRUE;
 8022b06:	687b      	ldr	r3, [r7, #4]
 8022b08:	2201      	movs	r2, #1
 8022b0a:	701a      	strb	r2, [r3, #0]
            value->content.tag = tag;
 8022b0c:	697a      	ldr	r2, [r7, #20]
 8022b0e:	687b      	ldr	r3, [r7, #4]
 8022b10:	609a      	str	r2, [r3, #8]

            break;
 8022b12:	e002      	b.n	8022b1a <SCPI_ParamNumber+0x1d6>
        default:
            result = FALSE;
 8022b14:	2300      	movs	r3, #0
 8022b16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    return result;
 8022b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8022b1e:	4618      	mov	r0, r3
 8022b20:	3740      	adds	r7, #64	; 0x40
 8022b22:	46bd      	mov	sp, r7
 8022b24:	bd80      	pop	{r7, pc}
 8022b26:	bf00      	nop
 8022b28:	fffffeca 	.word	0xfffffeca

08022b2c <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
 8022b2c:	b480      	push	{r7}
 8022b2e:	b089      	sub	sp, #36	; 0x24
 8022b30:	af00      	add	r7, sp, #0
 8022b32:	60f8      	str	r0, [r7, #12]
 8022b34:	60b9      	str	r1, [r7, #8]
 8022b36:	607a      	str	r2, [r7, #4]
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
 8022b38:	68fa      	ldr	r2, [r7, #12]
 8022b3a:	68bb      	ldr	r3, [r7, #8]
 8022b3c:	4413      	add	r3, r2
 8022b3e:	61bb      	str	r3, [r7, #24]

    while ((strend != str) && ((c = *str++) != 0)) {
 8022b40:	e011      	b.n	8022b66 <strnpbrk+0x3a>
        for (scanp = set; (sc = *scanp++) != '\0';)
 8022b42:	687b      	ldr	r3, [r7, #4]
 8022b44:	61fb      	str	r3, [r7, #28]
 8022b46:	e006      	b.n	8022b56 <strnpbrk+0x2a>
            if (sc == c)
 8022b48:	693a      	ldr	r2, [r7, #16]
 8022b4a:	697b      	ldr	r3, [r7, #20]
 8022b4c:	429a      	cmp	r2, r3
 8022b4e:	d102      	bne.n	8022b56 <strnpbrk+0x2a>
                return ((char *) (str - 1));
 8022b50:	68fb      	ldr	r3, [r7, #12]
 8022b52:	3b01      	subs	r3, #1
 8022b54:	e014      	b.n	8022b80 <strnpbrk+0x54>
        for (scanp = set; (sc = *scanp++) != '\0';)
 8022b56:	69fb      	ldr	r3, [r7, #28]
 8022b58:	1c5a      	adds	r2, r3, #1
 8022b5a:	61fa      	str	r2, [r7, #28]
 8022b5c:	781b      	ldrb	r3, [r3, #0]
 8022b5e:	613b      	str	r3, [r7, #16]
 8022b60:	693b      	ldr	r3, [r7, #16]
 8022b62:	2b00      	cmp	r3, #0
 8022b64:	d1f0      	bne.n	8022b48 <strnpbrk+0x1c>
    while ((strend != str) && ((c = *str++) != 0)) {
 8022b66:	69ba      	ldr	r2, [r7, #24]
 8022b68:	68fb      	ldr	r3, [r7, #12]
 8022b6a:	429a      	cmp	r2, r3
 8022b6c:	d007      	beq.n	8022b7e <strnpbrk+0x52>
 8022b6e:	68fb      	ldr	r3, [r7, #12]
 8022b70:	1c5a      	adds	r2, r3, #1
 8022b72:	60fa      	str	r2, [r7, #12]
 8022b74:	781b      	ldrb	r3, [r3, #0]
 8022b76:	617b      	str	r3, [r7, #20]
 8022b78:	697b      	ldr	r3, [r7, #20]
 8022b7a:	2b00      	cmp	r3, #0
 8022b7c:	d1e1      	bne.n	8022b42 <strnpbrk+0x16>
    }
    return (NULL);
 8022b7e:	2300      	movs	r3, #0
}
 8022b80:	4618      	mov	r0, r3
 8022b82:	3724      	adds	r7, #36	; 0x24
 8022b84:	46bd      	mov	sp, r7
 8022b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b8a:	4770      	bx	lr

08022b8c <UInt32ToStrBaseSign>:
 * @param len   string buffer length
 * @param base  output base
 * @param sign
 * @return number of bytes written to str (without '\0')
 */
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 8022b8c:	b4b0      	push	{r4, r5, r7}
 8022b8e:	b08f      	sub	sp, #60	; 0x3c
 8022b90:	af00      	add	r7, sp, #0
 8022b92:	60f8      	str	r0, [r7, #12]
 8022b94:	60b9      	str	r1, [r7, #8]
 8022b96:	607a      	str	r2, [r7, #4]
 8022b98:	70fb      	strb	r3, [r7, #3]
    const char digits[] = "0123456789ABCDEF";
 8022b9a:	4b4a      	ldr	r3, [pc, #296]	; (8022cc4 <UInt32ToStrBaseSign+0x138>)
 8022b9c:	f107 0414 	add.w	r4, r7, #20
 8022ba0:	461d      	mov	r5, r3
 8022ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022ba6:	682b      	ldr	r3, [r5, #0]
 8022ba8:	7023      	strb	r3, [r4, #0]

#define ADD_CHAR(c) if (pos < len) str[pos++] = (c)
    uint32_t x = 0;
 8022baa:	2300      	movs	r3, #0
 8022bac:	637b      	str	r3, [r7, #52]	; 0x34
    int_fast8_t digit;
    size_t pos = 0;
 8022bae:	2300      	movs	r3, #0
 8022bb0:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t uval = val;
 8022bb2:	68fb      	ldr	r3, [r7, #12]
 8022bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (uval == 0) {
 8022bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	d10b      	bne.n	8022bd4 <UInt32ToStrBaseSign+0x48>
        ADD_CHAR('0');
 8022bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	429a      	cmp	r2, r3
 8022bc2:	d270      	bcs.n	8022ca6 <UInt32ToStrBaseSign+0x11a>
 8022bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022bc6:	1c5a      	adds	r2, r3, #1
 8022bc8:	633a      	str	r2, [r7, #48]	; 0x30
 8022bca:	68ba      	ldr	r2, [r7, #8]
 8022bcc:	4413      	add	r3, r2
 8022bce:	2230      	movs	r2, #48	; 0x30
 8022bd0:	701a      	strb	r2, [r3, #0]
 8022bd2:	e068      	b.n	8022ca6 <UInt32ToStrBaseSign+0x11a>
    } else {

        switch (base) {
 8022bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8022bd8:	2b10      	cmp	r3, #16
 8022bda:	d013      	beq.n	8022c04 <UInt32ToStrBaseSign+0x78>
 8022bdc:	2b10      	cmp	r3, #16
 8022bde:	dc0c      	bgt.n	8022bfa <UInt32ToStrBaseSign+0x6e>
 8022be0:	2b02      	cmp	r3, #2
 8022be2:	d002      	beq.n	8022bea <UInt32ToStrBaseSign+0x5e>
 8022be4:	2b08      	cmp	r3, #8
 8022be6:	d004      	beq.n	8022bf2 <UInt32ToStrBaseSign+0x66>
 8022be8:	e007      	b.n	8022bfa <UInt32ToStrBaseSign+0x6e>
            case 2:
                x = 0x80000000L;
 8022bea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8022bee:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8022bf0:	e00c      	b.n	8022c0c <UInt32ToStrBaseSign+0x80>
            case 8:
                x = 0x40000000L;
 8022bf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022bf6:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8022bf8:	e008      	b.n	8022c0c <UInt32ToStrBaseSign+0x80>
            default:
            case 10:
                base = 10;
 8022bfa:	230a      	movs	r3, #10
 8022bfc:	70fb      	strb	r3, [r7, #3]
                x = 1000000000L;
 8022bfe:	4b32      	ldr	r3, [pc, #200]	; (8022cc8 <UInt32ToStrBaseSign+0x13c>)
 8022c00:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8022c02:	e003      	b.n	8022c0c <UInt32ToStrBaseSign+0x80>
            case 16:
                x = 0x10000000L;
 8022c04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8022c08:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8022c0a:	bf00      	nop
        }

        /* add sign for numbers in base 10 */
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 8022c0c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	d01b      	beq.n	8022c4c <UInt32ToStrBaseSign+0xc0>
 8022c14:	68fb      	ldr	r3, [r7, #12]
 8022c16:	2b00      	cmp	r3, #0
 8022c18:	da18      	bge.n	8022c4c <UInt32ToStrBaseSign+0xc0>
 8022c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8022c1e:	2b0a      	cmp	r3, #10
 8022c20:	d114      	bne.n	8022c4c <UInt32ToStrBaseSign+0xc0>
            uval = -val;
 8022c22:	68fb      	ldr	r3, [r7, #12]
 8022c24:	425b      	negs	r3, r3
 8022c26:	62fb      	str	r3, [r7, #44]	; 0x2c
            ADD_CHAR('-');
 8022c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022c2a:	687b      	ldr	r3, [r7, #4]
 8022c2c:	429a      	cmp	r2, r3
 8022c2e:	d20d      	bcs.n	8022c4c <UInt32ToStrBaseSign+0xc0>
 8022c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022c32:	1c5a      	adds	r2, r3, #1
 8022c34:	633a      	str	r2, [r7, #48]	; 0x30
 8022c36:	68ba      	ldr	r2, [r7, #8]
 8022c38:	4413      	add	r3, r2
 8022c3a:	222d      	movs	r2, #45	; 0x2d
 8022c3c:	701a      	strb	r2, [r3, #0]
        }

        /* remove leading zeros */
        while ((uval / x) == 0) {
 8022c3e:	e005      	b.n	8022c4c <UInt32ToStrBaseSign+0xc0>
            x /= base;
 8022c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8022c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8022c4a:	637b      	str	r3, [r7, #52]	; 0x34
        while ((uval / x) == 0) {
 8022c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022c50:	429a      	cmp	r2, r3
 8022c52:	d3f5      	bcc.n	8022c40 <UInt32ToStrBaseSign+0xb4>
        }

        do {
            digit = (uint8_t) (uval / x);
 8022c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8022c5c:	b2db      	uxtb	r3, r3
 8022c5e:	62bb      	str	r3, [r7, #40]	; 0x28
            ADD_CHAR(digits[digit]);
 8022c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022c62:	687b      	ldr	r3, [r7, #4]
 8022c64:	429a      	cmp	r2, r3
 8022c66:	d20a      	bcs.n	8022c7e <UInt32ToStrBaseSign+0xf2>
 8022c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022c6a:	1c5a      	adds	r2, r3, #1
 8022c6c:	633a      	str	r2, [r7, #48]	; 0x30
 8022c6e:	68ba      	ldr	r2, [r7, #8]
 8022c70:	4413      	add	r3, r2
 8022c72:	f107 0114 	add.w	r1, r7, #20
 8022c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022c78:	440a      	add	r2, r1
 8022c7a:	7812      	ldrb	r2, [r2, #0]
 8022c7c:	701a      	strb	r2, [r3, #0]
            uval -= digit * x;
 8022c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022c82:	fb02 f303 	mul.w	r3, r2, r3
 8022c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c88:	1ad3      	subs	r3, r2, r3
 8022c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
            x /= base;
 8022c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8022c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8022c96:	637b      	str	r3, [r7, #52]	; 0x34
        } while (x && (pos < len));
 8022c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	d003      	beq.n	8022ca6 <UInt32ToStrBaseSign+0x11a>
 8022c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	429a      	cmp	r2, r3
 8022ca4:	d3d6      	bcc.n	8022c54 <UInt32ToStrBaseSign+0xc8>
    }

    if (pos < len) str[pos] = 0;
 8022ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	429a      	cmp	r2, r3
 8022cac:	d204      	bcs.n	8022cb8 <UInt32ToStrBaseSign+0x12c>
 8022cae:	68ba      	ldr	r2, [r7, #8]
 8022cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022cb2:	4413      	add	r3, r2
 8022cb4:	2200      	movs	r2, #0
 8022cb6:	701a      	strb	r2, [r3, #0]
    return pos;
 8022cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
#undef ADD_CHAR
}
 8022cba:	4618      	mov	r0, r3
 8022cbc:	373c      	adds	r7, #60	; 0x3c
 8022cbe:	46bd      	mov	sp, r7
 8022cc0:	bcb0      	pop	{r4, r5, r7}
 8022cc2:	4770      	bx	lr
 8022cc4:	0802cfcc 	.word	0x0802cfcc
 8022cc8:	3b9aca00 	.word	0x3b9aca00

08022ccc <SCPI_UInt32ToStrBase>:
 * @param str   converted textual representation
 * @param len   string buffer length
 * @param base  output base
 * @return number of bytes written to str (without '\0')
 */
size_t SCPI_UInt32ToStrBase(uint32_t val, char * str, size_t len, int8_t base) {
 8022ccc:	b580      	push	{r7, lr}
 8022cce:	b086      	sub	sp, #24
 8022cd0:	af02      	add	r7, sp, #8
 8022cd2:	60f8      	str	r0, [r7, #12]
 8022cd4:	60b9      	str	r1, [r7, #8]
 8022cd6:	607a      	str	r2, [r7, #4]
 8022cd8:	70fb      	strb	r3, [r7, #3]
    return UInt32ToStrBaseSign(val, str, len, base, FALSE);
 8022cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8022cde:	2200      	movs	r2, #0
 8022ce0:	9200      	str	r2, [sp, #0]
 8022ce2:	687a      	ldr	r2, [r7, #4]
 8022ce4:	68b9      	ldr	r1, [r7, #8]
 8022ce6:	68f8      	ldr	r0, [r7, #12]
 8022ce8:	f7ff ff50 	bl	8022b8c <UInt32ToStrBaseSign>
 8022cec:	4603      	mov	r3, r0
}
 8022cee:	4618      	mov	r0, r3
 8022cf0:	3710      	adds	r7, #16
 8022cf2:	46bd      	mov	sp, r7
 8022cf4:	bd80      	pop	{r7, pc}

08022cf6 <strBaseToInt32>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 8022cf6:	b580      	push	{r7, lr}
 8022cf8:	b086      	sub	sp, #24
 8022cfa:	af00      	add	r7, sp, #0
 8022cfc:	60f8      	str	r0, [r7, #12]
 8022cfe:	60b9      	str	r1, [r7, #8]
 8022d00:	4613      	mov	r3, r2
 8022d02:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtol(str, &endptr, base);
 8022d04:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8022d08:	f107 0314 	add.w	r3, r7, #20
 8022d0c:	4619      	mov	r1, r3
 8022d0e:	68f8      	ldr	r0, [r7, #12]
 8022d10:	f002 fe1e 	bl	8025950 <strtol>
 8022d14:	4602      	mov	r2, r0
 8022d16:	68bb      	ldr	r3, [r7, #8]
 8022d18:	601a      	str	r2, [r3, #0]
    return endptr - str;
 8022d1a:	697a      	ldr	r2, [r7, #20]
 8022d1c:	68fb      	ldr	r3, [r7, #12]
 8022d1e:	1ad3      	subs	r3, r2, r3
}
 8022d20:	4618      	mov	r0, r3
 8022d22:	3718      	adds	r7, #24
 8022d24:	46bd      	mov	sp, r7
 8022d26:	bd80      	pop	{r7, pc}

08022d28 <strBaseToUInt32>:
 * Converts string to unsigned 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 8022d28:	b580      	push	{r7, lr}
 8022d2a:	b086      	sub	sp, #24
 8022d2c:	af00      	add	r7, sp, #0
 8022d2e:	60f8      	str	r0, [r7, #12]
 8022d30:	60b9      	str	r1, [r7, #8]
 8022d32:	4613      	mov	r3, r2
 8022d34:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtoul(str, &endptr, base);
 8022d36:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8022d3a:	f107 0314 	add.w	r3, r7, #20
 8022d3e:	4619      	mov	r1, r3
 8022d40:	68f8      	ldr	r0, [r7, #12]
 8022d42:	f002 ff23 	bl	8025b8c <strtoul>
 8022d46:	4602      	mov	r2, r0
 8022d48:	68bb      	ldr	r3, [r7, #8]
 8022d4a:	601a      	str	r2, [r3, #0]
    return endptr - str;
 8022d4c:	697a      	ldr	r2, [r7, #20]
 8022d4e:	68fb      	ldr	r3, [r7, #12]
 8022d50:	1ad3      	subs	r3, r2, r3
}
 8022d52:	4618      	mov	r0, r3
 8022d54:	3718      	adds	r7, #24
 8022d56:	46bd      	mov	sp, r7
 8022d58:	bd80      	pop	{r7, pc}

08022d5a <strBaseToInt64>:
 * Converts string to signed 64bit integer representation
 * @param str   string value
 * @param val   64bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt64(const char * str, int64_t * val, int8_t base) {
 8022d5a:	b580      	push	{r7, lr}
 8022d5c:	b086      	sub	sp, #24
 8022d5e:	af00      	add	r7, sp, #0
 8022d60:	60f8      	str	r0, [r7, #12]
 8022d62:	60b9      	str	r1, [r7, #8]
 8022d64:	4613      	mov	r3, r2
 8022d66:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = SCPIDEFINE_strtoll(str, &endptr, base);
 8022d68:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8022d6c:	f107 0314 	add.w	r3, r7, #20
 8022d70:	4619      	mov	r1, r3
 8022d72:	68f8      	ldr	r0, [r7, #12]
 8022d74:	f002 fe8c 	bl	8025a90 <strtoll>
 8022d78:	4602      	mov	r2, r0
 8022d7a:	460b      	mov	r3, r1
 8022d7c:	68b9      	ldr	r1, [r7, #8]
 8022d7e:	e9c1 2300 	strd	r2, r3, [r1]
    return endptr - str;
 8022d82:	697a      	ldr	r2, [r7, #20]
 8022d84:	68fb      	ldr	r3, [r7, #12]
 8022d86:	1ad3      	subs	r3, r2, r3
}
 8022d88:	4618      	mov	r0, r3
 8022d8a:	3718      	adds	r7, #24
 8022d8c:	46bd      	mov	sp, r7
 8022d8e:	bd80      	pop	{r7, pc}

08022d90 <strBaseToUInt64>:
 * Converts string to unsigned 64bit integer representation
 * @param str   string value
 * @param val   64bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt64(const char * str, uint64_t * val, int8_t base) {
 8022d90:	b580      	push	{r7, lr}
 8022d92:	b086      	sub	sp, #24
 8022d94:	af00      	add	r7, sp, #0
 8022d96:	60f8      	str	r0, [r7, #12]
 8022d98:	60b9      	str	r1, [r7, #8]
 8022d9a:	4613      	mov	r3, r2
 8022d9c:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = SCPIDEFINE_strtoull(str, &endptr, base);
 8022d9e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8022da2:	f107 0314 	add.w	r3, r7, #20
 8022da6:	4619      	mov	r1, r3
 8022da8:	68f8      	ldr	r0, [r7, #12]
 8022daa:	f002 ff91 	bl	8025cd0 <strtoull>
 8022dae:	4602      	mov	r2, r0
 8022db0:	460b      	mov	r3, r1
 8022db2:	68b9      	ldr	r1, [r7, #8]
 8022db4:	e9c1 2300 	strd	r2, r3, [r1]
    return endptr - str;
 8022db8:	697a      	ldr	r2, [r7, #20]
 8022dba:	68fb      	ldr	r3, [r7, #12]
 8022dbc:	1ad3      	subs	r3, r2, r3
}
 8022dbe:	4618      	mov	r0, r3
 8022dc0:	3718      	adds	r7, #24
 8022dc2:	46bd      	mov	sp, r7
 8022dc4:	bd80      	pop	{r7, pc}

08022dc6 <strToDouble>:
 * Converts string to double (64 bit) representation
 * @param str   string value
 * @param val   double result
 * @return      number of bytes used in string
 */
size_t strToDouble(const char * str, double * val) {
 8022dc6:	b580      	push	{r7, lr}
 8022dc8:	b084      	sub	sp, #16
 8022dca:	af00      	add	r7, sp, #0
 8022dcc:	6078      	str	r0, [r7, #4]
 8022dce:	6039      	str	r1, [r7, #0]
    char * endptr;
    *val = strtod(str, &endptr);
 8022dd0:	f107 030c 	add.w	r3, r7, #12
 8022dd4:	4619      	mov	r1, r3
 8022dd6:	6878      	ldr	r0, [r7, #4]
 8022dd8:	f002 fd2a 	bl	8025830 <strtod>
 8022ddc:	eeb0 7a40 	vmov.f32	s14, s0
 8022de0:	eef0 7a60 	vmov.f32	s15, s1
 8022de4:	683b      	ldr	r3, [r7, #0]
 8022de6:	ed83 7b00 	vstr	d7, [r3]
    return endptr - str;
 8022dea:	68fa      	ldr	r2, [r7, #12]
 8022dec:	687b      	ldr	r3, [r7, #4]
 8022dee:	1ad3      	subs	r3, r2, r3
}
 8022df0:	4618      	mov	r0, r3
 8022df2:	3710      	adds	r7, #16
 8022df4:	46bd      	mov	sp, r7
 8022df6:	bd80      	pop	{r7, pc}

08022df8 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 8022df8:	b580      	push	{r7, lr}
 8022dfa:	b084      	sub	sp, #16
 8022dfc:	af00      	add	r7, sp, #0
 8022dfe:	60f8      	str	r0, [r7, #12]
 8022e00:	60b9      	str	r1, [r7, #8]
 8022e02:	607a      	str	r2, [r7, #4]
 8022e04:	603b      	str	r3, [r7, #0]
    if (len1 != len2) {
 8022e06:	68ba      	ldr	r2, [r7, #8]
 8022e08:	683b      	ldr	r3, [r7, #0]
 8022e0a:	429a      	cmp	r2, r3
 8022e0c:	d001      	beq.n	8022e12 <compareStr+0x1a>
        return FALSE;
 8022e0e:	2300      	movs	r3, #0
 8022e10:	e00a      	b.n	8022e28 <compareStr+0x30>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 8022e12:	683a      	ldr	r2, [r7, #0]
 8022e14:	6879      	ldr	r1, [r7, #4]
 8022e16:	68f8      	ldr	r0, [r7, #12]
 8022e18:	f001 fe96 	bl	8024b48 <strncasecmp>
 8022e1c:	4603      	mov	r3, r0
 8022e1e:	2b00      	cmp	r3, #0
 8022e20:	d101      	bne.n	8022e26 <compareStr+0x2e>
        return TRUE;
 8022e22:	2301      	movs	r3, #1
 8022e24:	e000      	b.n	8022e28 <compareStr+0x30>
    }

    return FALSE;
 8022e26:	2300      	movs	r3, #0
}
 8022e28:	4618      	mov	r0, r3
 8022e2a:	3710      	adds	r7, #16
 8022e2c:	46bd      	mov	sp, r7
 8022e2e:	bd80      	pop	{r7, pc}

08022e30 <compareStrAndNum>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if strings match
 */
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 8022e30:	b580      	push	{r7, lr}
 8022e32:	b088      	sub	sp, #32
 8022e34:	af00      	add	r7, sp, #0
 8022e36:	60f8      	str	r0, [r7, #12]
 8022e38:	60b9      	str	r1, [r7, #8]
 8022e3a:	607a      	str	r2, [r7, #4]
 8022e3c:	603b      	str	r3, [r7, #0]
    scpi_bool_t result = FALSE;
 8022e3e:	2300      	movs	r3, #0
 8022e40:	77fb      	strb	r3, [r7, #31]
    size_t i;

    if (len2 < len1) {
 8022e42:	683a      	ldr	r2, [r7, #0]
 8022e44:	68bb      	ldr	r3, [r7, #8]
 8022e46:	429a      	cmp	r2, r3
 8022e48:	d201      	bcs.n	8022e4e <compareStrAndNum+0x1e>
        return FALSE;
 8022e4a:	2300      	movs	r3, #0
 8022e4c:	e042      	b.n	8022ed4 <compareStrAndNum+0xa4>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 8022e4e:	68ba      	ldr	r2, [r7, #8]
 8022e50:	6879      	ldr	r1, [r7, #4]
 8022e52:	68f8      	ldr	r0, [r7, #12]
 8022e54:	f001 fe78 	bl	8024b48 <strncasecmp>
 8022e58:	4603      	mov	r3, r0
 8022e5a:	2b00      	cmp	r3, #0
 8022e5c:	d139      	bne.n	8022ed2 <compareStrAndNum+0xa2>
        result = TRUE;
 8022e5e:	2301      	movs	r3, #1
 8022e60:	77fb      	strb	r3, [r7, #31]

        if (num) {
 8022e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e64:	2b00      	cmp	r3, #0
 8022e66:	d01b      	beq.n	8022ea0 <compareStrAndNum+0x70>
            if (len1 == len2) {
 8022e68:	68ba      	ldr	r2, [r7, #8]
 8022e6a:	683b      	ldr	r3, [r7, #0]
 8022e6c:	429a      	cmp	r2, r3
 8022e6e:	d030      	beq.n	8022ed2 <compareStrAndNum+0xa2>
                /* *num = 1; */
            } else {
                int32_t tmpNum;
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 8022e70:	687a      	ldr	r2, [r7, #4]
 8022e72:	68bb      	ldr	r3, [r7, #8]
 8022e74:	4413      	add	r3, r2
 8022e76:	f107 0114 	add.w	r1, r7, #20
 8022e7a:	220a      	movs	r2, #10
 8022e7c:	4618      	mov	r0, r3
 8022e7e:	f7ff ff3a 	bl	8022cf6 <strBaseToInt32>
 8022e82:	4602      	mov	r2, r0
 8022e84:	68bb      	ldr	r3, [r7, #8]
 8022e86:	4413      	add	r3, r2
 8022e88:	61bb      	str	r3, [r7, #24]
                if (i != len2) {
 8022e8a:	69ba      	ldr	r2, [r7, #24]
 8022e8c:	683b      	ldr	r3, [r7, #0]
 8022e8e:	429a      	cmp	r2, r3
 8022e90:	d002      	beq.n	8022e98 <compareStrAndNum+0x68>
                    result = FALSE;
 8022e92:	2300      	movs	r3, #0
 8022e94:	77fb      	strb	r3, [r7, #31]
 8022e96:	e01c      	b.n	8022ed2 <compareStrAndNum+0xa2>
                } else {
                    *num = tmpNum;
 8022e98:	697a      	ldr	r2, [r7, #20]
 8022e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e9c:	601a      	str	r2, [r3, #0]
 8022e9e:	e018      	b.n	8022ed2 <compareStrAndNum+0xa2>
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
 8022ea0:	68bb      	ldr	r3, [r7, #8]
 8022ea2:	61bb      	str	r3, [r7, #24]
 8022ea4:	e011      	b.n	8022eca <compareStrAndNum+0x9a>
                if (!isdigit((int) str2[i])) {
 8022ea6:	687a      	ldr	r2, [r7, #4]
 8022ea8:	69bb      	ldr	r3, [r7, #24]
 8022eaa:	4413      	add	r3, r2
 8022eac:	781b      	ldrb	r3, [r3, #0]
 8022eae:	3301      	adds	r3, #1
 8022eb0:	4a0a      	ldr	r2, [pc, #40]	; (8022edc <compareStrAndNum+0xac>)
 8022eb2:	4413      	add	r3, r2
 8022eb4:	781b      	ldrb	r3, [r3, #0]
 8022eb6:	f003 0304 	and.w	r3, r3, #4
 8022eba:	2b00      	cmp	r3, #0
 8022ebc:	d102      	bne.n	8022ec4 <compareStrAndNum+0x94>
                    result = FALSE;
 8022ebe:	2300      	movs	r3, #0
 8022ec0:	77fb      	strb	r3, [r7, #31]
                    break;
 8022ec2:	e006      	b.n	8022ed2 <compareStrAndNum+0xa2>
            for (i = len1; i < len2; i++) {
 8022ec4:	69bb      	ldr	r3, [r7, #24]
 8022ec6:	3301      	adds	r3, #1
 8022ec8:	61bb      	str	r3, [r7, #24]
 8022eca:	69ba      	ldr	r2, [r7, #24]
 8022ecc:	683b      	ldr	r3, [r7, #0]
 8022ece:	429a      	cmp	r2, r3
 8022ed0:	d3e9      	bcc.n	8022ea6 <compareStrAndNum+0x76>
                }
            }
        }
    }

    return result;
 8022ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8022ed4:	4618      	mov	r0, r3
 8022ed6:	3720      	adds	r7, #32
 8022ed8:	46bd      	mov	sp, r7
 8022eda:	bd80      	pop	{r7, pc}
 8022edc:	0802d778 	.word	0x0802d778

08022ee0 <skipWhitespace>:
 * Count white spaces from the beggining
 * @param cmd - command
 * @param len - max search length
 * @return number of white spaces
 */
size_t skipWhitespace(const char * cmd, size_t len) {
 8022ee0:	b480      	push	{r7}
 8022ee2:	b085      	sub	sp, #20
 8022ee4:	af00      	add	r7, sp, #0
 8022ee6:	6078      	str	r0, [r7, #4]
 8022ee8:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; i < len; i++) {
 8022eea:	2300      	movs	r3, #0
 8022eec:	60fb      	str	r3, [r7, #12]
 8022eee:	e010      	b.n	8022f12 <skipWhitespace+0x32>
        if (!isspace((unsigned char) cmd[i])) {
 8022ef0:	687a      	ldr	r2, [r7, #4]
 8022ef2:	68fb      	ldr	r3, [r7, #12]
 8022ef4:	4413      	add	r3, r2
 8022ef6:	781b      	ldrb	r3, [r3, #0]
 8022ef8:	3301      	adds	r3, #1
 8022efa:	4a0b      	ldr	r2, [pc, #44]	; (8022f28 <skipWhitespace+0x48>)
 8022efc:	4413      	add	r3, r2
 8022efe:	781b      	ldrb	r3, [r3, #0]
 8022f00:	f003 0308 	and.w	r3, r3, #8
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	d101      	bne.n	8022f0c <skipWhitespace+0x2c>
            return i;
 8022f08:	68fb      	ldr	r3, [r7, #12]
 8022f0a:	e007      	b.n	8022f1c <skipWhitespace+0x3c>
    for (i = 0; i < len; i++) {
 8022f0c:	68fb      	ldr	r3, [r7, #12]
 8022f0e:	3301      	adds	r3, #1
 8022f10:	60fb      	str	r3, [r7, #12]
 8022f12:	68fa      	ldr	r2, [r7, #12]
 8022f14:	683b      	ldr	r3, [r7, #0]
 8022f16:	429a      	cmp	r2, r3
 8022f18:	d3ea      	bcc.n	8022ef0 <skipWhitespace+0x10>
        }
    }
    return len;
 8022f1a:	683b      	ldr	r3, [r7, #0]
}
 8022f1c:	4618      	mov	r0, r3
 8022f1e:	3714      	adds	r7, #20
 8022f20:	46bd      	mov	sp, r7
 8022f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f26:	4770      	bx	lr
 8022f28:	0802d778 	.word	0x0802d778

08022f2c <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 8022f2c:	b480      	push	{r7}
 8022f2e:	b085      	sub	sp, #20
 8022f30:	af00      	add	r7, sp, #0
 8022f32:	6078      	str	r0, [r7, #4]
 8022f34:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 8022f36:	2300      	movs	r3, #0
 8022f38:	60fb      	str	r3, [r7, #12]
 8022f3a:	e010      	b.n	8022f5e <patternSeparatorShortPos+0x32>
        if (islower((unsigned char) pattern[i])) {
 8022f3c:	687a      	ldr	r2, [r7, #4]
 8022f3e:	68fb      	ldr	r3, [r7, #12]
 8022f40:	4413      	add	r3, r2
 8022f42:	781b      	ldrb	r3, [r3, #0]
 8022f44:	3301      	adds	r3, #1
 8022f46:	4a0e      	ldr	r2, [pc, #56]	; (8022f80 <patternSeparatorShortPos+0x54>)
 8022f48:	4413      	add	r3, r2
 8022f4a:	781b      	ldrb	r3, [r3, #0]
 8022f4c:	f003 0303 	and.w	r3, r3, #3
 8022f50:	2b02      	cmp	r3, #2
 8022f52:	d101      	bne.n	8022f58 <patternSeparatorShortPos+0x2c>
            return i;
 8022f54:	68fb      	ldr	r3, [r7, #12]
 8022f56:	e00d      	b.n	8022f74 <patternSeparatorShortPos+0x48>
    for (i = 0; (i < len) && pattern[i]; i++) {
 8022f58:	68fb      	ldr	r3, [r7, #12]
 8022f5a:	3301      	adds	r3, #1
 8022f5c:	60fb      	str	r3, [r7, #12]
 8022f5e:	68fa      	ldr	r2, [r7, #12]
 8022f60:	683b      	ldr	r3, [r7, #0]
 8022f62:	429a      	cmp	r2, r3
 8022f64:	d205      	bcs.n	8022f72 <patternSeparatorShortPos+0x46>
 8022f66:	687a      	ldr	r2, [r7, #4]
 8022f68:	68fb      	ldr	r3, [r7, #12]
 8022f6a:	4413      	add	r3, r2
 8022f6c:	781b      	ldrb	r3, [r3, #0]
 8022f6e:	2b00      	cmp	r3, #0
 8022f70:	d1e4      	bne.n	8022f3c <patternSeparatorShortPos+0x10>
        }
    }
    return i;
 8022f72:	68fb      	ldr	r3, [r7, #12]
}
 8022f74:	4618      	mov	r0, r3
 8022f76:	3714      	adds	r7, #20
 8022f78:	46bd      	mov	sp, r7
 8022f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f7e:	4770      	bx	lr
 8022f80:	0802d778 	.word	0x0802d778

08022f84 <patternSeparatorPos>:
 * Find pattern separator position
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorPos(const char * pattern, size_t len) {
 8022f84:	b580      	push	{r7, lr}
 8022f86:	b084      	sub	sp, #16
 8022f88:	af00      	add	r7, sp, #0
 8022f8a:	6078      	str	r0, [r7, #4]
 8022f8c:	6039      	str	r1, [r7, #0]

    char * separator = strnpbrk(pattern, len, "?:[]");
 8022f8e:	4a09      	ldr	r2, [pc, #36]	; (8022fb4 <patternSeparatorPos+0x30>)
 8022f90:	6839      	ldr	r1, [r7, #0]
 8022f92:	6878      	ldr	r0, [r7, #4]
 8022f94:	f7ff fdca 	bl	8022b2c <strnpbrk>
 8022f98:	60f8      	str	r0, [r7, #12]
    if (separator == NULL) {
 8022f9a:	68fb      	ldr	r3, [r7, #12]
 8022f9c:	2b00      	cmp	r3, #0
 8022f9e:	d101      	bne.n	8022fa4 <patternSeparatorPos+0x20>
        return len;
 8022fa0:	683b      	ldr	r3, [r7, #0]
 8022fa2:	e002      	b.n	8022faa <patternSeparatorPos+0x26>
    } else {
        return separator - pattern;
 8022fa4:	68fa      	ldr	r2, [r7, #12]
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	1ad3      	subs	r3, r2, r3
    }
}
 8022faa:	4618      	mov	r0, r3
 8022fac:	3710      	adds	r7, #16
 8022fae:	46bd      	mov	sp, r7
 8022fb0:	bd80      	pop	{r7, pc}
 8022fb2:	bf00      	nop
 8022fb4:	0802cfec 	.word	0x0802cfec

08022fb8 <cmdSeparatorPos>:
 * Find command separator position
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
static size_t cmdSeparatorPos(const char * cmd, size_t len) {
 8022fb8:	b580      	push	{r7, lr}
 8022fba:	b084      	sub	sp, #16
 8022fbc:	af00      	add	r7, sp, #0
 8022fbe:	6078      	str	r0, [r7, #4]
 8022fc0:	6039      	str	r1, [r7, #0]
    char * separator = strnpbrk(cmd, len, ":?");
 8022fc2:	4a0a      	ldr	r2, [pc, #40]	; (8022fec <cmdSeparatorPos+0x34>)
 8022fc4:	6839      	ldr	r1, [r7, #0]
 8022fc6:	6878      	ldr	r0, [r7, #4]
 8022fc8:	f7ff fdb0 	bl	8022b2c <strnpbrk>
 8022fcc:	60b8      	str	r0, [r7, #8]
    size_t result;
    if (separator == NULL) {
 8022fce:	68bb      	ldr	r3, [r7, #8]
 8022fd0:	2b00      	cmp	r3, #0
 8022fd2:	d102      	bne.n	8022fda <cmdSeparatorPos+0x22>
        result = len;
 8022fd4:	683b      	ldr	r3, [r7, #0]
 8022fd6:	60fb      	str	r3, [r7, #12]
 8022fd8:	e003      	b.n	8022fe2 <cmdSeparatorPos+0x2a>
    } else {
        result = separator - cmd;
 8022fda:	68ba      	ldr	r2, [r7, #8]
 8022fdc:	687b      	ldr	r3, [r7, #4]
 8022fde:	1ad3      	subs	r3, r2, r3
 8022fe0:	60fb      	str	r3, [r7, #12]
    }

    return result;
 8022fe2:	68fb      	ldr	r3, [r7, #12]
}
 8022fe4:	4618      	mov	r0, r3
 8022fe6:	3710      	adds	r7, #16
 8022fe8:	46bd      	mov	sp, r7
 8022fea:	bd80      	pop	{r7, pc}
 8022fec:	0802cff4 	.word	0x0802cff4

08022ff0 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 8022ff0:	b580      	push	{r7, lr}
 8022ff2:	b088      	sub	sp, #32
 8022ff4:	af02      	add	r7, sp, #8
 8022ff6:	60f8      	str	r0, [r7, #12]
 8022ff8:	60b9      	str	r1, [r7, #8]
 8022ffa:	607a      	str	r2, [r7, #4]
 8022ffc:	603b      	str	r3, [r7, #0]
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 8022ffe:	68bb      	ldr	r3, [r7, #8]
 8023000:	2b00      	cmp	r3, #0
 8023002:	d02c      	beq.n	802305e <matchPattern+0x6e>
 8023004:	68bb      	ldr	r3, [r7, #8]
 8023006:	3b01      	subs	r3, #1
 8023008:	68fa      	ldr	r2, [r7, #12]
 802300a:	4413      	add	r3, r2
 802300c:	781b      	ldrb	r3, [r3, #0]
 802300e:	2b23      	cmp	r3, #35	; 0x23
 8023010:	d125      	bne.n	802305e <matchPattern+0x6e>
        size_t new_pattern_len = pattern_len - 1;
 8023012:	68bb      	ldr	r3, [r7, #8]
 8023014:	3b01      	subs	r3, #1
 8023016:	617b      	str	r3, [r7, #20]

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 8023018:	6979      	ldr	r1, [r7, #20]
 802301a:	68f8      	ldr	r0, [r7, #12]
 802301c:	f7ff ff86 	bl	8022f2c <patternSeparatorShortPos>
 8023020:	4603      	mov	r3, r0
 8023022:	613b      	str	r3, [r7, #16]

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8023024:	6a3b      	ldr	r3, [r7, #32]
 8023026:	9300      	str	r3, [sp, #0]
 8023028:	683b      	ldr	r3, [r7, #0]
 802302a:	687a      	ldr	r2, [r7, #4]
 802302c:	6979      	ldr	r1, [r7, #20]
 802302e:	68f8      	ldr	r0, [r7, #12]
 8023030:	f7ff fefe 	bl	8022e30 <compareStrAndNum>
 8023034:	4603      	mov	r3, r0
 8023036:	2b00      	cmp	r3, #0
 8023038:	d10a      	bne.n	8023050 <matchPattern+0x60>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 802303a:	6939      	ldr	r1, [r7, #16]
 802303c:	6a3b      	ldr	r3, [r7, #32]
 802303e:	9300      	str	r3, [sp, #0]
 8023040:	683b      	ldr	r3, [r7, #0]
 8023042:	687a      	ldr	r2, [r7, #4]
 8023044:	68f8      	ldr	r0, [r7, #12]
 8023046:	f7ff fef3 	bl	8022e30 <compareStrAndNum>
 802304a:	4603      	mov	r3, r0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 802304c:	2b00      	cmp	r3, #0
 802304e:	d001      	beq.n	8023054 <matchPattern+0x64>
 8023050:	2301      	movs	r3, #1
 8023052:	e000      	b.n	8023056 <matchPattern+0x66>
 8023054:	2300      	movs	r3, #0
 8023056:	f003 0301 	and.w	r3, r3, #1
 802305a:	b2db      	uxtb	r3, r3
 802305c:	e01d      	b.n	802309a <matchPattern+0xaa>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 802305e:	68b9      	ldr	r1, [r7, #8]
 8023060:	68f8      	ldr	r0, [r7, #12]
 8023062:	f7ff ff63 	bl	8022f2c <patternSeparatorShortPos>
 8023066:	4603      	mov	r3, r0
 8023068:	613b      	str	r3, [r7, #16]

        return compareStr(pattern, pattern_len, str, str_len) ||
 802306a:	683b      	ldr	r3, [r7, #0]
 802306c:	687a      	ldr	r2, [r7, #4]
 802306e:	68b9      	ldr	r1, [r7, #8]
 8023070:	68f8      	ldr	r0, [r7, #12]
 8023072:	f7ff fec1 	bl	8022df8 <compareStr>
 8023076:	4603      	mov	r3, r0
 8023078:	2b00      	cmp	r3, #0
 802307a:	d108      	bne.n	802308e <matchPattern+0x9e>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 802307c:	6939      	ldr	r1, [r7, #16]
 802307e:	683b      	ldr	r3, [r7, #0]
 8023080:	687a      	ldr	r2, [r7, #4]
 8023082:	68f8      	ldr	r0, [r7, #12]
 8023084:	f7ff feb8 	bl	8022df8 <compareStr>
 8023088:	4603      	mov	r3, r0
        return compareStr(pattern, pattern_len, str, str_len) ||
 802308a:	2b00      	cmp	r3, #0
 802308c:	d001      	beq.n	8023092 <matchPattern+0xa2>
 802308e:	2301      	movs	r3, #1
 8023090:	e000      	b.n	8023094 <matchPattern+0xa4>
 8023092:	2300      	movs	r3, #0
 8023094:	f003 0301 	and.w	r3, r3, #1
 8023098:	b2db      	uxtb	r3, r3
    }
}
 802309a:	4618      	mov	r0, r3
 802309c:	3718      	adds	r7, #24
 802309e:	46bd      	mov	sp, r7
 80230a0:	bd80      	pop	{r7, pc}

080230a2 <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 80230a2:	b580      	push	{r7, lr}
 80230a4:	b090      	sub	sp, #64	; 0x40
 80230a6:	af02      	add	r7, sp, #8
 80230a8:	60f8      	str	r0, [r7, #12]
 80230aa:	60b9      	str	r1, [r7, #8]
 80230ac:	607a      	str	r2, [r7, #4]
 80230ae:	603b      	str	r3, [r7, #0]
#define SKIP_PATTERN(n) do {pattern_ptr += (n);  pattern_len -= (n);} while(0)
#define SKIP_CMD(n) do {cmd_ptr += (n);  cmd_len -= (n);} while(0)

    scpi_bool_t result = FALSE;
 80230b0:	2300      	movs	r3, #0
 80230b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int brackets = 0;
 80230b6:	2300      	movs	r3, #0
 80230b8:	633b      	str	r3, [r7, #48]	; 0x30
    int cmd_sep_pos = 0;
 80230ba:	2300      	movs	r3, #0
 80230bc:	617b      	str	r3, [r7, #20]

    size_t numbers_idx = 0;
 80230be:	2300      	movs	r3, #0
 80230c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t *number_ptr = NULL;
 80230c2:	2300      	movs	r3, #0
 80230c4:	62bb      	str	r3, [r7, #40]	; 0x28

    const char * pattern_ptr = pattern;
 80230c6:	68fb      	ldr	r3, [r7, #12]
 80230c8:	627b      	str	r3, [r7, #36]	; 0x24
    int pattern_len = strlen(pattern);
 80230ca:	68f8      	ldr	r0, [r7, #12]
 80230cc:	f7dd f8aa 	bl	8000224 <strlen>
 80230d0:	4603      	mov	r3, r0
 80230d2:	623b      	str	r3, [r7, #32]

    const char * cmd_ptr = cmd;
 80230d4:	68bb      	ldr	r3, [r7, #8]
 80230d6:	61fb      	str	r3, [r7, #28]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 80230d8:	6879      	ldr	r1, [r7, #4]
 80230da:	68b8      	ldr	r0, [r7, #8]
 80230dc:	f000 fa0e 	bl	80234fc <BSD_strnlen>
 80230e0:	61b8      	str	r0, [r7, #24]

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 80230e2:	6a3b      	ldr	r3, [r7, #32]
 80230e4:	3b01      	subs	r3, #1
 80230e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80230e8:	4413      	add	r3, r2
 80230ea:	781b      	ldrb	r3, [r3, #0]
 80230ec:	2b3f      	cmp	r3, #63	; 0x3f
 80230ee:	d10f      	bne.n	8023110 <matchCommand+0x6e>
        if (cmd_ptr[cmd_len - 1] == '?') {
 80230f0:	69bb      	ldr	r3, [r7, #24]
 80230f2:	3b01      	subs	r3, #1
 80230f4:	69fa      	ldr	r2, [r7, #28]
 80230f6:	4413      	add	r3, r2
 80230f8:	781b      	ldrb	r3, [r3, #0]
 80230fa:	2b3f      	cmp	r3, #63	; 0x3f
 80230fc:	d106      	bne.n	802310c <matchCommand+0x6a>
            cmd_len -= 1;
 80230fe:	69bb      	ldr	r3, [r7, #24]
 8023100:	3b01      	subs	r3, #1
 8023102:	61bb      	str	r3, [r7, #24]
            pattern_len -= 1;
 8023104:	6a3b      	ldr	r3, [r7, #32]
 8023106:	3b01      	subs	r3, #1
 8023108:	623b      	str	r3, [r7, #32]
 802310a:	e001      	b.n	8023110 <matchCommand+0x6e>
        } else {
            return FALSE;
 802310c:	2300      	movs	r3, #0
 802310e:	e18d      	b.n	802342c <matchCommand+0x38a>
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 8023110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023112:	781b      	ldrb	r3, [r3, #0]
 8023114:	2b5b      	cmp	r3, #91	; 0x5b
 8023116:	d108      	bne.n	802312a <matchCommand+0x88>
        SKIP_PATTERN(1);
 8023118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802311a:	3301      	adds	r3, #1
 802311c:	627b      	str	r3, [r7, #36]	; 0x24
 802311e:	6a3b      	ldr	r3, [r7, #32]
 8023120:	3b01      	subs	r3, #1
 8023122:	623b      	str	r3, [r7, #32]
        brackets++;
 8023124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023126:	3301      	adds	r3, #1
 8023128:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 802312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802312c:	781b      	ldrb	r3, [r3, #0]
 802312e:	2b3a      	cmp	r3, #58	; 0x3a
 8023130:	d105      	bne.n	802313e <matchCommand+0x9c>
        SKIP_PATTERN(1);
 8023132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023134:	3301      	adds	r3, #1
 8023136:	627b      	str	r3, [r7, #36]	; 0x24
 8023138:	6a3b      	ldr	r3, [r7, #32]
 802313a:	3b01      	subs	r3, #1
 802313c:	623b      	str	r3, [r7, #32]
    }

    if (cmd_ptr[0] == ':') {
 802313e:	69fb      	ldr	r3, [r7, #28]
 8023140:	781b      	ldrb	r3, [r3, #0]
 8023142:	2b3a      	cmp	r3, #58	; 0x3a
 8023144:	d110      	bne.n	8023168 <matchCommand+0xc6>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 8023146:	69bb      	ldr	r3, [r7, #24]
 8023148:	2b01      	cmp	r3, #1
 802314a:	d90d      	bls.n	8023168 <matchCommand+0xc6>
            if (cmd_ptr[1] != '*') {
 802314c:	69fb      	ldr	r3, [r7, #28]
 802314e:	3301      	adds	r3, #1
 8023150:	781b      	ldrb	r3, [r3, #0]
 8023152:	2b2a      	cmp	r3, #42	; 0x2a
 8023154:	d006      	beq.n	8023164 <matchCommand+0xc2>
                SKIP_CMD(1);
 8023156:	69fb      	ldr	r3, [r7, #28]
 8023158:	3301      	adds	r3, #1
 802315a:	61fb      	str	r3, [r7, #28]
 802315c:	69bb      	ldr	r3, [r7, #24]
 802315e:	3b01      	subs	r3, #1
 8023160:	61bb      	str	r3, [r7, #24]
 8023162:	e001      	b.n	8023168 <matchCommand+0xc6>
            } else {
                return FALSE;
 8023164:	2300      	movs	r3, #0
 8023166:	e161      	b.n	802342c <matchCommand+0x38a>
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8023168:	6a3b      	ldr	r3, [r7, #32]
 802316a:	4619      	mov	r1, r3
 802316c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802316e:	f7ff ff09 	bl	8022f84 <patternSeparatorPos>
 8023172:	4603      	mov	r3, r0
 8023174:	613b      	str	r3, [r7, #16]

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);
 8023176:	69b9      	ldr	r1, [r7, #24]
 8023178:	69f8      	ldr	r0, [r7, #28]
 802317a:	f7ff ff1d 	bl	8022fb8 <cmdSeparatorPos>
 802317e:	4603      	mov	r3, r0
 8023180:	617b      	str	r3, [r7, #20]

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 8023182:	693b      	ldr	r3, [r7, #16]
 8023184:	2b00      	cmp	r3, #0
 8023186:	dd1c      	ble.n	80231c2 <matchCommand+0x120>
 8023188:	693b      	ldr	r3, [r7, #16]
 802318a:	3b01      	subs	r3, #1
 802318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802318e:	4413      	add	r3, r2
 8023190:	781b      	ldrb	r3, [r3, #0]
 8023192:	2b23      	cmp	r3, #35	; 0x23
 8023194:	d115      	bne.n	80231c2 <matchCommand+0x120>
            if (numbers && (numbers_idx < numbers_len)) {
 8023196:	683b      	ldr	r3, [r7, #0]
 8023198:	2b00      	cmp	r3, #0
 802319a:	d00c      	beq.n	80231b6 <matchCommand+0x114>
 802319c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802319e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80231a0:	429a      	cmp	r2, r3
 80231a2:	d208      	bcs.n	80231b6 <matchCommand+0x114>
                number_ptr = numbers + numbers_idx;
 80231a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80231a6:	009b      	lsls	r3, r3, #2
 80231a8:	683a      	ldr	r2, [r7, #0]
 80231aa:	4413      	add	r3, r2
 80231ac:	62bb      	str	r3, [r7, #40]	; 0x28
                *number_ptr = default_value; /* default value */
 80231ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80231b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80231b2:	601a      	str	r2, [r3, #0]
 80231b4:	e001      	b.n	80231ba <matchCommand+0x118>
            } else {
                number_ptr = NULL;
 80231b6:	2300      	movs	r3, #0
 80231b8:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            numbers_idx++;
 80231ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80231bc:	3301      	adds	r3, #1
 80231be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80231c0:	e001      	b.n	80231c6 <matchCommand+0x124>
        } else {
            number_ptr = NULL;
 80231c2:	2300      	movs	r3, #0
 80231c4:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 80231c6:	6939      	ldr	r1, [r7, #16]
 80231c8:	697a      	ldr	r2, [r7, #20]
 80231ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80231cc:	9300      	str	r3, [sp, #0]
 80231ce:	4613      	mov	r3, r2
 80231d0:	69fa      	ldr	r2, [r7, #28]
 80231d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80231d4:	f7ff ff0c 	bl	8022ff0 <matchPattern>
 80231d8:	4603      	mov	r3, r0
 80231da:	2b00      	cmp	r3, #0
 80231dc:	f000 80e9 	beq.w	80233b2 <matchCommand+0x310>
            SKIP_PATTERN(pattern_sep_pos);
 80231e0:	693b      	ldr	r3, [r7, #16]
 80231e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80231e4:	4413      	add	r3, r2
 80231e6:	627b      	str	r3, [r7, #36]	; 0x24
 80231e8:	6a3a      	ldr	r2, [r7, #32]
 80231ea:	693b      	ldr	r3, [r7, #16]
 80231ec:	1ad3      	subs	r3, r2, r3
 80231ee:	623b      	str	r3, [r7, #32]
            SKIP_CMD(cmd_sep_pos);
 80231f0:	697b      	ldr	r3, [r7, #20]
 80231f2:	69fa      	ldr	r2, [r7, #28]
 80231f4:	4413      	add	r3, r2
 80231f6:	61fb      	str	r3, [r7, #28]
 80231f8:	697b      	ldr	r3, [r7, #20]
 80231fa:	69ba      	ldr	r2, [r7, #24]
 80231fc:	1ad3      	subs	r3, r2, r3
 80231fe:	61bb      	str	r3, [r7, #24]
            result = TRUE;
 8023200:	2301      	movs	r3, #1
 8023202:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 8023206:	6a3b      	ldr	r3, [r7, #32]
 8023208:	2b00      	cmp	r3, #0
 802320a:	d103      	bne.n	8023214 <matchCommand+0x172>
 802320c:	69bb      	ldr	r3, [r7, #24]
 802320e:	2b00      	cmp	r3, #0
 8023210:	f000 8107 	beq.w	8023422 <matchCommand+0x380>
                break;
            }

            /* pattern complete, but command not */
            if ((pattern_len == 0) && (cmd_len > 0)) {
 8023214:	6a3b      	ldr	r3, [r7, #32]
 8023216:	2b00      	cmp	r3, #0
 8023218:	d106      	bne.n	8023228 <matchCommand+0x186>
 802321a:	69bb      	ldr	r3, [r7, #24]
 802321c:	2b00      	cmp	r3, #0
 802321e:	d003      	beq.n	8023228 <matchCommand+0x186>
                result = FALSE;
 8023220:	2300      	movs	r3, #0
 8023222:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8023226:	e0ff      	b.n	8023428 <matchCommand+0x386>
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
 8023228:	69bb      	ldr	r3, [r7, #24]
 802322a:	2b00      	cmp	r3, #0
 802322c:	d138      	bne.n	80232a0 <matchCommand+0x1fe>
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
 802322e:	e02c      	b.n	802328a <matchCommand+0x1e8>
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8023230:	6a3b      	ldr	r3, [r7, #32]
 8023232:	4619      	mov	r1, r3
 8023234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023236:	f7ff fea5 	bl	8022f84 <patternSeparatorPos>
 802323a:	4603      	mov	r3, r0
 802323c:	613b      	str	r3, [r7, #16]
                    switch (pattern_ptr[pattern_sep_pos]) {
 802323e:	693b      	ldr	r3, [r7, #16]
 8023240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023242:	4413      	add	r3, r2
 8023244:	781b      	ldrb	r3, [r3, #0]
 8023246:	2b5b      	cmp	r3, #91	; 0x5b
 8023248:	d002      	beq.n	8023250 <matchCommand+0x1ae>
 802324a:	2b5d      	cmp	r3, #93	; 0x5d
 802324c:	d004      	beq.n	8023258 <matchCommand+0x1b6>
                            break;
                        case ']':
                            brackets--;
                            break;
                        default:
                            break;
 802324e:	e007      	b.n	8023260 <matchCommand+0x1be>
                            brackets++;
 8023250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023252:	3301      	adds	r3, #1
 8023254:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 8023256:	e003      	b.n	8023260 <matchCommand+0x1be>
                            brackets--;
 8023258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802325a:	3b01      	subs	r3, #1
 802325c:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 802325e:	bf00      	nop
                    }
                    SKIP_PATTERN(pattern_sep_pos + 1);
 8023260:	693b      	ldr	r3, [r7, #16]
 8023262:	3301      	adds	r3, #1
 8023264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023266:	4413      	add	r3, r2
 8023268:	627b      	str	r3, [r7, #36]	; 0x24
 802326a:	693b      	ldr	r3, [r7, #16]
 802326c:	3301      	adds	r3, #1
 802326e:	6a3a      	ldr	r2, [r7, #32]
 8023270:	1ad3      	subs	r3, r2, r3
 8023272:	623b      	str	r3, [r7, #32]
                    if (brackets == 0) {
 8023274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023276:	2b00      	cmp	r3, #0
 8023278:	d107      	bne.n	802328a <matchCommand+0x1e8>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 802327a:	6a3b      	ldr	r3, [r7, #32]
 802327c:	2b00      	cmp	r3, #0
 802327e:	dd07      	ble.n	8023290 <matchCommand+0x1ee>
 8023280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023282:	781b      	ldrb	r3, [r3, #0]
 8023284:	2b5b      	cmp	r3, #91	; 0x5b
 8023286:	d103      	bne.n	8023290 <matchCommand+0x1ee>
                            continue;
 8023288:	bf00      	nop
                while (pattern_len) {
 802328a:	6a3b      	ldr	r3, [r7, #32]
 802328c:	2b00      	cmp	r3, #0
 802328e:	d1cf      	bne.n	8023230 <matchCommand+0x18e>
                        } else {
                            break;
                        }
                    }
                }
                if (pattern_len != 0) {
 8023290:	6a3b      	ldr	r3, [r7, #32]
 8023292:	2b00      	cmp	r3, #0
 8023294:	f000 80c7 	beq.w	8023426 <matchCommand+0x384>
                    result = FALSE;
 8023298:	2300      	movs	r3, #0
 802329a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                }
                break; /* exist optional keyword, command is complete */
 802329e:	e0c2      	b.n	8023426 <matchCommand+0x384>
            }

            /* both command and patter contains command separator at this position */
            if ((pattern_len > 0)
 80232a0:	6a3b      	ldr	r3, [r7, #32]
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	dd16      	ble.n	80232d4 <matchCommand+0x232>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 80232a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232a8:	781a      	ldrb	r2, [r3, #0]
 80232aa:	69fb      	ldr	r3, [r7, #28]
 80232ac:	781b      	ldrb	r3, [r3, #0]
 80232ae:	429a      	cmp	r2, r3
 80232b0:	d110      	bne.n	80232d4 <matchCommand+0x232>
                    && (pattern_ptr[0] == ':'))) {
 80232b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232b4:	781b      	ldrb	r3, [r3, #0]
 80232b6:	2b3a      	cmp	r3, #58	; 0x3a
 80232b8:	d10c      	bne.n	80232d4 <matchCommand+0x232>
                SKIP_PATTERN(1);
 80232ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232bc:	3301      	adds	r3, #1
 80232be:	627b      	str	r3, [r7, #36]	; 0x24
 80232c0:	6a3b      	ldr	r3, [r7, #32]
 80232c2:	3b01      	subs	r3, #1
 80232c4:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 80232c6:	69fb      	ldr	r3, [r7, #28]
 80232c8:	3301      	adds	r3, #1
 80232ca:	61fb      	str	r3, [r7, #28]
 80232cc:	69bb      	ldr	r3, [r7, #24]
 80232ce:	3b01      	subs	r3, #1
 80232d0:	61bb      	str	r3, [r7, #24]
 80232d2:	e0a5      	b.n	8023420 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 80232d4:	6a3b      	ldr	r3, [r7, #32]
 80232d6:	2b01      	cmp	r3, #1
 80232d8:	dd1f      	ble.n	802331a <matchCommand+0x278>
                    && (pattern_ptr[1] == cmd_ptr[0])
 80232da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232dc:	3301      	adds	r3, #1
 80232de:	781a      	ldrb	r2, [r3, #0]
 80232e0:	69fb      	ldr	r3, [r7, #28]
 80232e2:	781b      	ldrb	r3, [r3, #0]
 80232e4:	429a      	cmp	r2, r3
 80232e6:	d118      	bne.n	802331a <matchCommand+0x278>
                    && (pattern_ptr[0] == '[')
 80232e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232ea:	781b      	ldrb	r3, [r3, #0]
 80232ec:	2b5b      	cmp	r3, #91	; 0x5b
 80232ee:	d114      	bne.n	802331a <matchCommand+0x278>
                    && (pattern_ptr[1] == ':')) {
 80232f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232f2:	3301      	adds	r3, #1
 80232f4:	781b      	ldrb	r3, [r3, #0]
 80232f6:	2b3a      	cmp	r3, #58	; 0x3a
 80232f8:	d10f      	bne.n	802331a <matchCommand+0x278>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 80232fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80232fc:	3302      	adds	r3, #2
 80232fe:	627b      	str	r3, [r7, #36]	; 0x24
 8023300:	6a3b      	ldr	r3, [r7, #32]
 8023302:	3b02      	subs	r3, #2
 8023304:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8023306:	69fb      	ldr	r3, [r7, #28]
 8023308:	3301      	adds	r3, #1
 802330a:	61fb      	str	r3, [r7, #28]
 802330c:	69bb      	ldr	r3, [r7, #24]
 802330e:	3b01      	subs	r3, #1
 8023310:	61bb      	str	r3, [r7, #24]
                brackets++;
 8023312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023314:	3301      	adds	r3, #1
 8023316:	633b      	str	r3, [r7, #48]	; 0x30
 8023318:	e082      	b.n	8023420 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 802331a:	6a3b      	ldr	r3, [r7, #32]
 802331c:	2b01      	cmp	r3, #1
 802331e:	dd1f      	ble.n	8023360 <matchCommand+0x2be>
                    && (pattern_ptr[1] == cmd_ptr[0])
 8023320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023322:	3301      	adds	r3, #1
 8023324:	781a      	ldrb	r2, [r3, #0]
 8023326:	69fb      	ldr	r3, [r7, #28]
 8023328:	781b      	ldrb	r3, [r3, #0]
 802332a:	429a      	cmp	r2, r3
 802332c:	d118      	bne.n	8023360 <matchCommand+0x2be>
                    && (pattern_ptr[0] == ']')
 802332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023330:	781b      	ldrb	r3, [r3, #0]
 8023332:	2b5d      	cmp	r3, #93	; 0x5d
 8023334:	d114      	bne.n	8023360 <matchCommand+0x2be>
                    && (pattern_ptr[1] == ':')) {
 8023336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023338:	3301      	adds	r3, #1
 802333a:	781b      	ldrb	r3, [r3, #0]
 802333c:	2b3a      	cmp	r3, #58	; 0x3a
 802333e:	d10f      	bne.n	8023360 <matchCommand+0x2be>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 8023340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023342:	3302      	adds	r3, #2
 8023344:	627b      	str	r3, [r7, #36]	; 0x24
 8023346:	6a3b      	ldr	r3, [r7, #32]
 8023348:	3b02      	subs	r3, #2
 802334a:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 802334c:	69fb      	ldr	r3, [r7, #28]
 802334e:	3301      	adds	r3, #1
 8023350:	61fb      	str	r3, [r7, #28]
 8023352:	69bb      	ldr	r3, [r7, #24]
 8023354:	3b01      	subs	r3, #1
 8023356:	61bb      	str	r3, [r7, #24]
                brackets--;
 8023358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802335a:	3b01      	subs	r3, #1
 802335c:	633b      	str	r3, [r7, #48]	; 0x30
 802335e:	e05f      	b.n	8023420 <matchCommand+0x37e>
            } else if ((pattern_len > 2)
 8023360:	6a3b      	ldr	r3, [r7, #32]
 8023362:	2b02      	cmp	r3, #2
 8023364:	dd21      	ble.n	80233aa <matchCommand+0x308>
                    && (pattern_ptr[2] == cmd_ptr[0])
 8023366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023368:	3302      	adds	r3, #2
 802336a:	781a      	ldrb	r2, [r3, #0]
 802336c:	69fb      	ldr	r3, [r7, #28]
 802336e:	781b      	ldrb	r3, [r3, #0]
 8023370:	429a      	cmp	r2, r3
 8023372:	d11a      	bne.n	80233aa <matchCommand+0x308>
                    && (pattern_ptr[0] == ']')
 8023374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023376:	781b      	ldrb	r3, [r3, #0]
 8023378:	2b5d      	cmp	r3, #93	; 0x5d
 802337a:	d116      	bne.n	80233aa <matchCommand+0x308>
                    && (pattern_ptr[1] == '[')
 802337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802337e:	3301      	adds	r3, #1
 8023380:	781b      	ldrb	r3, [r3, #0]
 8023382:	2b5b      	cmp	r3, #91	; 0x5b
 8023384:	d111      	bne.n	80233aa <matchCommand+0x308>
                    && (pattern_ptr[2] == ':')) {
 8023386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023388:	3302      	adds	r3, #2
 802338a:	781b      	ldrb	r3, [r3, #0]
 802338c:	2b3a      	cmp	r3, #58	; 0x3a
 802338e:	d10c      	bne.n	80233aa <matchCommand+0x308>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 8023390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023392:	3303      	adds	r3, #3
 8023394:	627b      	str	r3, [r7, #36]	; 0x24
 8023396:	6a3b      	ldr	r3, [r7, #32]
 8023398:	3b03      	subs	r3, #3
 802339a:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 802339c:	69fb      	ldr	r3, [r7, #28]
 802339e:	3301      	adds	r3, #1
 80233a0:	61fb      	str	r3, [r7, #28]
 80233a2:	69bb      	ldr	r3, [r7, #24]
 80233a4:	3b01      	subs	r3, #1
 80233a6:	61bb      	str	r3, [r7, #24]
 80233a8:	e03a      	b.n	8023420 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 80233aa:	2300      	movs	r3, #0
 80233ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80233b0:	e03a      	b.n	8023428 <matchCommand+0x386>
            }
        } else {
            SKIP_PATTERN(pattern_sep_pos);
 80233b2:	693b      	ldr	r3, [r7, #16]
 80233b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80233b6:	4413      	add	r3, r2
 80233b8:	627b      	str	r3, [r7, #36]	; 0x24
 80233ba:	6a3a      	ldr	r2, [r7, #32]
 80233bc:	693b      	ldr	r3, [r7, #16]
 80233be:	1ad3      	subs	r3, r2, r3
 80233c0:	623b      	str	r3, [r7, #32]
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 80233c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80233c4:	781b      	ldrb	r3, [r3, #0]
 80233c6:	2b5d      	cmp	r3, #93	; 0x5d
 80233c8:	d10e      	bne.n	80233e8 <matchCommand+0x346>
 80233ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80233cc:	3301      	adds	r3, #1
 80233ce:	781b      	ldrb	r3, [r3, #0]
 80233d0:	2b3a      	cmp	r3, #58	; 0x3a
 80233d2:	d109      	bne.n	80233e8 <matchCommand+0x346>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 80233d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80233d6:	3302      	adds	r3, #2
 80233d8:	627b      	str	r3, [r7, #36]	; 0x24
 80233da:	6a3b      	ldr	r3, [r7, #32]
 80233dc:	3b02      	subs	r3, #2
 80233de:	623b      	str	r3, [r7, #32]
                brackets--;
 80233e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80233e2:	3b01      	subs	r3, #1
 80233e4:	633b      	str	r3, [r7, #48]	; 0x30
 80233e6:	e01b      	b.n	8023420 <matchCommand+0x37e>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 80233e8:	6a3b      	ldr	r3, [r7, #32]
 80233ea:	2b02      	cmp	r3, #2
 80233ec:	dd14      	ble.n	8023418 <matchCommand+0x376>
 80233ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80233f0:	781b      	ldrb	r3, [r3, #0]
 80233f2:	2b5d      	cmp	r3, #93	; 0x5d
 80233f4:	d110      	bne.n	8023418 <matchCommand+0x376>
                    && (pattern_ptr[1] == '[')
 80233f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80233f8:	3301      	adds	r3, #1
 80233fa:	781b      	ldrb	r3, [r3, #0]
 80233fc:	2b5b      	cmp	r3, #91	; 0x5b
 80233fe:	d10b      	bne.n	8023418 <matchCommand+0x376>
                    && (pattern_ptr[2] == ':')) {
 8023400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023402:	3302      	adds	r3, #2
 8023404:	781b      	ldrb	r3, [r3, #0]
 8023406:	2b3a      	cmp	r3, #58	; 0x3a
 8023408:	d106      	bne.n	8023418 <matchCommand+0x376>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 802340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802340c:	3303      	adds	r3, #3
 802340e:	627b      	str	r3, [r7, #36]	; 0x24
 8023410:	6a3b      	ldr	r3, [r7, #32]
 8023412:	3b03      	subs	r3, #3
 8023414:	623b      	str	r3, [r7, #32]
 8023416:	e003      	b.n	8023420 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 8023418:	2300      	movs	r3, #0
 802341a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 802341e:	e003      	b.n	8023428 <matchCommand+0x386>
    while (1) {
 8023420:	e6a2      	b.n	8023168 <matchCommand+0xc6>
                break;
 8023422:	bf00      	nop
 8023424:	e000      	b.n	8023428 <matchCommand+0x386>
                break; /* exist optional keyword, command is complete */
 8023426:	bf00      	nop
            }
        }
    }

    return result;
 8023428:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 802342c:	4618      	mov	r0, r3
 802342e:	3738      	adds	r7, #56	; 0x38
 8023430:	46bd      	mov	sp, r7
 8023432:	bd80      	pop	{r7, pc}

08023434 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 8023434:	b580      	push	{r7, lr}
 8023436:	b084      	sub	sp, #16
 8023438:	af00      	add	r7, sp, #0
 802343a:	6078      	str	r0, [r7, #4]
 802343c:	6039      	str	r1, [r7, #0]
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 802343e:	683b      	ldr	r3, [r7, #0]
 8023440:	2b00      	cmp	r3, #0
 8023442:	d007      	beq.n	8023454 <composeCompoundCommand+0x20>
 8023444:	683b      	ldr	r3, [r7, #0]
 8023446:	685b      	ldr	r3, [r3, #4]
 8023448:	2b00      	cmp	r3, #0
 802344a:	d003      	beq.n	8023454 <composeCompoundCommand+0x20>
 802344c:	683b      	ldr	r3, [r7, #0]
 802344e:	689b      	ldr	r3, [r3, #8]
 8023450:	2b00      	cmp	r3, #0
 8023452:	d101      	bne.n	8023458 <composeCompoundCommand+0x24>
        return FALSE;
 8023454:	2300      	movs	r3, #0
 8023456:	e04d      	b.n	80234f4 <composeCompoundCommand+0xc0>

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 8023458:	687b      	ldr	r3, [r7, #4]
 802345a:	685b      	ldr	r3, [r3, #4]
 802345c:	2b00      	cmp	r3, #0
 802345e:	d003      	beq.n	8023468 <composeCompoundCommand+0x34>
 8023460:	687b      	ldr	r3, [r7, #4]
 8023462:	689b      	ldr	r3, [r3, #8]
 8023464:	2b00      	cmp	r3, #0
 8023466:	d101      	bne.n	802346c <composeCompoundCommand+0x38>
        return TRUE;
 8023468:	2301      	movs	r3, #1
 802346a:	e043      	b.n	80234f4 <composeCompoundCommand+0xc0>

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 802346c:	683b      	ldr	r3, [r7, #0]
 802346e:	685b      	ldr	r3, [r3, #4]
 8023470:	781b      	ldrb	r3, [r3, #0]
 8023472:	2b2a      	cmp	r3, #42	; 0x2a
 8023474:	d004      	beq.n	8023480 <composeCompoundCommand+0x4c>
 8023476:	683b      	ldr	r3, [r7, #0]
 8023478:	685b      	ldr	r3, [r3, #4]
 802347a:	781b      	ldrb	r3, [r3, #0]
 802347c:	2b3a      	cmp	r3, #58	; 0x3a
 802347e:	d101      	bne.n	8023484 <composeCompoundCommand+0x50>
        return TRUE;
 8023480:	2301      	movs	r3, #1
 8023482:	e037      	b.n	80234f4 <composeCompoundCommand+0xc0>

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	685b      	ldr	r3, [r3, #4]
 8023488:	781b      	ldrb	r3, [r3, #0]
 802348a:	2b2a      	cmp	r3, #42	; 0x2a
 802348c:	d101      	bne.n	8023492 <composeCompoundCommand+0x5e>
        return TRUE;
 802348e:	2301      	movs	r3, #1
 8023490:	e030      	b.n	80234f4 <composeCompoundCommand+0xc0>

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
 8023492:	687b      	ldr	r3, [r7, #4]
 8023494:	689b      	ldr	r3, [r3, #8]
 8023496:	60fb      	str	r3, [r7, #12]
 8023498:	e00a      	b.n	80234b0 <composeCompoundCommand+0x7c>
        if (prev->ptr[i - 1] == ':') {
 802349a:	687b      	ldr	r3, [r7, #4]
 802349c:	685a      	ldr	r2, [r3, #4]
 802349e:	68fb      	ldr	r3, [r7, #12]
 80234a0:	3b01      	subs	r3, #1
 80234a2:	4413      	add	r3, r2
 80234a4:	781b      	ldrb	r3, [r3, #0]
 80234a6:	2b3a      	cmp	r3, #58	; 0x3a
 80234a8:	d006      	beq.n	80234b8 <composeCompoundCommand+0x84>
    for (i = prev->len; i > 0; i--) {
 80234aa:	68fb      	ldr	r3, [r7, #12]
 80234ac:	3b01      	subs	r3, #1
 80234ae:	60fb      	str	r3, [r7, #12]
 80234b0:	68fb      	ldr	r3, [r7, #12]
 80234b2:	2b00      	cmp	r3, #0
 80234b4:	d1f1      	bne.n	802349a <composeCompoundCommand+0x66>
 80234b6:	e000      	b.n	80234ba <composeCompoundCommand+0x86>
            break;
 80234b8:	bf00      	nop
        }
    }

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
 80234ba:	68fb      	ldr	r3, [r7, #12]
 80234bc:	2b00      	cmp	r3, #0
 80234be:	d101      	bne.n	80234c4 <composeCompoundCommand+0x90>
        return TRUE;
 80234c0:	2301      	movs	r3, #1
 80234c2:	e017      	b.n	80234f4 <composeCompoundCommand+0xc0>

    current->ptr -= i;
 80234c4:	683b      	ldr	r3, [r7, #0]
 80234c6:	685a      	ldr	r2, [r3, #4]
 80234c8:	68fb      	ldr	r3, [r7, #12]
 80234ca:	425b      	negs	r3, r3
 80234cc:	441a      	add	r2, r3
 80234ce:	683b      	ldr	r3, [r7, #0]
 80234d0:	605a      	str	r2, [r3, #4]
    current->len += i;
 80234d2:	683b      	ldr	r3, [r7, #0]
 80234d4:	689b      	ldr	r3, [r3, #8]
 80234d6:	461a      	mov	r2, r3
 80234d8:	68fb      	ldr	r3, [r7, #12]
 80234da:	4413      	add	r3, r2
 80234dc:	461a      	mov	r2, r3
 80234de:	683b      	ldr	r3, [r7, #0]
 80234e0:	609a      	str	r2, [r3, #8]
    memmove(current->ptr, prev->ptr, i);
 80234e2:	683b      	ldr	r3, [r7, #0]
 80234e4:	6858      	ldr	r0, [r3, #4]
 80234e6:	687b      	ldr	r3, [r7, #4]
 80234e8:	685b      	ldr	r3, [r3, #4]
 80234ea:	68fa      	ldr	r2, [r7, #12]
 80234ec:	4619      	mov	r1, r3
 80234ee:	f000 fa5e 	bl	80239ae <memmove>
    return TRUE;
 80234f2:	2301      	movs	r3, #1
}
 80234f4:	4618      	mov	r0, r3
 80234f6:	3710      	adds	r7, #16
 80234f8:	46bd      	mov	sp, r7
 80234fa:	bd80      	pop	{r7, pc}

080234fc <BSD_strnlen>:
/*-
 * Copyright (c) 2009 David Schultz <das@FreeBSD.org>
 * All rights reserved.
 */
size_t
BSD_strnlen(const char *s, size_t maxlen) {
 80234fc:	b480      	push	{r7}
 80234fe:	b085      	sub	sp, #20
 8023500:	af00      	add	r7, sp, #0
 8023502:	6078      	str	r0, [r7, #4]
 8023504:	6039      	str	r1, [r7, #0]
    size_t len;

    for (len = 0; len < maxlen; len++, s++) {
 8023506:	2300      	movs	r3, #0
 8023508:	60fb      	str	r3, [r7, #12]
 802350a:	e009      	b.n	8023520 <BSD_strnlen+0x24>
        if (!*s)
 802350c:	687b      	ldr	r3, [r7, #4]
 802350e:	781b      	ldrb	r3, [r3, #0]
 8023510:	2b00      	cmp	r3, #0
 8023512:	d00a      	beq.n	802352a <BSD_strnlen+0x2e>
    for (len = 0; len < maxlen; len++, s++) {
 8023514:	68fb      	ldr	r3, [r7, #12]
 8023516:	3301      	adds	r3, #1
 8023518:	60fb      	str	r3, [r7, #12]
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	3301      	adds	r3, #1
 802351e:	607b      	str	r3, [r7, #4]
 8023520:	68fa      	ldr	r2, [r7, #12]
 8023522:	683b      	ldr	r3, [r7, #0]
 8023524:	429a      	cmp	r2, r3
 8023526:	d3f1      	bcc.n	802350c <BSD_strnlen+0x10>
 8023528:	e000      	b.n	802352c <BSD_strnlen+0x30>
            break;
 802352a:	bf00      	nop
    }
    return (len);
 802352c:	68fb      	ldr	r3, [r7, #12]
}
 802352e:	4618      	mov	r0, r3
 8023530:	3714      	adds	r7, #20
 8023532:	46bd      	mov	sp, r7
 8023534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023538:	4770      	bx	lr
	...

0802353c <SCPI_GetNativeFormat>:

/**
 * Get native CPU endiannes
 * @return
 */
scpi_array_format_t SCPI_GetNativeFormat(void) {
 802353c:	b480      	push	{r7}
 802353e:	b083      	sub	sp, #12
 8023540:	af00      	add	r7, sp, #0

    union {
        uint32_t i;
        char c[4];
    } bint = {0x01020304};
 8023542:	4b07      	ldr	r3, [pc, #28]	; (8023560 <SCPI_GetNativeFormat+0x24>)
 8023544:	607b      	str	r3, [r7, #4]

    return bint.c[0] == 1 ? SCPI_FORMAT_BIGENDIAN : SCPI_FORMAT_LITTLEENDIAN;
 8023546:	793b      	ldrb	r3, [r7, #4]
 8023548:	2b01      	cmp	r3, #1
 802354a:	d101      	bne.n	8023550 <SCPI_GetNativeFormat+0x14>
 802354c:	2301      	movs	r3, #1
 802354e:	e000      	b.n	8023552 <SCPI_GetNativeFormat+0x16>
 8023550:	2302      	movs	r3, #2
}
 8023552:	4618      	mov	r0, r3
 8023554:	370c      	adds	r7, #12
 8023556:	46bd      	mov	sp, r7
 8023558:	f85d 7b04 	ldr.w	r7, [sp], #4
 802355c:	4770      	bx	lr
 802355e:	bf00      	nop
 8023560:	01020304 	.word	0x01020304

08023564 <SCPI_Swap16>:
/**
 * Swap 16bit number
 * @param val
 * @return
 */
uint16_t SCPI_Swap16(uint16_t val) {
 8023564:	b480      	push	{r7}
 8023566:	b083      	sub	sp, #12
 8023568:	af00      	add	r7, sp, #0
 802356a:	4603      	mov	r3, r0
 802356c:	80fb      	strh	r3, [r7, #6]
    return ((val & 0x00FF) << 8) |
 802356e:	88fb      	ldrh	r3, [r7, #6]
 8023570:	021b      	lsls	r3, r3, #8
 8023572:	b21a      	sxth	r2, r3
            ((val & 0xFF00) >> 8);
 8023574:	88fb      	ldrh	r3, [r7, #6]
 8023576:	0a1b      	lsrs	r3, r3, #8
 8023578:	b29b      	uxth	r3, r3
 802357a:	b21b      	sxth	r3, r3
    return ((val & 0x00FF) << 8) |
 802357c:	4313      	orrs	r3, r2
 802357e:	b21b      	sxth	r3, r3
 8023580:	b29b      	uxth	r3, r3
}
 8023582:	4618      	mov	r0, r3
 8023584:	370c      	adds	r7, #12
 8023586:	46bd      	mov	sp, r7
 8023588:	f85d 7b04 	ldr.w	r7, [sp], #4
 802358c:	4770      	bx	lr

0802358e <SCPI_Swap32>:
/**
 * Swap 32bit number
 * @param val
 * @return
 */
uint32_t SCPI_Swap32(uint32_t val) {
 802358e:	b480      	push	{r7}
 8023590:	b083      	sub	sp, #12
 8023592:	af00      	add	r7, sp, #0
 8023594:	6078      	str	r0, [r7, #4]
    return ((val & 0x000000FFul) << 24) |
 8023596:	687b      	ldr	r3, [r7, #4]
 8023598:	061a      	lsls	r2, r3, #24
            ((val & 0x0000FF00ul) << 8) |
 802359a:	687b      	ldr	r3, [r7, #4]
 802359c:	021b      	lsls	r3, r3, #8
 802359e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    return ((val & 0x000000FFul) << 24) |
 80235a2:	431a      	orrs	r2, r3
            ((val & 0x00FF0000ul) >> 8) |
 80235a4:	687b      	ldr	r3, [r7, #4]
 80235a6:	0a1b      	lsrs	r3, r3, #8
 80235a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            ((val & 0x0000FF00ul) << 8) |
 80235ac:	431a      	orrs	r2, r3
            ((val & 0xFF000000ul) >> 24);
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	0e1b      	lsrs	r3, r3, #24
            ((val & 0x00FF0000ul) >> 8) |
 80235b2:	4313      	orrs	r3, r2
}
 80235b4:	4618      	mov	r0, r3
 80235b6:	370c      	adds	r7, #12
 80235b8:	46bd      	mov	sp, r7
 80235ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235be:	4770      	bx	lr

080235c0 <SCPI_Swap64>:
/**
 * Swap 64bit number
 * @param val
 * @return
 */
uint64_t SCPI_Swap64(uint64_t val) {
 80235c0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80235c4:	b099      	sub	sp, #100	; 0x64
 80235c6:	af00      	add	r7, sp, #0
 80235c8:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
    return ((val & 0x00000000000000FFull) << 56) |
 80235cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80235d0:	f04f 0800 	mov.w	r8, #0
 80235d4:	f04f 0900 	mov.w	r9, #0
 80235d8:	ea4f 6902 	mov.w	r9, r2, lsl #24
 80235dc:	f04f 0800 	mov.w	r8, #0
            ((val & 0x000000000000FF00ull) << 40) |
 80235e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80235e4:	f04f 0000 	mov.w	r0, #0
 80235e8:	f04f 0100 	mov.w	r1, #0
 80235ec:	0211      	lsls	r1, r2, #8
 80235ee:	2000      	movs	r0, #0
 80235f0:	2400      	movs	r4, #0
 80235f2:	f401 057f 	and.w	r5, r1, #16711680	; 0xff0000
    return ((val & 0x00000000000000FFull) << 56) |
 80235f6:	ea48 0304 	orr.w	r3, r8, r4
 80235fa:	653b      	str	r3, [r7, #80]	; 0x50
 80235fc:	ea49 0305 	orr.w	r3, r9, r5
 8023600:	657b      	str	r3, [r7, #84]	; 0x54
            ((val & 0x0000000000FF0000ull) << 24) |
 8023602:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8023606:	f04f 0000 	mov.w	r0, #0
 802360a:	f04f 0100 	mov.w	r1, #0
 802360e:	0619      	lsls	r1, r3, #24
 8023610:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 8023614:	0610      	lsls	r0, r2, #24
 8023616:	f04f 0a00 	mov.w	sl, #0
 802361a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
            ((val & 0x000000000000FF00ull) << 40) |
 802361e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8023622:	460b      	mov	r3, r1
 8023624:	ea43 030a 	orr.w	r3, r3, sl
 8023628:	64bb      	str	r3, [r7, #72]	; 0x48
 802362a:	4613      	mov	r3, r2
 802362c:	ea43 030b 	orr.w	r3, r3, fp
 8023630:	64fb      	str	r3, [r7, #76]	; 0x4c
            ((val & 0x00000000FF000000ull) << 8) |
 8023632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8023636:	f04f 0000 	mov.w	r0, #0
 802363a:	f04f 0100 	mov.w	r1, #0
 802363e:	0219      	lsls	r1, r3, #8
 8023640:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8023644:	0210      	lsls	r0, r2, #8
 8023646:	2300      	movs	r3, #0
 8023648:	643b      	str	r3, [r7, #64]	; 0x40
 802364a:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 802364e:	647b      	str	r3, [r7, #68]	; 0x44
            ((val & 0x0000000000FF0000ull) << 24) |
 8023650:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8023654:	4623      	mov	r3, r4
 8023656:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 802365a:	4602      	mov	r2, r0
 802365c:	4313      	orrs	r3, r2
 802365e:	63bb      	str	r3, [r7, #56]	; 0x38
 8023660:	462b      	mov	r3, r5
 8023662:	460a      	mov	r2, r1
 8023664:	4313      	orrs	r3, r2
 8023666:	63fb      	str	r3, [r7, #60]	; 0x3c
            ((val & 0x000000FF00000000ull) >> 8) |
 8023668:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802366c:	f04f 0000 	mov.w	r0, #0
 8023670:	f04f 0100 	mov.w	r1, #0
 8023674:	0a10      	lsrs	r0, r2, #8
 8023676:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 802367a:	0a19      	lsrs	r1, r3, #8
 802367c:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8023680:	633b      	str	r3, [r7, #48]	; 0x30
 8023682:	2300      	movs	r3, #0
 8023684:	637b      	str	r3, [r7, #52]	; 0x34
            ((val & 0x00000000FF000000ull) << 8) |
 8023686:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 802368a:	4623      	mov	r3, r4
 802368c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8023690:	4602      	mov	r2, r0
 8023692:	4313      	orrs	r3, r2
 8023694:	62bb      	str	r3, [r7, #40]	; 0x28
 8023696:	462b      	mov	r3, r5
 8023698:	460a      	mov	r2, r1
 802369a:	4313      	orrs	r3, r2
 802369c:	62fb      	str	r3, [r7, #44]	; 0x2c
            ((val & 0x0000FF0000000000ull) >> 24) |
 802369e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80236a2:	f04f 0000 	mov.w	r0, #0
 80236a6:	f04f 0100 	mov.w	r1, #0
 80236aa:	0e10      	lsrs	r0, r2, #24
 80236ac:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80236b0:	0e19      	lsrs	r1, r3, #24
 80236b2:	f400 037f 	and.w	r3, r0, #16711680	; 0xff0000
 80236b6:	623b      	str	r3, [r7, #32]
 80236b8:	2300      	movs	r3, #0
 80236ba:	627b      	str	r3, [r7, #36]	; 0x24
            ((val & 0x000000FF00000000ull) >> 8) |
 80236bc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80236c0:	4623      	mov	r3, r4
 80236c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80236c6:	4602      	mov	r2, r0
 80236c8:	4313      	orrs	r3, r2
 80236ca:	61bb      	str	r3, [r7, #24]
 80236cc:	462b      	mov	r3, r5
 80236ce:	460a      	mov	r2, r1
 80236d0:	4313      	orrs	r3, r2
 80236d2:	61fb      	str	r3, [r7, #28]
            ((val & 0x00FF000000000000ull) >> 40) |
 80236d4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80236d8:	f04f 0200 	mov.w	r2, #0
 80236dc:	f04f 0300 	mov.w	r3, #0
 80236e0:	0a0a      	lsrs	r2, r1, #8
 80236e2:	2300      	movs	r3, #0
 80236e4:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 80236e8:	613b      	str	r3, [r7, #16]
 80236ea:	2300      	movs	r3, #0
 80236ec:	617b      	str	r3, [r7, #20]
            ((val & 0x0000FF0000000000ull) >> 24) |
 80236ee:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80236f2:	4623      	mov	r3, r4
 80236f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80236f8:	4602      	mov	r2, r0
 80236fa:	4313      	orrs	r3, r2
 80236fc:	60bb      	str	r3, [r7, #8]
 80236fe:	462b      	mov	r3, r5
 8023700:	460a      	mov	r2, r1
 8023702:	4313      	orrs	r3, r2
 8023704:	60fb      	str	r3, [r7, #12]
            ((val & 0xFF00000000000000ull) >> 56);
 8023706:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 802370a:	f04f 0200 	mov.w	r2, #0
 802370e:	f04f 0300 	mov.w	r3, #0
 8023712:	0e0a      	lsrs	r2, r1, #24
 8023714:	2300      	movs	r3, #0
            ((val & 0x00FF000000000000ull) >> 40) |
 8023716:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 802371a:	4621      	mov	r1, r4
 802371c:	4311      	orrs	r1, r2
 802371e:	6039      	str	r1, [r7, #0]
 8023720:	4629      	mov	r1, r5
 8023722:	4319      	orrs	r1, r3
 8023724:	6079      	str	r1, [r7, #4]
 8023726:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 802372a:	4610      	mov	r0, r2
 802372c:	4619      	mov	r1, r3
 802372e:	3764      	adds	r7, #100	; 0x64
 8023730:	46bd      	mov	sp, r7
 8023732:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8023736:	4770      	bx	lr

08023738 <std>:
 8023738:	2300      	movs	r3, #0
 802373a:	b510      	push	{r4, lr}
 802373c:	4604      	mov	r4, r0
 802373e:	e9c0 3300 	strd	r3, r3, [r0]
 8023742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023746:	6083      	str	r3, [r0, #8]
 8023748:	8181      	strh	r1, [r0, #12]
 802374a:	6643      	str	r3, [r0, #100]	; 0x64
 802374c:	81c2      	strh	r2, [r0, #14]
 802374e:	6183      	str	r3, [r0, #24]
 8023750:	4619      	mov	r1, r3
 8023752:	2208      	movs	r2, #8
 8023754:	305c      	adds	r0, #92	; 0x5c
 8023756:	f000 f944 	bl	80239e2 <memset>
 802375a:	4b05      	ldr	r3, [pc, #20]	; (8023770 <std+0x38>)
 802375c:	6263      	str	r3, [r4, #36]	; 0x24
 802375e:	4b05      	ldr	r3, [pc, #20]	; (8023774 <std+0x3c>)
 8023760:	62a3      	str	r3, [r4, #40]	; 0x28
 8023762:	4b05      	ldr	r3, [pc, #20]	; (8023778 <std+0x40>)
 8023764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023766:	4b05      	ldr	r3, [pc, #20]	; (802377c <std+0x44>)
 8023768:	6224      	str	r4, [r4, #32]
 802376a:	6323      	str	r3, [r4, #48]	; 0x30
 802376c:	bd10      	pop	{r4, pc}
 802376e:	bf00      	nop
 8023770:	08024abd 	.word	0x08024abd
 8023774:	08024ae3 	.word	0x08024ae3
 8023778:	08024b1b 	.word	0x08024b1b
 802377c:	08024b3f 	.word	0x08024b3f

08023780 <_cleanup_r>:
 8023780:	4901      	ldr	r1, [pc, #4]	; (8023788 <_cleanup_r+0x8>)
 8023782:	f000 b8af 	b.w	80238e4 <_fwalk_reent>
 8023786:	bf00      	nop
 8023788:	08026b75 	.word	0x08026b75

0802378c <__sfmoreglue>:
 802378c:	b570      	push	{r4, r5, r6, lr}
 802378e:	2268      	movs	r2, #104	; 0x68
 8023790:	1e4d      	subs	r5, r1, #1
 8023792:	4355      	muls	r5, r2
 8023794:	460e      	mov	r6, r1
 8023796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802379a:	f000 f94b 	bl	8023a34 <_malloc_r>
 802379e:	4604      	mov	r4, r0
 80237a0:	b140      	cbz	r0, 80237b4 <__sfmoreglue+0x28>
 80237a2:	2100      	movs	r1, #0
 80237a4:	e9c0 1600 	strd	r1, r6, [r0]
 80237a8:	300c      	adds	r0, #12
 80237aa:	60a0      	str	r0, [r4, #8]
 80237ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80237b0:	f000 f917 	bl	80239e2 <memset>
 80237b4:	4620      	mov	r0, r4
 80237b6:	bd70      	pop	{r4, r5, r6, pc}

080237b8 <__sfp_lock_acquire>:
 80237b8:	4801      	ldr	r0, [pc, #4]	; (80237c0 <__sfp_lock_acquire+0x8>)
 80237ba:	f000 b8d8 	b.w	802396e <__retarget_lock_acquire_recursive>
 80237be:	bf00      	nop
 80237c0:	2001ae39 	.word	0x2001ae39

080237c4 <__sfp_lock_release>:
 80237c4:	4801      	ldr	r0, [pc, #4]	; (80237cc <__sfp_lock_release+0x8>)
 80237c6:	f000 b8d3 	b.w	8023970 <__retarget_lock_release_recursive>
 80237ca:	bf00      	nop
 80237cc:	2001ae39 	.word	0x2001ae39

080237d0 <__sinit_lock_acquire>:
 80237d0:	4801      	ldr	r0, [pc, #4]	; (80237d8 <__sinit_lock_acquire+0x8>)
 80237d2:	f000 b8cc 	b.w	802396e <__retarget_lock_acquire_recursive>
 80237d6:	bf00      	nop
 80237d8:	2001ae3a 	.word	0x2001ae3a

080237dc <__sinit_lock_release>:
 80237dc:	4801      	ldr	r0, [pc, #4]	; (80237e4 <__sinit_lock_release+0x8>)
 80237de:	f000 b8c7 	b.w	8023970 <__retarget_lock_release_recursive>
 80237e2:	bf00      	nop
 80237e4:	2001ae3a 	.word	0x2001ae3a

080237e8 <__sinit>:
 80237e8:	b510      	push	{r4, lr}
 80237ea:	4604      	mov	r4, r0
 80237ec:	f7ff fff0 	bl	80237d0 <__sinit_lock_acquire>
 80237f0:	69a3      	ldr	r3, [r4, #24]
 80237f2:	b11b      	cbz	r3, 80237fc <__sinit+0x14>
 80237f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237f8:	f7ff bff0 	b.w	80237dc <__sinit_lock_release>
 80237fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023800:	6523      	str	r3, [r4, #80]	; 0x50
 8023802:	4b13      	ldr	r3, [pc, #76]	; (8023850 <__sinit+0x68>)
 8023804:	4a13      	ldr	r2, [pc, #76]	; (8023854 <__sinit+0x6c>)
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	62a2      	str	r2, [r4, #40]	; 0x28
 802380a:	42a3      	cmp	r3, r4
 802380c:	bf04      	itt	eq
 802380e:	2301      	moveq	r3, #1
 8023810:	61a3      	streq	r3, [r4, #24]
 8023812:	4620      	mov	r0, r4
 8023814:	f000 f820 	bl	8023858 <__sfp>
 8023818:	6060      	str	r0, [r4, #4]
 802381a:	4620      	mov	r0, r4
 802381c:	f000 f81c 	bl	8023858 <__sfp>
 8023820:	60a0      	str	r0, [r4, #8]
 8023822:	4620      	mov	r0, r4
 8023824:	f000 f818 	bl	8023858 <__sfp>
 8023828:	2200      	movs	r2, #0
 802382a:	60e0      	str	r0, [r4, #12]
 802382c:	2104      	movs	r1, #4
 802382e:	6860      	ldr	r0, [r4, #4]
 8023830:	f7ff ff82 	bl	8023738 <std>
 8023834:	68a0      	ldr	r0, [r4, #8]
 8023836:	2201      	movs	r2, #1
 8023838:	2109      	movs	r1, #9
 802383a:	f7ff ff7d 	bl	8023738 <std>
 802383e:	68e0      	ldr	r0, [r4, #12]
 8023840:	2202      	movs	r2, #2
 8023842:	2112      	movs	r1, #18
 8023844:	f7ff ff78 	bl	8023738 <std>
 8023848:	2301      	movs	r3, #1
 802384a:	61a3      	str	r3, [r4, #24]
 802384c:	e7d2      	b.n	80237f4 <__sinit+0xc>
 802384e:	bf00      	nop
 8023850:	0802d8dc 	.word	0x0802d8dc
 8023854:	08023781 	.word	0x08023781

08023858 <__sfp>:
 8023858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802385a:	4607      	mov	r7, r0
 802385c:	f7ff ffac 	bl	80237b8 <__sfp_lock_acquire>
 8023860:	4b1e      	ldr	r3, [pc, #120]	; (80238dc <__sfp+0x84>)
 8023862:	681e      	ldr	r6, [r3, #0]
 8023864:	69b3      	ldr	r3, [r6, #24]
 8023866:	b913      	cbnz	r3, 802386e <__sfp+0x16>
 8023868:	4630      	mov	r0, r6
 802386a:	f7ff ffbd 	bl	80237e8 <__sinit>
 802386e:	3648      	adds	r6, #72	; 0x48
 8023870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023874:	3b01      	subs	r3, #1
 8023876:	d503      	bpl.n	8023880 <__sfp+0x28>
 8023878:	6833      	ldr	r3, [r6, #0]
 802387a:	b30b      	cbz	r3, 80238c0 <__sfp+0x68>
 802387c:	6836      	ldr	r6, [r6, #0]
 802387e:	e7f7      	b.n	8023870 <__sfp+0x18>
 8023880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023884:	b9d5      	cbnz	r5, 80238bc <__sfp+0x64>
 8023886:	4b16      	ldr	r3, [pc, #88]	; (80238e0 <__sfp+0x88>)
 8023888:	60e3      	str	r3, [r4, #12]
 802388a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802388e:	6665      	str	r5, [r4, #100]	; 0x64
 8023890:	f000 f86c 	bl	802396c <__retarget_lock_init_recursive>
 8023894:	f7ff ff96 	bl	80237c4 <__sfp_lock_release>
 8023898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802389c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80238a0:	6025      	str	r5, [r4, #0]
 80238a2:	61a5      	str	r5, [r4, #24]
 80238a4:	2208      	movs	r2, #8
 80238a6:	4629      	mov	r1, r5
 80238a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80238ac:	f000 f899 	bl	80239e2 <memset>
 80238b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80238b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80238b8:	4620      	mov	r0, r4
 80238ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80238bc:	3468      	adds	r4, #104	; 0x68
 80238be:	e7d9      	b.n	8023874 <__sfp+0x1c>
 80238c0:	2104      	movs	r1, #4
 80238c2:	4638      	mov	r0, r7
 80238c4:	f7ff ff62 	bl	802378c <__sfmoreglue>
 80238c8:	4604      	mov	r4, r0
 80238ca:	6030      	str	r0, [r6, #0]
 80238cc:	2800      	cmp	r0, #0
 80238ce:	d1d5      	bne.n	802387c <__sfp+0x24>
 80238d0:	f7ff ff78 	bl	80237c4 <__sfp_lock_release>
 80238d4:	230c      	movs	r3, #12
 80238d6:	603b      	str	r3, [r7, #0]
 80238d8:	e7ee      	b.n	80238b8 <__sfp+0x60>
 80238da:	bf00      	nop
 80238dc:	0802d8dc 	.word	0x0802d8dc
 80238e0:	ffff0001 	.word	0xffff0001

080238e4 <_fwalk_reent>:
 80238e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80238e8:	4606      	mov	r6, r0
 80238ea:	4688      	mov	r8, r1
 80238ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80238f0:	2700      	movs	r7, #0
 80238f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80238f6:	f1b9 0901 	subs.w	r9, r9, #1
 80238fa:	d505      	bpl.n	8023908 <_fwalk_reent+0x24>
 80238fc:	6824      	ldr	r4, [r4, #0]
 80238fe:	2c00      	cmp	r4, #0
 8023900:	d1f7      	bne.n	80238f2 <_fwalk_reent+0xe>
 8023902:	4638      	mov	r0, r7
 8023904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023908:	89ab      	ldrh	r3, [r5, #12]
 802390a:	2b01      	cmp	r3, #1
 802390c:	d907      	bls.n	802391e <_fwalk_reent+0x3a>
 802390e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023912:	3301      	adds	r3, #1
 8023914:	d003      	beq.n	802391e <_fwalk_reent+0x3a>
 8023916:	4629      	mov	r1, r5
 8023918:	4630      	mov	r0, r6
 802391a:	47c0      	blx	r8
 802391c:	4307      	orrs	r7, r0
 802391e:	3568      	adds	r5, #104	; 0x68
 8023920:	e7e9      	b.n	80238f6 <_fwalk_reent+0x12>
	...

08023924 <__libc_init_array>:
 8023924:	b570      	push	{r4, r5, r6, lr}
 8023926:	4d0d      	ldr	r5, [pc, #52]	; (802395c <__libc_init_array+0x38>)
 8023928:	4c0d      	ldr	r4, [pc, #52]	; (8023960 <__libc_init_array+0x3c>)
 802392a:	1b64      	subs	r4, r4, r5
 802392c:	10a4      	asrs	r4, r4, #2
 802392e:	2600      	movs	r6, #0
 8023930:	42a6      	cmp	r6, r4
 8023932:	d109      	bne.n	8023948 <__libc_init_array+0x24>
 8023934:	4d0b      	ldr	r5, [pc, #44]	; (8023964 <__libc_init_array+0x40>)
 8023936:	4c0c      	ldr	r4, [pc, #48]	; (8023968 <__libc_init_array+0x44>)
 8023938:	f005 fa78 	bl	8028e2c <_init>
 802393c:	1b64      	subs	r4, r4, r5
 802393e:	10a4      	asrs	r4, r4, #2
 8023940:	2600      	movs	r6, #0
 8023942:	42a6      	cmp	r6, r4
 8023944:	d105      	bne.n	8023952 <__libc_init_array+0x2e>
 8023946:	bd70      	pop	{r4, r5, r6, pc}
 8023948:	f855 3b04 	ldr.w	r3, [r5], #4
 802394c:	4798      	blx	r3
 802394e:	3601      	adds	r6, #1
 8023950:	e7ee      	b.n	8023930 <__libc_init_array+0xc>
 8023952:	f855 3b04 	ldr.w	r3, [r5], #4
 8023956:	4798      	blx	r3
 8023958:	3601      	adds	r6, #1
 802395a:	e7f2      	b.n	8023942 <__libc_init_array+0x1e>
 802395c:	0802dca0 	.word	0x0802dca0
 8023960:	0802dca0 	.word	0x0802dca0
 8023964:	0802dca0 	.word	0x0802dca0
 8023968:	0802dca4 	.word	0x0802dca4

0802396c <__retarget_lock_init_recursive>:
 802396c:	4770      	bx	lr

0802396e <__retarget_lock_acquire_recursive>:
 802396e:	4770      	bx	lr

08023970 <__retarget_lock_release_recursive>:
 8023970:	4770      	bx	lr

08023972 <memcmp>:
 8023972:	b510      	push	{r4, lr}
 8023974:	3901      	subs	r1, #1
 8023976:	4402      	add	r2, r0
 8023978:	4290      	cmp	r0, r2
 802397a:	d101      	bne.n	8023980 <memcmp+0xe>
 802397c:	2000      	movs	r0, #0
 802397e:	e005      	b.n	802398c <memcmp+0x1a>
 8023980:	7803      	ldrb	r3, [r0, #0]
 8023982:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023986:	42a3      	cmp	r3, r4
 8023988:	d001      	beq.n	802398e <memcmp+0x1c>
 802398a:	1b18      	subs	r0, r3, r4
 802398c:	bd10      	pop	{r4, pc}
 802398e:	3001      	adds	r0, #1
 8023990:	e7f2      	b.n	8023978 <memcmp+0x6>

08023992 <memcpy>:
 8023992:	440a      	add	r2, r1
 8023994:	4291      	cmp	r1, r2
 8023996:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802399a:	d100      	bne.n	802399e <memcpy+0xc>
 802399c:	4770      	bx	lr
 802399e:	b510      	push	{r4, lr}
 80239a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80239a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80239a8:	4291      	cmp	r1, r2
 80239aa:	d1f9      	bne.n	80239a0 <memcpy+0xe>
 80239ac:	bd10      	pop	{r4, pc}

080239ae <memmove>:
 80239ae:	4288      	cmp	r0, r1
 80239b0:	b510      	push	{r4, lr}
 80239b2:	eb01 0402 	add.w	r4, r1, r2
 80239b6:	d902      	bls.n	80239be <memmove+0x10>
 80239b8:	4284      	cmp	r4, r0
 80239ba:	4623      	mov	r3, r4
 80239bc:	d807      	bhi.n	80239ce <memmove+0x20>
 80239be:	1e43      	subs	r3, r0, #1
 80239c0:	42a1      	cmp	r1, r4
 80239c2:	d008      	beq.n	80239d6 <memmove+0x28>
 80239c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80239c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80239cc:	e7f8      	b.n	80239c0 <memmove+0x12>
 80239ce:	4402      	add	r2, r0
 80239d0:	4601      	mov	r1, r0
 80239d2:	428a      	cmp	r2, r1
 80239d4:	d100      	bne.n	80239d8 <memmove+0x2a>
 80239d6:	bd10      	pop	{r4, pc}
 80239d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80239dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80239e0:	e7f7      	b.n	80239d2 <memmove+0x24>

080239e2 <memset>:
 80239e2:	4402      	add	r2, r0
 80239e4:	4603      	mov	r3, r0
 80239e6:	4293      	cmp	r3, r2
 80239e8:	d100      	bne.n	80239ec <memset+0xa>
 80239ea:	4770      	bx	lr
 80239ec:	f803 1b01 	strb.w	r1, [r3], #1
 80239f0:	e7f9      	b.n	80239e6 <memset+0x4>
	...

080239f4 <sbrk_aligned>:
 80239f4:	b570      	push	{r4, r5, r6, lr}
 80239f6:	4e0e      	ldr	r6, [pc, #56]	; (8023a30 <sbrk_aligned+0x3c>)
 80239f8:	460c      	mov	r4, r1
 80239fa:	6831      	ldr	r1, [r6, #0]
 80239fc:	4605      	mov	r5, r0
 80239fe:	b911      	cbnz	r1, 8023a06 <sbrk_aligned+0x12>
 8023a00:	f000 ffc6 	bl	8024990 <_sbrk_r>
 8023a04:	6030      	str	r0, [r6, #0]
 8023a06:	4621      	mov	r1, r4
 8023a08:	4628      	mov	r0, r5
 8023a0a:	f000 ffc1 	bl	8024990 <_sbrk_r>
 8023a0e:	1c43      	adds	r3, r0, #1
 8023a10:	d00a      	beq.n	8023a28 <sbrk_aligned+0x34>
 8023a12:	1cc4      	adds	r4, r0, #3
 8023a14:	f024 0403 	bic.w	r4, r4, #3
 8023a18:	42a0      	cmp	r0, r4
 8023a1a:	d007      	beq.n	8023a2c <sbrk_aligned+0x38>
 8023a1c:	1a21      	subs	r1, r4, r0
 8023a1e:	4628      	mov	r0, r5
 8023a20:	f000 ffb6 	bl	8024990 <_sbrk_r>
 8023a24:	3001      	adds	r0, #1
 8023a26:	d101      	bne.n	8023a2c <sbrk_aligned+0x38>
 8023a28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8023a2c:	4620      	mov	r0, r4
 8023a2e:	bd70      	pop	{r4, r5, r6, pc}
 8023a30:	2001ae40 	.word	0x2001ae40

08023a34 <_malloc_r>:
 8023a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a38:	1ccd      	adds	r5, r1, #3
 8023a3a:	f025 0503 	bic.w	r5, r5, #3
 8023a3e:	3508      	adds	r5, #8
 8023a40:	2d0c      	cmp	r5, #12
 8023a42:	bf38      	it	cc
 8023a44:	250c      	movcc	r5, #12
 8023a46:	2d00      	cmp	r5, #0
 8023a48:	4607      	mov	r7, r0
 8023a4a:	db01      	blt.n	8023a50 <_malloc_r+0x1c>
 8023a4c:	42a9      	cmp	r1, r5
 8023a4e:	d905      	bls.n	8023a5c <_malloc_r+0x28>
 8023a50:	230c      	movs	r3, #12
 8023a52:	603b      	str	r3, [r7, #0]
 8023a54:	2600      	movs	r6, #0
 8023a56:	4630      	mov	r0, r6
 8023a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a5c:	4e2e      	ldr	r6, [pc, #184]	; (8023b18 <_malloc_r+0xe4>)
 8023a5e:	f003 fc77 	bl	8027350 <__malloc_lock>
 8023a62:	6833      	ldr	r3, [r6, #0]
 8023a64:	461c      	mov	r4, r3
 8023a66:	bb34      	cbnz	r4, 8023ab6 <_malloc_r+0x82>
 8023a68:	4629      	mov	r1, r5
 8023a6a:	4638      	mov	r0, r7
 8023a6c:	f7ff ffc2 	bl	80239f4 <sbrk_aligned>
 8023a70:	1c43      	adds	r3, r0, #1
 8023a72:	4604      	mov	r4, r0
 8023a74:	d14d      	bne.n	8023b12 <_malloc_r+0xde>
 8023a76:	6834      	ldr	r4, [r6, #0]
 8023a78:	4626      	mov	r6, r4
 8023a7a:	2e00      	cmp	r6, #0
 8023a7c:	d140      	bne.n	8023b00 <_malloc_r+0xcc>
 8023a7e:	6823      	ldr	r3, [r4, #0]
 8023a80:	4631      	mov	r1, r6
 8023a82:	4638      	mov	r0, r7
 8023a84:	eb04 0803 	add.w	r8, r4, r3
 8023a88:	f000 ff82 	bl	8024990 <_sbrk_r>
 8023a8c:	4580      	cmp	r8, r0
 8023a8e:	d13a      	bne.n	8023b06 <_malloc_r+0xd2>
 8023a90:	6821      	ldr	r1, [r4, #0]
 8023a92:	3503      	adds	r5, #3
 8023a94:	1a6d      	subs	r5, r5, r1
 8023a96:	f025 0503 	bic.w	r5, r5, #3
 8023a9a:	3508      	adds	r5, #8
 8023a9c:	2d0c      	cmp	r5, #12
 8023a9e:	bf38      	it	cc
 8023aa0:	250c      	movcc	r5, #12
 8023aa2:	4629      	mov	r1, r5
 8023aa4:	4638      	mov	r0, r7
 8023aa6:	f7ff ffa5 	bl	80239f4 <sbrk_aligned>
 8023aaa:	3001      	adds	r0, #1
 8023aac:	d02b      	beq.n	8023b06 <_malloc_r+0xd2>
 8023aae:	6823      	ldr	r3, [r4, #0]
 8023ab0:	442b      	add	r3, r5
 8023ab2:	6023      	str	r3, [r4, #0]
 8023ab4:	e00e      	b.n	8023ad4 <_malloc_r+0xa0>
 8023ab6:	6822      	ldr	r2, [r4, #0]
 8023ab8:	1b52      	subs	r2, r2, r5
 8023aba:	d41e      	bmi.n	8023afa <_malloc_r+0xc6>
 8023abc:	2a0b      	cmp	r2, #11
 8023abe:	d916      	bls.n	8023aee <_malloc_r+0xba>
 8023ac0:	1961      	adds	r1, r4, r5
 8023ac2:	42a3      	cmp	r3, r4
 8023ac4:	6025      	str	r5, [r4, #0]
 8023ac6:	bf18      	it	ne
 8023ac8:	6059      	strne	r1, [r3, #4]
 8023aca:	6863      	ldr	r3, [r4, #4]
 8023acc:	bf08      	it	eq
 8023ace:	6031      	streq	r1, [r6, #0]
 8023ad0:	5162      	str	r2, [r4, r5]
 8023ad2:	604b      	str	r3, [r1, #4]
 8023ad4:	4638      	mov	r0, r7
 8023ad6:	f104 060b 	add.w	r6, r4, #11
 8023ada:	f003 fc3f 	bl	802735c <__malloc_unlock>
 8023ade:	f026 0607 	bic.w	r6, r6, #7
 8023ae2:	1d23      	adds	r3, r4, #4
 8023ae4:	1af2      	subs	r2, r6, r3
 8023ae6:	d0b6      	beq.n	8023a56 <_malloc_r+0x22>
 8023ae8:	1b9b      	subs	r3, r3, r6
 8023aea:	50a3      	str	r3, [r4, r2]
 8023aec:	e7b3      	b.n	8023a56 <_malloc_r+0x22>
 8023aee:	6862      	ldr	r2, [r4, #4]
 8023af0:	42a3      	cmp	r3, r4
 8023af2:	bf0c      	ite	eq
 8023af4:	6032      	streq	r2, [r6, #0]
 8023af6:	605a      	strne	r2, [r3, #4]
 8023af8:	e7ec      	b.n	8023ad4 <_malloc_r+0xa0>
 8023afa:	4623      	mov	r3, r4
 8023afc:	6864      	ldr	r4, [r4, #4]
 8023afe:	e7b2      	b.n	8023a66 <_malloc_r+0x32>
 8023b00:	4634      	mov	r4, r6
 8023b02:	6876      	ldr	r6, [r6, #4]
 8023b04:	e7b9      	b.n	8023a7a <_malloc_r+0x46>
 8023b06:	230c      	movs	r3, #12
 8023b08:	603b      	str	r3, [r7, #0]
 8023b0a:	4638      	mov	r0, r7
 8023b0c:	f003 fc26 	bl	802735c <__malloc_unlock>
 8023b10:	e7a1      	b.n	8023a56 <_malloc_r+0x22>
 8023b12:	6025      	str	r5, [r4, #0]
 8023b14:	e7de      	b.n	8023ad4 <_malloc_r+0xa0>
 8023b16:	bf00      	nop
 8023b18:	2001ae3c 	.word	0x2001ae3c

08023b1c <__cvt>:
 8023b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023b20:	ec55 4b10 	vmov	r4, r5, d0
 8023b24:	2d00      	cmp	r5, #0
 8023b26:	460e      	mov	r6, r1
 8023b28:	4619      	mov	r1, r3
 8023b2a:	462b      	mov	r3, r5
 8023b2c:	bfbb      	ittet	lt
 8023b2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8023b32:	461d      	movlt	r5, r3
 8023b34:	2300      	movge	r3, #0
 8023b36:	232d      	movlt	r3, #45	; 0x2d
 8023b38:	700b      	strb	r3, [r1, #0]
 8023b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023b3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8023b40:	4691      	mov	r9, r2
 8023b42:	f023 0820 	bic.w	r8, r3, #32
 8023b46:	bfbc      	itt	lt
 8023b48:	4622      	movlt	r2, r4
 8023b4a:	4614      	movlt	r4, r2
 8023b4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023b50:	d005      	beq.n	8023b5e <__cvt+0x42>
 8023b52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8023b56:	d100      	bne.n	8023b5a <__cvt+0x3e>
 8023b58:	3601      	adds	r6, #1
 8023b5a:	2102      	movs	r1, #2
 8023b5c:	e000      	b.n	8023b60 <__cvt+0x44>
 8023b5e:	2103      	movs	r1, #3
 8023b60:	ab03      	add	r3, sp, #12
 8023b62:	9301      	str	r3, [sp, #4]
 8023b64:	ab02      	add	r3, sp, #8
 8023b66:	9300      	str	r3, [sp, #0]
 8023b68:	ec45 4b10 	vmov	d0, r4, r5
 8023b6c:	4653      	mov	r3, sl
 8023b6e:	4632      	mov	r2, r6
 8023b70:	f002 f986 	bl	8025e80 <_dtoa_r>
 8023b74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8023b78:	4607      	mov	r7, r0
 8023b7a:	d102      	bne.n	8023b82 <__cvt+0x66>
 8023b7c:	f019 0f01 	tst.w	r9, #1
 8023b80:	d022      	beq.n	8023bc8 <__cvt+0xac>
 8023b82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023b86:	eb07 0906 	add.w	r9, r7, r6
 8023b8a:	d110      	bne.n	8023bae <__cvt+0x92>
 8023b8c:	783b      	ldrb	r3, [r7, #0]
 8023b8e:	2b30      	cmp	r3, #48	; 0x30
 8023b90:	d10a      	bne.n	8023ba8 <__cvt+0x8c>
 8023b92:	2200      	movs	r2, #0
 8023b94:	2300      	movs	r3, #0
 8023b96:	4620      	mov	r0, r4
 8023b98:	4629      	mov	r1, r5
 8023b9a:	f7dc ffc5 	bl	8000b28 <__aeabi_dcmpeq>
 8023b9e:	b918      	cbnz	r0, 8023ba8 <__cvt+0x8c>
 8023ba0:	f1c6 0601 	rsb	r6, r6, #1
 8023ba4:	f8ca 6000 	str.w	r6, [sl]
 8023ba8:	f8da 3000 	ldr.w	r3, [sl]
 8023bac:	4499      	add	r9, r3
 8023bae:	2200      	movs	r2, #0
 8023bb0:	2300      	movs	r3, #0
 8023bb2:	4620      	mov	r0, r4
 8023bb4:	4629      	mov	r1, r5
 8023bb6:	f7dc ffb7 	bl	8000b28 <__aeabi_dcmpeq>
 8023bba:	b108      	cbz	r0, 8023bc0 <__cvt+0xa4>
 8023bbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8023bc0:	2230      	movs	r2, #48	; 0x30
 8023bc2:	9b03      	ldr	r3, [sp, #12]
 8023bc4:	454b      	cmp	r3, r9
 8023bc6:	d307      	bcc.n	8023bd8 <__cvt+0xbc>
 8023bc8:	9b03      	ldr	r3, [sp, #12]
 8023bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023bcc:	1bdb      	subs	r3, r3, r7
 8023bce:	4638      	mov	r0, r7
 8023bd0:	6013      	str	r3, [r2, #0]
 8023bd2:	b004      	add	sp, #16
 8023bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bd8:	1c59      	adds	r1, r3, #1
 8023bda:	9103      	str	r1, [sp, #12]
 8023bdc:	701a      	strb	r2, [r3, #0]
 8023bde:	e7f0      	b.n	8023bc2 <__cvt+0xa6>

08023be0 <__exponent>:
 8023be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023be2:	4603      	mov	r3, r0
 8023be4:	2900      	cmp	r1, #0
 8023be6:	bfb8      	it	lt
 8023be8:	4249      	neglt	r1, r1
 8023bea:	f803 2b02 	strb.w	r2, [r3], #2
 8023bee:	bfb4      	ite	lt
 8023bf0:	222d      	movlt	r2, #45	; 0x2d
 8023bf2:	222b      	movge	r2, #43	; 0x2b
 8023bf4:	2909      	cmp	r1, #9
 8023bf6:	7042      	strb	r2, [r0, #1]
 8023bf8:	dd2a      	ble.n	8023c50 <__exponent+0x70>
 8023bfa:	f10d 0407 	add.w	r4, sp, #7
 8023bfe:	46a4      	mov	ip, r4
 8023c00:	270a      	movs	r7, #10
 8023c02:	46a6      	mov	lr, r4
 8023c04:	460a      	mov	r2, r1
 8023c06:	fb91 f6f7 	sdiv	r6, r1, r7
 8023c0a:	fb07 1516 	mls	r5, r7, r6, r1
 8023c0e:	3530      	adds	r5, #48	; 0x30
 8023c10:	2a63      	cmp	r2, #99	; 0x63
 8023c12:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8023c16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8023c1a:	4631      	mov	r1, r6
 8023c1c:	dcf1      	bgt.n	8023c02 <__exponent+0x22>
 8023c1e:	3130      	adds	r1, #48	; 0x30
 8023c20:	f1ae 0502 	sub.w	r5, lr, #2
 8023c24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8023c28:	1c44      	adds	r4, r0, #1
 8023c2a:	4629      	mov	r1, r5
 8023c2c:	4561      	cmp	r1, ip
 8023c2e:	d30a      	bcc.n	8023c46 <__exponent+0x66>
 8023c30:	f10d 0209 	add.w	r2, sp, #9
 8023c34:	eba2 020e 	sub.w	r2, r2, lr
 8023c38:	4565      	cmp	r5, ip
 8023c3a:	bf88      	it	hi
 8023c3c:	2200      	movhi	r2, #0
 8023c3e:	4413      	add	r3, r2
 8023c40:	1a18      	subs	r0, r3, r0
 8023c42:	b003      	add	sp, #12
 8023c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023c4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8023c4e:	e7ed      	b.n	8023c2c <__exponent+0x4c>
 8023c50:	2330      	movs	r3, #48	; 0x30
 8023c52:	3130      	adds	r1, #48	; 0x30
 8023c54:	7083      	strb	r3, [r0, #2]
 8023c56:	70c1      	strb	r1, [r0, #3]
 8023c58:	1d03      	adds	r3, r0, #4
 8023c5a:	e7f1      	b.n	8023c40 <__exponent+0x60>

08023c5c <_printf_float>:
 8023c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c60:	ed2d 8b02 	vpush	{d8}
 8023c64:	b08d      	sub	sp, #52	; 0x34
 8023c66:	460c      	mov	r4, r1
 8023c68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8023c6c:	4616      	mov	r6, r2
 8023c6e:	461f      	mov	r7, r3
 8023c70:	4605      	mov	r5, r0
 8023c72:	f003 fb3d 	bl	80272f0 <_localeconv_r>
 8023c76:	f8d0 a000 	ldr.w	sl, [r0]
 8023c7a:	4650      	mov	r0, sl
 8023c7c:	f7dc fad2 	bl	8000224 <strlen>
 8023c80:	2300      	movs	r3, #0
 8023c82:	930a      	str	r3, [sp, #40]	; 0x28
 8023c84:	6823      	ldr	r3, [r4, #0]
 8023c86:	9305      	str	r3, [sp, #20]
 8023c88:	f8d8 3000 	ldr.w	r3, [r8]
 8023c8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8023c90:	3307      	adds	r3, #7
 8023c92:	f023 0307 	bic.w	r3, r3, #7
 8023c96:	f103 0208 	add.w	r2, r3, #8
 8023c9a:	f8c8 2000 	str.w	r2, [r8]
 8023c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ca2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8023ca6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8023caa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023cae:	9307      	str	r3, [sp, #28]
 8023cb0:	f8cd 8018 	str.w	r8, [sp, #24]
 8023cb4:	ee08 0a10 	vmov	s16, r0
 8023cb8:	4b9f      	ldr	r3, [pc, #636]	; (8023f38 <_printf_float+0x2dc>)
 8023cba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023cc2:	f7dc ff63 	bl	8000b8c <__aeabi_dcmpun>
 8023cc6:	bb88      	cbnz	r0, 8023d2c <_printf_float+0xd0>
 8023cc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023ccc:	4b9a      	ldr	r3, [pc, #616]	; (8023f38 <_printf_float+0x2dc>)
 8023cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023cd2:	f7dc ff3d 	bl	8000b50 <__aeabi_dcmple>
 8023cd6:	bb48      	cbnz	r0, 8023d2c <_printf_float+0xd0>
 8023cd8:	2200      	movs	r2, #0
 8023cda:	2300      	movs	r3, #0
 8023cdc:	4640      	mov	r0, r8
 8023cde:	4649      	mov	r1, r9
 8023ce0:	f7dc ff2c 	bl	8000b3c <__aeabi_dcmplt>
 8023ce4:	b110      	cbz	r0, 8023cec <_printf_float+0x90>
 8023ce6:	232d      	movs	r3, #45	; 0x2d
 8023ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023cec:	4b93      	ldr	r3, [pc, #588]	; (8023f3c <_printf_float+0x2e0>)
 8023cee:	4894      	ldr	r0, [pc, #592]	; (8023f40 <_printf_float+0x2e4>)
 8023cf0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8023cf4:	bf94      	ite	ls
 8023cf6:	4698      	movls	r8, r3
 8023cf8:	4680      	movhi	r8, r0
 8023cfa:	2303      	movs	r3, #3
 8023cfc:	6123      	str	r3, [r4, #16]
 8023cfe:	9b05      	ldr	r3, [sp, #20]
 8023d00:	f023 0204 	bic.w	r2, r3, #4
 8023d04:	6022      	str	r2, [r4, #0]
 8023d06:	f04f 0900 	mov.w	r9, #0
 8023d0a:	9700      	str	r7, [sp, #0]
 8023d0c:	4633      	mov	r3, r6
 8023d0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8023d10:	4621      	mov	r1, r4
 8023d12:	4628      	mov	r0, r5
 8023d14:	f000 f9d8 	bl	80240c8 <_printf_common>
 8023d18:	3001      	adds	r0, #1
 8023d1a:	f040 8090 	bne.w	8023e3e <_printf_float+0x1e2>
 8023d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023d22:	b00d      	add	sp, #52	; 0x34
 8023d24:	ecbd 8b02 	vpop	{d8}
 8023d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d2c:	4642      	mov	r2, r8
 8023d2e:	464b      	mov	r3, r9
 8023d30:	4640      	mov	r0, r8
 8023d32:	4649      	mov	r1, r9
 8023d34:	f7dc ff2a 	bl	8000b8c <__aeabi_dcmpun>
 8023d38:	b140      	cbz	r0, 8023d4c <_printf_float+0xf0>
 8023d3a:	464b      	mov	r3, r9
 8023d3c:	2b00      	cmp	r3, #0
 8023d3e:	bfbc      	itt	lt
 8023d40:	232d      	movlt	r3, #45	; 0x2d
 8023d42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8023d46:	487f      	ldr	r0, [pc, #508]	; (8023f44 <_printf_float+0x2e8>)
 8023d48:	4b7f      	ldr	r3, [pc, #508]	; (8023f48 <_printf_float+0x2ec>)
 8023d4a:	e7d1      	b.n	8023cf0 <_printf_float+0x94>
 8023d4c:	6863      	ldr	r3, [r4, #4]
 8023d4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8023d52:	9206      	str	r2, [sp, #24]
 8023d54:	1c5a      	adds	r2, r3, #1
 8023d56:	d13f      	bne.n	8023dd8 <_printf_float+0x17c>
 8023d58:	2306      	movs	r3, #6
 8023d5a:	6063      	str	r3, [r4, #4]
 8023d5c:	9b05      	ldr	r3, [sp, #20]
 8023d5e:	6861      	ldr	r1, [r4, #4]
 8023d60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8023d64:	2300      	movs	r3, #0
 8023d66:	9303      	str	r3, [sp, #12]
 8023d68:	ab0a      	add	r3, sp, #40	; 0x28
 8023d6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8023d6e:	ab09      	add	r3, sp, #36	; 0x24
 8023d70:	ec49 8b10 	vmov	d0, r8, r9
 8023d74:	9300      	str	r3, [sp, #0]
 8023d76:	6022      	str	r2, [r4, #0]
 8023d78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8023d7c:	4628      	mov	r0, r5
 8023d7e:	f7ff fecd 	bl	8023b1c <__cvt>
 8023d82:	9b06      	ldr	r3, [sp, #24]
 8023d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023d86:	2b47      	cmp	r3, #71	; 0x47
 8023d88:	4680      	mov	r8, r0
 8023d8a:	d108      	bne.n	8023d9e <_printf_float+0x142>
 8023d8c:	1cc8      	adds	r0, r1, #3
 8023d8e:	db02      	blt.n	8023d96 <_printf_float+0x13a>
 8023d90:	6863      	ldr	r3, [r4, #4]
 8023d92:	4299      	cmp	r1, r3
 8023d94:	dd41      	ble.n	8023e1a <_printf_float+0x1be>
 8023d96:	f1ab 0b02 	sub.w	fp, fp, #2
 8023d9a:	fa5f fb8b 	uxtb.w	fp, fp
 8023d9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023da2:	d820      	bhi.n	8023de6 <_printf_float+0x18a>
 8023da4:	3901      	subs	r1, #1
 8023da6:	465a      	mov	r2, fp
 8023da8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8023dac:	9109      	str	r1, [sp, #36]	; 0x24
 8023dae:	f7ff ff17 	bl	8023be0 <__exponent>
 8023db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023db4:	1813      	adds	r3, r2, r0
 8023db6:	2a01      	cmp	r2, #1
 8023db8:	4681      	mov	r9, r0
 8023dba:	6123      	str	r3, [r4, #16]
 8023dbc:	dc02      	bgt.n	8023dc4 <_printf_float+0x168>
 8023dbe:	6822      	ldr	r2, [r4, #0]
 8023dc0:	07d2      	lsls	r2, r2, #31
 8023dc2:	d501      	bpl.n	8023dc8 <_printf_float+0x16c>
 8023dc4:	3301      	adds	r3, #1
 8023dc6:	6123      	str	r3, [r4, #16]
 8023dc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8023dcc:	2b00      	cmp	r3, #0
 8023dce:	d09c      	beq.n	8023d0a <_printf_float+0xae>
 8023dd0:	232d      	movs	r3, #45	; 0x2d
 8023dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023dd6:	e798      	b.n	8023d0a <_printf_float+0xae>
 8023dd8:	9a06      	ldr	r2, [sp, #24]
 8023dda:	2a47      	cmp	r2, #71	; 0x47
 8023ddc:	d1be      	bne.n	8023d5c <_printf_float+0x100>
 8023dde:	2b00      	cmp	r3, #0
 8023de0:	d1bc      	bne.n	8023d5c <_printf_float+0x100>
 8023de2:	2301      	movs	r3, #1
 8023de4:	e7b9      	b.n	8023d5a <_printf_float+0xfe>
 8023de6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8023dea:	d118      	bne.n	8023e1e <_printf_float+0x1c2>
 8023dec:	2900      	cmp	r1, #0
 8023dee:	6863      	ldr	r3, [r4, #4]
 8023df0:	dd0b      	ble.n	8023e0a <_printf_float+0x1ae>
 8023df2:	6121      	str	r1, [r4, #16]
 8023df4:	b913      	cbnz	r3, 8023dfc <_printf_float+0x1a0>
 8023df6:	6822      	ldr	r2, [r4, #0]
 8023df8:	07d0      	lsls	r0, r2, #31
 8023dfa:	d502      	bpl.n	8023e02 <_printf_float+0x1a6>
 8023dfc:	3301      	adds	r3, #1
 8023dfe:	440b      	add	r3, r1
 8023e00:	6123      	str	r3, [r4, #16]
 8023e02:	65a1      	str	r1, [r4, #88]	; 0x58
 8023e04:	f04f 0900 	mov.w	r9, #0
 8023e08:	e7de      	b.n	8023dc8 <_printf_float+0x16c>
 8023e0a:	b913      	cbnz	r3, 8023e12 <_printf_float+0x1b6>
 8023e0c:	6822      	ldr	r2, [r4, #0]
 8023e0e:	07d2      	lsls	r2, r2, #31
 8023e10:	d501      	bpl.n	8023e16 <_printf_float+0x1ba>
 8023e12:	3302      	adds	r3, #2
 8023e14:	e7f4      	b.n	8023e00 <_printf_float+0x1a4>
 8023e16:	2301      	movs	r3, #1
 8023e18:	e7f2      	b.n	8023e00 <_printf_float+0x1a4>
 8023e1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8023e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e20:	4299      	cmp	r1, r3
 8023e22:	db05      	blt.n	8023e30 <_printf_float+0x1d4>
 8023e24:	6823      	ldr	r3, [r4, #0]
 8023e26:	6121      	str	r1, [r4, #16]
 8023e28:	07d8      	lsls	r0, r3, #31
 8023e2a:	d5ea      	bpl.n	8023e02 <_printf_float+0x1a6>
 8023e2c:	1c4b      	adds	r3, r1, #1
 8023e2e:	e7e7      	b.n	8023e00 <_printf_float+0x1a4>
 8023e30:	2900      	cmp	r1, #0
 8023e32:	bfd4      	ite	le
 8023e34:	f1c1 0202 	rsble	r2, r1, #2
 8023e38:	2201      	movgt	r2, #1
 8023e3a:	4413      	add	r3, r2
 8023e3c:	e7e0      	b.n	8023e00 <_printf_float+0x1a4>
 8023e3e:	6823      	ldr	r3, [r4, #0]
 8023e40:	055a      	lsls	r2, r3, #21
 8023e42:	d407      	bmi.n	8023e54 <_printf_float+0x1f8>
 8023e44:	6923      	ldr	r3, [r4, #16]
 8023e46:	4642      	mov	r2, r8
 8023e48:	4631      	mov	r1, r6
 8023e4a:	4628      	mov	r0, r5
 8023e4c:	47b8      	blx	r7
 8023e4e:	3001      	adds	r0, #1
 8023e50:	d12c      	bne.n	8023eac <_printf_float+0x250>
 8023e52:	e764      	b.n	8023d1e <_printf_float+0xc2>
 8023e54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023e58:	f240 80e0 	bls.w	802401c <_printf_float+0x3c0>
 8023e5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023e60:	2200      	movs	r2, #0
 8023e62:	2300      	movs	r3, #0
 8023e64:	f7dc fe60 	bl	8000b28 <__aeabi_dcmpeq>
 8023e68:	2800      	cmp	r0, #0
 8023e6a:	d034      	beq.n	8023ed6 <_printf_float+0x27a>
 8023e6c:	4a37      	ldr	r2, [pc, #220]	; (8023f4c <_printf_float+0x2f0>)
 8023e6e:	2301      	movs	r3, #1
 8023e70:	4631      	mov	r1, r6
 8023e72:	4628      	mov	r0, r5
 8023e74:	47b8      	blx	r7
 8023e76:	3001      	adds	r0, #1
 8023e78:	f43f af51 	beq.w	8023d1e <_printf_float+0xc2>
 8023e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023e80:	429a      	cmp	r2, r3
 8023e82:	db02      	blt.n	8023e8a <_printf_float+0x22e>
 8023e84:	6823      	ldr	r3, [r4, #0]
 8023e86:	07d8      	lsls	r0, r3, #31
 8023e88:	d510      	bpl.n	8023eac <_printf_float+0x250>
 8023e8a:	ee18 3a10 	vmov	r3, s16
 8023e8e:	4652      	mov	r2, sl
 8023e90:	4631      	mov	r1, r6
 8023e92:	4628      	mov	r0, r5
 8023e94:	47b8      	blx	r7
 8023e96:	3001      	adds	r0, #1
 8023e98:	f43f af41 	beq.w	8023d1e <_printf_float+0xc2>
 8023e9c:	f04f 0800 	mov.w	r8, #0
 8023ea0:	f104 091a 	add.w	r9, r4, #26
 8023ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ea6:	3b01      	subs	r3, #1
 8023ea8:	4543      	cmp	r3, r8
 8023eaa:	dc09      	bgt.n	8023ec0 <_printf_float+0x264>
 8023eac:	6823      	ldr	r3, [r4, #0]
 8023eae:	079b      	lsls	r3, r3, #30
 8023eb0:	f100 8105 	bmi.w	80240be <_printf_float+0x462>
 8023eb4:	68e0      	ldr	r0, [r4, #12]
 8023eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023eb8:	4298      	cmp	r0, r3
 8023eba:	bfb8      	it	lt
 8023ebc:	4618      	movlt	r0, r3
 8023ebe:	e730      	b.n	8023d22 <_printf_float+0xc6>
 8023ec0:	2301      	movs	r3, #1
 8023ec2:	464a      	mov	r2, r9
 8023ec4:	4631      	mov	r1, r6
 8023ec6:	4628      	mov	r0, r5
 8023ec8:	47b8      	blx	r7
 8023eca:	3001      	adds	r0, #1
 8023ecc:	f43f af27 	beq.w	8023d1e <_printf_float+0xc2>
 8023ed0:	f108 0801 	add.w	r8, r8, #1
 8023ed4:	e7e6      	b.n	8023ea4 <_printf_float+0x248>
 8023ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	dc39      	bgt.n	8023f50 <_printf_float+0x2f4>
 8023edc:	4a1b      	ldr	r2, [pc, #108]	; (8023f4c <_printf_float+0x2f0>)
 8023ede:	2301      	movs	r3, #1
 8023ee0:	4631      	mov	r1, r6
 8023ee2:	4628      	mov	r0, r5
 8023ee4:	47b8      	blx	r7
 8023ee6:	3001      	adds	r0, #1
 8023ee8:	f43f af19 	beq.w	8023d1e <_printf_float+0xc2>
 8023eec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023ef0:	4313      	orrs	r3, r2
 8023ef2:	d102      	bne.n	8023efa <_printf_float+0x29e>
 8023ef4:	6823      	ldr	r3, [r4, #0]
 8023ef6:	07d9      	lsls	r1, r3, #31
 8023ef8:	d5d8      	bpl.n	8023eac <_printf_float+0x250>
 8023efa:	ee18 3a10 	vmov	r3, s16
 8023efe:	4652      	mov	r2, sl
 8023f00:	4631      	mov	r1, r6
 8023f02:	4628      	mov	r0, r5
 8023f04:	47b8      	blx	r7
 8023f06:	3001      	adds	r0, #1
 8023f08:	f43f af09 	beq.w	8023d1e <_printf_float+0xc2>
 8023f0c:	f04f 0900 	mov.w	r9, #0
 8023f10:	f104 0a1a 	add.w	sl, r4, #26
 8023f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f16:	425b      	negs	r3, r3
 8023f18:	454b      	cmp	r3, r9
 8023f1a:	dc01      	bgt.n	8023f20 <_printf_float+0x2c4>
 8023f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f1e:	e792      	b.n	8023e46 <_printf_float+0x1ea>
 8023f20:	2301      	movs	r3, #1
 8023f22:	4652      	mov	r2, sl
 8023f24:	4631      	mov	r1, r6
 8023f26:	4628      	mov	r0, r5
 8023f28:	47b8      	blx	r7
 8023f2a:	3001      	adds	r0, #1
 8023f2c:	f43f aef7 	beq.w	8023d1e <_printf_float+0xc2>
 8023f30:	f109 0901 	add.w	r9, r9, #1
 8023f34:	e7ee      	b.n	8023f14 <_printf_float+0x2b8>
 8023f36:	bf00      	nop
 8023f38:	7fefffff 	.word	0x7fefffff
 8023f3c:	0802d8e0 	.word	0x0802d8e0
 8023f40:	0802d8e4 	.word	0x0802d8e4
 8023f44:	0802d8ec 	.word	0x0802d8ec
 8023f48:	0802d8e8 	.word	0x0802d8e8
 8023f4c:	0802dc81 	.word	0x0802dc81
 8023f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023f52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023f54:	429a      	cmp	r2, r3
 8023f56:	bfa8      	it	ge
 8023f58:	461a      	movge	r2, r3
 8023f5a:	2a00      	cmp	r2, #0
 8023f5c:	4691      	mov	r9, r2
 8023f5e:	dc37      	bgt.n	8023fd0 <_printf_float+0x374>
 8023f60:	f04f 0b00 	mov.w	fp, #0
 8023f64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023f68:	f104 021a 	add.w	r2, r4, #26
 8023f6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023f6e:	9305      	str	r3, [sp, #20]
 8023f70:	eba3 0309 	sub.w	r3, r3, r9
 8023f74:	455b      	cmp	r3, fp
 8023f76:	dc33      	bgt.n	8023fe0 <_printf_float+0x384>
 8023f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023f7c:	429a      	cmp	r2, r3
 8023f7e:	db3b      	blt.n	8023ff8 <_printf_float+0x39c>
 8023f80:	6823      	ldr	r3, [r4, #0]
 8023f82:	07da      	lsls	r2, r3, #31
 8023f84:	d438      	bmi.n	8023ff8 <_printf_float+0x39c>
 8023f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f88:	9a05      	ldr	r2, [sp, #20]
 8023f8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023f8c:	1a9a      	subs	r2, r3, r2
 8023f8e:	eba3 0901 	sub.w	r9, r3, r1
 8023f92:	4591      	cmp	r9, r2
 8023f94:	bfa8      	it	ge
 8023f96:	4691      	movge	r9, r2
 8023f98:	f1b9 0f00 	cmp.w	r9, #0
 8023f9c:	dc35      	bgt.n	802400a <_printf_float+0x3ae>
 8023f9e:	f04f 0800 	mov.w	r8, #0
 8023fa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023fa6:	f104 0a1a 	add.w	sl, r4, #26
 8023faa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023fae:	1a9b      	subs	r3, r3, r2
 8023fb0:	eba3 0309 	sub.w	r3, r3, r9
 8023fb4:	4543      	cmp	r3, r8
 8023fb6:	f77f af79 	ble.w	8023eac <_printf_float+0x250>
 8023fba:	2301      	movs	r3, #1
 8023fbc:	4652      	mov	r2, sl
 8023fbe:	4631      	mov	r1, r6
 8023fc0:	4628      	mov	r0, r5
 8023fc2:	47b8      	blx	r7
 8023fc4:	3001      	adds	r0, #1
 8023fc6:	f43f aeaa 	beq.w	8023d1e <_printf_float+0xc2>
 8023fca:	f108 0801 	add.w	r8, r8, #1
 8023fce:	e7ec      	b.n	8023faa <_printf_float+0x34e>
 8023fd0:	4613      	mov	r3, r2
 8023fd2:	4631      	mov	r1, r6
 8023fd4:	4642      	mov	r2, r8
 8023fd6:	4628      	mov	r0, r5
 8023fd8:	47b8      	blx	r7
 8023fda:	3001      	adds	r0, #1
 8023fdc:	d1c0      	bne.n	8023f60 <_printf_float+0x304>
 8023fde:	e69e      	b.n	8023d1e <_printf_float+0xc2>
 8023fe0:	2301      	movs	r3, #1
 8023fe2:	4631      	mov	r1, r6
 8023fe4:	4628      	mov	r0, r5
 8023fe6:	9205      	str	r2, [sp, #20]
 8023fe8:	47b8      	blx	r7
 8023fea:	3001      	adds	r0, #1
 8023fec:	f43f ae97 	beq.w	8023d1e <_printf_float+0xc2>
 8023ff0:	9a05      	ldr	r2, [sp, #20]
 8023ff2:	f10b 0b01 	add.w	fp, fp, #1
 8023ff6:	e7b9      	b.n	8023f6c <_printf_float+0x310>
 8023ff8:	ee18 3a10 	vmov	r3, s16
 8023ffc:	4652      	mov	r2, sl
 8023ffe:	4631      	mov	r1, r6
 8024000:	4628      	mov	r0, r5
 8024002:	47b8      	blx	r7
 8024004:	3001      	adds	r0, #1
 8024006:	d1be      	bne.n	8023f86 <_printf_float+0x32a>
 8024008:	e689      	b.n	8023d1e <_printf_float+0xc2>
 802400a:	9a05      	ldr	r2, [sp, #20]
 802400c:	464b      	mov	r3, r9
 802400e:	4442      	add	r2, r8
 8024010:	4631      	mov	r1, r6
 8024012:	4628      	mov	r0, r5
 8024014:	47b8      	blx	r7
 8024016:	3001      	adds	r0, #1
 8024018:	d1c1      	bne.n	8023f9e <_printf_float+0x342>
 802401a:	e680      	b.n	8023d1e <_printf_float+0xc2>
 802401c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802401e:	2a01      	cmp	r2, #1
 8024020:	dc01      	bgt.n	8024026 <_printf_float+0x3ca>
 8024022:	07db      	lsls	r3, r3, #31
 8024024:	d538      	bpl.n	8024098 <_printf_float+0x43c>
 8024026:	2301      	movs	r3, #1
 8024028:	4642      	mov	r2, r8
 802402a:	4631      	mov	r1, r6
 802402c:	4628      	mov	r0, r5
 802402e:	47b8      	blx	r7
 8024030:	3001      	adds	r0, #1
 8024032:	f43f ae74 	beq.w	8023d1e <_printf_float+0xc2>
 8024036:	ee18 3a10 	vmov	r3, s16
 802403a:	4652      	mov	r2, sl
 802403c:	4631      	mov	r1, r6
 802403e:	4628      	mov	r0, r5
 8024040:	47b8      	blx	r7
 8024042:	3001      	adds	r0, #1
 8024044:	f43f ae6b 	beq.w	8023d1e <_printf_float+0xc2>
 8024048:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802404c:	2200      	movs	r2, #0
 802404e:	2300      	movs	r3, #0
 8024050:	f7dc fd6a 	bl	8000b28 <__aeabi_dcmpeq>
 8024054:	b9d8      	cbnz	r0, 802408e <_printf_float+0x432>
 8024056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024058:	f108 0201 	add.w	r2, r8, #1
 802405c:	3b01      	subs	r3, #1
 802405e:	4631      	mov	r1, r6
 8024060:	4628      	mov	r0, r5
 8024062:	47b8      	blx	r7
 8024064:	3001      	adds	r0, #1
 8024066:	d10e      	bne.n	8024086 <_printf_float+0x42a>
 8024068:	e659      	b.n	8023d1e <_printf_float+0xc2>
 802406a:	2301      	movs	r3, #1
 802406c:	4652      	mov	r2, sl
 802406e:	4631      	mov	r1, r6
 8024070:	4628      	mov	r0, r5
 8024072:	47b8      	blx	r7
 8024074:	3001      	adds	r0, #1
 8024076:	f43f ae52 	beq.w	8023d1e <_printf_float+0xc2>
 802407a:	f108 0801 	add.w	r8, r8, #1
 802407e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024080:	3b01      	subs	r3, #1
 8024082:	4543      	cmp	r3, r8
 8024084:	dcf1      	bgt.n	802406a <_printf_float+0x40e>
 8024086:	464b      	mov	r3, r9
 8024088:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802408c:	e6dc      	b.n	8023e48 <_printf_float+0x1ec>
 802408e:	f04f 0800 	mov.w	r8, #0
 8024092:	f104 0a1a 	add.w	sl, r4, #26
 8024096:	e7f2      	b.n	802407e <_printf_float+0x422>
 8024098:	2301      	movs	r3, #1
 802409a:	4642      	mov	r2, r8
 802409c:	e7df      	b.n	802405e <_printf_float+0x402>
 802409e:	2301      	movs	r3, #1
 80240a0:	464a      	mov	r2, r9
 80240a2:	4631      	mov	r1, r6
 80240a4:	4628      	mov	r0, r5
 80240a6:	47b8      	blx	r7
 80240a8:	3001      	adds	r0, #1
 80240aa:	f43f ae38 	beq.w	8023d1e <_printf_float+0xc2>
 80240ae:	f108 0801 	add.w	r8, r8, #1
 80240b2:	68e3      	ldr	r3, [r4, #12]
 80240b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80240b6:	1a5b      	subs	r3, r3, r1
 80240b8:	4543      	cmp	r3, r8
 80240ba:	dcf0      	bgt.n	802409e <_printf_float+0x442>
 80240bc:	e6fa      	b.n	8023eb4 <_printf_float+0x258>
 80240be:	f04f 0800 	mov.w	r8, #0
 80240c2:	f104 0919 	add.w	r9, r4, #25
 80240c6:	e7f4      	b.n	80240b2 <_printf_float+0x456>

080240c8 <_printf_common>:
 80240c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80240cc:	4616      	mov	r6, r2
 80240ce:	4699      	mov	r9, r3
 80240d0:	688a      	ldr	r2, [r1, #8]
 80240d2:	690b      	ldr	r3, [r1, #16]
 80240d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80240d8:	4293      	cmp	r3, r2
 80240da:	bfb8      	it	lt
 80240dc:	4613      	movlt	r3, r2
 80240de:	6033      	str	r3, [r6, #0]
 80240e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80240e4:	4607      	mov	r7, r0
 80240e6:	460c      	mov	r4, r1
 80240e8:	b10a      	cbz	r2, 80240ee <_printf_common+0x26>
 80240ea:	3301      	adds	r3, #1
 80240ec:	6033      	str	r3, [r6, #0]
 80240ee:	6823      	ldr	r3, [r4, #0]
 80240f0:	0699      	lsls	r1, r3, #26
 80240f2:	bf42      	ittt	mi
 80240f4:	6833      	ldrmi	r3, [r6, #0]
 80240f6:	3302      	addmi	r3, #2
 80240f8:	6033      	strmi	r3, [r6, #0]
 80240fa:	6825      	ldr	r5, [r4, #0]
 80240fc:	f015 0506 	ands.w	r5, r5, #6
 8024100:	d106      	bne.n	8024110 <_printf_common+0x48>
 8024102:	f104 0a19 	add.w	sl, r4, #25
 8024106:	68e3      	ldr	r3, [r4, #12]
 8024108:	6832      	ldr	r2, [r6, #0]
 802410a:	1a9b      	subs	r3, r3, r2
 802410c:	42ab      	cmp	r3, r5
 802410e:	dc26      	bgt.n	802415e <_printf_common+0x96>
 8024110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024114:	1e13      	subs	r3, r2, #0
 8024116:	6822      	ldr	r2, [r4, #0]
 8024118:	bf18      	it	ne
 802411a:	2301      	movne	r3, #1
 802411c:	0692      	lsls	r2, r2, #26
 802411e:	d42b      	bmi.n	8024178 <_printf_common+0xb0>
 8024120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024124:	4649      	mov	r1, r9
 8024126:	4638      	mov	r0, r7
 8024128:	47c0      	blx	r8
 802412a:	3001      	adds	r0, #1
 802412c:	d01e      	beq.n	802416c <_printf_common+0xa4>
 802412e:	6823      	ldr	r3, [r4, #0]
 8024130:	68e5      	ldr	r5, [r4, #12]
 8024132:	6832      	ldr	r2, [r6, #0]
 8024134:	f003 0306 	and.w	r3, r3, #6
 8024138:	2b04      	cmp	r3, #4
 802413a:	bf08      	it	eq
 802413c:	1aad      	subeq	r5, r5, r2
 802413e:	68a3      	ldr	r3, [r4, #8]
 8024140:	6922      	ldr	r2, [r4, #16]
 8024142:	bf0c      	ite	eq
 8024144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024148:	2500      	movne	r5, #0
 802414a:	4293      	cmp	r3, r2
 802414c:	bfc4      	itt	gt
 802414e:	1a9b      	subgt	r3, r3, r2
 8024150:	18ed      	addgt	r5, r5, r3
 8024152:	2600      	movs	r6, #0
 8024154:	341a      	adds	r4, #26
 8024156:	42b5      	cmp	r5, r6
 8024158:	d11a      	bne.n	8024190 <_printf_common+0xc8>
 802415a:	2000      	movs	r0, #0
 802415c:	e008      	b.n	8024170 <_printf_common+0xa8>
 802415e:	2301      	movs	r3, #1
 8024160:	4652      	mov	r2, sl
 8024162:	4649      	mov	r1, r9
 8024164:	4638      	mov	r0, r7
 8024166:	47c0      	blx	r8
 8024168:	3001      	adds	r0, #1
 802416a:	d103      	bne.n	8024174 <_printf_common+0xac>
 802416c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024174:	3501      	adds	r5, #1
 8024176:	e7c6      	b.n	8024106 <_printf_common+0x3e>
 8024178:	18e1      	adds	r1, r4, r3
 802417a:	1c5a      	adds	r2, r3, #1
 802417c:	2030      	movs	r0, #48	; 0x30
 802417e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024182:	4422      	add	r2, r4
 8024184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802418c:	3302      	adds	r3, #2
 802418e:	e7c7      	b.n	8024120 <_printf_common+0x58>
 8024190:	2301      	movs	r3, #1
 8024192:	4622      	mov	r2, r4
 8024194:	4649      	mov	r1, r9
 8024196:	4638      	mov	r0, r7
 8024198:	47c0      	blx	r8
 802419a:	3001      	adds	r0, #1
 802419c:	d0e6      	beq.n	802416c <_printf_common+0xa4>
 802419e:	3601      	adds	r6, #1
 80241a0:	e7d9      	b.n	8024156 <_printf_common+0x8e>
	...

080241a4 <_printf_i>:
 80241a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80241a8:	7e0f      	ldrb	r7, [r1, #24]
 80241aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80241ac:	2f78      	cmp	r7, #120	; 0x78
 80241ae:	4691      	mov	r9, r2
 80241b0:	4680      	mov	r8, r0
 80241b2:	460c      	mov	r4, r1
 80241b4:	469a      	mov	sl, r3
 80241b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80241ba:	d807      	bhi.n	80241cc <_printf_i+0x28>
 80241bc:	2f62      	cmp	r7, #98	; 0x62
 80241be:	d80a      	bhi.n	80241d6 <_printf_i+0x32>
 80241c0:	2f00      	cmp	r7, #0
 80241c2:	f000 80d8 	beq.w	8024376 <_printf_i+0x1d2>
 80241c6:	2f58      	cmp	r7, #88	; 0x58
 80241c8:	f000 80a3 	beq.w	8024312 <_printf_i+0x16e>
 80241cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80241d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80241d4:	e03a      	b.n	802424c <_printf_i+0xa8>
 80241d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80241da:	2b15      	cmp	r3, #21
 80241dc:	d8f6      	bhi.n	80241cc <_printf_i+0x28>
 80241de:	a101      	add	r1, pc, #4	; (adr r1, 80241e4 <_printf_i+0x40>)
 80241e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80241e4:	0802423d 	.word	0x0802423d
 80241e8:	08024251 	.word	0x08024251
 80241ec:	080241cd 	.word	0x080241cd
 80241f0:	080241cd 	.word	0x080241cd
 80241f4:	080241cd 	.word	0x080241cd
 80241f8:	080241cd 	.word	0x080241cd
 80241fc:	08024251 	.word	0x08024251
 8024200:	080241cd 	.word	0x080241cd
 8024204:	080241cd 	.word	0x080241cd
 8024208:	080241cd 	.word	0x080241cd
 802420c:	080241cd 	.word	0x080241cd
 8024210:	0802435d 	.word	0x0802435d
 8024214:	08024281 	.word	0x08024281
 8024218:	0802433f 	.word	0x0802433f
 802421c:	080241cd 	.word	0x080241cd
 8024220:	080241cd 	.word	0x080241cd
 8024224:	0802437f 	.word	0x0802437f
 8024228:	080241cd 	.word	0x080241cd
 802422c:	08024281 	.word	0x08024281
 8024230:	080241cd 	.word	0x080241cd
 8024234:	080241cd 	.word	0x080241cd
 8024238:	08024347 	.word	0x08024347
 802423c:	682b      	ldr	r3, [r5, #0]
 802423e:	1d1a      	adds	r2, r3, #4
 8024240:	681b      	ldr	r3, [r3, #0]
 8024242:	602a      	str	r2, [r5, #0]
 8024244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802424c:	2301      	movs	r3, #1
 802424e:	e0a3      	b.n	8024398 <_printf_i+0x1f4>
 8024250:	6820      	ldr	r0, [r4, #0]
 8024252:	6829      	ldr	r1, [r5, #0]
 8024254:	0606      	lsls	r6, r0, #24
 8024256:	f101 0304 	add.w	r3, r1, #4
 802425a:	d50a      	bpl.n	8024272 <_printf_i+0xce>
 802425c:	680e      	ldr	r6, [r1, #0]
 802425e:	602b      	str	r3, [r5, #0]
 8024260:	2e00      	cmp	r6, #0
 8024262:	da03      	bge.n	802426c <_printf_i+0xc8>
 8024264:	232d      	movs	r3, #45	; 0x2d
 8024266:	4276      	negs	r6, r6
 8024268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802426c:	485e      	ldr	r0, [pc, #376]	; (80243e8 <_printf_i+0x244>)
 802426e:	230a      	movs	r3, #10
 8024270:	e019      	b.n	80242a6 <_printf_i+0x102>
 8024272:	680e      	ldr	r6, [r1, #0]
 8024274:	602b      	str	r3, [r5, #0]
 8024276:	f010 0f40 	tst.w	r0, #64	; 0x40
 802427a:	bf18      	it	ne
 802427c:	b236      	sxthne	r6, r6
 802427e:	e7ef      	b.n	8024260 <_printf_i+0xbc>
 8024280:	682b      	ldr	r3, [r5, #0]
 8024282:	6820      	ldr	r0, [r4, #0]
 8024284:	1d19      	adds	r1, r3, #4
 8024286:	6029      	str	r1, [r5, #0]
 8024288:	0601      	lsls	r1, r0, #24
 802428a:	d501      	bpl.n	8024290 <_printf_i+0xec>
 802428c:	681e      	ldr	r6, [r3, #0]
 802428e:	e002      	b.n	8024296 <_printf_i+0xf2>
 8024290:	0646      	lsls	r6, r0, #25
 8024292:	d5fb      	bpl.n	802428c <_printf_i+0xe8>
 8024294:	881e      	ldrh	r6, [r3, #0]
 8024296:	4854      	ldr	r0, [pc, #336]	; (80243e8 <_printf_i+0x244>)
 8024298:	2f6f      	cmp	r7, #111	; 0x6f
 802429a:	bf0c      	ite	eq
 802429c:	2308      	moveq	r3, #8
 802429e:	230a      	movne	r3, #10
 80242a0:	2100      	movs	r1, #0
 80242a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80242a6:	6865      	ldr	r5, [r4, #4]
 80242a8:	60a5      	str	r5, [r4, #8]
 80242aa:	2d00      	cmp	r5, #0
 80242ac:	bfa2      	ittt	ge
 80242ae:	6821      	ldrge	r1, [r4, #0]
 80242b0:	f021 0104 	bicge.w	r1, r1, #4
 80242b4:	6021      	strge	r1, [r4, #0]
 80242b6:	b90e      	cbnz	r6, 80242bc <_printf_i+0x118>
 80242b8:	2d00      	cmp	r5, #0
 80242ba:	d04d      	beq.n	8024358 <_printf_i+0x1b4>
 80242bc:	4615      	mov	r5, r2
 80242be:	fbb6 f1f3 	udiv	r1, r6, r3
 80242c2:	fb03 6711 	mls	r7, r3, r1, r6
 80242c6:	5dc7      	ldrb	r7, [r0, r7]
 80242c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80242cc:	4637      	mov	r7, r6
 80242ce:	42bb      	cmp	r3, r7
 80242d0:	460e      	mov	r6, r1
 80242d2:	d9f4      	bls.n	80242be <_printf_i+0x11a>
 80242d4:	2b08      	cmp	r3, #8
 80242d6:	d10b      	bne.n	80242f0 <_printf_i+0x14c>
 80242d8:	6823      	ldr	r3, [r4, #0]
 80242da:	07de      	lsls	r6, r3, #31
 80242dc:	d508      	bpl.n	80242f0 <_printf_i+0x14c>
 80242de:	6923      	ldr	r3, [r4, #16]
 80242e0:	6861      	ldr	r1, [r4, #4]
 80242e2:	4299      	cmp	r1, r3
 80242e4:	bfde      	ittt	le
 80242e6:	2330      	movle	r3, #48	; 0x30
 80242e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80242ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80242f0:	1b52      	subs	r2, r2, r5
 80242f2:	6122      	str	r2, [r4, #16]
 80242f4:	f8cd a000 	str.w	sl, [sp]
 80242f8:	464b      	mov	r3, r9
 80242fa:	aa03      	add	r2, sp, #12
 80242fc:	4621      	mov	r1, r4
 80242fe:	4640      	mov	r0, r8
 8024300:	f7ff fee2 	bl	80240c8 <_printf_common>
 8024304:	3001      	adds	r0, #1
 8024306:	d14c      	bne.n	80243a2 <_printf_i+0x1fe>
 8024308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802430c:	b004      	add	sp, #16
 802430e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024312:	4835      	ldr	r0, [pc, #212]	; (80243e8 <_printf_i+0x244>)
 8024314:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8024318:	6829      	ldr	r1, [r5, #0]
 802431a:	6823      	ldr	r3, [r4, #0]
 802431c:	f851 6b04 	ldr.w	r6, [r1], #4
 8024320:	6029      	str	r1, [r5, #0]
 8024322:	061d      	lsls	r5, r3, #24
 8024324:	d514      	bpl.n	8024350 <_printf_i+0x1ac>
 8024326:	07df      	lsls	r7, r3, #31
 8024328:	bf44      	itt	mi
 802432a:	f043 0320 	orrmi.w	r3, r3, #32
 802432e:	6023      	strmi	r3, [r4, #0]
 8024330:	b91e      	cbnz	r6, 802433a <_printf_i+0x196>
 8024332:	6823      	ldr	r3, [r4, #0]
 8024334:	f023 0320 	bic.w	r3, r3, #32
 8024338:	6023      	str	r3, [r4, #0]
 802433a:	2310      	movs	r3, #16
 802433c:	e7b0      	b.n	80242a0 <_printf_i+0xfc>
 802433e:	6823      	ldr	r3, [r4, #0]
 8024340:	f043 0320 	orr.w	r3, r3, #32
 8024344:	6023      	str	r3, [r4, #0]
 8024346:	2378      	movs	r3, #120	; 0x78
 8024348:	4828      	ldr	r0, [pc, #160]	; (80243ec <_printf_i+0x248>)
 802434a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802434e:	e7e3      	b.n	8024318 <_printf_i+0x174>
 8024350:	0659      	lsls	r1, r3, #25
 8024352:	bf48      	it	mi
 8024354:	b2b6      	uxthmi	r6, r6
 8024356:	e7e6      	b.n	8024326 <_printf_i+0x182>
 8024358:	4615      	mov	r5, r2
 802435a:	e7bb      	b.n	80242d4 <_printf_i+0x130>
 802435c:	682b      	ldr	r3, [r5, #0]
 802435e:	6826      	ldr	r6, [r4, #0]
 8024360:	6961      	ldr	r1, [r4, #20]
 8024362:	1d18      	adds	r0, r3, #4
 8024364:	6028      	str	r0, [r5, #0]
 8024366:	0635      	lsls	r5, r6, #24
 8024368:	681b      	ldr	r3, [r3, #0]
 802436a:	d501      	bpl.n	8024370 <_printf_i+0x1cc>
 802436c:	6019      	str	r1, [r3, #0]
 802436e:	e002      	b.n	8024376 <_printf_i+0x1d2>
 8024370:	0670      	lsls	r0, r6, #25
 8024372:	d5fb      	bpl.n	802436c <_printf_i+0x1c8>
 8024374:	8019      	strh	r1, [r3, #0]
 8024376:	2300      	movs	r3, #0
 8024378:	6123      	str	r3, [r4, #16]
 802437a:	4615      	mov	r5, r2
 802437c:	e7ba      	b.n	80242f4 <_printf_i+0x150>
 802437e:	682b      	ldr	r3, [r5, #0]
 8024380:	1d1a      	adds	r2, r3, #4
 8024382:	602a      	str	r2, [r5, #0]
 8024384:	681d      	ldr	r5, [r3, #0]
 8024386:	6862      	ldr	r2, [r4, #4]
 8024388:	2100      	movs	r1, #0
 802438a:	4628      	mov	r0, r5
 802438c:	f7db ff58 	bl	8000240 <memchr>
 8024390:	b108      	cbz	r0, 8024396 <_printf_i+0x1f2>
 8024392:	1b40      	subs	r0, r0, r5
 8024394:	6060      	str	r0, [r4, #4]
 8024396:	6863      	ldr	r3, [r4, #4]
 8024398:	6123      	str	r3, [r4, #16]
 802439a:	2300      	movs	r3, #0
 802439c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80243a0:	e7a8      	b.n	80242f4 <_printf_i+0x150>
 80243a2:	6923      	ldr	r3, [r4, #16]
 80243a4:	462a      	mov	r2, r5
 80243a6:	4649      	mov	r1, r9
 80243a8:	4640      	mov	r0, r8
 80243aa:	47d0      	blx	sl
 80243ac:	3001      	adds	r0, #1
 80243ae:	d0ab      	beq.n	8024308 <_printf_i+0x164>
 80243b0:	6823      	ldr	r3, [r4, #0]
 80243b2:	079b      	lsls	r3, r3, #30
 80243b4:	d413      	bmi.n	80243de <_printf_i+0x23a>
 80243b6:	68e0      	ldr	r0, [r4, #12]
 80243b8:	9b03      	ldr	r3, [sp, #12]
 80243ba:	4298      	cmp	r0, r3
 80243bc:	bfb8      	it	lt
 80243be:	4618      	movlt	r0, r3
 80243c0:	e7a4      	b.n	802430c <_printf_i+0x168>
 80243c2:	2301      	movs	r3, #1
 80243c4:	4632      	mov	r2, r6
 80243c6:	4649      	mov	r1, r9
 80243c8:	4640      	mov	r0, r8
 80243ca:	47d0      	blx	sl
 80243cc:	3001      	adds	r0, #1
 80243ce:	d09b      	beq.n	8024308 <_printf_i+0x164>
 80243d0:	3501      	adds	r5, #1
 80243d2:	68e3      	ldr	r3, [r4, #12]
 80243d4:	9903      	ldr	r1, [sp, #12]
 80243d6:	1a5b      	subs	r3, r3, r1
 80243d8:	42ab      	cmp	r3, r5
 80243da:	dcf2      	bgt.n	80243c2 <_printf_i+0x21e>
 80243dc:	e7eb      	b.n	80243b6 <_printf_i+0x212>
 80243de:	2500      	movs	r5, #0
 80243e0:	f104 0619 	add.w	r6, r4, #25
 80243e4:	e7f5      	b.n	80243d2 <_printf_i+0x22e>
 80243e6:	bf00      	nop
 80243e8:	0802d8f0 	.word	0x0802d8f0
 80243ec:	0802d901 	.word	0x0802d901

080243f0 <_scanf_float>:
 80243f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243f4:	b087      	sub	sp, #28
 80243f6:	4617      	mov	r7, r2
 80243f8:	9303      	str	r3, [sp, #12]
 80243fa:	688b      	ldr	r3, [r1, #8]
 80243fc:	1e5a      	subs	r2, r3, #1
 80243fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8024402:	bf83      	ittte	hi
 8024404:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8024408:	195b      	addhi	r3, r3, r5
 802440a:	9302      	strhi	r3, [sp, #8]
 802440c:	2300      	movls	r3, #0
 802440e:	bf86      	itte	hi
 8024410:	f240 135d 	movwhi	r3, #349	; 0x15d
 8024414:	608b      	strhi	r3, [r1, #8]
 8024416:	9302      	strls	r3, [sp, #8]
 8024418:	680b      	ldr	r3, [r1, #0]
 802441a:	468b      	mov	fp, r1
 802441c:	2500      	movs	r5, #0
 802441e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8024422:	f84b 3b1c 	str.w	r3, [fp], #28
 8024426:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802442a:	4680      	mov	r8, r0
 802442c:	460c      	mov	r4, r1
 802442e:	465e      	mov	r6, fp
 8024430:	46aa      	mov	sl, r5
 8024432:	46a9      	mov	r9, r5
 8024434:	9501      	str	r5, [sp, #4]
 8024436:	68a2      	ldr	r2, [r4, #8]
 8024438:	b152      	cbz	r2, 8024450 <_scanf_float+0x60>
 802443a:	683b      	ldr	r3, [r7, #0]
 802443c:	781b      	ldrb	r3, [r3, #0]
 802443e:	2b4e      	cmp	r3, #78	; 0x4e
 8024440:	d864      	bhi.n	802450c <_scanf_float+0x11c>
 8024442:	2b40      	cmp	r3, #64	; 0x40
 8024444:	d83c      	bhi.n	80244c0 <_scanf_float+0xd0>
 8024446:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802444a:	b2c8      	uxtb	r0, r1
 802444c:	280e      	cmp	r0, #14
 802444e:	d93a      	bls.n	80244c6 <_scanf_float+0xd6>
 8024450:	f1b9 0f00 	cmp.w	r9, #0
 8024454:	d003      	beq.n	802445e <_scanf_float+0x6e>
 8024456:	6823      	ldr	r3, [r4, #0]
 8024458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802445c:	6023      	str	r3, [r4, #0]
 802445e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8024462:	f1ba 0f01 	cmp.w	sl, #1
 8024466:	f200 8113 	bhi.w	8024690 <_scanf_float+0x2a0>
 802446a:	455e      	cmp	r6, fp
 802446c:	f200 8105 	bhi.w	802467a <_scanf_float+0x28a>
 8024470:	2501      	movs	r5, #1
 8024472:	4628      	mov	r0, r5
 8024474:	b007      	add	sp, #28
 8024476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802447a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 802447e:	2a0d      	cmp	r2, #13
 8024480:	d8e6      	bhi.n	8024450 <_scanf_float+0x60>
 8024482:	a101      	add	r1, pc, #4	; (adr r1, 8024488 <_scanf_float+0x98>)
 8024484:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8024488:	080245c7 	.word	0x080245c7
 802448c:	08024451 	.word	0x08024451
 8024490:	08024451 	.word	0x08024451
 8024494:	08024451 	.word	0x08024451
 8024498:	08024627 	.word	0x08024627
 802449c:	080245ff 	.word	0x080245ff
 80244a0:	08024451 	.word	0x08024451
 80244a4:	08024451 	.word	0x08024451
 80244a8:	080245d5 	.word	0x080245d5
 80244ac:	08024451 	.word	0x08024451
 80244b0:	08024451 	.word	0x08024451
 80244b4:	08024451 	.word	0x08024451
 80244b8:	08024451 	.word	0x08024451
 80244bc:	0802458d 	.word	0x0802458d
 80244c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80244c4:	e7db      	b.n	802447e <_scanf_float+0x8e>
 80244c6:	290e      	cmp	r1, #14
 80244c8:	d8c2      	bhi.n	8024450 <_scanf_float+0x60>
 80244ca:	a001      	add	r0, pc, #4	; (adr r0, 80244d0 <_scanf_float+0xe0>)
 80244cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80244d0:	0802457f 	.word	0x0802457f
 80244d4:	08024451 	.word	0x08024451
 80244d8:	0802457f 	.word	0x0802457f
 80244dc:	08024613 	.word	0x08024613
 80244e0:	08024451 	.word	0x08024451
 80244e4:	0802452d 	.word	0x0802452d
 80244e8:	08024569 	.word	0x08024569
 80244ec:	08024569 	.word	0x08024569
 80244f0:	08024569 	.word	0x08024569
 80244f4:	08024569 	.word	0x08024569
 80244f8:	08024569 	.word	0x08024569
 80244fc:	08024569 	.word	0x08024569
 8024500:	08024569 	.word	0x08024569
 8024504:	08024569 	.word	0x08024569
 8024508:	08024569 	.word	0x08024569
 802450c:	2b6e      	cmp	r3, #110	; 0x6e
 802450e:	d809      	bhi.n	8024524 <_scanf_float+0x134>
 8024510:	2b60      	cmp	r3, #96	; 0x60
 8024512:	d8b2      	bhi.n	802447a <_scanf_float+0x8a>
 8024514:	2b54      	cmp	r3, #84	; 0x54
 8024516:	d077      	beq.n	8024608 <_scanf_float+0x218>
 8024518:	2b59      	cmp	r3, #89	; 0x59
 802451a:	d199      	bne.n	8024450 <_scanf_float+0x60>
 802451c:	2d07      	cmp	r5, #7
 802451e:	d197      	bne.n	8024450 <_scanf_float+0x60>
 8024520:	2508      	movs	r5, #8
 8024522:	e029      	b.n	8024578 <_scanf_float+0x188>
 8024524:	2b74      	cmp	r3, #116	; 0x74
 8024526:	d06f      	beq.n	8024608 <_scanf_float+0x218>
 8024528:	2b79      	cmp	r3, #121	; 0x79
 802452a:	e7f6      	b.n	802451a <_scanf_float+0x12a>
 802452c:	6821      	ldr	r1, [r4, #0]
 802452e:	05c8      	lsls	r0, r1, #23
 8024530:	d51a      	bpl.n	8024568 <_scanf_float+0x178>
 8024532:	9b02      	ldr	r3, [sp, #8]
 8024534:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8024538:	6021      	str	r1, [r4, #0]
 802453a:	f109 0901 	add.w	r9, r9, #1
 802453e:	b11b      	cbz	r3, 8024548 <_scanf_float+0x158>
 8024540:	3b01      	subs	r3, #1
 8024542:	3201      	adds	r2, #1
 8024544:	9302      	str	r3, [sp, #8]
 8024546:	60a2      	str	r2, [r4, #8]
 8024548:	68a3      	ldr	r3, [r4, #8]
 802454a:	3b01      	subs	r3, #1
 802454c:	60a3      	str	r3, [r4, #8]
 802454e:	6923      	ldr	r3, [r4, #16]
 8024550:	3301      	adds	r3, #1
 8024552:	6123      	str	r3, [r4, #16]
 8024554:	687b      	ldr	r3, [r7, #4]
 8024556:	3b01      	subs	r3, #1
 8024558:	2b00      	cmp	r3, #0
 802455a:	607b      	str	r3, [r7, #4]
 802455c:	f340 8084 	ble.w	8024668 <_scanf_float+0x278>
 8024560:	683b      	ldr	r3, [r7, #0]
 8024562:	3301      	adds	r3, #1
 8024564:	603b      	str	r3, [r7, #0]
 8024566:	e766      	b.n	8024436 <_scanf_float+0x46>
 8024568:	eb1a 0f05 	cmn.w	sl, r5
 802456c:	f47f af70 	bne.w	8024450 <_scanf_float+0x60>
 8024570:	6822      	ldr	r2, [r4, #0]
 8024572:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8024576:	6022      	str	r2, [r4, #0]
 8024578:	f806 3b01 	strb.w	r3, [r6], #1
 802457c:	e7e4      	b.n	8024548 <_scanf_float+0x158>
 802457e:	6822      	ldr	r2, [r4, #0]
 8024580:	0610      	lsls	r0, r2, #24
 8024582:	f57f af65 	bpl.w	8024450 <_scanf_float+0x60>
 8024586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802458a:	e7f4      	b.n	8024576 <_scanf_float+0x186>
 802458c:	f1ba 0f00 	cmp.w	sl, #0
 8024590:	d10e      	bne.n	80245b0 <_scanf_float+0x1c0>
 8024592:	f1b9 0f00 	cmp.w	r9, #0
 8024596:	d10e      	bne.n	80245b6 <_scanf_float+0x1c6>
 8024598:	6822      	ldr	r2, [r4, #0]
 802459a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802459e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80245a2:	d108      	bne.n	80245b6 <_scanf_float+0x1c6>
 80245a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80245a8:	6022      	str	r2, [r4, #0]
 80245aa:	f04f 0a01 	mov.w	sl, #1
 80245ae:	e7e3      	b.n	8024578 <_scanf_float+0x188>
 80245b0:	f1ba 0f02 	cmp.w	sl, #2
 80245b4:	d055      	beq.n	8024662 <_scanf_float+0x272>
 80245b6:	2d01      	cmp	r5, #1
 80245b8:	d002      	beq.n	80245c0 <_scanf_float+0x1d0>
 80245ba:	2d04      	cmp	r5, #4
 80245bc:	f47f af48 	bne.w	8024450 <_scanf_float+0x60>
 80245c0:	3501      	adds	r5, #1
 80245c2:	b2ed      	uxtb	r5, r5
 80245c4:	e7d8      	b.n	8024578 <_scanf_float+0x188>
 80245c6:	f1ba 0f01 	cmp.w	sl, #1
 80245ca:	f47f af41 	bne.w	8024450 <_scanf_float+0x60>
 80245ce:	f04f 0a02 	mov.w	sl, #2
 80245d2:	e7d1      	b.n	8024578 <_scanf_float+0x188>
 80245d4:	b97d      	cbnz	r5, 80245f6 <_scanf_float+0x206>
 80245d6:	f1b9 0f00 	cmp.w	r9, #0
 80245da:	f47f af3c 	bne.w	8024456 <_scanf_float+0x66>
 80245de:	6822      	ldr	r2, [r4, #0]
 80245e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80245e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80245e8:	f47f af39 	bne.w	802445e <_scanf_float+0x6e>
 80245ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80245f0:	6022      	str	r2, [r4, #0]
 80245f2:	2501      	movs	r5, #1
 80245f4:	e7c0      	b.n	8024578 <_scanf_float+0x188>
 80245f6:	2d03      	cmp	r5, #3
 80245f8:	d0e2      	beq.n	80245c0 <_scanf_float+0x1d0>
 80245fa:	2d05      	cmp	r5, #5
 80245fc:	e7de      	b.n	80245bc <_scanf_float+0x1cc>
 80245fe:	2d02      	cmp	r5, #2
 8024600:	f47f af26 	bne.w	8024450 <_scanf_float+0x60>
 8024604:	2503      	movs	r5, #3
 8024606:	e7b7      	b.n	8024578 <_scanf_float+0x188>
 8024608:	2d06      	cmp	r5, #6
 802460a:	f47f af21 	bne.w	8024450 <_scanf_float+0x60>
 802460e:	2507      	movs	r5, #7
 8024610:	e7b2      	b.n	8024578 <_scanf_float+0x188>
 8024612:	6822      	ldr	r2, [r4, #0]
 8024614:	0591      	lsls	r1, r2, #22
 8024616:	f57f af1b 	bpl.w	8024450 <_scanf_float+0x60>
 802461a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 802461e:	6022      	str	r2, [r4, #0]
 8024620:	f8cd 9004 	str.w	r9, [sp, #4]
 8024624:	e7a8      	b.n	8024578 <_scanf_float+0x188>
 8024626:	6822      	ldr	r2, [r4, #0]
 8024628:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 802462c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8024630:	d006      	beq.n	8024640 <_scanf_float+0x250>
 8024632:	0550      	lsls	r0, r2, #21
 8024634:	f57f af0c 	bpl.w	8024450 <_scanf_float+0x60>
 8024638:	f1b9 0f00 	cmp.w	r9, #0
 802463c:	f43f af0f 	beq.w	802445e <_scanf_float+0x6e>
 8024640:	0591      	lsls	r1, r2, #22
 8024642:	bf58      	it	pl
 8024644:	9901      	ldrpl	r1, [sp, #4]
 8024646:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802464a:	bf58      	it	pl
 802464c:	eba9 0101 	subpl.w	r1, r9, r1
 8024650:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8024654:	bf58      	it	pl
 8024656:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802465a:	6022      	str	r2, [r4, #0]
 802465c:	f04f 0900 	mov.w	r9, #0
 8024660:	e78a      	b.n	8024578 <_scanf_float+0x188>
 8024662:	f04f 0a03 	mov.w	sl, #3
 8024666:	e787      	b.n	8024578 <_scanf_float+0x188>
 8024668:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802466c:	4639      	mov	r1, r7
 802466e:	4640      	mov	r0, r8
 8024670:	4798      	blx	r3
 8024672:	2800      	cmp	r0, #0
 8024674:	f43f aedf 	beq.w	8024436 <_scanf_float+0x46>
 8024678:	e6ea      	b.n	8024450 <_scanf_float+0x60>
 802467a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802467e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8024682:	463a      	mov	r2, r7
 8024684:	4640      	mov	r0, r8
 8024686:	4798      	blx	r3
 8024688:	6923      	ldr	r3, [r4, #16]
 802468a:	3b01      	subs	r3, #1
 802468c:	6123      	str	r3, [r4, #16]
 802468e:	e6ec      	b.n	802446a <_scanf_float+0x7a>
 8024690:	1e6b      	subs	r3, r5, #1
 8024692:	2b06      	cmp	r3, #6
 8024694:	d825      	bhi.n	80246e2 <_scanf_float+0x2f2>
 8024696:	2d02      	cmp	r5, #2
 8024698:	d836      	bhi.n	8024708 <_scanf_float+0x318>
 802469a:	455e      	cmp	r6, fp
 802469c:	f67f aee8 	bls.w	8024470 <_scanf_float+0x80>
 80246a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80246a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80246a8:	463a      	mov	r2, r7
 80246aa:	4640      	mov	r0, r8
 80246ac:	4798      	blx	r3
 80246ae:	6923      	ldr	r3, [r4, #16]
 80246b0:	3b01      	subs	r3, #1
 80246b2:	6123      	str	r3, [r4, #16]
 80246b4:	e7f1      	b.n	802469a <_scanf_float+0x2aa>
 80246b6:	9802      	ldr	r0, [sp, #8]
 80246b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80246bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80246c0:	9002      	str	r0, [sp, #8]
 80246c2:	463a      	mov	r2, r7
 80246c4:	4640      	mov	r0, r8
 80246c6:	4798      	blx	r3
 80246c8:	6923      	ldr	r3, [r4, #16]
 80246ca:	3b01      	subs	r3, #1
 80246cc:	6123      	str	r3, [r4, #16]
 80246ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80246d2:	fa5f fa8a 	uxtb.w	sl, sl
 80246d6:	f1ba 0f02 	cmp.w	sl, #2
 80246da:	d1ec      	bne.n	80246b6 <_scanf_float+0x2c6>
 80246dc:	3d03      	subs	r5, #3
 80246de:	b2ed      	uxtb	r5, r5
 80246e0:	1b76      	subs	r6, r6, r5
 80246e2:	6823      	ldr	r3, [r4, #0]
 80246e4:	05da      	lsls	r2, r3, #23
 80246e6:	d52f      	bpl.n	8024748 <_scanf_float+0x358>
 80246e8:	055b      	lsls	r3, r3, #21
 80246ea:	d510      	bpl.n	802470e <_scanf_float+0x31e>
 80246ec:	455e      	cmp	r6, fp
 80246ee:	f67f aebf 	bls.w	8024470 <_scanf_float+0x80>
 80246f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80246f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80246fa:	463a      	mov	r2, r7
 80246fc:	4640      	mov	r0, r8
 80246fe:	4798      	blx	r3
 8024700:	6923      	ldr	r3, [r4, #16]
 8024702:	3b01      	subs	r3, #1
 8024704:	6123      	str	r3, [r4, #16]
 8024706:	e7f1      	b.n	80246ec <_scanf_float+0x2fc>
 8024708:	46aa      	mov	sl, r5
 802470a:	9602      	str	r6, [sp, #8]
 802470c:	e7df      	b.n	80246ce <_scanf_float+0x2de>
 802470e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8024712:	6923      	ldr	r3, [r4, #16]
 8024714:	2965      	cmp	r1, #101	; 0x65
 8024716:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 802471a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 802471e:	6123      	str	r3, [r4, #16]
 8024720:	d00c      	beq.n	802473c <_scanf_float+0x34c>
 8024722:	2945      	cmp	r1, #69	; 0x45
 8024724:	d00a      	beq.n	802473c <_scanf_float+0x34c>
 8024726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802472a:	463a      	mov	r2, r7
 802472c:	4640      	mov	r0, r8
 802472e:	4798      	blx	r3
 8024730:	6923      	ldr	r3, [r4, #16]
 8024732:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8024736:	3b01      	subs	r3, #1
 8024738:	1eb5      	subs	r5, r6, #2
 802473a:	6123      	str	r3, [r4, #16]
 802473c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8024740:	463a      	mov	r2, r7
 8024742:	4640      	mov	r0, r8
 8024744:	4798      	blx	r3
 8024746:	462e      	mov	r6, r5
 8024748:	6825      	ldr	r5, [r4, #0]
 802474a:	f015 0510 	ands.w	r5, r5, #16
 802474e:	d159      	bne.n	8024804 <_scanf_float+0x414>
 8024750:	7035      	strb	r5, [r6, #0]
 8024752:	6823      	ldr	r3, [r4, #0]
 8024754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8024758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802475c:	d11b      	bne.n	8024796 <_scanf_float+0x3a6>
 802475e:	9b01      	ldr	r3, [sp, #4]
 8024760:	454b      	cmp	r3, r9
 8024762:	eba3 0209 	sub.w	r2, r3, r9
 8024766:	d123      	bne.n	80247b0 <_scanf_float+0x3c0>
 8024768:	2200      	movs	r2, #0
 802476a:	4659      	mov	r1, fp
 802476c:	4640      	mov	r0, r8
 802476e:	f001 f859 	bl	8025824 <_strtod_r>
 8024772:	6822      	ldr	r2, [r4, #0]
 8024774:	9b03      	ldr	r3, [sp, #12]
 8024776:	f012 0f02 	tst.w	r2, #2
 802477a:	ec57 6b10 	vmov	r6, r7, d0
 802477e:	681b      	ldr	r3, [r3, #0]
 8024780:	d021      	beq.n	80247c6 <_scanf_float+0x3d6>
 8024782:	9903      	ldr	r1, [sp, #12]
 8024784:	1d1a      	adds	r2, r3, #4
 8024786:	600a      	str	r2, [r1, #0]
 8024788:	681b      	ldr	r3, [r3, #0]
 802478a:	e9c3 6700 	strd	r6, r7, [r3]
 802478e:	68e3      	ldr	r3, [r4, #12]
 8024790:	3301      	adds	r3, #1
 8024792:	60e3      	str	r3, [r4, #12]
 8024794:	e66d      	b.n	8024472 <_scanf_float+0x82>
 8024796:	9b04      	ldr	r3, [sp, #16]
 8024798:	2b00      	cmp	r3, #0
 802479a:	d0e5      	beq.n	8024768 <_scanf_float+0x378>
 802479c:	9905      	ldr	r1, [sp, #20]
 802479e:	230a      	movs	r3, #10
 80247a0:	462a      	mov	r2, r5
 80247a2:	3101      	adds	r1, #1
 80247a4:	4640      	mov	r0, r8
 80247a6:	f001 f8d1 	bl	802594c <_strtol_r>
 80247aa:	9b04      	ldr	r3, [sp, #16]
 80247ac:	9e05      	ldr	r6, [sp, #20]
 80247ae:	1ac2      	subs	r2, r0, r3
 80247b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80247b4:	429e      	cmp	r6, r3
 80247b6:	bf28      	it	cs
 80247b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80247bc:	4912      	ldr	r1, [pc, #72]	; (8024808 <_scanf_float+0x418>)
 80247be:	4630      	mov	r0, r6
 80247c0:	f000 f930 	bl	8024a24 <siprintf>
 80247c4:	e7d0      	b.n	8024768 <_scanf_float+0x378>
 80247c6:	9903      	ldr	r1, [sp, #12]
 80247c8:	f012 0f04 	tst.w	r2, #4
 80247cc:	f103 0204 	add.w	r2, r3, #4
 80247d0:	600a      	str	r2, [r1, #0]
 80247d2:	d1d9      	bne.n	8024788 <_scanf_float+0x398>
 80247d4:	f8d3 8000 	ldr.w	r8, [r3]
 80247d8:	ee10 2a10 	vmov	r2, s0
 80247dc:	ee10 0a10 	vmov	r0, s0
 80247e0:	463b      	mov	r3, r7
 80247e2:	4639      	mov	r1, r7
 80247e4:	f7dc f9d2 	bl	8000b8c <__aeabi_dcmpun>
 80247e8:	b128      	cbz	r0, 80247f6 <_scanf_float+0x406>
 80247ea:	4808      	ldr	r0, [pc, #32]	; (802480c <_scanf_float+0x41c>)
 80247ec:	f000 f8e0 	bl	80249b0 <nanf>
 80247f0:	ed88 0a00 	vstr	s0, [r8]
 80247f4:	e7cb      	b.n	802478e <_scanf_float+0x39e>
 80247f6:	4630      	mov	r0, r6
 80247f8:	4639      	mov	r1, r7
 80247fa:	f7dc fa25 	bl	8000c48 <__aeabi_d2f>
 80247fe:	f8c8 0000 	str.w	r0, [r8]
 8024802:	e7c4      	b.n	802478e <_scanf_float+0x39e>
 8024804:	2500      	movs	r5, #0
 8024806:	e634      	b.n	8024472 <_scanf_float+0x82>
 8024808:	0802d912 	.word	0x0802d912
 802480c:	0802da1b 	.word	0x0802da1b

08024810 <iprintf>:
 8024810:	b40f      	push	{r0, r1, r2, r3}
 8024812:	4b0a      	ldr	r3, [pc, #40]	; (802483c <iprintf+0x2c>)
 8024814:	b513      	push	{r0, r1, r4, lr}
 8024816:	681c      	ldr	r4, [r3, #0]
 8024818:	b124      	cbz	r4, 8024824 <iprintf+0x14>
 802481a:	69a3      	ldr	r3, [r4, #24]
 802481c:	b913      	cbnz	r3, 8024824 <iprintf+0x14>
 802481e:	4620      	mov	r0, r4
 8024820:	f7fe ffe2 	bl	80237e8 <__sinit>
 8024824:	ab05      	add	r3, sp, #20
 8024826:	9a04      	ldr	r2, [sp, #16]
 8024828:	68a1      	ldr	r1, [r4, #8]
 802482a:	9301      	str	r3, [sp, #4]
 802482c:	4620      	mov	r0, r4
 802482e:	f003 fe17 	bl	8028460 <_vfiprintf_r>
 8024832:	b002      	add	sp, #8
 8024834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024838:	b004      	add	sp, #16
 802483a:	4770      	bx	lr
 802483c:	200000fc 	.word	0x200000fc

08024840 <rand>:
 8024840:	4b16      	ldr	r3, [pc, #88]	; (802489c <rand+0x5c>)
 8024842:	b510      	push	{r4, lr}
 8024844:	681c      	ldr	r4, [r3, #0]
 8024846:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024848:	b9b3      	cbnz	r3, 8024878 <rand+0x38>
 802484a:	2018      	movs	r0, #24
 802484c:	f002 fd66 	bl	802731c <malloc>
 8024850:	63a0      	str	r0, [r4, #56]	; 0x38
 8024852:	b928      	cbnz	r0, 8024860 <rand+0x20>
 8024854:	4602      	mov	r2, r0
 8024856:	4b12      	ldr	r3, [pc, #72]	; (80248a0 <rand+0x60>)
 8024858:	4812      	ldr	r0, [pc, #72]	; (80248a4 <rand+0x64>)
 802485a:	214e      	movs	r1, #78	; 0x4e
 802485c:	f001 fa54 	bl	8025d08 <__assert_func>
 8024860:	4a11      	ldr	r2, [pc, #68]	; (80248a8 <rand+0x68>)
 8024862:	4b12      	ldr	r3, [pc, #72]	; (80248ac <rand+0x6c>)
 8024864:	e9c0 2300 	strd	r2, r3, [r0]
 8024868:	4b11      	ldr	r3, [pc, #68]	; (80248b0 <rand+0x70>)
 802486a:	6083      	str	r3, [r0, #8]
 802486c:	230b      	movs	r3, #11
 802486e:	8183      	strh	r3, [r0, #12]
 8024870:	2201      	movs	r2, #1
 8024872:	2300      	movs	r3, #0
 8024874:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8024878:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802487a:	4a0e      	ldr	r2, [pc, #56]	; (80248b4 <rand+0x74>)
 802487c:	6920      	ldr	r0, [r4, #16]
 802487e:	6963      	ldr	r3, [r4, #20]
 8024880:	490d      	ldr	r1, [pc, #52]	; (80248b8 <rand+0x78>)
 8024882:	4342      	muls	r2, r0
 8024884:	fb01 2203 	mla	r2, r1, r3, r2
 8024888:	fba0 0101 	umull	r0, r1, r0, r1
 802488c:	1c43      	adds	r3, r0, #1
 802488e:	eb42 0001 	adc.w	r0, r2, r1
 8024892:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8024896:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802489a:	bd10      	pop	{r4, pc}
 802489c:	200000fc 	.word	0x200000fc
 80248a0:	0802d917 	.word	0x0802d917
 80248a4:	0802d92e 	.word	0x0802d92e
 80248a8:	abcd330e 	.word	0xabcd330e
 80248ac:	e66d1234 	.word	0xe66d1234
 80248b0:	0005deec 	.word	0x0005deec
 80248b4:	5851f42d 	.word	0x5851f42d
 80248b8:	4c957f2d 	.word	0x4c957f2d

080248bc <cleanup_glue>:
 80248bc:	b538      	push	{r3, r4, r5, lr}
 80248be:	460c      	mov	r4, r1
 80248c0:	6809      	ldr	r1, [r1, #0]
 80248c2:	4605      	mov	r5, r0
 80248c4:	b109      	cbz	r1, 80248ca <cleanup_glue+0xe>
 80248c6:	f7ff fff9 	bl	80248bc <cleanup_glue>
 80248ca:	4621      	mov	r1, r4
 80248cc:	4628      	mov	r0, r5
 80248ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80248d2:	f003 ba21 	b.w	8027d18 <_free_r>
	...

080248d8 <_reclaim_reent>:
 80248d8:	4b2c      	ldr	r3, [pc, #176]	; (802498c <_reclaim_reent+0xb4>)
 80248da:	681b      	ldr	r3, [r3, #0]
 80248dc:	4283      	cmp	r3, r0
 80248de:	b570      	push	{r4, r5, r6, lr}
 80248e0:	4604      	mov	r4, r0
 80248e2:	d051      	beq.n	8024988 <_reclaim_reent+0xb0>
 80248e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80248e6:	b143      	cbz	r3, 80248fa <_reclaim_reent+0x22>
 80248e8:	68db      	ldr	r3, [r3, #12]
 80248ea:	2b00      	cmp	r3, #0
 80248ec:	d14a      	bne.n	8024984 <_reclaim_reent+0xac>
 80248ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80248f0:	6819      	ldr	r1, [r3, #0]
 80248f2:	b111      	cbz	r1, 80248fa <_reclaim_reent+0x22>
 80248f4:	4620      	mov	r0, r4
 80248f6:	f003 fa0f 	bl	8027d18 <_free_r>
 80248fa:	6961      	ldr	r1, [r4, #20]
 80248fc:	b111      	cbz	r1, 8024904 <_reclaim_reent+0x2c>
 80248fe:	4620      	mov	r0, r4
 8024900:	f003 fa0a 	bl	8027d18 <_free_r>
 8024904:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8024906:	b111      	cbz	r1, 802490e <_reclaim_reent+0x36>
 8024908:	4620      	mov	r0, r4
 802490a:	f003 fa05 	bl	8027d18 <_free_r>
 802490e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8024910:	b111      	cbz	r1, 8024918 <_reclaim_reent+0x40>
 8024912:	4620      	mov	r0, r4
 8024914:	f003 fa00 	bl	8027d18 <_free_r>
 8024918:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802491a:	b111      	cbz	r1, 8024922 <_reclaim_reent+0x4a>
 802491c:	4620      	mov	r0, r4
 802491e:	f003 f9fb 	bl	8027d18 <_free_r>
 8024922:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024924:	b111      	cbz	r1, 802492c <_reclaim_reent+0x54>
 8024926:	4620      	mov	r0, r4
 8024928:	f003 f9f6 	bl	8027d18 <_free_r>
 802492c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802492e:	b111      	cbz	r1, 8024936 <_reclaim_reent+0x5e>
 8024930:	4620      	mov	r0, r4
 8024932:	f003 f9f1 	bl	8027d18 <_free_r>
 8024936:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8024938:	b111      	cbz	r1, 8024940 <_reclaim_reent+0x68>
 802493a:	4620      	mov	r0, r4
 802493c:	f003 f9ec 	bl	8027d18 <_free_r>
 8024940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024942:	b111      	cbz	r1, 802494a <_reclaim_reent+0x72>
 8024944:	4620      	mov	r0, r4
 8024946:	f003 f9e7 	bl	8027d18 <_free_r>
 802494a:	69a3      	ldr	r3, [r4, #24]
 802494c:	b1e3      	cbz	r3, 8024988 <_reclaim_reent+0xb0>
 802494e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024950:	4620      	mov	r0, r4
 8024952:	4798      	blx	r3
 8024954:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024956:	b1b9      	cbz	r1, 8024988 <_reclaim_reent+0xb0>
 8024958:	4620      	mov	r0, r4
 802495a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802495e:	f7ff bfad 	b.w	80248bc <cleanup_glue>
 8024962:	5949      	ldr	r1, [r1, r5]
 8024964:	b941      	cbnz	r1, 8024978 <_reclaim_reent+0xa0>
 8024966:	3504      	adds	r5, #4
 8024968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802496a:	2d80      	cmp	r5, #128	; 0x80
 802496c:	68d9      	ldr	r1, [r3, #12]
 802496e:	d1f8      	bne.n	8024962 <_reclaim_reent+0x8a>
 8024970:	4620      	mov	r0, r4
 8024972:	f003 f9d1 	bl	8027d18 <_free_r>
 8024976:	e7ba      	b.n	80248ee <_reclaim_reent+0x16>
 8024978:	680e      	ldr	r6, [r1, #0]
 802497a:	4620      	mov	r0, r4
 802497c:	f003 f9cc 	bl	8027d18 <_free_r>
 8024980:	4631      	mov	r1, r6
 8024982:	e7ef      	b.n	8024964 <_reclaim_reent+0x8c>
 8024984:	2500      	movs	r5, #0
 8024986:	e7ef      	b.n	8024968 <_reclaim_reent+0x90>
 8024988:	bd70      	pop	{r4, r5, r6, pc}
 802498a:	bf00      	nop
 802498c:	200000fc 	.word	0x200000fc

08024990 <_sbrk_r>:
 8024990:	b538      	push	{r3, r4, r5, lr}
 8024992:	4d06      	ldr	r5, [pc, #24]	; (80249ac <_sbrk_r+0x1c>)
 8024994:	2300      	movs	r3, #0
 8024996:	4604      	mov	r4, r0
 8024998:	4608      	mov	r0, r1
 802499a:	602b      	str	r3, [r5, #0]
 802499c:	f7dd fe56 	bl	800264c <_sbrk>
 80249a0:	1c43      	adds	r3, r0, #1
 80249a2:	d102      	bne.n	80249aa <_sbrk_r+0x1a>
 80249a4:	682b      	ldr	r3, [r5, #0]
 80249a6:	b103      	cbz	r3, 80249aa <_sbrk_r+0x1a>
 80249a8:	6023      	str	r3, [r4, #0]
 80249aa:	bd38      	pop	{r3, r4, r5, pc}
 80249ac:	2001ae44 	.word	0x2001ae44

080249b0 <nanf>:
 80249b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80249b8 <nanf+0x8>
 80249b4:	4770      	bx	lr
 80249b6:	bf00      	nop
 80249b8:	7fc00000 	.word	0x7fc00000

080249bc <sniprintf>:
 80249bc:	b40c      	push	{r2, r3}
 80249be:	b530      	push	{r4, r5, lr}
 80249c0:	4b17      	ldr	r3, [pc, #92]	; (8024a20 <sniprintf+0x64>)
 80249c2:	1e0c      	subs	r4, r1, #0
 80249c4:	681d      	ldr	r5, [r3, #0]
 80249c6:	b09d      	sub	sp, #116	; 0x74
 80249c8:	da08      	bge.n	80249dc <sniprintf+0x20>
 80249ca:	238b      	movs	r3, #139	; 0x8b
 80249cc:	602b      	str	r3, [r5, #0]
 80249ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80249d2:	b01d      	add	sp, #116	; 0x74
 80249d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80249d8:	b002      	add	sp, #8
 80249da:	4770      	bx	lr
 80249dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80249e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80249e4:	bf14      	ite	ne
 80249e6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80249ea:	4623      	moveq	r3, r4
 80249ec:	9304      	str	r3, [sp, #16]
 80249ee:	9307      	str	r3, [sp, #28]
 80249f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80249f4:	9002      	str	r0, [sp, #8]
 80249f6:	9006      	str	r0, [sp, #24]
 80249f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80249fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80249fe:	ab21      	add	r3, sp, #132	; 0x84
 8024a00:	a902      	add	r1, sp, #8
 8024a02:	4628      	mov	r0, r5
 8024a04:	9301      	str	r3, [sp, #4]
 8024a06:	f003 fa2f 	bl	8027e68 <_svfiprintf_r>
 8024a0a:	1c43      	adds	r3, r0, #1
 8024a0c:	bfbc      	itt	lt
 8024a0e:	238b      	movlt	r3, #139	; 0x8b
 8024a10:	602b      	strlt	r3, [r5, #0]
 8024a12:	2c00      	cmp	r4, #0
 8024a14:	d0dd      	beq.n	80249d2 <sniprintf+0x16>
 8024a16:	9b02      	ldr	r3, [sp, #8]
 8024a18:	2200      	movs	r2, #0
 8024a1a:	701a      	strb	r2, [r3, #0]
 8024a1c:	e7d9      	b.n	80249d2 <sniprintf+0x16>
 8024a1e:	bf00      	nop
 8024a20:	200000fc 	.word	0x200000fc

08024a24 <siprintf>:
 8024a24:	b40e      	push	{r1, r2, r3}
 8024a26:	b500      	push	{lr}
 8024a28:	b09c      	sub	sp, #112	; 0x70
 8024a2a:	ab1d      	add	r3, sp, #116	; 0x74
 8024a2c:	9002      	str	r0, [sp, #8]
 8024a2e:	9006      	str	r0, [sp, #24]
 8024a30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024a34:	4809      	ldr	r0, [pc, #36]	; (8024a5c <siprintf+0x38>)
 8024a36:	9107      	str	r1, [sp, #28]
 8024a38:	9104      	str	r1, [sp, #16]
 8024a3a:	4909      	ldr	r1, [pc, #36]	; (8024a60 <siprintf+0x3c>)
 8024a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8024a40:	9105      	str	r1, [sp, #20]
 8024a42:	6800      	ldr	r0, [r0, #0]
 8024a44:	9301      	str	r3, [sp, #4]
 8024a46:	a902      	add	r1, sp, #8
 8024a48:	f003 fa0e 	bl	8027e68 <_svfiprintf_r>
 8024a4c:	9b02      	ldr	r3, [sp, #8]
 8024a4e:	2200      	movs	r2, #0
 8024a50:	701a      	strb	r2, [r3, #0]
 8024a52:	b01c      	add	sp, #112	; 0x70
 8024a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8024a58:	b003      	add	sp, #12
 8024a5a:	4770      	bx	lr
 8024a5c:	200000fc 	.word	0x200000fc
 8024a60:	ffff0208 	.word	0xffff0208

08024a64 <siscanf>:
 8024a64:	b40e      	push	{r1, r2, r3}
 8024a66:	b510      	push	{r4, lr}
 8024a68:	b09f      	sub	sp, #124	; 0x7c
 8024a6a:	ac21      	add	r4, sp, #132	; 0x84
 8024a6c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8024a70:	f854 2b04 	ldr.w	r2, [r4], #4
 8024a74:	9201      	str	r2, [sp, #4]
 8024a76:	f8ad 101c 	strh.w	r1, [sp, #28]
 8024a7a:	9004      	str	r0, [sp, #16]
 8024a7c:	9008      	str	r0, [sp, #32]
 8024a7e:	f7db fbd1 	bl	8000224 <strlen>
 8024a82:	4b0c      	ldr	r3, [pc, #48]	; (8024ab4 <siscanf+0x50>)
 8024a84:	9005      	str	r0, [sp, #20]
 8024a86:	9009      	str	r0, [sp, #36]	; 0x24
 8024a88:	930d      	str	r3, [sp, #52]	; 0x34
 8024a8a:	480b      	ldr	r0, [pc, #44]	; (8024ab8 <siscanf+0x54>)
 8024a8c:	9a01      	ldr	r2, [sp, #4]
 8024a8e:	6800      	ldr	r0, [r0, #0]
 8024a90:	9403      	str	r4, [sp, #12]
 8024a92:	2300      	movs	r3, #0
 8024a94:	9311      	str	r3, [sp, #68]	; 0x44
 8024a96:	9316      	str	r3, [sp, #88]	; 0x58
 8024a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024a9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024aa0:	a904      	add	r1, sp, #16
 8024aa2:	4623      	mov	r3, r4
 8024aa4:	f003 fb3a 	bl	802811c <__ssvfiscanf_r>
 8024aa8:	b01f      	add	sp, #124	; 0x7c
 8024aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024aae:	b003      	add	sp, #12
 8024ab0:	4770      	bx	lr
 8024ab2:	bf00      	nop
 8024ab4:	08024adf 	.word	0x08024adf
 8024ab8:	200000fc 	.word	0x200000fc

08024abc <__sread>:
 8024abc:	b510      	push	{r4, lr}
 8024abe:	460c      	mov	r4, r1
 8024ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024ac4:	f003 ff4e 	bl	8028964 <_read_r>
 8024ac8:	2800      	cmp	r0, #0
 8024aca:	bfab      	itete	ge
 8024acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024ace:	89a3      	ldrhlt	r3, [r4, #12]
 8024ad0:	181b      	addge	r3, r3, r0
 8024ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024ad6:	bfac      	ite	ge
 8024ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8024ada:	81a3      	strhlt	r3, [r4, #12]
 8024adc:	bd10      	pop	{r4, pc}

08024ade <__seofread>:
 8024ade:	2000      	movs	r0, #0
 8024ae0:	4770      	bx	lr

08024ae2 <__swrite>:
 8024ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024ae6:	461f      	mov	r7, r3
 8024ae8:	898b      	ldrh	r3, [r1, #12]
 8024aea:	05db      	lsls	r3, r3, #23
 8024aec:	4605      	mov	r5, r0
 8024aee:	460c      	mov	r4, r1
 8024af0:	4616      	mov	r6, r2
 8024af2:	d505      	bpl.n	8024b00 <__swrite+0x1e>
 8024af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024af8:	2302      	movs	r3, #2
 8024afa:	2200      	movs	r2, #0
 8024afc:	f002 fbfc 	bl	80272f8 <_lseek_r>
 8024b00:	89a3      	ldrh	r3, [r4, #12]
 8024b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024b0a:	81a3      	strh	r3, [r4, #12]
 8024b0c:	4632      	mov	r2, r6
 8024b0e:	463b      	mov	r3, r7
 8024b10:	4628      	mov	r0, r5
 8024b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024b16:	f001 b8e5 	b.w	8025ce4 <_write_r>

08024b1a <__sseek>:
 8024b1a:	b510      	push	{r4, lr}
 8024b1c:	460c      	mov	r4, r1
 8024b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024b22:	f002 fbe9 	bl	80272f8 <_lseek_r>
 8024b26:	1c43      	adds	r3, r0, #1
 8024b28:	89a3      	ldrh	r3, [r4, #12]
 8024b2a:	bf15      	itete	ne
 8024b2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8024b2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024b32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024b36:	81a3      	strheq	r3, [r4, #12]
 8024b38:	bf18      	it	ne
 8024b3a:	81a3      	strhne	r3, [r4, #12]
 8024b3c:	bd10      	pop	{r4, pc}

08024b3e <__sclose>:
 8024b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024b42:	f001 b8ff 	b.w	8025d44 <_close_r>
	...

08024b48 <strncasecmp>:
 8024b48:	b570      	push	{r4, r5, r6, lr}
 8024b4a:	4e0f      	ldr	r6, [pc, #60]	; (8024b88 <strncasecmp+0x40>)
 8024b4c:	4604      	mov	r4, r0
 8024b4e:	440a      	add	r2, r1
 8024b50:	428a      	cmp	r2, r1
 8024b52:	d101      	bne.n	8024b58 <strncasecmp+0x10>
 8024b54:	2000      	movs	r0, #0
 8024b56:	e013      	b.n	8024b80 <strncasecmp+0x38>
 8024b58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024b5c:	5d98      	ldrb	r0, [r3, r6]
 8024b5e:	f000 0003 	and.w	r0, r0, #3
 8024b62:	2801      	cmp	r0, #1
 8024b64:	f811 0b01 	ldrb.w	r0, [r1], #1
 8024b68:	5c35      	ldrb	r5, [r6, r0]
 8024b6a:	f005 0503 	and.w	r5, r5, #3
 8024b6e:	bf08      	it	eq
 8024b70:	3320      	addeq	r3, #32
 8024b72:	2d01      	cmp	r5, #1
 8024b74:	bf08      	it	eq
 8024b76:	3020      	addeq	r0, #32
 8024b78:	1a1b      	subs	r3, r3, r0
 8024b7a:	d102      	bne.n	8024b82 <strncasecmp+0x3a>
 8024b7c:	2800      	cmp	r0, #0
 8024b7e:	d1e7      	bne.n	8024b50 <strncasecmp+0x8>
 8024b80:	bd70      	pop	{r4, r5, r6, pc}
 8024b82:	4618      	mov	r0, r3
 8024b84:	e7fc      	b.n	8024b80 <strncasecmp+0x38>
 8024b86:	bf00      	nop
 8024b88:	0802d779 	.word	0x0802d779

08024b8c <strncmp>:
 8024b8c:	b510      	push	{r4, lr}
 8024b8e:	b17a      	cbz	r2, 8024bb0 <strncmp+0x24>
 8024b90:	4603      	mov	r3, r0
 8024b92:	3901      	subs	r1, #1
 8024b94:	1884      	adds	r4, r0, r2
 8024b96:	f813 0b01 	ldrb.w	r0, [r3], #1
 8024b9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8024b9e:	4290      	cmp	r0, r2
 8024ba0:	d101      	bne.n	8024ba6 <strncmp+0x1a>
 8024ba2:	42a3      	cmp	r3, r4
 8024ba4:	d101      	bne.n	8024baa <strncmp+0x1e>
 8024ba6:	1a80      	subs	r0, r0, r2
 8024ba8:	bd10      	pop	{r4, pc}
 8024baa:	2800      	cmp	r0, #0
 8024bac:	d1f3      	bne.n	8024b96 <strncmp+0xa>
 8024bae:	e7fa      	b.n	8024ba6 <strncmp+0x1a>
 8024bb0:	4610      	mov	r0, r2
 8024bb2:	e7f9      	b.n	8024ba8 <strncmp+0x1c>

08024bb4 <strncpy>:
 8024bb4:	b510      	push	{r4, lr}
 8024bb6:	3901      	subs	r1, #1
 8024bb8:	4603      	mov	r3, r0
 8024bba:	b132      	cbz	r2, 8024bca <strncpy+0x16>
 8024bbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024bc0:	f803 4b01 	strb.w	r4, [r3], #1
 8024bc4:	3a01      	subs	r2, #1
 8024bc6:	2c00      	cmp	r4, #0
 8024bc8:	d1f7      	bne.n	8024bba <strncpy+0x6>
 8024bca:	441a      	add	r2, r3
 8024bcc:	2100      	movs	r1, #0
 8024bce:	4293      	cmp	r3, r2
 8024bd0:	d100      	bne.n	8024bd4 <strncpy+0x20>
 8024bd2:	bd10      	pop	{r4, pc}
 8024bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8024bd8:	e7f9      	b.n	8024bce <strncpy+0x1a>

08024bda <sulp>:
 8024bda:	b570      	push	{r4, r5, r6, lr}
 8024bdc:	4604      	mov	r4, r0
 8024bde:	460d      	mov	r5, r1
 8024be0:	ec45 4b10 	vmov	d0, r4, r5
 8024be4:	4616      	mov	r6, r2
 8024be6:	f002 ff31 	bl	8027a4c <__ulp>
 8024bea:	ec51 0b10 	vmov	r0, r1, d0
 8024bee:	b17e      	cbz	r6, 8024c10 <sulp+0x36>
 8024bf0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8024bf4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8024bf8:	2b00      	cmp	r3, #0
 8024bfa:	dd09      	ble.n	8024c10 <sulp+0x36>
 8024bfc:	051b      	lsls	r3, r3, #20
 8024bfe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8024c02:	2400      	movs	r4, #0
 8024c04:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8024c08:	4622      	mov	r2, r4
 8024c0a:	462b      	mov	r3, r5
 8024c0c:	f7db fd24 	bl	8000658 <__aeabi_dmul>
 8024c10:	bd70      	pop	{r4, r5, r6, pc}
 8024c12:	0000      	movs	r0, r0
 8024c14:	0000      	movs	r0, r0
	...

08024c18 <_strtod_l>:
 8024c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c1c:	ed2d 8b02 	vpush	{d8}
 8024c20:	b09d      	sub	sp, #116	; 0x74
 8024c22:	461f      	mov	r7, r3
 8024c24:	2300      	movs	r3, #0
 8024c26:	9318      	str	r3, [sp, #96]	; 0x60
 8024c28:	4ba2      	ldr	r3, [pc, #648]	; (8024eb4 <_strtod_l+0x29c>)
 8024c2a:	9213      	str	r2, [sp, #76]	; 0x4c
 8024c2c:	681b      	ldr	r3, [r3, #0]
 8024c2e:	9305      	str	r3, [sp, #20]
 8024c30:	4604      	mov	r4, r0
 8024c32:	4618      	mov	r0, r3
 8024c34:	4688      	mov	r8, r1
 8024c36:	f7db faf5 	bl	8000224 <strlen>
 8024c3a:	f04f 0a00 	mov.w	sl, #0
 8024c3e:	4605      	mov	r5, r0
 8024c40:	f04f 0b00 	mov.w	fp, #0
 8024c44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8024c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024c4a:	781a      	ldrb	r2, [r3, #0]
 8024c4c:	2a2b      	cmp	r2, #43	; 0x2b
 8024c4e:	d04e      	beq.n	8024cee <_strtod_l+0xd6>
 8024c50:	d83b      	bhi.n	8024cca <_strtod_l+0xb2>
 8024c52:	2a0d      	cmp	r2, #13
 8024c54:	d834      	bhi.n	8024cc0 <_strtod_l+0xa8>
 8024c56:	2a08      	cmp	r2, #8
 8024c58:	d834      	bhi.n	8024cc4 <_strtod_l+0xac>
 8024c5a:	2a00      	cmp	r2, #0
 8024c5c:	d03e      	beq.n	8024cdc <_strtod_l+0xc4>
 8024c5e:	2300      	movs	r3, #0
 8024c60:	930a      	str	r3, [sp, #40]	; 0x28
 8024c62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8024c64:	7833      	ldrb	r3, [r6, #0]
 8024c66:	2b30      	cmp	r3, #48	; 0x30
 8024c68:	f040 80b0 	bne.w	8024dcc <_strtod_l+0x1b4>
 8024c6c:	7873      	ldrb	r3, [r6, #1]
 8024c6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8024c72:	2b58      	cmp	r3, #88	; 0x58
 8024c74:	d168      	bne.n	8024d48 <_strtod_l+0x130>
 8024c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024c78:	9301      	str	r3, [sp, #4]
 8024c7a:	ab18      	add	r3, sp, #96	; 0x60
 8024c7c:	9702      	str	r7, [sp, #8]
 8024c7e:	9300      	str	r3, [sp, #0]
 8024c80:	4a8d      	ldr	r2, [pc, #564]	; (8024eb8 <_strtod_l+0x2a0>)
 8024c82:	ab19      	add	r3, sp, #100	; 0x64
 8024c84:	a917      	add	r1, sp, #92	; 0x5c
 8024c86:	4620      	mov	r0, r4
 8024c88:	f002 f82a 	bl	8026ce0 <__gethex>
 8024c8c:	f010 0707 	ands.w	r7, r0, #7
 8024c90:	4605      	mov	r5, r0
 8024c92:	d005      	beq.n	8024ca0 <_strtod_l+0x88>
 8024c94:	2f06      	cmp	r7, #6
 8024c96:	d12c      	bne.n	8024cf2 <_strtod_l+0xda>
 8024c98:	3601      	adds	r6, #1
 8024c9a:	2300      	movs	r3, #0
 8024c9c:	9617      	str	r6, [sp, #92]	; 0x5c
 8024c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8024ca0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	f040 8590 	bne.w	80257c8 <_strtod_l+0xbb0>
 8024ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024caa:	b1eb      	cbz	r3, 8024ce8 <_strtod_l+0xd0>
 8024cac:	4652      	mov	r2, sl
 8024cae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8024cb2:	ec43 2b10 	vmov	d0, r2, r3
 8024cb6:	b01d      	add	sp, #116	; 0x74
 8024cb8:	ecbd 8b02 	vpop	{d8}
 8024cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cc0:	2a20      	cmp	r2, #32
 8024cc2:	d1cc      	bne.n	8024c5e <_strtod_l+0x46>
 8024cc4:	3301      	adds	r3, #1
 8024cc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8024cc8:	e7be      	b.n	8024c48 <_strtod_l+0x30>
 8024cca:	2a2d      	cmp	r2, #45	; 0x2d
 8024ccc:	d1c7      	bne.n	8024c5e <_strtod_l+0x46>
 8024cce:	2201      	movs	r2, #1
 8024cd0:	920a      	str	r2, [sp, #40]	; 0x28
 8024cd2:	1c5a      	adds	r2, r3, #1
 8024cd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8024cd6:	785b      	ldrb	r3, [r3, #1]
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	d1c2      	bne.n	8024c62 <_strtod_l+0x4a>
 8024cdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024cde:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8024ce2:	2b00      	cmp	r3, #0
 8024ce4:	f040 856e 	bne.w	80257c4 <_strtod_l+0xbac>
 8024ce8:	4652      	mov	r2, sl
 8024cea:	465b      	mov	r3, fp
 8024cec:	e7e1      	b.n	8024cb2 <_strtod_l+0x9a>
 8024cee:	2200      	movs	r2, #0
 8024cf0:	e7ee      	b.n	8024cd0 <_strtod_l+0xb8>
 8024cf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024cf4:	b13a      	cbz	r2, 8024d06 <_strtod_l+0xee>
 8024cf6:	2135      	movs	r1, #53	; 0x35
 8024cf8:	a81a      	add	r0, sp, #104	; 0x68
 8024cfa:	f002 ffb2 	bl	8027c62 <__copybits>
 8024cfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024d00:	4620      	mov	r0, r4
 8024d02:	f002 fb71 	bl	80273e8 <_Bfree>
 8024d06:	3f01      	subs	r7, #1
 8024d08:	2f04      	cmp	r7, #4
 8024d0a:	d806      	bhi.n	8024d1a <_strtod_l+0x102>
 8024d0c:	e8df f007 	tbb	[pc, r7]
 8024d10:	1714030a 	.word	0x1714030a
 8024d14:	0a          	.byte	0x0a
 8024d15:	00          	.byte	0x00
 8024d16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8024d1a:	0728      	lsls	r0, r5, #28
 8024d1c:	d5c0      	bpl.n	8024ca0 <_strtod_l+0x88>
 8024d1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8024d22:	e7bd      	b.n	8024ca0 <_strtod_l+0x88>
 8024d24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8024d28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024d2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8024d2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8024d32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8024d36:	e7f0      	b.n	8024d1a <_strtod_l+0x102>
 8024d38:	f8df b180 	ldr.w	fp, [pc, #384]	; 8024ebc <_strtod_l+0x2a4>
 8024d3c:	e7ed      	b.n	8024d1a <_strtod_l+0x102>
 8024d3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8024d42:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8024d46:	e7e8      	b.n	8024d1a <_strtod_l+0x102>
 8024d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024d4a:	1c5a      	adds	r2, r3, #1
 8024d4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8024d4e:	785b      	ldrb	r3, [r3, #1]
 8024d50:	2b30      	cmp	r3, #48	; 0x30
 8024d52:	d0f9      	beq.n	8024d48 <_strtod_l+0x130>
 8024d54:	2b00      	cmp	r3, #0
 8024d56:	d0a3      	beq.n	8024ca0 <_strtod_l+0x88>
 8024d58:	2301      	movs	r3, #1
 8024d5a:	f04f 0900 	mov.w	r9, #0
 8024d5e:	9304      	str	r3, [sp, #16]
 8024d60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024d62:	9308      	str	r3, [sp, #32]
 8024d64:	f8cd 901c 	str.w	r9, [sp, #28]
 8024d68:	464f      	mov	r7, r9
 8024d6a:	220a      	movs	r2, #10
 8024d6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024d6e:	7806      	ldrb	r6, [r0, #0]
 8024d70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8024d74:	b2d9      	uxtb	r1, r3
 8024d76:	2909      	cmp	r1, #9
 8024d78:	d92a      	bls.n	8024dd0 <_strtod_l+0x1b8>
 8024d7a:	9905      	ldr	r1, [sp, #20]
 8024d7c:	462a      	mov	r2, r5
 8024d7e:	f7ff ff05 	bl	8024b8c <strncmp>
 8024d82:	b398      	cbz	r0, 8024dec <_strtod_l+0x1d4>
 8024d84:	2000      	movs	r0, #0
 8024d86:	4632      	mov	r2, r6
 8024d88:	463d      	mov	r5, r7
 8024d8a:	9005      	str	r0, [sp, #20]
 8024d8c:	4603      	mov	r3, r0
 8024d8e:	2a65      	cmp	r2, #101	; 0x65
 8024d90:	d001      	beq.n	8024d96 <_strtod_l+0x17e>
 8024d92:	2a45      	cmp	r2, #69	; 0x45
 8024d94:	d118      	bne.n	8024dc8 <_strtod_l+0x1b0>
 8024d96:	b91d      	cbnz	r5, 8024da0 <_strtod_l+0x188>
 8024d98:	9a04      	ldr	r2, [sp, #16]
 8024d9a:	4302      	orrs	r2, r0
 8024d9c:	d09e      	beq.n	8024cdc <_strtod_l+0xc4>
 8024d9e:	2500      	movs	r5, #0
 8024da0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8024da4:	f108 0201 	add.w	r2, r8, #1
 8024da8:	9217      	str	r2, [sp, #92]	; 0x5c
 8024daa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024dae:	2a2b      	cmp	r2, #43	; 0x2b
 8024db0:	d075      	beq.n	8024e9e <_strtod_l+0x286>
 8024db2:	2a2d      	cmp	r2, #45	; 0x2d
 8024db4:	d07b      	beq.n	8024eae <_strtod_l+0x296>
 8024db6:	f04f 0c00 	mov.w	ip, #0
 8024dba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8024dbe:	2909      	cmp	r1, #9
 8024dc0:	f240 8082 	bls.w	8024ec8 <_strtod_l+0x2b0>
 8024dc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8024dc8:	2600      	movs	r6, #0
 8024dca:	e09d      	b.n	8024f08 <_strtod_l+0x2f0>
 8024dcc:	2300      	movs	r3, #0
 8024dce:	e7c4      	b.n	8024d5a <_strtod_l+0x142>
 8024dd0:	2f08      	cmp	r7, #8
 8024dd2:	bfd8      	it	le
 8024dd4:	9907      	ldrle	r1, [sp, #28]
 8024dd6:	f100 0001 	add.w	r0, r0, #1
 8024dda:	bfda      	itte	le
 8024ddc:	fb02 3301 	mlale	r3, r2, r1, r3
 8024de0:	9307      	strle	r3, [sp, #28]
 8024de2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8024de6:	3701      	adds	r7, #1
 8024de8:	9017      	str	r0, [sp, #92]	; 0x5c
 8024dea:	e7bf      	b.n	8024d6c <_strtod_l+0x154>
 8024dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024dee:	195a      	adds	r2, r3, r5
 8024df0:	9217      	str	r2, [sp, #92]	; 0x5c
 8024df2:	5d5a      	ldrb	r2, [r3, r5]
 8024df4:	2f00      	cmp	r7, #0
 8024df6:	d037      	beq.n	8024e68 <_strtod_l+0x250>
 8024df8:	9005      	str	r0, [sp, #20]
 8024dfa:	463d      	mov	r5, r7
 8024dfc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8024e00:	2b09      	cmp	r3, #9
 8024e02:	d912      	bls.n	8024e2a <_strtod_l+0x212>
 8024e04:	2301      	movs	r3, #1
 8024e06:	e7c2      	b.n	8024d8e <_strtod_l+0x176>
 8024e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024e0a:	1c5a      	adds	r2, r3, #1
 8024e0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8024e0e:	785a      	ldrb	r2, [r3, #1]
 8024e10:	3001      	adds	r0, #1
 8024e12:	2a30      	cmp	r2, #48	; 0x30
 8024e14:	d0f8      	beq.n	8024e08 <_strtod_l+0x1f0>
 8024e16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8024e1a:	2b08      	cmp	r3, #8
 8024e1c:	f200 84d9 	bhi.w	80257d2 <_strtod_l+0xbba>
 8024e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024e22:	9005      	str	r0, [sp, #20]
 8024e24:	2000      	movs	r0, #0
 8024e26:	9308      	str	r3, [sp, #32]
 8024e28:	4605      	mov	r5, r0
 8024e2a:	3a30      	subs	r2, #48	; 0x30
 8024e2c:	f100 0301 	add.w	r3, r0, #1
 8024e30:	d014      	beq.n	8024e5c <_strtod_l+0x244>
 8024e32:	9905      	ldr	r1, [sp, #20]
 8024e34:	4419      	add	r1, r3
 8024e36:	9105      	str	r1, [sp, #20]
 8024e38:	462b      	mov	r3, r5
 8024e3a:	eb00 0e05 	add.w	lr, r0, r5
 8024e3e:	210a      	movs	r1, #10
 8024e40:	4573      	cmp	r3, lr
 8024e42:	d113      	bne.n	8024e6c <_strtod_l+0x254>
 8024e44:	182b      	adds	r3, r5, r0
 8024e46:	2b08      	cmp	r3, #8
 8024e48:	f105 0501 	add.w	r5, r5, #1
 8024e4c:	4405      	add	r5, r0
 8024e4e:	dc1c      	bgt.n	8024e8a <_strtod_l+0x272>
 8024e50:	9907      	ldr	r1, [sp, #28]
 8024e52:	230a      	movs	r3, #10
 8024e54:	fb03 2301 	mla	r3, r3, r1, r2
 8024e58:	9307      	str	r3, [sp, #28]
 8024e5a:	2300      	movs	r3, #0
 8024e5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024e5e:	1c51      	adds	r1, r2, #1
 8024e60:	9117      	str	r1, [sp, #92]	; 0x5c
 8024e62:	7852      	ldrb	r2, [r2, #1]
 8024e64:	4618      	mov	r0, r3
 8024e66:	e7c9      	b.n	8024dfc <_strtod_l+0x1e4>
 8024e68:	4638      	mov	r0, r7
 8024e6a:	e7d2      	b.n	8024e12 <_strtod_l+0x1fa>
 8024e6c:	2b08      	cmp	r3, #8
 8024e6e:	dc04      	bgt.n	8024e7a <_strtod_l+0x262>
 8024e70:	9e07      	ldr	r6, [sp, #28]
 8024e72:	434e      	muls	r6, r1
 8024e74:	9607      	str	r6, [sp, #28]
 8024e76:	3301      	adds	r3, #1
 8024e78:	e7e2      	b.n	8024e40 <_strtod_l+0x228>
 8024e7a:	f103 0c01 	add.w	ip, r3, #1
 8024e7e:	f1bc 0f10 	cmp.w	ip, #16
 8024e82:	bfd8      	it	le
 8024e84:	fb01 f909 	mulle.w	r9, r1, r9
 8024e88:	e7f5      	b.n	8024e76 <_strtod_l+0x25e>
 8024e8a:	2d10      	cmp	r5, #16
 8024e8c:	bfdc      	itt	le
 8024e8e:	230a      	movle	r3, #10
 8024e90:	fb03 2909 	mlale	r9, r3, r9, r2
 8024e94:	e7e1      	b.n	8024e5a <_strtod_l+0x242>
 8024e96:	2300      	movs	r3, #0
 8024e98:	9305      	str	r3, [sp, #20]
 8024e9a:	2301      	movs	r3, #1
 8024e9c:	e77c      	b.n	8024d98 <_strtod_l+0x180>
 8024e9e:	f04f 0c00 	mov.w	ip, #0
 8024ea2:	f108 0202 	add.w	r2, r8, #2
 8024ea6:	9217      	str	r2, [sp, #92]	; 0x5c
 8024ea8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8024eac:	e785      	b.n	8024dba <_strtod_l+0x1a2>
 8024eae:	f04f 0c01 	mov.w	ip, #1
 8024eb2:	e7f6      	b.n	8024ea2 <_strtod_l+0x28a>
 8024eb4:	0802dafc 	.word	0x0802dafc
 8024eb8:	0802d98c 	.word	0x0802d98c
 8024ebc:	7ff00000 	.word	0x7ff00000
 8024ec0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024ec2:	1c51      	adds	r1, r2, #1
 8024ec4:	9117      	str	r1, [sp, #92]	; 0x5c
 8024ec6:	7852      	ldrb	r2, [r2, #1]
 8024ec8:	2a30      	cmp	r2, #48	; 0x30
 8024eca:	d0f9      	beq.n	8024ec0 <_strtod_l+0x2a8>
 8024ecc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8024ed0:	2908      	cmp	r1, #8
 8024ed2:	f63f af79 	bhi.w	8024dc8 <_strtod_l+0x1b0>
 8024ed6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8024eda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024edc:	9206      	str	r2, [sp, #24]
 8024ede:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024ee0:	1c51      	adds	r1, r2, #1
 8024ee2:	9117      	str	r1, [sp, #92]	; 0x5c
 8024ee4:	7852      	ldrb	r2, [r2, #1]
 8024ee6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8024eea:	2e09      	cmp	r6, #9
 8024eec:	d937      	bls.n	8024f5e <_strtod_l+0x346>
 8024eee:	9e06      	ldr	r6, [sp, #24]
 8024ef0:	1b89      	subs	r1, r1, r6
 8024ef2:	2908      	cmp	r1, #8
 8024ef4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8024ef8:	dc02      	bgt.n	8024f00 <_strtod_l+0x2e8>
 8024efa:	4576      	cmp	r6, lr
 8024efc:	bfa8      	it	ge
 8024efe:	4676      	movge	r6, lr
 8024f00:	f1bc 0f00 	cmp.w	ip, #0
 8024f04:	d000      	beq.n	8024f08 <_strtod_l+0x2f0>
 8024f06:	4276      	negs	r6, r6
 8024f08:	2d00      	cmp	r5, #0
 8024f0a:	d14d      	bne.n	8024fa8 <_strtod_l+0x390>
 8024f0c:	9904      	ldr	r1, [sp, #16]
 8024f0e:	4301      	orrs	r1, r0
 8024f10:	f47f aec6 	bne.w	8024ca0 <_strtod_l+0x88>
 8024f14:	2b00      	cmp	r3, #0
 8024f16:	f47f aee1 	bne.w	8024cdc <_strtod_l+0xc4>
 8024f1a:	2a69      	cmp	r2, #105	; 0x69
 8024f1c:	d027      	beq.n	8024f6e <_strtod_l+0x356>
 8024f1e:	dc24      	bgt.n	8024f6a <_strtod_l+0x352>
 8024f20:	2a49      	cmp	r2, #73	; 0x49
 8024f22:	d024      	beq.n	8024f6e <_strtod_l+0x356>
 8024f24:	2a4e      	cmp	r2, #78	; 0x4e
 8024f26:	f47f aed9 	bne.w	8024cdc <_strtod_l+0xc4>
 8024f2a:	499f      	ldr	r1, [pc, #636]	; (80251a8 <_strtod_l+0x590>)
 8024f2c:	a817      	add	r0, sp, #92	; 0x5c
 8024f2e:	f002 f92f 	bl	8027190 <__match>
 8024f32:	2800      	cmp	r0, #0
 8024f34:	f43f aed2 	beq.w	8024cdc <_strtod_l+0xc4>
 8024f38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024f3a:	781b      	ldrb	r3, [r3, #0]
 8024f3c:	2b28      	cmp	r3, #40	; 0x28
 8024f3e:	d12d      	bne.n	8024f9c <_strtod_l+0x384>
 8024f40:	499a      	ldr	r1, [pc, #616]	; (80251ac <_strtod_l+0x594>)
 8024f42:	aa1a      	add	r2, sp, #104	; 0x68
 8024f44:	a817      	add	r0, sp, #92	; 0x5c
 8024f46:	f002 f937 	bl	80271b8 <__hexnan>
 8024f4a:	2805      	cmp	r0, #5
 8024f4c:	d126      	bne.n	8024f9c <_strtod_l+0x384>
 8024f4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024f50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8024f54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8024f58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8024f5c:	e6a0      	b.n	8024ca0 <_strtod_l+0x88>
 8024f5e:	210a      	movs	r1, #10
 8024f60:	fb01 2e0e 	mla	lr, r1, lr, r2
 8024f64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8024f68:	e7b9      	b.n	8024ede <_strtod_l+0x2c6>
 8024f6a:	2a6e      	cmp	r2, #110	; 0x6e
 8024f6c:	e7db      	b.n	8024f26 <_strtod_l+0x30e>
 8024f6e:	4990      	ldr	r1, [pc, #576]	; (80251b0 <_strtod_l+0x598>)
 8024f70:	a817      	add	r0, sp, #92	; 0x5c
 8024f72:	f002 f90d 	bl	8027190 <__match>
 8024f76:	2800      	cmp	r0, #0
 8024f78:	f43f aeb0 	beq.w	8024cdc <_strtod_l+0xc4>
 8024f7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024f7e:	498d      	ldr	r1, [pc, #564]	; (80251b4 <_strtod_l+0x59c>)
 8024f80:	3b01      	subs	r3, #1
 8024f82:	a817      	add	r0, sp, #92	; 0x5c
 8024f84:	9317      	str	r3, [sp, #92]	; 0x5c
 8024f86:	f002 f903 	bl	8027190 <__match>
 8024f8a:	b910      	cbnz	r0, 8024f92 <_strtod_l+0x37a>
 8024f8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024f8e:	3301      	adds	r3, #1
 8024f90:	9317      	str	r3, [sp, #92]	; 0x5c
 8024f92:	f8df b230 	ldr.w	fp, [pc, #560]	; 80251c4 <_strtod_l+0x5ac>
 8024f96:	f04f 0a00 	mov.w	sl, #0
 8024f9a:	e681      	b.n	8024ca0 <_strtod_l+0x88>
 8024f9c:	4886      	ldr	r0, [pc, #536]	; (80251b8 <_strtod_l+0x5a0>)
 8024f9e:	f003 fcf3 	bl	8028988 <nan>
 8024fa2:	ec5b ab10 	vmov	sl, fp, d0
 8024fa6:	e67b      	b.n	8024ca0 <_strtod_l+0x88>
 8024fa8:	9b05      	ldr	r3, [sp, #20]
 8024faa:	9807      	ldr	r0, [sp, #28]
 8024fac:	1af3      	subs	r3, r6, r3
 8024fae:	2f00      	cmp	r7, #0
 8024fb0:	bf08      	it	eq
 8024fb2:	462f      	moveq	r7, r5
 8024fb4:	2d10      	cmp	r5, #16
 8024fb6:	9306      	str	r3, [sp, #24]
 8024fb8:	46a8      	mov	r8, r5
 8024fba:	bfa8      	it	ge
 8024fbc:	f04f 0810 	movge.w	r8, #16
 8024fc0:	f7db fad0 	bl	8000564 <__aeabi_ui2d>
 8024fc4:	2d09      	cmp	r5, #9
 8024fc6:	4682      	mov	sl, r0
 8024fc8:	468b      	mov	fp, r1
 8024fca:	dd13      	ble.n	8024ff4 <_strtod_l+0x3dc>
 8024fcc:	4b7b      	ldr	r3, [pc, #492]	; (80251bc <_strtod_l+0x5a4>)
 8024fce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8024fd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8024fd6:	f7db fb3f 	bl	8000658 <__aeabi_dmul>
 8024fda:	4682      	mov	sl, r0
 8024fdc:	4648      	mov	r0, r9
 8024fde:	468b      	mov	fp, r1
 8024fe0:	f7db fac0 	bl	8000564 <__aeabi_ui2d>
 8024fe4:	4602      	mov	r2, r0
 8024fe6:	460b      	mov	r3, r1
 8024fe8:	4650      	mov	r0, sl
 8024fea:	4659      	mov	r1, fp
 8024fec:	f7db f97e 	bl	80002ec <__adddf3>
 8024ff0:	4682      	mov	sl, r0
 8024ff2:	468b      	mov	fp, r1
 8024ff4:	2d0f      	cmp	r5, #15
 8024ff6:	dc38      	bgt.n	802506a <_strtod_l+0x452>
 8024ff8:	9b06      	ldr	r3, [sp, #24]
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	f43f ae50 	beq.w	8024ca0 <_strtod_l+0x88>
 8025000:	dd24      	ble.n	802504c <_strtod_l+0x434>
 8025002:	2b16      	cmp	r3, #22
 8025004:	dc0b      	bgt.n	802501e <_strtod_l+0x406>
 8025006:	496d      	ldr	r1, [pc, #436]	; (80251bc <_strtod_l+0x5a4>)
 8025008:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802500c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025010:	4652      	mov	r2, sl
 8025012:	465b      	mov	r3, fp
 8025014:	f7db fb20 	bl	8000658 <__aeabi_dmul>
 8025018:	4682      	mov	sl, r0
 802501a:	468b      	mov	fp, r1
 802501c:	e640      	b.n	8024ca0 <_strtod_l+0x88>
 802501e:	9a06      	ldr	r2, [sp, #24]
 8025020:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8025024:	4293      	cmp	r3, r2
 8025026:	db20      	blt.n	802506a <_strtod_l+0x452>
 8025028:	4c64      	ldr	r4, [pc, #400]	; (80251bc <_strtod_l+0x5a4>)
 802502a:	f1c5 050f 	rsb	r5, r5, #15
 802502e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8025032:	4652      	mov	r2, sl
 8025034:	465b      	mov	r3, fp
 8025036:	e9d1 0100 	ldrd	r0, r1, [r1]
 802503a:	f7db fb0d 	bl	8000658 <__aeabi_dmul>
 802503e:	9b06      	ldr	r3, [sp, #24]
 8025040:	1b5d      	subs	r5, r3, r5
 8025042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8025046:	e9d4 2300 	ldrd	r2, r3, [r4]
 802504a:	e7e3      	b.n	8025014 <_strtod_l+0x3fc>
 802504c:	9b06      	ldr	r3, [sp, #24]
 802504e:	3316      	adds	r3, #22
 8025050:	db0b      	blt.n	802506a <_strtod_l+0x452>
 8025052:	9b05      	ldr	r3, [sp, #20]
 8025054:	1b9e      	subs	r6, r3, r6
 8025056:	4b59      	ldr	r3, [pc, #356]	; (80251bc <_strtod_l+0x5a4>)
 8025058:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 802505c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8025060:	4650      	mov	r0, sl
 8025062:	4659      	mov	r1, fp
 8025064:	f7db fc22 	bl	80008ac <__aeabi_ddiv>
 8025068:	e7d6      	b.n	8025018 <_strtod_l+0x400>
 802506a:	9b06      	ldr	r3, [sp, #24]
 802506c:	eba5 0808 	sub.w	r8, r5, r8
 8025070:	4498      	add	r8, r3
 8025072:	f1b8 0f00 	cmp.w	r8, #0
 8025076:	dd74      	ble.n	8025162 <_strtod_l+0x54a>
 8025078:	f018 030f 	ands.w	r3, r8, #15
 802507c:	d00a      	beq.n	8025094 <_strtod_l+0x47c>
 802507e:	494f      	ldr	r1, [pc, #316]	; (80251bc <_strtod_l+0x5a4>)
 8025080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8025084:	4652      	mov	r2, sl
 8025086:	465b      	mov	r3, fp
 8025088:	e9d1 0100 	ldrd	r0, r1, [r1]
 802508c:	f7db fae4 	bl	8000658 <__aeabi_dmul>
 8025090:	4682      	mov	sl, r0
 8025092:	468b      	mov	fp, r1
 8025094:	f038 080f 	bics.w	r8, r8, #15
 8025098:	d04f      	beq.n	802513a <_strtod_l+0x522>
 802509a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 802509e:	dd22      	ble.n	80250e6 <_strtod_l+0x4ce>
 80250a0:	2500      	movs	r5, #0
 80250a2:	462e      	mov	r6, r5
 80250a4:	9507      	str	r5, [sp, #28]
 80250a6:	9505      	str	r5, [sp, #20]
 80250a8:	2322      	movs	r3, #34	; 0x22
 80250aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80251c4 <_strtod_l+0x5ac>
 80250ae:	6023      	str	r3, [r4, #0]
 80250b0:	f04f 0a00 	mov.w	sl, #0
 80250b4:	9b07      	ldr	r3, [sp, #28]
 80250b6:	2b00      	cmp	r3, #0
 80250b8:	f43f adf2 	beq.w	8024ca0 <_strtod_l+0x88>
 80250bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80250be:	4620      	mov	r0, r4
 80250c0:	f002 f992 	bl	80273e8 <_Bfree>
 80250c4:	9905      	ldr	r1, [sp, #20]
 80250c6:	4620      	mov	r0, r4
 80250c8:	f002 f98e 	bl	80273e8 <_Bfree>
 80250cc:	4631      	mov	r1, r6
 80250ce:	4620      	mov	r0, r4
 80250d0:	f002 f98a 	bl	80273e8 <_Bfree>
 80250d4:	9907      	ldr	r1, [sp, #28]
 80250d6:	4620      	mov	r0, r4
 80250d8:	f002 f986 	bl	80273e8 <_Bfree>
 80250dc:	4629      	mov	r1, r5
 80250de:	4620      	mov	r0, r4
 80250e0:	f002 f982 	bl	80273e8 <_Bfree>
 80250e4:	e5dc      	b.n	8024ca0 <_strtod_l+0x88>
 80250e6:	4b36      	ldr	r3, [pc, #216]	; (80251c0 <_strtod_l+0x5a8>)
 80250e8:	9304      	str	r3, [sp, #16]
 80250ea:	2300      	movs	r3, #0
 80250ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80250f0:	4650      	mov	r0, sl
 80250f2:	4659      	mov	r1, fp
 80250f4:	4699      	mov	r9, r3
 80250f6:	f1b8 0f01 	cmp.w	r8, #1
 80250fa:	dc21      	bgt.n	8025140 <_strtod_l+0x528>
 80250fc:	b10b      	cbz	r3, 8025102 <_strtod_l+0x4ea>
 80250fe:	4682      	mov	sl, r0
 8025100:	468b      	mov	fp, r1
 8025102:	4b2f      	ldr	r3, [pc, #188]	; (80251c0 <_strtod_l+0x5a8>)
 8025104:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8025108:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 802510c:	4652      	mov	r2, sl
 802510e:	465b      	mov	r3, fp
 8025110:	e9d9 0100 	ldrd	r0, r1, [r9]
 8025114:	f7db faa0 	bl	8000658 <__aeabi_dmul>
 8025118:	4b2a      	ldr	r3, [pc, #168]	; (80251c4 <_strtod_l+0x5ac>)
 802511a:	460a      	mov	r2, r1
 802511c:	400b      	ands	r3, r1
 802511e:	492a      	ldr	r1, [pc, #168]	; (80251c8 <_strtod_l+0x5b0>)
 8025120:	428b      	cmp	r3, r1
 8025122:	4682      	mov	sl, r0
 8025124:	d8bc      	bhi.n	80250a0 <_strtod_l+0x488>
 8025126:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802512a:	428b      	cmp	r3, r1
 802512c:	bf86      	itte	hi
 802512e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80251cc <_strtod_l+0x5b4>
 8025132:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8025136:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 802513a:	2300      	movs	r3, #0
 802513c:	9304      	str	r3, [sp, #16]
 802513e:	e084      	b.n	802524a <_strtod_l+0x632>
 8025140:	f018 0f01 	tst.w	r8, #1
 8025144:	d005      	beq.n	8025152 <_strtod_l+0x53a>
 8025146:	9b04      	ldr	r3, [sp, #16]
 8025148:	e9d3 2300 	ldrd	r2, r3, [r3]
 802514c:	f7db fa84 	bl	8000658 <__aeabi_dmul>
 8025150:	2301      	movs	r3, #1
 8025152:	9a04      	ldr	r2, [sp, #16]
 8025154:	3208      	adds	r2, #8
 8025156:	f109 0901 	add.w	r9, r9, #1
 802515a:	ea4f 0868 	mov.w	r8, r8, asr #1
 802515e:	9204      	str	r2, [sp, #16]
 8025160:	e7c9      	b.n	80250f6 <_strtod_l+0x4de>
 8025162:	d0ea      	beq.n	802513a <_strtod_l+0x522>
 8025164:	f1c8 0800 	rsb	r8, r8, #0
 8025168:	f018 020f 	ands.w	r2, r8, #15
 802516c:	d00a      	beq.n	8025184 <_strtod_l+0x56c>
 802516e:	4b13      	ldr	r3, [pc, #76]	; (80251bc <_strtod_l+0x5a4>)
 8025170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025174:	4650      	mov	r0, sl
 8025176:	4659      	mov	r1, fp
 8025178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802517c:	f7db fb96 	bl	80008ac <__aeabi_ddiv>
 8025180:	4682      	mov	sl, r0
 8025182:	468b      	mov	fp, r1
 8025184:	ea5f 1828 	movs.w	r8, r8, asr #4
 8025188:	d0d7      	beq.n	802513a <_strtod_l+0x522>
 802518a:	f1b8 0f1f 	cmp.w	r8, #31
 802518e:	dd1f      	ble.n	80251d0 <_strtod_l+0x5b8>
 8025190:	2500      	movs	r5, #0
 8025192:	462e      	mov	r6, r5
 8025194:	9507      	str	r5, [sp, #28]
 8025196:	9505      	str	r5, [sp, #20]
 8025198:	2322      	movs	r3, #34	; 0x22
 802519a:	f04f 0a00 	mov.w	sl, #0
 802519e:	f04f 0b00 	mov.w	fp, #0
 80251a2:	6023      	str	r3, [r4, #0]
 80251a4:	e786      	b.n	80250b4 <_strtod_l+0x49c>
 80251a6:	bf00      	nop
 80251a8:	0802d8ed 	.word	0x0802d8ed
 80251ac:	0802d9a0 	.word	0x0802d9a0
 80251b0:	0802d8e5 	.word	0x0802d8e5
 80251b4:	0802da1f 	.word	0x0802da1f
 80251b8:	0802da1b 	.word	0x0802da1b
 80251bc:	0802db98 	.word	0x0802db98
 80251c0:	0802db70 	.word	0x0802db70
 80251c4:	7ff00000 	.word	0x7ff00000
 80251c8:	7ca00000 	.word	0x7ca00000
 80251cc:	7fefffff 	.word	0x7fefffff
 80251d0:	f018 0310 	ands.w	r3, r8, #16
 80251d4:	bf18      	it	ne
 80251d6:	236a      	movne	r3, #106	; 0x6a
 80251d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8025588 <_strtod_l+0x970>
 80251dc:	9304      	str	r3, [sp, #16]
 80251de:	4650      	mov	r0, sl
 80251e0:	4659      	mov	r1, fp
 80251e2:	2300      	movs	r3, #0
 80251e4:	f018 0f01 	tst.w	r8, #1
 80251e8:	d004      	beq.n	80251f4 <_strtod_l+0x5dc>
 80251ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80251ee:	f7db fa33 	bl	8000658 <__aeabi_dmul>
 80251f2:	2301      	movs	r3, #1
 80251f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80251f8:	f109 0908 	add.w	r9, r9, #8
 80251fc:	d1f2      	bne.n	80251e4 <_strtod_l+0x5cc>
 80251fe:	b10b      	cbz	r3, 8025204 <_strtod_l+0x5ec>
 8025200:	4682      	mov	sl, r0
 8025202:	468b      	mov	fp, r1
 8025204:	9b04      	ldr	r3, [sp, #16]
 8025206:	b1c3      	cbz	r3, 802523a <_strtod_l+0x622>
 8025208:	f3cb 520a 	ubfx	r2, fp, #20, #11
 802520c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8025210:	2b00      	cmp	r3, #0
 8025212:	4659      	mov	r1, fp
 8025214:	dd11      	ble.n	802523a <_strtod_l+0x622>
 8025216:	2b1f      	cmp	r3, #31
 8025218:	f340 8124 	ble.w	8025464 <_strtod_l+0x84c>
 802521c:	2b34      	cmp	r3, #52	; 0x34
 802521e:	bfde      	ittt	le
 8025220:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8025224:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8025228:	fa03 f202 	lslle.w	r2, r3, r2
 802522c:	f04f 0a00 	mov.w	sl, #0
 8025230:	bfcc      	ite	gt
 8025232:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8025236:	ea02 0b01 	andle.w	fp, r2, r1
 802523a:	2200      	movs	r2, #0
 802523c:	2300      	movs	r3, #0
 802523e:	4650      	mov	r0, sl
 8025240:	4659      	mov	r1, fp
 8025242:	f7db fc71 	bl	8000b28 <__aeabi_dcmpeq>
 8025246:	2800      	cmp	r0, #0
 8025248:	d1a2      	bne.n	8025190 <_strtod_l+0x578>
 802524a:	9b07      	ldr	r3, [sp, #28]
 802524c:	9300      	str	r3, [sp, #0]
 802524e:	9908      	ldr	r1, [sp, #32]
 8025250:	462b      	mov	r3, r5
 8025252:	463a      	mov	r2, r7
 8025254:	4620      	mov	r0, r4
 8025256:	f002 f92f 	bl	80274b8 <__s2b>
 802525a:	9007      	str	r0, [sp, #28]
 802525c:	2800      	cmp	r0, #0
 802525e:	f43f af1f 	beq.w	80250a0 <_strtod_l+0x488>
 8025262:	9b05      	ldr	r3, [sp, #20]
 8025264:	1b9e      	subs	r6, r3, r6
 8025266:	9b06      	ldr	r3, [sp, #24]
 8025268:	2b00      	cmp	r3, #0
 802526a:	bfb4      	ite	lt
 802526c:	4633      	movlt	r3, r6
 802526e:	2300      	movge	r3, #0
 8025270:	930c      	str	r3, [sp, #48]	; 0x30
 8025272:	9b06      	ldr	r3, [sp, #24]
 8025274:	2500      	movs	r5, #0
 8025276:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802527a:	9312      	str	r3, [sp, #72]	; 0x48
 802527c:	462e      	mov	r6, r5
 802527e:	9b07      	ldr	r3, [sp, #28]
 8025280:	4620      	mov	r0, r4
 8025282:	6859      	ldr	r1, [r3, #4]
 8025284:	f002 f870 	bl	8027368 <_Balloc>
 8025288:	9005      	str	r0, [sp, #20]
 802528a:	2800      	cmp	r0, #0
 802528c:	f43f af0c 	beq.w	80250a8 <_strtod_l+0x490>
 8025290:	9b07      	ldr	r3, [sp, #28]
 8025292:	691a      	ldr	r2, [r3, #16]
 8025294:	3202      	adds	r2, #2
 8025296:	f103 010c 	add.w	r1, r3, #12
 802529a:	0092      	lsls	r2, r2, #2
 802529c:	300c      	adds	r0, #12
 802529e:	f7fe fb78 	bl	8023992 <memcpy>
 80252a2:	ec4b ab10 	vmov	d0, sl, fp
 80252a6:	aa1a      	add	r2, sp, #104	; 0x68
 80252a8:	a919      	add	r1, sp, #100	; 0x64
 80252aa:	4620      	mov	r0, r4
 80252ac:	f002 fc4a 	bl	8027b44 <__d2b>
 80252b0:	ec4b ab18 	vmov	d8, sl, fp
 80252b4:	9018      	str	r0, [sp, #96]	; 0x60
 80252b6:	2800      	cmp	r0, #0
 80252b8:	f43f aef6 	beq.w	80250a8 <_strtod_l+0x490>
 80252bc:	2101      	movs	r1, #1
 80252be:	4620      	mov	r0, r4
 80252c0:	f002 f994 	bl	80275ec <__i2b>
 80252c4:	4606      	mov	r6, r0
 80252c6:	2800      	cmp	r0, #0
 80252c8:	f43f aeee 	beq.w	80250a8 <_strtod_l+0x490>
 80252cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80252ce:	9904      	ldr	r1, [sp, #16]
 80252d0:	2b00      	cmp	r3, #0
 80252d2:	bfab      	itete	ge
 80252d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80252d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80252d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80252da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80252de:	bfac      	ite	ge
 80252e0:	eb03 0902 	addge.w	r9, r3, r2
 80252e4:	1ad7      	sublt	r7, r2, r3
 80252e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80252e8:	eba3 0801 	sub.w	r8, r3, r1
 80252ec:	4490      	add	r8, r2
 80252ee:	4ba1      	ldr	r3, [pc, #644]	; (8025574 <_strtod_l+0x95c>)
 80252f0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80252f4:	4598      	cmp	r8, r3
 80252f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80252fa:	f280 80c7 	bge.w	802548c <_strtod_l+0x874>
 80252fe:	eba3 0308 	sub.w	r3, r3, r8
 8025302:	2b1f      	cmp	r3, #31
 8025304:	eba2 0203 	sub.w	r2, r2, r3
 8025308:	f04f 0101 	mov.w	r1, #1
 802530c:	f300 80b1 	bgt.w	8025472 <_strtod_l+0x85a>
 8025310:	fa01 f303 	lsl.w	r3, r1, r3
 8025314:	930d      	str	r3, [sp, #52]	; 0x34
 8025316:	2300      	movs	r3, #0
 8025318:	9308      	str	r3, [sp, #32]
 802531a:	eb09 0802 	add.w	r8, r9, r2
 802531e:	9b04      	ldr	r3, [sp, #16]
 8025320:	45c1      	cmp	r9, r8
 8025322:	4417      	add	r7, r2
 8025324:	441f      	add	r7, r3
 8025326:	464b      	mov	r3, r9
 8025328:	bfa8      	it	ge
 802532a:	4643      	movge	r3, r8
 802532c:	42bb      	cmp	r3, r7
 802532e:	bfa8      	it	ge
 8025330:	463b      	movge	r3, r7
 8025332:	2b00      	cmp	r3, #0
 8025334:	bfc2      	ittt	gt
 8025336:	eba8 0803 	subgt.w	r8, r8, r3
 802533a:	1aff      	subgt	r7, r7, r3
 802533c:	eba9 0903 	subgt.w	r9, r9, r3
 8025340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025342:	2b00      	cmp	r3, #0
 8025344:	dd17      	ble.n	8025376 <_strtod_l+0x75e>
 8025346:	4631      	mov	r1, r6
 8025348:	461a      	mov	r2, r3
 802534a:	4620      	mov	r0, r4
 802534c:	f002 fa0e 	bl	802776c <__pow5mult>
 8025350:	4606      	mov	r6, r0
 8025352:	2800      	cmp	r0, #0
 8025354:	f43f aea8 	beq.w	80250a8 <_strtod_l+0x490>
 8025358:	4601      	mov	r1, r0
 802535a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802535c:	4620      	mov	r0, r4
 802535e:	f002 f95b 	bl	8027618 <__multiply>
 8025362:	900b      	str	r0, [sp, #44]	; 0x2c
 8025364:	2800      	cmp	r0, #0
 8025366:	f43f ae9f 	beq.w	80250a8 <_strtod_l+0x490>
 802536a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802536c:	4620      	mov	r0, r4
 802536e:	f002 f83b 	bl	80273e8 <_Bfree>
 8025372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025374:	9318      	str	r3, [sp, #96]	; 0x60
 8025376:	f1b8 0f00 	cmp.w	r8, #0
 802537a:	f300 808c 	bgt.w	8025496 <_strtod_l+0x87e>
 802537e:	9b06      	ldr	r3, [sp, #24]
 8025380:	2b00      	cmp	r3, #0
 8025382:	dd08      	ble.n	8025396 <_strtod_l+0x77e>
 8025384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025386:	9905      	ldr	r1, [sp, #20]
 8025388:	4620      	mov	r0, r4
 802538a:	f002 f9ef 	bl	802776c <__pow5mult>
 802538e:	9005      	str	r0, [sp, #20]
 8025390:	2800      	cmp	r0, #0
 8025392:	f43f ae89 	beq.w	80250a8 <_strtod_l+0x490>
 8025396:	2f00      	cmp	r7, #0
 8025398:	dd08      	ble.n	80253ac <_strtod_l+0x794>
 802539a:	9905      	ldr	r1, [sp, #20]
 802539c:	463a      	mov	r2, r7
 802539e:	4620      	mov	r0, r4
 80253a0:	f002 fa3e 	bl	8027820 <__lshift>
 80253a4:	9005      	str	r0, [sp, #20]
 80253a6:	2800      	cmp	r0, #0
 80253a8:	f43f ae7e 	beq.w	80250a8 <_strtod_l+0x490>
 80253ac:	f1b9 0f00 	cmp.w	r9, #0
 80253b0:	dd08      	ble.n	80253c4 <_strtod_l+0x7ac>
 80253b2:	4631      	mov	r1, r6
 80253b4:	464a      	mov	r2, r9
 80253b6:	4620      	mov	r0, r4
 80253b8:	f002 fa32 	bl	8027820 <__lshift>
 80253bc:	4606      	mov	r6, r0
 80253be:	2800      	cmp	r0, #0
 80253c0:	f43f ae72 	beq.w	80250a8 <_strtod_l+0x490>
 80253c4:	9a05      	ldr	r2, [sp, #20]
 80253c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80253c8:	4620      	mov	r0, r4
 80253ca:	f002 fab5 	bl	8027938 <__mdiff>
 80253ce:	4605      	mov	r5, r0
 80253d0:	2800      	cmp	r0, #0
 80253d2:	f43f ae69 	beq.w	80250a8 <_strtod_l+0x490>
 80253d6:	68c3      	ldr	r3, [r0, #12]
 80253d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80253da:	2300      	movs	r3, #0
 80253dc:	60c3      	str	r3, [r0, #12]
 80253de:	4631      	mov	r1, r6
 80253e0:	f002 fa8e 	bl	8027900 <__mcmp>
 80253e4:	2800      	cmp	r0, #0
 80253e6:	da60      	bge.n	80254aa <_strtod_l+0x892>
 80253e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80253ea:	ea53 030a 	orrs.w	r3, r3, sl
 80253ee:	f040 8082 	bne.w	80254f6 <_strtod_l+0x8de>
 80253f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80253f6:	2b00      	cmp	r3, #0
 80253f8:	d17d      	bne.n	80254f6 <_strtod_l+0x8de>
 80253fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80253fe:	0d1b      	lsrs	r3, r3, #20
 8025400:	051b      	lsls	r3, r3, #20
 8025402:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8025406:	d976      	bls.n	80254f6 <_strtod_l+0x8de>
 8025408:	696b      	ldr	r3, [r5, #20]
 802540a:	b913      	cbnz	r3, 8025412 <_strtod_l+0x7fa>
 802540c:	692b      	ldr	r3, [r5, #16]
 802540e:	2b01      	cmp	r3, #1
 8025410:	dd71      	ble.n	80254f6 <_strtod_l+0x8de>
 8025412:	4629      	mov	r1, r5
 8025414:	2201      	movs	r2, #1
 8025416:	4620      	mov	r0, r4
 8025418:	f002 fa02 	bl	8027820 <__lshift>
 802541c:	4631      	mov	r1, r6
 802541e:	4605      	mov	r5, r0
 8025420:	f002 fa6e 	bl	8027900 <__mcmp>
 8025424:	2800      	cmp	r0, #0
 8025426:	dd66      	ble.n	80254f6 <_strtod_l+0x8de>
 8025428:	9904      	ldr	r1, [sp, #16]
 802542a:	4a53      	ldr	r2, [pc, #332]	; (8025578 <_strtod_l+0x960>)
 802542c:	465b      	mov	r3, fp
 802542e:	2900      	cmp	r1, #0
 8025430:	f000 8081 	beq.w	8025536 <_strtod_l+0x91e>
 8025434:	ea02 010b 	and.w	r1, r2, fp
 8025438:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802543c:	dc7b      	bgt.n	8025536 <_strtod_l+0x91e>
 802543e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8025442:	f77f aea9 	ble.w	8025198 <_strtod_l+0x580>
 8025446:	4b4d      	ldr	r3, [pc, #308]	; (802557c <_strtod_l+0x964>)
 8025448:	4650      	mov	r0, sl
 802544a:	4659      	mov	r1, fp
 802544c:	2200      	movs	r2, #0
 802544e:	f7db f903 	bl	8000658 <__aeabi_dmul>
 8025452:	460b      	mov	r3, r1
 8025454:	4303      	orrs	r3, r0
 8025456:	bf08      	it	eq
 8025458:	2322      	moveq	r3, #34	; 0x22
 802545a:	4682      	mov	sl, r0
 802545c:	468b      	mov	fp, r1
 802545e:	bf08      	it	eq
 8025460:	6023      	streq	r3, [r4, #0]
 8025462:	e62b      	b.n	80250bc <_strtod_l+0x4a4>
 8025464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025468:	fa02 f303 	lsl.w	r3, r2, r3
 802546c:	ea03 0a0a 	and.w	sl, r3, sl
 8025470:	e6e3      	b.n	802523a <_strtod_l+0x622>
 8025472:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8025476:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 802547a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 802547e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8025482:	fa01 f308 	lsl.w	r3, r1, r8
 8025486:	9308      	str	r3, [sp, #32]
 8025488:	910d      	str	r1, [sp, #52]	; 0x34
 802548a:	e746      	b.n	802531a <_strtod_l+0x702>
 802548c:	2300      	movs	r3, #0
 802548e:	9308      	str	r3, [sp, #32]
 8025490:	2301      	movs	r3, #1
 8025492:	930d      	str	r3, [sp, #52]	; 0x34
 8025494:	e741      	b.n	802531a <_strtod_l+0x702>
 8025496:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025498:	4642      	mov	r2, r8
 802549a:	4620      	mov	r0, r4
 802549c:	f002 f9c0 	bl	8027820 <__lshift>
 80254a0:	9018      	str	r0, [sp, #96]	; 0x60
 80254a2:	2800      	cmp	r0, #0
 80254a4:	f47f af6b 	bne.w	802537e <_strtod_l+0x766>
 80254a8:	e5fe      	b.n	80250a8 <_strtod_l+0x490>
 80254aa:	465f      	mov	r7, fp
 80254ac:	d16e      	bne.n	802558c <_strtod_l+0x974>
 80254ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80254b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80254b4:	b342      	cbz	r2, 8025508 <_strtod_l+0x8f0>
 80254b6:	4a32      	ldr	r2, [pc, #200]	; (8025580 <_strtod_l+0x968>)
 80254b8:	4293      	cmp	r3, r2
 80254ba:	d128      	bne.n	802550e <_strtod_l+0x8f6>
 80254bc:	9b04      	ldr	r3, [sp, #16]
 80254be:	4651      	mov	r1, sl
 80254c0:	b1eb      	cbz	r3, 80254fe <_strtod_l+0x8e6>
 80254c2:	4b2d      	ldr	r3, [pc, #180]	; (8025578 <_strtod_l+0x960>)
 80254c4:	403b      	ands	r3, r7
 80254c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80254ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80254ce:	d819      	bhi.n	8025504 <_strtod_l+0x8ec>
 80254d0:	0d1b      	lsrs	r3, r3, #20
 80254d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80254d6:	fa02 f303 	lsl.w	r3, r2, r3
 80254da:	4299      	cmp	r1, r3
 80254dc:	d117      	bne.n	802550e <_strtod_l+0x8f6>
 80254de:	4b29      	ldr	r3, [pc, #164]	; (8025584 <_strtod_l+0x96c>)
 80254e0:	429f      	cmp	r7, r3
 80254e2:	d102      	bne.n	80254ea <_strtod_l+0x8d2>
 80254e4:	3101      	adds	r1, #1
 80254e6:	f43f addf 	beq.w	80250a8 <_strtod_l+0x490>
 80254ea:	4b23      	ldr	r3, [pc, #140]	; (8025578 <_strtod_l+0x960>)
 80254ec:	403b      	ands	r3, r7
 80254ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80254f2:	f04f 0a00 	mov.w	sl, #0
 80254f6:	9b04      	ldr	r3, [sp, #16]
 80254f8:	2b00      	cmp	r3, #0
 80254fa:	d1a4      	bne.n	8025446 <_strtod_l+0x82e>
 80254fc:	e5de      	b.n	80250bc <_strtod_l+0x4a4>
 80254fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8025502:	e7ea      	b.n	80254da <_strtod_l+0x8c2>
 8025504:	4613      	mov	r3, r2
 8025506:	e7e8      	b.n	80254da <_strtod_l+0x8c2>
 8025508:	ea53 030a 	orrs.w	r3, r3, sl
 802550c:	d08c      	beq.n	8025428 <_strtod_l+0x810>
 802550e:	9b08      	ldr	r3, [sp, #32]
 8025510:	b1db      	cbz	r3, 802554a <_strtod_l+0x932>
 8025512:	423b      	tst	r3, r7
 8025514:	d0ef      	beq.n	80254f6 <_strtod_l+0x8de>
 8025516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025518:	9a04      	ldr	r2, [sp, #16]
 802551a:	4650      	mov	r0, sl
 802551c:	4659      	mov	r1, fp
 802551e:	b1c3      	cbz	r3, 8025552 <_strtod_l+0x93a>
 8025520:	f7ff fb5b 	bl	8024bda <sulp>
 8025524:	4602      	mov	r2, r0
 8025526:	460b      	mov	r3, r1
 8025528:	ec51 0b18 	vmov	r0, r1, d8
 802552c:	f7da fede 	bl	80002ec <__adddf3>
 8025530:	4682      	mov	sl, r0
 8025532:	468b      	mov	fp, r1
 8025534:	e7df      	b.n	80254f6 <_strtod_l+0x8de>
 8025536:	4013      	ands	r3, r2
 8025538:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802553c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8025540:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8025544:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8025548:	e7d5      	b.n	80254f6 <_strtod_l+0x8de>
 802554a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802554c:	ea13 0f0a 	tst.w	r3, sl
 8025550:	e7e0      	b.n	8025514 <_strtod_l+0x8fc>
 8025552:	f7ff fb42 	bl	8024bda <sulp>
 8025556:	4602      	mov	r2, r0
 8025558:	460b      	mov	r3, r1
 802555a:	ec51 0b18 	vmov	r0, r1, d8
 802555e:	f7da fec3 	bl	80002e8 <__aeabi_dsub>
 8025562:	2200      	movs	r2, #0
 8025564:	2300      	movs	r3, #0
 8025566:	4682      	mov	sl, r0
 8025568:	468b      	mov	fp, r1
 802556a:	f7db fadd 	bl	8000b28 <__aeabi_dcmpeq>
 802556e:	2800      	cmp	r0, #0
 8025570:	d0c1      	beq.n	80254f6 <_strtod_l+0x8de>
 8025572:	e611      	b.n	8025198 <_strtod_l+0x580>
 8025574:	fffffc02 	.word	0xfffffc02
 8025578:	7ff00000 	.word	0x7ff00000
 802557c:	39500000 	.word	0x39500000
 8025580:	000fffff 	.word	0x000fffff
 8025584:	7fefffff 	.word	0x7fefffff
 8025588:	0802d9b8 	.word	0x0802d9b8
 802558c:	4631      	mov	r1, r6
 802558e:	4628      	mov	r0, r5
 8025590:	f002 fb34 	bl	8027bfc <__ratio>
 8025594:	ec59 8b10 	vmov	r8, r9, d0
 8025598:	ee10 0a10 	vmov	r0, s0
 802559c:	2200      	movs	r2, #0
 802559e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80255a2:	4649      	mov	r1, r9
 80255a4:	f7db fad4 	bl	8000b50 <__aeabi_dcmple>
 80255a8:	2800      	cmp	r0, #0
 80255aa:	d07a      	beq.n	80256a2 <_strtod_l+0xa8a>
 80255ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80255ae:	2b00      	cmp	r3, #0
 80255b0:	d04a      	beq.n	8025648 <_strtod_l+0xa30>
 80255b2:	4b95      	ldr	r3, [pc, #596]	; (8025808 <_strtod_l+0xbf0>)
 80255b4:	2200      	movs	r2, #0
 80255b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80255ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8025808 <_strtod_l+0xbf0>
 80255be:	f04f 0800 	mov.w	r8, #0
 80255c2:	4b92      	ldr	r3, [pc, #584]	; (802580c <_strtod_l+0xbf4>)
 80255c4:	403b      	ands	r3, r7
 80255c6:	930d      	str	r3, [sp, #52]	; 0x34
 80255c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80255ca:	4b91      	ldr	r3, [pc, #580]	; (8025810 <_strtod_l+0xbf8>)
 80255cc:	429a      	cmp	r2, r3
 80255ce:	f040 80b0 	bne.w	8025732 <_strtod_l+0xb1a>
 80255d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80255d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80255da:	ec4b ab10 	vmov	d0, sl, fp
 80255de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80255e2:	f002 fa33 	bl	8027a4c <__ulp>
 80255e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80255ea:	ec53 2b10 	vmov	r2, r3, d0
 80255ee:	f7db f833 	bl	8000658 <__aeabi_dmul>
 80255f2:	4652      	mov	r2, sl
 80255f4:	465b      	mov	r3, fp
 80255f6:	f7da fe79 	bl	80002ec <__adddf3>
 80255fa:	460b      	mov	r3, r1
 80255fc:	4983      	ldr	r1, [pc, #524]	; (802580c <_strtod_l+0xbf4>)
 80255fe:	4a85      	ldr	r2, [pc, #532]	; (8025814 <_strtod_l+0xbfc>)
 8025600:	4019      	ands	r1, r3
 8025602:	4291      	cmp	r1, r2
 8025604:	4682      	mov	sl, r0
 8025606:	d960      	bls.n	80256ca <_strtod_l+0xab2>
 8025608:	ee18 3a90 	vmov	r3, s17
 802560c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8025610:	4293      	cmp	r3, r2
 8025612:	d104      	bne.n	802561e <_strtod_l+0xa06>
 8025614:	ee18 3a10 	vmov	r3, s16
 8025618:	3301      	adds	r3, #1
 802561a:	f43f ad45 	beq.w	80250a8 <_strtod_l+0x490>
 802561e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8025820 <_strtod_l+0xc08>
 8025622:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8025626:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025628:	4620      	mov	r0, r4
 802562a:	f001 fedd 	bl	80273e8 <_Bfree>
 802562e:	9905      	ldr	r1, [sp, #20]
 8025630:	4620      	mov	r0, r4
 8025632:	f001 fed9 	bl	80273e8 <_Bfree>
 8025636:	4631      	mov	r1, r6
 8025638:	4620      	mov	r0, r4
 802563a:	f001 fed5 	bl	80273e8 <_Bfree>
 802563e:	4629      	mov	r1, r5
 8025640:	4620      	mov	r0, r4
 8025642:	f001 fed1 	bl	80273e8 <_Bfree>
 8025646:	e61a      	b.n	802527e <_strtod_l+0x666>
 8025648:	f1ba 0f00 	cmp.w	sl, #0
 802564c:	d11b      	bne.n	8025686 <_strtod_l+0xa6e>
 802564e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025652:	b9f3      	cbnz	r3, 8025692 <_strtod_l+0xa7a>
 8025654:	4b6c      	ldr	r3, [pc, #432]	; (8025808 <_strtod_l+0xbf0>)
 8025656:	2200      	movs	r2, #0
 8025658:	4640      	mov	r0, r8
 802565a:	4649      	mov	r1, r9
 802565c:	f7db fa6e 	bl	8000b3c <__aeabi_dcmplt>
 8025660:	b9d0      	cbnz	r0, 8025698 <_strtod_l+0xa80>
 8025662:	4640      	mov	r0, r8
 8025664:	4649      	mov	r1, r9
 8025666:	4b6c      	ldr	r3, [pc, #432]	; (8025818 <_strtod_l+0xc00>)
 8025668:	2200      	movs	r2, #0
 802566a:	f7da fff5 	bl	8000658 <__aeabi_dmul>
 802566e:	4680      	mov	r8, r0
 8025670:	4689      	mov	r9, r1
 8025672:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8025676:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 802567a:	9315      	str	r3, [sp, #84]	; 0x54
 802567c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8025680:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025684:	e79d      	b.n	80255c2 <_strtod_l+0x9aa>
 8025686:	f1ba 0f01 	cmp.w	sl, #1
 802568a:	d102      	bne.n	8025692 <_strtod_l+0xa7a>
 802568c:	2f00      	cmp	r7, #0
 802568e:	f43f ad83 	beq.w	8025198 <_strtod_l+0x580>
 8025692:	4b62      	ldr	r3, [pc, #392]	; (802581c <_strtod_l+0xc04>)
 8025694:	2200      	movs	r2, #0
 8025696:	e78e      	b.n	80255b6 <_strtod_l+0x99e>
 8025698:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8025818 <_strtod_l+0xc00>
 802569c:	f04f 0800 	mov.w	r8, #0
 80256a0:	e7e7      	b.n	8025672 <_strtod_l+0xa5a>
 80256a2:	4b5d      	ldr	r3, [pc, #372]	; (8025818 <_strtod_l+0xc00>)
 80256a4:	4640      	mov	r0, r8
 80256a6:	4649      	mov	r1, r9
 80256a8:	2200      	movs	r2, #0
 80256aa:	f7da ffd5 	bl	8000658 <__aeabi_dmul>
 80256ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80256b0:	4680      	mov	r8, r0
 80256b2:	4689      	mov	r9, r1
 80256b4:	b933      	cbnz	r3, 80256c4 <_strtod_l+0xaac>
 80256b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80256ba:	900e      	str	r0, [sp, #56]	; 0x38
 80256bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80256be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80256c2:	e7dd      	b.n	8025680 <_strtod_l+0xa68>
 80256c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80256c8:	e7f9      	b.n	80256be <_strtod_l+0xaa6>
 80256ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80256ce:	9b04      	ldr	r3, [sp, #16]
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	d1a8      	bne.n	8025626 <_strtod_l+0xa0e>
 80256d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80256d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80256da:	0d1b      	lsrs	r3, r3, #20
 80256dc:	051b      	lsls	r3, r3, #20
 80256de:	429a      	cmp	r2, r3
 80256e0:	d1a1      	bne.n	8025626 <_strtod_l+0xa0e>
 80256e2:	4640      	mov	r0, r8
 80256e4:	4649      	mov	r1, r9
 80256e6:	f7db fb17 	bl	8000d18 <__aeabi_d2lz>
 80256ea:	f7da ff87 	bl	80005fc <__aeabi_l2d>
 80256ee:	4602      	mov	r2, r0
 80256f0:	460b      	mov	r3, r1
 80256f2:	4640      	mov	r0, r8
 80256f4:	4649      	mov	r1, r9
 80256f6:	f7da fdf7 	bl	80002e8 <__aeabi_dsub>
 80256fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80256fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025700:	ea43 030a 	orr.w	r3, r3, sl
 8025704:	4313      	orrs	r3, r2
 8025706:	4680      	mov	r8, r0
 8025708:	4689      	mov	r9, r1
 802570a:	d055      	beq.n	80257b8 <_strtod_l+0xba0>
 802570c:	a336      	add	r3, pc, #216	; (adr r3, 80257e8 <_strtod_l+0xbd0>)
 802570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025712:	f7db fa13 	bl	8000b3c <__aeabi_dcmplt>
 8025716:	2800      	cmp	r0, #0
 8025718:	f47f acd0 	bne.w	80250bc <_strtod_l+0x4a4>
 802571c:	a334      	add	r3, pc, #208	; (adr r3, 80257f0 <_strtod_l+0xbd8>)
 802571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025722:	4640      	mov	r0, r8
 8025724:	4649      	mov	r1, r9
 8025726:	f7db fa27 	bl	8000b78 <__aeabi_dcmpgt>
 802572a:	2800      	cmp	r0, #0
 802572c:	f43f af7b 	beq.w	8025626 <_strtod_l+0xa0e>
 8025730:	e4c4      	b.n	80250bc <_strtod_l+0x4a4>
 8025732:	9b04      	ldr	r3, [sp, #16]
 8025734:	b333      	cbz	r3, 8025784 <_strtod_l+0xb6c>
 8025736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025738:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802573c:	d822      	bhi.n	8025784 <_strtod_l+0xb6c>
 802573e:	a32e      	add	r3, pc, #184	; (adr r3, 80257f8 <_strtod_l+0xbe0>)
 8025740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025744:	4640      	mov	r0, r8
 8025746:	4649      	mov	r1, r9
 8025748:	f7db fa02 	bl	8000b50 <__aeabi_dcmple>
 802574c:	b1a0      	cbz	r0, 8025778 <_strtod_l+0xb60>
 802574e:	4649      	mov	r1, r9
 8025750:	4640      	mov	r0, r8
 8025752:	f7db fa59 	bl	8000c08 <__aeabi_d2uiz>
 8025756:	2801      	cmp	r0, #1
 8025758:	bf38      	it	cc
 802575a:	2001      	movcc	r0, #1
 802575c:	f7da ff02 	bl	8000564 <__aeabi_ui2d>
 8025760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025762:	4680      	mov	r8, r0
 8025764:	4689      	mov	r9, r1
 8025766:	bb23      	cbnz	r3, 80257b2 <_strtod_l+0xb9a>
 8025768:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802576c:	9010      	str	r0, [sp, #64]	; 0x40
 802576e:	9311      	str	r3, [sp, #68]	; 0x44
 8025770:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8025774:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802577a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802577c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8025780:	1a9b      	subs	r3, r3, r2
 8025782:	9309      	str	r3, [sp, #36]	; 0x24
 8025784:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8025788:	eeb0 0a48 	vmov.f32	s0, s16
 802578c:	eef0 0a68 	vmov.f32	s1, s17
 8025790:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025794:	f002 f95a 	bl	8027a4c <__ulp>
 8025798:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802579c:	ec53 2b10 	vmov	r2, r3, d0
 80257a0:	f7da ff5a 	bl	8000658 <__aeabi_dmul>
 80257a4:	ec53 2b18 	vmov	r2, r3, d8
 80257a8:	f7da fda0 	bl	80002ec <__adddf3>
 80257ac:	4682      	mov	sl, r0
 80257ae:	468b      	mov	fp, r1
 80257b0:	e78d      	b.n	80256ce <_strtod_l+0xab6>
 80257b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80257b6:	e7db      	b.n	8025770 <_strtod_l+0xb58>
 80257b8:	a311      	add	r3, pc, #68	; (adr r3, 8025800 <_strtod_l+0xbe8>)
 80257ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257be:	f7db f9bd 	bl	8000b3c <__aeabi_dcmplt>
 80257c2:	e7b2      	b.n	802572a <_strtod_l+0xb12>
 80257c4:	2300      	movs	r3, #0
 80257c6:	930a      	str	r3, [sp, #40]	; 0x28
 80257c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80257ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80257cc:	6013      	str	r3, [r2, #0]
 80257ce:	f7ff ba6b 	b.w	8024ca8 <_strtod_l+0x90>
 80257d2:	2a65      	cmp	r2, #101	; 0x65
 80257d4:	f43f ab5f 	beq.w	8024e96 <_strtod_l+0x27e>
 80257d8:	2a45      	cmp	r2, #69	; 0x45
 80257da:	f43f ab5c 	beq.w	8024e96 <_strtod_l+0x27e>
 80257de:	2301      	movs	r3, #1
 80257e0:	f7ff bb94 	b.w	8024f0c <_strtod_l+0x2f4>
 80257e4:	f3af 8000 	nop.w
 80257e8:	94a03595 	.word	0x94a03595
 80257ec:	3fdfffff 	.word	0x3fdfffff
 80257f0:	35afe535 	.word	0x35afe535
 80257f4:	3fe00000 	.word	0x3fe00000
 80257f8:	ffc00000 	.word	0xffc00000
 80257fc:	41dfffff 	.word	0x41dfffff
 8025800:	94a03595 	.word	0x94a03595
 8025804:	3fcfffff 	.word	0x3fcfffff
 8025808:	3ff00000 	.word	0x3ff00000
 802580c:	7ff00000 	.word	0x7ff00000
 8025810:	7fe00000 	.word	0x7fe00000
 8025814:	7c9fffff 	.word	0x7c9fffff
 8025818:	3fe00000 	.word	0x3fe00000
 802581c:	bff00000 	.word	0xbff00000
 8025820:	7fefffff 	.word	0x7fefffff

08025824 <_strtod_r>:
 8025824:	4b01      	ldr	r3, [pc, #4]	; (802582c <_strtod_r+0x8>)
 8025826:	f7ff b9f7 	b.w	8024c18 <_strtod_l>
 802582a:	bf00      	nop
 802582c:	20000164 	.word	0x20000164

08025830 <strtod>:
 8025830:	460a      	mov	r2, r1
 8025832:	4601      	mov	r1, r0
 8025834:	4802      	ldr	r0, [pc, #8]	; (8025840 <strtod+0x10>)
 8025836:	4b03      	ldr	r3, [pc, #12]	; (8025844 <strtod+0x14>)
 8025838:	6800      	ldr	r0, [r0, #0]
 802583a:	f7ff b9ed 	b.w	8024c18 <_strtod_l>
 802583e:	bf00      	nop
 8025840:	200000fc 	.word	0x200000fc
 8025844:	20000164 	.word	0x20000164

08025848 <_strtol_l.constprop.0>:
 8025848:	2b01      	cmp	r3, #1
 802584a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802584e:	d001      	beq.n	8025854 <_strtol_l.constprop.0+0xc>
 8025850:	2b24      	cmp	r3, #36	; 0x24
 8025852:	d906      	bls.n	8025862 <_strtol_l.constprop.0+0x1a>
 8025854:	f001 f902 	bl	8026a5c <__errno>
 8025858:	2316      	movs	r3, #22
 802585a:	6003      	str	r3, [r0, #0]
 802585c:	2000      	movs	r0, #0
 802585e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025862:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8025948 <_strtol_l.constprop.0+0x100>
 8025866:	460d      	mov	r5, r1
 8025868:	462e      	mov	r6, r5
 802586a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802586e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8025872:	f017 0708 	ands.w	r7, r7, #8
 8025876:	d1f7      	bne.n	8025868 <_strtol_l.constprop.0+0x20>
 8025878:	2c2d      	cmp	r4, #45	; 0x2d
 802587a:	d132      	bne.n	80258e2 <_strtol_l.constprop.0+0x9a>
 802587c:	782c      	ldrb	r4, [r5, #0]
 802587e:	2701      	movs	r7, #1
 8025880:	1cb5      	adds	r5, r6, #2
 8025882:	2b00      	cmp	r3, #0
 8025884:	d05b      	beq.n	802593e <_strtol_l.constprop.0+0xf6>
 8025886:	2b10      	cmp	r3, #16
 8025888:	d109      	bne.n	802589e <_strtol_l.constprop.0+0x56>
 802588a:	2c30      	cmp	r4, #48	; 0x30
 802588c:	d107      	bne.n	802589e <_strtol_l.constprop.0+0x56>
 802588e:	782c      	ldrb	r4, [r5, #0]
 8025890:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8025894:	2c58      	cmp	r4, #88	; 0x58
 8025896:	d14d      	bne.n	8025934 <_strtol_l.constprop.0+0xec>
 8025898:	786c      	ldrb	r4, [r5, #1]
 802589a:	2310      	movs	r3, #16
 802589c:	3502      	adds	r5, #2
 802589e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80258a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80258a6:	f04f 0c00 	mov.w	ip, #0
 80258aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80258ae:	4666      	mov	r6, ip
 80258b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80258b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80258b8:	f1be 0f09 	cmp.w	lr, #9
 80258bc:	d816      	bhi.n	80258ec <_strtol_l.constprop.0+0xa4>
 80258be:	4674      	mov	r4, lr
 80258c0:	42a3      	cmp	r3, r4
 80258c2:	dd24      	ble.n	802590e <_strtol_l.constprop.0+0xc6>
 80258c4:	f1bc 0f00 	cmp.w	ip, #0
 80258c8:	db1e      	blt.n	8025908 <_strtol_l.constprop.0+0xc0>
 80258ca:	45b1      	cmp	r9, r6
 80258cc:	d31c      	bcc.n	8025908 <_strtol_l.constprop.0+0xc0>
 80258ce:	d101      	bne.n	80258d4 <_strtol_l.constprop.0+0x8c>
 80258d0:	45a2      	cmp	sl, r4
 80258d2:	db19      	blt.n	8025908 <_strtol_l.constprop.0+0xc0>
 80258d4:	fb06 4603 	mla	r6, r6, r3, r4
 80258d8:	f04f 0c01 	mov.w	ip, #1
 80258dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80258e0:	e7e8      	b.n	80258b4 <_strtol_l.constprop.0+0x6c>
 80258e2:	2c2b      	cmp	r4, #43	; 0x2b
 80258e4:	bf04      	itt	eq
 80258e6:	782c      	ldrbeq	r4, [r5, #0]
 80258e8:	1cb5      	addeq	r5, r6, #2
 80258ea:	e7ca      	b.n	8025882 <_strtol_l.constprop.0+0x3a>
 80258ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80258f0:	f1be 0f19 	cmp.w	lr, #25
 80258f4:	d801      	bhi.n	80258fa <_strtol_l.constprop.0+0xb2>
 80258f6:	3c37      	subs	r4, #55	; 0x37
 80258f8:	e7e2      	b.n	80258c0 <_strtol_l.constprop.0+0x78>
 80258fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80258fe:	f1be 0f19 	cmp.w	lr, #25
 8025902:	d804      	bhi.n	802590e <_strtol_l.constprop.0+0xc6>
 8025904:	3c57      	subs	r4, #87	; 0x57
 8025906:	e7db      	b.n	80258c0 <_strtol_l.constprop.0+0x78>
 8025908:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 802590c:	e7e6      	b.n	80258dc <_strtol_l.constprop.0+0x94>
 802590e:	f1bc 0f00 	cmp.w	ip, #0
 8025912:	da05      	bge.n	8025920 <_strtol_l.constprop.0+0xd8>
 8025914:	2322      	movs	r3, #34	; 0x22
 8025916:	6003      	str	r3, [r0, #0]
 8025918:	4646      	mov	r6, r8
 802591a:	b942      	cbnz	r2, 802592e <_strtol_l.constprop.0+0xe6>
 802591c:	4630      	mov	r0, r6
 802591e:	e79e      	b.n	802585e <_strtol_l.constprop.0+0x16>
 8025920:	b107      	cbz	r7, 8025924 <_strtol_l.constprop.0+0xdc>
 8025922:	4276      	negs	r6, r6
 8025924:	2a00      	cmp	r2, #0
 8025926:	d0f9      	beq.n	802591c <_strtol_l.constprop.0+0xd4>
 8025928:	f1bc 0f00 	cmp.w	ip, #0
 802592c:	d000      	beq.n	8025930 <_strtol_l.constprop.0+0xe8>
 802592e:	1e69      	subs	r1, r5, #1
 8025930:	6011      	str	r1, [r2, #0]
 8025932:	e7f3      	b.n	802591c <_strtol_l.constprop.0+0xd4>
 8025934:	2430      	movs	r4, #48	; 0x30
 8025936:	2b00      	cmp	r3, #0
 8025938:	d1b1      	bne.n	802589e <_strtol_l.constprop.0+0x56>
 802593a:	2308      	movs	r3, #8
 802593c:	e7af      	b.n	802589e <_strtol_l.constprop.0+0x56>
 802593e:	2c30      	cmp	r4, #48	; 0x30
 8025940:	d0a5      	beq.n	802588e <_strtol_l.constprop.0+0x46>
 8025942:	230a      	movs	r3, #10
 8025944:	e7ab      	b.n	802589e <_strtol_l.constprop.0+0x56>
 8025946:	bf00      	nop
 8025948:	0802d779 	.word	0x0802d779

0802594c <_strtol_r>:
 802594c:	f7ff bf7c 	b.w	8025848 <_strtol_l.constprop.0>

08025950 <strtol>:
 8025950:	4613      	mov	r3, r2
 8025952:	460a      	mov	r2, r1
 8025954:	4601      	mov	r1, r0
 8025956:	4802      	ldr	r0, [pc, #8]	; (8025960 <strtol+0x10>)
 8025958:	6800      	ldr	r0, [r0, #0]
 802595a:	f7ff bf75 	b.w	8025848 <_strtol_l.constprop.0>
 802595e:	bf00      	nop
 8025960:	200000fc 	.word	0x200000fc

08025964 <_strtoll_l.constprop.0>:
 8025964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025968:	b085      	sub	sp, #20
 802596a:	4688      	mov	r8, r1
 802596c:	9201      	str	r2, [sp, #4]
 802596e:	4a47      	ldr	r2, [pc, #284]	; (8025a8c <_strtoll_l.constprop.0+0x128>)
 8025970:	9003      	str	r0, [sp, #12]
 8025972:	461e      	mov	r6, r3
 8025974:	460d      	mov	r5, r1
 8025976:	462b      	mov	r3, r5
 8025978:	f815 4b01 	ldrb.w	r4, [r5], #1
 802597c:	5ca7      	ldrb	r7, [r4, r2]
 802597e:	f017 0708 	ands.w	r7, r7, #8
 8025982:	d1f8      	bne.n	8025976 <_strtoll_l.constprop.0+0x12>
 8025984:	2c2d      	cmp	r4, #45	; 0x2d
 8025986:	d147      	bne.n	8025a18 <_strtoll_l.constprop.0+0xb4>
 8025988:	782c      	ldrb	r4, [r5, #0]
 802598a:	2701      	movs	r7, #1
 802598c:	1c9d      	adds	r5, r3, #2
 802598e:	2e00      	cmp	r6, #0
 8025990:	d077      	beq.n	8025a82 <_strtoll_l.constprop.0+0x11e>
 8025992:	2e10      	cmp	r6, #16
 8025994:	d109      	bne.n	80259aa <_strtoll_l.constprop.0+0x46>
 8025996:	2c30      	cmp	r4, #48	; 0x30
 8025998:	d107      	bne.n	80259aa <_strtoll_l.constprop.0+0x46>
 802599a:	782b      	ldrb	r3, [r5, #0]
 802599c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80259a0:	2b58      	cmp	r3, #88	; 0x58
 80259a2:	d169      	bne.n	8025a78 <_strtoll_l.constprop.0+0x114>
 80259a4:	786c      	ldrb	r4, [r5, #1]
 80259a6:	2610      	movs	r6, #16
 80259a8:	3502      	adds	r5, #2
 80259aa:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 80259ae:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 80259b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80259b6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 80259ba:	4632      	mov	r2, r6
 80259bc:	464b      	mov	r3, r9
 80259be:	4658      	mov	r0, fp
 80259c0:	4651      	mov	r1, sl
 80259c2:	f7db f991 	bl	8000ce8 <__aeabi_uldivmod>
 80259c6:	2300      	movs	r3, #0
 80259c8:	9202      	str	r2, [sp, #8]
 80259ca:	468c      	mov	ip, r1
 80259cc:	4602      	mov	r2, r0
 80259ce:	4619      	mov	r1, r3
 80259d0:	4618      	mov	r0, r3
 80259d2:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80259d6:	f1be 0f09 	cmp.w	lr, #9
 80259da:	d822      	bhi.n	8025a22 <_strtoll_l.constprop.0+0xbe>
 80259dc:	4674      	mov	r4, lr
 80259de:	42a6      	cmp	r6, r4
 80259e0:	dd30      	ble.n	8025a44 <_strtoll_l.constprop.0+0xe0>
 80259e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80259e6:	d014      	beq.n	8025a12 <_strtoll_l.constprop.0+0xae>
 80259e8:	4282      	cmp	r2, r0
 80259ea:	eb7c 0301 	sbcs.w	r3, ip, r1
 80259ee:	d326      	bcc.n	8025a3e <_strtoll_l.constprop.0+0xda>
 80259f0:	458c      	cmp	ip, r1
 80259f2:	bf08      	it	eq
 80259f4:	4282      	cmpeq	r2, r0
 80259f6:	d102      	bne.n	80259fe <_strtoll_l.constprop.0+0x9a>
 80259f8:	9b02      	ldr	r3, [sp, #8]
 80259fa:	42a3      	cmp	r3, r4
 80259fc:	db1f      	blt.n	8025a3e <_strtoll_l.constprop.0+0xda>
 80259fe:	4371      	muls	r1, r6
 8025a00:	fb00 1109 	mla	r1, r0, r9, r1
 8025a04:	fba6 0300 	umull	r0, r3, r6, r0
 8025a08:	4419      	add	r1, r3
 8025a0a:	1820      	adds	r0, r4, r0
 8025a0c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8025a10:	2301      	movs	r3, #1
 8025a12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025a16:	e7dc      	b.n	80259d2 <_strtoll_l.constprop.0+0x6e>
 8025a18:	2c2b      	cmp	r4, #43	; 0x2b
 8025a1a:	bf04      	itt	eq
 8025a1c:	782c      	ldrbeq	r4, [r5, #0]
 8025a1e:	1c9d      	addeq	r5, r3, #2
 8025a20:	e7b5      	b.n	802598e <_strtoll_l.constprop.0+0x2a>
 8025a22:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8025a26:	f1be 0f19 	cmp.w	lr, #25
 8025a2a:	d801      	bhi.n	8025a30 <_strtoll_l.constprop.0+0xcc>
 8025a2c:	3c37      	subs	r4, #55	; 0x37
 8025a2e:	e7d6      	b.n	80259de <_strtoll_l.constprop.0+0x7a>
 8025a30:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8025a34:	f1be 0f19 	cmp.w	lr, #25
 8025a38:	d804      	bhi.n	8025a44 <_strtoll_l.constprop.0+0xe0>
 8025a3a:	3c57      	subs	r4, #87	; 0x57
 8025a3c:	e7cf      	b.n	80259de <_strtoll_l.constprop.0+0x7a>
 8025a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8025a42:	e7e6      	b.n	8025a12 <_strtoll_l.constprop.0+0xae>
 8025a44:	1c5a      	adds	r2, r3, #1
 8025a46:	d109      	bne.n	8025a5c <_strtoll_l.constprop.0+0xf8>
 8025a48:	9a03      	ldr	r2, [sp, #12]
 8025a4a:	2322      	movs	r3, #34	; 0x22
 8025a4c:	6013      	str	r3, [r2, #0]
 8025a4e:	9b01      	ldr	r3, [sp, #4]
 8025a50:	4658      	mov	r0, fp
 8025a52:	4651      	mov	r1, sl
 8025a54:	b953      	cbnz	r3, 8025a6c <_strtoll_l.constprop.0+0x108>
 8025a56:	b005      	add	sp, #20
 8025a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a5c:	b117      	cbz	r7, 8025a64 <_strtoll_l.constprop.0+0x100>
 8025a5e:	4240      	negs	r0, r0
 8025a60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8025a64:	9a01      	ldr	r2, [sp, #4]
 8025a66:	2a00      	cmp	r2, #0
 8025a68:	d0f5      	beq.n	8025a56 <_strtoll_l.constprop.0+0xf2>
 8025a6a:	b10b      	cbz	r3, 8025a70 <_strtoll_l.constprop.0+0x10c>
 8025a6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8025a70:	9b01      	ldr	r3, [sp, #4]
 8025a72:	f8c3 8000 	str.w	r8, [r3]
 8025a76:	e7ee      	b.n	8025a56 <_strtoll_l.constprop.0+0xf2>
 8025a78:	2430      	movs	r4, #48	; 0x30
 8025a7a:	2e00      	cmp	r6, #0
 8025a7c:	d195      	bne.n	80259aa <_strtoll_l.constprop.0+0x46>
 8025a7e:	2608      	movs	r6, #8
 8025a80:	e793      	b.n	80259aa <_strtoll_l.constprop.0+0x46>
 8025a82:	2c30      	cmp	r4, #48	; 0x30
 8025a84:	d089      	beq.n	802599a <_strtoll_l.constprop.0+0x36>
 8025a86:	260a      	movs	r6, #10
 8025a88:	e78f      	b.n	80259aa <_strtoll_l.constprop.0+0x46>
 8025a8a:	bf00      	nop
 8025a8c:	0802d779 	.word	0x0802d779

08025a90 <strtoll>:
 8025a90:	4613      	mov	r3, r2
 8025a92:	460a      	mov	r2, r1
 8025a94:	4601      	mov	r1, r0
 8025a96:	4802      	ldr	r0, [pc, #8]	; (8025aa0 <strtoll+0x10>)
 8025a98:	6800      	ldr	r0, [r0, #0]
 8025a9a:	f7ff bf63 	b.w	8025964 <_strtoll_l.constprop.0>
 8025a9e:	bf00      	nop
 8025aa0:	200000fc 	.word	0x200000fc

08025aa4 <_strtoul_l.constprop.0>:
 8025aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025aa8:	4f36      	ldr	r7, [pc, #216]	; (8025b84 <_strtoul_l.constprop.0+0xe0>)
 8025aaa:	4686      	mov	lr, r0
 8025aac:	460d      	mov	r5, r1
 8025aae:	4628      	mov	r0, r5
 8025ab0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025ab4:	5de6      	ldrb	r6, [r4, r7]
 8025ab6:	f016 0608 	ands.w	r6, r6, #8
 8025aba:	d1f8      	bne.n	8025aae <_strtoul_l.constprop.0+0xa>
 8025abc:	2c2d      	cmp	r4, #45	; 0x2d
 8025abe:	d12f      	bne.n	8025b20 <_strtoul_l.constprop.0+0x7c>
 8025ac0:	782c      	ldrb	r4, [r5, #0]
 8025ac2:	2601      	movs	r6, #1
 8025ac4:	1c85      	adds	r5, r0, #2
 8025ac6:	2b00      	cmp	r3, #0
 8025ac8:	d057      	beq.n	8025b7a <_strtoul_l.constprop.0+0xd6>
 8025aca:	2b10      	cmp	r3, #16
 8025acc:	d109      	bne.n	8025ae2 <_strtoul_l.constprop.0+0x3e>
 8025ace:	2c30      	cmp	r4, #48	; 0x30
 8025ad0:	d107      	bne.n	8025ae2 <_strtoul_l.constprop.0+0x3e>
 8025ad2:	7828      	ldrb	r0, [r5, #0]
 8025ad4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8025ad8:	2858      	cmp	r0, #88	; 0x58
 8025ada:	d149      	bne.n	8025b70 <_strtoul_l.constprop.0+0xcc>
 8025adc:	786c      	ldrb	r4, [r5, #1]
 8025ade:	2310      	movs	r3, #16
 8025ae0:	3502      	adds	r5, #2
 8025ae2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8025ae6:	2700      	movs	r7, #0
 8025ae8:	fbb8 f8f3 	udiv	r8, r8, r3
 8025aec:	fb03 f908 	mul.w	r9, r3, r8
 8025af0:	ea6f 0909 	mvn.w	r9, r9
 8025af4:	4638      	mov	r0, r7
 8025af6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8025afa:	f1bc 0f09 	cmp.w	ip, #9
 8025afe:	d814      	bhi.n	8025b2a <_strtoul_l.constprop.0+0x86>
 8025b00:	4664      	mov	r4, ip
 8025b02:	42a3      	cmp	r3, r4
 8025b04:	dd22      	ble.n	8025b4c <_strtoul_l.constprop.0+0xa8>
 8025b06:	2f00      	cmp	r7, #0
 8025b08:	db1d      	blt.n	8025b46 <_strtoul_l.constprop.0+0xa2>
 8025b0a:	4580      	cmp	r8, r0
 8025b0c:	d31b      	bcc.n	8025b46 <_strtoul_l.constprop.0+0xa2>
 8025b0e:	d101      	bne.n	8025b14 <_strtoul_l.constprop.0+0x70>
 8025b10:	45a1      	cmp	r9, r4
 8025b12:	db18      	blt.n	8025b46 <_strtoul_l.constprop.0+0xa2>
 8025b14:	fb00 4003 	mla	r0, r0, r3, r4
 8025b18:	2701      	movs	r7, #1
 8025b1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025b1e:	e7ea      	b.n	8025af6 <_strtoul_l.constprop.0+0x52>
 8025b20:	2c2b      	cmp	r4, #43	; 0x2b
 8025b22:	bf04      	itt	eq
 8025b24:	782c      	ldrbeq	r4, [r5, #0]
 8025b26:	1c85      	addeq	r5, r0, #2
 8025b28:	e7cd      	b.n	8025ac6 <_strtoul_l.constprop.0+0x22>
 8025b2a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8025b2e:	f1bc 0f19 	cmp.w	ip, #25
 8025b32:	d801      	bhi.n	8025b38 <_strtoul_l.constprop.0+0x94>
 8025b34:	3c37      	subs	r4, #55	; 0x37
 8025b36:	e7e4      	b.n	8025b02 <_strtoul_l.constprop.0+0x5e>
 8025b38:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8025b3c:	f1bc 0f19 	cmp.w	ip, #25
 8025b40:	d804      	bhi.n	8025b4c <_strtoul_l.constprop.0+0xa8>
 8025b42:	3c57      	subs	r4, #87	; 0x57
 8025b44:	e7dd      	b.n	8025b02 <_strtoul_l.constprop.0+0x5e>
 8025b46:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8025b4a:	e7e6      	b.n	8025b1a <_strtoul_l.constprop.0+0x76>
 8025b4c:	2f00      	cmp	r7, #0
 8025b4e:	da07      	bge.n	8025b60 <_strtoul_l.constprop.0+0xbc>
 8025b50:	2322      	movs	r3, #34	; 0x22
 8025b52:	f8ce 3000 	str.w	r3, [lr]
 8025b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025b5a:	b932      	cbnz	r2, 8025b6a <_strtoul_l.constprop.0+0xc6>
 8025b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025b60:	b106      	cbz	r6, 8025b64 <_strtoul_l.constprop.0+0xc0>
 8025b62:	4240      	negs	r0, r0
 8025b64:	2a00      	cmp	r2, #0
 8025b66:	d0f9      	beq.n	8025b5c <_strtoul_l.constprop.0+0xb8>
 8025b68:	b107      	cbz	r7, 8025b6c <_strtoul_l.constprop.0+0xc8>
 8025b6a:	1e69      	subs	r1, r5, #1
 8025b6c:	6011      	str	r1, [r2, #0]
 8025b6e:	e7f5      	b.n	8025b5c <_strtoul_l.constprop.0+0xb8>
 8025b70:	2430      	movs	r4, #48	; 0x30
 8025b72:	2b00      	cmp	r3, #0
 8025b74:	d1b5      	bne.n	8025ae2 <_strtoul_l.constprop.0+0x3e>
 8025b76:	2308      	movs	r3, #8
 8025b78:	e7b3      	b.n	8025ae2 <_strtoul_l.constprop.0+0x3e>
 8025b7a:	2c30      	cmp	r4, #48	; 0x30
 8025b7c:	d0a9      	beq.n	8025ad2 <_strtoul_l.constprop.0+0x2e>
 8025b7e:	230a      	movs	r3, #10
 8025b80:	e7af      	b.n	8025ae2 <_strtoul_l.constprop.0+0x3e>
 8025b82:	bf00      	nop
 8025b84:	0802d779 	.word	0x0802d779

08025b88 <_strtoul_r>:
 8025b88:	f7ff bf8c 	b.w	8025aa4 <_strtoul_l.constprop.0>

08025b8c <strtoul>:
 8025b8c:	4613      	mov	r3, r2
 8025b8e:	460a      	mov	r2, r1
 8025b90:	4601      	mov	r1, r0
 8025b92:	4802      	ldr	r0, [pc, #8]	; (8025b9c <strtoul+0x10>)
 8025b94:	6800      	ldr	r0, [r0, #0]
 8025b96:	f7ff bf85 	b.w	8025aa4 <_strtoul_l.constprop.0>
 8025b9a:	bf00      	nop
 8025b9c:	200000fc 	.word	0x200000fc

08025ba0 <_strtoull_l.constprop.0>:
 8025ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ba4:	4692      	mov	sl, r2
 8025ba6:	4a49      	ldr	r2, [pc, #292]	; (8025ccc <_strtoull_l.constprop.0+0x12c>)
 8025ba8:	9001      	str	r0, [sp, #4]
 8025baa:	4689      	mov	r9, r1
 8025bac:	461d      	mov	r5, r3
 8025bae:	460e      	mov	r6, r1
 8025bb0:	4633      	mov	r3, r6
 8025bb2:	f816 4b01 	ldrb.w	r4, [r6], #1
 8025bb6:	5ca7      	ldrb	r7, [r4, r2]
 8025bb8:	f017 0708 	ands.w	r7, r7, #8
 8025bbc:	d1f8      	bne.n	8025bb0 <_strtoull_l.constprop.0+0x10>
 8025bbe:	2c2d      	cmp	r4, #45	; 0x2d
 8025bc0:	d14a      	bne.n	8025c58 <_strtoull_l.constprop.0+0xb8>
 8025bc2:	7834      	ldrb	r4, [r6, #0]
 8025bc4:	2701      	movs	r7, #1
 8025bc6:	1c9e      	adds	r6, r3, #2
 8025bc8:	2d00      	cmp	r5, #0
 8025bca:	d07b      	beq.n	8025cc4 <_strtoull_l.constprop.0+0x124>
 8025bcc:	2d10      	cmp	r5, #16
 8025bce:	d109      	bne.n	8025be4 <_strtoull_l.constprop.0+0x44>
 8025bd0:	2c30      	cmp	r4, #48	; 0x30
 8025bd2:	d107      	bne.n	8025be4 <_strtoull_l.constprop.0+0x44>
 8025bd4:	7833      	ldrb	r3, [r6, #0]
 8025bd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8025bda:	2b58      	cmp	r3, #88	; 0x58
 8025bdc:	d16d      	bne.n	8025cba <_strtoull_l.constprop.0+0x11a>
 8025bde:	7874      	ldrb	r4, [r6, #1]
 8025be0:	2510      	movs	r5, #16
 8025be2:	3602      	adds	r6, #2
 8025be4:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8025be8:	462a      	mov	r2, r5
 8025bea:	465b      	mov	r3, fp
 8025bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8025bf4:	f7db f878 	bl	8000ce8 <__aeabi_uldivmod>
 8025bf8:	462a      	mov	r2, r5
 8025bfa:	9000      	str	r0, [sp, #0]
 8025bfc:	4688      	mov	r8, r1
 8025bfe:	465b      	mov	r3, fp
 8025c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8025c08:	f7db f86e 	bl	8000ce8 <__aeabi_uldivmod>
 8025c0c:	2300      	movs	r3, #0
 8025c0e:	4618      	mov	r0, r3
 8025c10:	4619      	mov	r1, r3
 8025c12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8025c16:	f1bc 0f09 	cmp.w	ip, #9
 8025c1a:	d822      	bhi.n	8025c62 <_strtoull_l.constprop.0+0xc2>
 8025c1c:	4664      	mov	r4, ip
 8025c1e:	42a5      	cmp	r5, r4
 8025c20:	dd30      	ble.n	8025c84 <_strtoull_l.constprop.0+0xe4>
 8025c22:	2b00      	cmp	r3, #0
 8025c24:	db2b      	blt.n	8025c7e <_strtoull_l.constprop.0+0xde>
 8025c26:	9b00      	ldr	r3, [sp, #0]
 8025c28:	4283      	cmp	r3, r0
 8025c2a:	eb78 0301 	sbcs.w	r3, r8, r1
 8025c2e:	d326      	bcc.n	8025c7e <_strtoull_l.constprop.0+0xde>
 8025c30:	9b00      	ldr	r3, [sp, #0]
 8025c32:	4588      	cmp	r8, r1
 8025c34:	bf08      	it	eq
 8025c36:	4283      	cmpeq	r3, r0
 8025c38:	d101      	bne.n	8025c3e <_strtoull_l.constprop.0+0x9e>
 8025c3a:	42a2      	cmp	r2, r4
 8025c3c:	db1f      	blt.n	8025c7e <_strtoull_l.constprop.0+0xde>
 8025c3e:	4369      	muls	r1, r5
 8025c40:	fb00 110b 	mla	r1, r0, fp, r1
 8025c44:	fba5 0300 	umull	r0, r3, r5, r0
 8025c48:	4419      	add	r1, r3
 8025c4a:	1820      	adds	r0, r4, r0
 8025c4c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8025c50:	2301      	movs	r3, #1
 8025c52:	f816 4b01 	ldrb.w	r4, [r6], #1
 8025c56:	e7dc      	b.n	8025c12 <_strtoull_l.constprop.0+0x72>
 8025c58:	2c2b      	cmp	r4, #43	; 0x2b
 8025c5a:	bf04      	itt	eq
 8025c5c:	7834      	ldrbeq	r4, [r6, #0]
 8025c5e:	1c9e      	addeq	r6, r3, #2
 8025c60:	e7b2      	b.n	8025bc8 <_strtoull_l.constprop.0+0x28>
 8025c62:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8025c66:	f1bc 0f19 	cmp.w	ip, #25
 8025c6a:	d801      	bhi.n	8025c70 <_strtoull_l.constprop.0+0xd0>
 8025c6c:	3c37      	subs	r4, #55	; 0x37
 8025c6e:	e7d6      	b.n	8025c1e <_strtoull_l.constprop.0+0x7e>
 8025c70:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8025c74:	f1bc 0f19 	cmp.w	ip, #25
 8025c78:	d804      	bhi.n	8025c84 <_strtoull_l.constprop.0+0xe4>
 8025c7a:	3c57      	subs	r4, #87	; 0x57
 8025c7c:	e7cf      	b.n	8025c1e <_strtoull_l.constprop.0+0x7e>
 8025c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8025c82:	e7e6      	b.n	8025c52 <_strtoull_l.constprop.0+0xb2>
 8025c84:	2b00      	cmp	r3, #0
 8025c86:	da0b      	bge.n	8025ca0 <_strtoull_l.constprop.0+0x100>
 8025c88:	9a01      	ldr	r2, [sp, #4]
 8025c8a:	2322      	movs	r3, #34	; 0x22
 8025c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025c90:	6013      	str	r3, [r2, #0]
 8025c92:	4601      	mov	r1, r0
 8025c94:	f1ba 0f00 	cmp.w	sl, #0
 8025c98:	d10a      	bne.n	8025cb0 <_strtoull_l.constprop.0+0x110>
 8025c9a:	b003      	add	sp, #12
 8025c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ca0:	b117      	cbz	r7, 8025ca8 <_strtoull_l.constprop.0+0x108>
 8025ca2:	4240      	negs	r0, r0
 8025ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8025ca8:	f1ba 0f00 	cmp.w	sl, #0
 8025cac:	d0f5      	beq.n	8025c9a <_strtoull_l.constprop.0+0xfa>
 8025cae:	b10b      	cbz	r3, 8025cb4 <_strtoull_l.constprop.0+0x114>
 8025cb0:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8025cb4:	f8ca 9000 	str.w	r9, [sl]
 8025cb8:	e7ef      	b.n	8025c9a <_strtoull_l.constprop.0+0xfa>
 8025cba:	2430      	movs	r4, #48	; 0x30
 8025cbc:	2d00      	cmp	r5, #0
 8025cbe:	d191      	bne.n	8025be4 <_strtoull_l.constprop.0+0x44>
 8025cc0:	2508      	movs	r5, #8
 8025cc2:	e78f      	b.n	8025be4 <_strtoull_l.constprop.0+0x44>
 8025cc4:	2c30      	cmp	r4, #48	; 0x30
 8025cc6:	d085      	beq.n	8025bd4 <_strtoull_l.constprop.0+0x34>
 8025cc8:	250a      	movs	r5, #10
 8025cca:	e78b      	b.n	8025be4 <_strtoull_l.constprop.0+0x44>
 8025ccc:	0802d779 	.word	0x0802d779

08025cd0 <strtoull>:
 8025cd0:	4613      	mov	r3, r2
 8025cd2:	460a      	mov	r2, r1
 8025cd4:	4601      	mov	r1, r0
 8025cd6:	4802      	ldr	r0, [pc, #8]	; (8025ce0 <strtoull+0x10>)
 8025cd8:	6800      	ldr	r0, [r0, #0]
 8025cda:	f7ff bf61 	b.w	8025ba0 <_strtoull_l.constprop.0>
 8025cde:	bf00      	nop
 8025ce0:	200000fc 	.word	0x200000fc

08025ce4 <_write_r>:
 8025ce4:	b538      	push	{r3, r4, r5, lr}
 8025ce6:	4d07      	ldr	r5, [pc, #28]	; (8025d04 <_write_r+0x20>)
 8025ce8:	4604      	mov	r4, r0
 8025cea:	4608      	mov	r0, r1
 8025cec:	4611      	mov	r1, r2
 8025cee:	2200      	movs	r2, #0
 8025cf0:	602a      	str	r2, [r5, #0]
 8025cf2:	461a      	mov	r2, r3
 8025cf4:	f7dc fc59 	bl	80025aa <_write>
 8025cf8:	1c43      	adds	r3, r0, #1
 8025cfa:	d102      	bne.n	8025d02 <_write_r+0x1e>
 8025cfc:	682b      	ldr	r3, [r5, #0]
 8025cfe:	b103      	cbz	r3, 8025d02 <_write_r+0x1e>
 8025d00:	6023      	str	r3, [r4, #0]
 8025d02:	bd38      	pop	{r3, r4, r5, pc}
 8025d04:	2001ae44 	.word	0x2001ae44

08025d08 <__assert_func>:
 8025d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025d0a:	4614      	mov	r4, r2
 8025d0c:	461a      	mov	r2, r3
 8025d0e:	4b09      	ldr	r3, [pc, #36]	; (8025d34 <__assert_func+0x2c>)
 8025d10:	681b      	ldr	r3, [r3, #0]
 8025d12:	4605      	mov	r5, r0
 8025d14:	68d8      	ldr	r0, [r3, #12]
 8025d16:	b14c      	cbz	r4, 8025d2c <__assert_func+0x24>
 8025d18:	4b07      	ldr	r3, [pc, #28]	; (8025d38 <__assert_func+0x30>)
 8025d1a:	9100      	str	r1, [sp, #0]
 8025d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025d20:	4906      	ldr	r1, [pc, #24]	; (8025d3c <__assert_func+0x34>)
 8025d22:	462b      	mov	r3, r5
 8025d24:	f000 ff62 	bl	8026bec <fiprintf>
 8025d28:	f002 ff76 	bl	8028c18 <abort>
 8025d2c:	4b04      	ldr	r3, [pc, #16]	; (8025d40 <__assert_func+0x38>)
 8025d2e:	461c      	mov	r4, r3
 8025d30:	e7f3      	b.n	8025d1a <__assert_func+0x12>
 8025d32:	bf00      	nop
 8025d34:	200000fc 	.word	0x200000fc
 8025d38:	0802d9e0 	.word	0x0802d9e0
 8025d3c:	0802d9ed 	.word	0x0802d9ed
 8025d40:	0802da1b 	.word	0x0802da1b

08025d44 <_close_r>:
 8025d44:	b538      	push	{r3, r4, r5, lr}
 8025d46:	4d06      	ldr	r5, [pc, #24]	; (8025d60 <_close_r+0x1c>)
 8025d48:	2300      	movs	r3, #0
 8025d4a:	4604      	mov	r4, r0
 8025d4c:	4608      	mov	r0, r1
 8025d4e:	602b      	str	r3, [r5, #0]
 8025d50:	f7dc fc47 	bl	80025e2 <_close>
 8025d54:	1c43      	adds	r3, r0, #1
 8025d56:	d102      	bne.n	8025d5e <_close_r+0x1a>
 8025d58:	682b      	ldr	r3, [r5, #0]
 8025d5a:	b103      	cbz	r3, 8025d5e <_close_r+0x1a>
 8025d5c:	6023      	str	r3, [r4, #0]
 8025d5e:	bd38      	pop	{r3, r4, r5, pc}
 8025d60:	2001ae44 	.word	0x2001ae44

08025d64 <quorem>:
 8025d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d68:	6903      	ldr	r3, [r0, #16]
 8025d6a:	690c      	ldr	r4, [r1, #16]
 8025d6c:	42a3      	cmp	r3, r4
 8025d6e:	4607      	mov	r7, r0
 8025d70:	f2c0 8081 	blt.w	8025e76 <quorem+0x112>
 8025d74:	3c01      	subs	r4, #1
 8025d76:	f101 0814 	add.w	r8, r1, #20
 8025d7a:	f100 0514 	add.w	r5, r0, #20
 8025d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025d82:	9301      	str	r3, [sp, #4]
 8025d84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025d88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025d8c:	3301      	adds	r3, #1
 8025d8e:	429a      	cmp	r2, r3
 8025d90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8025d94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025d98:	fbb2 f6f3 	udiv	r6, r2, r3
 8025d9c:	d331      	bcc.n	8025e02 <quorem+0x9e>
 8025d9e:	f04f 0e00 	mov.w	lr, #0
 8025da2:	4640      	mov	r0, r8
 8025da4:	46ac      	mov	ip, r5
 8025da6:	46f2      	mov	sl, lr
 8025da8:	f850 2b04 	ldr.w	r2, [r0], #4
 8025dac:	b293      	uxth	r3, r2
 8025dae:	fb06 e303 	mla	r3, r6, r3, lr
 8025db2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8025db6:	b29b      	uxth	r3, r3
 8025db8:	ebaa 0303 	sub.w	r3, sl, r3
 8025dbc:	f8dc a000 	ldr.w	sl, [ip]
 8025dc0:	0c12      	lsrs	r2, r2, #16
 8025dc2:	fa13 f38a 	uxtah	r3, r3, sl
 8025dc6:	fb06 e202 	mla	r2, r6, r2, lr
 8025dca:	9300      	str	r3, [sp, #0]
 8025dcc:	9b00      	ldr	r3, [sp, #0]
 8025dce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8025dd2:	b292      	uxth	r2, r2
 8025dd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8025dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025ddc:	f8bd 3000 	ldrh.w	r3, [sp]
 8025de0:	4581      	cmp	r9, r0
 8025de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025de6:	f84c 3b04 	str.w	r3, [ip], #4
 8025dea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8025dee:	d2db      	bcs.n	8025da8 <quorem+0x44>
 8025df0:	f855 300b 	ldr.w	r3, [r5, fp]
 8025df4:	b92b      	cbnz	r3, 8025e02 <quorem+0x9e>
 8025df6:	9b01      	ldr	r3, [sp, #4]
 8025df8:	3b04      	subs	r3, #4
 8025dfa:	429d      	cmp	r5, r3
 8025dfc:	461a      	mov	r2, r3
 8025dfe:	d32e      	bcc.n	8025e5e <quorem+0xfa>
 8025e00:	613c      	str	r4, [r7, #16]
 8025e02:	4638      	mov	r0, r7
 8025e04:	f001 fd7c 	bl	8027900 <__mcmp>
 8025e08:	2800      	cmp	r0, #0
 8025e0a:	db24      	blt.n	8025e56 <quorem+0xf2>
 8025e0c:	3601      	adds	r6, #1
 8025e0e:	4628      	mov	r0, r5
 8025e10:	f04f 0c00 	mov.w	ip, #0
 8025e14:	f858 2b04 	ldr.w	r2, [r8], #4
 8025e18:	f8d0 e000 	ldr.w	lr, [r0]
 8025e1c:	b293      	uxth	r3, r2
 8025e1e:	ebac 0303 	sub.w	r3, ip, r3
 8025e22:	0c12      	lsrs	r2, r2, #16
 8025e24:	fa13 f38e 	uxtah	r3, r3, lr
 8025e28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8025e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025e30:	b29b      	uxth	r3, r3
 8025e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025e36:	45c1      	cmp	r9, r8
 8025e38:	f840 3b04 	str.w	r3, [r0], #4
 8025e3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8025e40:	d2e8      	bcs.n	8025e14 <quorem+0xb0>
 8025e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025e46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025e4a:	b922      	cbnz	r2, 8025e56 <quorem+0xf2>
 8025e4c:	3b04      	subs	r3, #4
 8025e4e:	429d      	cmp	r5, r3
 8025e50:	461a      	mov	r2, r3
 8025e52:	d30a      	bcc.n	8025e6a <quorem+0x106>
 8025e54:	613c      	str	r4, [r7, #16]
 8025e56:	4630      	mov	r0, r6
 8025e58:	b003      	add	sp, #12
 8025e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e5e:	6812      	ldr	r2, [r2, #0]
 8025e60:	3b04      	subs	r3, #4
 8025e62:	2a00      	cmp	r2, #0
 8025e64:	d1cc      	bne.n	8025e00 <quorem+0x9c>
 8025e66:	3c01      	subs	r4, #1
 8025e68:	e7c7      	b.n	8025dfa <quorem+0x96>
 8025e6a:	6812      	ldr	r2, [r2, #0]
 8025e6c:	3b04      	subs	r3, #4
 8025e6e:	2a00      	cmp	r2, #0
 8025e70:	d1f0      	bne.n	8025e54 <quorem+0xf0>
 8025e72:	3c01      	subs	r4, #1
 8025e74:	e7eb      	b.n	8025e4e <quorem+0xea>
 8025e76:	2000      	movs	r0, #0
 8025e78:	e7ee      	b.n	8025e58 <quorem+0xf4>
 8025e7a:	0000      	movs	r0, r0
 8025e7c:	0000      	movs	r0, r0
	...

08025e80 <_dtoa_r>:
 8025e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e84:	ed2d 8b04 	vpush	{d8-d9}
 8025e88:	ec57 6b10 	vmov	r6, r7, d0
 8025e8c:	b093      	sub	sp, #76	; 0x4c
 8025e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8025e90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8025e94:	9106      	str	r1, [sp, #24]
 8025e96:	ee10 aa10 	vmov	sl, s0
 8025e9a:	4604      	mov	r4, r0
 8025e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8025e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8025ea0:	46bb      	mov	fp, r7
 8025ea2:	b975      	cbnz	r5, 8025ec2 <_dtoa_r+0x42>
 8025ea4:	2010      	movs	r0, #16
 8025ea6:	f001 fa39 	bl	802731c <malloc>
 8025eaa:	4602      	mov	r2, r0
 8025eac:	6260      	str	r0, [r4, #36]	; 0x24
 8025eae:	b920      	cbnz	r0, 8025eba <_dtoa_r+0x3a>
 8025eb0:	4ba7      	ldr	r3, [pc, #668]	; (8026150 <_dtoa_r+0x2d0>)
 8025eb2:	21ea      	movs	r1, #234	; 0xea
 8025eb4:	48a7      	ldr	r0, [pc, #668]	; (8026154 <_dtoa_r+0x2d4>)
 8025eb6:	f7ff ff27 	bl	8025d08 <__assert_func>
 8025eba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8025ebe:	6005      	str	r5, [r0, #0]
 8025ec0:	60c5      	str	r5, [r0, #12]
 8025ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025ec4:	6819      	ldr	r1, [r3, #0]
 8025ec6:	b151      	cbz	r1, 8025ede <_dtoa_r+0x5e>
 8025ec8:	685a      	ldr	r2, [r3, #4]
 8025eca:	604a      	str	r2, [r1, #4]
 8025ecc:	2301      	movs	r3, #1
 8025ece:	4093      	lsls	r3, r2
 8025ed0:	608b      	str	r3, [r1, #8]
 8025ed2:	4620      	mov	r0, r4
 8025ed4:	f001 fa88 	bl	80273e8 <_Bfree>
 8025ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025eda:	2200      	movs	r2, #0
 8025edc:	601a      	str	r2, [r3, #0]
 8025ede:	1e3b      	subs	r3, r7, #0
 8025ee0:	bfaa      	itet	ge
 8025ee2:	2300      	movge	r3, #0
 8025ee4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8025ee8:	f8c8 3000 	strge.w	r3, [r8]
 8025eec:	4b9a      	ldr	r3, [pc, #616]	; (8026158 <_dtoa_r+0x2d8>)
 8025eee:	bfbc      	itt	lt
 8025ef0:	2201      	movlt	r2, #1
 8025ef2:	f8c8 2000 	strlt.w	r2, [r8]
 8025ef6:	ea33 030b 	bics.w	r3, r3, fp
 8025efa:	d11b      	bne.n	8025f34 <_dtoa_r+0xb4>
 8025efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025efe:	f242 730f 	movw	r3, #9999	; 0x270f
 8025f02:	6013      	str	r3, [r2, #0]
 8025f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025f08:	4333      	orrs	r3, r6
 8025f0a:	f000 8592 	beq.w	8026a32 <_dtoa_r+0xbb2>
 8025f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025f10:	b963      	cbnz	r3, 8025f2c <_dtoa_r+0xac>
 8025f12:	4b92      	ldr	r3, [pc, #584]	; (802615c <_dtoa_r+0x2dc>)
 8025f14:	e022      	b.n	8025f5c <_dtoa_r+0xdc>
 8025f16:	4b92      	ldr	r3, [pc, #584]	; (8026160 <_dtoa_r+0x2e0>)
 8025f18:	9301      	str	r3, [sp, #4]
 8025f1a:	3308      	adds	r3, #8
 8025f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025f1e:	6013      	str	r3, [r2, #0]
 8025f20:	9801      	ldr	r0, [sp, #4]
 8025f22:	b013      	add	sp, #76	; 0x4c
 8025f24:	ecbd 8b04 	vpop	{d8-d9}
 8025f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f2c:	4b8b      	ldr	r3, [pc, #556]	; (802615c <_dtoa_r+0x2dc>)
 8025f2e:	9301      	str	r3, [sp, #4]
 8025f30:	3303      	adds	r3, #3
 8025f32:	e7f3      	b.n	8025f1c <_dtoa_r+0x9c>
 8025f34:	2200      	movs	r2, #0
 8025f36:	2300      	movs	r3, #0
 8025f38:	4650      	mov	r0, sl
 8025f3a:	4659      	mov	r1, fp
 8025f3c:	f7da fdf4 	bl	8000b28 <__aeabi_dcmpeq>
 8025f40:	ec4b ab19 	vmov	d9, sl, fp
 8025f44:	4680      	mov	r8, r0
 8025f46:	b158      	cbz	r0, 8025f60 <_dtoa_r+0xe0>
 8025f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025f4a:	2301      	movs	r3, #1
 8025f4c:	6013      	str	r3, [r2, #0]
 8025f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025f50:	2b00      	cmp	r3, #0
 8025f52:	f000 856b 	beq.w	8026a2c <_dtoa_r+0xbac>
 8025f56:	4883      	ldr	r0, [pc, #524]	; (8026164 <_dtoa_r+0x2e4>)
 8025f58:	6018      	str	r0, [r3, #0]
 8025f5a:	1e43      	subs	r3, r0, #1
 8025f5c:	9301      	str	r3, [sp, #4]
 8025f5e:	e7df      	b.n	8025f20 <_dtoa_r+0xa0>
 8025f60:	ec4b ab10 	vmov	d0, sl, fp
 8025f64:	aa10      	add	r2, sp, #64	; 0x40
 8025f66:	a911      	add	r1, sp, #68	; 0x44
 8025f68:	4620      	mov	r0, r4
 8025f6a:	f001 fdeb 	bl	8027b44 <__d2b>
 8025f6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8025f72:	ee08 0a10 	vmov	s16, r0
 8025f76:	2d00      	cmp	r5, #0
 8025f78:	f000 8084 	beq.w	8026084 <_dtoa_r+0x204>
 8025f7c:	ee19 3a90 	vmov	r3, s19
 8025f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025f84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8025f88:	4656      	mov	r6, sl
 8025f8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8025f8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8025f92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8025f96:	4b74      	ldr	r3, [pc, #464]	; (8026168 <_dtoa_r+0x2e8>)
 8025f98:	2200      	movs	r2, #0
 8025f9a:	4630      	mov	r0, r6
 8025f9c:	4639      	mov	r1, r7
 8025f9e:	f7da f9a3 	bl	80002e8 <__aeabi_dsub>
 8025fa2:	a365      	add	r3, pc, #404	; (adr r3, 8026138 <_dtoa_r+0x2b8>)
 8025fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fa8:	f7da fb56 	bl	8000658 <__aeabi_dmul>
 8025fac:	a364      	add	r3, pc, #400	; (adr r3, 8026140 <_dtoa_r+0x2c0>)
 8025fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fb2:	f7da f99b 	bl	80002ec <__adddf3>
 8025fb6:	4606      	mov	r6, r0
 8025fb8:	4628      	mov	r0, r5
 8025fba:	460f      	mov	r7, r1
 8025fbc:	f7da fae2 	bl	8000584 <__aeabi_i2d>
 8025fc0:	a361      	add	r3, pc, #388	; (adr r3, 8026148 <_dtoa_r+0x2c8>)
 8025fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fc6:	f7da fb47 	bl	8000658 <__aeabi_dmul>
 8025fca:	4602      	mov	r2, r0
 8025fcc:	460b      	mov	r3, r1
 8025fce:	4630      	mov	r0, r6
 8025fd0:	4639      	mov	r1, r7
 8025fd2:	f7da f98b 	bl	80002ec <__adddf3>
 8025fd6:	4606      	mov	r6, r0
 8025fd8:	460f      	mov	r7, r1
 8025fda:	f7da fded 	bl	8000bb8 <__aeabi_d2iz>
 8025fde:	2200      	movs	r2, #0
 8025fe0:	9000      	str	r0, [sp, #0]
 8025fe2:	2300      	movs	r3, #0
 8025fe4:	4630      	mov	r0, r6
 8025fe6:	4639      	mov	r1, r7
 8025fe8:	f7da fda8 	bl	8000b3c <__aeabi_dcmplt>
 8025fec:	b150      	cbz	r0, 8026004 <_dtoa_r+0x184>
 8025fee:	9800      	ldr	r0, [sp, #0]
 8025ff0:	f7da fac8 	bl	8000584 <__aeabi_i2d>
 8025ff4:	4632      	mov	r2, r6
 8025ff6:	463b      	mov	r3, r7
 8025ff8:	f7da fd96 	bl	8000b28 <__aeabi_dcmpeq>
 8025ffc:	b910      	cbnz	r0, 8026004 <_dtoa_r+0x184>
 8025ffe:	9b00      	ldr	r3, [sp, #0]
 8026000:	3b01      	subs	r3, #1
 8026002:	9300      	str	r3, [sp, #0]
 8026004:	9b00      	ldr	r3, [sp, #0]
 8026006:	2b16      	cmp	r3, #22
 8026008:	d85a      	bhi.n	80260c0 <_dtoa_r+0x240>
 802600a:	9a00      	ldr	r2, [sp, #0]
 802600c:	4b57      	ldr	r3, [pc, #348]	; (802616c <_dtoa_r+0x2ec>)
 802600e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026016:	ec51 0b19 	vmov	r0, r1, d9
 802601a:	f7da fd8f 	bl	8000b3c <__aeabi_dcmplt>
 802601e:	2800      	cmp	r0, #0
 8026020:	d050      	beq.n	80260c4 <_dtoa_r+0x244>
 8026022:	9b00      	ldr	r3, [sp, #0]
 8026024:	3b01      	subs	r3, #1
 8026026:	9300      	str	r3, [sp, #0]
 8026028:	2300      	movs	r3, #0
 802602a:	930b      	str	r3, [sp, #44]	; 0x2c
 802602c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802602e:	1b5d      	subs	r5, r3, r5
 8026030:	1e6b      	subs	r3, r5, #1
 8026032:	9305      	str	r3, [sp, #20]
 8026034:	bf45      	ittet	mi
 8026036:	f1c5 0301 	rsbmi	r3, r5, #1
 802603a:	9304      	strmi	r3, [sp, #16]
 802603c:	2300      	movpl	r3, #0
 802603e:	2300      	movmi	r3, #0
 8026040:	bf4c      	ite	mi
 8026042:	9305      	strmi	r3, [sp, #20]
 8026044:	9304      	strpl	r3, [sp, #16]
 8026046:	9b00      	ldr	r3, [sp, #0]
 8026048:	2b00      	cmp	r3, #0
 802604a:	db3d      	blt.n	80260c8 <_dtoa_r+0x248>
 802604c:	9b05      	ldr	r3, [sp, #20]
 802604e:	9a00      	ldr	r2, [sp, #0]
 8026050:	920a      	str	r2, [sp, #40]	; 0x28
 8026052:	4413      	add	r3, r2
 8026054:	9305      	str	r3, [sp, #20]
 8026056:	2300      	movs	r3, #0
 8026058:	9307      	str	r3, [sp, #28]
 802605a:	9b06      	ldr	r3, [sp, #24]
 802605c:	2b09      	cmp	r3, #9
 802605e:	f200 8089 	bhi.w	8026174 <_dtoa_r+0x2f4>
 8026062:	2b05      	cmp	r3, #5
 8026064:	bfc4      	itt	gt
 8026066:	3b04      	subgt	r3, #4
 8026068:	9306      	strgt	r3, [sp, #24]
 802606a:	9b06      	ldr	r3, [sp, #24]
 802606c:	f1a3 0302 	sub.w	r3, r3, #2
 8026070:	bfcc      	ite	gt
 8026072:	2500      	movgt	r5, #0
 8026074:	2501      	movle	r5, #1
 8026076:	2b03      	cmp	r3, #3
 8026078:	f200 8087 	bhi.w	802618a <_dtoa_r+0x30a>
 802607c:	e8df f003 	tbb	[pc, r3]
 8026080:	59383a2d 	.word	0x59383a2d
 8026084:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8026088:	441d      	add	r5, r3
 802608a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802608e:	2b20      	cmp	r3, #32
 8026090:	bfc1      	itttt	gt
 8026092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026096:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 802609a:	fa0b f303 	lslgt.w	r3, fp, r3
 802609e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80260a2:	bfda      	itte	le
 80260a4:	f1c3 0320 	rsble	r3, r3, #32
 80260a8:	fa06 f003 	lslle.w	r0, r6, r3
 80260ac:	4318      	orrgt	r0, r3
 80260ae:	f7da fa59 	bl	8000564 <__aeabi_ui2d>
 80260b2:	2301      	movs	r3, #1
 80260b4:	4606      	mov	r6, r0
 80260b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80260ba:	3d01      	subs	r5, #1
 80260bc:	930e      	str	r3, [sp, #56]	; 0x38
 80260be:	e76a      	b.n	8025f96 <_dtoa_r+0x116>
 80260c0:	2301      	movs	r3, #1
 80260c2:	e7b2      	b.n	802602a <_dtoa_r+0x1aa>
 80260c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80260c6:	e7b1      	b.n	802602c <_dtoa_r+0x1ac>
 80260c8:	9b04      	ldr	r3, [sp, #16]
 80260ca:	9a00      	ldr	r2, [sp, #0]
 80260cc:	1a9b      	subs	r3, r3, r2
 80260ce:	9304      	str	r3, [sp, #16]
 80260d0:	4253      	negs	r3, r2
 80260d2:	9307      	str	r3, [sp, #28]
 80260d4:	2300      	movs	r3, #0
 80260d6:	930a      	str	r3, [sp, #40]	; 0x28
 80260d8:	e7bf      	b.n	802605a <_dtoa_r+0x1da>
 80260da:	2300      	movs	r3, #0
 80260dc:	9308      	str	r3, [sp, #32]
 80260de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260e0:	2b00      	cmp	r3, #0
 80260e2:	dc55      	bgt.n	8026190 <_dtoa_r+0x310>
 80260e4:	2301      	movs	r3, #1
 80260e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80260ea:	461a      	mov	r2, r3
 80260ec:	9209      	str	r2, [sp, #36]	; 0x24
 80260ee:	e00c      	b.n	802610a <_dtoa_r+0x28a>
 80260f0:	2301      	movs	r3, #1
 80260f2:	e7f3      	b.n	80260dc <_dtoa_r+0x25c>
 80260f4:	2300      	movs	r3, #0
 80260f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80260f8:	9308      	str	r3, [sp, #32]
 80260fa:	9b00      	ldr	r3, [sp, #0]
 80260fc:	4413      	add	r3, r2
 80260fe:	9302      	str	r3, [sp, #8]
 8026100:	3301      	adds	r3, #1
 8026102:	2b01      	cmp	r3, #1
 8026104:	9303      	str	r3, [sp, #12]
 8026106:	bfb8      	it	lt
 8026108:	2301      	movlt	r3, #1
 802610a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802610c:	2200      	movs	r2, #0
 802610e:	6042      	str	r2, [r0, #4]
 8026110:	2204      	movs	r2, #4
 8026112:	f102 0614 	add.w	r6, r2, #20
 8026116:	429e      	cmp	r6, r3
 8026118:	6841      	ldr	r1, [r0, #4]
 802611a:	d93d      	bls.n	8026198 <_dtoa_r+0x318>
 802611c:	4620      	mov	r0, r4
 802611e:	f001 f923 	bl	8027368 <_Balloc>
 8026122:	9001      	str	r0, [sp, #4]
 8026124:	2800      	cmp	r0, #0
 8026126:	d13b      	bne.n	80261a0 <_dtoa_r+0x320>
 8026128:	4b11      	ldr	r3, [pc, #68]	; (8026170 <_dtoa_r+0x2f0>)
 802612a:	4602      	mov	r2, r0
 802612c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8026130:	e6c0      	b.n	8025eb4 <_dtoa_r+0x34>
 8026132:	2301      	movs	r3, #1
 8026134:	e7df      	b.n	80260f6 <_dtoa_r+0x276>
 8026136:	bf00      	nop
 8026138:	636f4361 	.word	0x636f4361
 802613c:	3fd287a7 	.word	0x3fd287a7
 8026140:	8b60c8b3 	.word	0x8b60c8b3
 8026144:	3fc68a28 	.word	0x3fc68a28
 8026148:	509f79fb 	.word	0x509f79fb
 802614c:	3fd34413 	.word	0x3fd34413
 8026150:	0802d917 	.word	0x0802d917
 8026154:	0802da29 	.word	0x0802da29
 8026158:	7ff00000 	.word	0x7ff00000
 802615c:	0802da25 	.word	0x0802da25
 8026160:	0802da1c 	.word	0x0802da1c
 8026164:	0802dc82 	.word	0x0802dc82
 8026168:	3ff80000 	.word	0x3ff80000
 802616c:	0802db98 	.word	0x0802db98
 8026170:	0802da84 	.word	0x0802da84
 8026174:	2501      	movs	r5, #1
 8026176:	2300      	movs	r3, #0
 8026178:	9306      	str	r3, [sp, #24]
 802617a:	9508      	str	r5, [sp, #32]
 802617c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8026180:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026184:	2200      	movs	r2, #0
 8026186:	2312      	movs	r3, #18
 8026188:	e7b0      	b.n	80260ec <_dtoa_r+0x26c>
 802618a:	2301      	movs	r3, #1
 802618c:	9308      	str	r3, [sp, #32]
 802618e:	e7f5      	b.n	802617c <_dtoa_r+0x2fc>
 8026190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026192:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026196:	e7b8      	b.n	802610a <_dtoa_r+0x28a>
 8026198:	3101      	adds	r1, #1
 802619a:	6041      	str	r1, [r0, #4]
 802619c:	0052      	lsls	r2, r2, #1
 802619e:	e7b8      	b.n	8026112 <_dtoa_r+0x292>
 80261a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80261a2:	9a01      	ldr	r2, [sp, #4]
 80261a4:	601a      	str	r2, [r3, #0]
 80261a6:	9b03      	ldr	r3, [sp, #12]
 80261a8:	2b0e      	cmp	r3, #14
 80261aa:	f200 809d 	bhi.w	80262e8 <_dtoa_r+0x468>
 80261ae:	2d00      	cmp	r5, #0
 80261b0:	f000 809a 	beq.w	80262e8 <_dtoa_r+0x468>
 80261b4:	9b00      	ldr	r3, [sp, #0]
 80261b6:	2b00      	cmp	r3, #0
 80261b8:	dd32      	ble.n	8026220 <_dtoa_r+0x3a0>
 80261ba:	4ab7      	ldr	r2, [pc, #732]	; (8026498 <_dtoa_r+0x618>)
 80261bc:	f003 030f 	and.w	r3, r3, #15
 80261c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80261c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80261c8:	9b00      	ldr	r3, [sp, #0]
 80261ca:	05d8      	lsls	r0, r3, #23
 80261cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80261d0:	d516      	bpl.n	8026200 <_dtoa_r+0x380>
 80261d2:	4bb2      	ldr	r3, [pc, #712]	; (802649c <_dtoa_r+0x61c>)
 80261d4:	ec51 0b19 	vmov	r0, r1, d9
 80261d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80261dc:	f7da fb66 	bl	80008ac <__aeabi_ddiv>
 80261e0:	f007 070f 	and.w	r7, r7, #15
 80261e4:	4682      	mov	sl, r0
 80261e6:	468b      	mov	fp, r1
 80261e8:	2503      	movs	r5, #3
 80261ea:	4eac      	ldr	r6, [pc, #688]	; (802649c <_dtoa_r+0x61c>)
 80261ec:	b957      	cbnz	r7, 8026204 <_dtoa_r+0x384>
 80261ee:	4642      	mov	r2, r8
 80261f0:	464b      	mov	r3, r9
 80261f2:	4650      	mov	r0, sl
 80261f4:	4659      	mov	r1, fp
 80261f6:	f7da fb59 	bl	80008ac <__aeabi_ddiv>
 80261fa:	4682      	mov	sl, r0
 80261fc:	468b      	mov	fp, r1
 80261fe:	e028      	b.n	8026252 <_dtoa_r+0x3d2>
 8026200:	2502      	movs	r5, #2
 8026202:	e7f2      	b.n	80261ea <_dtoa_r+0x36a>
 8026204:	07f9      	lsls	r1, r7, #31
 8026206:	d508      	bpl.n	802621a <_dtoa_r+0x39a>
 8026208:	4640      	mov	r0, r8
 802620a:	4649      	mov	r1, r9
 802620c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8026210:	f7da fa22 	bl	8000658 <__aeabi_dmul>
 8026214:	3501      	adds	r5, #1
 8026216:	4680      	mov	r8, r0
 8026218:	4689      	mov	r9, r1
 802621a:	107f      	asrs	r7, r7, #1
 802621c:	3608      	adds	r6, #8
 802621e:	e7e5      	b.n	80261ec <_dtoa_r+0x36c>
 8026220:	f000 809b 	beq.w	802635a <_dtoa_r+0x4da>
 8026224:	9b00      	ldr	r3, [sp, #0]
 8026226:	4f9d      	ldr	r7, [pc, #628]	; (802649c <_dtoa_r+0x61c>)
 8026228:	425e      	negs	r6, r3
 802622a:	4b9b      	ldr	r3, [pc, #620]	; (8026498 <_dtoa_r+0x618>)
 802622c:	f006 020f 	and.w	r2, r6, #15
 8026230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026238:	ec51 0b19 	vmov	r0, r1, d9
 802623c:	f7da fa0c 	bl	8000658 <__aeabi_dmul>
 8026240:	1136      	asrs	r6, r6, #4
 8026242:	4682      	mov	sl, r0
 8026244:	468b      	mov	fp, r1
 8026246:	2300      	movs	r3, #0
 8026248:	2502      	movs	r5, #2
 802624a:	2e00      	cmp	r6, #0
 802624c:	d17a      	bne.n	8026344 <_dtoa_r+0x4c4>
 802624e:	2b00      	cmp	r3, #0
 8026250:	d1d3      	bne.n	80261fa <_dtoa_r+0x37a>
 8026252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026254:	2b00      	cmp	r3, #0
 8026256:	f000 8082 	beq.w	802635e <_dtoa_r+0x4de>
 802625a:	4b91      	ldr	r3, [pc, #580]	; (80264a0 <_dtoa_r+0x620>)
 802625c:	2200      	movs	r2, #0
 802625e:	4650      	mov	r0, sl
 8026260:	4659      	mov	r1, fp
 8026262:	f7da fc6b 	bl	8000b3c <__aeabi_dcmplt>
 8026266:	2800      	cmp	r0, #0
 8026268:	d079      	beq.n	802635e <_dtoa_r+0x4de>
 802626a:	9b03      	ldr	r3, [sp, #12]
 802626c:	2b00      	cmp	r3, #0
 802626e:	d076      	beq.n	802635e <_dtoa_r+0x4de>
 8026270:	9b02      	ldr	r3, [sp, #8]
 8026272:	2b00      	cmp	r3, #0
 8026274:	dd36      	ble.n	80262e4 <_dtoa_r+0x464>
 8026276:	9b00      	ldr	r3, [sp, #0]
 8026278:	4650      	mov	r0, sl
 802627a:	4659      	mov	r1, fp
 802627c:	1e5f      	subs	r7, r3, #1
 802627e:	2200      	movs	r2, #0
 8026280:	4b88      	ldr	r3, [pc, #544]	; (80264a4 <_dtoa_r+0x624>)
 8026282:	f7da f9e9 	bl	8000658 <__aeabi_dmul>
 8026286:	9e02      	ldr	r6, [sp, #8]
 8026288:	4682      	mov	sl, r0
 802628a:	468b      	mov	fp, r1
 802628c:	3501      	adds	r5, #1
 802628e:	4628      	mov	r0, r5
 8026290:	f7da f978 	bl	8000584 <__aeabi_i2d>
 8026294:	4652      	mov	r2, sl
 8026296:	465b      	mov	r3, fp
 8026298:	f7da f9de 	bl	8000658 <__aeabi_dmul>
 802629c:	4b82      	ldr	r3, [pc, #520]	; (80264a8 <_dtoa_r+0x628>)
 802629e:	2200      	movs	r2, #0
 80262a0:	f7da f824 	bl	80002ec <__adddf3>
 80262a4:	46d0      	mov	r8, sl
 80262a6:	46d9      	mov	r9, fp
 80262a8:	4682      	mov	sl, r0
 80262aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80262ae:	2e00      	cmp	r6, #0
 80262b0:	d158      	bne.n	8026364 <_dtoa_r+0x4e4>
 80262b2:	4b7e      	ldr	r3, [pc, #504]	; (80264ac <_dtoa_r+0x62c>)
 80262b4:	2200      	movs	r2, #0
 80262b6:	4640      	mov	r0, r8
 80262b8:	4649      	mov	r1, r9
 80262ba:	f7da f815 	bl	80002e8 <__aeabi_dsub>
 80262be:	4652      	mov	r2, sl
 80262c0:	465b      	mov	r3, fp
 80262c2:	4680      	mov	r8, r0
 80262c4:	4689      	mov	r9, r1
 80262c6:	f7da fc57 	bl	8000b78 <__aeabi_dcmpgt>
 80262ca:	2800      	cmp	r0, #0
 80262cc:	f040 8295 	bne.w	80267fa <_dtoa_r+0x97a>
 80262d0:	4652      	mov	r2, sl
 80262d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80262d6:	4640      	mov	r0, r8
 80262d8:	4649      	mov	r1, r9
 80262da:	f7da fc2f 	bl	8000b3c <__aeabi_dcmplt>
 80262de:	2800      	cmp	r0, #0
 80262e0:	f040 8289 	bne.w	80267f6 <_dtoa_r+0x976>
 80262e4:	ec5b ab19 	vmov	sl, fp, d9
 80262e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80262ea:	2b00      	cmp	r3, #0
 80262ec:	f2c0 8148 	blt.w	8026580 <_dtoa_r+0x700>
 80262f0:	9a00      	ldr	r2, [sp, #0]
 80262f2:	2a0e      	cmp	r2, #14
 80262f4:	f300 8144 	bgt.w	8026580 <_dtoa_r+0x700>
 80262f8:	4b67      	ldr	r3, [pc, #412]	; (8026498 <_dtoa_r+0x618>)
 80262fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80262fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026304:	2b00      	cmp	r3, #0
 8026306:	f280 80d5 	bge.w	80264b4 <_dtoa_r+0x634>
 802630a:	9b03      	ldr	r3, [sp, #12]
 802630c:	2b00      	cmp	r3, #0
 802630e:	f300 80d1 	bgt.w	80264b4 <_dtoa_r+0x634>
 8026312:	f040 826f 	bne.w	80267f4 <_dtoa_r+0x974>
 8026316:	4b65      	ldr	r3, [pc, #404]	; (80264ac <_dtoa_r+0x62c>)
 8026318:	2200      	movs	r2, #0
 802631a:	4640      	mov	r0, r8
 802631c:	4649      	mov	r1, r9
 802631e:	f7da f99b 	bl	8000658 <__aeabi_dmul>
 8026322:	4652      	mov	r2, sl
 8026324:	465b      	mov	r3, fp
 8026326:	f7da fc1d 	bl	8000b64 <__aeabi_dcmpge>
 802632a:	9e03      	ldr	r6, [sp, #12]
 802632c:	4637      	mov	r7, r6
 802632e:	2800      	cmp	r0, #0
 8026330:	f040 8245 	bne.w	80267be <_dtoa_r+0x93e>
 8026334:	9d01      	ldr	r5, [sp, #4]
 8026336:	2331      	movs	r3, #49	; 0x31
 8026338:	f805 3b01 	strb.w	r3, [r5], #1
 802633c:	9b00      	ldr	r3, [sp, #0]
 802633e:	3301      	adds	r3, #1
 8026340:	9300      	str	r3, [sp, #0]
 8026342:	e240      	b.n	80267c6 <_dtoa_r+0x946>
 8026344:	07f2      	lsls	r2, r6, #31
 8026346:	d505      	bpl.n	8026354 <_dtoa_r+0x4d4>
 8026348:	e9d7 2300 	ldrd	r2, r3, [r7]
 802634c:	f7da f984 	bl	8000658 <__aeabi_dmul>
 8026350:	3501      	adds	r5, #1
 8026352:	2301      	movs	r3, #1
 8026354:	1076      	asrs	r6, r6, #1
 8026356:	3708      	adds	r7, #8
 8026358:	e777      	b.n	802624a <_dtoa_r+0x3ca>
 802635a:	2502      	movs	r5, #2
 802635c:	e779      	b.n	8026252 <_dtoa_r+0x3d2>
 802635e:	9f00      	ldr	r7, [sp, #0]
 8026360:	9e03      	ldr	r6, [sp, #12]
 8026362:	e794      	b.n	802628e <_dtoa_r+0x40e>
 8026364:	9901      	ldr	r1, [sp, #4]
 8026366:	4b4c      	ldr	r3, [pc, #304]	; (8026498 <_dtoa_r+0x618>)
 8026368:	4431      	add	r1, r6
 802636a:	910d      	str	r1, [sp, #52]	; 0x34
 802636c:	9908      	ldr	r1, [sp, #32]
 802636e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8026372:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8026376:	2900      	cmp	r1, #0
 8026378:	d043      	beq.n	8026402 <_dtoa_r+0x582>
 802637a:	494d      	ldr	r1, [pc, #308]	; (80264b0 <_dtoa_r+0x630>)
 802637c:	2000      	movs	r0, #0
 802637e:	f7da fa95 	bl	80008ac <__aeabi_ddiv>
 8026382:	4652      	mov	r2, sl
 8026384:	465b      	mov	r3, fp
 8026386:	f7d9 ffaf 	bl	80002e8 <__aeabi_dsub>
 802638a:	9d01      	ldr	r5, [sp, #4]
 802638c:	4682      	mov	sl, r0
 802638e:	468b      	mov	fp, r1
 8026390:	4649      	mov	r1, r9
 8026392:	4640      	mov	r0, r8
 8026394:	f7da fc10 	bl	8000bb8 <__aeabi_d2iz>
 8026398:	4606      	mov	r6, r0
 802639a:	f7da f8f3 	bl	8000584 <__aeabi_i2d>
 802639e:	4602      	mov	r2, r0
 80263a0:	460b      	mov	r3, r1
 80263a2:	4640      	mov	r0, r8
 80263a4:	4649      	mov	r1, r9
 80263a6:	f7d9 ff9f 	bl	80002e8 <__aeabi_dsub>
 80263aa:	3630      	adds	r6, #48	; 0x30
 80263ac:	f805 6b01 	strb.w	r6, [r5], #1
 80263b0:	4652      	mov	r2, sl
 80263b2:	465b      	mov	r3, fp
 80263b4:	4680      	mov	r8, r0
 80263b6:	4689      	mov	r9, r1
 80263b8:	f7da fbc0 	bl	8000b3c <__aeabi_dcmplt>
 80263bc:	2800      	cmp	r0, #0
 80263be:	d163      	bne.n	8026488 <_dtoa_r+0x608>
 80263c0:	4642      	mov	r2, r8
 80263c2:	464b      	mov	r3, r9
 80263c4:	4936      	ldr	r1, [pc, #216]	; (80264a0 <_dtoa_r+0x620>)
 80263c6:	2000      	movs	r0, #0
 80263c8:	f7d9 ff8e 	bl	80002e8 <__aeabi_dsub>
 80263cc:	4652      	mov	r2, sl
 80263ce:	465b      	mov	r3, fp
 80263d0:	f7da fbb4 	bl	8000b3c <__aeabi_dcmplt>
 80263d4:	2800      	cmp	r0, #0
 80263d6:	f040 80b5 	bne.w	8026544 <_dtoa_r+0x6c4>
 80263da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80263dc:	429d      	cmp	r5, r3
 80263de:	d081      	beq.n	80262e4 <_dtoa_r+0x464>
 80263e0:	4b30      	ldr	r3, [pc, #192]	; (80264a4 <_dtoa_r+0x624>)
 80263e2:	2200      	movs	r2, #0
 80263e4:	4650      	mov	r0, sl
 80263e6:	4659      	mov	r1, fp
 80263e8:	f7da f936 	bl	8000658 <__aeabi_dmul>
 80263ec:	4b2d      	ldr	r3, [pc, #180]	; (80264a4 <_dtoa_r+0x624>)
 80263ee:	4682      	mov	sl, r0
 80263f0:	468b      	mov	fp, r1
 80263f2:	4640      	mov	r0, r8
 80263f4:	4649      	mov	r1, r9
 80263f6:	2200      	movs	r2, #0
 80263f8:	f7da f92e 	bl	8000658 <__aeabi_dmul>
 80263fc:	4680      	mov	r8, r0
 80263fe:	4689      	mov	r9, r1
 8026400:	e7c6      	b.n	8026390 <_dtoa_r+0x510>
 8026402:	4650      	mov	r0, sl
 8026404:	4659      	mov	r1, fp
 8026406:	f7da f927 	bl	8000658 <__aeabi_dmul>
 802640a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802640c:	9d01      	ldr	r5, [sp, #4]
 802640e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026410:	4682      	mov	sl, r0
 8026412:	468b      	mov	fp, r1
 8026414:	4649      	mov	r1, r9
 8026416:	4640      	mov	r0, r8
 8026418:	f7da fbce 	bl	8000bb8 <__aeabi_d2iz>
 802641c:	4606      	mov	r6, r0
 802641e:	f7da f8b1 	bl	8000584 <__aeabi_i2d>
 8026422:	3630      	adds	r6, #48	; 0x30
 8026424:	4602      	mov	r2, r0
 8026426:	460b      	mov	r3, r1
 8026428:	4640      	mov	r0, r8
 802642a:	4649      	mov	r1, r9
 802642c:	f7d9 ff5c 	bl	80002e8 <__aeabi_dsub>
 8026430:	f805 6b01 	strb.w	r6, [r5], #1
 8026434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026436:	429d      	cmp	r5, r3
 8026438:	4680      	mov	r8, r0
 802643a:	4689      	mov	r9, r1
 802643c:	f04f 0200 	mov.w	r2, #0
 8026440:	d124      	bne.n	802648c <_dtoa_r+0x60c>
 8026442:	4b1b      	ldr	r3, [pc, #108]	; (80264b0 <_dtoa_r+0x630>)
 8026444:	4650      	mov	r0, sl
 8026446:	4659      	mov	r1, fp
 8026448:	f7d9 ff50 	bl	80002ec <__adddf3>
 802644c:	4602      	mov	r2, r0
 802644e:	460b      	mov	r3, r1
 8026450:	4640      	mov	r0, r8
 8026452:	4649      	mov	r1, r9
 8026454:	f7da fb90 	bl	8000b78 <__aeabi_dcmpgt>
 8026458:	2800      	cmp	r0, #0
 802645a:	d173      	bne.n	8026544 <_dtoa_r+0x6c4>
 802645c:	4652      	mov	r2, sl
 802645e:	465b      	mov	r3, fp
 8026460:	4913      	ldr	r1, [pc, #76]	; (80264b0 <_dtoa_r+0x630>)
 8026462:	2000      	movs	r0, #0
 8026464:	f7d9 ff40 	bl	80002e8 <__aeabi_dsub>
 8026468:	4602      	mov	r2, r0
 802646a:	460b      	mov	r3, r1
 802646c:	4640      	mov	r0, r8
 802646e:	4649      	mov	r1, r9
 8026470:	f7da fb64 	bl	8000b3c <__aeabi_dcmplt>
 8026474:	2800      	cmp	r0, #0
 8026476:	f43f af35 	beq.w	80262e4 <_dtoa_r+0x464>
 802647a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802647c:	1e6b      	subs	r3, r5, #1
 802647e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026480:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8026484:	2b30      	cmp	r3, #48	; 0x30
 8026486:	d0f8      	beq.n	802647a <_dtoa_r+0x5fa>
 8026488:	9700      	str	r7, [sp, #0]
 802648a:	e049      	b.n	8026520 <_dtoa_r+0x6a0>
 802648c:	4b05      	ldr	r3, [pc, #20]	; (80264a4 <_dtoa_r+0x624>)
 802648e:	f7da f8e3 	bl	8000658 <__aeabi_dmul>
 8026492:	4680      	mov	r8, r0
 8026494:	4689      	mov	r9, r1
 8026496:	e7bd      	b.n	8026414 <_dtoa_r+0x594>
 8026498:	0802db98 	.word	0x0802db98
 802649c:	0802db70 	.word	0x0802db70
 80264a0:	3ff00000 	.word	0x3ff00000
 80264a4:	40240000 	.word	0x40240000
 80264a8:	401c0000 	.word	0x401c0000
 80264ac:	40140000 	.word	0x40140000
 80264b0:	3fe00000 	.word	0x3fe00000
 80264b4:	9d01      	ldr	r5, [sp, #4]
 80264b6:	4656      	mov	r6, sl
 80264b8:	465f      	mov	r7, fp
 80264ba:	4642      	mov	r2, r8
 80264bc:	464b      	mov	r3, r9
 80264be:	4630      	mov	r0, r6
 80264c0:	4639      	mov	r1, r7
 80264c2:	f7da f9f3 	bl	80008ac <__aeabi_ddiv>
 80264c6:	f7da fb77 	bl	8000bb8 <__aeabi_d2iz>
 80264ca:	4682      	mov	sl, r0
 80264cc:	f7da f85a 	bl	8000584 <__aeabi_i2d>
 80264d0:	4642      	mov	r2, r8
 80264d2:	464b      	mov	r3, r9
 80264d4:	f7da f8c0 	bl	8000658 <__aeabi_dmul>
 80264d8:	4602      	mov	r2, r0
 80264da:	460b      	mov	r3, r1
 80264dc:	4630      	mov	r0, r6
 80264de:	4639      	mov	r1, r7
 80264e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80264e4:	f7d9 ff00 	bl	80002e8 <__aeabi_dsub>
 80264e8:	f805 6b01 	strb.w	r6, [r5], #1
 80264ec:	9e01      	ldr	r6, [sp, #4]
 80264ee:	9f03      	ldr	r7, [sp, #12]
 80264f0:	1bae      	subs	r6, r5, r6
 80264f2:	42b7      	cmp	r7, r6
 80264f4:	4602      	mov	r2, r0
 80264f6:	460b      	mov	r3, r1
 80264f8:	d135      	bne.n	8026566 <_dtoa_r+0x6e6>
 80264fa:	f7d9 fef7 	bl	80002ec <__adddf3>
 80264fe:	4642      	mov	r2, r8
 8026500:	464b      	mov	r3, r9
 8026502:	4606      	mov	r6, r0
 8026504:	460f      	mov	r7, r1
 8026506:	f7da fb37 	bl	8000b78 <__aeabi_dcmpgt>
 802650a:	b9d0      	cbnz	r0, 8026542 <_dtoa_r+0x6c2>
 802650c:	4642      	mov	r2, r8
 802650e:	464b      	mov	r3, r9
 8026510:	4630      	mov	r0, r6
 8026512:	4639      	mov	r1, r7
 8026514:	f7da fb08 	bl	8000b28 <__aeabi_dcmpeq>
 8026518:	b110      	cbz	r0, 8026520 <_dtoa_r+0x6a0>
 802651a:	f01a 0f01 	tst.w	sl, #1
 802651e:	d110      	bne.n	8026542 <_dtoa_r+0x6c2>
 8026520:	4620      	mov	r0, r4
 8026522:	ee18 1a10 	vmov	r1, s16
 8026526:	f000 ff5f 	bl	80273e8 <_Bfree>
 802652a:	2300      	movs	r3, #0
 802652c:	9800      	ldr	r0, [sp, #0]
 802652e:	702b      	strb	r3, [r5, #0]
 8026530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026532:	3001      	adds	r0, #1
 8026534:	6018      	str	r0, [r3, #0]
 8026536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026538:	2b00      	cmp	r3, #0
 802653a:	f43f acf1 	beq.w	8025f20 <_dtoa_r+0xa0>
 802653e:	601d      	str	r5, [r3, #0]
 8026540:	e4ee      	b.n	8025f20 <_dtoa_r+0xa0>
 8026542:	9f00      	ldr	r7, [sp, #0]
 8026544:	462b      	mov	r3, r5
 8026546:	461d      	mov	r5, r3
 8026548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802654c:	2a39      	cmp	r2, #57	; 0x39
 802654e:	d106      	bne.n	802655e <_dtoa_r+0x6de>
 8026550:	9a01      	ldr	r2, [sp, #4]
 8026552:	429a      	cmp	r2, r3
 8026554:	d1f7      	bne.n	8026546 <_dtoa_r+0x6c6>
 8026556:	9901      	ldr	r1, [sp, #4]
 8026558:	2230      	movs	r2, #48	; 0x30
 802655a:	3701      	adds	r7, #1
 802655c:	700a      	strb	r2, [r1, #0]
 802655e:	781a      	ldrb	r2, [r3, #0]
 8026560:	3201      	adds	r2, #1
 8026562:	701a      	strb	r2, [r3, #0]
 8026564:	e790      	b.n	8026488 <_dtoa_r+0x608>
 8026566:	4ba6      	ldr	r3, [pc, #664]	; (8026800 <_dtoa_r+0x980>)
 8026568:	2200      	movs	r2, #0
 802656a:	f7da f875 	bl	8000658 <__aeabi_dmul>
 802656e:	2200      	movs	r2, #0
 8026570:	2300      	movs	r3, #0
 8026572:	4606      	mov	r6, r0
 8026574:	460f      	mov	r7, r1
 8026576:	f7da fad7 	bl	8000b28 <__aeabi_dcmpeq>
 802657a:	2800      	cmp	r0, #0
 802657c:	d09d      	beq.n	80264ba <_dtoa_r+0x63a>
 802657e:	e7cf      	b.n	8026520 <_dtoa_r+0x6a0>
 8026580:	9a08      	ldr	r2, [sp, #32]
 8026582:	2a00      	cmp	r2, #0
 8026584:	f000 80d7 	beq.w	8026736 <_dtoa_r+0x8b6>
 8026588:	9a06      	ldr	r2, [sp, #24]
 802658a:	2a01      	cmp	r2, #1
 802658c:	f300 80ba 	bgt.w	8026704 <_dtoa_r+0x884>
 8026590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026592:	2a00      	cmp	r2, #0
 8026594:	f000 80b2 	beq.w	80266fc <_dtoa_r+0x87c>
 8026598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802659c:	9e07      	ldr	r6, [sp, #28]
 802659e:	9d04      	ldr	r5, [sp, #16]
 80265a0:	9a04      	ldr	r2, [sp, #16]
 80265a2:	441a      	add	r2, r3
 80265a4:	9204      	str	r2, [sp, #16]
 80265a6:	9a05      	ldr	r2, [sp, #20]
 80265a8:	2101      	movs	r1, #1
 80265aa:	441a      	add	r2, r3
 80265ac:	4620      	mov	r0, r4
 80265ae:	9205      	str	r2, [sp, #20]
 80265b0:	f001 f81c 	bl	80275ec <__i2b>
 80265b4:	4607      	mov	r7, r0
 80265b6:	2d00      	cmp	r5, #0
 80265b8:	dd0c      	ble.n	80265d4 <_dtoa_r+0x754>
 80265ba:	9b05      	ldr	r3, [sp, #20]
 80265bc:	2b00      	cmp	r3, #0
 80265be:	dd09      	ble.n	80265d4 <_dtoa_r+0x754>
 80265c0:	42ab      	cmp	r3, r5
 80265c2:	9a04      	ldr	r2, [sp, #16]
 80265c4:	bfa8      	it	ge
 80265c6:	462b      	movge	r3, r5
 80265c8:	1ad2      	subs	r2, r2, r3
 80265ca:	9204      	str	r2, [sp, #16]
 80265cc:	9a05      	ldr	r2, [sp, #20]
 80265ce:	1aed      	subs	r5, r5, r3
 80265d0:	1ad3      	subs	r3, r2, r3
 80265d2:	9305      	str	r3, [sp, #20]
 80265d4:	9b07      	ldr	r3, [sp, #28]
 80265d6:	b31b      	cbz	r3, 8026620 <_dtoa_r+0x7a0>
 80265d8:	9b08      	ldr	r3, [sp, #32]
 80265da:	2b00      	cmp	r3, #0
 80265dc:	f000 80af 	beq.w	802673e <_dtoa_r+0x8be>
 80265e0:	2e00      	cmp	r6, #0
 80265e2:	dd13      	ble.n	802660c <_dtoa_r+0x78c>
 80265e4:	4639      	mov	r1, r7
 80265e6:	4632      	mov	r2, r6
 80265e8:	4620      	mov	r0, r4
 80265ea:	f001 f8bf 	bl	802776c <__pow5mult>
 80265ee:	ee18 2a10 	vmov	r2, s16
 80265f2:	4601      	mov	r1, r0
 80265f4:	4607      	mov	r7, r0
 80265f6:	4620      	mov	r0, r4
 80265f8:	f001 f80e 	bl	8027618 <__multiply>
 80265fc:	ee18 1a10 	vmov	r1, s16
 8026600:	4680      	mov	r8, r0
 8026602:	4620      	mov	r0, r4
 8026604:	f000 fef0 	bl	80273e8 <_Bfree>
 8026608:	ee08 8a10 	vmov	s16, r8
 802660c:	9b07      	ldr	r3, [sp, #28]
 802660e:	1b9a      	subs	r2, r3, r6
 8026610:	d006      	beq.n	8026620 <_dtoa_r+0x7a0>
 8026612:	ee18 1a10 	vmov	r1, s16
 8026616:	4620      	mov	r0, r4
 8026618:	f001 f8a8 	bl	802776c <__pow5mult>
 802661c:	ee08 0a10 	vmov	s16, r0
 8026620:	2101      	movs	r1, #1
 8026622:	4620      	mov	r0, r4
 8026624:	f000 ffe2 	bl	80275ec <__i2b>
 8026628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802662a:	2b00      	cmp	r3, #0
 802662c:	4606      	mov	r6, r0
 802662e:	f340 8088 	ble.w	8026742 <_dtoa_r+0x8c2>
 8026632:	461a      	mov	r2, r3
 8026634:	4601      	mov	r1, r0
 8026636:	4620      	mov	r0, r4
 8026638:	f001 f898 	bl	802776c <__pow5mult>
 802663c:	9b06      	ldr	r3, [sp, #24]
 802663e:	2b01      	cmp	r3, #1
 8026640:	4606      	mov	r6, r0
 8026642:	f340 8081 	ble.w	8026748 <_dtoa_r+0x8c8>
 8026646:	f04f 0800 	mov.w	r8, #0
 802664a:	6933      	ldr	r3, [r6, #16]
 802664c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8026650:	6918      	ldr	r0, [r3, #16]
 8026652:	f000 ff7b 	bl	802754c <__hi0bits>
 8026656:	f1c0 0020 	rsb	r0, r0, #32
 802665a:	9b05      	ldr	r3, [sp, #20]
 802665c:	4418      	add	r0, r3
 802665e:	f010 001f 	ands.w	r0, r0, #31
 8026662:	f000 8092 	beq.w	802678a <_dtoa_r+0x90a>
 8026666:	f1c0 0320 	rsb	r3, r0, #32
 802666a:	2b04      	cmp	r3, #4
 802666c:	f340 808a 	ble.w	8026784 <_dtoa_r+0x904>
 8026670:	f1c0 001c 	rsb	r0, r0, #28
 8026674:	9b04      	ldr	r3, [sp, #16]
 8026676:	4403      	add	r3, r0
 8026678:	9304      	str	r3, [sp, #16]
 802667a:	9b05      	ldr	r3, [sp, #20]
 802667c:	4403      	add	r3, r0
 802667e:	4405      	add	r5, r0
 8026680:	9305      	str	r3, [sp, #20]
 8026682:	9b04      	ldr	r3, [sp, #16]
 8026684:	2b00      	cmp	r3, #0
 8026686:	dd07      	ble.n	8026698 <_dtoa_r+0x818>
 8026688:	ee18 1a10 	vmov	r1, s16
 802668c:	461a      	mov	r2, r3
 802668e:	4620      	mov	r0, r4
 8026690:	f001 f8c6 	bl	8027820 <__lshift>
 8026694:	ee08 0a10 	vmov	s16, r0
 8026698:	9b05      	ldr	r3, [sp, #20]
 802669a:	2b00      	cmp	r3, #0
 802669c:	dd05      	ble.n	80266aa <_dtoa_r+0x82a>
 802669e:	4631      	mov	r1, r6
 80266a0:	461a      	mov	r2, r3
 80266a2:	4620      	mov	r0, r4
 80266a4:	f001 f8bc 	bl	8027820 <__lshift>
 80266a8:	4606      	mov	r6, r0
 80266aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80266ac:	2b00      	cmp	r3, #0
 80266ae:	d06e      	beq.n	802678e <_dtoa_r+0x90e>
 80266b0:	ee18 0a10 	vmov	r0, s16
 80266b4:	4631      	mov	r1, r6
 80266b6:	f001 f923 	bl	8027900 <__mcmp>
 80266ba:	2800      	cmp	r0, #0
 80266bc:	da67      	bge.n	802678e <_dtoa_r+0x90e>
 80266be:	9b00      	ldr	r3, [sp, #0]
 80266c0:	3b01      	subs	r3, #1
 80266c2:	ee18 1a10 	vmov	r1, s16
 80266c6:	9300      	str	r3, [sp, #0]
 80266c8:	220a      	movs	r2, #10
 80266ca:	2300      	movs	r3, #0
 80266cc:	4620      	mov	r0, r4
 80266ce:	f000 fead 	bl	802742c <__multadd>
 80266d2:	9b08      	ldr	r3, [sp, #32]
 80266d4:	ee08 0a10 	vmov	s16, r0
 80266d8:	2b00      	cmp	r3, #0
 80266da:	f000 81b1 	beq.w	8026a40 <_dtoa_r+0xbc0>
 80266de:	2300      	movs	r3, #0
 80266e0:	4639      	mov	r1, r7
 80266e2:	220a      	movs	r2, #10
 80266e4:	4620      	mov	r0, r4
 80266e6:	f000 fea1 	bl	802742c <__multadd>
 80266ea:	9b02      	ldr	r3, [sp, #8]
 80266ec:	2b00      	cmp	r3, #0
 80266ee:	4607      	mov	r7, r0
 80266f0:	f300 808e 	bgt.w	8026810 <_dtoa_r+0x990>
 80266f4:	9b06      	ldr	r3, [sp, #24]
 80266f6:	2b02      	cmp	r3, #2
 80266f8:	dc51      	bgt.n	802679e <_dtoa_r+0x91e>
 80266fa:	e089      	b.n	8026810 <_dtoa_r+0x990>
 80266fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80266fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8026702:	e74b      	b.n	802659c <_dtoa_r+0x71c>
 8026704:	9b03      	ldr	r3, [sp, #12]
 8026706:	1e5e      	subs	r6, r3, #1
 8026708:	9b07      	ldr	r3, [sp, #28]
 802670a:	42b3      	cmp	r3, r6
 802670c:	bfbf      	itttt	lt
 802670e:	9b07      	ldrlt	r3, [sp, #28]
 8026710:	9607      	strlt	r6, [sp, #28]
 8026712:	1af2      	sublt	r2, r6, r3
 8026714:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8026716:	bfb6      	itet	lt
 8026718:	189b      	addlt	r3, r3, r2
 802671a:	1b9e      	subge	r6, r3, r6
 802671c:	930a      	strlt	r3, [sp, #40]	; 0x28
 802671e:	9b03      	ldr	r3, [sp, #12]
 8026720:	bfb8      	it	lt
 8026722:	2600      	movlt	r6, #0
 8026724:	2b00      	cmp	r3, #0
 8026726:	bfb7      	itett	lt
 8026728:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802672c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8026730:	1a9d      	sublt	r5, r3, r2
 8026732:	2300      	movlt	r3, #0
 8026734:	e734      	b.n	80265a0 <_dtoa_r+0x720>
 8026736:	9e07      	ldr	r6, [sp, #28]
 8026738:	9d04      	ldr	r5, [sp, #16]
 802673a:	9f08      	ldr	r7, [sp, #32]
 802673c:	e73b      	b.n	80265b6 <_dtoa_r+0x736>
 802673e:	9a07      	ldr	r2, [sp, #28]
 8026740:	e767      	b.n	8026612 <_dtoa_r+0x792>
 8026742:	9b06      	ldr	r3, [sp, #24]
 8026744:	2b01      	cmp	r3, #1
 8026746:	dc18      	bgt.n	802677a <_dtoa_r+0x8fa>
 8026748:	f1ba 0f00 	cmp.w	sl, #0
 802674c:	d115      	bne.n	802677a <_dtoa_r+0x8fa>
 802674e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026752:	b993      	cbnz	r3, 802677a <_dtoa_r+0x8fa>
 8026754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8026758:	0d1b      	lsrs	r3, r3, #20
 802675a:	051b      	lsls	r3, r3, #20
 802675c:	b183      	cbz	r3, 8026780 <_dtoa_r+0x900>
 802675e:	9b04      	ldr	r3, [sp, #16]
 8026760:	3301      	adds	r3, #1
 8026762:	9304      	str	r3, [sp, #16]
 8026764:	9b05      	ldr	r3, [sp, #20]
 8026766:	3301      	adds	r3, #1
 8026768:	9305      	str	r3, [sp, #20]
 802676a:	f04f 0801 	mov.w	r8, #1
 802676e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026770:	2b00      	cmp	r3, #0
 8026772:	f47f af6a 	bne.w	802664a <_dtoa_r+0x7ca>
 8026776:	2001      	movs	r0, #1
 8026778:	e76f      	b.n	802665a <_dtoa_r+0x7da>
 802677a:	f04f 0800 	mov.w	r8, #0
 802677e:	e7f6      	b.n	802676e <_dtoa_r+0x8ee>
 8026780:	4698      	mov	r8, r3
 8026782:	e7f4      	b.n	802676e <_dtoa_r+0x8ee>
 8026784:	f43f af7d 	beq.w	8026682 <_dtoa_r+0x802>
 8026788:	4618      	mov	r0, r3
 802678a:	301c      	adds	r0, #28
 802678c:	e772      	b.n	8026674 <_dtoa_r+0x7f4>
 802678e:	9b03      	ldr	r3, [sp, #12]
 8026790:	2b00      	cmp	r3, #0
 8026792:	dc37      	bgt.n	8026804 <_dtoa_r+0x984>
 8026794:	9b06      	ldr	r3, [sp, #24]
 8026796:	2b02      	cmp	r3, #2
 8026798:	dd34      	ble.n	8026804 <_dtoa_r+0x984>
 802679a:	9b03      	ldr	r3, [sp, #12]
 802679c:	9302      	str	r3, [sp, #8]
 802679e:	9b02      	ldr	r3, [sp, #8]
 80267a0:	b96b      	cbnz	r3, 80267be <_dtoa_r+0x93e>
 80267a2:	4631      	mov	r1, r6
 80267a4:	2205      	movs	r2, #5
 80267a6:	4620      	mov	r0, r4
 80267a8:	f000 fe40 	bl	802742c <__multadd>
 80267ac:	4601      	mov	r1, r0
 80267ae:	4606      	mov	r6, r0
 80267b0:	ee18 0a10 	vmov	r0, s16
 80267b4:	f001 f8a4 	bl	8027900 <__mcmp>
 80267b8:	2800      	cmp	r0, #0
 80267ba:	f73f adbb 	bgt.w	8026334 <_dtoa_r+0x4b4>
 80267be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267c0:	9d01      	ldr	r5, [sp, #4]
 80267c2:	43db      	mvns	r3, r3
 80267c4:	9300      	str	r3, [sp, #0]
 80267c6:	f04f 0800 	mov.w	r8, #0
 80267ca:	4631      	mov	r1, r6
 80267cc:	4620      	mov	r0, r4
 80267ce:	f000 fe0b 	bl	80273e8 <_Bfree>
 80267d2:	2f00      	cmp	r7, #0
 80267d4:	f43f aea4 	beq.w	8026520 <_dtoa_r+0x6a0>
 80267d8:	f1b8 0f00 	cmp.w	r8, #0
 80267dc:	d005      	beq.n	80267ea <_dtoa_r+0x96a>
 80267de:	45b8      	cmp	r8, r7
 80267e0:	d003      	beq.n	80267ea <_dtoa_r+0x96a>
 80267e2:	4641      	mov	r1, r8
 80267e4:	4620      	mov	r0, r4
 80267e6:	f000 fdff 	bl	80273e8 <_Bfree>
 80267ea:	4639      	mov	r1, r7
 80267ec:	4620      	mov	r0, r4
 80267ee:	f000 fdfb 	bl	80273e8 <_Bfree>
 80267f2:	e695      	b.n	8026520 <_dtoa_r+0x6a0>
 80267f4:	2600      	movs	r6, #0
 80267f6:	4637      	mov	r7, r6
 80267f8:	e7e1      	b.n	80267be <_dtoa_r+0x93e>
 80267fa:	9700      	str	r7, [sp, #0]
 80267fc:	4637      	mov	r7, r6
 80267fe:	e599      	b.n	8026334 <_dtoa_r+0x4b4>
 8026800:	40240000 	.word	0x40240000
 8026804:	9b08      	ldr	r3, [sp, #32]
 8026806:	2b00      	cmp	r3, #0
 8026808:	f000 80ca 	beq.w	80269a0 <_dtoa_r+0xb20>
 802680c:	9b03      	ldr	r3, [sp, #12]
 802680e:	9302      	str	r3, [sp, #8]
 8026810:	2d00      	cmp	r5, #0
 8026812:	dd05      	ble.n	8026820 <_dtoa_r+0x9a0>
 8026814:	4639      	mov	r1, r7
 8026816:	462a      	mov	r2, r5
 8026818:	4620      	mov	r0, r4
 802681a:	f001 f801 	bl	8027820 <__lshift>
 802681e:	4607      	mov	r7, r0
 8026820:	f1b8 0f00 	cmp.w	r8, #0
 8026824:	d05b      	beq.n	80268de <_dtoa_r+0xa5e>
 8026826:	6879      	ldr	r1, [r7, #4]
 8026828:	4620      	mov	r0, r4
 802682a:	f000 fd9d 	bl	8027368 <_Balloc>
 802682e:	4605      	mov	r5, r0
 8026830:	b928      	cbnz	r0, 802683e <_dtoa_r+0x9be>
 8026832:	4b87      	ldr	r3, [pc, #540]	; (8026a50 <_dtoa_r+0xbd0>)
 8026834:	4602      	mov	r2, r0
 8026836:	f240 21ea 	movw	r1, #746	; 0x2ea
 802683a:	f7ff bb3b 	b.w	8025eb4 <_dtoa_r+0x34>
 802683e:	693a      	ldr	r2, [r7, #16]
 8026840:	3202      	adds	r2, #2
 8026842:	0092      	lsls	r2, r2, #2
 8026844:	f107 010c 	add.w	r1, r7, #12
 8026848:	300c      	adds	r0, #12
 802684a:	f7fd f8a2 	bl	8023992 <memcpy>
 802684e:	2201      	movs	r2, #1
 8026850:	4629      	mov	r1, r5
 8026852:	4620      	mov	r0, r4
 8026854:	f000 ffe4 	bl	8027820 <__lshift>
 8026858:	9b01      	ldr	r3, [sp, #4]
 802685a:	f103 0901 	add.w	r9, r3, #1
 802685e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8026862:	4413      	add	r3, r2
 8026864:	9305      	str	r3, [sp, #20]
 8026866:	f00a 0301 	and.w	r3, sl, #1
 802686a:	46b8      	mov	r8, r7
 802686c:	9304      	str	r3, [sp, #16]
 802686e:	4607      	mov	r7, r0
 8026870:	4631      	mov	r1, r6
 8026872:	ee18 0a10 	vmov	r0, s16
 8026876:	f7ff fa75 	bl	8025d64 <quorem>
 802687a:	4641      	mov	r1, r8
 802687c:	9002      	str	r0, [sp, #8]
 802687e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8026882:	ee18 0a10 	vmov	r0, s16
 8026886:	f001 f83b 	bl	8027900 <__mcmp>
 802688a:	463a      	mov	r2, r7
 802688c:	9003      	str	r0, [sp, #12]
 802688e:	4631      	mov	r1, r6
 8026890:	4620      	mov	r0, r4
 8026892:	f001 f851 	bl	8027938 <__mdiff>
 8026896:	68c2      	ldr	r2, [r0, #12]
 8026898:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 802689c:	4605      	mov	r5, r0
 802689e:	bb02      	cbnz	r2, 80268e2 <_dtoa_r+0xa62>
 80268a0:	4601      	mov	r1, r0
 80268a2:	ee18 0a10 	vmov	r0, s16
 80268a6:	f001 f82b 	bl	8027900 <__mcmp>
 80268aa:	4602      	mov	r2, r0
 80268ac:	4629      	mov	r1, r5
 80268ae:	4620      	mov	r0, r4
 80268b0:	9207      	str	r2, [sp, #28]
 80268b2:	f000 fd99 	bl	80273e8 <_Bfree>
 80268b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80268ba:	ea43 0102 	orr.w	r1, r3, r2
 80268be:	9b04      	ldr	r3, [sp, #16]
 80268c0:	430b      	orrs	r3, r1
 80268c2:	464d      	mov	r5, r9
 80268c4:	d10f      	bne.n	80268e6 <_dtoa_r+0xa66>
 80268c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80268ca:	d02a      	beq.n	8026922 <_dtoa_r+0xaa2>
 80268cc:	9b03      	ldr	r3, [sp, #12]
 80268ce:	2b00      	cmp	r3, #0
 80268d0:	dd02      	ble.n	80268d8 <_dtoa_r+0xa58>
 80268d2:	9b02      	ldr	r3, [sp, #8]
 80268d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80268d8:	f88b a000 	strb.w	sl, [fp]
 80268dc:	e775      	b.n	80267ca <_dtoa_r+0x94a>
 80268de:	4638      	mov	r0, r7
 80268e0:	e7ba      	b.n	8026858 <_dtoa_r+0x9d8>
 80268e2:	2201      	movs	r2, #1
 80268e4:	e7e2      	b.n	80268ac <_dtoa_r+0xa2c>
 80268e6:	9b03      	ldr	r3, [sp, #12]
 80268e8:	2b00      	cmp	r3, #0
 80268ea:	db04      	blt.n	80268f6 <_dtoa_r+0xa76>
 80268ec:	9906      	ldr	r1, [sp, #24]
 80268ee:	430b      	orrs	r3, r1
 80268f0:	9904      	ldr	r1, [sp, #16]
 80268f2:	430b      	orrs	r3, r1
 80268f4:	d122      	bne.n	802693c <_dtoa_r+0xabc>
 80268f6:	2a00      	cmp	r2, #0
 80268f8:	ddee      	ble.n	80268d8 <_dtoa_r+0xa58>
 80268fa:	ee18 1a10 	vmov	r1, s16
 80268fe:	2201      	movs	r2, #1
 8026900:	4620      	mov	r0, r4
 8026902:	f000 ff8d 	bl	8027820 <__lshift>
 8026906:	4631      	mov	r1, r6
 8026908:	ee08 0a10 	vmov	s16, r0
 802690c:	f000 fff8 	bl	8027900 <__mcmp>
 8026910:	2800      	cmp	r0, #0
 8026912:	dc03      	bgt.n	802691c <_dtoa_r+0xa9c>
 8026914:	d1e0      	bne.n	80268d8 <_dtoa_r+0xa58>
 8026916:	f01a 0f01 	tst.w	sl, #1
 802691a:	d0dd      	beq.n	80268d8 <_dtoa_r+0xa58>
 802691c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8026920:	d1d7      	bne.n	80268d2 <_dtoa_r+0xa52>
 8026922:	2339      	movs	r3, #57	; 0x39
 8026924:	f88b 3000 	strb.w	r3, [fp]
 8026928:	462b      	mov	r3, r5
 802692a:	461d      	mov	r5, r3
 802692c:	3b01      	subs	r3, #1
 802692e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8026932:	2a39      	cmp	r2, #57	; 0x39
 8026934:	d071      	beq.n	8026a1a <_dtoa_r+0xb9a>
 8026936:	3201      	adds	r2, #1
 8026938:	701a      	strb	r2, [r3, #0]
 802693a:	e746      	b.n	80267ca <_dtoa_r+0x94a>
 802693c:	2a00      	cmp	r2, #0
 802693e:	dd07      	ble.n	8026950 <_dtoa_r+0xad0>
 8026940:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8026944:	d0ed      	beq.n	8026922 <_dtoa_r+0xaa2>
 8026946:	f10a 0301 	add.w	r3, sl, #1
 802694a:	f88b 3000 	strb.w	r3, [fp]
 802694e:	e73c      	b.n	80267ca <_dtoa_r+0x94a>
 8026950:	9b05      	ldr	r3, [sp, #20]
 8026952:	f809 ac01 	strb.w	sl, [r9, #-1]
 8026956:	4599      	cmp	r9, r3
 8026958:	d047      	beq.n	80269ea <_dtoa_r+0xb6a>
 802695a:	ee18 1a10 	vmov	r1, s16
 802695e:	2300      	movs	r3, #0
 8026960:	220a      	movs	r2, #10
 8026962:	4620      	mov	r0, r4
 8026964:	f000 fd62 	bl	802742c <__multadd>
 8026968:	45b8      	cmp	r8, r7
 802696a:	ee08 0a10 	vmov	s16, r0
 802696e:	f04f 0300 	mov.w	r3, #0
 8026972:	f04f 020a 	mov.w	r2, #10
 8026976:	4641      	mov	r1, r8
 8026978:	4620      	mov	r0, r4
 802697a:	d106      	bne.n	802698a <_dtoa_r+0xb0a>
 802697c:	f000 fd56 	bl	802742c <__multadd>
 8026980:	4680      	mov	r8, r0
 8026982:	4607      	mov	r7, r0
 8026984:	f109 0901 	add.w	r9, r9, #1
 8026988:	e772      	b.n	8026870 <_dtoa_r+0x9f0>
 802698a:	f000 fd4f 	bl	802742c <__multadd>
 802698e:	4639      	mov	r1, r7
 8026990:	4680      	mov	r8, r0
 8026992:	2300      	movs	r3, #0
 8026994:	220a      	movs	r2, #10
 8026996:	4620      	mov	r0, r4
 8026998:	f000 fd48 	bl	802742c <__multadd>
 802699c:	4607      	mov	r7, r0
 802699e:	e7f1      	b.n	8026984 <_dtoa_r+0xb04>
 80269a0:	9b03      	ldr	r3, [sp, #12]
 80269a2:	9302      	str	r3, [sp, #8]
 80269a4:	9d01      	ldr	r5, [sp, #4]
 80269a6:	ee18 0a10 	vmov	r0, s16
 80269aa:	4631      	mov	r1, r6
 80269ac:	f7ff f9da 	bl	8025d64 <quorem>
 80269b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80269b4:	9b01      	ldr	r3, [sp, #4]
 80269b6:	f805 ab01 	strb.w	sl, [r5], #1
 80269ba:	1aea      	subs	r2, r5, r3
 80269bc:	9b02      	ldr	r3, [sp, #8]
 80269be:	4293      	cmp	r3, r2
 80269c0:	dd09      	ble.n	80269d6 <_dtoa_r+0xb56>
 80269c2:	ee18 1a10 	vmov	r1, s16
 80269c6:	2300      	movs	r3, #0
 80269c8:	220a      	movs	r2, #10
 80269ca:	4620      	mov	r0, r4
 80269cc:	f000 fd2e 	bl	802742c <__multadd>
 80269d0:	ee08 0a10 	vmov	s16, r0
 80269d4:	e7e7      	b.n	80269a6 <_dtoa_r+0xb26>
 80269d6:	9b02      	ldr	r3, [sp, #8]
 80269d8:	2b00      	cmp	r3, #0
 80269da:	bfc8      	it	gt
 80269dc:	461d      	movgt	r5, r3
 80269de:	9b01      	ldr	r3, [sp, #4]
 80269e0:	bfd8      	it	le
 80269e2:	2501      	movle	r5, #1
 80269e4:	441d      	add	r5, r3
 80269e6:	f04f 0800 	mov.w	r8, #0
 80269ea:	ee18 1a10 	vmov	r1, s16
 80269ee:	2201      	movs	r2, #1
 80269f0:	4620      	mov	r0, r4
 80269f2:	f000 ff15 	bl	8027820 <__lshift>
 80269f6:	4631      	mov	r1, r6
 80269f8:	ee08 0a10 	vmov	s16, r0
 80269fc:	f000 ff80 	bl	8027900 <__mcmp>
 8026a00:	2800      	cmp	r0, #0
 8026a02:	dc91      	bgt.n	8026928 <_dtoa_r+0xaa8>
 8026a04:	d102      	bne.n	8026a0c <_dtoa_r+0xb8c>
 8026a06:	f01a 0f01 	tst.w	sl, #1
 8026a0a:	d18d      	bne.n	8026928 <_dtoa_r+0xaa8>
 8026a0c:	462b      	mov	r3, r5
 8026a0e:	461d      	mov	r5, r3
 8026a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026a14:	2a30      	cmp	r2, #48	; 0x30
 8026a16:	d0fa      	beq.n	8026a0e <_dtoa_r+0xb8e>
 8026a18:	e6d7      	b.n	80267ca <_dtoa_r+0x94a>
 8026a1a:	9a01      	ldr	r2, [sp, #4]
 8026a1c:	429a      	cmp	r2, r3
 8026a1e:	d184      	bne.n	802692a <_dtoa_r+0xaaa>
 8026a20:	9b00      	ldr	r3, [sp, #0]
 8026a22:	3301      	adds	r3, #1
 8026a24:	9300      	str	r3, [sp, #0]
 8026a26:	2331      	movs	r3, #49	; 0x31
 8026a28:	7013      	strb	r3, [r2, #0]
 8026a2a:	e6ce      	b.n	80267ca <_dtoa_r+0x94a>
 8026a2c:	4b09      	ldr	r3, [pc, #36]	; (8026a54 <_dtoa_r+0xbd4>)
 8026a2e:	f7ff ba95 	b.w	8025f5c <_dtoa_r+0xdc>
 8026a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026a34:	2b00      	cmp	r3, #0
 8026a36:	f47f aa6e 	bne.w	8025f16 <_dtoa_r+0x96>
 8026a3a:	4b07      	ldr	r3, [pc, #28]	; (8026a58 <_dtoa_r+0xbd8>)
 8026a3c:	f7ff ba8e 	b.w	8025f5c <_dtoa_r+0xdc>
 8026a40:	9b02      	ldr	r3, [sp, #8]
 8026a42:	2b00      	cmp	r3, #0
 8026a44:	dcae      	bgt.n	80269a4 <_dtoa_r+0xb24>
 8026a46:	9b06      	ldr	r3, [sp, #24]
 8026a48:	2b02      	cmp	r3, #2
 8026a4a:	f73f aea8 	bgt.w	802679e <_dtoa_r+0x91e>
 8026a4e:	e7a9      	b.n	80269a4 <_dtoa_r+0xb24>
 8026a50:	0802da84 	.word	0x0802da84
 8026a54:	0802dc81 	.word	0x0802dc81
 8026a58:	0802da1c 	.word	0x0802da1c

08026a5c <__errno>:
 8026a5c:	4b01      	ldr	r3, [pc, #4]	; (8026a64 <__errno+0x8>)
 8026a5e:	6818      	ldr	r0, [r3, #0]
 8026a60:	4770      	bx	lr
 8026a62:	bf00      	nop
 8026a64:	200000fc 	.word	0x200000fc

08026a68 <__sflush_r>:
 8026a68:	898a      	ldrh	r2, [r1, #12]
 8026a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a6e:	4605      	mov	r5, r0
 8026a70:	0710      	lsls	r0, r2, #28
 8026a72:	460c      	mov	r4, r1
 8026a74:	d458      	bmi.n	8026b28 <__sflush_r+0xc0>
 8026a76:	684b      	ldr	r3, [r1, #4]
 8026a78:	2b00      	cmp	r3, #0
 8026a7a:	dc05      	bgt.n	8026a88 <__sflush_r+0x20>
 8026a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026a7e:	2b00      	cmp	r3, #0
 8026a80:	dc02      	bgt.n	8026a88 <__sflush_r+0x20>
 8026a82:	2000      	movs	r0, #0
 8026a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026a8a:	2e00      	cmp	r6, #0
 8026a8c:	d0f9      	beq.n	8026a82 <__sflush_r+0x1a>
 8026a8e:	2300      	movs	r3, #0
 8026a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026a94:	682f      	ldr	r7, [r5, #0]
 8026a96:	602b      	str	r3, [r5, #0]
 8026a98:	d032      	beq.n	8026b00 <__sflush_r+0x98>
 8026a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026a9c:	89a3      	ldrh	r3, [r4, #12]
 8026a9e:	075a      	lsls	r2, r3, #29
 8026aa0:	d505      	bpl.n	8026aae <__sflush_r+0x46>
 8026aa2:	6863      	ldr	r3, [r4, #4]
 8026aa4:	1ac0      	subs	r0, r0, r3
 8026aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026aa8:	b10b      	cbz	r3, 8026aae <__sflush_r+0x46>
 8026aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026aac:	1ac0      	subs	r0, r0, r3
 8026aae:	2300      	movs	r3, #0
 8026ab0:	4602      	mov	r2, r0
 8026ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026ab4:	6a21      	ldr	r1, [r4, #32]
 8026ab6:	4628      	mov	r0, r5
 8026ab8:	47b0      	blx	r6
 8026aba:	1c43      	adds	r3, r0, #1
 8026abc:	89a3      	ldrh	r3, [r4, #12]
 8026abe:	d106      	bne.n	8026ace <__sflush_r+0x66>
 8026ac0:	6829      	ldr	r1, [r5, #0]
 8026ac2:	291d      	cmp	r1, #29
 8026ac4:	d82c      	bhi.n	8026b20 <__sflush_r+0xb8>
 8026ac6:	4a2a      	ldr	r2, [pc, #168]	; (8026b70 <__sflush_r+0x108>)
 8026ac8:	40ca      	lsrs	r2, r1
 8026aca:	07d6      	lsls	r6, r2, #31
 8026acc:	d528      	bpl.n	8026b20 <__sflush_r+0xb8>
 8026ace:	2200      	movs	r2, #0
 8026ad0:	6062      	str	r2, [r4, #4]
 8026ad2:	04d9      	lsls	r1, r3, #19
 8026ad4:	6922      	ldr	r2, [r4, #16]
 8026ad6:	6022      	str	r2, [r4, #0]
 8026ad8:	d504      	bpl.n	8026ae4 <__sflush_r+0x7c>
 8026ada:	1c42      	adds	r2, r0, #1
 8026adc:	d101      	bne.n	8026ae2 <__sflush_r+0x7a>
 8026ade:	682b      	ldr	r3, [r5, #0]
 8026ae0:	b903      	cbnz	r3, 8026ae4 <__sflush_r+0x7c>
 8026ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8026ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026ae6:	602f      	str	r7, [r5, #0]
 8026ae8:	2900      	cmp	r1, #0
 8026aea:	d0ca      	beq.n	8026a82 <__sflush_r+0x1a>
 8026aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026af0:	4299      	cmp	r1, r3
 8026af2:	d002      	beq.n	8026afa <__sflush_r+0x92>
 8026af4:	4628      	mov	r0, r5
 8026af6:	f001 f90f 	bl	8027d18 <_free_r>
 8026afa:	2000      	movs	r0, #0
 8026afc:	6360      	str	r0, [r4, #52]	; 0x34
 8026afe:	e7c1      	b.n	8026a84 <__sflush_r+0x1c>
 8026b00:	6a21      	ldr	r1, [r4, #32]
 8026b02:	2301      	movs	r3, #1
 8026b04:	4628      	mov	r0, r5
 8026b06:	47b0      	blx	r6
 8026b08:	1c41      	adds	r1, r0, #1
 8026b0a:	d1c7      	bne.n	8026a9c <__sflush_r+0x34>
 8026b0c:	682b      	ldr	r3, [r5, #0]
 8026b0e:	2b00      	cmp	r3, #0
 8026b10:	d0c4      	beq.n	8026a9c <__sflush_r+0x34>
 8026b12:	2b1d      	cmp	r3, #29
 8026b14:	d001      	beq.n	8026b1a <__sflush_r+0xb2>
 8026b16:	2b16      	cmp	r3, #22
 8026b18:	d101      	bne.n	8026b1e <__sflush_r+0xb6>
 8026b1a:	602f      	str	r7, [r5, #0]
 8026b1c:	e7b1      	b.n	8026a82 <__sflush_r+0x1a>
 8026b1e:	89a3      	ldrh	r3, [r4, #12]
 8026b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026b24:	81a3      	strh	r3, [r4, #12]
 8026b26:	e7ad      	b.n	8026a84 <__sflush_r+0x1c>
 8026b28:	690f      	ldr	r7, [r1, #16]
 8026b2a:	2f00      	cmp	r7, #0
 8026b2c:	d0a9      	beq.n	8026a82 <__sflush_r+0x1a>
 8026b2e:	0793      	lsls	r3, r2, #30
 8026b30:	680e      	ldr	r6, [r1, #0]
 8026b32:	bf08      	it	eq
 8026b34:	694b      	ldreq	r3, [r1, #20]
 8026b36:	600f      	str	r7, [r1, #0]
 8026b38:	bf18      	it	ne
 8026b3a:	2300      	movne	r3, #0
 8026b3c:	eba6 0807 	sub.w	r8, r6, r7
 8026b40:	608b      	str	r3, [r1, #8]
 8026b42:	f1b8 0f00 	cmp.w	r8, #0
 8026b46:	dd9c      	ble.n	8026a82 <__sflush_r+0x1a>
 8026b48:	6a21      	ldr	r1, [r4, #32]
 8026b4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026b4c:	4643      	mov	r3, r8
 8026b4e:	463a      	mov	r2, r7
 8026b50:	4628      	mov	r0, r5
 8026b52:	47b0      	blx	r6
 8026b54:	2800      	cmp	r0, #0
 8026b56:	dc06      	bgt.n	8026b66 <__sflush_r+0xfe>
 8026b58:	89a3      	ldrh	r3, [r4, #12]
 8026b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026b5e:	81a3      	strh	r3, [r4, #12]
 8026b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026b64:	e78e      	b.n	8026a84 <__sflush_r+0x1c>
 8026b66:	4407      	add	r7, r0
 8026b68:	eba8 0800 	sub.w	r8, r8, r0
 8026b6c:	e7e9      	b.n	8026b42 <__sflush_r+0xda>
 8026b6e:	bf00      	nop
 8026b70:	20400001 	.word	0x20400001

08026b74 <_fflush_r>:
 8026b74:	b538      	push	{r3, r4, r5, lr}
 8026b76:	690b      	ldr	r3, [r1, #16]
 8026b78:	4605      	mov	r5, r0
 8026b7a:	460c      	mov	r4, r1
 8026b7c:	b913      	cbnz	r3, 8026b84 <_fflush_r+0x10>
 8026b7e:	2500      	movs	r5, #0
 8026b80:	4628      	mov	r0, r5
 8026b82:	bd38      	pop	{r3, r4, r5, pc}
 8026b84:	b118      	cbz	r0, 8026b8e <_fflush_r+0x1a>
 8026b86:	6983      	ldr	r3, [r0, #24]
 8026b88:	b90b      	cbnz	r3, 8026b8e <_fflush_r+0x1a>
 8026b8a:	f7fc fe2d 	bl	80237e8 <__sinit>
 8026b8e:	4b14      	ldr	r3, [pc, #80]	; (8026be0 <_fflush_r+0x6c>)
 8026b90:	429c      	cmp	r4, r3
 8026b92:	d11b      	bne.n	8026bcc <_fflush_r+0x58>
 8026b94:	686c      	ldr	r4, [r5, #4]
 8026b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b9a:	2b00      	cmp	r3, #0
 8026b9c:	d0ef      	beq.n	8026b7e <_fflush_r+0xa>
 8026b9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026ba0:	07d0      	lsls	r0, r2, #31
 8026ba2:	d404      	bmi.n	8026bae <_fflush_r+0x3a>
 8026ba4:	0599      	lsls	r1, r3, #22
 8026ba6:	d402      	bmi.n	8026bae <_fflush_r+0x3a>
 8026ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026baa:	f7fc fee0 	bl	802396e <__retarget_lock_acquire_recursive>
 8026bae:	4628      	mov	r0, r5
 8026bb0:	4621      	mov	r1, r4
 8026bb2:	f7ff ff59 	bl	8026a68 <__sflush_r>
 8026bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026bb8:	07da      	lsls	r2, r3, #31
 8026bba:	4605      	mov	r5, r0
 8026bbc:	d4e0      	bmi.n	8026b80 <_fflush_r+0xc>
 8026bbe:	89a3      	ldrh	r3, [r4, #12]
 8026bc0:	059b      	lsls	r3, r3, #22
 8026bc2:	d4dd      	bmi.n	8026b80 <_fflush_r+0xc>
 8026bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026bc6:	f7fc fed3 	bl	8023970 <__retarget_lock_release_recursive>
 8026bca:	e7d9      	b.n	8026b80 <_fflush_r+0xc>
 8026bcc:	4b05      	ldr	r3, [pc, #20]	; (8026be4 <_fflush_r+0x70>)
 8026bce:	429c      	cmp	r4, r3
 8026bd0:	d101      	bne.n	8026bd6 <_fflush_r+0x62>
 8026bd2:	68ac      	ldr	r4, [r5, #8]
 8026bd4:	e7df      	b.n	8026b96 <_fflush_r+0x22>
 8026bd6:	4b04      	ldr	r3, [pc, #16]	; (8026be8 <_fflush_r+0x74>)
 8026bd8:	429c      	cmp	r4, r3
 8026bda:	bf08      	it	eq
 8026bdc:	68ec      	ldreq	r4, [r5, #12]
 8026bde:	e7da      	b.n	8026b96 <_fflush_r+0x22>
 8026be0:	0802d89c 	.word	0x0802d89c
 8026be4:	0802d8bc 	.word	0x0802d8bc
 8026be8:	0802d87c 	.word	0x0802d87c

08026bec <fiprintf>:
 8026bec:	b40e      	push	{r1, r2, r3}
 8026bee:	b503      	push	{r0, r1, lr}
 8026bf0:	4601      	mov	r1, r0
 8026bf2:	ab03      	add	r3, sp, #12
 8026bf4:	4805      	ldr	r0, [pc, #20]	; (8026c0c <fiprintf+0x20>)
 8026bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8026bfa:	6800      	ldr	r0, [r0, #0]
 8026bfc:	9301      	str	r3, [sp, #4]
 8026bfe:	f001 fc2f 	bl	8028460 <_vfiprintf_r>
 8026c02:	b002      	add	sp, #8
 8026c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8026c08:	b003      	add	sp, #12
 8026c0a:	4770      	bx	lr
 8026c0c:	200000fc 	.word	0x200000fc

08026c10 <rshift>:
 8026c10:	6903      	ldr	r3, [r0, #16]
 8026c12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8026c16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026c1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8026c1e:	f100 0414 	add.w	r4, r0, #20
 8026c22:	dd45      	ble.n	8026cb0 <rshift+0xa0>
 8026c24:	f011 011f 	ands.w	r1, r1, #31
 8026c28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8026c2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8026c30:	d10c      	bne.n	8026c4c <rshift+0x3c>
 8026c32:	f100 0710 	add.w	r7, r0, #16
 8026c36:	4629      	mov	r1, r5
 8026c38:	42b1      	cmp	r1, r6
 8026c3a:	d334      	bcc.n	8026ca6 <rshift+0x96>
 8026c3c:	1a9b      	subs	r3, r3, r2
 8026c3e:	009b      	lsls	r3, r3, #2
 8026c40:	1eea      	subs	r2, r5, #3
 8026c42:	4296      	cmp	r6, r2
 8026c44:	bf38      	it	cc
 8026c46:	2300      	movcc	r3, #0
 8026c48:	4423      	add	r3, r4
 8026c4a:	e015      	b.n	8026c78 <rshift+0x68>
 8026c4c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8026c50:	f1c1 0820 	rsb	r8, r1, #32
 8026c54:	40cf      	lsrs	r7, r1
 8026c56:	f105 0e04 	add.w	lr, r5, #4
 8026c5a:	46a1      	mov	r9, r4
 8026c5c:	4576      	cmp	r6, lr
 8026c5e:	46f4      	mov	ip, lr
 8026c60:	d815      	bhi.n	8026c8e <rshift+0x7e>
 8026c62:	1a9a      	subs	r2, r3, r2
 8026c64:	0092      	lsls	r2, r2, #2
 8026c66:	3a04      	subs	r2, #4
 8026c68:	3501      	adds	r5, #1
 8026c6a:	42ae      	cmp	r6, r5
 8026c6c:	bf38      	it	cc
 8026c6e:	2200      	movcc	r2, #0
 8026c70:	18a3      	adds	r3, r4, r2
 8026c72:	50a7      	str	r7, [r4, r2]
 8026c74:	b107      	cbz	r7, 8026c78 <rshift+0x68>
 8026c76:	3304      	adds	r3, #4
 8026c78:	1b1a      	subs	r2, r3, r4
 8026c7a:	42a3      	cmp	r3, r4
 8026c7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8026c80:	bf08      	it	eq
 8026c82:	2300      	moveq	r3, #0
 8026c84:	6102      	str	r2, [r0, #16]
 8026c86:	bf08      	it	eq
 8026c88:	6143      	streq	r3, [r0, #20]
 8026c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026c8e:	f8dc c000 	ldr.w	ip, [ip]
 8026c92:	fa0c fc08 	lsl.w	ip, ip, r8
 8026c96:	ea4c 0707 	orr.w	r7, ip, r7
 8026c9a:	f849 7b04 	str.w	r7, [r9], #4
 8026c9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8026ca2:	40cf      	lsrs	r7, r1
 8026ca4:	e7da      	b.n	8026c5c <rshift+0x4c>
 8026ca6:	f851 cb04 	ldr.w	ip, [r1], #4
 8026caa:	f847 cf04 	str.w	ip, [r7, #4]!
 8026cae:	e7c3      	b.n	8026c38 <rshift+0x28>
 8026cb0:	4623      	mov	r3, r4
 8026cb2:	e7e1      	b.n	8026c78 <rshift+0x68>

08026cb4 <__hexdig_fun>:
 8026cb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8026cb8:	2b09      	cmp	r3, #9
 8026cba:	d802      	bhi.n	8026cc2 <__hexdig_fun+0xe>
 8026cbc:	3820      	subs	r0, #32
 8026cbe:	b2c0      	uxtb	r0, r0
 8026cc0:	4770      	bx	lr
 8026cc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8026cc6:	2b05      	cmp	r3, #5
 8026cc8:	d801      	bhi.n	8026cce <__hexdig_fun+0x1a>
 8026cca:	3847      	subs	r0, #71	; 0x47
 8026ccc:	e7f7      	b.n	8026cbe <__hexdig_fun+0xa>
 8026cce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8026cd2:	2b05      	cmp	r3, #5
 8026cd4:	d801      	bhi.n	8026cda <__hexdig_fun+0x26>
 8026cd6:	3827      	subs	r0, #39	; 0x27
 8026cd8:	e7f1      	b.n	8026cbe <__hexdig_fun+0xa>
 8026cda:	2000      	movs	r0, #0
 8026cdc:	4770      	bx	lr
	...

08026ce0 <__gethex>:
 8026ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ce4:	ed2d 8b02 	vpush	{d8}
 8026ce8:	b089      	sub	sp, #36	; 0x24
 8026cea:	ee08 0a10 	vmov	s16, r0
 8026cee:	9304      	str	r3, [sp, #16]
 8026cf0:	4bb4      	ldr	r3, [pc, #720]	; (8026fc4 <__gethex+0x2e4>)
 8026cf2:	681b      	ldr	r3, [r3, #0]
 8026cf4:	9301      	str	r3, [sp, #4]
 8026cf6:	4618      	mov	r0, r3
 8026cf8:	468b      	mov	fp, r1
 8026cfa:	4690      	mov	r8, r2
 8026cfc:	f7d9 fa92 	bl	8000224 <strlen>
 8026d00:	9b01      	ldr	r3, [sp, #4]
 8026d02:	f8db 2000 	ldr.w	r2, [fp]
 8026d06:	4403      	add	r3, r0
 8026d08:	4682      	mov	sl, r0
 8026d0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8026d0e:	9305      	str	r3, [sp, #20]
 8026d10:	1c93      	adds	r3, r2, #2
 8026d12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8026d16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8026d1a:	32fe      	adds	r2, #254	; 0xfe
 8026d1c:	18d1      	adds	r1, r2, r3
 8026d1e:	461f      	mov	r7, r3
 8026d20:	f813 0b01 	ldrb.w	r0, [r3], #1
 8026d24:	9100      	str	r1, [sp, #0]
 8026d26:	2830      	cmp	r0, #48	; 0x30
 8026d28:	d0f8      	beq.n	8026d1c <__gethex+0x3c>
 8026d2a:	f7ff ffc3 	bl	8026cb4 <__hexdig_fun>
 8026d2e:	4604      	mov	r4, r0
 8026d30:	2800      	cmp	r0, #0
 8026d32:	d13a      	bne.n	8026daa <__gethex+0xca>
 8026d34:	9901      	ldr	r1, [sp, #4]
 8026d36:	4652      	mov	r2, sl
 8026d38:	4638      	mov	r0, r7
 8026d3a:	f7fd ff27 	bl	8024b8c <strncmp>
 8026d3e:	4605      	mov	r5, r0
 8026d40:	2800      	cmp	r0, #0
 8026d42:	d168      	bne.n	8026e16 <__gethex+0x136>
 8026d44:	f817 000a 	ldrb.w	r0, [r7, sl]
 8026d48:	eb07 060a 	add.w	r6, r7, sl
 8026d4c:	f7ff ffb2 	bl	8026cb4 <__hexdig_fun>
 8026d50:	2800      	cmp	r0, #0
 8026d52:	d062      	beq.n	8026e1a <__gethex+0x13a>
 8026d54:	4633      	mov	r3, r6
 8026d56:	7818      	ldrb	r0, [r3, #0]
 8026d58:	2830      	cmp	r0, #48	; 0x30
 8026d5a:	461f      	mov	r7, r3
 8026d5c:	f103 0301 	add.w	r3, r3, #1
 8026d60:	d0f9      	beq.n	8026d56 <__gethex+0x76>
 8026d62:	f7ff ffa7 	bl	8026cb4 <__hexdig_fun>
 8026d66:	2301      	movs	r3, #1
 8026d68:	fab0 f480 	clz	r4, r0
 8026d6c:	0964      	lsrs	r4, r4, #5
 8026d6e:	4635      	mov	r5, r6
 8026d70:	9300      	str	r3, [sp, #0]
 8026d72:	463a      	mov	r2, r7
 8026d74:	4616      	mov	r6, r2
 8026d76:	3201      	adds	r2, #1
 8026d78:	7830      	ldrb	r0, [r6, #0]
 8026d7a:	f7ff ff9b 	bl	8026cb4 <__hexdig_fun>
 8026d7e:	2800      	cmp	r0, #0
 8026d80:	d1f8      	bne.n	8026d74 <__gethex+0x94>
 8026d82:	9901      	ldr	r1, [sp, #4]
 8026d84:	4652      	mov	r2, sl
 8026d86:	4630      	mov	r0, r6
 8026d88:	f7fd ff00 	bl	8024b8c <strncmp>
 8026d8c:	b980      	cbnz	r0, 8026db0 <__gethex+0xd0>
 8026d8e:	b94d      	cbnz	r5, 8026da4 <__gethex+0xc4>
 8026d90:	eb06 050a 	add.w	r5, r6, sl
 8026d94:	462a      	mov	r2, r5
 8026d96:	4616      	mov	r6, r2
 8026d98:	3201      	adds	r2, #1
 8026d9a:	7830      	ldrb	r0, [r6, #0]
 8026d9c:	f7ff ff8a 	bl	8026cb4 <__hexdig_fun>
 8026da0:	2800      	cmp	r0, #0
 8026da2:	d1f8      	bne.n	8026d96 <__gethex+0xb6>
 8026da4:	1bad      	subs	r5, r5, r6
 8026da6:	00ad      	lsls	r5, r5, #2
 8026da8:	e004      	b.n	8026db4 <__gethex+0xd4>
 8026daa:	2400      	movs	r4, #0
 8026dac:	4625      	mov	r5, r4
 8026dae:	e7e0      	b.n	8026d72 <__gethex+0x92>
 8026db0:	2d00      	cmp	r5, #0
 8026db2:	d1f7      	bne.n	8026da4 <__gethex+0xc4>
 8026db4:	7833      	ldrb	r3, [r6, #0]
 8026db6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8026dba:	2b50      	cmp	r3, #80	; 0x50
 8026dbc:	d13b      	bne.n	8026e36 <__gethex+0x156>
 8026dbe:	7873      	ldrb	r3, [r6, #1]
 8026dc0:	2b2b      	cmp	r3, #43	; 0x2b
 8026dc2:	d02c      	beq.n	8026e1e <__gethex+0x13e>
 8026dc4:	2b2d      	cmp	r3, #45	; 0x2d
 8026dc6:	d02e      	beq.n	8026e26 <__gethex+0x146>
 8026dc8:	1c71      	adds	r1, r6, #1
 8026dca:	f04f 0900 	mov.w	r9, #0
 8026dce:	7808      	ldrb	r0, [r1, #0]
 8026dd0:	f7ff ff70 	bl	8026cb4 <__hexdig_fun>
 8026dd4:	1e43      	subs	r3, r0, #1
 8026dd6:	b2db      	uxtb	r3, r3
 8026dd8:	2b18      	cmp	r3, #24
 8026dda:	d82c      	bhi.n	8026e36 <__gethex+0x156>
 8026ddc:	f1a0 0210 	sub.w	r2, r0, #16
 8026de0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8026de4:	f7ff ff66 	bl	8026cb4 <__hexdig_fun>
 8026de8:	1e43      	subs	r3, r0, #1
 8026dea:	b2db      	uxtb	r3, r3
 8026dec:	2b18      	cmp	r3, #24
 8026dee:	d91d      	bls.n	8026e2c <__gethex+0x14c>
 8026df0:	f1b9 0f00 	cmp.w	r9, #0
 8026df4:	d000      	beq.n	8026df8 <__gethex+0x118>
 8026df6:	4252      	negs	r2, r2
 8026df8:	4415      	add	r5, r2
 8026dfa:	f8cb 1000 	str.w	r1, [fp]
 8026dfe:	b1e4      	cbz	r4, 8026e3a <__gethex+0x15a>
 8026e00:	9b00      	ldr	r3, [sp, #0]
 8026e02:	2b00      	cmp	r3, #0
 8026e04:	bf14      	ite	ne
 8026e06:	2700      	movne	r7, #0
 8026e08:	2706      	moveq	r7, #6
 8026e0a:	4638      	mov	r0, r7
 8026e0c:	b009      	add	sp, #36	; 0x24
 8026e0e:	ecbd 8b02 	vpop	{d8}
 8026e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e16:	463e      	mov	r6, r7
 8026e18:	4625      	mov	r5, r4
 8026e1a:	2401      	movs	r4, #1
 8026e1c:	e7ca      	b.n	8026db4 <__gethex+0xd4>
 8026e1e:	f04f 0900 	mov.w	r9, #0
 8026e22:	1cb1      	adds	r1, r6, #2
 8026e24:	e7d3      	b.n	8026dce <__gethex+0xee>
 8026e26:	f04f 0901 	mov.w	r9, #1
 8026e2a:	e7fa      	b.n	8026e22 <__gethex+0x142>
 8026e2c:	230a      	movs	r3, #10
 8026e2e:	fb03 0202 	mla	r2, r3, r2, r0
 8026e32:	3a10      	subs	r2, #16
 8026e34:	e7d4      	b.n	8026de0 <__gethex+0x100>
 8026e36:	4631      	mov	r1, r6
 8026e38:	e7df      	b.n	8026dfa <__gethex+0x11a>
 8026e3a:	1bf3      	subs	r3, r6, r7
 8026e3c:	3b01      	subs	r3, #1
 8026e3e:	4621      	mov	r1, r4
 8026e40:	2b07      	cmp	r3, #7
 8026e42:	dc0b      	bgt.n	8026e5c <__gethex+0x17c>
 8026e44:	ee18 0a10 	vmov	r0, s16
 8026e48:	f000 fa8e 	bl	8027368 <_Balloc>
 8026e4c:	4604      	mov	r4, r0
 8026e4e:	b940      	cbnz	r0, 8026e62 <__gethex+0x182>
 8026e50:	4b5d      	ldr	r3, [pc, #372]	; (8026fc8 <__gethex+0x2e8>)
 8026e52:	4602      	mov	r2, r0
 8026e54:	21de      	movs	r1, #222	; 0xde
 8026e56:	485d      	ldr	r0, [pc, #372]	; (8026fcc <__gethex+0x2ec>)
 8026e58:	f7fe ff56 	bl	8025d08 <__assert_func>
 8026e5c:	3101      	adds	r1, #1
 8026e5e:	105b      	asrs	r3, r3, #1
 8026e60:	e7ee      	b.n	8026e40 <__gethex+0x160>
 8026e62:	f100 0914 	add.w	r9, r0, #20
 8026e66:	f04f 0b00 	mov.w	fp, #0
 8026e6a:	f1ca 0301 	rsb	r3, sl, #1
 8026e6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8026e72:	f8cd b000 	str.w	fp, [sp]
 8026e76:	9306      	str	r3, [sp, #24]
 8026e78:	42b7      	cmp	r7, r6
 8026e7a:	d340      	bcc.n	8026efe <__gethex+0x21e>
 8026e7c:	9802      	ldr	r0, [sp, #8]
 8026e7e:	9b00      	ldr	r3, [sp, #0]
 8026e80:	f840 3b04 	str.w	r3, [r0], #4
 8026e84:	eba0 0009 	sub.w	r0, r0, r9
 8026e88:	1080      	asrs	r0, r0, #2
 8026e8a:	0146      	lsls	r6, r0, #5
 8026e8c:	6120      	str	r0, [r4, #16]
 8026e8e:	4618      	mov	r0, r3
 8026e90:	f000 fb5c 	bl	802754c <__hi0bits>
 8026e94:	1a30      	subs	r0, r6, r0
 8026e96:	f8d8 6000 	ldr.w	r6, [r8]
 8026e9a:	42b0      	cmp	r0, r6
 8026e9c:	dd63      	ble.n	8026f66 <__gethex+0x286>
 8026e9e:	1b87      	subs	r7, r0, r6
 8026ea0:	4639      	mov	r1, r7
 8026ea2:	4620      	mov	r0, r4
 8026ea4:	f000 ff00 	bl	8027ca8 <__any_on>
 8026ea8:	4682      	mov	sl, r0
 8026eaa:	b1a8      	cbz	r0, 8026ed8 <__gethex+0x1f8>
 8026eac:	1e7b      	subs	r3, r7, #1
 8026eae:	1159      	asrs	r1, r3, #5
 8026eb0:	f003 021f 	and.w	r2, r3, #31
 8026eb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8026eb8:	f04f 0a01 	mov.w	sl, #1
 8026ebc:	fa0a f202 	lsl.w	r2, sl, r2
 8026ec0:	420a      	tst	r2, r1
 8026ec2:	d009      	beq.n	8026ed8 <__gethex+0x1f8>
 8026ec4:	4553      	cmp	r3, sl
 8026ec6:	dd05      	ble.n	8026ed4 <__gethex+0x1f4>
 8026ec8:	1eb9      	subs	r1, r7, #2
 8026eca:	4620      	mov	r0, r4
 8026ecc:	f000 feec 	bl	8027ca8 <__any_on>
 8026ed0:	2800      	cmp	r0, #0
 8026ed2:	d145      	bne.n	8026f60 <__gethex+0x280>
 8026ed4:	f04f 0a02 	mov.w	sl, #2
 8026ed8:	4639      	mov	r1, r7
 8026eda:	4620      	mov	r0, r4
 8026edc:	f7ff fe98 	bl	8026c10 <rshift>
 8026ee0:	443d      	add	r5, r7
 8026ee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8026ee6:	42ab      	cmp	r3, r5
 8026ee8:	da4c      	bge.n	8026f84 <__gethex+0x2a4>
 8026eea:	ee18 0a10 	vmov	r0, s16
 8026eee:	4621      	mov	r1, r4
 8026ef0:	f000 fa7a 	bl	80273e8 <_Bfree>
 8026ef4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026ef6:	2300      	movs	r3, #0
 8026ef8:	6013      	str	r3, [r2, #0]
 8026efa:	27a3      	movs	r7, #163	; 0xa3
 8026efc:	e785      	b.n	8026e0a <__gethex+0x12a>
 8026efe:	1e73      	subs	r3, r6, #1
 8026f00:	9a05      	ldr	r2, [sp, #20]
 8026f02:	9303      	str	r3, [sp, #12]
 8026f04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8026f08:	4293      	cmp	r3, r2
 8026f0a:	d019      	beq.n	8026f40 <__gethex+0x260>
 8026f0c:	f1bb 0f20 	cmp.w	fp, #32
 8026f10:	d107      	bne.n	8026f22 <__gethex+0x242>
 8026f12:	9b02      	ldr	r3, [sp, #8]
 8026f14:	9a00      	ldr	r2, [sp, #0]
 8026f16:	f843 2b04 	str.w	r2, [r3], #4
 8026f1a:	9302      	str	r3, [sp, #8]
 8026f1c:	2300      	movs	r3, #0
 8026f1e:	9300      	str	r3, [sp, #0]
 8026f20:	469b      	mov	fp, r3
 8026f22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8026f26:	f7ff fec5 	bl	8026cb4 <__hexdig_fun>
 8026f2a:	9b00      	ldr	r3, [sp, #0]
 8026f2c:	f000 000f 	and.w	r0, r0, #15
 8026f30:	fa00 f00b 	lsl.w	r0, r0, fp
 8026f34:	4303      	orrs	r3, r0
 8026f36:	9300      	str	r3, [sp, #0]
 8026f38:	f10b 0b04 	add.w	fp, fp, #4
 8026f3c:	9b03      	ldr	r3, [sp, #12]
 8026f3e:	e00d      	b.n	8026f5c <__gethex+0x27c>
 8026f40:	9b03      	ldr	r3, [sp, #12]
 8026f42:	9a06      	ldr	r2, [sp, #24]
 8026f44:	4413      	add	r3, r2
 8026f46:	42bb      	cmp	r3, r7
 8026f48:	d3e0      	bcc.n	8026f0c <__gethex+0x22c>
 8026f4a:	4618      	mov	r0, r3
 8026f4c:	9901      	ldr	r1, [sp, #4]
 8026f4e:	9307      	str	r3, [sp, #28]
 8026f50:	4652      	mov	r2, sl
 8026f52:	f7fd fe1b 	bl	8024b8c <strncmp>
 8026f56:	9b07      	ldr	r3, [sp, #28]
 8026f58:	2800      	cmp	r0, #0
 8026f5a:	d1d7      	bne.n	8026f0c <__gethex+0x22c>
 8026f5c:	461e      	mov	r6, r3
 8026f5e:	e78b      	b.n	8026e78 <__gethex+0x198>
 8026f60:	f04f 0a03 	mov.w	sl, #3
 8026f64:	e7b8      	b.n	8026ed8 <__gethex+0x1f8>
 8026f66:	da0a      	bge.n	8026f7e <__gethex+0x29e>
 8026f68:	1a37      	subs	r7, r6, r0
 8026f6a:	4621      	mov	r1, r4
 8026f6c:	ee18 0a10 	vmov	r0, s16
 8026f70:	463a      	mov	r2, r7
 8026f72:	f000 fc55 	bl	8027820 <__lshift>
 8026f76:	1bed      	subs	r5, r5, r7
 8026f78:	4604      	mov	r4, r0
 8026f7a:	f100 0914 	add.w	r9, r0, #20
 8026f7e:	f04f 0a00 	mov.w	sl, #0
 8026f82:	e7ae      	b.n	8026ee2 <__gethex+0x202>
 8026f84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8026f88:	42a8      	cmp	r0, r5
 8026f8a:	dd72      	ble.n	8027072 <__gethex+0x392>
 8026f8c:	1b45      	subs	r5, r0, r5
 8026f8e:	42ae      	cmp	r6, r5
 8026f90:	dc36      	bgt.n	8027000 <__gethex+0x320>
 8026f92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8026f96:	2b02      	cmp	r3, #2
 8026f98:	d02a      	beq.n	8026ff0 <__gethex+0x310>
 8026f9a:	2b03      	cmp	r3, #3
 8026f9c:	d02c      	beq.n	8026ff8 <__gethex+0x318>
 8026f9e:	2b01      	cmp	r3, #1
 8026fa0:	d11c      	bne.n	8026fdc <__gethex+0x2fc>
 8026fa2:	42ae      	cmp	r6, r5
 8026fa4:	d11a      	bne.n	8026fdc <__gethex+0x2fc>
 8026fa6:	2e01      	cmp	r6, #1
 8026fa8:	d112      	bne.n	8026fd0 <__gethex+0x2f0>
 8026faa:	9a04      	ldr	r2, [sp, #16]
 8026fac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026fb0:	6013      	str	r3, [r2, #0]
 8026fb2:	2301      	movs	r3, #1
 8026fb4:	6123      	str	r3, [r4, #16]
 8026fb6:	f8c9 3000 	str.w	r3, [r9]
 8026fba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026fbc:	2762      	movs	r7, #98	; 0x62
 8026fbe:	601c      	str	r4, [r3, #0]
 8026fc0:	e723      	b.n	8026e0a <__gethex+0x12a>
 8026fc2:	bf00      	nop
 8026fc4:	0802dafc 	.word	0x0802dafc
 8026fc8:	0802da84 	.word	0x0802da84
 8026fcc:	0802da95 	.word	0x0802da95
 8026fd0:	1e71      	subs	r1, r6, #1
 8026fd2:	4620      	mov	r0, r4
 8026fd4:	f000 fe68 	bl	8027ca8 <__any_on>
 8026fd8:	2800      	cmp	r0, #0
 8026fda:	d1e6      	bne.n	8026faa <__gethex+0x2ca>
 8026fdc:	ee18 0a10 	vmov	r0, s16
 8026fe0:	4621      	mov	r1, r4
 8026fe2:	f000 fa01 	bl	80273e8 <_Bfree>
 8026fe6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026fe8:	2300      	movs	r3, #0
 8026fea:	6013      	str	r3, [r2, #0]
 8026fec:	2750      	movs	r7, #80	; 0x50
 8026fee:	e70c      	b.n	8026e0a <__gethex+0x12a>
 8026ff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026ff2:	2b00      	cmp	r3, #0
 8026ff4:	d1f2      	bne.n	8026fdc <__gethex+0x2fc>
 8026ff6:	e7d8      	b.n	8026faa <__gethex+0x2ca>
 8026ff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026ffa:	2b00      	cmp	r3, #0
 8026ffc:	d1d5      	bne.n	8026faa <__gethex+0x2ca>
 8026ffe:	e7ed      	b.n	8026fdc <__gethex+0x2fc>
 8027000:	1e6f      	subs	r7, r5, #1
 8027002:	f1ba 0f00 	cmp.w	sl, #0
 8027006:	d131      	bne.n	802706c <__gethex+0x38c>
 8027008:	b127      	cbz	r7, 8027014 <__gethex+0x334>
 802700a:	4639      	mov	r1, r7
 802700c:	4620      	mov	r0, r4
 802700e:	f000 fe4b 	bl	8027ca8 <__any_on>
 8027012:	4682      	mov	sl, r0
 8027014:	117b      	asrs	r3, r7, #5
 8027016:	2101      	movs	r1, #1
 8027018:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802701c:	f007 071f 	and.w	r7, r7, #31
 8027020:	fa01 f707 	lsl.w	r7, r1, r7
 8027024:	421f      	tst	r7, r3
 8027026:	4629      	mov	r1, r5
 8027028:	4620      	mov	r0, r4
 802702a:	bf18      	it	ne
 802702c:	f04a 0a02 	orrne.w	sl, sl, #2
 8027030:	1b76      	subs	r6, r6, r5
 8027032:	f7ff fded 	bl	8026c10 <rshift>
 8027036:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802703a:	2702      	movs	r7, #2
 802703c:	f1ba 0f00 	cmp.w	sl, #0
 8027040:	d048      	beq.n	80270d4 <__gethex+0x3f4>
 8027042:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8027046:	2b02      	cmp	r3, #2
 8027048:	d015      	beq.n	8027076 <__gethex+0x396>
 802704a:	2b03      	cmp	r3, #3
 802704c:	d017      	beq.n	802707e <__gethex+0x39e>
 802704e:	2b01      	cmp	r3, #1
 8027050:	d109      	bne.n	8027066 <__gethex+0x386>
 8027052:	f01a 0f02 	tst.w	sl, #2
 8027056:	d006      	beq.n	8027066 <__gethex+0x386>
 8027058:	f8d9 0000 	ldr.w	r0, [r9]
 802705c:	ea4a 0a00 	orr.w	sl, sl, r0
 8027060:	f01a 0f01 	tst.w	sl, #1
 8027064:	d10e      	bne.n	8027084 <__gethex+0x3a4>
 8027066:	f047 0710 	orr.w	r7, r7, #16
 802706a:	e033      	b.n	80270d4 <__gethex+0x3f4>
 802706c:	f04f 0a01 	mov.w	sl, #1
 8027070:	e7d0      	b.n	8027014 <__gethex+0x334>
 8027072:	2701      	movs	r7, #1
 8027074:	e7e2      	b.n	802703c <__gethex+0x35c>
 8027076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027078:	f1c3 0301 	rsb	r3, r3, #1
 802707c:	9315      	str	r3, [sp, #84]	; 0x54
 802707e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027080:	2b00      	cmp	r3, #0
 8027082:	d0f0      	beq.n	8027066 <__gethex+0x386>
 8027084:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8027088:	f104 0314 	add.w	r3, r4, #20
 802708c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8027090:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8027094:	f04f 0c00 	mov.w	ip, #0
 8027098:	4618      	mov	r0, r3
 802709a:	f853 2b04 	ldr.w	r2, [r3], #4
 802709e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80270a2:	d01c      	beq.n	80270de <__gethex+0x3fe>
 80270a4:	3201      	adds	r2, #1
 80270a6:	6002      	str	r2, [r0, #0]
 80270a8:	2f02      	cmp	r7, #2
 80270aa:	f104 0314 	add.w	r3, r4, #20
 80270ae:	d13f      	bne.n	8027130 <__gethex+0x450>
 80270b0:	f8d8 2000 	ldr.w	r2, [r8]
 80270b4:	3a01      	subs	r2, #1
 80270b6:	42b2      	cmp	r2, r6
 80270b8:	d10a      	bne.n	80270d0 <__gethex+0x3f0>
 80270ba:	1171      	asrs	r1, r6, #5
 80270bc:	2201      	movs	r2, #1
 80270be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80270c2:	f006 061f 	and.w	r6, r6, #31
 80270c6:	fa02 f606 	lsl.w	r6, r2, r6
 80270ca:	421e      	tst	r6, r3
 80270cc:	bf18      	it	ne
 80270ce:	4617      	movne	r7, r2
 80270d0:	f047 0720 	orr.w	r7, r7, #32
 80270d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80270d6:	601c      	str	r4, [r3, #0]
 80270d8:	9b04      	ldr	r3, [sp, #16]
 80270da:	601d      	str	r5, [r3, #0]
 80270dc:	e695      	b.n	8026e0a <__gethex+0x12a>
 80270de:	4299      	cmp	r1, r3
 80270e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80270e4:	d8d8      	bhi.n	8027098 <__gethex+0x3b8>
 80270e6:	68a3      	ldr	r3, [r4, #8]
 80270e8:	459b      	cmp	fp, r3
 80270ea:	db19      	blt.n	8027120 <__gethex+0x440>
 80270ec:	6861      	ldr	r1, [r4, #4]
 80270ee:	ee18 0a10 	vmov	r0, s16
 80270f2:	3101      	adds	r1, #1
 80270f4:	f000 f938 	bl	8027368 <_Balloc>
 80270f8:	4681      	mov	r9, r0
 80270fa:	b918      	cbnz	r0, 8027104 <__gethex+0x424>
 80270fc:	4b1a      	ldr	r3, [pc, #104]	; (8027168 <__gethex+0x488>)
 80270fe:	4602      	mov	r2, r0
 8027100:	2184      	movs	r1, #132	; 0x84
 8027102:	e6a8      	b.n	8026e56 <__gethex+0x176>
 8027104:	6922      	ldr	r2, [r4, #16]
 8027106:	3202      	adds	r2, #2
 8027108:	f104 010c 	add.w	r1, r4, #12
 802710c:	0092      	lsls	r2, r2, #2
 802710e:	300c      	adds	r0, #12
 8027110:	f7fc fc3f 	bl	8023992 <memcpy>
 8027114:	4621      	mov	r1, r4
 8027116:	ee18 0a10 	vmov	r0, s16
 802711a:	f000 f965 	bl	80273e8 <_Bfree>
 802711e:	464c      	mov	r4, r9
 8027120:	6923      	ldr	r3, [r4, #16]
 8027122:	1c5a      	adds	r2, r3, #1
 8027124:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8027128:	6122      	str	r2, [r4, #16]
 802712a:	2201      	movs	r2, #1
 802712c:	615a      	str	r2, [r3, #20]
 802712e:	e7bb      	b.n	80270a8 <__gethex+0x3c8>
 8027130:	6922      	ldr	r2, [r4, #16]
 8027132:	455a      	cmp	r2, fp
 8027134:	dd0b      	ble.n	802714e <__gethex+0x46e>
 8027136:	2101      	movs	r1, #1
 8027138:	4620      	mov	r0, r4
 802713a:	f7ff fd69 	bl	8026c10 <rshift>
 802713e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027142:	3501      	adds	r5, #1
 8027144:	42ab      	cmp	r3, r5
 8027146:	f6ff aed0 	blt.w	8026eea <__gethex+0x20a>
 802714a:	2701      	movs	r7, #1
 802714c:	e7c0      	b.n	80270d0 <__gethex+0x3f0>
 802714e:	f016 061f 	ands.w	r6, r6, #31
 8027152:	d0fa      	beq.n	802714a <__gethex+0x46a>
 8027154:	4453      	add	r3, sl
 8027156:	f1c6 0620 	rsb	r6, r6, #32
 802715a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802715e:	f000 f9f5 	bl	802754c <__hi0bits>
 8027162:	42b0      	cmp	r0, r6
 8027164:	dbe7      	blt.n	8027136 <__gethex+0x456>
 8027166:	e7f0      	b.n	802714a <__gethex+0x46a>
 8027168:	0802da84 	.word	0x0802da84

0802716c <L_shift>:
 802716c:	f1c2 0208 	rsb	r2, r2, #8
 8027170:	0092      	lsls	r2, r2, #2
 8027172:	b570      	push	{r4, r5, r6, lr}
 8027174:	f1c2 0620 	rsb	r6, r2, #32
 8027178:	6843      	ldr	r3, [r0, #4]
 802717a:	6804      	ldr	r4, [r0, #0]
 802717c:	fa03 f506 	lsl.w	r5, r3, r6
 8027180:	432c      	orrs	r4, r5
 8027182:	40d3      	lsrs	r3, r2
 8027184:	6004      	str	r4, [r0, #0]
 8027186:	f840 3f04 	str.w	r3, [r0, #4]!
 802718a:	4288      	cmp	r0, r1
 802718c:	d3f4      	bcc.n	8027178 <L_shift+0xc>
 802718e:	bd70      	pop	{r4, r5, r6, pc}

08027190 <__match>:
 8027190:	b530      	push	{r4, r5, lr}
 8027192:	6803      	ldr	r3, [r0, #0]
 8027194:	3301      	adds	r3, #1
 8027196:	f811 4b01 	ldrb.w	r4, [r1], #1
 802719a:	b914      	cbnz	r4, 80271a2 <__match+0x12>
 802719c:	6003      	str	r3, [r0, #0]
 802719e:	2001      	movs	r0, #1
 80271a0:	bd30      	pop	{r4, r5, pc}
 80271a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80271a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80271aa:	2d19      	cmp	r5, #25
 80271ac:	bf98      	it	ls
 80271ae:	3220      	addls	r2, #32
 80271b0:	42a2      	cmp	r2, r4
 80271b2:	d0f0      	beq.n	8027196 <__match+0x6>
 80271b4:	2000      	movs	r0, #0
 80271b6:	e7f3      	b.n	80271a0 <__match+0x10>

080271b8 <__hexnan>:
 80271b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271bc:	680b      	ldr	r3, [r1, #0]
 80271be:	115e      	asrs	r6, r3, #5
 80271c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80271c4:	f013 031f 	ands.w	r3, r3, #31
 80271c8:	b087      	sub	sp, #28
 80271ca:	bf18      	it	ne
 80271cc:	3604      	addne	r6, #4
 80271ce:	2500      	movs	r5, #0
 80271d0:	1f37      	subs	r7, r6, #4
 80271d2:	4690      	mov	r8, r2
 80271d4:	6802      	ldr	r2, [r0, #0]
 80271d6:	9301      	str	r3, [sp, #4]
 80271d8:	4682      	mov	sl, r0
 80271da:	f846 5c04 	str.w	r5, [r6, #-4]
 80271de:	46b9      	mov	r9, r7
 80271e0:	463c      	mov	r4, r7
 80271e2:	9502      	str	r5, [sp, #8]
 80271e4:	46ab      	mov	fp, r5
 80271e6:	7851      	ldrb	r1, [r2, #1]
 80271e8:	1c53      	adds	r3, r2, #1
 80271ea:	9303      	str	r3, [sp, #12]
 80271ec:	b341      	cbz	r1, 8027240 <__hexnan+0x88>
 80271ee:	4608      	mov	r0, r1
 80271f0:	9205      	str	r2, [sp, #20]
 80271f2:	9104      	str	r1, [sp, #16]
 80271f4:	f7ff fd5e 	bl	8026cb4 <__hexdig_fun>
 80271f8:	2800      	cmp	r0, #0
 80271fa:	d14f      	bne.n	802729c <__hexnan+0xe4>
 80271fc:	9904      	ldr	r1, [sp, #16]
 80271fe:	9a05      	ldr	r2, [sp, #20]
 8027200:	2920      	cmp	r1, #32
 8027202:	d818      	bhi.n	8027236 <__hexnan+0x7e>
 8027204:	9b02      	ldr	r3, [sp, #8]
 8027206:	459b      	cmp	fp, r3
 8027208:	dd13      	ble.n	8027232 <__hexnan+0x7a>
 802720a:	454c      	cmp	r4, r9
 802720c:	d206      	bcs.n	802721c <__hexnan+0x64>
 802720e:	2d07      	cmp	r5, #7
 8027210:	dc04      	bgt.n	802721c <__hexnan+0x64>
 8027212:	462a      	mov	r2, r5
 8027214:	4649      	mov	r1, r9
 8027216:	4620      	mov	r0, r4
 8027218:	f7ff ffa8 	bl	802716c <L_shift>
 802721c:	4544      	cmp	r4, r8
 802721e:	d950      	bls.n	80272c2 <__hexnan+0x10a>
 8027220:	2300      	movs	r3, #0
 8027222:	f1a4 0904 	sub.w	r9, r4, #4
 8027226:	f844 3c04 	str.w	r3, [r4, #-4]
 802722a:	f8cd b008 	str.w	fp, [sp, #8]
 802722e:	464c      	mov	r4, r9
 8027230:	461d      	mov	r5, r3
 8027232:	9a03      	ldr	r2, [sp, #12]
 8027234:	e7d7      	b.n	80271e6 <__hexnan+0x2e>
 8027236:	2929      	cmp	r1, #41	; 0x29
 8027238:	d156      	bne.n	80272e8 <__hexnan+0x130>
 802723a:	3202      	adds	r2, #2
 802723c:	f8ca 2000 	str.w	r2, [sl]
 8027240:	f1bb 0f00 	cmp.w	fp, #0
 8027244:	d050      	beq.n	80272e8 <__hexnan+0x130>
 8027246:	454c      	cmp	r4, r9
 8027248:	d206      	bcs.n	8027258 <__hexnan+0xa0>
 802724a:	2d07      	cmp	r5, #7
 802724c:	dc04      	bgt.n	8027258 <__hexnan+0xa0>
 802724e:	462a      	mov	r2, r5
 8027250:	4649      	mov	r1, r9
 8027252:	4620      	mov	r0, r4
 8027254:	f7ff ff8a 	bl	802716c <L_shift>
 8027258:	4544      	cmp	r4, r8
 802725a:	d934      	bls.n	80272c6 <__hexnan+0x10e>
 802725c:	f1a8 0204 	sub.w	r2, r8, #4
 8027260:	4623      	mov	r3, r4
 8027262:	f853 1b04 	ldr.w	r1, [r3], #4
 8027266:	f842 1f04 	str.w	r1, [r2, #4]!
 802726a:	429f      	cmp	r7, r3
 802726c:	d2f9      	bcs.n	8027262 <__hexnan+0xaa>
 802726e:	1b3b      	subs	r3, r7, r4
 8027270:	f023 0303 	bic.w	r3, r3, #3
 8027274:	3304      	adds	r3, #4
 8027276:	3401      	adds	r4, #1
 8027278:	3e03      	subs	r6, #3
 802727a:	42b4      	cmp	r4, r6
 802727c:	bf88      	it	hi
 802727e:	2304      	movhi	r3, #4
 8027280:	4443      	add	r3, r8
 8027282:	2200      	movs	r2, #0
 8027284:	f843 2b04 	str.w	r2, [r3], #4
 8027288:	429f      	cmp	r7, r3
 802728a:	d2fb      	bcs.n	8027284 <__hexnan+0xcc>
 802728c:	683b      	ldr	r3, [r7, #0]
 802728e:	b91b      	cbnz	r3, 8027298 <__hexnan+0xe0>
 8027290:	4547      	cmp	r7, r8
 8027292:	d127      	bne.n	80272e4 <__hexnan+0x12c>
 8027294:	2301      	movs	r3, #1
 8027296:	603b      	str	r3, [r7, #0]
 8027298:	2005      	movs	r0, #5
 802729a:	e026      	b.n	80272ea <__hexnan+0x132>
 802729c:	3501      	adds	r5, #1
 802729e:	2d08      	cmp	r5, #8
 80272a0:	f10b 0b01 	add.w	fp, fp, #1
 80272a4:	dd06      	ble.n	80272b4 <__hexnan+0xfc>
 80272a6:	4544      	cmp	r4, r8
 80272a8:	d9c3      	bls.n	8027232 <__hexnan+0x7a>
 80272aa:	2300      	movs	r3, #0
 80272ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80272b0:	2501      	movs	r5, #1
 80272b2:	3c04      	subs	r4, #4
 80272b4:	6822      	ldr	r2, [r4, #0]
 80272b6:	f000 000f 	and.w	r0, r0, #15
 80272ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80272be:	6022      	str	r2, [r4, #0]
 80272c0:	e7b7      	b.n	8027232 <__hexnan+0x7a>
 80272c2:	2508      	movs	r5, #8
 80272c4:	e7b5      	b.n	8027232 <__hexnan+0x7a>
 80272c6:	9b01      	ldr	r3, [sp, #4]
 80272c8:	2b00      	cmp	r3, #0
 80272ca:	d0df      	beq.n	802728c <__hexnan+0xd4>
 80272cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80272d0:	f1c3 0320 	rsb	r3, r3, #32
 80272d4:	fa22 f303 	lsr.w	r3, r2, r3
 80272d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80272dc:	401a      	ands	r2, r3
 80272de:	f846 2c04 	str.w	r2, [r6, #-4]
 80272e2:	e7d3      	b.n	802728c <__hexnan+0xd4>
 80272e4:	3f04      	subs	r7, #4
 80272e6:	e7d1      	b.n	802728c <__hexnan+0xd4>
 80272e8:	2004      	movs	r0, #4
 80272ea:	b007      	add	sp, #28
 80272ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080272f0 <_localeconv_r>:
 80272f0:	4800      	ldr	r0, [pc, #0]	; (80272f4 <_localeconv_r+0x4>)
 80272f2:	4770      	bx	lr
 80272f4:	20000254 	.word	0x20000254

080272f8 <_lseek_r>:
 80272f8:	b538      	push	{r3, r4, r5, lr}
 80272fa:	4d07      	ldr	r5, [pc, #28]	; (8027318 <_lseek_r+0x20>)
 80272fc:	4604      	mov	r4, r0
 80272fe:	4608      	mov	r0, r1
 8027300:	4611      	mov	r1, r2
 8027302:	2200      	movs	r2, #0
 8027304:	602a      	str	r2, [r5, #0]
 8027306:	461a      	mov	r2, r3
 8027308:	f7db f992 	bl	8002630 <_lseek>
 802730c:	1c43      	adds	r3, r0, #1
 802730e:	d102      	bne.n	8027316 <_lseek_r+0x1e>
 8027310:	682b      	ldr	r3, [r5, #0]
 8027312:	b103      	cbz	r3, 8027316 <_lseek_r+0x1e>
 8027314:	6023      	str	r3, [r4, #0]
 8027316:	bd38      	pop	{r3, r4, r5, pc}
 8027318:	2001ae44 	.word	0x2001ae44

0802731c <malloc>:
 802731c:	4b02      	ldr	r3, [pc, #8]	; (8027328 <malloc+0xc>)
 802731e:	4601      	mov	r1, r0
 8027320:	6818      	ldr	r0, [r3, #0]
 8027322:	f7fc bb87 	b.w	8023a34 <_malloc_r>
 8027326:	bf00      	nop
 8027328:	200000fc 	.word	0x200000fc

0802732c <__ascii_mbtowc>:
 802732c:	b082      	sub	sp, #8
 802732e:	b901      	cbnz	r1, 8027332 <__ascii_mbtowc+0x6>
 8027330:	a901      	add	r1, sp, #4
 8027332:	b142      	cbz	r2, 8027346 <__ascii_mbtowc+0x1a>
 8027334:	b14b      	cbz	r3, 802734a <__ascii_mbtowc+0x1e>
 8027336:	7813      	ldrb	r3, [r2, #0]
 8027338:	600b      	str	r3, [r1, #0]
 802733a:	7812      	ldrb	r2, [r2, #0]
 802733c:	1e10      	subs	r0, r2, #0
 802733e:	bf18      	it	ne
 8027340:	2001      	movne	r0, #1
 8027342:	b002      	add	sp, #8
 8027344:	4770      	bx	lr
 8027346:	4610      	mov	r0, r2
 8027348:	e7fb      	b.n	8027342 <__ascii_mbtowc+0x16>
 802734a:	f06f 0001 	mvn.w	r0, #1
 802734e:	e7f8      	b.n	8027342 <__ascii_mbtowc+0x16>

08027350 <__malloc_lock>:
 8027350:	4801      	ldr	r0, [pc, #4]	; (8027358 <__malloc_lock+0x8>)
 8027352:	f7fc bb0c 	b.w	802396e <__retarget_lock_acquire_recursive>
 8027356:	bf00      	nop
 8027358:	2001ae38 	.word	0x2001ae38

0802735c <__malloc_unlock>:
 802735c:	4801      	ldr	r0, [pc, #4]	; (8027364 <__malloc_unlock+0x8>)
 802735e:	f7fc bb07 	b.w	8023970 <__retarget_lock_release_recursive>
 8027362:	bf00      	nop
 8027364:	2001ae38 	.word	0x2001ae38

08027368 <_Balloc>:
 8027368:	b570      	push	{r4, r5, r6, lr}
 802736a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802736c:	4604      	mov	r4, r0
 802736e:	460d      	mov	r5, r1
 8027370:	b976      	cbnz	r6, 8027390 <_Balloc+0x28>
 8027372:	2010      	movs	r0, #16
 8027374:	f7ff ffd2 	bl	802731c <malloc>
 8027378:	4602      	mov	r2, r0
 802737a:	6260      	str	r0, [r4, #36]	; 0x24
 802737c:	b920      	cbnz	r0, 8027388 <_Balloc+0x20>
 802737e:	4b18      	ldr	r3, [pc, #96]	; (80273e0 <_Balloc+0x78>)
 8027380:	4818      	ldr	r0, [pc, #96]	; (80273e4 <_Balloc+0x7c>)
 8027382:	2166      	movs	r1, #102	; 0x66
 8027384:	f7fe fcc0 	bl	8025d08 <__assert_func>
 8027388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802738c:	6006      	str	r6, [r0, #0]
 802738e:	60c6      	str	r6, [r0, #12]
 8027390:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8027392:	68f3      	ldr	r3, [r6, #12]
 8027394:	b183      	cbz	r3, 80273b8 <_Balloc+0x50>
 8027396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027398:	68db      	ldr	r3, [r3, #12]
 802739a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802739e:	b9b8      	cbnz	r0, 80273d0 <_Balloc+0x68>
 80273a0:	2101      	movs	r1, #1
 80273a2:	fa01 f605 	lsl.w	r6, r1, r5
 80273a6:	1d72      	adds	r2, r6, #5
 80273a8:	0092      	lsls	r2, r2, #2
 80273aa:	4620      	mov	r0, r4
 80273ac:	f000 fc9d 	bl	8027cea <_calloc_r>
 80273b0:	b160      	cbz	r0, 80273cc <_Balloc+0x64>
 80273b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80273b6:	e00e      	b.n	80273d6 <_Balloc+0x6e>
 80273b8:	2221      	movs	r2, #33	; 0x21
 80273ba:	2104      	movs	r1, #4
 80273bc:	4620      	mov	r0, r4
 80273be:	f000 fc94 	bl	8027cea <_calloc_r>
 80273c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80273c4:	60f0      	str	r0, [r6, #12]
 80273c6:	68db      	ldr	r3, [r3, #12]
 80273c8:	2b00      	cmp	r3, #0
 80273ca:	d1e4      	bne.n	8027396 <_Balloc+0x2e>
 80273cc:	2000      	movs	r0, #0
 80273ce:	bd70      	pop	{r4, r5, r6, pc}
 80273d0:	6802      	ldr	r2, [r0, #0]
 80273d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80273d6:	2300      	movs	r3, #0
 80273d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80273dc:	e7f7      	b.n	80273ce <_Balloc+0x66>
 80273de:	bf00      	nop
 80273e0:	0802d917 	.word	0x0802d917
 80273e4:	0802db10 	.word	0x0802db10

080273e8 <_Bfree>:
 80273e8:	b570      	push	{r4, r5, r6, lr}
 80273ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80273ec:	4605      	mov	r5, r0
 80273ee:	460c      	mov	r4, r1
 80273f0:	b976      	cbnz	r6, 8027410 <_Bfree+0x28>
 80273f2:	2010      	movs	r0, #16
 80273f4:	f7ff ff92 	bl	802731c <malloc>
 80273f8:	4602      	mov	r2, r0
 80273fa:	6268      	str	r0, [r5, #36]	; 0x24
 80273fc:	b920      	cbnz	r0, 8027408 <_Bfree+0x20>
 80273fe:	4b09      	ldr	r3, [pc, #36]	; (8027424 <_Bfree+0x3c>)
 8027400:	4809      	ldr	r0, [pc, #36]	; (8027428 <_Bfree+0x40>)
 8027402:	218a      	movs	r1, #138	; 0x8a
 8027404:	f7fe fc80 	bl	8025d08 <__assert_func>
 8027408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802740c:	6006      	str	r6, [r0, #0]
 802740e:	60c6      	str	r6, [r0, #12]
 8027410:	b13c      	cbz	r4, 8027422 <_Bfree+0x3a>
 8027412:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8027414:	6862      	ldr	r2, [r4, #4]
 8027416:	68db      	ldr	r3, [r3, #12]
 8027418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802741c:	6021      	str	r1, [r4, #0]
 802741e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8027422:	bd70      	pop	{r4, r5, r6, pc}
 8027424:	0802d917 	.word	0x0802d917
 8027428:	0802db10 	.word	0x0802db10

0802742c <__multadd>:
 802742c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027430:	690d      	ldr	r5, [r1, #16]
 8027432:	4607      	mov	r7, r0
 8027434:	460c      	mov	r4, r1
 8027436:	461e      	mov	r6, r3
 8027438:	f101 0c14 	add.w	ip, r1, #20
 802743c:	2000      	movs	r0, #0
 802743e:	f8dc 3000 	ldr.w	r3, [ip]
 8027442:	b299      	uxth	r1, r3
 8027444:	fb02 6101 	mla	r1, r2, r1, r6
 8027448:	0c1e      	lsrs	r6, r3, #16
 802744a:	0c0b      	lsrs	r3, r1, #16
 802744c:	fb02 3306 	mla	r3, r2, r6, r3
 8027450:	b289      	uxth	r1, r1
 8027452:	3001      	adds	r0, #1
 8027454:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027458:	4285      	cmp	r5, r0
 802745a:	f84c 1b04 	str.w	r1, [ip], #4
 802745e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8027462:	dcec      	bgt.n	802743e <__multadd+0x12>
 8027464:	b30e      	cbz	r6, 80274aa <__multadd+0x7e>
 8027466:	68a3      	ldr	r3, [r4, #8]
 8027468:	42ab      	cmp	r3, r5
 802746a:	dc19      	bgt.n	80274a0 <__multadd+0x74>
 802746c:	6861      	ldr	r1, [r4, #4]
 802746e:	4638      	mov	r0, r7
 8027470:	3101      	adds	r1, #1
 8027472:	f7ff ff79 	bl	8027368 <_Balloc>
 8027476:	4680      	mov	r8, r0
 8027478:	b928      	cbnz	r0, 8027486 <__multadd+0x5a>
 802747a:	4602      	mov	r2, r0
 802747c:	4b0c      	ldr	r3, [pc, #48]	; (80274b0 <__multadd+0x84>)
 802747e:	480d      	ldr	r0, [pc, #52]	; (80274b4 <__multadd+0x88>)
 8027480:	21b5      	movs	r1, #181	; 0xb5
 8027482:	f7fe fc41 	bl	8025d08 <__assert_func>
 8027486:	6922      	ldr	r2, [r4, #16]
 8027488:	3202      	adds	r2, #2
 802748a:	f104 010c 	add.w	r1, r4, #12
 802748e:	0092      	lsls	r2, r2, #2
 8027490:	300c      	adds	r0, #12
 8027492:	f7fc fa7e 	bl	8023992 <memcpy>
 8027496:	4621      	mov	r1, r4
 8027498:	4638      	mov	r0, r7
 802749a:	f7ff ffa5 	bl	80273e8 <_Bfree>
 802749e:	4644      	mov	r4, r8
 80274a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80274a4:	3501      	adds	r5, #1
 80274a6:	615e      	str	r6, [r3, #20]
 80274a8:	6125      	str	r5, [r4, #16]
 80274aa:	4620      	mov	r0, r4
 80274ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80274b0:	0802da84 	.word	0x0802da84
 80274b4:	0802db10 	.word	0x0802db10

080274b8 <__s2b>:
 80274b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80274bc:	460c      	mov	r4, r1
 80274be:	4615      	mov	r5, r2
 80274c0:	461f      	mov	r7, r3
 80274c2:	2209      	movs	r2, #9
 80274c4:	3308      	adds	r3, #8
 80274c6:	4606      	mov	r6, r0
 80274c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80274cc:	2100      	movs	r1, #0
 80274ce:	2201      	movs	r2, #1
 80274d0:	429a      	cmp	r2, r3
 80274d2:	db09      	blt.n	80274e8 <__s2b+0x30>
 80274d4:	4630      	mov	r0, r6
 80274d6:	f7ff ff47 	bl	8027368 <_Balloc>
 80274da:	b940      	cbnz	r0, 80274ee <__s2b+0x36>
 80274dc:	4602      	mov	r2, r0
 80274de:	4b19      	ldr	r3, [pc, #100]	; (8027544 <__s2b+0x8c>)
 80274e0:	4819      	ldr	r0, [pc, #100]	; (8027548 <__s2b+0x90>)
 80274e2:	21ce      	movs	r1, #206	; 0xce
 80274e4:	f7fe fc10 	bl	8025d08 <__assert_func>
 80274e8:	0052      	lsls	r2, r2, #1
 80274ea:	3101      	adds	r1, #1
 80274ec:	e7f0      	b.n	80274d0 <__s2b+0x18>
 80274ee:	9b08      	ldr	r3, [sp, #32]
 80274f0:	6143      	str	r3, [r0, #20]
 80274f2:	2d09      	cmp	r5, #9
 80274f4:	f04f 0301 	mov.w	r3, #1
 80274f8:	6103      	str	r3, [r0, #16]
 80274fa:	dd16      	ble.n	802752a <__s2b+0x72>
 80274fc:	f104 0909 	add.w	r9, r4, #9
 8027500:	46c8      	mov	r8, r9
 8027502:	442c      	add	r4, r5
 8027504:	f818 3b01 	ldrb.w	r3, [r8], #1
 8027508:	4601      	mov	r1, r0
 802750a:	3b30      	subs	r3, #48	; 0x30
 802750c:	220a      	movs	r2, #10
 802750e:	4630      	mov	r0, r6
 8027510:	f7ff ff8c 	bl	802742c <__multadd>
 8027514:	45a0      	cmp	r8, r4
 8027516:	d1f5      	bne.n	8027504 <__s2b+0x4c>
 8027518:	f1a5 0408 	sub.w	r4, r5, #8
 802751c:	444c      	add	r4, r9
 802751e:	1b2d      	subs	r5, r5, r4
 8027520:	1963      	adds	r3, r4, r5
 8027522:	42bb      	cmp	r3, r7
 8027524:	db04      	blt.n	8027530 <__s2b+0x78>
 8027526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802752a:	340a      	adds	r4, #10
 802752c:	2509      	movs	r5, #9
 802752e:	e7f6      	b.n	802751e <__s2b+0x66>
 8027530:	f814 3b01 	ldrb.w	r3, [r4], #1
 8027534:	4601      	mov	r1, r0
 8027536:	3b30      	subs	r3, #48	; 0x30
 8027538:	220a      	movs	r2, #10
 802753a:	4630      	mov	r0, r6
 802753c:	f7ff ff76 	bl	802742c <__multadd>
 8027540:	e7ee      	b.n	8027520 <__s2b+0x68>
 8027542:	bf00      	nop
 8027544:	0802da84 	.word	0x0802da84
 8027548:	0802db10 	.word	0x0802db10

0802754c <__hi0bits>:
 802754c:	0c03      	lsrs	r3, r0, #16
 802754e:	041b      	lsls	r3, r3, #16
 8027550:	b9d3      	cbnz	r3, 8027588 <__hi0bits+0x3c>
 8027552:	0400      	lsls	r0, r0, #16
 8027554:	2310      	movs	r3, #16
 8027556:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802755a:	bf04      	itt	eq
 802755c:	0200      	lsleq	r0, r0, #8
 802755e:	3308      	addeq	r3, #8
 8027560:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8027564:	bf04      	itt	eq
 8027566:	0100      	lsleq	r0, r0, #4
 8027568:	3304      	addeq	r3, #4
 802756a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802756e:	bf04      	itt	eq
 8027570:	0080      	lsleq	r0, r0, #2
 8027572:	3302      	addeq	r3, #2
 8027574:	2800      	cmp	r0, #0
 8027576:	db05      	blt.n	8027584 <__hi0bits+0x38>
 8027578:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802757c:	f103 0301 	add.w	r3, r3, #1
 8027580:	bf08      	it	eq
 8027582:	2320      	moveq	r3, #32
 8027584:	4618      	mov	r0, r3
 8027586:	4770      	bx	lr
 8027588:	2300      	movs	r3, #0
 802758a:	e7e4      	b.n	8027556 <__hi0bits+0xa>

0802758c <__lo0bits>:
 802758c:	6803      	ldr	r3, [r0, #0]
 802758e:	f013 0207 	ands.w	r2, r3, #7
 8027592:	4601      	mov	r1, r0
 8027594:	d00b      	beq.n	80275ae <__lo0bits+0x22>
 8027596:	07da      	lsls	r2, r3, #31
 8027598:	d423      	bmi.n	80275e2 <__lo0bits+0x56>
 802759a:	0798      	lsls	r0, r3, #30
 802759c:	bf49      	itett	mi
 802759e:	085b      	lsrmi	r3, r3, #1
 80275a0:	089b      	lsrpl	r3, r3, #2
 80275a2:	2001      	movmi	r0, #1
 80275a4:	600b      	strmi	r3, [r1, #0]
 80275a6:	bf5c      	itt	pl
 80275a8:	600b      	strpl	r3, [r1, #0]
 80275aa:	2002      	movpl	r0, #2
 80275ac:	4770      	bx	lr
 80275ae:	b298      	uxth	r0, r3
 80275b0:	b9a8      	cbnz	r0, 80275de <__lo0bits+0x52>
 80275b2:	0c1b      	lsrs	r3, r3, #16
 80275b4:	2010      	movs	r0, #16
 80275b6:	b2da      	uxtb	r2, r3
 80275b8:	b90a      	cbnz	r2, 80275be <__lo0bits+0x32>
 80275ba:	3008      	adds	r0, #8
 80275bc:	0a1b      	lsrs	r3, r3, #8
 80275be:	071a      	lsls	r2, r3, #28
 80275c0:	bf04      	itt	eq
 80275c2:	091b      	lsreq	r3, r3, #4
 80275c4:	3004      	addeq	r0, #4
 80275c6:	079a      	lsls	r2, r3, #30
 80275c8:	bf04      	itt	eq
 80275ca:	089b      	lsreq	r3, r3, #2
 80275cc:	3002      	addeq	r0, #2
 80275ce:	07da      	lsls	r2, r3, #31
 80275d0:	d403      	bmi.n	80275da <__lo0bits+0x4e>
 80275d2:	085b      	lsrs	r3, r3, #1
 80275d4:	f100 0001 	add.w	r0, r0, #1
 80275d8:	d005      	beq.n	80275e6 <__lo0bits+0x5a>
 80275da:	600b      	str	r3, [r1, #0]
 80275dc:	4770      	bx	lr
 80275de:	4610      	mov	r0, r2
 80275e0:	e7e9      	b.n	80275b6 <__lo0bits+0x2a>
 80275e2:	2000      	movs	r0, #0
 80275e4:	4770      	bx	lr
 80275e6:	2020      	movs	r0, #32
 80275e8:	4770      	bx	lr
	...

080275ec <__i2b>:
 80275ec:	b510      	push	{r4, lr}
 80275ee:	460c      	mov	r4, r1
 80275f0:	2101      	movs	r1, #1
 80275f2:	f7ff feb9 	bl	8027368 <_Balloc>
 80275f6:	4602      	mov	r2, r0
 80275f8:	b928      	cbnz	r0, 8027606 <__i2b+0x1a>
 80275fa:	4b05      	ldr	r3, [pc, #20]	; (8027610 <__i2b+0x24>)
 80275fc:	4805      	ldr	r0, [pc, #20]	; (8027614 <__i2b+0x28>)
 80275fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8027602:	f7fe fb81 	bl	8025d08 <__assert_func>
 8027606:	2301      	movs	r3, #1
 8027608:	6144      	str	r4, [r0, #20]
 802760a:	6103      	str	r3, [r0, #16]
 802760c:	bd10      	pop	{r4, pc}
 802760e:	bf00      	nop
 8027610:	0802da84 	.word	0x0802da84
 8027614:	0802db10 	.word	0x0802db10

08027618 <__multiply>:
 8027618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802761c:	4691      	mov	r9, r2
 802761e:	690a      	ldr	r2, [r1, #16]
 8027620:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8027624:	429a      	cmp	r2, r3
 8027626:	bfb8      	it	lt
 8027628:	460b      	movlt	r3, r1
 802762a:	460c      	mov	r4, r1
 802762c:	bfbc      	itt	lt
 802762e:	464c      	movlt	r4, r9
 8027630:	4699      	movlt	r9, r3
 8027632:	6927      	ldr	r7, [r4, #16]
 8027634:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8027638:	68a3      	ldr	r3, [r4, #8]
 802763a:	6861      	ldr	r1, [r4, #4]
 802763c:	eb07 060a 	add.w	r6, r7, sl
 8027640:	42b3      	cmp	r3, r6
 8027642:	b085      	sub	sp, #20
 8027644:	bfb8      	it	lt
 8027646:	3101      	addlt	r1, #1
 8027648:	f7ff fe8e 	bl	8027368 <_Balloc>
 802764c:	b930      	cbnz	r0, 802765c <__multiply+0x44>
 802764e:	4602      	mov	r2, r0
 8027650:	4b44      	ldr	r3, [pc, #272]	; (8027764 <__multiply+0x14c>)
 8027652:	4845      	ldr	r0, [pc, #276]	; (8027768 <__multiply+0x150>)
 8027654:	f240 115d 	movw	r1, #349	; 0x15d
 8027658:	f7fe fb56 	bl	8025d08 <__assert_func>
 802765c:	f100 0514 	add.w	r5, r0, #20
 8027660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027664:	462b      	mov	r3, r5
 8027666:	2200      	movs	r2, #0
 8027668:	4543      	cmp	r3, r8
 802766a:	d321      	bcc.n	80276b0 <__multiply+0x98>
 802766c:	f104 0314 	add.w	r3, r4, #20
 8027670:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027674:	f109 0314 	add.w	r3, r9, #20
 8027678:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802767c:	9202      	str	r2, [sp, #8]
 802767e:	1b3a      	subs	r2, r7, r4
 8027680:	3a15      	subs	r2, #21
 8027682:	f022 0203 	bic.w	r2, r2, #3
 8027686:	3204      	adds	r2, #4
 8027688:	f104 0115 	add.w	r1, r4, #21
 802768c:	428f      	cmp	r7, r1
 802768e:	bf38      	it	cc
 8027690:	2204      	movcc	r2, #4
 8027692:	9201      	str	r2, [sp, #4]
 8027694:	9a02      	ldr	r2, [sp, #8]
 8027696:	9303      	str	r3, [sp, #12]
 8027698:	429a      	cmp	r2, r3
 802769a:	d80c      	bhi.n	80276b6 <__multiply+0x9e>
 802769c:	2e00      	cmp	r6, #0
 802769e:	dd03      	ble.n	80276a8 <__multiply+0x90>
 80276a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80276a4:	2b00      	cmp	r3, #0
 80276a6:	d05a      	beq.n	802775e <__multiply+0x146>
 80276a8:	6106      	str	r6, [r0, #16]
 80276aa:	b005      	add	sp, #20
 80276ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276b0:	f843 2b04 	str.w	r2, [r3], #4
 80276b4:	e7d8      	b.n	8027668 <__multiply+0x50>
 80276b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80276ba:	f1ba 0f00 	cmp.w	sl, #0
 80276be:	d024      	beq.n	802770a <__multiply+0xf2>
 80276c0:	f104 0e14 	add.w	lr, r4, #20
 80276c4:	46a9      	mov	r9, r5
 80276c6:	f04f 0c00 	mov.w	ip, #0
 80276ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80276ce:	f8d9 1000 	ldr.w	r1, [r9]
 80276d2:	fa1f fb82 	uxth.w	fp, r2
 80276d6:	b289      	uxth	r1, r1
 80276d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80276dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80276e0:	f8d9 2000 	ldr.w	r2, [r9]
 80276e4:	4461      	add	r1, ip
 80276e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80276ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80276ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80276f2:	b289      	uxth	r1, r1
 80276f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80276f8:	4577      	cmp	r7, lr
 80276fa:	f849 1b04 	str.w	r1, [r9], #4
 80276fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8027702:	d8e2      	bhi.n	80276ca <__multiply+0xb2>
 8027704:	9a01      	ldr	r2, [sp, #4]
 8027706:	f845 c002 	str.w	ip, [r5, r2]
 802770a:	9a03      	ldr	r2, [sp, #12]
 802770c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8027710:	3304      	adds	r3, #4
 8027712:	f1b9 0f00 	cmp.w	r9, #0
 8027716:	d020      	beq.n	802775a <__multiply+0x142>
 8027718:	6829      	ldr	r1, [r5, #0]
 802771a:	f104 0c14 	add.w	ip, r4, #20
 802771e:	46ae      	mov	lr, r5
 8027720:	f04f 0a00 	mov.w	sl, #0
 8027724:	f8bc b000 	ldrh.w	fp, [ip]
 8027728:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802772c:	fb09 220b 	mla	r2, r9, fp, r2
 8027730:	4492      	add	sl, r2
 8027732:	b289      	uxth	r1, r1
 8027734:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8027738:	f84e 1b04 	str.w	r1, [lr], #4
 802773c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8027740:	f8be 1000 	ldrh.w	r1, [lr]
 8027744:	0c12      	lsrs	r2, r2, #16
 8027746:	fb09 1102 	mla	r1, r9, r2, r1
 802774a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802774e:	4567      	cmp	r7, ip
 8027750:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027754:	d8e6      	bhi.n	8027724 <__multiply+0x10c>
 8027756:	9a01      	ldr	r2, [sp, #4]
 8027758:	50a9      	str	r1, [r5, r2]
 802775a:	3504      	adds	r5, #4
 802775c:	e79a      	b.n	8027694 <__multiply+0x7c>
 802775e:	3e01      	subs	r6, #1
 8027760:	e79c      	b.n	802769c <__multiply+0x84>
 8027762:	bf00      	nop
 8027764:	0802da84 	.word	0x0802da84
 8027768:	0802db10 	.word	0x0802db10

0802776c <__pow5mult>:
 802776c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027770:	4615      	mov	r5, r2
 8027772:	f012 0203 	ands.w	r2, r2, #3
 8027776:	4606      	mov	r6, r0
 8027778:	460f      	mov	r7, r1
 802777a:	d007      	beq.n	802778c <__pow5mult+0x20>
 802777c:	4c25      	ldr	r4, [pc, #148]	; (8027814 <__pow5mult+0xa8>)
 802777e:	3a01      	subs	r2, #1
 8027780:	2300      	movs	r3, #0
 8027782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027786:	f7ff fe51 	bl	802742c <__multadd>
 802778a:	4607      	mov	r7, r0
 802778c:	10ad      	asrs	r5, r5, #2
 802778e:	d03d      	beq.n	802780c <__pow5mult+0xa0>
 8027790:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8027792:	b97c      	cbnz	r4, 80277b4 <__pow5mult+0x48>
 8027794:	2010      	movs	r0, #16
 8027796:	f7ff fdc1 	bl	802731c <malloc>
 802779a:	4602      	mov	r2, r0
 802779c:	6270      	str	r0, [r6, #36]	; 0x24
 802779e:	b928      	cbnz	r0, 80277ac <__pow5mult+0x40>
 80277a0:	4b1d      	ldr	r3, [pc, #116]	; (8027818 <__pow5mult+0xac>)
 80277a2:	481e      	ldr	r0, [pc, #120]	; (802781c <__pow5mult+0xb0>)
 80277a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80277a8:	f7fe faae 	bl	8025d08 <__assert_func>
 80277ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80277b0:	6004      	str	r4, [r0, #0]
 80277b2:	60c4      	str	r4, [r0, #12]
 80277b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80277b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80277bc:	b94c      	cbnz	r4, 80277d2 <__pow5mult+0x66>
 80277be:	f240 2171 	movw	r1, #625	; 0x271
 80277c2:	4630      	mov	r0, r6
 80277c4:	f7ff ff12 	bl	80275ec <__i2b>
 80277c8:	2300      	movs	r3, #0
 80277ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80277ce:	4604      	mov	r4, r0
 80277d0:	6003      	str	r3, [r0, #0]
 80277d2:	f04f 0900 	mov.w	r9, #0
 80277d6:	07eb      	lsls	r3, r5, #31
 80277d8:	d50a      	bpl.n	80277f0 <__pow5mult+0x84>
 80277da:	4639      	mov	r1, r7
 80277dc:	4622      	mov	r2, r4
 80277de:	4630      	mov	r0, r6
 80277e0:	f7ff ff1a 	bl	8027618 <__multiply>
 80277e4:	4639      	mov	r1, r7
 80277e6:	4680      	mov	r8, r0
 80277e8:	4630      	mov	r0, r6
 80277ea:	f7ff fdfd 	bl	80273e8 <_Bfree>
 80277ee:	4647      	mov	r7, r8
 80277f0:	106d      	asrs	r5, r5, #1
 80277f2:	d00b      	beq.n	802780c <__pow5mult+0xa0>
 80277f4:	6820      	ldr	r0, [r4, #0]
 80277f6:	b938      	cbnz	r0, 8027808 <__pow5mult+0x9c>
 80277f8:	4622      	mov	r2, r4
 80277fa:	4621      	mov	r1, r4
 80277fc:	4630      	mov	r0, r6
 80277fe:	f7ff ff0b 	bl	8027618 <__multiply>
 8027802:	6020      	str	r0, [r4, #0]
 8027804:	f8c0 9000 	str.w	r9, [r0]
 8027808:	4604      	mov	r4, r0
 802780a:	e7e4      	b.n	80277d6 <__pow5mult+0x6a>
 802780c:	4638      	mov	r0, r7
 802780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027812:	bf00      	nop
 8027814:	0802dc60 	.word	0x0802dc60
 8027818:	0802d917 	.word	0x0802d917
 802781c:	0802db10 	.word	0x0802db10

08027820 <__lshift>:
 8027820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027824:	460c      	mov	r4, r1
 8027826:	6849      	ldr	r1, [r1, #4]
 8027828:	6923      	ldr	r3, [r4, #16]
 802782a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802782e:	68a3      	ldr	r3, [r4, #8]
 8027830:	4607      	mov	r7, r0
 8027832:	4691      	mov	r9, r2
 8027834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027838:	f108 0601 	add.w	r6, r8, #1
 802783c:	42b3      	cmp	r3, r6
 802783e:	db0b      	blt.n	8027858 <__lshift+0x38>
 8027840:	4638      	mov	r0, r7
 8027842:	f7ff fd91 	bl	8027368 <_Balloc>
 8027846:	4605      	mov	r5, r0
 8027848:	b948      	cbnz	r0, 802785e <__lshift+0x3e>
 802784a:	4602      	mov	r2, r0
 802784c:	4b2a      	ldr	r3, [pc, #168]	; (80278f8 <__lshift+0xd8>)
 802784e:	482b      	ldr	r0, [pc, #172]	; (80278fc <__lshift+0xdc>)
 8027850:	f240 11d9 	movw	r1, #473	; 0x1d9
 8027854:	f7fe fa58 	bl	8025d08 <__assert_func>
 8027858:	3101      	adds	r1, #1
 802785a:	005b      	lsls	r3, r3, #1
 802785c:	e7ee      	b.n	802783c <__lshift+0x1c>
 802785e:	2300      	movs	r3, #0
 8027860:	f100 0114 	add.w	r1, r0, #20
 8027864:	f100 0210 	add.w	r2, r0, #16
 8027868:	4618      	mov	r0, r3
 802786a:	4553      	cmp	r3, sl
 802786c:	db37      	blt.n	80278de <__lshift+0xbe>
 802786e:	6920      	ldr	r0, [r4, #16]
 8027870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027874:	f104 0314 	add.w	r3, r4, #20
 8027878:	f019 091f 	ands.w	r9, r9, #31
 802787c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027880:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8027884:	d02f      	beq.n	80278e6 <__lshift+0xc6>
 8027886:	f1c9 0e20 	rsb	lr, r9, #32
 802788a:	468a      	mov	sl, r1
 802788c:	f04f 0c00 	mov.w	ip, #0
 8027890:	681a      	ldr	r2, [r3, #0]
 8027892:	fa02 f209 	lsl.w	r2, r2, r9
 8027896:	ea42 020c 	orr.w	r2, r2, ip
 802789a:	f84a 2b04 	str.w	r2, [sl], #4
 802789e:	f853 2b04 	ldr.w	r2, [r3], #4
 80278a2:	4298      	cmp	r0, r3
 80278a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80278a8:	d8f2      	bhi.n	8027890 <__lshift+0x70>
 80278aa:	1b03      	subs	r3, r0, r4
 80278ac:	3b15      	subs	r3, #21
 80278ae:	f023 0303 	bic.w	r3, r3, #3
 80278b2:	3304      	adds	r3, #4
 80278b4:	f104 0215 	add.w	r2, r4, #21
 80278b8:	4290      	cmp	r0, r2
 80278ba:	bf38      	it	cc
 80278bc:	2304      	movcc	r3, #4
 80278be:	f841 c003 	str.w	ip, [r1, r3]
 80278c2:	f1bc 0f00 	cmp.w	ip, #0
 80278c6:	d001      	beq.n	80278cc <__lshift+0xac>
 80278c8:	f108 0602 	add.w	r6, r8, #2
 80278cc:	3e01      	subs	r6, #1
 80278ce:	4638      	mov	r0, r7
 80278d0:	612e      	str	r6, [r5, #16]
 80278d2:	4621      	mov	r1, r4
 80278d4:	f7ff fd88 	bl	80273e8 <_Bfree>
 80278d8:	4628      	mov	r0, r5
 80278da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80278de:	f842 0f04 	str.w	r0, [r2, #4]!
 80278e2:	3301      	adds	r3, #1
 80278e4:	e7c1      	b.n	802786a <__lshift+0x4a>
 80278e6:	3904      	subs	r1, #4
 80278e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80278ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80278f0:	4298      	cmp	r0, r3
 80278f2:	d8f9      	bhi.n	80278e8 <__lshift+0xc8>
 80278f4:	e7ea      	b.n	80278cc <__lshift+0xac>
 80278f6:	bf00      	nop
 80278f8:	0802da84 	.word	0x0802da84
 80278fc:	0802db10 	.word	0x0802db10

08027900 <__mcmp>:
 8027900:	b530      	push	{r4, r5, lr}
 8027902:	6902      	ldr	r2, [r0, #16]
 8027904:	690c      	ldr	r4, [r1, #16]
 8027906:	1b12      	subs	r2, r2, r4
 8027908:	d10e      	bne.n	8027928 <__mcmp+0x28>
 802790a:	f100 0314 	add.w	r3, r0, #20
 802790e:	3114      	adds	r1, #20
 8027910:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8027914:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027918:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802791c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027920:	42a5      	cmp	r5, r4
 8027922:	d003      	beq.n	802792c <__mcmp+0x2c>
 8027924:	d305      	bcc.n	8027932 <__mcmp+0x32>
 8027926:	2201      	movs	r2, #1
 8027928:	4610      	mov	r0, r2
 802792a:	bd30      	pop	{r4, r5, pc}
 802792c:	4283      	cmp	r3, r0
 802792e:	d3f3      	bcc.n	8027918 <__mcmp+0x18>
 8027930:	e7fa      	b.n	8027928 <__mcmp+0x28>
 8027932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8027936:	e7f7      	b.n	8027928 <__mcmp+0x28>

08027938 <__mdiff>:
 8027938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802793c:	460c      	mov	r4, r1
 802793e:	4606      	mov	r6, r0
 8027940:	4611      	mov	r1, r2
 8027942:	4620      	mov	r0, r4
 8027944:	4690      	mov	r8, r2
 8027946:	f7ff ffdb 	bl	8027900 <__mcmp>
 802794a:	1e05      	subs	r5, r0, #0
 802794c:	d110      	bne.n	8027970 <__mdiff+0x38>
 802794e:	4629      	mov	r1, r5
 8027950:	4630      	mov	r0, r6
 8027952:	f7ff fd09 	bl	8027368 <_Balloc>
 8027956:	b930      	cbnz	r0, 8027966 <__mdiff+0x2e>
 8027958:	4b3a      	ldr	r3, [pc, #232]	; (8027a44 <__mdiff+0x10c>)
 802795a:	4602      	mov	r2, r0
 802795c:	f240 2132 	movw	r1, #562	; 0x232
 8027960:	4839      	ldr	r0, [pc, #228]	; (8027a48 <__mdiff+0x110>)
 8027962:	f7fe f9d1 	bl	8025d08 <__assert_func>
 8027966:	2301      	movs	r3, #1
 8027968:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802796c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027970:	bfa4      	itt	ge
 8027972:	4643      	movge	r3, r8
 8027974:	46a0      	movge	r8, r4
 8027976:	4630      	mov	r0, r6
 8027978:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802797c:	bfa6      	itte	ge
 802797e:	461c      	movge	r4, r3
 8027980:	2500      	movge	r5, #0
 8027982:	2501      	movlt	r5, #1
 8027984:	f7ff fcf0 	bl	8027368 <_Balloc>
 8027988:	b920      	cbnz	r0, 8027994 <__mdiff+0x5c>
 802798a:	4b2e      	ldr	r3, [pc, #184]	; (8027a44 <__mdiff+0x10c>)
 802798c:	4602      	mov	r2, r0
 802798e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8027992:	e7e5      	b.n	8027960 <__mdiff+0x28>
 8027994:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027998:	6926      	ldr	r6, [r4, #16]
 802799a:	60c5      	str	r5, [r0, #12]
 802799c:	f104 0914 	add.w	r9, r4, #20
 80279a0:	f108 0514 	add.w	r5, r8, #20
 80279a4:	f100 0e14 	add.w	lr, r0, #20
 80279a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80279ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80279b0:	f108 0210 	add.w	r2, r8, #16
 80279b4:	46f2      	mov	sl, lr
 80279b6:	2100      	movs	r1, #0
 80279b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80279bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80279c0:	fa1f f883 	uxth.w	r8, r3
 80279c4:	fa11 f18b 	uxtah	r1, r1, fp
 80279c8:	0c1b      	lsrs	r3, r3, #16
 80279ca:	eba1 0808 	sub.w	r8, r1, r8
 80279ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80279d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80279d6:	fa1f f888 	uxth.w	r8, r8
 80279da:	1419      	asrs	r1, r3, #16
 80279dc:	454e      	cmp	r6, r9
 80279de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80279e2:	f84a 3b04 	str.w	r3, [sl], #4
 80279e6:	d8e7      	bhi.n	80279b8 <__mdiff+0x80>
 80279e8:	1b33      	subs	r3, r6, r4
 80279ea:	3b15      	subs	r3, #21
 80279ec:	f023 0303 	bic.w	r3, r3, #3
 80279f0:	3304      	adds	r3, #4
 80279f2:	3415      	adds	r4, #21
 80279f4:	42a6      	cmp	r6, r4
 80279f6:	bf38      	it	cc
 80279f8:	2304      	movcc	r3, #4
 80279fa:	441d      	add	r5, r3
 80279fc:	4473      	add	r3, lr
 80279fe:	469e      	mov	lr, r3
 8027a00:	462e      	mov	r6, r5
 8027a02:	4566      	cmp	r6, ip
 8027a04:	d30e      	bcc.n	8027a24 <__mdiff+0xec>
 8027a06:	f10c 0203 	add.w	r2, ip, #3
 8027a0a:	1b52      	subs	r2, r2, r5
 8027a0c:	f022 0203 	bic.w	r2, r2, #3
 8027a10:	3d03      	subs	r5, #3
 8027a12:	45ac      	cmp	ip, r5
 8027a14:	bf38      	it	cc
 8027a16:	2200      	movcc	r2, #0
 8027a18:	441a      	add	r2, r3
 8027a1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8027a1e:	b17b      	cbz	r3, 8027a40 <__mdiff+0x108>
 8027a20:	6107      	str	r7, [r0, #16]
 8027a22:	e7a3      	b.n	802796c <__mdiff+0x34>
 8027a24:	f856 8b04 	ldr.w	r8, [r6], #4
 8027a28:	fa11 f288 	uxtah	r2, r1, r8
 8027a2c:	1414      	asrs	r4, r2, #16
 8027a2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027a32:	b292      	uxth	r2, r2
 8027a34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027a38:	f84e 2b04 	str.w	r2, [lr], #4
 8027a3c:	1421      	asrs	r1, r4, #16
 8027a3e:	e7e0      	b.n	8027a02 <__mdiff+0xca>
 8027a40:	3f01      	subs	r7, #1
 8027a42:	e7ea      	b.n	8027a1a <__mdiff+0xe2>
 8027a44:	0802da84 	.word	0x0802da84
 8027a48:	0802db10 	.word	0x0802db10

08027a4c <__ulp>:
 8027a4c:	b082      	sub	sp, #8
 8027a4e:	ed8d 0b00 	vstr	d0, [sp]
 8027a52:	9b01      	ldr	r3, [sp, #4]
 8027a54:	4912      	ldr	r1, [pc, #72]	; (8027aa0 <__ulp+0x54>)
 8027a56:	4019      	ands	r1, r3
 8027a58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8027a5c:	2900      	cmp	r1, #0
 8027a5e:	dd05      	ble.n	8027a6c <__ulp+0x20>
 8027a60:	2200      	movs	r2, #0
 8027a62:	460b      	mov	r3, r1
 8027a64:	ec43 2b10 	vmov	d0, r2, r3
 8027a68:	b002      	add	sp, #8
 8027a6a:	4770      	bx	lr
 8027a6c:	4249      	negs	r1, r1
 8027a6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8027a72:	ea4f 5021 	mov.w	r0, r1, asr #20
 8027a76:	f04f 0200 	mov.w	r2, #0
 8027a7a:	f04f 0300 	mov.w	r3, #0
 8027a7e:	da04      	bge.n	8027a8a <__ulp+0x3e>
 8027a80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8027a84:	fa41 f300 	asr.w	r3, r1, r0
 8027a88:	e7ec      	b.n	8027a64 <__ulp+0x18>
 8027a8a:	f1a0 0114 	sub.w	r1, r0, #20
 8027a8e:	291e      	cmp	r1, #30
 8027a90:	bfda      	itte	le
 8027a92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8027a96:	fa20 f101 	lsrle.w	r1, r0, r1
 8027a9a:	2101      	movgt	r1, #1
 8027a9c:	460a      	mov	r2, r1
 8027a9e:	e7e1      	b.n	8027a64 <__ulp+0x18>
 8027aa0:	7ff00000 	.word	0x7ff00000

08027aa4 <__b2d>:
 8027aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027aa6:	6905      	ldr	r5, [r0, #16]
 8027aa8:	f100 0714 	add.w	r7, r0, #20
 8027aac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8027ab0:	1f2e      	subs	r6, r5, #4
 8027ab2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8027ab6:	4620      	mov	r0, r4
 8027ab8:	f7ff fd48 	bl	802754c <__hi0bits>
 8027abc:	f1c0 0320 	rsb	r3, r0, #32
 8027ac0:	280a      	cmp	r0, #10
 8027ac2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8027b40 <__b2d+0x9c>
 8027ac6:	600b      	str	r3, [r1, #0]
 8027ac8:	dc14      	bgt.n	8027af4 <__b2d+0x50>
 8027aca:	f1c0 0e0b 	rsb	lr, r0, #11
 8027ace:	fa24 f10e 	lsr.w	r1, r4, lr
 8027ad2:	42b7      	cmp	r7, r6
 8027ad4:	ea41 030c 	orr.w	r3, r1, ip
 8027ad8:	bf34      	ite	cc
 8027ada:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8027ade:	2100      	movcs	r1, #0
 8027ae0:	3015      	adds	r0, #21
 8027ae2:	fa04 f000 	lsl.w	r0, r4, r0
 8027ae6:	fa21 f10e 	lsr.w	r1, r1, lr
 8027aea:	ea40 0201 	orr.w	r2, r0, r1
 8027aee:	ec43 2b10 	vmov	d0, r2, r3
 8027af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027af4:	42b7      	cmp	r7, r6
 8027af6:	bf3a      	itte	cc
 8027af8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8027afc:	f1a5 0608 	subcc.w	r6, r5, #8
 8027b00:	2100      	movcs	r1, #0
 8027b02:	380b      	subs	r0, #11
 8027b04:	d017      	beq.n	8027b36 <__b2d+0x92>
 8027b06:	f1c0 0c20 	rsb	ip, r0, #32
 8027b0a:	fa04 f500 	lsl.w	r5, r4, r0
 8027b0e:	42be      	cmp	r6, r7
 8027b10:	fa21 f40c 	lsr.w	r4, r1, ip
 8027b14:	ea45 0504 	orr.w	r5, r5, r4
 8027b18:	bf8c      	ite	hi
 8027b1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8027b1e:	2400      	movls	r4, #0
 8027b20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8027b24:	fa01 f000 	lsl.w	r0, r1, r0
 8027b28:	fa24 f40c 	lsr.w	r4, r4, ip
 8027b2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8027b30:	ea40 0204 	orr.w	r2, r0, r4
 8027b34:	e7db      	b.n	8027aee <__b2d+0x4a>
 8027b36:	ea44 030c 	orr.w	r3, r4, ip
 8027b3a:	460a      	mov	r2, r1
 8027b3c:	e7d7      	b.n	8027aee <__b2d+0x4a>
 8027b3e:	bf00      	nop
 8027b40:	3ff00000 	.word	0x3ff00000

08027b44 <__d2b>:
 8027b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027b48:	4689      	mov	r9, r1
 8027b4a:	2101      	movs	r1, #1
 8027b4c:	ec57 6b10 	vmov	r6, r7, d0
 8027b50:	4690      	mov	r8, r2
 8027b52:	f7ff fc09 	bl	8027368 <_Balloc>
 8027b56:	4604      	mov	r4, r0
 8027b58:	b930      	cbnz	r0, 8027b68 <__d2b+0x24>
 8027b5a:	4602      	mov	r2, r0
 8027b5c:	4b25      	ldr	r3, [pc, #148]	; (8027bf4 <__d2b+0xb0>)
 8027b5e:	4826      	ldr	r0, [pc, #152]	; (8027bf8 <__d2b+0xb4>)
 8027b60:	f240 310a 	movw	r1, #778	; 0x30a
 8027b64:	f7fe f8d0 	bl	8025d08 <__assert_func>
 8027b68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8027b6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027b70:	bb35      	cbnz	r5, 8027bc0 <__d2b+0x7c>
 8027b72:	2e00      	cmp	r6, #0
 8027b74:	9301      	str	r3, [sp, #4]
 8027b76:	d028      	beq.n	8027bca <__d2b+0x86>
 8027b78:	4668      	mov	r0, sp
 8027b7a:	9600      	str	r6, [sp, #0]
 8027b7c:	f7ff fd06 	bl	802758c <__lo0bits>
 8027b80:	9900      	ldr	r1, [sp, #0]
 8027b82:	b300      	cbz	r0, 8027bc6 <__d2b+0x82>
 8027b84:	9a01      	ldr	r2, [sp, #4]
 8027b86:	f1c0 0320 	rsb	r3, r0, #32
 8027b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8027b8e:	430b      	orrs	r3, r1
 8027b90:	40c2      	lsrs	r2, r0
 8027b92:	6163      	str	r3, [r4, #20]
 8027b94:	9201      	str	r2, [sp, #4]
 8027b96:	9b01      	ldr	r3, [sp, #4]
 8027b98:	61a3      	str	r3, [r4, #24]
 8027b9a:	2b00      	cmp	r3, #0
 8027b9c:	bf14      	ite	ne
 8027b9e:	2202      	movne	r2, #2
 8027ba0:	2201      	moveq	r2, #1
 8027ba2:	6122      	str	r2, [r4, #16]
 8027ba4:	b1d5      	cbz	r5, 8027bdc <__d2b+0x98>
 8027ba6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8027baa:	4405      	add	r5, r0
 8027bac:	f8c9 5000 	str.w	r5, [r9]
 8027bb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027bb4:	f8c8 0000 	str.w	r0, [r8]
 8027bb8:	4620      	mov	r0, r4
 8027bba:	b003      	add	sp, #12
 8027bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027bc4:	e7d5      	b.n	8027b72 <__d2b+0x2e>
 8027bc6:	6161      	str	r1, [r4, #20]
 8027bc8:	e7e5      	b.n	8027b96 <__d2b+0x52>
 8027bca:	a801      	add	r0, sp, #4
 8027bcc:	f7ff fcde 	bl	802758c <__lo0bits>
 8027bd0:	9b01      	ldr	r3, [sp, #4]
 8027bd2:	6163      	str	r3, [r4, #20]
 8027bd4:	2201      	movs	r2, #1
 8027bd6:	6122      	str	r2, [r4, #16]
 8027bd8:	3020      	adds	r0, #32
 8027bda:	e7e3      	b.n	8027ba4 <__d2b+0x60>
 8027bdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8027be0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8027be4:	f8c9 0000 	str.w	r0, [r9]
 8027be8:	6918      	ldr	r0, [r3, #16]
 8027bea:	f7ff fcaf 	bl	802754c <__hi0bits>
 8027bee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8027bf2:	e7df      	b.n	8027bb4 <__d2b+0x70>
 8027bf4:	0802da84 	.word	0x0802da84
 8027bf8:	0802db10 	.word	0x0802db10

08027bfc <__ratio>:
 8027bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c00:	4688      	mov	r8, r1
 8027c02:	4669      	mov	r1, sp
 8027c04:	4681      	mov	r9, r0
 8027c06:	f7ff ff4d 	bl	8027aa4 <__b2d>
 8027c0a:	a901      	add	r1, sp, #4
 8027c0c:	4640      	mov	r0, r8
 8027c0e:	ec55 4b10 	vmov	r4, r5, d0
 8027c12:	f7ff ff47 	bl	8027aa4 <__b2d>
 8027c16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8027c1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8027c1e:	eba3 0c02 	sub.w	ip, r3, r2
 8027c22:	e9dd 3200 	ldrd	r3, r2, [sp]
 8027c26:	1a9b      	subs	r3, r3, r2
 8027c28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8027c2c:	ec51 0b10 	vmov	r0, r1, d0
 8027c30:	2b00      	cmp	r3, #0
 8027c32:	bfd6      	itet	le
 8027c34:	460a      	movle	r2, r1
 8027c36:	462a      	movgt	r2, r5
 8027c38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8027c3c:	468b      	mov	fp, r1
 8027c3e:	462f      	mov	r7, r5
 8027c40:	bfd4      	ite	le
 8027c42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8027c46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8027c4a:	4620      	mov	r0, r4
 8027c4c:	ee10 2a10 	vmov	r2, s0
 8027c50:	465b      	mov	r3, fp
 8027c52:	4639      	mov	r1, r7
 8027c54:	f7d8 fe2a 	bl	80008ac <__aeabi_ddiv>
 8027c58:	ec41 0b10 	vmov	d0, r0, r1
 8027c5c:	b003      	add	sp, #12
 8027c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027c62 <__copybits>:
 8027c62:	3901      	subs	r1, #1
 8027c64:	b570      	push	{r4, r5, r6, lr}
 8027c66:	1149      	asrs	r1, r1, #5
 8027c68:	6914      	ldr	r4, [r2, #16]
 8027c6a:	3101      	adds	r1, #1
 8027c6c:	f102 0314 	add.w	r3, r2, #20
 8027c70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8027c74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8027c78:	1f05      	subs	r5, r0, #4
 8027c7a:	42a3      	cmp	r3, r4
 8027c7c:	d30c      	bcc.n	8027c98 <__copybits+0x36>
 8027c7e:	1aa3      	subs	r3, r4, r2
 8027c80:	3b11      	subs	r3, #17
 8027c82:	f023 0303 	bic.w	r3, r3, #3
 8027c86:	3211      	adds	r2, #17
 8027c88:	42a2      	cmp	r2, r4
 8027c8a:	bf88      	it	hi
 8027c8c:	2300      	movhi	r3, #0
 8027c8e:	4418      	add	r0, r3
 8027c90:	2300      	movs	r3, #0
 8027c92:	4288      	cmp	r0, r1
 8027c94:	d305      	bcc.n	8027ca2 <__copybits+0x40>
 8027c96:	bd70      	pop	{r4, r5, r6, pc}
 8027c98:	f853 6b04 	ldr.w	r6, [r3], #4
 8027c9c:	f845 6f04 	str.w	r6, [r5, #4]!
 8027ca0:	e7eb      	b.n	8027c7a <__copybits+0x18>
 8027ca2:	f840 3b04 	str.w	r3, [r0], #4
 8027ca6:	e7f4      	b.n	8027c92 <__copybits+0x30>

08027ca8 <__any_on>:
 8027ca8:	f100 0214 	add.w	r2, r0, #20
 8027cac:	6900      	ldr	r0, [r0, #16]
 8027cae:	114b      	asrs	r3, r1, #5
 8027cb0:	4298      	cmp	r0, r3
 8027cb2:	b510      	push	{r4, lr}
 8027cb4:	db11      	blt.n	8027cda <__any_on+0x32>
 8027cb6:	dd0a      	ble.n	8027cce <__any_on+0x26>
 8027cb8:	f011 011f 	ands.w	r1, r1, #31
 8027cbc:	d007      	beq.n	8027cce <__any_on+0x26>
 8027cbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8027cc2:	fa24 f001 	lsr.w	r0, r4, r1
 8027cc6:	fa00 f101 	lsl.w	r1, r0, r1
 8027cca:	428c      	cmp	r4, r1
 8027ccc:	d10b      	bne.n	8027ce6 <__any_on+0x3e>
 8027cce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027cd2:	4293      	cmp	r3, r2
 8027cd4:	d803      	bhi.n	8027cde <__any_on+0x36>
 8027cd6:	2000      	movs	r0, #0
 8027cd8:	bd10      	pop	{r4, pc}
 8027cda:	4603      	mov	r3, r0
 8027cdc:	e7f7      	b.n	8027cce <__any_on+0x26>
 8027cde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8027ce2:	2900      	cmp	r1, #0
 8027ce4:	d0f5      	beq.n	8027cd2 <__any_on+0x2a>
 8027ce6:	2001      	movs	r0, #1
 8027ce8:	e7f6      	b.n	8027cd8 <__any_on+0x30>

08027cea <_calloc_r>:
 8027cea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027cec:	fba1 2402 	umull	r2, r4, r1, r2
 8027cf0:	b94c      	cbnz	r4, 8027d06 <_calloc_r+0x1c>
 8027cf2:	4611      	mov	r1, r2
 8027cf4:	9201      	str	r2, [sp, #4]
 8027cf6:	f7fb fe9d 	bl	8023a34 <_malloc_r>
 8027cfa:	9a01      	ldr	r2, [sp, #4]
 8027cfc:	4605      	mov	r5, r0
 8027cfe:	b930      	cbnz	r0, 8027d0e <_calloc_r+0x24>
 8027d00:	4628      	mov	r0, r5
 8027d02:	b003      	add	sp, #12
 8027d04:	bd30      	pop	{r4, r5, pc}
 8027d06:	220c      	movs	r2, #12
 8027d08:	6002      	str	r2, [r0, #0]
 8027d0a:	2500      	movs	r5, #0
 8027d0c:	e7f8      	b.n	8027d00 <_calloc_r+0x16>
 8027d0e:	4621      	mov	r1, r4
 8027d10:	f7fb fe67 	bl	80239e2 <memset>
 8027d14:	e7f4      	b.n	8027d00 <_calloc_r+0x16>
	...

08027d18 <_free_r>:
 8027d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027d1a:	2900      	cmp	r1, #0
 8027d1c:	d044      	beq.n	8027da8 <_free_r+0x90>
 8027d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027d22:	9001      	str	r0, [sp, #4]
 8027d24:	2b00      	cmp	r3, #0
 8027d26:	f1a1 0404 	sub.w	r4, r1, #4
 8027d2a:	bfb8      	it	lt
 8027d2c:	18e4      	addlt	r4, r4, r3
 8027d2e:	f7ff fb0f 	bl	8027350 <__malloc_lock>
 8027d32:	4a1e      	ldr	r2, [pc, #120]	; (8027dac <_free_r+0x94>)
 8027d34:	9801      	ldr	r0, [sp, #4]
 8027d36:	6813      	ldr	r3, [r2, #0]
 8027d38:	b933      	cbnz	r3, 8027d48 <_free_r+0x30>
 8027d3a:	6063      	str	r3, [r4, #4]
 8027d3c:	6014      	str	r4, [r2, #0]
 8027d3e:	b003      	add	sp, #12
 8027d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027d44:	f7ff bb0a 	b.w	802735c <__malloc_unlock>
 8027d48:	42a3      	cmp	r3, r4
 8027d4a:	d908      	bls.n	8027d5e <_free_r+0x46>
 8027d4c:	6825      	ldr	r5, [r4, #0]
 8027d4e:	1961      	adds	r1, r4, r5
 8027d50:	428b      	cmp	r3, r1
 8027d52:	bf01      	itttt	eq
 8027d54:	6819      	ldreq	r1, [r3, #0]
 8027d56:	685b      	ldreq	r3, [r3, #4]
 8027d58:	1949      	addeq	r1, r1, r5
 8027d5a:	6021      	streq	r1, [r4, #0]
 8027d5c:	e7ed      	b.n	8027d3a <_free_r+0x22>
 8027d5e:	461a      	mov	r2, r3
 8027d60:	685b      	ldr	r3, [r3, #4]
 8027d62:	b10b      	cbz	r3, 8027d68 <_free_r+0x50>
 8027d64:	42a3      	cmp	r3, r4
 8027d66:	d9fa      	bls.n	8027d5e <_free_r+0x46>
 8027d68:	6811      	ldr	r1, [r2, #0]
 8027d6a:	1855      	adds	r5, r2, r1
 8027d6c:	42a5      	cmp	r5, r4
 8027d6e:	d10b      	bne.n	8027d88 <_free_r+0x70>
 8027d70:	6824      	ldr	r4, [r4, #0]
 8027d72:	4421      	add	r1, r4
 8027d74:	1854      	adds	r4, r2, r1
 8027d76:	42a3      	cmp	r3, r4
 8027d78:	6011      	str	r1, [r2, #0]
 8027d7a:	d1e0      	bne.n	8027d3e <_free_r+0x26>
 8027d7c:	681c      	ldr	r4, [r3, #0]
 8027d7e:	685b      	ldr	r3, [r3, #4]
 8027d80:	6053      	str	r3, [r2, #4]
 8027d82:	4421      	add	r1, r4
 8027d84:	6011      	str	r1, [r2, #0]
 8027d86:	e7da      	b.n	8027d3e <_free_r+0x26>
 8027d88:	d902      	bls.n	8027d90 <_free_r+0x78>
 8027d8a:	230c      	movs	r3, #12
 8027d8c:	6003      	str	r3, [r0, #0]
 8027d8e:	e7d6      	b.n	8027d3e <_free_r+0x26>
 8027d90:	6825      	ldr	r5, [r4, #0]
 8027d92:	1961      	adds	r1, r4, r5
 8027d94:	428b      	cmp	r3, r1
 8027d96:	bf04      	itt	eq
 8027d98:	6819      	ldreq	r1, [r3, #0]
 8027d9a:	685b      	ldreq	r3, [r3, #4]
 8027d9c:	6063      	str	r3, [r4, #4]
 8027d9e:	bf04      	itt	eq
 8027da0:	1949      	addeq	r1, r1, r5
 8027da2:	6021      	streq	r1, [r4, #0]
 8027da4:	6054      	str	r4, [r2, #4]
 8027da6:	e7ca      	b.n	8027d3e <_free_r+0x26>
 8027da8:	b003      	add	sp, #12
 8027daa:	bd30      	pop	{r4, r5, pc}
 8027dac:	2001ae3c 	.word	0x2001ae3c

08027db0 <__ssputs_r>:
 8027db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027db4:	688e      	ldr	r6, [r1, #8]
 8027db6:	429e      	cmp	r6, r3
 8027db8:	4682      	mov	sl, r0
 8027dba:	460c      	mov	r4, r1
 8027dbc:	4690      	mov	r8, r2
 8027dbe:	461f      	mov	r7, r3
 8027dc0:	d838      	bhi.n	8027e34 <__ssputs_r+0x84>
 8027dc2:	898a      	ldrh	r2, [r1, #12]
 8027dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027dc8:	d032      	beq.n	8027e30 <__ssputs_r+0x80>
 8027dca:	6825      	ldr	r5, [r4, #0]
 8027dcc:	6909      	ldr	r1, [r1, #16]
 8027dce:	eba5 0901 	sub.w	r9, r5, r1
 8027dd2:	6965      	ldr	r5, [r4, #20]
 8027dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027ddc:	3301      	adds	r3, #1
 8027dde:	444b      	add	r3, r9
 8027de0:	106d      	asrs	r5, r5, #1
 8027de2:	429d      	cmp	r5, r3
 8027de4:	bf38      	it	cc
 8027de6:	461d      	movcc	r5, r3
 8027de8:	0553      	lsls	r3, r2, #21
 8027dea:	d531      	bpl.n	8027e50 <__ssputs_r+0xa0>
 8027dec:	4629      	mov	r1, r5
 8027dee:	f7fb fe21 	bl	8023a34 <_malloc_r>
 8027df2:	4606      	mov	r6, r0
 8027df4:	b950      	cbnz	r0, 8027e0c <__ssputs_r+0x5c>
 8027df6:	230c      	movs	r3, #12
 8027df8:	f8ca 3000 	str.w	r3, [sl]
 8027dfc:	89a3      	ldrh	r3, [r4, #12]
 8027dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027e02:	81a3      	strh	r3, [r4, #12]
 8027e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e0c:	6921      	ldr	r1, [r4, #16]
 8027e0e:	464a      	mov	r2, r9
 8027e10:	f7fb fdbf 	bl	8023992 <memcpy>
 8027e14:	89a3      	ldrh	r3, [r4, #12]
 8027e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027e1e:	81a3      	strh	r3, [r4, #12]
 8027e20:	6126      	str	r6, [r4, #16]
 8027e22:	6165      	str	r5, [r4, #20]
 8027e24:	444e      	add	r6, r9
 8027e26:	eba5 0509 	sub.w	r5, r5, r9
 8027e2a:	6026      	str	r6, [r4, #0]
 8027e2c:	60a5      	str	r5, [r4, #8]
 8027e2e:	463e      	mov	r6, r7
 8027e30:	42be      	cmp	r6, r7
 8027e32:	d900      	bls.n	8027e36 <__ssputs_r+0x86>
 8027e34:	463e      	mov	r6, r7
 8027e36:	6820      	ldr	r0, [r4, #0]
 8027e38:	4632      	mov	r2, r6
 8027e3a:	4641      	mov	r1, r8
 8027e3c:	f7fb fdb7 	bl	80239ae <memmove>
 8027e40:	68a3      	ldr	r3, [r4, #8]
 8027e42:	1b9b      	subs	r3, r3, r6
 8027e44:	60a3      	str	r3, [r4, #8]
 8027e46:	6823      	ldr	r3, [r4, #0]
 8027e48:	4433      	add	r3, r6
 8027e4a:	6023      	str	r3, [r4, #0]
 8027e4c:	2000      	movs	r0, #0
 8027e4e:	e7db      	b.n	8027e08 <__ssputs_r+0x58>
 8027e50:	462a      	mov	r2, r5
 8027e52:	f000 ff4d 	bl	8028cf0 <_realloc_r>
 8027e56:	4606      	mov	r6, r0
 8027e58:	2800      	cmp	r0, #0
 8027e5a:	d1e1      	bne.n	8027e20 <__ssputs_r+0x70>
 8027e5c:	6921      	ldr	r1, [r4, #16]
 8027e5e:	4650      	mov	r0, sl
 8027e60:	f7ff ff5a 	bl	8027d18 <_free_r>
 8027e64:	e7c7      	b.n	8027df6 <__ssputs_r+0x46>
	...

08027e68 <_svfiprintf_r>:
 8027e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e6c:	4698      	mov	r8, r3
 8027e6e:	898b      	ldrh	r3, [r1, #12]
 8027e70:	061b      	lsls	r3, r3, #24
 8027e72:	b09d      	sub	sp, #116	; 0x74
 8027e74:	4607      	mov	r7, r0
 8027e76:	460d      	mov	r5, r1
 8027e78:	4614      	mov	r4, r2
 8027e7a:	d50e      	bpl.n	8027e9a <_svfiprintf_r+0x32>
 8027e7c:	690b      	ldr	r3, [r1, #16]
 8027e7e:	b963      	cbnz	r3, 8027e9a <_svfiprintf_r+0x32>
 8027e80:	2140      	movs	r1, #64	; 0x40
 8027e82:	f7fb fdd7 	bl	8023a34 <_malloc_r>
 8027e86:	6028      	str	r0, [r5, #0]
 8027e88:	6128      	str	r0, [r5, #16]
 8027e8a:	b920      	cbnz	r0, 8027e96 <_svfiprintf_r+0x2e>
 8027e8c:	230c      	movs	r3, #12
 8027e8e:	603b      	str	r3, [r7, #0]
 8027e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027e94:	e0d1      	b.n	802803a <_svfiprintf_r+0x1d2>
 8027e96:	2340      	movs	r3, #64	; 0x40
 8027e98:	616b      	str	r3, [r5, #20]
 8027e9a:	2300      	movs	r3, #0
 8027e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8027e9e:	2320      	movs	r3, #32
 8027ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8027ea8:	2330      	movs	r3, #48	; 0x30
 8027eaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028054 <_svfiprintf_r+0x1ec>
 8027eae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027eb2:	f04f 0901 	mov.w	r9, #1
 8027eb6:	4623      	mov	r3, r4
 8027eb8:	469a      	mov	sl, r3
 8027eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027ebe:	b10a      	cbz	r2, 8027ec4 <_svfiprintf_r+0x5c>
 8027ec0:	2a25      	cmp	r2, #37	; 0x25
 8027ec2:	d1f9      	bne.n	8027eb8 <_svfiprintf_r+0x50>
 8027ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8027ec8:	d00b      	beq.n	8027ee2 <_svfiprintf_r+0x7a>
 8027eca:	465b      	mov	r3, fp
 8027ecc:	4622      	mov	r2, r4
 8027ece:	4629      	mov	r1, r5
 8027ed0:	4638      	mov	r0, r7
 8027ed2:	f7ff ff6d 	bl	8027db0 <__ssputs_r>
 8027ed6:	3001      	adds	r0, #1
 8027ed8:	f000 80aa 	beq.w	8028030 <_svfiprintf_r+0x1c8>
 8027edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027ede:	445a      	add	r2, fp
 8027ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8027ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8027ee6:	2b00      	cmp	r3, #0
 8027ee8:	f000 80a2 	beq.w	8028030 <_svfiprintf_r+0x1c8>
 8027eec:	2300      	movs	r3, #0
 8027eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8027ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027ef6:	f10a 0a01 	add.w	sl, sl, #1
 8027efa:	9304      	str	r3, [sp, #16]
 8027efc:	9307      	str	r3, [sp, #28]
 8027efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027f02:	931a      	str	r3, [sp, #104]	; 0x68
 8027f04:	4654      	mov	r4, sl
 8027f06:	2205      	movs	r2, #5
 8027f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027f0c:	4851      	ldr	r0, [pc, #324]	; (8028054 <_svfiprintf_r+0x1ec>)
 8027f0e:	f7d8 f997 	bl	8000240 <memchr>
 8027f12:	9a04      	ldr	r2, [sp, #16]
 8027f14:	b9d8      	cbnz	r0, 8027f4e <_svfiprintf_r+0xe6>
 8027f16:	06d0      	lsls	r0, r2, #27
 8027f18:	bf44      	itt	mi
 8027f1a:	2320      	movmi	r3, #32
 8027f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027f20:	0711      	lsls	r1, r2, #28
 8027f22:	bf44      	itt	mi
 8027f24:	232b      	movmi	r3, #43	; 0x2b
 8027f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8027f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8027f30:	d015      	beq.n	8027f5e <_svfiprintf_r+0xf6>
 8027f32:	9a07      	ldr	r2, [sp, #28]
 8027f34:	4654      	mov	r4, sl
 8027f36:	2000      	movs	r0, #0
 8027f38:	f04f 0c0a 	mov.w	ip, #10
 8027f3c:	4621      	mov	r1, r4
 8027f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027f42:	3b30      	subs	r3, #48	; 0x30
 8027f44:	2b09      	cmp	r3, #9
 8027f46:	d94e      	bls.n	8027fe6 <_svfiprintf_r+0x17e>
 8027f48:	b1b0      	cbz	r0, 8027f78 <_svfiprintf_r+0x110>
 8027f4a:	9207      	str	r2, [sp, #28]
 8027f4c:	e014      	b.n	8027f78 <_svfiprintf_r+0x110>
 8027f4e:	eba0 0308 	sub.w	r3, r0, r8
 8027f52:	fa09 f303 	lsl.w	r3, r9, r3
 8027f56:	4313      	orrs	r3, r2
 8027f58:	9304      	str	r3, [sp, #16]
 8027f5a:	46a2      	mov	sl, r4
 8027f5c:	e7d2      	b.n	8027f04 <_svfiprintf_r+0x9c>
 8027f5e:	9b03      	ldr	r3, [sp, #12]
 8027f60:	1d19      	adds	r1, r3, #4
 8027f62:	681b      	ldr	r3, [r3, #0]
 8027f64:	9103      	str	r1, [sp, #12]
 8027f66:	2b00      	cmp	r3, #0
 8027f68:	bfbb      	ittet	lt
 8027f6a:	425b      	neglt	r3, r3
 8027f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8027f70:	9307      	strge	r3, [sp, #28]
 8027f72:	9307      	strlt	r3, [sp, #28]
 8027f74:	bfb8      	it	lt
 8027f76:	9204      	strlt	r2, [sp, #16]
 8027f78:	7823      	ldrb	r3, [r4, #0]
 8027f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8027f7c:	d10c      	bne.n	8027f98 <_svfiprintf_r+0x130>
 8027f7e:	7863      	ldrb	r3, [r4, #1]
 8027f80:	2b2a      	cmp	r3, #42	; 0x2a
 8027f82:	d135      	bne.n	8027ff0 <_svfiprintf_r+0x188>
 8027f84:	9b03      	ldr	r3, [sp, #12]
 8027f86:	1d1a      	adds	r2, r3, #4
 8027f88:	681b      	ldr	r3, [r3, #0]
 8027f8a:	9203      	str	r2, [sp, #12]
 8027f8c:	2b00      	cmp	r3, #0
 8027f8e:	bfb8      	it	lt
 8027f90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8027f94:	3402      	adds	r4, #2
 8027f96:	9305      	str	r3, [sp, #20]
 8027f98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028064 <_svfiprintf_r+0x1fc>
 8027f9c:	7821      	ldrb	r1, [r4, #0]
 8027f9e:	2203      	movs	r2, #3
 8027fa0:	4650      	mov	r0, sl
 8027fa2:	f7d8 f94d 	bl	8000240 <memchr>
 8027fa6:	b140      	cbz	r0, 8027fba <_svfiprintf_r+0x152>
 8027fa8:	2340      	movs	r3, #64	; 0x40
 8027faa:	eba0 000a 	sub.w	r0, r0, sl
 8027fae:	fa03 f000 	lsl.w	r0, r3, r0
 8027fb2:	9b04      	ldr	r3, [sp, #16]
 8027fb4:	4303      	orrs	r3, r0
 8027fb6:	3401      	adds	r4, #1
 8027fb8:	9304      	str	r3, [sp, #16]
 8027fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027fbe:	4826      	ldr	r0, [pc, #152]	; (8028058 <_svfiprintf_r+0x1f0>)
 8027fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027fc4:	2206      	movs	r2, #6
 8027fc6:	f7d8 f93b 	bl	8000240 <memchr>
 8027fca:	2800      	cmp	r0, #0
 8027fcc:	d038      	beq.n	8028040 <_svfiprintf_r+0x1d8>
 8027fce:	4b23      	ldr	r3, [pc, #140]	; (802805c <_svfiprintf_r+0x1f4>)
 8027fd0:	bb1b      	cbnz	r3, 802801a <_svfiprintf_r+0x1b2>
 8027fd2:	9b03      	ldr	r3, [sp, #12]
 8027fd4:	3307      	adds	r3, #7
 8027fd6:	f023 0307 	bic.w	r3, r3, #7
 8027fda:	3308      	adds	r3, #8
 8027fdc:	9303      	str	r3, [sp, #12]
 8027fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027fe0:	4433      	add	r3, r6
 8027fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8027fe4:	e767      	b.n	8027eb6 <_svfiprintf_r+0x4e>
 8027fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8027fea:	460c      	mov	r4, r1
 8027fec:	2001      	movs	r0, #1
 8027fee:	e7a5      	b.n	8027f3c <_svfiprintf_r+0xd4>
 8027ff0:	2300      	movs	r3, #0
 8027ff2:	3401      	adds	r4, #1
 8027ff4:	9305      	str	r3, [sp, #20]
 8027ff6:	4619      	mov	r1, r3
 8027ff8:	f04f 0c0a 	mov.w	ip, #10
 8027ffc:	4620      	mov	r0, r4
 8027ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028002:	3a30      	subs	r2, #48	; 0x30
 8028004:	2a09      	cmp	r2, #9
 8028006:	d903      	bls.n	8028010 <_svfiprintf_r+0x1a8>
 8028008:	2b00      	cmp	r3, #0
 802800a:	d0c5      	beq.n	8027f98 <_svfiprintf_r+0x130>
 802800c:	9105      	str	r1, [sp, #20]
 802800e:	e7c3      	b.n	8027f98 <_svfiprintf_r+0x130>
 8028010:	fb0c 2101 	mla	r1, ip, r1, r2
 8028014:	4604      	mov	r4, r0
 8028016:	2301      	movs	r3, #1
 8028018:	e7f0      	b.n	8027ffc <_svfiprintf_r+0x194>
 802801a:	ab03      	add	r3, sp, #12
 802801c:	9300      	str	r3, [sp, #0]
 802801e:	462a      	mov	r2, r5
 8028020:	4b0f      	ldr	r3, [pc, #60]	; (8028060 <_svfiprintf_r+0x1f8>)
 8028022:	a904      	add	r1, sp, #16
 8028024:	4638      	mov	r0, r7
 8028026:	f7fb fe19 	bl	8023c5c <_printf_float>
 802802a:	1c42      	adds	r2, r0, #1
 802802c:	4606      	mov	r6, r0
 802802e:	d1d6      	bne.n	8027fde <_svfiprintf_r+0x176>
 8028030:	89ab      	ldrh	r3, [r5, #12]
 8028032:	065b      	lsls	r3, r3, #25
 8028034:	f53f af2c 	bmi.w	8027e90 <_svfiprintf_r+0x28>
 8028038:	9809      	ldr	r0, [sp, #36]	; 0x24
 802803a:	b01d      	add	sp, #116	; 0x74
 802803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028040:	ab03      	add	r3, sp, #12
 8028042:	9300      	str	r3, [sp, #0]
 8028044:	462a      	mov	r2, r5
 8028046:	4b06      	ldr	r3, [pc, #24]	; (8028060 <_svfiprintf_r+0x1f8>)
 8028048:	a904      	add	r1, sp, #16
 802804a:	4638      	mov	r0, r7
 802804c:	f7fc f8aa 	bl	80241a4 <_printf_i>
 8028050:	e7eb      	b.n	802802a <_svfiprintf_r+0x1c2>
 8028052:	bf00      	nop
 8028054:	0802dc6c 	.word	0x0802dc6c
 8028058:	0802dc76 	.word	0x0802dc76
 802805c:	08023c5d 	.word	0x08023c5d
 8028060:	08027db1 	.word	0x08027db1
 8028064:	0802dc72 	.word	0x0802dc72

08028068 <_sungetc_r>:
 8028068:	b538      	push	{r3, r4, r5, lr}
 802806a:	1c4b      	adds	r3, r1, #1
 802806c:	4614      	mov	r4, r2
 802806e:	d103      	bne.n	8028078 <_sungetc_r+0x10>
 8028070:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8028074:	4628      	mov	r0, r5
 8028076:	bd38      	pop	{r3, r4, r5, pc}
 8028078:	8993      	ldrh	r3, [r2, #12]
 802807a:	f023 0320 	bic.w	r3, r3, #32
 802807e:	8193      	strh	r3, [r2, #12]
 8028080:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028082:	6852      	ldr	r2, [r2, #4]
 8028084:	b2cd      	uxtb	r5, r1
 8028086:	b18b      	cbz	r3, 80280ac <_sungetc_r+0x44>
 8028088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802808a:	4293      	cmp	r3, r2
 802808c:	dd08      	ble.n	80280a0 <_sungetc_r+0x38>
 802808e:	6823      	ldr	r3, [r4, #0]
 8028090:	1e5a      	subs	r2, r3, #1
 8028092:	6022      	str	r2, [r4, #0]
 8028094:	f803 5c01 	strb.w	r5, [r3, #-1]
 8028098:	6863      	ldr	r3, [r4, #4]
 802809a:	3301      	adds	r3, #1
 802809c:	6063      	str	r3, [r4, #4]
 802809e:	e7e9      	b.n	8028074 <_sungetc_r+0xc>
 80280a0:	4621      	mov	r1, r4
 80280a2:	f000 fcb1 	bl	8028a08 <__submore>
 80280a6:	2800      	cmp	r0, #0
 80280a8:	d0f1      	beq.n	802808e <_sungetc_r+0x26>
 80280aa:	e7e1      	b.n	8028070 <_sungetc_r+0x8>
 80280ac:	6921      	ldr	r1, [r4, #16]
 80280ae:	6823      	ldr	r3, [r4, #0]
 80280b0:	b151      	cbz	r1, 80280c8 <_sungetc_r+0x60>
 80280b2:	4299      	cmp	r1, r3
 80280b4:	d208      	bcs.n	80280c8 <_sungetc_r+0x60>
 80280b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80280ba:	42a9      	cmp	r1, r5
 80280bc:	d104      	bne.n	80280c8 <_sungetc_r+0x60>
 80280be:	3b01      	subs	r3, #1
 80280c0:	3201      	adds	r2, #1
 80280c2:	6023      	str	r3, [r4, #0]
 80280c4:	6062      	str	r2, [r4, #4]
 80280c6:	e7d5      	b.n	8028074 <_sungetc_r+0xc>
 80280c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80280cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80280d0:	6363      	str	r3, [r4, #52]	; 0x34
 80280d2:	2303      	movs	r3, #3
 80280d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80280d6:	4623      	mov	r3, r4
 80280d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80280dc:	6023      	str	r3, [r4, #0]
 80280de:	2301      	movs	r3, #1
 80280e0:	e7dc      	b.n	802809c <_sungetc_r+0x34>

080280e2 <__ssrefill_r>:
 80280e2:	b510      	push	{r4, lr}
 80280e4:	460c      	mov	r4, r1
 80280e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80280e8:	b169      	cbz	r1, 8028106 <__ssrefill_r+0x24>
 80280ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80280ee:	4299      	cmp	r1, r3
 80280f0:	d001      	beq.n	80280f6 <__ssrefill_r+0x14>
 80280f2:	f7ff fe11 	bl	8027d18 <_free_r>
 80280f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80280f8:	6063      	str	r3, [r4, #4]
 80280fa:	2000      	movs	r0, #0
 80280fc:	6360      	str	r0, [r4, #52]	; 0x34
 80280fe:	b113      	cbz	r3, 8028106 <__ssrefill_r+0x24>
 8028100:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028102:	6023      	str	r3, [r4, #0]
 8028104:	bd10      	pop	{r4, pc}
 8028106:	6923      	ldr	r3, [r4, #16]
 8028108:	6023      	str	r3, [r4, #0]
 802810a:	2300      	movs	r3, #0
 802810c:	6063      	str	r3, [r4, #4]
 802810e:	89a3      	ldrh	r3, [r4, #12]
 8028110:	f043 0320 	orr.w	r3, r3, #32
 8028114:	81a3      	strh	r3, [r4, #12]
 8028116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802811a:	e7f3      	b.n	8028104 <__ssrefill_r+0x22>

0802811c <__ssvfiscanf_r>:
 802811c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028120:	460c      	mov	r4, r1
 8028122:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8028126:	2100      	movs	r1, #0
 8028128:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802812c:	49a6      	ldr	r1, [pc, #664]	; (80283c8 <__ssvfiscanf_r+0x2ac>)
 802812e:	91a0      	str	r1, [sp, #640]	; 0x280
 8028130:	f10d 0804 	add.w	r8, sp, #4
 8028134:	49a5      	ldr	r1, [pc, #660]	; (80283cc <__ssvfiscanf_r+0x2b0>)
 8028136:	4fa6      	ldr	r7, [pc, #664]	; (80283d0 <__ssvfiscanf_r+0x2b4>)
 8028138:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80283d4 <__ssvfiscanf_r+0x2b8>
 802813c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8028140:	4606      	mov	r6, r0
 8028142:	91a1      	str	r1, [sp, #644]	; 0x284
 8028144:	9300      	str	r3, [sp, #0]
 8028146:	7813      	ldrb	r3, [r2, #0]
 8028148:	2b00      	cmp	r3, #0
 802814a:	f000 815a 	beq.w	8028402 <__ssvfiscanf_r+0x2e6>
 802814e:	5dd9      	ldrb	r1, [r3, r7]
 8028150:	f011 0108 	ands.w	r1, r1, #8
 8028154:	f102 0501 	add.w	r5, r2, #1
 8028158:	d019      	beq.n	802818e <__ssvfiscanf_r+0x72>
 802815a:	6863      	ldr	r3, [r4, #4]
 802815c:	2b00      	cmp	r3, #0
 802815e:	dd0f      	ble.n	8028180 <__ssvfiscanf_r+0x64>
 8028160:	6823      	ldr	r3, [r4, #0]
 8028162:	781a      	ldrb	r2, [r3, #0]
 8028164:	5cba      	ldrb	r2, [r7, r2]
 8028166:	0712      	lsls	r2, r2, #28
 8028168:	d401      	bmi.n	802816e <__ssvfiscanf_r+0x52>
 802816a:	462a      	mov	r2, r5
 802816c:	e7eb      	b.n	8028146 <__ssvfiscanf_r+0x2a>
 802816e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028170:	3201      	adds	r2, #1
 8028172:	9245      	str	r2, [sp, #276]	; 0x114
 8028174:	6862      	ldr	r2, [r4, #4]
 8028176:	3301      	adds	r3, #1
 8028178:	3a01      	subs	r2, #1
 802817a:	6062      	str	r2, [r4, #4]
 802817c:	6023      	str	r3, [r4, #0]
 802817e:	e7ec      	b.n	802815a <__ssvfiscanf_r+0x3e>
 8028180:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028182:	4621      	mov	r1, r4
 8028184:	4630      	mov	r0, r6
 8028186:	4798      	blx	r3
 8028188:	2800      	cmp	r0, #0
 802818a:	d0e9      	beq.n	8028160 <__ssvfiscanf_r+0x44>
 802818c:	e7ed      	b.n	802816a <__ssvfiscanf_r+0x4e>
 802818e:	2b25      	cmp	r3, #37	; 0x25
 8028190:	d012      	beq.n	80281b8 <__ssvfiscanf_r+0x9c>
 8028192:	469a      	mov	sl, r3
 8028194:	6863      	ldr	r3, [r4, #4]
 8028196:	2b00      	cmp	r3, #0
 8028198:	f340 8091 	ble.w	80282be <__ssvfiscanf_r+0x1a2>
 802819c:	6822      	ldr	r2, [r4, #0]
 802819e:	7813      	ldrb	r3, [r2, #0]
 80281a0:	4553      	cmp	r3, sl
 80281a2:	f040 812e 	bne.w	8028402 <__ssvfiscanf_r+0x2e6>
 80281a6:	6863      	ldr	r3, [r4, #4]
 80281a8:	3b01      	subs	r3, #1
 80281aa:	6063      	str	r3, [r4, #4]
 80281ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80281ae:	3201      	adds	r2, #1
 80281b0:	3301      	adds	r3, #1
 80281b2:	6022      	str	r2, [r4, #0]
 80281b4:	9345      	str	r3, [sp, #276]	; 0x114
 80281b6:	e7d8      	b.n	802816a <__ssvfiscanf_r+0x4e>
 80281b8:	9141      	str	r1, [sp, #260]	; 0x104
 80281ba:	9143      	str	r1, [sp, #268]	; 0x10c
 80281bc:	7853      	ldrb	r3, [r2, #1]
 80281be:	2b2a      	cmp	r3, #42	; 0x2a
 80281c0:	bf02      	ittt	eq
 80281c2:	2310      	moveq	r3, #16
 80281c4:	1c95      	addeq	r5, r2, #2
 80281c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80281c8:	220a      	movs	r2, #10
 80281ca:	46aa      	mov	sl, r5
 80281cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80281d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80281d4:	2b09      	cmp	r3, #9
 80281d6:	d91d      	bls.n	8028214 <__ssvfiscanf_r+0xf8>
 80281d8:	487e      	ldr	r0, [pc, #504]	; (80283d4 <__ssvfiscanf_r+0x2b8>)
 80281da:	2203      	movs	r2, #3
 80281dc:	f7d8 f830 	bl	8000240 <memchr>
 80281e0:	b140      	cbz	r0, 80281f4 <__ssvfiscanf_r+0xd8>
 80281e2:	2301      	movs	r3, #1
 80281e4:	eba0 0009 	sub.w	r0, r0, r9
 80281e8:	fa03 f000 	lsl.w	r0, r3, r0
 80281ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80281ee:	4318      	orrs	r0, r3
 80281f0:	9041      	str	r0, [sp, #260]	; 0x104
 80281f2:	4655      	mov	r5, sl
 80281f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80281f8:	2b78      	cmp	r3, #120	; 0x78
 80281fa:	d806      	bhi.n	802820a <__ssvfiscanf_r+0xee>
 80281fc:	2b57      	cmp	r3, #87	; 0x57
 80281fe:	d810      	bhi.n	8028222 <__ssvfiscanf_r+0x106>
 8028200:	2b25      	cmp	r3, #37	; 0x25
 8028202:	d0c6      	beq.n	8028192 <__ssvfiscanf_r+0x76>
 8028204:	d856      	bhi.n	80282b4 <__ssvfiscanf_r+0x198>
 8028206:	2b00      	cmp	r3, #0
 8028208:	d064      	beq.n	80282d4 <__ssvfiscanf_r+0x1b8>
 802820a:	2303      	movs	r3, #3
 802820c:	9347      	str	r3, [sp, #284]	; 0x11c
 802820e:	230a      	movs	r3, #10
 8028210:	9342      	str	r3, [sp, #264]	; 0x108
 8028212:	e071      	b.n	80282f8 <__ssvfiscanf_r+0x1dc>
 8028214:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8028216:	fb02 1103 	mla	r1, r2, r3, r1
 802821a:	3930      	subs	r1, #48	; 0x30
 802821c:	9143      	str	r1, [sp, #268]	; 0x10c
 802821e:	4655      	mov	r5, sl
 8028220:	e7d3      	b.n	80281ca <__ssvfiscanf_r+0xae>
 8028222:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8028226:	2a20      	cmp	r2, #32
 8028228:	d8ef      	bhi.n	802820a <__ssvfiscanf_r+0xee>
 802822a:	a101      	add	r1, pc, #4	; (adr r1, 8028230 <__ssvfiscanf_r+0x114>)
 802822c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8028230:	080282e3 	.word	0x080282e3
 8028234:	0802820b 	.word	0x0802820b
 8028238:	0802820b 	.word	0x0802820b
 802823c:	08028341 	.word	0x08028341
 8028240:	0802820b 	.word	0x0802820b
 8028244:	0802820b 	.word	0x0802820b
 8028248:	0802820b 	.word	0x0802820b
 802824c:	0802820b 	.word	0x0802820b
 8028250:	0802820b 	.word	0x0802820b
 8028254:	0802820b 	.word	0x0802820b
 8028258:	0802820b 	.word	0x0802820b
 802825c:	08028357 	.word	0x08028357
 8028260:	0802832d 	.word	0x0802832d
 8028264:	080282bb 	.word	0x080282bb
 8028268:	080282bb 	.word	0x080282bb
 802826c:	080282bb 	.word	0x080282bb
 8028270:	0802820b 	.word	0x0802820b
 8028274:	08028331 	.word	0x08028331
 8028278:	0802820b 	.word	0x0802820b
 802827c:	0802820b 	.word	0x0802820b
 8028280:	0802820b 	.word	0x0802820b
 8028284:	0802820b 	.word	0x0802820b
 8028288:	08028367 	.word	0x08028367
 802828c:	08028339 	.word	0x08028339
 8028290:	080282db 	.word	0x080282db
 8028294:	0802820b 	.word	0x0802820b
 8028298:	0802820b 	.word	0x0802820b
 802829c:	08028363 	.word	0x08028363
 80282a0:	0802820b 	.word	0x0802820b
 80282a4:	0802832d 	.word	0x0802832d
 80282a8:	0802820b 	.word	0x0802820b
 80282ac:	0802820b 	.word	0x0802820b
 80282b0:	080282e3 	.word	0x080282e3
 80282b4:	3b45      	subs	r3, #69	; 0x45
 80282b6:	2b02      	cmp	r3, #2
 80282b8:	d8a7      	bhi.n	802820a <__ssvfiscanf_r+0xee>
 80282ba:	2305      	movs	r3, #5
 80282bc:	e01b      	b.n	80282f6 <__ssvfiscanf_r+0x1da>
 80282be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80282c0:	4621      	mov	r1, r4
 80282c2:	4630      	mov	r0, r6
 80282c4:	4798      	blx	r3
 80282c6:	2800      	cmp	r0, #0
 80282c8:	f43f af68 	beq.w	802819c <__ssvfiscanf_r+0x80>
 80282cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80282ce:	2800      	cmp	r0, #0
 80282d0:	f040 808d 	bne.w	80283ee <__ssvfiscanf_r+0x2d2>
 80282d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80282d8:	e08f      	b.n	80283fa <__ssvfiscanf_r+0x2de>
 80282da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80282dc:	f042 0220 	orr.w	r2, r2, #32
 80282e0:	9241      	str	r2, [sp, #260]	; 0x104
 80282e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80282e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80282e8:	9241      	str	r2, [sp, #260]	; 0x104
 80282ea:	2210      	movs	r2, #16
 80282ec:	2b6f      	cmp	r3, #111	; 0x6f
 80282ee:	9242      	str	r2, [sp, #264]	; 0x108
 80282f0:	bf34      	ite	cc
 80282f2:	2303      	movcc	r3, #3
 80282f4:	2304      	movcs	r3, #4
 80282f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80282f8:	6863      	ldr	r3, [r4, #4]
 80282fa:	2b00      	cmp	r3, #0
 80282fc:	dd42      	ble.n	8028384 <__ssvfiscanf_r+0x268>
 80282fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028300:	0659      	lsls	r1, r3, #25
 8028302:	d404      	bmi.n	802830e <__ssvfiscanf_r+0x1f2>
 8028304:	6823      	ldr	r3, [r4, #0]
 8028306:	781a      	ldrb	r2, [r3, #0]
 8028308:	5cba      	ldrb	r2, [r7, r2]
 802830a:	0712      	lsls	r2, r2, #28
 802830c:	d441      	bmi.n	8028392 <__ssvfiscanf_r+0x276>
 802830e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8028310:	2b02      	cmp	r3, #2
 8028312:	dc50      	bgt.n	80283b6 <__ssvfiscanf_r+0x29a>
 8028314:	466b      	mov	r3, sp
 8028316:	4622      	mov	r2, r4
 8028318:	a941      	add	r1, sp, #260	; 0x104
 802831a:	4630      	mov	r0, r6
 802831c:	f000 f9d0 	bl	80286c0 <_scanf_chars>
 8028320:	2801      	cmp	r0, #1
 8028322:	d06e      	beq.n	8028402 <__ssvfiscanf_r+0x2e6>
 8028324:	2802      	cmp	r0, #2
 8028326:	f47f af20 	bne.w	802816a <__ssvfiscanf_r+0x4e>
 802832a:	e7cf      	b.n	80282cc <__ssvfiscanf_r+0x1b0>
 802832c:	220a      	movs	r2, #10
 802832e:	e7dd      	b.n	80282ec <__ssvfiscanf_r+0x1d0>
 8028330:	2300      	movs	r3, #0
 8028332:	9342      	str	r3, [sp, #264]	; 0x108
 8028334:	2303      	movs	r3, #3
 8028336:	e7de      	b.n	80282f6 <__ssvfiscanf_r+0x1da>
 8028338:	2308      	movs	r3, #8
 802833a:	9342      	str	r3, [sp, #264]	; 0x108
 802833c:	2304      	movs	r3, #4
 802833e:	e7da      	b.n	80282f6 <__ssvfiscanf_r+0x1da>
 8028340:	4629      	mov	r1, r5
 8028342:	4640      	mov	r0, r8
 8028344:	f000 fb28 	bl	8028998 <__sccl>
 8028348:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802834a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802834e:	9341      	str	r3, [sp, #260]	; 0x104
 8028350:	4605      	mov	r5, r0
 8028352:	2301      	movs	r3, #1
 8028354:	e7cf      	b.n	80282f6 <__ssvfiscanf_r+0x1da>
 8028356:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802835c:	9341      	str	r3, [sp, #260]	; 0x104
 802835e:	2300      	movs	r3, #0
 8028360:	e7c9      	b.n	80282f6 <__ssvfiscanf_r+0x1da>
 8028362:	2302      	movs	r3, #2
 8028364:	e7c7      	b.n	80282f6 <__ssvfiscanf_r+0x1da>
 8028366:	9841      	ldr	r0, [sp, #260]	; 0x104
 8028368:	06c3      	lsls	r3, r0, #27
 802836a:	f53f aefe 	bmi.w	802816a <__ssvfiscanf_r+0x4e>
 802836e:	9b00      	ldr	r3, [sp, #0]
 8028370:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028372:	1d19      	adds	r1, r3, #4
 8028374:	9100      	str	r1, [sp, #0]
 8028376:	681b      	ldr	r3, [r3, #0]
 8028378:	f010 0f01 	tst.w	r0, #1
 802837c:	bf14      	ite	ne
 802837e:	801a      	strhne	r2, [r3, #0]
 8028380:	601a      	streq	r2, [r3, #0]
 8028382:	e6f2      	b.n	802816a <__ssvfiscanf_r+0x4e>
 8028384:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028386:	4621      	mov	r1, r4
 8028388:	4630      	mov	r0, r6
 802838a:	4798      	blx	r3
 802838c:	2800      	cmp	r0, #0
 802838e:	d0b6      	beq.n	80282fe <__ssvfiscanf_r+0x1e2>
 8028390:	e79c      	b.n	80282cc <__ssvfiscanf_r+0x1b0>
 8028392:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028394:	3201      	adds	r2, #1
 8028396:	9245      	str	r2, [sp, #276]	; 0x114
 8028398:	6862      	ldr	r2, [r4, #4]
 802839a:	3a01      	subs	r2, #1
 802839c:	2a00      	cmp	r2, #0
 802839e:	6062      	str	r2, [r4, #4]
 80283a0:	dd02      	ble.n	80283a8 <__ssvfiscanf_r+0x28c>
 80283a2:	3301      	adds	r3, #1
 80283a4:	6023      	str	r3, [r4, #0]
 80283a6:	e7ad      	b.n	8028304 <__ssvfiscanf_r+0x1e8>
 80283a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80283aa:	4621      	mov	r1, r4
 80283ac:	4630      	mov	r0, r6
 80283ae:	4798      	blx	r3
 80283b0:	2800      	cmp	r0, #0
 80283b2:	d0a7      	beq.n	8028304 <__ssvfiscanf_r+0x1e8>
 80283b4:	e78a      	b.n	80282cc <__ssvfiscanf_r+0x1b0>
 80283b6:	2b04      	cmp	r3, #4
 80283b8:	dc0e      	bgt.n	80283d8 <__ssvfiscanf_r+0x2bc>
 80283ba:	466b      	mov	r3, sp
 80283bc:	4622      	mov	r2, r4
 80283be:	a941      	add	r1, sp, #260	; 0x104
 80283c0:	4630      	mov	r0, r6
 80283c2:	f000 f9d7 	bl	8028774 <_scanf_i>
 80283c6:	e7ab      	b.n	8028320 <__ssvfiscanf_r+0x204>
 80283c8:	08028069 	.word	0x08028069
 80283cc:	080280e3 	.word	0x080280e3
 80283d0:	0802d779 	.word	0x0802d779
 80283d4:	0802dc72 	.word	0x0802dc72
 80283d8:	4b0b      	ldr	r3, [pc, #44]	; (8028408 <__ssvfiscanf_r+0x2ec>)
 80283da:	2b00      	cmp	r3, #0
 80283dc:	f43f aec5 	beq.w	802816a <__ssvfiscanf_r+0x4e>
 80283e0:	466b      	mov	r3, sp
 80283e2:	4622      	mov	r2, r4
 80283e4:	a941      	add	r1, sp, #260	; 0x104
 80283e6:	4630      	mov	r0, r6
 80283e8:	f7fc f802 	bl	80243f0 <_scanf_float>
 80283ec:	e798      	b.n	8028320 <__ssvfiscanf_r+0x204>
 80283ee:	89a3      	ldrh	r3, [r4, #12]
 80283f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80283f4:	bf18      	it	ne
 80283f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80283fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80283fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028402:	9844      	ldr	r0, [sp, #272]	; 0x110
 8028404:	e7f9      	b.n	80283fa <__ssvfiscanf_r+0x2de>
 8028406:	bf00      	nop
 8028408:	080243f1 	.word	0x080243f1

0802840c <__sfputc_r>:
 802840c:	6893      	ldr	r3, [r2, #8]
 802840e:	3b01      	subs	r3, #1
 8028410:	2b00      	cmp	r3, #0
 8028412:	b410      	push	{r4}
 8028414:	6093      	str	r3, [r2, #8]
 8028416:	da08      	bge.n	802842a <__sfputc_r+0x1e>
 8028418:	6994      	ldr	r4, [r2, #24]
 802841a:	42a3      	cmp	r3, r4
 802841c:	db01      	blt.n	8028422 <__sfputc_r+0x16>
 802841e:	290a      	cmp	r1, #10
 8028420:	d103      	bne.n	802842a <__sfputc_r+0x1e>
 8028422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028426:	f000 bb29 	b.w	8028a7c <__swbuf_r>
 802842a:	6813      	ldr	r3, [r2, #0]
 802842c:	1c58      	adds	r0, r3, #1
 802842e:	6010      	str	r0, [r2, #0]
 8028430:	7019      	strb	r1, [r3, #0]
 8028432:	4608      	mov	r0, r1
 8028434:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028438:	4770      	bx	lr

0802843a <__sfputs_r>:
 802843a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802843c:	4606      	mov	r6, r0
 802843e:	460f      	mov	r7, r1
 8028440:	4614      	mov	r4, r2
 8028442:	18d5      	adds	r5, r2, r3
 8028444:	42ac      	cmp	r4, r5
 8028446:	d101      	bne.n	802844c <__sfputs_r+0x12>
 8028448:	2000      	movs	r0, #0
 802844a:	e007      	b.n	802845c <__sfputs_r+0x22>
 802844c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028450:	463a      	mov	r2, r7
 8028452:	4630      	mov	r0, r6
 8028454:	f7ff ffda 	bl	802840c <__sfputc_r>
 8028458:	1c43      	adds	r3, r0, #1
 802845a:	d1f3      	bne.n	8028444 <__sfputs_r+0xa>
 802845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028460 <_vfiprintf_r>:
 8028460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028464:	460d      	mov	r5, r1
 8028466:	b09d      	sub	sp, #116	; 0x74
 8028468:	4614      	mov	r4, r2
 802846a:	4698      	mov	r8, r3
 802846c:	4606      	mov	r6, r0
 802846e:	b118      	cbz	r0, 8028478 <_vfiprintf_r+0x18>
 8028470:	6983      	ldr	r3, [r0, #24]
 8028472:	b90b      	cbnz	r3, 8028478 <_vfiprintf_r+0x18>
 8028474:	f7fb f9b8 	bl	80237e8 <__sinit>
 8028478:	4b89      	ldr	r3, [pc, #548]	; (80286a0 <_vfiprintf_r+0x240>)
 802847a:	429d      	cmp	r5, r3
 802847c:	d11b      	bne.n	80284b6 <_vfiprintf_r+0x56>
 802847e:	6875      	ldr	r5, [r6, #4]
 8028480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028482:	07d9      	lsls	r1, r3, #31
 8028484:	d405      	bmi.n	8028492 <_vfiprintf_r+0x32>
 8028486:	89ab      	ldrh	r3, [r5, #12]
 8028488:	059a      	lsls	r2, r3, #22
 802848a:	d402      	bmi.n	8028492 <_vfiprintf_r+0x32>
 802848c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802848e:	f7fb fa6e 	bl	802396e <__retarget_lock_acquire_recursive>
 8028492:	89ab      	ldrh	r3, [r5, #12]
 8028494:	071b      	lsls	r3, r3, #28
 8028496:	d501      	bpl.n	802849c <_vfiprintf_r+0x3c>
 8028498:	692b      	ldr	r3, [r5, #16]
 802849a:	b9eb      	cbnz	r3, 80284d8 <_vfiprintf_r+0x78>
 802849c:	4629      	mov	r1, r5
 802849e:	4630      	mov	r0, r6
 80284a0:	f000 fb4c 	bl	8028b3c <__swsetup_r>
 80284a4:	b1c0      	cbz	r0, 80284d8 <_vfiprintf_r+0x78>
 80284a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80284a8:	07dc      	lsls	r4, r3, #31
 80284aa:	d50e      	bpl.n	80284ca <_vfiprintf_r+0x6a>
 80284ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80284b0:	b01d      	add	sp, #116	; 0x74
 80284b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80284b6:	4b7b      	ldr	r3, [pc, #492]	; (80286a4 <_vfiprintf_r+0x244>)
 80284b8:	429d      	cmp	r5, r3
 80284ba:	d101      	bne.n	80284c0 <_vfiprintf_r+0x60>
 80284bc:	68b5      	ldr	r5, [r6, #8]
 80284be:	e7df      	b.n	8028480 <_vfiprintf_r+0x20>
 80284c0:	4b79      	ldr	r3, [pc, #484]	; (80286a8 <_vfiprintf_r+0x248>)
 80284c2:	429d      	cmp	r5, r3
 80284c4:	bf08      	it	eq
 80284c6:	68f5      	ldreq	r5, [r6, #12]
 80284c8:	e7da      	b.n	8028480 <_vfiprintf_r+0x20>
 80284ca:	89ab      	ldrh	r3, [r5, #12]
 80284cc:	0598      	lsls	r0, r3, #22
 80284ce:	d4ed      	bmi.n	80284ac <_vfiprintf_r+0x4c>
 80284d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80284d2:	f7fb fa4d 	bl	8023970 <__retarget_lock_release_recursive>
 80284d6:	e7e9      	b.n	80284ac <_vfiprintf_r+0x4c>
 80284d8:	2300      	movs	r3, #0
 80284da:	9309      	str	r3, [sp, #36]	; 0x24
 80284dc:	2320      	movs	r3, #32
 80284de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80284e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80284e6:	2330      	movs	r3, #48	; 0x30
 80284e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80286ac <_vfiprintf_r+0x24c>
 80284ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80284f0:	f04f 0901 	mov.w	r9, #1
 80284f4:	4623      	mov	r3, r4
 80284f6:	469a      	mov	sl, r3
 80284f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80284fc:	b10a      	cbz	r2, 8028502 <_vfiprintf_r+0xa2>
 80284fe:	2a25      	cmp	r2, #37	; 0x25
 8028500:	d1f9      	bne.n	80284f6 <_vfiprintf_r+0x96>
 8028502:	ebba 0b04 	subs.w	fp, sl, r4
 8028506:	d00b      	beq.n	8028520 <_vfiprintf_r+0xc0>
 8028508:	465b      	mov	r3, fp
 802850a:	4622      	mov	r2, r4
 802850c:	4629      	mov	r1, r5
 802850e:	4630      	mov	r0, r6
 8028510:	f7ff ff93 	bl	802843a <__sfputs_r>
 8028514:	3001      	adds	r0, #1
 8028516:	f000 80aa 	beq.w	802866e <_vfiprintf_r+0x20e>
 802851a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802851c:	445a      	add	r2, fp
 802851e:	9209      	str	r2, [sp, #36]	; 0x24
 8028520:	f89a 3000 	ldrb.w	r3, [sl]
 8028524:	2b00      	cmp	r3, #0
 8028526:	f000 80a2 	beq.w	802866e <_vfiprintf_r+0x20e>
 802852a:	2300      	movs	r3, #0
 802852c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8028530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028534:	f10a 0a01 	add.w	sl, sl, #1
 8028538:	9304      	str	r3, [sp, #16]
 802853a:	9307      	str	r3, [sp, #28]
 802853c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028540:	931a      	str	r3, [sp, #104]	; 0x68
 8028542:	4654      	mov	r4, sl
 8028544:	2205      	movs	r2, #5
 8028546:	f814 1b01 	ldrb.w	r1, [r4], #1
 802854a:	4858      	ldr	r0, [pc, #352]	; (80286ac <_vfiprintf_r+0x24c>)
 802854c:	f7d7 fe78 	bl	8000240 <memchr>
 8028550:	9a04      	ldr	r2, [sp, #16]
 8028552:	b9d8      	cbnz	r0, 802858c <_vfiprintf_r+0x12c>
 8028554:	06d1      	lsls	r1, r2, #27
 8028556:	bf44      	itt	mi
 8028558:	2320      	movmi	r3, #32
 802855a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802855e:	0713      	lsls	r3, r2, #28
 8028560:	bf44      	itt	mi
 8028562:	232b      	movmi	r3, #43	; 0x2b
 8028564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028568:	f89a 3000 	ldrb.w	r3, [sl]
 802856c:	2b2a      	cmp	r3, #42	; 0x2a
 802856e:	d015      	beq.n	802859c <_vfiprintf_r+0x13c>
 8028570:	9a07      	ldr	r2, [sp, #28]
 8028572:	4654      	mov	r4, sl
 8028574:	2000      	movs	r0, #0
 8028576:	f04f 0c0a 	mov.w	ip, #10
 802857a:	4621      	mov	r1, r4
 802857c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028580:	3b30      	subs	r3, #48	; 0x30
 8028582:	2b09      	cmp	r3, #9
 8028584:	d94e      	bls.n	8028624 <_vfiprintf_r+0x1c4>
 8028586:	b1b0      	cbz	r0, 80285b6 <_vfiprintf_r+0x156>
 8028588:	9207      	str	r2, [sp, #28]
 802858a:	e014      	b.n	80285b6 <_vfiprintf_r+0x156>
 802858c:	eba0 0308 	sub.w	r3, r0, r8
 8028590:	fa09 f303 	lsl.w	r3, r9, r3
 8028594:	4313      	orrs	r3, r2
 8028596:	9304      	str	r3, [sp, #16]
 8028598:	46a2      	mov	sl, r4
 802859a:	e7d2      	b.n	8028542 <_vfiprintf_r+0xe2>
 802859c:	9b03      	ldr	r3, [sp, #12]
 802859e:	1d19      	adds	r1, r3, #4
 80285a0:	681b      	ldr	r3, [r3, #0]
 80285a2:	9103      	str	r1, [sp, #12]
 80285a4:	2b00      	cmp	r3, #0
 80285a6:	bfbb      	ittet	lt
 80285a8:	425b      	neglt	r3, r3
 80285aa:	f042 0202 	orrlt.w	r2, r2, #2
 80285ae:	9307      	strge	r3, [sp, #28]
 80285b0:	9307      	strlt	r3, [sp, #28]
 80285b2:	bfb8      	it	lt
 80285b4:	9204      	strlt	r2, [sp, #16]
 80285b6:	7823      	ldrb	r3, [r4, #0]
 80285b8:	2b2e      	cmp	r3, #46	; 0x2e
 80285ba:	d10c      	bne.n	80285d6 <_vfiprintf_r+0x176>
 80285bc:	7863      	ldrb	r3, [r4, #1]
 80285be:	2b2a      	cmp	r3, #42	; 0x2a
 80285c0:	d135      	bne.n	802862e <_vfiprintf_r+0x1ce>
 80285c2:	9b03      	ldr	r3, [sp, #12]
 80285c4:	1d1a      	adds	r2, r3, #4
 80285c6:	681b      	ldr	r3, [r3, #0]
 80285c8:	9203      	str	r2, [sp, #12]
 80285ca:	2b00      	cmp	r3, #0
 80285cc:	bfb8      	it	lt
 80285ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80285d2:	3402      	adds	r4, #2
 80285d4:	9305      	str	r3, [sp, #20]
 80285d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80286bc <_vfiprintf_r+0x25c>
 80285da:	7821      	ldrb	r1, [r4, #0]
 80285dc:	2203      	movs	r2, #3
 80285de:	4650      	mov	r0, sl
 80285e0:	f7d7 fe2e 	bl	8000240 <memchr>
 80285e4:	b140      	cbz	r0, 80285f8 <_vfiprintf_r+0x198>
 80285e6:	2340      	movs	r3, #64	; 0x40
 80285e8:	eba0 000a 	sub.w	r0, r0, sl
 80285ec:	fa03 f000 	lsl.w	r0, r3, r0
 80285f0:	9b04      	ldr	r3, [sp, #16]
 80285f2:	4303      	orrs	r3, r0
 80285f4:	3401      	adds	r4, #1
 80285f6:	9304      	str	r3, [sp, #16]
 80285f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80285fc:	482c      	ldr	r0, [pc, #176]	; (80286b0 <_vfiprintf_r+0x250>)
 80285fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028602:	2206      	movs	r2, #6
 8028604:	f7d7 fe1c 	bl	8000240 <memchr>
 8028608:	2800      	cmp	r0, #0
 802860a:	d03f      	beq.n	802868c <_vfiprintf_r+0x22c>
 802860c:	4b29      	ldr	r3, [pc, #164]	; (80286b4 <_vfiprintf_r+0x254>)
 802860e:	bb1b      	cbnz	r3, 8028658 <_vfiprintf_r+0x1f8>
 8028610:	9b03      	ldr	r3, [sp, #12]
 8028612:	3307      	adds	r3, #7
 8028614:	f023 0307 	bic.w	r3, r3, #7
 8028618:	3308      	adds	r3, #8
 802861a:	9303      	str	r3, [sp, #12]
 802861c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802861e:	443b      	add	r3, r7
 8028620:	9309      	str	r3, [sp, #36]	; 0x24
 8028622:	e767      	b.n	80284f4 <_vfiprintf_r+0x94>
 8028624:	fb0c 3202 	mla	r2, ip, r2, r3
 8028628:	460c      	mov	r4, r1
 802862a:	2001      	movs	r0, #1
 802862c:	e7a5      	b.n	802857a <_vfiprintf_r+0x11a>
 802862e:	2300      	movs	r3, #0
 8028630:	3401      	adds	r4, #1
 8028632:	9305      	str	r3, [sp, #20]
 8028634:	4619      	mov	r1, r3
 8028636:	f04f 0c0a 	mov.w	ip, #10
 802863a:	4620      	mov	r0, r4
 802863c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028640:	3a30      	subs	r2, #48	; 0x30
 8028642:	2a09      	cmp	r2, #9
 8028644:	d903      	bls.n	802864e <_vfiprintf_r+0x1ee>
 8028646:	2b00      	cmp	r3, #0
 8028648:	d0c5      	beq.n	80285d6 <_vfiprintf_r+0x176>
 802864a:	9105      	str	r1, [sp, #20]
 802864c:	e7c3      	b.n	80285d6 <_vfiprintf_r+0x176>
 802864e:	fb0c 2101 	mla	r1, ip, r1, r2
 8028652:	4604      	mov	r4, r0
 8028654:	2301      	movs	r3, #1
 8028656:	e7f0      	b.n	802863a <_vfiprintf_r+0x1da>
 8028658:	ab03      	add	r3, sp, #12
 802865a:	9300      	str	r3, [sp, #0]
 802865c:	462a      	mov	r2, r5
 802865e:	4b16      	ldr	r3, [pc, #88]	; (80286b8 <_vfiprintf_r+0x258>)
 8028660:	a904      	add	r1, sp, #16
 8028662:	4630      	mov	r0, r6
 8028664:	f7fb fafa 	bl	8023c5c <_printf_float>
 8028668:	4607      	mov	r7, r0
 802866a:	1c78      	adds	r0, r7, #1
 802866c:	d1d6      	bne.n	802861c <_vfiprintf_r+0x1bc>
 802866e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028670:	07d9      	lsls	r1, r3, #31
 8028672:	d405      	bmi.n	8028680 <_vfiprintf_r+0x220>
 8028674:	89ab      	ldrh	r3, [r5, #12]
 8028676:	059a      	lsls	r2, r3, #22
 8028678:	d402      	bmi.n	8028680 <_vfiprintf_r+0x220>
 802867a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802867c:	f7fb f978 	bl	8023970 <__retarget_lock_release_recursive>
 8028680:	89ab      	ldrh	r3, [r5, #12]
 8028682:	065b      	lsls	r3, r3, #25
 8028684:	f53f af12 	bmi.w	80284ac <_vfiprintf_r+0x4c>
 8028688:	9809      	ldr	r0, [sp, #36]	; 0x24
 802868a:	e711      	b.n	80284b0 <_vfiprintf_r+0x50>
 802868c:	ab03      	add	r3, sp, #12
 802868e:	9300      	str	r3, [sp, #0]
 8028690:	462a      	mov	r2, r5
 8028692:	4b09      	ldr	r3, [pc, #36]	; (80286b8 <_vfiprintf_r+0x258>)
 8028694:	a904      	add	r1, sp, #16
 8028696:	4630      	mov	r0, r6
 8028698:	f7fb fd84 	bl	80241a4 <_printf_i>
 802869c:	e7e4      	b.n	8028668 <_vfiprintf_r+0x208>
 802869e:	bf00      	nop
 80286a0:	0802d89c 	.word	0x0802d89c
 80286a4:	0802d8bc 	.word	0x0802d8bc
 80286a8:	0802d87c 	.word	0x0802d87c
 80286ac:	0802dc6c 	.word	0x0802dc6c
 80286b0:	0802dc76 	.word	0x0802dc76
 80286b4:	08023c5d 	.word	0x08023c5d
 80286b8:	0802843b 	.word	0x0802843b
 80286bc:	0802dc72 	.word	0x0802dc72

080286c0 <_scanf_chars>:
 80286c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80286c4:	4615      	mov	r5, r2
 80286c6:	688a      	ldr	r2, [r1, #8]
 80286c8:	4680      	mov	r8, r0
 80286ca:	460c      	mov	r4, r1
 80286cc:	b932      	cbnz	r2, 80286dc <_scanf_chars+0x1c>
 80286ce:	698a      	ldr	r2, [r1, #24]
 80286d0:	2a00      	cmp	r2, #0
 80286d2:	bf0c      	ite	eq
 80286d4:	2201      	moveq	r2, #1
 80286d6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80286da:	608a      	str	r2, [r1, #8]
 80286dc:	6822      	ldr	r2, [r4, #0]
 80286de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8028770 <_scanf_chars+0xb0>
 80286e2:	06d1      	lsls	r1, r2, #27
 80286e4:	bf5f      	itttt	pl
 80286e6:	681a      	ldrpl	r2, [r3, #0]
 80286e8:	1d11      	addpl	r1, r2, #4
 80286ea:	6019      	strpl	r1, [r3, #0]
 80286ec:	6816      	ldrpl	r6, [r2, #0]
 80286ee:	2700      	movs	r7, #0
 80286f0:	69a0      	ldr	r0, [r4, #24]
 80286f2:	b188      	cbz	r0, 8028718 <_scanf_chars+0x58>
 80286f4:	2801      	cmp	r0, #1
 80286f6:	d107      	bne.n	8028708 <_scanf_chars+0x48>
 80286f8:	682a      	ldr	r2, [r5, #0]
 80286fa:	7811      	ldrb	r1, [r2, #0]
 80286fc:	6962      	ldr	r2, [r4, #20]
 80286fe:	5c52      	ldrb	r2, [r2, r1]
 8028700:	b952      	cbnz	r2, 8028718 <_scanf_chars+0x58>
 8028702:	2f00      	cmp	r7, #0
 8028704:	d031      	beq.n	802876a <_scanf_chars+0xaa>
 8028706:	e022      	b.n	802874e <_scanf_chars+0x8e>
 8028708:	2802      	cmp	r0, #2
 802870a:	d120      	bne.n	802874e <_scanf_chars+0x8e>
 802870c:	682b      	ldr	r3, [r5, #0]
 802870e:	781b      	ldrb	r3, [r3, #0]
 8028710:	f813 3009 	ldrb.w	r3, [r3, r9]
 8028714:	071b      	lsls	r3, r3, #28
 8028716:	d41a      	bmi.n	802874e <_scanf_chars+0x8e>
 8028718:	6823      	ldr	r3, [r4, #0]
 802871a:	06da      	lsls	r2, r3, #27
 802871c:	bf5e      	ittt	pl
 802871e:	682b      	ldrpl	r3, [r5, #0]
 8028720:	781b      	ldrbpl	r3, [r3, #0]
 8028722:	f806 3b01 	strbpl.w	r3, [r6], #1
 8028726:	682a      	ldr	r2, [r5, #0]
 8028728:	686b      	ldr	r3, [r5, #4]
 802872a:	3201      	adds	r2, #1
 802872c:	602a      	str	r2, [r5, #0]
 802872e:	68a2      	ldr	r2, [r4, #8]
 8028730:	3b01      	subs	r3, #1
 8028732:	3a01      	subs	r2, #1
 8028734:	606b      	str	r3, [r5, #4]
 8028736:	3701      	adds	r7, #1
 8028738:	60a2      	str	r2, [r4, #8]
 802873a:	b142      	cbz	r2, 802874e <_scanf_chars+0x8e>
 802873c:	2b00      	cmp	r3, #0
 802873e:	dcd7      	bgt.n	80286f0 <_scanf_chars+0x30>
 8028740:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028744:	4629      	mov	r1, r5
 8028746:	4640      	mov	r0, r8
 8028748:	4798      	blx	r3
 802874a:	2800      	cmp	r0, #0
 802874c:	d0d0      	beq.n	80286f0 <_scanf_chars+0x30>
 802874e:	6823      	ldr	r3, [r4, #0]
 8028750:	f013 0310 	ands.w	r3, r3, #16
 8028754:	d105      	bne.n	8028762 <_scanf_chars+0xa2>
 8028756:	68e2      	ldr	r2, [r4, #12]
 8028758:	3201      	adds	r2, #1
 802875a:	60e2      	str	r2, [r4, #12]
 802875c:	69a2      	ldr	r2, [r4, #24]
 802875e:	b102      	cbz	r2, 8028762 <_scanf_chars+0xa2>
 8028760:	7033      	strb	r3, [r6, #0]
 8028762:	6923      	ldr	r3, [r4, #16]
 8028764:	443b      	add	r3, r7
 8028766:	6123      	str	r3, [r4, #16]
 8028768:	2000      	movs	r0, #0
 802876a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802876e:	bf00      	nop
 8028770:	0802d779 	.word	0x0802d779

08028774 <_scanf_i>:
 8028774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028778:	4698      	mov	r8, r3
 802877a:	4b76      	ldr	r3, [pc, #472]	; (8028954 <_scanf_i+0x1e0>)
 802877c:	460c      	mov	r4, r1
 802877e:	4682      	mov	sl, r0
 8028780:	4616      	mov	r6, r2
 8028782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028786:	b087      	sub	sp, #28
 8028788:	ab03      	add	r3, sp, #12
 802878a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802878e:	4b72      	ldr	r3, [pc, #456]	; (8028958 <_scanf_i+0x1e4>)
 8028790:	69a1      	ldr	r1, [r4, #24]
 8028792:	4a72      	ldr	r2, [pc, #456]	; (802895c <_scanf_i+0x1e8>)
 8028794:	2903      	cmp	r1, #3
 8028796:	bf18      	it	ne
 8028798:	461a      	movne	r2, r3
 802879a:	68a3      	ldr	r3, [r4, #8]
 802879c:	9201      	str	r2, [sp, #4]
 802879e:	1e5a      	subs	r2, r3, #1
 80287a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80287a4:	bf88      	it	hi
 80287a6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80287aa:	4627      	mov	r7, r4
 80287ac:	bf82      	ittt	hi
 80287ae:	eb03 0905 	addhi.w	r9, r3, r5
 80287b2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80287b6:	60a3      	strhi	r3, [r4, #8]
 80287b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80287bc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80287c0:	bf98      	it	ls
 80287c2:	f04f 0900 	movls.w	r9, #0
 80287c6:	6023      	str	r3, [r4, #0]
 80287c8:	463d      	mov	r5, r7
 80287ca:	f04f 0b00 	mov.w	fp, #0
 80287ce:	6831      	ldr	r1, [r6, #0]
 80287d0:	ab03      	add	r3, sp, #12
 80287d2:	7809      	ldrb	r1, [r1, #0]
 80287d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80287d8:	2202      	movs	r2, #2
 80287da:	f7d7 fd31 	bl	8000240 <memchr>
 80287de:	b328      	cbz	r0, 802882c <_scanf_i+0xb8>
 80287e0:	f1bb 0f01 	cmp.w	fp, #1
 80287e4:	d159      	bne.n	802889a <_scanf_i+0x126>
 80287e6:	6862      	ldr	r2, [r4, #4]
 80287e8:	b92a      	cbnz	r2, 80287f6 <_scanf_i+0x82>
 80287ea:	6822      	ldr	r2, [r4, #0]
 80287ec:	2308      	movs	r3, #8
 80287ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80287f2:	6063      	str	r3, [r4, #4]
 80287f4:	6022      	str	r2, [r4, #0]
 80287f6:	6822      	ldr	r2, [r4, #0]
 80287f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80287fc:	6022      	str	r2, [r4, #0]
 80287fe:	68a2      	ldr	r2, [r4, #8]
 8028800:	1e51      	subs	r1, r2, #1
 8028802:	60a1      	str	r1, [r4, #8]
 8028804:	b192      	cbz	r2, 802882c <_scanf_i+0xb8>
 8028806:	6832      	ldr	r2, [r6, #0]
 8028808:	1c51      	adds	r1, r2, #1
 802880a:	6031      	str	r1, [r6, #0]
 802880c:	7812      	ldrb	r2, [r2, #0]
 802880e:	f805 2b01 	strb.w	r2, [r5], #1
 8028812:	6872      	ldr	r2, [r6, #4]
 8028814:	3a01      	subs	r2, #1
 8028816:	2a00      	cmp	r2, #0
 8028818:	6072      	str	r2, [r6, #4]
 802881a:	dc07      	bgt.n	802882c <_scanf_i+0xb8>
 802881c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8028820:	4631      	mov	r1, r6
 8028822:	4650      	mov	r0, sl
 8028824:	4790      	blx	r2
 8028826:	2800      	cmp	r0, #0
 8028828:	f040 8085 	bne.w	8028936 <_scanf_i+0x1c2>
 802882c:	f10b 0b01 	add.w	fp, fp, #1
 8028830:	f1bb 0f03 	cmp.w	fp, #3
 8028834:	d1cb      	bne.n	80287ce <_scanf_i+0x5a>
 8028836:	6863      	ldr	r3, [r4, #4]
 8028838:	b90b      	cbnz	r3, 802883e <_scanf_i+0xca>
 802883a:	230a      	movs	r3, #10
 802883c:	6063      	str	r3, [r4, #4]
 802883e:	6863      	ldr	r3, [r4, #4]
 8028840:	4947      	ldr	r1, [pc, #284]	; (8028960 <_scanf_i+0x1ec>)
 8028842:	6960      	ldr	r0, [r4, #20]
 8028844:	1ac9      	subs	r1, r1, r3
 8028846:	f000 f8a7 	bl	8028998 <__sccl>
 802884a:	f04f 0b00 	mov.w	fp, #0
 802884e:	68a3      	ldr	r3, [r4, #8]
 8028850:	6822      	ldr	r2, [r4, #0]
 8028852:	2b00      	cmp	r3, #0
 8028854:	d03d      	beq.n	80288d2 <_scanf_i+0x15e>
 8028856:	6831      	ldr	r1, [r6, #0]
 8028858:	6960      	ldr	r0, [r4, #20]
 802885a:	f891 c000 	ldrb.w	ip, [r1]
 802885e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028862:	2800      	cmp	r0, #0
 8028864:	d035      	beq.n	80288d2 <_scanf_i+0x15e>
 8028866:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802886a:	d124      	bne.n	80288b6 <_scanf_i+0x142>
 802886c:	0510      	lsls	r0, r2, #20
 802886e:	d522      	bpl.n	80288b6 <_scanf_i+0x142>
 8028870:	f10b 0b01 	add.w	fp, fp, #1
 8028874:	f1b9 0f00 	cmp.w	r9, #0
 8028878:	d003      	beq.n	8028882 <_scanf_i+0x10e>
 802887a:	3301      	adds	r3, #1
 802887c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8028880:	60a3      	str	r3, [r4, #8]
 8028882:	6873      	ldr	r3, [r6, #4]
 8028884:	3b01      	subs	r3, #1
 8028886:	2b00      	cmp	r3, #0
 8028888:	6073      	str	r3, [r6, #4]
 802888a:	dd1b      	ble.n	80288c4 <_scanf_i+0x150>
 802888c:	6833      	ldr	r3, [r6, #0]
 802888e:	3301      	adds	r3, #1
 8028890:	6033      	str	r3, [r6, #0]
 8028892:	68a3      	ldr	r3, [r4, #8]
 8028894:	3b01      	subs	r3, #1
 8028896:	60a3      	str	r3, [r4, #8]
 8028898:	e7d9      	b.n	802884e <_scanf_i+0xda>
 802889a:	f1bb 0f02 	cmp.w	fp, #2
 802889e:	d1ae      	bne.n	80287fe <_scanf_i+0x8a>
 80288a0:	6822      	ldr	r2, [r4, #0]
 80288a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80288a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80288aa:	d1bf      	bne.n	802882c <_scanf_i+0xb8>
 80288ac:	2310      	movs	r3, #16
 80288ae:	6063      	str	r3, [r4, #4]
 80288b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80288b4:	e7a2      	b.n	80287fc <_scanf_i+0x88>
 80288b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80288ba:	6022      	str	r2, [r4, #0]
 80288bc:	780b      	ldrb	r3, [r1, #0]
 80288be:	f805 3b01 	strb.w	r3, [r5], #1
 80288c2:	e7de      	b.n	8028882 <_scanf_i+0x10e>
 80288c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80288c8:	4631      	mov	r1, r6
 80288ca:	4650      	mov	r0, sl
 80288cc:	4798      	blx	r3
 80288ce:	2800      	cmp	r0, #0
 80288d0:	d0df      	beq.n	8028892 <_scanf_i+0x11e>
 80288d2:	6823      	ldr	r3, [r4, #0]
 80288d4:	05db      	lsls	r3, r3, #23
 80288d6:	d50d      	bpl.n	80288f4 <_scanf_i+0x180>
 80288d8:	42bd      	cmp	r5, r7
 80288da:	d909      	bls.n	80288f0 <_scanf_i+0x17c>
 80288dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80288e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80288e4:	4632      	mov	r2, r6
 80288e6:	4650      	mov	r0, sl
 80288e8:	4798      	blx	r3
 80288ea:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80288ee:	464d      	mov	r5, r9
 80288f0:	42bd      	cmp	r5, r7
 80288f2:	d02d      	beq.n	8028950 <_scanf_i+0x1dc>
 80288f4:	6822      	ldr	r2, [r4, #0]
 80288f6:	f012 0210 	ands.w	r2, r2, #16
 80288fa:	d113      	bne.n	8028924 <_scanf_i+0x1b0>
 80288fc:	702a      	strb	r2, [r5, #0]
 80288fe:	6863      	ldr	r3, [r4, #4]
 8028900:	9e01      	ldr	r6, [sp, #4]
 8028902:	4639      	mov	r1, r7
 8028904:	4650      	mov	r0, sl
 8028906:	47b0      	blx	r6
 8028908:	6821      	ldr	r1, [r4, #0]
 802890a:	f8d8 3000 	ldr.w	r3, [r8]
 802890e:	f011 0f20 	tst.w	r1, #32
 8028912:	d013      	beq.n	802893c <_scanf_i+0x1c8>
 8028914:	1d1a      	adds	r2, r3, #4
 8028916:	f8c8 2000 	str.w	r2, [r8]
 802891a:	681b      	ldr	r3, [r3, #0]
 802891c:	6018      	str	r0, [r3, #0]
 802891e:	68e3      	ldr	r3, [r4, #12]
 8028920:	3301      	adds	r3, #1
 8028922:	60e3      	str	r3, [r4, #12]
 8028924:	1bed      	subs	r5, r5, r7
 8028926:	44ab      	add	fp, r5
 8028928:	6925      	ldr	r5, [r4, #16]
 802892a:	445d      	add	r5, fp
 802892c:	6125      	str	r5, [r4, #16]
 802892e:	2000      	movs	r0, #0
 8028930:	b007      	add	sp, #28
 8028932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028936:	f04f 0b00 	mov.w	fp, #0
 802893a:	e7ca      	b.n	80288d2 <_scanf_i+0x15e>
 802893c:	1d1a      	adds	r2, r3, #4
 802893e:	f8c8 2000 	str.w	r2, [r8]
 8028942:	681b      	ldr	r3, [r3, #0]
 8028944:	f011 0f01 	tst.w	r1, #1
 8028948:	bf14      	ite	ne
 802894a:	8018      	strhne	r0, [r3, #0]
 802894c:	6018      	streq	r0, [r3, #0]
 802894e:	e7e6      	b.n	802891e <_scanf_i+0x1aa>
 8028950:	2001      	movs	r0, #1
 8028952:	e7ed      	b.n	8028930 <_scanf_i+0x1bc>
 8028954:	0802d008 	.word	0x0802d008
 8028958:	08025b89 	.word	0x08025b89
 802895c:	0802594d 	.word	0x0802594d
 8028960:	0802dc96 	.word	0x0802dc96

08028964 <_read_r>:
 8028964:	b538      	push	{r3, r4, r5, lr}
 8028966:	4d07      	ldr	r5, [pc, #28]	; (8028984 <_read_r+0x20>)
 8028968:	4604      	mov	r4, r0
 802896a:	4608      	mov	r0, r1
 802896c:	4611      	mov	r1, r2
 802896e:	2200      	movs	r2, #0
 8028970:	602a      	str	r2, [r5, #0]
 8028972:	461a      	mov	r2, r3
 8028974:	f7d9 fdfc 	bl	8002570 <_read>
 8028978:	1c43      	adds	r3, r0, #1
 802897a:	d102      	bne.n	8028982 <_read_r+0x1e>
 802897c:	682b      	ldr	r3, [r5, #0]
 802897e:	b103      	cbz	r3, 8028982 <_read_r+0x1e>
 8028980:	6023      	str	r3, [r4, #0]
 8028982:	bd38      	pop	{r3, r4, r5, pc}
 8028984:	2001ae44 	.word	0x2001ae44

08028988 <nan>:
 8028988:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8028990 <nan+0x8>
 802898c:	4770      	bx	lr
 802898e:	bf00      	nop
 8028990:	00000000 	.word	0x00000000
 8028994:	7ff80000 	.word	0x7ff80000

08028998 <__sccl>:
 8028998:	b570      	push	{r4, r5, r6, lr}
 802899a:	780b      	ldrb	r3, [r1, #0]
 802899c:	4604      	mov	r4, r0
 802899e:	2b5e      	cmp	r3, #94	; 0x5e
 80289a0:	bf0b      	itete	eq
 80289a2:	784b      	ldrbeq	r3, [r1, #1]
 80289a4:	1c48      	addne	r0, r1, #1
 80289a6:	1c88      	addeq	r0, r1, #2
 80289a8:	2200      	movne	r2, #0
 80289aa:	bf08      	it	eq
 80289ac:	2201      	moveq	r2, #1
 80289ae:	1e61      	subs	r1, r4, #1
 80289b0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80289b4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80289b8:	42a9      	cmp	r1, r5
 80289ba:	d1fb      	bne.n	80289b4 <__sccl+0x1c>
 80289bc:	b90b      	cbnz	r3, 80289c2 <__sccl+0x2a>
 80289be:	3801      	subs	r0, #1
 80289c0:	bd70      	pop	{r4, r5, r6, pc}
 80289c2:	f082 0201 	eor.w	r2, r2, #1
 80289c6:	54e2      	strb	r2, [r4, r3]
 80289c8:	4605      	mov	r5, r0
 80289ca:	4628      	mov	r0, r5
 80289cc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80289d0:	292d      	cmp	r1, #45	; 0x2d
 80289d2:	d006      	beq.n	80289e2 <__sccl+0x4a>
 80289d4:	295d      	cmp	r1, #93	; 0x5d
 80289d6:	d0f3      	beq.n	80289c0 <__sccl+0x28>
 80289d8:	b909      	cbnz	r1, 80289de <__sccl+0x46>
 80289da:	4628      	mov	r0, r5
 80289dc:	e7f0      	b.n	80289c0 <__sccl+0x28>
 80289de:	460b      	mov	r3, r1
 80289e0:	e7f1      	b.n	80289c6 <__sccl+0x2e>
 80289e2:	786e      	ldrb	r6, [r5, #1]
 80289e4:	2e5d      	cmp	r6, #93	; 0x5d
 80289e6:	d0fa      	beq.n	80289de <__sccl+0x46>
 80289e8:	42b3      	cmp	r3, r6
 80289ea:	dcf8      	bgt.n	80289de <__sccl+0x46>
 80289ec:	3502      	adds	r5, #2
 80289ee:	4619      	mov	r1, r3
 80289f0:	3101      	adds	r1, #1
 80289f2:	428e      	cmp	r6, r1
 80289f4:	5462      	strb	r2, [r4, r1]
 80289f6:	dcfb      	bgt.n	80289f0 <__sccl+0x58>
 80289f8:	1af1      	subs	r1, r6, r3
 80289fa:	3901      	subs	r1, #1
 80289fc:	1c58      	adds	r0, r3, #1
 80289fe:	42b3      	cmp	r3, r6
 8028a00:	bfa8      	it	ge
 8028a02:	2100      	movge	r1, #0
 8028a04:	1843      	adds	r3, r0, r1
 8028a06:	e7e0      	b.n	80289ca <__sccl+0x32>

08028a08 <__submore>:
 8028a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028a0c:	460c      	mov	r4, r1
 8028a0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028a14:	4299      	cmp	r1, r3
 8028a16:	d11d      	bne.n	8028a54 <__submore+0x4c>
 8028a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8028a1c:	f7fb f80a 	bl	8023a34 <_malloc_r>
 8028a20:	b918      	cbnz	r0, 8028a2a <__submore+0x22>
 8028a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028a2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8028a30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8028a34:	6360      	str	r0, [r4, #52]	; 0x34
 8028a36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8028a3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8028a3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8028a42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8028a46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8028a4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8028a4e:	6020      	str	r0, [r4, #0]
 8028a50:	2000      	movs	r0, #0
 8028a52:	e7e8      	b.n	8028a26 <__submore+0x1e>
 8028a54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8028a56:	0077      	lsls	r7, r6, #1
 8028a58:	463a      	mov	r2, r7
 8028a5a:	f000 f949 	bl	8028cf0 <_realloc_r>
 8028a5e:	4605      	mov	r5, r0
 8028a60:	2800      	cmp	r0, #0
 8028a62:	d0de      	beq.n	8028a22 <__submore+0x1a>
 8028a64:	eb00 0806 	add.w	r8, r0, r6
 8028a68:	4601      	mov	r1, r0
 8028a6a:	4632      	mov	r2, r6
 8028a6c:	4640      	mov	r0, r8
 8028a6e:	f7fa ff90 	bl	8023992 <memcpy>
 8028a72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8028a76:	f8c4 8000 	str.w	r8, [r4]
 8028a7a:	e7e9      	b.n	8028a50 <__submore+0x48>

08028a7c <__swbuf_r>:
 8028a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028a7e:	460e      	mov	r6, r1
 8028a80:	4614      	mov	r4, r2
 8028a82:	4605      	mov	r5, r0
 8028a84:	b118      	cbz	r0, 8028a8e <__swbuf_r+0x12>
 8028a86:	6983      	ldr	r3, [r0, #24]
 8028a88:	b90b      	cbnz	r3, 8028a8e <__swbuf_r+0x12>
 8028a8a:	f7fa fead 	bl	80237e8 <__sinit>
 8028a8e:	4b21      	ldr	r3, [pc, #132]	; (8028b14 <__swbuf_r+0x98>)
 8028a90:	429c      	cmp	r4, r3
 8028a92:	d12b      	bne.n	8028aec <__swbuf_r+0x70>
 8028a94:	686c      	ldr	r4, [r5, #4]
 8028a96:	69a3      	ldr	r3, [r4, #24]
 8028a98:	60a3      	str	r3, [r4, #8]
 8028a9a:	89a3      	ldrh	r3, [r4, #12]
 8028a9c:	071a      	lsls	r2, r3, #28
 8028a9e:	d52f      	bpl.n	8028b00 <__swbuf_r+0x84>
 8028aa0:	6923      	ldr	r3, [r4, #16]
 8028aa2:	b36b      	cbz	r3, 8028b00 <__swbuf_r+0x84>
 8028aa4:	6923      	ldr	r3, [r4, #16]
 8028aa6:	6820      	ldr	r0, [r4, #0]
 8028aa8:	1ac0      	subs	r0, r0, r3
 8028aaa:	6963      	ldr	r3, [r4, #20]
 8028aac:	b2f6      	uxtb	r6, r6
 8028aae:	4283      	cmp	r3, r0
 8028ab0:	4637      	mov	r7, r6
 8028ab2:	dc04      	bgt.n	8028abe <__swbuf_r+0x42>
 8028ab4:	4621      	mov	r1, r4
 8028ab6:	4628      	mov	r0, r5
 8028ab8:	f7fe f85c 	bl	8026b74 <_fflush_r>
 8028abc:	bb30      	cbnz	r0, 8028b0c <__swbuf_r+0x90>
 8028abe:	68a3      	ldr	r3, [r4, #8]
 8028ac0:	3b01      	subs	r3, #1
 8028ac2:	60a3      	str	r3, [r4, #8]
 8028ac4:	6823      	ldr	r3, [r4, #0]
 8028ac6:	1c5a      	adds	r2, r3, #1
 8028ac8:	6022      	str	r2, [r4, #0]
 8028aca:	701e      	strb	r6, [r3, #0]
 8028acc:	6963      	ldr	r3, [r4, #20]
 8028ace:	3001      	adds	r0, #1
 8028ad0:	4283      	cmp	r3, r0
 8028ad2:	d004      	beq.n	8028ade <__swbuf_r+0x62>
 8028ad4:	89a3      	ldrh	r3, [r4, #12]
 8028ad6:	07db      	lsls	r3, r3, #31
 8028ad8:	d506      	bpl.n	8028ae8 <__swbuf_r+0x6c>
 8028ada:	2e0a      	cmp	r6, #10
 8028adc:	d104      	bne.n	8028ae8 <__swbuf_r+0x6c>
 8028ade:	4621      	mov	r1, r4
 8028ae0:	4628      	mov	r0, r5
 8028ae2:	f7fe f847 	bl	8026b74 <_fflush_r>
 8028ae6:	b988      	cbnz	r0, 8028b0c <__swbuf_r+0x90>
 8028ae8:	4638      	mov	r0, r7
 8028aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028aec:	4b0a      	ldr	r3, [pc, #40]	; (8028b18 <__swbuf_r+0x9c>)
 8028aee:	429c      	cmp	r4, r3
 8028af0:	d101      	bne.n	8028af6 <__swbuf_r+0x7a>
 8028af2:	68ac      	ldr	r4, [r5, #8]
 8028af4:	e7cf      	b.n	8028a96 <__swbuf_r+0x1a>
 8028af6:	4b09      	ldr	r3, [pc, #36]	; (8028b1c <__swbuf_r+0xa0>)
 8028af8:	429c      	cmp	r4, r3
 8028afa:	bf08      	it	eq
 8028afc:	68ec      	ldreq	r4, [r5, #12]
 8028afe:	e7ca      	b.n	8028a96 <__swbuf_r+0x1a>
 8028b00:	4621      	mov	r1, r4
 8028b02:	4628      	mov	r0, r5
 8028b04:	f000 f81a 	bl	8028b3c <__swsetup_r>
 8028b08:	2800      	cmp	r0, #0
 8028b0a:	d0cb      	beq.n	8028aa4 <__swbuf_r+0x28>
 8028b0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8028b10:	e7ea      	b.n	8028ae8 <__swbuf_r+0x6c>
 8028b12:	bf00      	nop
 8028b14:	0802d89c 	.word	0x0802d89c
 8028b18:	0802d8bc 	.word	0x0802d8bc
 8028b1c:	0802d87c 	.word	0x0802d87c

08028b20 <__ascii_wctomb>:
 8028b20:	b149      	cbz	r1, 8028b36 <__ascii_wctomb+0x16>
 8028b22:	2aff      	cmp	r2, #255	; 0xff
 8028b24:	bf85      	ittet	hi
 8028b26:	238a      	movhi	r3, #138	; 0x8a
 8028b28:	6003      	strhi	r3, [r0, #0]
 8028b2a:	700a      	strbls	r2, [r1, #0]
 8028b2c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8028b30:	bf98      	it	ls
 8028b32:	2001      	movls	r0, #1
 8028b34:	4770      	bx	lr
 8028b36:	4608      	mov	r0, r1
 8028b38:	4770      	bx	lr
	...

08028b3c <__swsetup_r>:
 8028b3c:	4b32      	ldr	r3, [pc, #200]	; (8028c08 <__swsetup_r+0xcc>)
 8028b3e:	b570      	push	{r4, r5, r6, lr}
 8028b40:	681d      	ldr	r5, [r3, #0]
 8028b42:	4606      	mov	r6, r0
 8028b44:	460c      	mov	r4, r1
 8028b46:	b125      	cbz	r5, 8028b52 <__swsetup_r+0x16>
 8028b48:	69ab      	ldr	r3, [r5, #24]
 8028b4a:	b913      	cbnz	r3, 8028b52 <__swsetup_r+0x16>
 8028b4c:	4628      	mov	r0, r5
 8028b4e:	f7fa fe4b 	bl	80237e8 <__sinit>
 8028b52:	4b2e      	ldr	r3, [pc, #184]	; (8028c0c <__swsetup_r+0xd0>)
 8028b54:	429c      	cmp	r4, r3
 8028b56:	d10f      	bne.n	8028b78 <__swsetup_r+0x3c>
 8028b58:	686c      	ldr	r4, [r5, #4]
 8028b5a:	89a3      	ldrh	r3, [r4, #12]
 8028b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028b60:	0719      	lsls	r1, r3, #28
 8028b62:	d42c      	bmi.n	8028bbe <__swsetup_r+0x82>
 8028b64:	06dd      	lsls	r5, r3, #27
 8028b66:	d411      	bmi.n	8028b8c <__swsetup_r+0x50>
 8028b68:	2309      	movs	r3, #9
 8028b6a:	6033      	str	r3, [r6, #0]
 8028b6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028b70:	81a3      	strh	r3, [r4, #12]
 8028b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028b76:	e03e      	b.n	8028bf6 <__swsetup_r+0xba>
 8028b78:	4b25      	ldr	r3, [pc, #148]	; (8028c10 <__swsetup_r+0xd4>)
 8028b7a:	429c      	cmp	r4, r3
 8028b7c:	d101      	bne.n	8028b82 <__swsetup_r+0x46>
 8028b7e:	68ac      	ldr	r4, [r5, #8]
 8028b80:	e7eb      	b.n	8028b5a <__swsetup_r+0x1e>
 8028b82:	4b24      	ldr	r3, [pc, #144]	; (8028c14 <__swsetup_r+0xd8>)
 8028b84:	429c      	cmp	r4, r3
 8028b86:	bf08      	it	eq
 8028b88:	68ec      	ldreq	r4, [r5, #12]
 8028b8a:	e7e6      	b.n	8028b5a <__swsetup_r+0x1e>
 8028b8c:	0758      	lsls	r0, r3, #29
 8028b8e:	d512      	bpl.n	8028bb6 <__swsetup_r+0x7a>
 8028b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028b92:	b141      	cbz	r1, 8028ba6 <__swsetup_r+0x6a>
 8028b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028b98:	4299      	cmp	r1, r3
 8028b9a:	d002      	beq.n	8028ba2 <__swsetup_r+0x66>
 8028b9c:	4630      	mov	r0, r6
 8028b9e:	f7ff f8bb 	bl	8027d18 <_free_r>
 8028ba2:	2300      	movs	r3, #0
 8028ba4:	6363      	str	r3, [r4, #52]	; 0x34
 8028ba6:	89a3      	ldrh	r3, [r4, #12]
 8028ba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028bac:	81a3      	strh	r3, [r4, #12]
 8028bae:	2300      	movs	r3, #0
 8028bb0:	6063      	str	r3, [r4, #4]
 8028bb2:	6923      	ldr	r3, [r4, #16]
 8028bb4:	6023      	str	r3, [r4, #0]
 8028bb6:	89a3      	ldrh	r3, [r4, #12]
 8028bb8:	f043 0308 	orr.w	r3, r3, #8
 8028bbc:	81a3      	strh	r3, [r4, #12]
 8028bbe:	6923      	ldr	r3, [r4, #16]
 8028bc0:	b94b      	cbnz	r3, 8028bd6 <__swsetup_r+0x9a>
 8028bc2:	89a3      	ldrh	r3, [r4, #12]
 8028bc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028bcc:	d003      	beq.n	8028bd6 <__swsetup_r+0x9a>
 8028bce:	4621      	mov	r1, r4
 8028bd0:	4630      	mov	r0, r6
 8028bd2:	f000 f84d 	bl	8028c70 <__smakebuf_r>
 8028bd6:	89a0      	ldrh	r0, [r4, #12]
 8028bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028bdc:	f010 0301 	ands.w	r3, r0, #1
 8028be0:	d00a      	beq.n	8028bf8 <__swsetup_r+0xbc>
 8028be2:	2300      	movs	r3, #0
 8028be4:	60a3      	str	r3, [r4, #8]
 8028be6:	6963      	ldr	r3, [r4, #20]
 8028be8:	425b      	negs	r3, r3
 8028bea:	61a3      	str	r3, [r4, #24]
 8028bec:	6923      	ldr	r3, [r4, #16]
 8028bee:	b943      	cbnz	r3, 8028c02 <__swsetup_r+0xc6>
 8028bf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8028bf4:	d1ba      	bne.n	8028b6c <__swsetup_r+0x30>
 8028bf6:	bd70      	pop	{r4, r5, r6, pc}
 8028bf8:	0781      	lsls	r1, r0, #30
 8028bfa:	bf58      	it	pl
 8028bfc:	6963      	ldrpl	r3, [r4, #20]
 8028bfe:	60a3      	str	r3, [r4, #8]
 8028c00:	e7f4      	b.n	8028bec <__swsetup_r+0xb0>
 8028c02:	2000      	movs	r0, #0
 8028c04:	e7f7      	b.n	8028bf6 <__swsetup_r+0xba>
 8028c06:	bf00      	nop
 8028c08:	200000fc 	.word	0x200000fc
 8028c0c:	0802d89c 	.word	0x0802d89c
 8028c10:	0802d8bc 	.word	0x0802d8bc
 8028c14:	0802d87c 	.word	0x0802d87c

08028c18 <abort>:
 8028c18:	b508      	push	{r3, lr}
 8028c1a:	2006      	movs	r0, #6
 8028c1c:	f000 f8c0 	bl	8028da0 <raise>
 8028c20:	2001      	movs	r0, #1
 8028c22:	f7d9 fc9b 	bl	800255c <_exit>

08028c26 <__swhatbuf_r>:
 8028c26:	b570      	push	{r4, r5, r6, lr}
 8028c28:	460e      	mov	r6, r1
 8028c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028c2e:	2900      	cmp	r1, #0
 8028c30:	b096      	sub	sp, #88	; 0x58
 8028c32:	4614      	mov	r4, r2
 8028c34:	461d      	mov	r5, r3
 8028c36:	da08      	bge.n	8028c4a <__swhatbuf_r+0x24>
 8028c38:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8028c3c:	2200      	movs	r2, #0
 8028c3e:	602a      	str	r2, [r5, #0]
 8028c40:	061a      	lsls	r2, r3, #24
 8028c42:	d410      	bmi.n	8028c66 <__swhatbuf_r+0x40>
 8028c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028c48:	e00e      	b.n	8028c68 <__swhatbuf_r+0x42>
 8028c4a:	466a      	mov	r2, sp
 8028c4c:	f000 f8c4 	bl	8028dd8 <_fstat_r>
 8028c50:	2800      	cmp	r0, #0
 8028c52:	dbf1      	blt.n	8028c38 <__swhatbuf_r+0x12>
 8028c54:	9a01      	ldr	r2, [sp, #4]
 8028c56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028c5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028c5e:	425a      	negs	r2, r3
 8028c60:	415a      	adcs	r2, r3
 8028c62:	602a      	str	r2, [r5, #0]
 8028c64:	e7ee      	b.n	8028c44 <__swhatbuf_r+0x1e>
 8028c66:	2340      	movs	r3, #64	; 0x40
 8028c68:	2000      	movs	r0, #0
 8028c6a:	6023      	str	r3, [r4, #0]
 8028c6c:	b016      	add	sp, #88	; 0x58
 8028c6e:	bd70      	pop	{r4, r5, r6, pc}

08028c70 <__smakebuf_r>:
 8028c70:	898b      	ldrh	r3, [r1, #12]
 8028c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028c74:	079d      	lsls	r5, r3, #30
 8028c76:	4606      	mov	r6, r0
 8028c78:	460c      	mov	r4, r1
 8028c7a:	d507      	bpl.n	8028c8c <__smakebuf_r+0x1c>
 8028c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028c80:	6023      	str	r3, [r4, #0]
 8028c82:	6123      	str	r3, [r4, #16]
 8028c84:	2301      	movs	r3, #1
 8028c86:	6163      	str	r3, [r4, #20]
 8028c88:	b002      	add	sp, #8
 8028c8a:	bd70      	pop	{r4, r5, r6, pc}
 8028c8c:	ab01      	add	r3, sp, #4
 8028c8e:	466a      	mov	r2, sp
 8028c90:	f7ff ffc9 	bl	8028c26 <__swhatbuf_r>
 8028c94:	9900      	ldr	r1, [sp, #0]
 8028c96:	4605      	mov	r5, r0
 8028c98:	4630      	mov	r0, r6
 8028c9a:	f7fa fecb 	bl	8023a34 <_malloc_r>
 8028c9e:	b948      	cbnz	r0, 8028cb4 <__smakebuf_r+0x44>
 8028ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028ca4:	059a      	lsls	r2, r3, #22
 8028ca6:	d4ef      	bmi.n	8028c88 <__smakebuf_r+0x18>
 8028ca8:	f023 0303 	bic.w	r3, r3, #3
 8028cac:	f043 0302 	orr.w	r3, r3, #2
 8028cb0:	81a3      	strh	r3, [r4, #12]
 8028cb2:	e7e3      	b.n	8028c7c <__smakebuf_r+0xc>
 8028cb4:	4b0d      	ldr	r3, [pc, #52]	; (8028cec <__smakebuf_r+0x7c>)
 8028cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8028cb8:	89a3      	ldrh	r3, [r4, #12]
 8028cba:	6020      	str	r0, [r4, #0]
 8028cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028cc0:	81a3      	strh	r3, [r4, #12]
 8028cc2:	9b00      	ldr	r3, [sp, #0]
 8028cc4:	6163      	str	r3, [r4, #20]
 8028cc6:	9b01      	ldr	r3, [sp, #4]
 8028cc8:	6120      	str	r0, [r4, #16]
 8028cca:	b15b      	cbz	r3, 8028ce4 <__smakebuf_r+0x74>
 8028ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028cd0:	4630      	mov	r0, r6
 8028cd2:	f000 f893 	bl	8028dfc <_isatty_r>
 8028cd6:	b128      	cbz	r0, 8028ce4 <__smakebuf_r+0x74>
 8028cd8:	89a3      	ldrh	r3, [r4, #12]
 8028cda:	f023 0303 	bic.w	r3, r3, #3
 8028cde:	f043 0301 	orr.w	r3, r3, #1
 8028ce2:	81a3      	strh	r3, [r4, #12]
 8028ce4:	89a0      	ldrh	r0, [r4, #12]
 8028ce6:	4305      	orrs	r5, r0
 8028ce8:	81a5      	strh	r5, [r4, #12]
 8028cea:	e7cd      	b.n	8028c88 <__smakebuf_r+0x18>
 8028cec:	08023781 	.word	0x08023781

08028cf0 <_realloc_r>:
 8028cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028cf4:	4680      	mov	r8, r0
 8028cf6:	4614      	mov	r4, r2
 8028cf8:	460e      	mov	r6, r1
 8028cfa:	b921      	cbnz	r1, 8028d06 <_realloc_r+0x16>
 8028cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028d00:	4611      	mov	r1, r2
 8028d02:	f7fa be97 	b.w	8023a34 <_malloc_r>
 8028d06:	b92a      	cbnz	r2, 8028d14 <_realloc_r+0x24>
 8028d08:	f7ff f806 	bl	8027d18 <_free_r>
 8028d0c:	4625      	mov	r5, r4
 8028d0e:	4628      	mov	r0, r5
 8028d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028d14:	f000 f882 	bl	8028e1c <_malloc_usable_size_r>
 8028d18:	4284      	cmp	r4, r0
 8028d1a:	4607      	mov	r7, r0
 8028d1c:	d802      	bhi.n	8028d24 <_realloc_r+0x34>
 8028d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8028d22:	d812      	bhi.n	8028d4a <_realloc_r+0x5a>
 8028d24:	4621      	mov	r1, r4
 8028d26:	4640      	mov	r0, r8
 8028d28:	f7fa fe84 	bl	8023a34 <_malloc_r>
 8028d2c:	4605      	mov	r5, r0
 8028d2e:	2800      	cmp	r0, #0
 8028d30:	d0ed      	beq.n	8028d0e <_realloc_r+0x1e>
 8028d32:	42bc      	cmp	r4, r7
 8028d34:	4622      	mov	r2, r4
 8028d36:	4631      	mov	r1, r6
 8028d38:	bf28      	it	cs
 8028d3a:	463a      	movcs	r2, r7
 8028d3c:	f7fa fe29 	bl	8023992 <memcpy>
 8028d40:	4631      	mov	r1, r6
 8028d42:	4640      	mov	r0, r8
 8028d44:	f7fe ffe8 	bl	8027d18 <_free_r>
 8028d48:	e7e1      	b.n	8028d0e <_realloc_r+0x1e>
 8028d4a:	4635      	mov	r5, r6
 8028d4c:	e7df      	b.n	8028d0e <_realloc_r+0x1e>

08028d4e <_raise_r>:
 8028d4e:	291f      	cmp	r1, #31
 8028d50:	b538      	push	{r3, r4, r5, lr}
 8028d52:	4604      	mov	r4, r0
 8028d54:	460d      	mov	r5, r1
 8028d56:	d904      	bls.n	8028d62 <_raise_r+0x14>
 8028d58:	2316      	movs	r3, #22
 8028d5a:	6003      	str	r3, [r0, #0]
 8028d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028d60:	bd38      	pop	{r3, r4, r5, pc}
 8028d62:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028d64:	b112      	cbz	r2, 8028d6c <_raise_r+0x1e>
 8028d66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028d6a:	b94b      	cbnz	r3, 8028d80 <_raise_r+0x32>
 8028d6c:	4620      	mov	r0, r4
 8028d6e:	f000 f831 	bl	8028dd4 <_getpid_r>
 8028d72:	462a      	mov	r2, r5
 8028d74:	4601      	mov	r1, r0
 8028d76:	4620      	mov	r0, r4
 8028d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028d7c:	f000 b818 	b.w	8028db0 <_kill_r>
 8028d80:	2b01      	cmp	r3, #1
 8028d82:	d00a      	beq.n	8028d9a <_raise_r+0x4c>
 8028d84:	1c59      	adds	r1, r3, #1
 8028d86:	d103      	bne.n	8028d90 <_raise_r+0x42>
 8028d88:	2316      	movs	r3, #22
 8028d8a:	6003      	str	r3, [r0, #0]
 8028d8c:	2001      	movs	r0, #1
 8028d8e:	e7e7      	b.n	8028d60 <_raise_r+0x12>
 8028d90:	2400      	movs	r4, #0
 8028d92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028d96:	4628      	mov	r0, r5
 8028d98:	4798      	blx	r3
 8028d9a:	2000      	movs	r0, #0
 8028d9c:	e7e0      	b.n	8028d60 <_raise_r+0x12>
	...

08028da0 <raise>:
 8028da0:	4b02      	ldr	r3, [pc, #8]	; (8028dac <raise+0xc>)
 8028da2:	4601      	mov	r1, r0
 8028da4:	6818      	ldr	r0, [r3, #0]
 8028da6:	f7ff bfd2 	b.w	8028d4e <_raise_r>
 8028daa:	bf00      	nop
 8028dac:	200000fc 	.word	0x200000fc

08028db0 <_kill_r>:
 8028db0:	b538      	push	{r3, r4, r5, lr}
 8028db2:	4d07      	ldr	r5, [pc, #28]	; (8028dd0 <_kill_r+0x20>)
 8028db4:	2300      	movs	r3, #0
 8028db6:	4604      	mov	r4, r0
 8028db8:	4608      	mov	r0, r1
 8028dba:	4611      	mov	r1, r2
 8028dbc:	602b      	str	r3, [r5, #0]
 8028dbe:	f7d9 fbbb 	bl	8002538 <_kill>
 8028dc2:	1c43      	adds	r3, r0, #1
 8028dc4:	d102      	bne.n	8028dcc <_kill_r+0x1c>
 8028dc6:	682b      	ldr	r3, [r5, #0]
 8028dc8:	b103      	cbz	r3, 8028dcc <_kill_r+0x1c>
 8028dca:	6023      	str	r3, [r4, #0]
 8028dcc:	bd38      	pop	{r3, r4, r5, pc}
 8028dce:	bf00      	nop
 8028dd0:	2001ae44 	.word	0x2001ae44

08028dd4 <_getpid_r>:
 8028dd4:	f7d9 bba8 	b.w	8002528 <_getpid>

08028dd8 <_fstat_r>:
 8028dd8:	b538      	push	{r3, r4, r5, lr}
 8028dda:	4d07      	ldr	r5, [pc, #28]	; (8028df8 <_fstat_r+0x20>)
 8028ddc:	2300      	movs	r3, #0
 8028dde:	4604      	mov	r4, r0
 8028de0:	4608      	mov	r0, r1
 8028de2:	4611      	mov	r1, r2
 8028de4:	602b      	str	r3, [r5, #0]
 8028de6:	f7d9 fc08 	bl	80025fa <_fstat>
 8028dea:	1c43      	adds	r3, r0, #1
 8028dec:	d102      	bne.n	8028df4 <_fstat_r+0x1c>
 8028dee:	682b      	ldr	r3, [r5, #0]
 8028df0:	b103      	cbz	r3, 8028df4 <_fstat_r+0x1c>
 8028df2:	6023      	str	r3, [r4, #0]
 8028df4:	bd38      	pop	{r3, r4, r5, pc}
 8028df6:	bf00      	nop
 8028df8:	2001ae44 	.word	0x2001ae44

08028dfc <_isatty_r>:
 8028dfc:	b538      	push	{r3, r4, r5, lr}
 8028dfe:	4d06      	ldr	r5, [pc, #24]	; (8028e18 <_isatty_r+0x1c>)
 8028e00:	2300      	movs	r3, #0
 8028e02:	4604      	mov	r4, r0
 8028e04:	4608      	mov	r0, r1
 8028e06:	602b      	str	r3, [r5, #0]
 8028e08:	f7d9 fc07 	bl	800261a <_isatty>
 8028e0c:	1c43      	adds	r3, r0, #1
 8028e0e:	d102      	bne.n	8028e16 <_isatty_r+0x1a>
 8028e10:	682b      	ldr	r3, [r5, #0]
 8028e12:	b103      	cbz	r3, 8028e16 <_isatty_r+0x1a>
 8028e14:	6023      	str	r3, [r4, #0]
 8028e16:	bd38      	pop	{r3, r4, r5, pc}
 8028e18:	2001ae44 	.word	0x2001ae44

08028e1c <_malloc_usable_size_r>:
 8028e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028e20:	1f18      	subs	r0, r3, #4
 8028e22:	2b00      	cmp	r3, #0
 8028e24:	bfbc      	itt	lt
 8028e26:	580b      	ldrlt	r3, [r1, r0]
 8028e28:	18c0      	addlt	r0, r0, r3
 8028e2a:	4770      	bx	lr

08028e2c <_init>:
 8028e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e2e:	bf00      	nop
 8028e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028e32:	bc08      	pop	{r3}
 8028e34:	469e      	mov	lr, r3
 8028e36:	4770      	bx	lr

08028e38 <_fini>:
 8028e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e3a:	bf00      	nop
 8028e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028e3e:	bc08      	pop	{r3}
 8028e40:	469e      	mov	lr, r3
 8028e42:	4770      	bx	lr
